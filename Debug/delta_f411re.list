
delta_f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08010010  08010010  00020010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104d8  080104d8  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104e0  080104e0  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104e0  080104e0  000204e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104e4  080104e4  000204e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  080104e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000260  08010744  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  08010744  000308c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132c4  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c52  00000000  00000000  00043550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  000470e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824e  00000000  00000000  00047ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001421e  00000000  00000000  0006012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917dc  00000000  00000000  0007434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105b28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  00105b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fff4 	.word	0x0800fff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800fff4 	.word	0x0800fff4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	homAprox = true;
 8000fbc:	4bd4      	ldr	r3, [pc, #848]	; (8001310 <homing+0x358>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000fc2:	4bd4      	ldr	r3, [pc, #848]	; (8001314 <homing+0x35c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000fc8:	4bd3      	ldr	r3, [pc, #844]	; (8001318 <homing+0x360>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000fce:	4bd3      	ldr	r3, [pc, #844]	; (800131c <homing+0x364>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000fd4:	4bd2      	ldr	r3, [pc, #840]	; (8001320 <homing+0x368>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	48d1      	ldr	r0, [pc, #836]	; (8001324 <homing+0x36c>)
 8000fe0:	f007 fc9a 	bl	8008918 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	48cf      	ldr	r0, [pc, #828]	; (8001328 <homing+0x370>)
 8000fea:	f007 fc95 	bl	8008918 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	48cd      	ldr	r0, [pc, #820]	; (8001328 <homing+0x370>)
 8000ff4:	f007 fc90 	bl	8008918 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f007 fa44 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000ffe:	2007      	movs	r0, #7
 8001000:	f007 fa41 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001004:	2008      	movs	r0, #8
 8001006:	f007 fa3e 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 800100a:	2009      	movs	r0, #9
 800100c:	f007 fa3b 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001010:	200a      	movs	r0, #10
 8001012:	f007 fa38 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001016:	2017      	movs	r0, #23
 8001018:	f007 fa35 	bl	8008486 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f007 fa32 	bl	8008486 <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8001022:	2100      	movs	r1, #0
 8001024:	48c1      	ldr	r0, [pc, #772]	; (800132c <homing+0x374>)
 8001026:	f008 fcb7 	bl	8009998 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 800102a:	2100      	movs	r1, #0
 800102c:	48c0      	ldr	r0, [pc, #768]	; (8001330 <homing+0x378>)
 800102e:	f008 fcb3 	bl	8009998 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8001032:	2100      	movs	r1, #0
 8001034:	48bf      	ldr	r0, [pc, #764]	; (8001334 <homing+0x37c>)
 8001036:	f008 fcaf 	bl	8009998 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm));
 800103a:	4bbf      	ldr	r3, [pc, #764]	; (8001338 <homing+0x380>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa68 	bl	8000514 <__aeabi_ui2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4bbc      	ldr	r3, [pc, #752]	; (800133c <homing+0x384>)
 800104a:	f7ff f927 	bl	800029c <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	a1ad      	add	r1, pc, #692	; (adr r1, 8001308 <homing+0x350>)
 8001054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	4bb6      	ldr	r3, [pc, #728]	; (8001340 <homing+0x388>)
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <homing+0x38c>)
 8001070:	f7ff faca 	bl	8000608 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	49b2      	ldr	r1, [pc, #712]	; (8001348 <homing+0x390>)
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4ba8      	ldr	r3, [pc, #672]	; (800133c <homing+0x384>)
 800109c:	f7ff f8fc 	bl	8000298 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	49a1      	ldr	r1, [pc, #644]	; (800132c <homing+0x374>)
 80010a6:	680c      	ldr	r4, [r1, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd5c 	bl	8000b68 <__aeabi_d2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010b4:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <homing+0x380>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa2b 	bl	8000514 <__aeabi_ui2d>
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b9e      	ldr	r3, [pc, #632]	; (800133c <homing+0x384>)
 80010c4:	f7ff f8ea 	bl	800029c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	a18e      	add	r1, pc, #568	; (adr r1, 8001308 <homing+0x350>)
 80010ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d2:	f7ff fbc3 	bl	800085c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	4b98      	ldr	r3, [pc, #608]	; (8001340 <homing+0x388>)
 80010e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <homing+0x38c>)
 80010ea:	f7ff fa8d 	bl	8000608 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4994      	ldr	r1, [pc, #592]	; (8001348 <homing+0x390>)
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b89      	ldr	r3, [pc, #548]	; (800133c <homing+0x384>)
 8001116:	f7ff f8bf 	bl	8000298 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd21 	bl	8000b68 <__aeabi_d2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	4a80      	ldr	r2, [pc, #512]	; (800132c <homing+0x374>)
 800112a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm));
 800112c:	4b82      	ldr	r3, [pc, #520]	; (8001338 <homing+0x380>)
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9ef 	bl	8000514 <__aeabi_ui2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <homing+0x384>)
 800113c:	f7ff f8ae 	bl	800029c <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	a170      	add	r1, pc, #448	; (adr r1, 8001308 <homing+0x350>)
 8001146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114a:	f7ff fb87 	bl	800085c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	4b7a      	ldr	r3, [pc, #488]	; (8001340 <homing+0x388>)
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b78      	ldr	r3, [pc, #480]	; (8001344 <homing+0x38c>)
 8001162:	f7ff fa51 	bl	8000608 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4976      	ldr	r1, [pc, #472]	; (8001348 <homing+0x390>)
 8001170:	f7ff fb74 	bl	800085c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa44 	bl	8000608 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <homing+0x384>)
 800118e:	f7ff f883 	bl	8000298 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4966      	ldr	r1, [pc, #408]	; (8001330 <homing+0x378>)
 8001198:	680c      	ldr	r4, [r1, #0]
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fce3 	bl	8000b68 <__aeabi_d2uiz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011a6:	4b64      	ldr	r3, [pc, #400]	; (8001338 <homing+0x380>)
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9b2 	bl	8000514 <__aeabi_ui2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <homing+0x384>)
 80011b6:	f7ff f871 	bl	800029c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	a152      	add	r1, pc, #328	; (adr r1, 8001308 <homing+0x350>)
 80011c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011c4:	f7ff fb4a 	bl	800085c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <homing+0x388>)
 80011d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <homing+0x38c>)
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4957      	ldr	r1, [pc, #348]	; (8001348 <homing+0x390>)
 80011ea:	f7ff fb37 	bl	800085c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff fa07 	bl	8000608 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <homing+0x384>)
 8001208:	f7ff f846 	bl	8000298 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fca8 	bl	8000b68 <__aeabi_d2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	4a45      	ldr	r2, [pc, #276]	; (8001330 <homing+0x378>)
 800121c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm));
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <homing+0x380>)
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_ui2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <homing+0x384>)
 800122e:	f7ff f835 	bl	800029c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	a134      	add	r1, pc, #208	; (adr r1, 8001308 <homing+0x350>)
 8001238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <homing+0x388>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <homing+0x38c>)
 8001254:	f7ff f9d8 	bl	8000608 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4939      	ldr	r1, [pc, #228]	; (8001348 <homing+0x390>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <homing+0x384>)
 8001280:	f7ff f80a 	bl	8000298 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	492a      	ldr	r1, [pc, #168]	; (8001334 <homing+0x37c>)
 800128a:	680c      	ldr	r4, [r1, #0]
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc6a 	bl	8000b68 <__aeabi_d2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <homing+0x380>)
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f939 	bl	8000514 <__aeabi_ui2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <homing+0x384>)
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	a115      	add	r1, pc, #84	; (adr r1, 8001308 <homing+0x350>)
 80012b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b6:	f7ff fad1 	bl	800085c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <homing+0x388>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <homing+0x38c>)
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <homing+0x390>)
 80012dc:	f7ff fabe 	bl	800085c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <homing+0x384>)
 80012fa:	f7fe ffcd 	bl	8000298 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	e024      	b.n	800134c <homing+0x394>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	418e8480 	.word	0x418e8480
 8001310:	2000027c 	.word	0x2000027c
 8001314:	2000027d 	.word	0x2000027d
 8001318:	200005f8 	.word	0x200005f8
 800131c:	20000640 	.word	0x20000640
 8001320:	20000688 	.word	0x20000688
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	20000370 	.word	0x20000370
 8001330:	20000400 	.word	0x20000400
 8001334:	20000448 	.word	0x20000448
 8001338:	40010000 	.word	0x40010000
 800133c:	3ff00000 	.word	0x3ff00000
 8001340:	20000000 	.word	0x20000000
 8001344:	40bf4000 	.word	0x40bf4000
 8001348:	404e0000 	.word	0x404e0000
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	4ab0      	ldr	r2, [pc, #704]	; (800161c <homing+0x664>)
 800135a:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <homing+0x668>)
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d7 	bl	8000514 <__aeabi_ui2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f7ff fa75 	bl	800085c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4caa      	ldr	r4, [pc, #680]	; (8001620 <homing+0x668>)
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbf4 	bl	8000b68 <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8001384:	4ba7      	ldr	r3, [pc, #668]	; (8001624 <homing+0x66c>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8c3 	bl	8000514 <__aeabi_ui2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001396:	f7ff fa61 	bl	800085c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4ca1      	ldr	r4, [pc, #644]	; (8001624 <homing+0x66c>)
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbe0 	bl	8000b68 <__aeabi_d2uiz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 80013ac:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <homing+0x670>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013be:	f7ff fa4d 	bl	800085c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4c98      	ldr	r4, [pc, #608]	; (8001628 <homing+0x670>)
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fbcc 	bl	8000b68 <__aeabi_d2uiz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	6363      	str	r3, [r4, #52]	; 0x34


    while(homAprox){
 80013d4:	e04b      	b.n	800146e <homing+0x4b6>

        Start_PWM_MOTOR_1;
 80013d6:	2100      	movs	r1, #0
 80013d8:	4894      	ldr	r0, [pc, #592]	; (800162c <homing+0x674>)
 80013da:	f008 fa2d 	bl	8009838 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 80013de:	2100      	movs	r1, #0
 80013e0:	4893      	ldr	r0, [pc, #588]	; (8001630 <homing+0x678>)
 80013e2:	f008 fa29 	bl	8009838 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 80013e6:	2100      	movs	r1, #0
 80013e8:	488c      	ldr	r0, [pc, #560]	; (800161c <homing+0x664>)
 80013ea:	f008 fa25 	bl	8009838 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 80013ee:	2110      	movs	r1, #16
 80013f0:	4890      	ldr	r0, [pc, #576]	; (8001634 <homing+0x67c>)
 80013f2:	f007 fa79 	bl	80088e8 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00f      	beq.n	800141c <homing+0x464>
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	488d      	ldr	r0, [pc, #564]	; (8001638 <homing+0x680>)
 8001402:	f007 fa71 	bl	80088e8 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <homing+0x464>
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4889      	ldr	r0, [pc, #548]	; (8001638 <homing+0x680>)
 8001412:	f007 fa69 	bl	80088e8 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d128      	bne.n	800146e <homing+0x4b6>
            HAL_Delay(30);
 800141c:	201e      	movs	r0, #30
 800141e:	f006 fee5 	bl	80081ec <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001422:	2110      	movs	r1, #16
 8001424:	4883      	ldr	r0, [pc, #524]	; (8001634 <homing+0x67c>)
 8001426:	f007 fa5f 	bl	80088e8 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <homing+0x498>
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	4880      	ldr	r0, [pc, #512]	; (8001638 <homing+0x680>)
 8001436:	f007 fa57 	bl	80088e8 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <homing+0x498>
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	487c      	ldr	r0, [pc, #496]	; (8001638 <homing+0x680>)
 8001446:	f007 fa4f 	bl	80088e8 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10e      	bne.n	800146e <homing+0x4b6>

                Stop_PWM_MOTOR_1;
 8001450:	2100      	movs	r1, #0
 8001452:	4876      	ldr	r0, [pc, #472]	; (800162c <homing+0x674>)
 8001454:	f008 faa0 	bl	8009998 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001458:	2100      	movs	r1, #0
 800145a:	4875      	ldr	r0, [pc, #468]	; (8001630 <homing+0x678>)
 800145c:	f008 fa9c 	bl	8009998 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001460:	2100      	movs	r1, #0
 8001462:	486e      	ldr	r0, [pc, #440]	; (800161c <homing+0x664>)
 8001464:	f008 fa98 	bl	8009998 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8001468:	4b74      	ldr	r3, [pc, #464]	; (800163c <homing+0x684>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 800146e:	4b73      	ldr	r3, [pc, #460]	; (800163c <homing+0x684>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1af      	bne.n	80013d6 <homing+0x41e>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 8001476:	e14b      	b.n	8001710 <homing+0x758>

        if (ES1s_PRESSED && !motor1.hom) {
 8001478:	2110      	movs	r1, #16
 800147a:	486e      	ldr	r0, [pc, #440]	; (8001634 <homing+0x67c>)
 800147c:	f007 fa34 	bl	80088e8 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d156      	bne.n	8001534 <homing+0x57c>
 8001486:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <homing+0x688>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d152      	bne.n	8001534 <homing+0x57c>

            Stop_PWM_MOTOR_2;
 800148e:	2100      	movs	r1, #0
 8001490:	4867      	ldr	r0, [pc, #412]	; (8001630 <homing+0x678>)
 8001492:	f008 fa81 	bl	8009998 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001496:	2100      	movs	r1, #0
 8001498:	4860      	ldr	r0, [pc, #384]	; (800161c <homing+0x664>)
 800149a:	f008 fa7d 	bl	8009998 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 800149e:	201e      	movs	r0, #30
 80014a0:	f006 fea4 	bl	80081ec <HAL_Delay>

            while(ES1s_PRESSED){
 80014a4:	e00f      	b.n	80014c6 <homing+0x50e>

                negative_Dir_MOTOR_1;
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	4862      	ldr	r0, [pc, #392]	; (8001634 <homing+0x67c>)
 80014ac:	f007 fa34 	bl	8008918 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80014b0:	2000      	movs	r0, #0
 80014b2:	f006 fe9b 	bl	80081ec <HAL_Delay>
                Start_PWM_MOTOR_1;
 80014b6:	2100      	movs	r1, #0
 80014b8:	485c      	ldr	r0, [pc, #368]	; (800162c <homing+0x674>)
 80014ba:	f008 f9bd 	bl	8009838 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80014be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c2:	f006 fe93 	bl	80081ec <HAL_Delay>
            while(ES1s_PRESSED){
 80014c6:	2110      	movs	r1, #16
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <homing+0x67c>)
 80014ca:	f007 fa0d 	bl	80088e8 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e8      	beq.n	80014a6 <homing+0x4ee>

            }

            Stop_PWM_MOTOR_1;
 80014d4:	2100      	movs	r1, #0
 80014d6:	4855      	ldr	r0, [pc, #340]	; (800162c <homing+0x674>)
 80014d8:	f008 fa5e 	bl	8009998 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <homing+0x688>)
 80014de:	2201      	movs	r2, #1
 80014e0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F1\n", 4, 100);
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	2204      	movs	r2, #4
 80014e6:	4957      	ldr	r1, [pc, #348]	; (8001644 <homing+0x68c>)
 80014e8:	4857      	ldr	r0, [pc, #348]	; (8001648 <homing+0x690>)
 80014ea:	f009 fce4 	bl	800aeb6 <HAL_UART_Transmit>
            HAL_Delay(30);
 80014ee:	201e      	movs	r0, #30
 80014f0:	f006 fe7c 	bl	80081ec <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	484f      	ldr	r0, [pc, #316]	; (8001638 <homing+0x680>)
 80014fa:	f007 f9f5 	bl	80088e8 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <homing+0x55c>
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <homing+0x694>)
 8001506:	7e1b      	ldrb	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <homing+0x55c>
 800150c:	2100      	movs	r1, #0
 800150e:	4848      	ldr	r0, [pc, #288]	; (8001630 <homing+0x678>)
 8001510:	f008 f992 	bl	8009838 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001518:	4847      	ldr	r0, [pc, #284]	; (8001638 <homing+0x680>)
 800151a:	f007 f9e5 	bl	80088e8 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <homing+0x57c>
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <homing+0x698>)
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <homing+0x57c>
 800152c:	2100      	movs	r1, #0
 800152e:	483b      	ldr	r0, [pc, #236]	; (800161c <homing+0x664>)
 8001530:	f008 f982 	bl	8009838 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	483f      	ldr	r0, [pc, #252]	; (8001638 <homing+0x680>)
 800153a:	f007 f9d5 	bl	80088e8 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d156      	bne.n	80015f2 <homing+0x63a>
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <homing+0x694>)
 8001546:	7e1b      	ldrb	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d152      	bne.n	80015f2 <homing+0x63a>

            Stop_PWM_MOTOR_1;
 800154c:	2100      	movs	r1, #0
 800154e:	4837      	ldr	r0, [pc, #220]	; (800162c <homing+0x674>)
 8001550:	f008 fa22 	bl	8009998 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001554:	2100      	movs	r1, #0
 8001556:	4831      	ldr	r0, [pc, #196]	; (800161c <homing+0x664>)
 8001558:	f008 fa1e 	bl	8009998 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800155c:	201e      	movs	r0, #30
 800155e:	f006 fe45 	bl	80081ec <HAL_Delay>

            while(ES2s_PRESSED){
 8001562:	e00f      	b.n	8001584 <homing+0x5cc>

                negative_Dir_MOTOR_2;
 8001564:	2201      	movs	r2, #1
 8001566:	2102      	movs	r1, #2
 8001568:	4833      	ldr	r0, [pc, #204]	; (8001638 <homing+0x680>)
 800156a:	f007 f9d5 	bl	8008918 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800156e:	2000      	movs	r0, #0
 8001570:	f006 fe3c 	bl	80081ec <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001574:	2100      	movs	r1, #0
 8001576:	482e      	ldr	r0, [pc, #184]	; (8001630 <homing+0x678>)
 8001578:	f008 f95e 	bl	8009838 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800157c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001580:	f006 fe34 	bl	80081ec <HAL_Delay>
            while(ES2s_PRESSED){
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	482b      	ldr	r0, [pc, #172]	; (8001638 <homing+0x680>)
 800158a:	f007 f9ad 	bl	80088e8 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e7      	beq.n	8001564 <homing+0x5ac>

            }

            Stop_PWM_MOTOR_2;
 8001594:	2100      	movs	r1, #0
 8001596:	4826      	ldr	r0, [pc, #152]	; (8001630 <homing+0x678>)
 8001598:	f008 f9fe 	bl	8009998 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <homing+0x694>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F2\n", 4, 100);
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2204      	movs	r2, #4
 80015a6:	492b      	ldr	r1, [pc, #172]	; (8001654 <homing+0x69c>)
 80015a8:	4827      	ldr	r0, [pc, #156]	; (8001648 <homing+0x690>)
 80015aa:	f009 fc84 	bl	800aeb6 <HAL_UART_Transmit>
            HAL_Delay(30);
 80015ae:	201e      	movs	r0, #30
 80015b0:	f006 fe1c 	bl	80081ec <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80015b4:	2110      	movs	r1, #16
 80015b6:	481f      	ldr	r0, [pc, #124]	; (8001634 <homing+0x67c>)
 80015b8:	f007 f996 	bl	80088e8 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <homing+0x61a>
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <homing+0x688>)
 80015c4:	7e1b      	ldrb	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <homing+0x61a>
 80015ca:	2100      	movs	r1, #0
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <homing+0x674>)
 80015ce:	f008 f933 	bl	8009838 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <homing+0x680>)
 80015d8:	f007 f986 	bl	80088e8 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <homing+0x63a>
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <homing+0x698>)
 80015e4:	7e1b      	ldrb	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <homing+0x63a>
 80015ea:	2100      	movs	r1, #0
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <homing+0x664>)
 80015ee:	f008 f923 	bl	8009838 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <homing+0x680>)
 80015f8:	f007 f976 	bl	80088e8 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d171      	bne.n	80016e6 <homing+0x72e>

            Stop_PWM_MOTOR_1;
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <homing+0x674>)
 8001606:	f008 f9c7 	bl	8009998 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <homing+0x678>)
 800160e:	f008 f9c3 	bl	8009998 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001612:	201e      	movs	r0, #30
 8001614:	f006 fdea 	bl	80081ec <HAL_Delay>

            while(ES3s_PRESSED){
 8001618:	e02e      	b.n	8001678 <homing+0x6c0>
 800161a:	bf00      	nop
 800161c:	20000448 	.word	0x20000448
 8001620:	40010000 	.word	0x40010000
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800
 800162c:	20000370 	.word	0x20000370
 8001630:	20000400 	.word	0x20000400
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	2000027c 	.word	0x2000027c
 8001640:	200005f8 	.word	0x200005f8
 8001644:	08010010 	.word	0x08010010
 8001648:	200005b0 	.word	0x200005b0
 800164c:	20000640 	.word	0x20000640
 8001650:	20000688 	.word	0x20000688
 8001654:	08010014 	.word	0x08010014

                negative_Dir_MOTOR_3;
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4830      	ldr	r0, [pc, #192]	; (8001720 <homing+0x768>)
 800165e:	f007 f95b 	bl	8008918 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001662:	2000      	movs	r0, #0
 8001664:	f006 fdc2 	bl	80081ec <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001668:	2100      	movs	r1, #0
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <homing+0x76c>)
 800166c:	f008 f8e4 	bl	8009838 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001674:	f006 fdba 	bl	80081ec <HAL_Delay>
            while(ES3s_PRESSED){
 8001678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167c:	4828      	ldr	r0, [pc, #160]	; (8001720 <homing+0x768>)
 800167e:	f007 f933 	bl	80088e8 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0e7      	beq.n	8001658 <homing+0x6a0>
            }

            Stop_PWM_MOTOR_3;
 8001688:	2100      	movs	r1, #0
 800168a:	4826      	ldr	r0, [pc, #152]	; (8001724 <homing+0x76c>)
 800168c:	f008 f984 	bl	8009998 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <homing+0x770>)
 8001692:	2201      	movs	r2, #1
 8001694:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F3\n", 4, 100);
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	2204      	movs	r2, #4
 800169a:	4924      	ldr	r1, [pc, #144]	; (800172c <homing+0x774>)
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <homing+0x778>)
 800169e:	f009 fc0a 	bl	800aeb6 <HAL_UART_Transmit>
			HAL_Delay(30);
 80016a2:	201e      	movs	r0, #30
 80016a4:	f006 fda2 	bl	80081ec <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80016a8:	2110      	movs	r1, #16
 80016aa:	4822      	ldr	r0, [pc, #136]	; (8001734 <homing+0x77c>)
 80016ac:	f007 f91c 	bl	80088e8 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <homing+0x70e>
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <homing+0x780>)
 80016b8:	7e1b      	ldrb	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <homing+0x70e>
 80016be:	2100      	movs	r1, #0
 80016c0:	481e      	ldr	r0, [pc, #120]	; (800173c <homing+0x784>)
 80016c2:	f008 f8b9 	bl	8009838 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4815      	ldr	r0, [pc, #84]	; (8001720 <homing+0x768>)
 80016cc:	f007 f90c 	bl	80088e8 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <homing+0x72e>
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <homing+0x788>)
 80016d8:	7e1b      	ldrb	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <homing+0x72e>
 80016de:	2100      	movs	r1, #0
 80016e0:	4818      	ldr	r0, [pc, #96]	; (8001744 <homing+0x78c>)
 80016e2:	f008 f8a9 	bl	8009838 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <homing+0x780>)
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <homing+0x758>
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <homing+0x788>)
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <homing+0x758>
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <homing+0x770>)
 80016f8:	7e1b      	ldrb	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <homing+0x758>
        	homFin=true;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <homing+0x790>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2,(uint8_t *)"FH\n", 4, 100);
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	2204      	movs	r2, #4
 8001708:	4910      	ldr	r1, [pc, #64]	; (800174c <homing+0x794>)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <homing+0x778>)
 800170c:	f009 fbd3 	bl	800aeb6 <HAL_UART_Transmit>
    while (!homFin){
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <homing+0x790>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f43f aeaf 	beq.w	8001478 <homing+0x4c0>
        }
       }


    }
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	40020800 	.word	0x40020800
 8001724:	20000448 	.word	0x20000448
 8001728:	20000688 	.word	0x20000688
 800172c:	08010018 	.word	0x08010018
 8001730:	200005b0 	.word	0x200005b0
 8001734:	40020400 	.word	0x40020400
 8001738:	200005f8 	.word	0x200005f8
 800173c:	20000370 	.word	0x20000370
 8001740:	20000640 	.word	0x20000640
 8001744:	20000400 	.word	0x20000400
 8001748:	200006e1 	.word	0x200006e1
 800174c:	0801001c 	.word	0x0801001c

08001750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
}
 8001758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SystemReset+0x24>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001762:	4904      	ldr	r1, [pc, #16]	; (8001774 <__NVIC_SystemReset+0x24>)
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_SystemReset+0x28>)
 8001766:	4313      	orrs	r3, r2
 8001768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800176a:	f3bf 8f4f 	dsb	sy
}
 800176e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <__NVIC_SystemReset+0x20>
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	05fa0004 	.word	0x05fa0004

0800177c <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <interpretaComando+0x258>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3b48      	subs	r3, #72	; 0x48
 8001788:	2b2a      	cmp	r3, #42	; 0x2a
 800178a:	f200 816f 	bhi.w	8001a6c <interpretaComando+0x2f0>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <interpretaComando+0x18>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001841 	.word	0x08001841
 8001798:	08001a6d 	.word	0x08001a6d
 800179c:	08001a6d 	.word	0x08001a6d
 80017a0:	08001a6d 	.word	0x08001a6d
 80017a4:	08001a6d 	.word	0x08001a6d
 80017a8:	08001a6d 	.word	0x08001a6d
 80017ac:	08001a6d 	.word	0x08001a6d
 80017b0:	08001a6d 	.word	0x08001a6d
 80017b4:	08001849 	.word	0x08001849
 80017b8:	08001a6d 	.word	0x08001a6d
 80017bc:	08001a5d 	.word	0x08001a5d
 80017c0:	08001a6d 	.word	0x08001a6d
 80017c4:	08001a6d 	.word	0x08001a6d
 80017c8:	08001a6d 	.word	0x08001a6d
 80017cc:	08001a6d 	.word	0x08001a6d
 80017d0:	08001a6d 	.word	0x08001a6d
 80017d4:	08001a6d 	.word	0x08001a6d
 80017d8:	08001a6d 	.word	0x08001a6d
 80017dc:	08001a6d 	.word	0x08001a6d
 80017e0:	08001a6d 	.word	0x08001a6d
 80017e4:	08001a6d 	.word	0x08001a6d
 80017e8:	08001a6d 	.word	0x08001a6d
 80017ec:	08001a6d 	.word	0x08001a6d
 80017f0:	08001a6d 	.word	0x08001a6d
 80017f4:	08001a6d 	.word	0x08001a6d
 80017f8:	08001a6d 	.word	0x08001a6d
 80017fc:	08001a6d 	.word	0x08001a6d
 8001800:	08001a6d 	.word	0x08001a6d
 8001804:	08001a6d 	.word	0x08001a6d
 8001808:	08001a6d 	.word	0x08001a6d
 800180c:	08001a6d 	.word	0x08001a6d
 8001810:	08001a6d 	.word	0x08001a6d
 8001814:	08001841 	.word	0x08001841
 8001818:	08001a6d 	.word	0x08001a6d
 800181c:	08001a6d 	.word	0x08001a6d
 8001820:	08001a6d 	.word	0x08001a6d
 8001824:	08001a6d 	.word	0x08001a6d
 8001828:	08001a6d 	.word	0x08001a6d
 800182c:	08001a6d 	.word	0x08001a6d
 8001830:	08001a6d 	.word	0x08001a6d
 8001834:	08001849 	.word	0x08001849
 8001838:	08001a6d 	.word	0x08001a6d
 800183c:	08001a5d 	.word	0x08001a5d


	case 'H':
	case 'h':
		state = HOME;
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <interpretaComando+0x25c>)
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
	break;
 8001846:	e112      	b.n	8001a6e <interpretaComando+0x2f2>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001848:	4b64      	ldr	r3, [pc, #400]	; (80019dc <interpretaComando+0x260>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
		j = 0;
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <interpretaComando+0x264>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001854:	e0f3      	b.n	8001a3e <interpretaComando+0x2c2>
			if(rx_buffer[i] == 'x'){
 8001856:	4b61      	ldr	r3, [pc, #388]	; (80019dc <interpretaComando+0x260>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5e      	ldr	r2, [pc, #376]	; (80019d4 <interpretaComando+0x258>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	2b78      	cmp	r3, #120	; 0x78
 8001860:	d13d      	bne.n	80018de <interpretaComando+0x162>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001862:	e012      	b.n	800188a <interpretaComando+0x10e>
					auxString[j] = rx_buffer[i+1];
 8001864:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <interpretaComando+0x260>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <interpretaComando+0x264>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4959      	ldr	r1, [pc, #356]	; (80019d4 <interpretaComando+0x258>)
 8001870:	5c89      	ldrb	r1, [r1, r2]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <interpretaComando+0x268>)
 8001874:	54d1      	strb	r1, [r2, r3]
					j++;
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <interpretaComando+0x264>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <interpretaComando+0x264>)
 800187e:	6013      	str	r3, [r2, #0]
					i++;
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <interpretaComando+0x260>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a55      	ldr	r2, [pc, #340]	; (80019dc <interpretaComando+0x260>)
 8001888:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <interpretaComando+0x260>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <interpretaComando+0x258>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	2b20      	cmp	r3, #32
 8001896:	d1e5      	bne.n	8001864 <interpretaComando+0xe8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8001898:	2100      	movs	r1, #0
 800189a:	4852      	ldr	r0, [pc, #328]	; (80019e4 <interpretaComando+0x268>)
 800189c:	f00b f982 	bl	800cba4 <strtod>
 80018a0:	eeb0 7a40 	vmov.f32	s14, s0
 80018a4:	eef0 7a60 	vmov.f32	s15, s1
 80018a8:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <interpretaComando+0x26c>)
 80018aa:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e007      	b.n	80018c4 <interpretaComando+0x148>
					auxString[k] = 0;
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <interpretaComando+0x268>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	ddf4      	ble.n	80018b4 <interpretaComando+0x138>
				}
				j=0;
 80018ca:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <interpretaComando+0x264>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *)"Px_ok\n", 7, 100);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	2207      	movs	r2, #7
 80018d4:	4945      	ldr	r1, [pc, #276]	; (80019ec <interpretaComando+0x270>)
 80018d6:	4846      	ldr	r0, [pc, #280]	; (80019f0 <interpretaComando+0x274>)
 80018d8:	f009 faed 	bl	800aeb6 <HAL_UART_Transmit>
 80018dc:	e0aa      	b.n	8001a34 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'y'){
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <interpretaComando+0x260>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <interpretaComando+0x258>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	2b79      	cmp	r3, #121	; 0x79
 80018e8:	d13d      	bne.n	8001966 <interpretaComando+0x1ea>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018ea:	e012      	b.n	8001912 <interpretaComando+0x196>
					auxString[j] = rx_buffer[i+1];
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <interpretaComando+0x260>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <interpretaComando+0x264>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4937      	ldr	r1, [pc, #220]	; (80019d4 <interpretaComando+0x258>)
 80018f8:	5c89      	ldrb	r1, [r1, r2]
 80018fa:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <interpretaComando+0x268>)
 80018fc:	54d1      	strb	r1, [r2, r3]
					j++;
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <interpretaComando+0x264>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <interpretaComando+0x264>)
 8001906:	6013      	str	r3, [r2, #0]
					i++;
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <interpretaComando+0x260>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <interpretaComando+0x260>)
 8001910:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <interpretaComando+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <interpretaComando+0x258>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b20      	cmp	r3, #32
 800191e:	d1e5      	bne.n	80018ec <interpretaComando+0x170>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001920:	2100      	movs	r1, #0
 8001922:	4830      	ldr	r0, [pc, #192]	; (80019e4 <interpretaComando+0x268>)
 8001924:	f00b f93e 	bl	800cba4 <strtod>
 8001928:	eeb0 7a40 	vmov.f32	s14, s0
 800192c:	eef0 7a60 	vmov.f32	s15, s1
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <interpretaComando+0x26c>)
 8001932:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	e007      	b.n	800194c <interpretaComando+0x1d0>
					auxString[k] = 0;
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <interpretaComando+0x268>)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	4413      	add	r3, r2
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b0a      	cmp	r3, #10
 8001950:	ddf4      	ble.n	800193c <interpretaComando+0x1c0>
				}
				j=0;
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <interpretaComando+0x264>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Py_ok\n", 7, 100);
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	2207      	movs	r2, #7
 800195c:	4925      	ldr	r1, [pc, #148]	; (80019f4 <interpretaComando+0x278>)
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <interpretaComando+0x274>)
 8001960:	f009 faa9 	bl	800aeb6 <HAL_UART_Transmit>
 8001964:	e066      	b.n	8001a34 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'z'){
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <interpretaComando+0x260>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <interpretaComando+0x258>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	2b7a      	cmp	r3, #122	; 0x7a
 8001970:	d160      	bne.n	8001a34 <interpretaComando+0x2b8>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001972:	e012      	b.n	800199a <interpretaComando+0x21e>
					auxString[j] = rx_buffer[i+1];
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <interpretaComando+0x260>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <interpretaComando+0x264>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4915      	ldr	r1, [pc, #84]	; (80019d4 <interpretaComando+0x258>)
 8001980:	5c89      	ldrb	r1, [r1, r2]
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <interpretaComando+0x268>)
 8001984:	54d1      	strb	r1, [r2, r3]
					j++;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <interpretaComando+0x264>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <interpretaComando+0x264>)
 800198e:	6013      	str	r3, [r2, #0]
					i++;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <interpretaComando+0x260>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <interpretaComando+0x260>)
 8001998:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <interpretaComando+0x260>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <interpretaComando+0x258>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d006      	beq.n	80019b6 <interpretaComando+0x23a>
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <interpretaComando+0x260>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <interpretaComando+0x258>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1de      	bne.n	8001974 <interpretaComando+0x1f8>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80019b6:	2100      	movs	r1, #0
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <interpretaComando+0x268>)
 80019ba:	f00b f8f3 	bl	800cba4 <strtod>
 80019be:	eeb0 7a40 	vmov.f32	s14, s0
 80019c2:	eef0 7a60 	vmov.f32	s15, s1
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <interpretaComando+0x26c>)
 80019c8:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	e01a      	b.n	8001a08 <interpretaComando+0x28c>
 80019d2:	bf00      	nop
 80019d4:	20000804 	.word	0x20000804
 80019d8:	200006e0 	.word	0x200006e0
 80019dc:	2000028c 	.word	0x2000028c
 80019e0:	20000290 	.word	0x20000290
 80019e4:	20000280 	.word	0x20000280
 80019e8:	20000740 	.word	0x20000740
 80019ec:	08010020 	.word	0x08010020
 80019f0:	200005b0 	.word	0x200005b0
 80019f4:	08010028 	.word	0x08010028
					auxString[k] = 0;
 80019f8:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <interpretaComando+0x2fc>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3301      	adds	r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	ddf4      	ble.n	80019f8 <interpretaComando+0x27c>
				}
				j=0;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <interpretaComando+0x300>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Pz_ok\n", 7, 100);
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	2207      	movs	r2, #7
 8001a18:	4919      	ldr	r1, [pc, #100]	; (8001a80 <interpretaComando+0x304>)
 8001a1a:	481a      	ldr	r0, [pc, #104]	; (8001a84 <interpretaComando+0x308>)
 8001a1c:	f009 fa4b 	bl	800aeb6 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <interpretaComando+0x30c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <interpretaComando+0x310>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d102      	bne.n	8001a34 <interpretaComando+0x2b8>
				    newline_detected = true;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <interpretaComando+0x314>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <interpretaComando+0x30c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <interpretaComando+0x30c>)
 8001a3c:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <interpretaComando+0x30c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <interpretaComando+0x310>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <interpretaComando+0x2d8>
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <interpretaComando+0x314>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f43f af01 	beq.w	8001856 <interpretaComando+0xda>
		}

		receptionFlag = true;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <interpretaComando+0x318>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
		break;
 8001a5a:	e008      	b.n	8001a6e <interpretaComando+0x2f2>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart2, (uint8_t *)"Resetting...\n", 14, 100);
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	220e      	movs	r2, #14
 8001a60:	490d      	ldr	r1, [pc, #52]	; (8001a98 <interpretaComando+0x31c>)
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <interpretaComando+0x308>)
 8001a64:	f009 fa27 	bl	800aeb6 <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001a68:	f7ff fe72 	bl	8001750 <__NVIC_SystemReset>

		break;


	default:break;
 8001a6c:	bf00      	nop


	}

}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000280 	.word	0x20000280
 8001a7c:	20000290 	.word	0x20000290
 8001a80:	08010030 	.word	0x08010030
 8001a84:	200005b0 	.word	0x200005b0
 8001a88:	2000028c 	.word	0x2000028c
 8001a8c:	20000804 	.word	0x20000804
 8001a90:	2000027e 	.word	0x2000027e
 8001a94:	20000823 	.word	0x20000823
 8001a98:	08010038 	.word	0x08010038
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	b090      	sub	sp, #64	; 0x40
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	eeb0 5a40 	vmov.f32	s10, s0
 8001aac:	eef0 5a60 	vmov.f32	s11, s1
 8001ab0:	eeb0 6a41 	vmov.f32	s12, s2
 8001ab4:	eef0 6a61 	vmov.f32	s13, s3
 8001ab8:	eeb0 7a42 	vmov.f32	s14, s4
 8001abc:	eef0 7a62 	vmov.f32	s15, s5
 8001ac0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001ac4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001ac8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001acc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ad0:	a3f3      	add	r3, pc, #972	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fbdf 	bl	8000298 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	a3ed      	add	r3, pc, #948	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fbd8 	bl	800029c <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001afc:	f7fe fd84 	bl	8000608 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	f7fe fbc4 	bl	800029c <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fe9e 	bl	800085c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b17 	vmov	d7, r2, r3
 8001b28:	ed9f 1bcf 	vldr	d1, [pc, #828]	; 8001e68 <inverseKinematic+0x3c8>
 8001b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b30:	eef0 0a67 	vmov.f32	s1, s15
 8001b34:	f00d f904 	bl	800ed40 <pow>
 8001b38:	ec51 0b10 	vmov	r0, r1, d0
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4be1      	ldr	r3, [pc, #900]	; (8001ec8 <inverseKinematic+0x428>)
 8001b42:	f7fe fbab 	bl	800029c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4bdf      	ldr	r3, [pc, #892]	; (8001ecc <inverseKinematic+0x42c>)
 8001b50:	e9c3 0100 	strd	r0, r1, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001b54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b58:	a3c5      	add	r3, pc, #788	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb9d 	bl	800029c <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001e78 <inverseKinematic+0x3d8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd4a 	bl	8000608 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	a1c1      	add	r1, pc, #772	; (adr r1, 8001e80 <inverseKinematic+0x3e0>)
 8001b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b7e:	f7fe fb8b 	bl	8000298 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b8e:	a3be      	add	r3, pc, #760	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb82 	bl	800029c <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb7a 	bl	800029c <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb72 	bl	8000298 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f7fe fb6a 	bl	800029c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fe44 	bl	800085c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b17 	vmov	d7, r2, r3
 8001bdc:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8001e68 <inverseKinematic+0x3c8>
 8001be0:	eeb0 0a47 	vmov.f32	s0, s14
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	f00d f8aa 	bl	800ed40 <pow>
 8001bec:	ec51 0b10 	vmov	r0, r1, d0
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4bb6      	ldr	r3, [pc, #728]	; (8001ed0 <inverseKinematic+0x430>)
 8001bf6:	f7fe fb51 	bl	800029c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	4bb4      	ldr	r3, [pc, #720]	; (8001ed4 <inverseKinematic+0x434>)
 8001c04:	e9c3 0100 	strd	r0, r1, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001c08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c0c:	a398      	add	r3, pc, #608	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fb41 	bl	8000298 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	a396      	add	r3, pc, #600	; (adr r3, 8001e78 <inverseKinematic+0x3d8>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fcf0 	bl	8000608 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c34:	a394      	add	r3, pc, #592	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fb2f 	bl	800029c <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	f7fe fb27 	bl	800029c <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb1f 	bl	8000298 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	a38b      	add	r3, pc, #556	; (adr r3, 8001e90 <inverseKinematic+0x3f0>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fb18 	bl	800029c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	a388      	add	r3, pc, #544	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fb0f 	bl	800029c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4614      	mov	r4, r2
 8001c84:	461d      	mov	r5, r3
 8001c86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	f7fe fb05 	bl	800029c <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fddf 	bl	800085c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b17 	vmov	d7, r2, r3
 8001ca6:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001e68 <inverseKinematic+0x3c8>
 8001caa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cae:	eef0 0a67 	vmov.f32	s1, s15
 8001cb2:	f00d f845 	bl	800ed40 <pow>
 8001cb6:	ec51 0b10 	vmov	r0, r1, d0
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <inverseKinematic+0x430>)
 8001cc0:	f7fe faec 	bl	800029c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4b82      	ldr	r3, [pc, #520]	; (8001ed8 <inverseKinematic+0x438>)
 8001cce:	e9c3 0100 	strd	r0, r1, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001cd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cd6:	a372      	add	r3, pc, #456	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fadc 	bl	8000298 <__aeabi_dsub>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	a36b      	add	r3, pc, #428	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fad5 	bl	800029c <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d02:	f7fe fc81 	bl	8000608 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	f7fe fac1 	bl	800029c <__adddf3>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fd9b 	bl	800085c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f7fe fab3 	bl	800029c <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d42:	a357      	add	r3, pc, #348	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe faa6 	bl	8000298 <__aeabi_dsub>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	ec43 2b17 	vmov	d7, r2, r3
 8001d54:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001e68 <inverseKinematic+0x3c8>
 8001d58:	eeb0 0a47 	vmov.f32	s0, s14
 8001d5c:	eef0 0a67 	vmov.f32	s1, s15
 8001d60:	f00c ffee 	bl	800ed40 <pow>
 8001d64:	ec51 0b10 	vmov	r0, r1, d0
 8001d68:	a34f      	add	r3, pc, #316	; (adr r3, 8001ea8 <inverseKinematic+0x408>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fa95 	bl	800029c <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4614      	mov	r4, r2
 8001d78:	461d      	mov	r5, r3
 8001d7a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001d7e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001e68 <inverseKinematic+0x3c8>
 8001d82:	eeb0 0a47 	vmov.f32	s0, s14
 8001d86:	eef0 0a67 	vmov.f32	s1, s15
 8001d8a:	f00c ffd9 	bl	800ed40 <pow>
 8001d8e:	ec53 2b10 	vmov	r2, r3, d0
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa81 	bl	800029c <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a343      	add	r3, pc, #268	; (adr r3, 8001eb0 <inverseKinematic+0x410>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fa76 	bl	8000298 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001db8:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001e68 <inverseKinematic+0x3c8>
 8001dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc0:	eef0 0a67 	vmov.f32	s1, s15
 8001dc4:	f00c ffbc 	bl	800ed40 <pow>
 8001dc8:	ec53 2b10 	vmov	r2, r3, d0
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fa64 	bl	800029c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	f7fe fa5a 	bl	800029c <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fd34 	bl	800085c <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4640      	mov	r0, r8
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	a32b      	add	r3, pc, #172	; (adr r3, 8001eb8 <inverseKinematic+0x418>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fa45 	bl	800029c <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <inverseKinematic+0x43c>)
 8001e1c:	e9c3 0100 	strd	r0, r1, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e24:	a312      	add	r3, pc, #72	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fa37 	bl	800029c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	a322      	add	r3, pc, #136	; (adr r3, 8001ec0 <inverseKinematic+0x420>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbe4 	bl	8000608 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4614      	mov	r4, r2
 8001e46:	461d      	mov	r5, r3
 8001e48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e4c:	a30e      	add	r3, pc, #56	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fa23 	bl	800029c <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e03d      	b.n	8001ee0 <inverseKinematic+0x440>
 8001e64:	f3af 8000 	nop.w
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40000000 	.word	0x40000000
 8001e70:	5625749b 	.word	0x5625749b
 8001e74:	3faf09d1 	.word	0x3faf09d1
 8001e78:	e8584caa 	.word	0xe8584caa
 8001e7c:	400bb67a 	.word	0x400bb67a
 8001e80:	24dd2f1d 	.word	0x24dd2f1d
 8001e84:	3fe58106 	.word	0x3fe58106
 8001e88:	1eb851ec 	.word	0x1eb851ec
 8001e8c:	3fa1eb85 	.word	0x3fa1eb85
 8001e90:	9ba5e356 	.word	0x9ba5e356
 8001e94:	3fe020c4 	.word	0x3fe020c4
 8001e98:	24dd2f1b 	.word	0x24dd2f1b
 8001e9c:	3fc58106 	.word	0x3fc58106
 8001ea0:	1eb851ec 	.word	0x1eb851ec
 8001ea4:	3fb1eb85 	.word	0x3fb1eb85
 8001ea8:	f705857e 	.word	0xf705857e
 8001eac:	3f881e03 	.word	0x3f881e03
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fd70a3d 	.word	0x3fd70a3d
 8001eb8:	24dd2f1b 	.word	0x24dd2f1b
 8001ebc:	3fd58106 	.word	0x3fd58106
 8001ec0:	e8584caa 	.word	0xe8584caa
 8001ec4:	c00bb67a 	.word	0xc00bb67a
 8001ec8:	3ff00000 	.word	0x3ff00000
 8001ecc:	20000298 	.word	0x20000298
 8001ed0:	40100000 	.word	0x40100000
 8001ed4:	200002e0 	.word	0x200002e0
 8001ed8:	20000328 	.word	0x20000328
 8001edc:	200002a0 	.word	0x200002a0
 8001ee0:	f7fe f9dc 	bl	800029c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe f9d4 	bl	8000298 <__aeabi_dsub>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f9cc 	bl	800029c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	f7fe f9c2 	bl	800029c <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fc9c 	bl	800085c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	f7fe f9b4 	bl	800029c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4690      	mov	r8, r2
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f40:	a3ed      	add	r3, pc, #948	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	ec43 2b17 	vmov	d7, r2, r3
 8001f52:	ed9f 1be7 	vldr	d1, [pc, #924]	; 80022f0 <inverseKinematic+0x850>
 8001f56:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5a:	eef0 0a67 	vmov.f32	s1, s15
 8001f5e:	f00c feef 	bl	800ed40 <pow>
 8001f62:	ec51 0b10 	vmov	r0, r1, d0
 8001f66:	a3fa      	add	r3, pc, #1000	; (adr r3, 8002350 <inverseKinematic+0x8b0>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe f996 	bl	800029c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4614      	mov	r4, r2
 8001f76:	461d      	mov	r5, r3
 8001f78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f7c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002308 <inverseKinematic+0x868>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe f98b 	bl	800029c <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b17 	vmov	d7, r2, r3
 8001f8e:	ed9f 1bd8 	vldr	d1, [pc, #864]	; 80022f0 <inverseKinematic+0x850>
 8001f92:	eeb0 0a47 	vmov.f32	s0, s14
 8001f96:	eef0 0a67 	vmov.f32	s1, s15
 8001f9a:	f00c fed1 	bl	800ed40 <pow>
 8001f9e:	ec53 2b10 	vmov	r2, r3, d0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe f979 	bl	800029c <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001fb6:	ed9f 1bce 	vldr	d1, [pc, #824]	; 80022f0 <inverseKinematic+0x850>
 8001fba:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbe:	eef0 0a67 	vmov.f32	s1, s15
 8001fc2:	f00c febd 	bl	800ed40 <pow>
 8001fc6:	ec53 2b10 	vmov	r2, r3, d0
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe f965 	bl	800029c <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	a3d1      	add	r3, pc, #836	; (adr r3, 8002320 <inverseKinematic+0x880>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe f95a 	bl	8000298 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f7fe f952 	bl	800029c <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fc2c 	bl	800085c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4640      	mov	r0, r8
 800200a:	4649      	mov	r1, r9
 800200c:	f7fe fafc 	bl	8000608 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	a3c7      	add	r3, pc, #796	; (adr r3, 8002338 <inverseKinematic+0x898>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f93b 	bl	8000298 <__aeabi_dsub>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4bc7      	ldr	r3, [pc, #796]	; (8002348 <inverseKinematic+0x8a8>)
 800202c:	e9c3 0100 	strd	r0, r1, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002030:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002034:	a3b0      	add	r3, pc, #704	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe f92d 	bl	8000298 <__aeabi_dsub>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	a3ae      	add	r3, pc, #696	; (adr r3, 8002300 <inverseKinematic+0x860>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fadc 	bl	8000608 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800205c:	a3aa      	add	r3, pc, #680	; (adr r3, 8002308 <inverseKinematic+0x868>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe f91b 	bl	800029c <__adddf3>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f7fe f913 	bl	800029c <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe f90b 	bl	8000298 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	a3a1      	add	r3, pc, #644	; (adr r3, 8002310 <inverseKinematic+0x870>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe f904 	bl	800029c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	a39e      	add	r3, pc, #632	; (adr r3, 8002318 <inverseKinematic+0x878>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe f8fb 	bl	800029c <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	f7fe f8f1 	bl	800029c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fbcb 	bl	800085c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	f7fe f8e3 	bl	800029c <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4690      	mov	r8, r2
 80020dc:	4699      	mov	r9, r3
 80020de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e2:	a385      	add	r3, pc, #532	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe f8d6 	bl	8000298 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b17 	vmov	d7, r2, r3
 80020f4:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 80022f0 <inverseKinematic+0x850>
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	f00c fe1e 	bl	800ed40 <pow>
 8002104:	ec55 4b10 	vmov	r4, r5, d0
 8002108:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800210c:	a37e      	add	r3, pc, #504	; (adr r3, 8002308 <inverseKinematic+0x868>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe f8c3 	bl	800029c <__adddf3>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ec43 2b17 	vmov	d7, r2, r3
 800211e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80022f0 <inverseKinematic+0x850>
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	eef0 0a67 	vmov.f32	s1, s15
 800212a:	f00c fe09 	bl	800ed40 <pow>
 800212e:	ec53 2b10 	vmov	r2, r3, d0
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8b1 	bl	800029c <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002146:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80022f0 <inverseKinematic+0x850>
 800214a:	eeb0 0a47 	vmov.f32	s0, s14
 800214e:	eef0 0a67 	vmov.f32	s1, s15
 8002152:	f00c fdf5 	bl	800ed40 <pow>
 8002156:	ec53 2b10 	vmov	r2, r3, d0
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f89d 	bl	800029c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	a36d      	add	r3, pc, #436	; (adr r3, 8002320 <inverseKinematic+0x880>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f892 	bl	8000298 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a36a      	add	r3, pc, #424	; (adr r3, 8002328 <inverseKinematic+0x888>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f889 	bl	8000298 <__aeabi_dsub>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	a368      	add	r3, pc, #416	; (adr r3, 8002330 <inverseKinematic+0x890>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe f882 	bl	800029c <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4614      	mov	r4, r2
 800219e:	461d      	mov	r5, r3
 80021a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	f7fe f878 	bl	800029c <__adddf3>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe fb52 	bl	800085c <__aeabi_ddiv>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4640      	mov	r0, r8
 80021be:	4649      	mov	r1, r9
 80021c0:	f7fe fa22 	bl	8000608 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	a35a      	add	r3, pc, #360	; (adr r3, 8002338 <inverseKinematic+0x898>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe f861 	bl	8000298 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <inverseKinematic+0x8ac>)
 80021e0:	e9c3 0100 	strd	r0, r1, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 80021e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021e8:	a355      	add	r3, pc, #340	; (adr r3, 8002340 <inverseKinematic+0x8a0>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f853 	bl	8000298 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ec43 2b17 	vmov	d7, r2, r3
 80021fa:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80022f0 <inverseKinematic+0x850>
 80021fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002202:	eef0 0a67 	vmov.f32	s1, s15
 8002206:	f00c fd9b 	bl	800ed40 <pow>
 800220a:	ec55 4b10 	vmov	r4, r5, d0
 800220e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002212:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80022f0 <inverseKinematic+0x850>
 8002216:	eeb0 0a47 	vmov.f32	s0, s14
 800221a:	eef0 0a67 	vmov.f32	s1, s15
 800221e:	f00c fd8f 	bl	800ed40 <pow>
 8002222:	ec53 2b10 	vmov	r2, r3, d0
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f837 	bl	800029c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	a33a      	add	r3, pc, #232	; (adr r3, 8002320 <inverseKinematic+0x880>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f82c 	bl	8000298 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800224c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80022f0 <inverseKinematic+0x850>
 8002250:	eeb0 0a47 	vmov.f32	s0, s14
 8002254:	eef0 0a67 	vmov.f32	s1, s15
 8002258:	f00c fd72 	bl	800ed40 <pow>
 800225c:	ec53 2b10 	vmov	r2, r3, d0
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f81a 	bl	800029c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	a32d      	add	r3, pc, #180	; (adr r3, 8002328 <inverseKinematic+0x888>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	f7fe f80f 	bl	8000298 <__aeabi_dsub>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	a32b      	add	r3, pc, #172	; (adr r3, 8002330 <inverseKinematic+0x890>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f808 	bl	800029c <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4614      	mov	r4, r2
 8002292:	461d      	mov	r5, r3
 8002294:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	f7fd fffe 	bl	800029c <__adddf3>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7fe fad8 	bl	800085c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ec43 2b17 	vmov	d7, r2, r3
 80022b4:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80022f0 <inverseKinematic+0x850>
 80022b8:	eeb0 0a47 	vmov.f32	s0, s14
 80022bc:	eef0 0a67 	vmov.f32	s1, s15
 80022c0:	f00c fd3e 	bl	800ed40 <pow>
 80022c4:	ec51 0b10 	vmov	r0, r1, d0
 80022c8:	a319      	add	r3, pc, #100	; (adr r3, 8002330 <inverseKinematic+0x890>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fd ffe3 	bl	8000298 <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	a313      	add	r3, pc, #76	; (adr r3, 8002328 <inverseKinematic+0x888>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fd ffdc 	bl	800029c <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	e036      	b.n	8002358 <inverseKinematic+0x8b8>
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40000000 	.word	0x40000000
 80022f8:	5625749b 	.word	0x5625749b
 80022fc:	3faf09d1 	.word	0x3faf09d1
 8002300:	e8584caa 	.word	0xe8584caa
 8002304:	400bb67a 	.word	0x400bb67a
 8002308:	1eb851ec 	.word	0x1eb851ec
 800230c:	3fa1eb85 	.word	0x3fa1eb85
 8002310:	9ba5e356 	.word	0x9ba5e356
 8002314:	3fe020c4 	.word	0x3fe020c4
 8002318:	24dd2f1b 	.word	0x24dd2f1b
 800231c:	3fc58106 	.word	0x3fc58106
 8002320:	70a3d70a 	.word	0x70a3d70a
 8002324:	3fd70a3d 	.word	0x3fd70a3d
 8002328:	93d96639 	.word	0x93d96639
 800232c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002330:	47ae147c 	.word	0x47ae147c
 8002334:	3fa47ae1 	.word	0x3fa47ae1
 8002338:	24dd2f1d 	.word	0x24dd2f1d
 800233c:	3fe58106 	.word	0x3fe58106
 8002340:	1eb851ec 	.word	0x1eb851ec
 8002344:	3fb1eb85 	.word	0x3fb1eb85
 8002348:	200002e8 	.word	0x200002e8
 800234c:	20000330 	.word	0x20000330
 8002350:	f705857e 	.word	0xf705857e
 8002354:	3f881e03 	.word	0x3f881e03
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	4bde      	ldr	r3, [pc, #888]	; (80026d8 <inverseKinematic+0xc38>)
 800235e:	e9c3 0100 	strd	r0, r1, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8002362:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002366:	a3ce      	add	r3, pc, #824	; (adr r3, 80026a0 <inverseKinematic+0xc00>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fd ff96 	bl	800029c <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ec43 2b17 	vmov	d7, r2, r3
 8002378:	ed9f 1bcb 	vldr	d1, [pc, #812]	; 80026a8 <inverseKinematic+0xc08>
 800237c:	eeb0 0a47 	vmov.f32	s0, s14
 8002380:	eef0 0a67 	vmov.f32	s1, s15
 8002384:	f00c fcdc 	bl	800ed40 <pow>
 8002388:	ec51 0b10 	vmov	r0, r1, d0
 800238c:	a3c8      	add	r3, pc, #800	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fd ff83 	bl	800029c <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023a2:	a3c5      	add	r3, pc, #788	; (adr r3, 80026b8 <inverseKinematic+0xc18>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff78 	bl	800029c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	ec43 2b17 	vmov	d7, r2, r3
 80023b4:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 80026a8 <inverseKinematic+0xc08>
 80023b8:	eeb0 0a47 	vmov.f32	s0, s14
 80023bc:	eef0 0a67 	vmov.f32	s1, s15
 80023c0:	f00c fcbe 	bl	800ed40 <pow>
 80023c4:	ec53 2b10 	vmov	r2, r3, d0
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff66 	bl	800029c <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023dc:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 80026a8 <inverseKinematic+0xc08>
 80023e0:	eeb0 0a47 	vmov.f32	s0, s14
 80023e4:	eef0 0a67 	vmov.f32	s1, s15
 80023e8:	f00c fcaa 	bl	800ed40 <pow>
 80023ec:	ec53 2b10 	vmov	r2, r3, d0
 80023f0:	4620      	mov	r0, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7fd ff52 	bl	800029c <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	a3af      	add	r3, pc, #700	; (adr r3, 80026c0 <inverseKinematic+0xc20>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fd ff47 	bl	8000298 <__aeabi_dsub>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	f7fd ff3f 	bl	800029c <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f7fe fa19 	bl	800085c <__aeabi_ddiv>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ec43 2b17 	vmov	d7, r2, r3
 8002432:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 80026a8 <inverseKinematic+0xc08>
 8002436:	eeb0 0a47 	vmov.f32	s0, s14
 800243a:	eef0 0a67 	vmov.f32	s1, s15
 800243e:	f00c fc7f 	bl	800ed40 <pow>
 8002442:	ec51 0b10 	vmov	r0, r1, d0
 8002446:	a39a      	add	r3, pc, #616	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd ff24 	bl	8000298 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <inverseKinematic+0xc3c>)
 800245a:	e9c3 0100 	strd	r0, r1, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 800245e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002462:	a38f      	add	r3, pc, #572	; (adr r3, 80026a0 <inverseKinematic+0xc00>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fd ff16 	bl	8000298 <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	ec43 2b17 	vmov	d7, r2, r3
 8002474:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80026a8 <inverseKinematic+0xc08>
 8002478:	eeb0 0a47 	vmov.f32	s0, s14
 800247c:	eef0 0a67 	vmov.f32	s1, s15
 8002480:	f00c fc5e 	bl	800ed40 <pow>
 8002484:	ec55 4b10 	vmov	r4, r5, d0
 8002488:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800248c:	a38a      	add	r3, pc, #552	; (adr r3, 80026b8 <inverseKinematic+0xc18>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fd ff03 	bl	800029c <__adddf3>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ec43 2b17 	vmov	d7, r2, r3
 800249e:	ed9f 1b82 	vldr	d1, [pc, #520]	; 80026a8 <inverseKinematic+0xc08>
 80024a2:	eeb0 0a47 	vmov.f32	s0, s14
 80024a6:	eef0 0a67 	vmov.f32	s1, s15
 80024aa:	f00c fc49 	bl	800ed40 <pow>
 80024ae:	ec53 2b10 	vmov	r2, r3, d0
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fef1 	bl	800029c <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	461d      	mov	r5, r3
 80024c2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80024c6:	ed9f 1b78 	vldr	d1, [pc, #480]	; 80026a8 <inverseKinematic+0xc08>
 80024ca:	eeb0 0a47 	vmov.f32	s0, s14
 80024ce:	eef0 0a67 	vmov.f32	s1, s15
 80024d2:	f00c fc35 	bl	800ed40 <pow>
 80024d6:	ec53 2b10 	vmov	r2, r3, d0
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fedd 	bl	800029c <__adddf3>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	a375      	add	r3, pc, #468	; (adr r3, 80026c0 <inverseKinematic+0xc20>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fd fed2 	bl	8000298 <__aeabi_dsub>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	a372      	add	r3, pc, #456	; (adr r3, 80026c8 <inverseKinematic+0xc28>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fec9 	bl	8000298 <__aeabi_dsub>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	a370      	add	r3, pc, #448	; (adr r3, 80026d0 <inverseKinematic+0xc30>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fd fec2 	bl	800029c <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	f7fd feb8 	bl	800029c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fe f992 	bl	800085c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	ec43 2b17 	vmov	d7, r2, r3
 8002540:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80026a8 <inverseKinematic+0xc08>
 8002544:	eeb0 0a47 	vmov.f32	s0, s14
 8002548:	eef0 0a67 	vmov.f32	s1, s15
 800254c:	f00c fbf8 	bl	800ed40 <pow>
 8002550:	ec51 0b10 	vmov	r0, r1, d0
 8002554:	a356      	add	r3, pc, #344	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fd fe9d 	bl	8000298 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <inverseKinematic+0xc40>)
 8002568:	e9c3 0100 	strd	r0, r1, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <inverseKinematic+0xc44>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	4692      	mov	sl, r2
 8002574:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <inverseKinematic+0xc44>)
 800257a:	ed93 7b00 	vldr	d7, [r3]
 800257e:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 80026a8 <inverseKinematic+0xc08>
 8002582:	eeb0 0a47 	vmov.f32	s0, s14
 8002586:	eef0 0a67 	vmov.f32	s1, s15
 800258a:	f00c fbd9 	bl	800ed40 <pow>
 800258e:	ec55 4b10 	vmov	r4, r5, d0
 8002592:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <inverseKinematic+0xc48>)
 8002594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <inverseKinematic+0xc4c>)
 800259e:	f7fe f833 	bl	8000608 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <inverseKinematic+0xc38>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f82a 	bl	8000608 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd fe6c 	bl	8000298 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	ec43 2b17 	vmov	d7, r2, r3
 80025c8:	eeb0 0a47 	vmov.f32	s0, s14
 80025cc:	eef0 0a67 	vmov.f32	s1, s15
 80025d0:	f00c fc26 	bl	800ee20 <sqrt>
 80025d4:	ec53 2b10 	vmov	r2, r3, d0
 80025d8:	4650      	mov	r0, sl
 80025da:	4659      	mov	r1, fp
 80025dc:	f7fd fe5c 	bl	8000298 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <inverseKinematic+0xc48>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	f7fd fe53 	bl	800029c <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe f92d 	bl	800085c <__aeabi_ddiv>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	493a      	ldr	r1, [pc, #232]	; (80026f0 <inverseKinematic+0xc50>)
 8002608:	e9c1 2300 	strd	r2, r3, [r1]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <inverseKinematic+0xc44>)
 800260e:	ed93 7b00 	vldr	d7, [r3]
 8002612:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80026a8 <inverseKinematic+0xc08>
 8002616:	eeb0 0a47 	vmov.f32	s0, s14
 800261a:	eef0 0a67 	vmov.f32	s1, s15
 800261e:	f00c fb8f 	bl	800ed40 <pow>
 8002622:	ec55 4b10 	vmov	r4, r5, d0
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <inverseKinematic+0xc48>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <inverseKinematic+0xc4c>)
 8002632:	f7fd ffe9 	bl	8000608 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <inverseKinematic+0xc38>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffe0 	bl	8000608 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fe22 	bl	8000298 <__aeabi_dsub>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	ec43 2b17 	vmov	d7, r2, r3
 800265c:	eeb0 0a47 	vmov.f32	s0, s14
 8002660:	eef0 0a67 	vmov.f32	s1, s15
 8002664:	f00c fbdc 	bl	800ee20 <sqrt>
 8002668:	ec51 0b10 	vmov	r0, r1, d0
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <inverseKinematic+0xc44>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd fe11 	bl	8000298 <__aeabi_dsub>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <inverseKinematic+0xc48>)
 8002680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	f7fd fe08 	bl	800029c <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fe f8e2 	bl	800085c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	e02b      	b.n	80026f4 <inverseKinematic+0xc54>
 800269c:	f3af 8000 	nop.w
 80026a0:	5625749b 	.word	0x5625749b
 80026a4:	3faf09d1 	.word	0x3faf09d1
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40000000 	.word	0x40000000
 80026b0:	f705857e 	.word	0xf705857e
 80026b4:	3f881e03 	.word	0x3f881e03
 80026b8:	1eb851ec 	.word	0x1eb851ec
 80026bc:	3fa1eb85 	.word	0x3fa1eb85
 80026c0:	70a3d70a 	.word	0x70a3d70a
 80026c4:	3fd70a3d 	.word	0x3fd70a3d
 80026c8:	93d96639 	.word	0x93d96639
 80026cc:	3f9ce6c0 	.word	0x3f9ce6c0
 80026d0:	47ae147c 	.word	0x47ae147c
 80026d4:	3fa47ae1 	.word	0x3fa47ae1
 80026d8:	200002a8 	.word	0x200002a8
 80026dc:	200002f0 	.word	0x200002f0
 80026e0:	20000338 	.word	0x20000338
 80026e4:	200002a0 	.word	0x200002a0
 80026e8:	20000298 	.word	0x20000298
 80026ec:	40100000 	.word	0x40100000
 80026f0:	200002c0 	.word	0x200002c0
 80026f4:	460b      	mov	r3, r1
 80026f6:	49c6      	ldr	r1, [pc, #792]	; (8002a10 <inverseKinematic+0xf70>)
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80026fc:	4bc5      	ldr	r3, [pc, #788]	; (8002a14 <inverseKinematic+0xf74>)
 80026fe:	ed93 7b00 	vldr	d7, [r3]
 8002702:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 80029f8 <inverseKinematic+0xf58>
 8002706:	eeb0 0a47 	vmov.f32	s0, s14
 800270a:	eef0 0a67 	vmov.f32	s1, s15
 800270e:	f00c fb17 	bl	800ed40 <pow>
 8002712:	ec55 4b10 	vmov	r4, r5, d0
 8002716:	4bc0      	ldr	r3, [pc, #768]	; (8002a18 <inverseKinematic+0xf78>)
 8002718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4bbe      	ldr	r3, [pc, #760]	; (8002a1c <inverseKinematic+0xf7c>)
 8002722:	f7fd ff71 	bl	8000608 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4bbc      	ldr	r3, [pc, #752]	; (8002a20 <inverseKinematic+0xf80>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd ff68 	bl	8000608 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd fdaa 	bl	8000298 <__aeabi_dsub>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b17 	vmov	d7, r2, r3
 800274c:	eeb0 0a47 	vmov.f32	s0, s14
 8002750:	eef0 0a67 	vmov.f32	s1, s15
 8002754:	f00c fb64 	bl	800ee20 <sqrt>
 8002758:	ec51 0b10 	vmov	r0, r1, d0
 800275c:	4bad      	ldr	r3, [pc, #692]	; (8002a14 <inverseKinematic+0xf74>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd fd99 	bl	8000298 <__aeabi_dsub>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4614      	mov	r4, r2
 800276c:	461d      	mov	r5, r3
 800276e:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <inverseKinematic+0xf78>)
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	f7fd fd90 	bl	800029c <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fe f86a 	bl	800085c <__aeabi_ddiv>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	49a5      	ldr	r1, [pc, #660]	; (8002a24 <inverseKinematic+0xf84>)
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8002792:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <inverseKinematic+0xf74>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	623a      	str	r2, [r7, #32]
 800279a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <inverseKinematic+0xf74>)
 80027a2:	ed93 7b00 	vldr	d7, [r3]
 80027a6:	ed9f 1b94 	vldr	d1, [pc, #592]	; 80029f8 <inverseKinematic+0xf58>
 80027aa:	eeb0 0a47 	vmov.f32	s0, s14
 80027ae:	eef0 0a67 	vmov.f32	s1, s15
 80027b2:	f00c fac5 	bl	800ed40 <pow>
 80027b6:	ec55 4b10 	vmov	r4, r5, d0
 80027ba:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <inverseKinematic+0xf78>)
 80027bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4b95      	ldr	r3, [pc, #596]	; (8002a1c <inverseKinematic+0xf7c>)
 80027c6:	f7fd ff1f 	bl	8000608 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <inverseKinematic+0xf80>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd ff16 	bl	8000608 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd58 	bl	8000298 <__aeabi_dsub>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	ec43 2b17 	vmov	d7, r2, r3
 80027f0:	eeb0 0a47 	vmov.f32	s0, s14
 80027f4:	eef0 0a67 	vmov.f32	s1, s15
 80027f8:	f00c fb12 	bl	800ee20 <sqrt>
 80027fc:	ec53 2b10 	vmov	r2, r3, d0
 8002800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002804:	f7fd fd48 	bl	8000298 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4614      	mov	r4, r2
 800280e:	461d      	mov	r5, r3
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <inverseKinematic+0xf78>)
 8002812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	f7fd fd3f 	bl	800029c <__adddf3>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe f819 	bl	800085c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	497e      	ldr	r1, [pc, #504]	; (8002a28 <inverseKinematic+0xf88>)
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002834:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <inverseKinematic+0xf8c>)
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80029f8 <inverseKinematic+0xf58>
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f00c fa7b 	bl	800ed40 <pow>
 800284a:	ec55 4b10 	vmov	r4, r5, d0
 800284e:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <inverseKinematic+0xf90>)
 8002850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <inverseKinematic+0xf7c>)
 800285a:	f7fd fed5 	bl	8000608 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <inverseKinematic+0xf94>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fecc 	bl	8000608 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4620      	mov	r0, r4
 8002876:	4629      	mov	r1, r5
 8002878:	f7fd fd0e 	bl	8000298 <__aeabi_dsub>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	ec43 2b17 	vmov	d7, r2, r3
 8002884:	eeb0 0a47 	vmov.f32	s0, s14
 8002888:	eef0 0a67 	vmov.f32	s1, s15
 800288c:	f00c fac8 	bl	800ee20 <sqrt>
 8002890:	ec51 0b10 	vmov	r0, r1, d0
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <inverseKinematic+0xf8c>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fcfd 	bl	8000298 <__aeabi_dsub>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	461d      	mov	r5, r3
 80028a6:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <inverseKinematic+0xf90>)
 80028a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	f7fd fcf4 	bl	800029c <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd ffce 	bl	800085c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	495c      	ldr	r1, [pc, #368]	; (8002a38 <inverseKinematic+0xf98>)
 80028c6:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80028ca:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <inverseKinematic+0xf8c>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	61ba      	str	r2, [r7, #24]
 80028d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <inverseKinematic+0xf8c>)
 80028da:	ed93 7b00 	vldr	d7, [r3]
 80028de:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80029f8 <inverseKinematic+0xf58>
 80028e2:	eeb0 0a47 	vmov.f32	s0, s14
 80028e6:	eef0 0a67 	vmov.f32	s1, s15
 80028ea:	f00c fa29 	bl	800ed40 <pow>
 80028ee:	ec55 4b10 	vmov	r4, r5, d0
 80028f2:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <inverseKinematic+0xf90>)
 80028f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <inverseKinematic+0xf7c>)
 80028fe:	f7fd fe83 	bl	8000608 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <inverseKinematic+0xf94>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe7a 	bl	8000608 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fcbc 	bl	8000298 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f00c fa76 	bl	800ee20 <sqrt>
 8002934:	ec53 2b10 	vmov	r2, r3, d0
 8002938:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800293c:	f7fd fcac 	bl	8000298 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <inverseKinematic+0xf90>)
 800294a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	f7fd fca3 	bl	800029c <__adddf3>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd ff7d 	bl	800085c <__aeabi_ddiv>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4935      	ldr	r1, [pc, #212]	; (8002a3c <inverseKinematic+0xf9c>)
 8002968:	e9c1 2300 	strd	r2, r3, [r1]

	XJ1_1 = 0;
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <inverseKinematic+0xfa0>)
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 800297a:	4932      	ldr	r1, [pc, #200]	; (8002a44 <inverseKinematic+0xfa4>)
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <inverseKinematic+0xf84>)
 800298a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800298e:	a31c      	add	r3, pc, #112	; (adr r3, 8002a00 <inverseKinematic+0xf60>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fe38 	bl	8000608 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	492a      	ldr	r1, [pc, #168]	; (8002a48 <inverseKinematic+0xfa8>)
 800299e:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_2 = sqrt(3) * YJ2_2;
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <inverseKinematic+0xf88>)
 80029a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a8:	a315      	add	r3, pc, #84	; (adr r3, 8002a00 <inverseKinematic+0xf60>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd fe2b 	bl	8000608 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <inverseKinematic+0xfac>)
 80029b8:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_1 = -sqrt(3) * YJ3_1;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <inverseKinematic+0xf98>)
 80029be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c2:	a311      	add	r3, pc, #68	; (adr r3, 8002a08 <inverseKinematic+0xf68>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fe1e 	bl	8000608 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	491f      	ldr	r1, [pc, #124]	; (8002a50 <inverseKinematic+0xfb0>)
 80029d2:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_2 = -sqrt(3) * YJ3_2;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <inverseKinematic+0xf9c>)
 80029d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029dc:	a30a      	add	r3, pc, #40	; (adr r3, 8002a08 <inverseKinematic+0xf68>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe11 	bl	8000608 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	491a      	ldr	r1, [pc, #104]	; (8002a54 <inverseKinematic+0xfb4>)
 80029ec:	e9c1 2300 	strd	r2, r3, [r1]
 80029f0:	e032      	b.n	8002a58 <inverseKinematic+0xfb8>
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40000000 	.word	0x40000000
 8002a00:	e8584caa 	.word	0xe8584caa
 8002a04:	3ffbb67a 	.word	0x3ffbb67a
 8002a08:	e8584caa 	.word	0xe8584caa
 8002a0c:	bffbb67a 	.word	0xbffbb67a
 8002a10:	200002c8 	.word	0x200002c8
 8002a14:	200002e8 	.word	0x200002e8
 8002a18:	200002e0 	.word	0x200002e0
 8002a1c:	40100000 	.word	0x40100000
 8002a20:	200002f0 	.word	0x200002f0
 8002a24:	20000308 	.word	0x20000308
 8002a28:	20000310 	.word	0x20000310
 8002a2c:	20000330 	.word	0x20000330
 8002a30:	20000328 	.word	0x20000328
 8002a34:	20000338 	.word	0x20000338
 8002a38:	20000350 	.word	0x20000350
 8002a3c:	20000358 	.word	0x20000358
 8002a40:	200002b0 	.word	0x200002b0
 8002a44:	200002b8 	.word	0x200002b8
 8002a48:	200002f8 	.word	0x200002f8
 8002a4c:	20000300 	.word	0x20000300
 8002a50:	20000340 	.word	0x20000340
 8002a54:	20000348 	.word	0x20000348

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002a58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a5c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fc19 	bl	8000298 <__aeabi_dsub>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	a3e8      	add	r3, pc, #928	; (adr r3, 8002e10 <inverseKinematic+0x1370>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fc12 	bl	800029c <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002a88:	f7fd fdbe 	bl	8000608 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	461d      	mov	r5, r3
 8002a94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	f7fd fbfe 	bl	800029c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fed8 	bl	800085c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4be2      	ldr	r3, [pc, #904]	; (8002e40 <inverseKinematic+0x13a0>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fda5 	bl	8000608 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002aca:	a3c7      	add	r3, pc, #796	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fbe2 	bl	8000298 <__aeabi_dsub>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	ec43 2b17 	vmov	d7, r2, r3
 8002adc:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 8002df0 <inverseKinematic+0x1350>
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	eef0 0a67 	vmov.f32	s1, s15
 8002ae8:	f00c f92a 	bl	800ed40 <pow>
 8002aec:	ec55 4b10 	vmov	r4, r5, d0
 8002af0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002af4:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8002df0 <inverseKinematic+0x1350>
 8002af8:	eeb0 0a47 	vmov.f32	s0, s14
 8002afc:	eef0 0a67 	vmov.f32	s1, s15
 8002b00:	f00c f91e 	bl	800ed40 <pow>
 8002b04:	ec53 2b10 	vmov	r2, r3, d0
 8002b08:	4620      	mov	r0, r4
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	f7fd fbc6 	bl	800029c <__adddf3>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	a3b7      	add	r3, pc, #732	; (adr r3, 8002df8 <inverseKinematic+0x1358>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fbbb 	bl	8000298 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4614      	mov	r4, r2
 8002b28:	461d      	mov	r5, r3
 8002b2a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b2e:	ed9f 1bb0 	vldr	d1, [pc, #704]	; 8002df0 <inverseKinematic+0x1350>
 8002b32:	eeb0 0a47 	vmov.f32	s0, s14
 8002b36:	eef0 0a67 	vmov.f32	s1, s15
 8002b3a:	f00c f901 	bl	800ed40 <pow>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fba9 	bl	800029c <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	a3ab      	add	r3, pc, #684	; (adr r3, 8002e00 <inverseKinematic+0x1360>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb9e 	bl	8000298 <__aeabi_dsub>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	a3a8      	add	r3, pc, #672	; (adr r3, 8002e08 <inverseKinematic+0x1368>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fb97 	bl	800029c <__adddf3>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f7fd fb8d 	bl	800029c <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fe67 	bl	800085c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f7fd fb81 	bl	800029c <__adddf3>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	49a9      	ldr	r1, [pc, #676]	; (8002e44 <inverseKinematic+0x13a4>)
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002ba4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ba8:	a38f      	add	r3, pc, #572	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fb73 	bl	8000298 <__aeabi_dsub>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	a395      	add	r3, pc, #596	; (adr r3, 8002e10 <inverseKinematic+0x1370>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fb6c 	bl	800029c <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002bd4:	f7fd fd18 	bl	8000608 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	f7fd fb58 	bl	800029c <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fe32 	bl	800085c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <inverseKinematic+0x13a8>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fcff 	bl	8000608 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c16:	a374      	add	r3, pc, #464	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fb3c 	bl	8000298 <__aeabi_dsub>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	ec43 2b17 	vmov	d7, r2, r3
 8002c28:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002df0 <inverseKinematic+0x1350>
 8002c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c30:	eef0 0a67 	vmov.f32	s1, s15
 8002c34:	f00c f884 	bl	800ed40 <pow>
 8002c38:	ec55 4b10 	vmov	r4, r5, d0
 8002c3c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002c40:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002df0 <inverseKinematic+0x1350>
 8002c44:	eeb0 0a47 	vmov.f32	s0, s14
 8002c48:	eef0 0a67 	vmov.f32	s1, s15
 8002c4c:	f00c f878 	bl	800ed40 <pow>
 8002c50:	ec53 2b10 	vmov	r2, r3, d0
 8002c54:	4620      	mov	r0, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	f7fd fb20 	bl	800029c <__adddf3>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	a364      	add	r3, pc, #400	; (adr r3, 8002df8 <inverseKinematic+0x1358>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fb15 	bl	8000298 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4614      	mov	r4, r2
 8002c74:	461d      	mov	r5, r3
 8002c76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c7a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002df0 <inverseKinematic+0x1350>
 8002c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c82:	eef0 0a67 	vmov.f32	s1, s15
 8002c86:	f00c f85b 	bl	800ed40 <pow>
 8002c8a:	ec53 2b10 	vmov	r2, r3, d0
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f7fd fb03 	bl	800029c <__adddf3>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	a358      	add	r3, pc, #352	; (adr r3, 8002e00 <inverseKinematic+0x1360>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd faf8 	bl	8000298 <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	a355      	add	r3, pc, #340	; (adr r3, 8002e08 <inverseKinematic+0x1368>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd faf1 	bl	800029c <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	f7fd fae7 	bl	800029c <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fdc1 	bl	800085c <__aeabi_ddiv>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4640      	mov	r0, r8
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	f7fd fadb 	bl	800029c <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4958      	ldr	r1, [pc, #352]	; (8002e4c <inverseKinematic+0x13ac>)
 8002cec:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002cf0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cf4:	a348      	add	r3, pc, #288	; (adr r3, 8002e18 <inverseKinematic+0x1378>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd facf 	bl	800029c <__adddf3>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	a346      	add	r3, pc, #280	; (adr r3, 8002e20 <inverseKinematic+0x1380>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc7c 	bl	8000608 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d1c:	a342      	add	r3, pc, #264	; (adr r3, 8002e28 <inverseKinematic+0x1388>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fabb 	bl	800029c <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	f7fd fab3 	bl	800029c <__adddf3>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd faab 	bl	8000298 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	a339      	add	r3, pc, #228	; (adr r3, 8002e30 <inverseKinematic+0x1390>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd faa4 	bl	800029c <__adddf3>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	f7fd fa9a 	bl	800029c <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fd74 	bl	800085c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <inverseKinematic+0x13b0>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc41 	bl	8000608 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4690      	mov	r8, r2
 8002d8c:	4699      	mov	r9, r3
 8002d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d92:	a321      	add	r3, pc, #132	; (adr r3, 8002e18 <inverseKinematic+0x1378>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fa80 	bl	800029c <__adddf3>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	ec43 2b17 	vmov	d7, r2, r3
 8002da4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002df0 <inverseKinematic+0x1350>
 8002da8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dac:	eef0 0a67 	vmov.f32	s1, s15
 8002db0:	f00b ffc6 	bl	800ed40 <pow>
 8002db4:	ec51 0b10 	vmov	r0, r1, d0
 8002db8:	a31f      	add	r3, pc, #124	; (adr r3, 8002e38 <inverseKinematic+0x1398>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f7fd fa6d 	bl	800029c <__adddf3>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
 8002dca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dce:	a316      	add	r3, pc, #88	; (adr r3, 8002e28 <inverseKinematic+0x1388>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa62 	bl	800029c <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	ec43 2b17 	vmov	d7, r2, r3
 8002de0:	e038      	b.n	8002e54 <inverseKinematic+0x13b4>
 8002de2:	bf00      	nop
 8002de4:	f3af 8000 	nop.w
 8002de8:	1eb851ec 	.word	0x1eb851ec
 8002dec:	3fb1eb85 	.word	0x3fb1eb85
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40000000 	.word	0x40000000
 8002df8:	70a3d70a 	.word	0x70a3d70a
 8002dfc:	3fd70a3d 	.word	0x3fd70a3d
 8002e00:	93d96639 	.word	0x93d96639
 8002e04:	3f9ce6c0 	.word	0x3f9ce6c0
 8002e08:	47ae147c 	.word	0x47ae147c
 8002e0c:	3fa47ae1 	.word	0x3fa47ae1
 8002e10:	24dd2f1b 	.word	0x24dd2f1b
 8002e14:	3fc58106 	.word	0x3fc58106
 8002e18:	5625749b 	.word	0x5625749b
 8002e1c:	3faf09d1 	.word	0x3faf09d1
 8002e20:	e8584caa 	.word	0xe8584caa
 8002e24:	c00bb67a 	.word	0xc00bb67a
 8002e28:	1eb851ec 	.word	0x1eb851ec
 8002e2c:	3fa1eb85 	.word	0x3fa1eb85
 8002e30:	24dd2f1d 	.word	0x24dd2f1d
 8002e34:	3fe58106 	.word	0x3fe58106
 8002e38:	f705857e 	.word	0xf705857e
 8002e3c:	3f881e03 	.word	0x3f881e03
 8002e40:	200002c0 	.word	0x200002c0
 8002e44:	200002d0 	.word	0x200002d0
 8002e48:	200002c8 	.word	0x200002c8
 8002e4c:	200002d8 	.word	0x200002d8
 8002e50:	20000308 	.word	0x20000308
 8002e54:	ed9f 1be0 	vldr	d1, [pc, #896]	; 80031d8 <inverseKinematic+0x1738>
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	f00b ff6e 	bl	800ed40 <pow>
 8002e64:	ec53 2b10 	vmov	r2, r3, d0
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f7fd fa16 	bl	800029c <__adddf3>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002e7c:	ed9f 1bd6 	vldr	d1, [pc, #856]	; 80031d8 <inverseKinematic+0x1738>
 8002e80:	eeb0 0a47 	vmov.f32	s0, s14
 8002e84:	eef0 0a67 	vmov.f32	s1, s15
 8002e88:	f00b ff5a 	bl	800ed40 <pow>
 8002e8c:	ec53 2b10 	vmov	r2, r3, d0
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fa02 	bl	800029c <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	a3d9      	add	r3, pc, #868	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd f9f7 	bl	8000298 <__aeabi_dsub>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	f7fd f9ef 	bl	800029c <__adddf3>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd fcc9 	bl	800085c <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd f9e3 	bl	800029c <__adddf3>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	49d7      	ldr	r1, [pc, #860]	; (8003238 <inverseKinematic+0x1798>)
 8002edc:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002ee0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ee4:	a3be      	add	r3, pc, #760	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd f9d7 	bl	800029c <__adddf3>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	a3bc      	add	r3, pc, #752	; (adr r3, 80031e8 <inverseKinematic+0x1748>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb84 	bl	8000608 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f0c:	a3b8      	add	r3, pc, #736	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd f9c3 	bl	800029c <__adddf3>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	f7fd f9bb 	bl	800029c <__adddf3>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9b3 	bl	8000298 <__aeabi_dsub>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	a3af      	add	r3, pc, #700	; (adr r3, 80031f8 <inverseKinematic+0x1758>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f9ac 	bl	800029c <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	f7fd f9a2 	bl	800029c <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	f7fd fc7c 	bl	800085c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4bb3      	ldr	r3, [pc, #716]	; (800323c <inverseKinematic+0x179c>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb49 	bl	8000608 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f82:	a397      	add	r3, pc, #604	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd f988 	bl	800029c <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	ec43 2b17 	vmov	d7, r2, r3
 8002f94:	ed9f 1b90 	vldr	d1, [pc, #576]	; 80031d8 <inverseKinematic+0x1738>
 8002f98:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9c:	eef0 0a67 	vmov.f32	s1, s15
 8002fa0:	f00b fece 	bl	800ed40 <pow>
 8002fa4:	ec51 0b10 	vmov	r0, r1, d0
 8002fa8:	a395      	add	r3, pc, #596	; (adr r3, 8003200 <inverseKinematic+0x1760>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd f975 	bl	800029c <__adddf3>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4614      	mov	r4, r2
 8002fb8:	461d      	mov	r5, r3
 8002fba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fbe:	a38c      	add	r3, pc, #560	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd f96a 	bl	800029c <__adddf3>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	ec43 2b17 	vmov	d7, r2, r3
 8002fd0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80031d8 <inverseKinematic+0x1738>
 8002fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd8:	eef0 0a67 	vmov.f32	s1, s15
 8002fdc:	f00b feb0 	bl	800ed40 <pow>
 8002fe0:	ec53 2b10 	vmov	r2, r3, d0
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7fd f958 	bl	800029c <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002ff8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80031d8 <inverseKinematic+0x1738>
 8002ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8003000:	eef0 0a67 	vmov.f32	s1, s15
 8003004:	f00b fe9c 	bl	800ed40 <pow>
 8003008:	ec53 2b10 	vmov	r2, r3, d0
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f944 	bl	800029c <__adddf3>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	a37a      	add	r3, pc, #488	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd f939 	bl	8000298 <__aeabi_dsub>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	461d      	mov	r5, r3
 800302e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	f7fd f931 	bl	800029c <__adddf3>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd fc0b 	bl	800085c <__aeabi_ddiv>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd f925 	bl	800029c <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	497a      	ldr	r1, [pc, #488]	; (8003240 <inverseKinematic+0x17a0>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800305c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003060:	a35f      	add	r3, pc, #380	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd f917 	bl	8000298 <__aeabi_dsub>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	a367      	add	r3, pc, #412	; (adr r3, 8003210 <inverseKinematic+0x1770>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fac6 	bl	8000608 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003088:	a359      	add	r3, pc, #356	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd f905 	bl	800029c <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	f7fd f8fd 	bl	800029c <__adddf3>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f8f5 	bl	8000298 <__aeabi_dsub>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	a358      	add	r3, pc, #352	; (adr r3, 8003218 <inverseKinematic+0x1778>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd f8ee 	bl	800029c <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	a355      	add	r3, pc, #340	; (adr r3, 8003220 <inverseKinematic+0x1780>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd f8e5 	bl	800029c <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4614      	mov	r4, r2
 80030d8:	461d      	mov	r5, r3
 80030da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	f7fd f8db 	bl	800029c <__adddf3>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd fbb5 	bl	800085c <__aeabi_ddiv>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4b52      	ldr	r3, [pc, #328]	; (8003244 <inverseKinematic+0x17a4>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd fa82 	bl	8000608 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4690      	mov	r8, r2
 800310a:	4699      	mov	r9, r3
 800310c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003110:	a333      	add	r3, pc, #204	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd f8bf 	bl	8000298 <__aeabi_dsub>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	ec43 2b17 	vmov	d7, r2, r3
 8003122:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80031d8 <inverseKinematic+0x1738>
 8003126:	eeb0 0a47 	vmov.f32	s0, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	f00b fe07 	bl	800ed40 <pow>
 8003132:	ec55 4b10 	vmov	r4, r5, d0
 8003136:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800313a:	a32d      	add	r3, pc, #180	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd f8ac 	bl	800029c <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	ec43 2b17 	vmov	d7, r2, r3
 800314c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80031d8 <inverseKinematic+0x1738>
 8003150:	eeb0 0a47 	vmov.f32	s0, s14
 8003154:	eef0 0a67 	vmov.f32	s1, s15
 8003158:	f00b fdf2 	bl	800ed40 <pow>
 800315c:	ec53 2b10 	vmov	r2, r3, d0
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd f89a 	bl	800029c <__adddf3>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4614      	mov	r4, r2
 800316e:	461d      	mov	r5, r3
 8003170:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003174:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80031d8 <inverseKinematic+0x1738>
 8003178:	eeb0 0a47 	vmov.f32	s0, s14
 800317c:	eef0 0a67 	vmov.f32	s1, s15
 8003180:	f00b fdde 	bl	800ed40 <pow>
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd f886 	bl	800029c <__adddf3>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	a31b      	add	r3, pc, #108	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f87b 	bl	8000298 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	a31f      	add	r3, pc, #124	; (adr r3, 8003228 <inverseKinematic+0x1788>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f872 	bl	8000298 <__aeabi_dsub>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	a31c      	add	r3, pc, #112	; (adr r3, 8003230 <inverseKinematic+0x1790>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd f86b 	bl	800029c <__adddf3>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
 80031ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	e037      	b.n	8003248 <inverseKinematic+0x17a8>
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40000000 	.word	0x40000000
 80031e0:	5625749b 	.word	0x5625749b
 80031e4:	3faf09d1 	.word	0x3faf09d1
 80031e8:	e8584caa 	.word	0xe8584caa
 80031ec:	c00bb67a 	.word	0xc00bb67a
 80031f0:	1eb851ec 	.word	0x1eb851ec
 80031f4:	3fa1eb85 	.word	0x3fa1eb85
 80031f8:	24dd2f1d 	.word	0x24dd2f1d
 80031fc:	3fe58106 	.word	0x3fe58106
 8003200:	f705857e 	.word	0xf705857e
 8003204:	3f881e03 	.word	0x3f881e03
 8003208:	70a3d70a 	.word	0x70a3d70a
 800320c:	3fd70a3d 	.word	0x3fd70a3d
 8003210:	e8584caa 	.word	0xe8584caa
 8003214:	400bb67a 	.word	0x400bb67a
 8003218:	9ba5e356 	.word	0x9ba5e356
 800321c:	3fe020c4 	.word	0x3fe020c4
 8003220:	24dd2f1b 	.word	0x24dd2f1b
 8003224:	3fc58106 	.word	0x3fc58106
 8003228:	93d96639 	.word	0x93d96639
 800322c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003230:	47ae147c 	.word	0x47ae147c
 8003234:	3fa47ae1 	.word	0x3fa47ae1
 8003238:	20000318 	.word	0x20000318
 800323c:	20000310 	.word	0x20000310
 8003240:	20000320 	.word	0x20000320
 8003244:	20000350 	.word	0x20000350
 8003248:	f7fd f828 	bl	800029c <__adddf3>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fd fb02 	bl	800085c <__aeabi_ddiv>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	f7fd f81c 	bl	800029c <__adddf3>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	49cf      	ldr	r1, [pc, #828]	; (80035a8 <inverseKinematic+0x1b08>)
 800326a:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800326e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003272:	a3b7      	add	r3, pc, #732	; (adr r3, 8003550 <inverseKinematic+0x1ab0>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd f80e 	bl	8000298 <__aeabi_dsub>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	a3b4      	add	r3, pc, #720	; (adr r3, 8003558 <inverseKinematic+0x1ab8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f9bd 	bl	8000608 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4614      	mov	r4, r2
 8003294:	461d      	mov	r5, r3
 8003296:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800329a:	a3b1      	add	r3, pc, #708	; (adr r3, 8003560 <inverseKinematic+0x1ac0>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f7fc fffc 	bl	800029c <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	f7fc fff4 	bl	800029c <__adddf3>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ffec 	bl	8000298 <__aeabi_dsub>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	a3a7      	add	r3, pc, #668	; (adr r3, 8003568 <inverseKinematic+0x1ac8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fc ffe5 	bl	800029c <__adddf3>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	a3a5      	add	r3, pc, #660	; (adr r3, 8003570 <inverseKinematic+0x1ad0>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fc ffdc 	bl	800029c <__adddf3>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	f7fc ffd2 	bl	800029c <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd faac 	bl	800085c <__aeabi_ddiv>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	4ba7      	ldr	r3, [pc, #668]	; (80035ac <inverseKinematic+0x1b0c>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f979 	bl	8000608 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003322:	a38b      	add	r3, pc, #556	; (adr r3, 8003550 <inverseKinematic+0x1ab0>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fc ffb6 	bl	8000298 <__aeabi_dsub>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	ec43 2b17 	vmov	d7, r2, r3
 8003334:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8003578 <inverseKinematic+0x1ad8>
 8003338:	eeb0 0a47 	vmov.f32	s0, s14
 800333c:	eef0 0a67 	vmov.f32	s1, s15
 8003340:	f00b fcfe 	bl	800ed40 <pow>
 8003344:	ec55 4b10 	vmov	r4, r5, d0
 8003348:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800334c:	a384      	add	r3, pc, #528	; (adr r3, 8003560 <inverseKinematic+0x1ac0>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ffa3 	bl	800029c <__adddf3>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	ec43 2b17 	vmov	d7, r2, r3
 800335e:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8003578 <inverseKinematic+0x1ad8>
 8003362:	eeb0 0a47 	vmov.f32	s0, s14
 8003366:	eef0 0a67 	vmov.f32	s1, s15
 800336a:	f00b fce9 	bl	800ed40 <pow>
 800336e:	ec53 2b10 	vmov	r2, r3, d0
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fc ff91 	bl	800029c <__adddf3>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003386:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8003578 <inverseKinematic+0x1ad8>
 800338a:	eeb0 0a47 	vmov.f32	s0, s14
 800338e:	eef0 0a67 	vmov.f32	s1, s15
 8003392:	f00b fcd5 	bl	800ed40 <pow>
 8003396:	ec53 2b10 	vmov	r2, r3, d0
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f7fc ff7d 	bl	800029c <__adddf3>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	a375      	add	r3, pc, #468	; (adr r3, 8003580 <inverseKinematic+0x1ae0>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fc ff72 	bl	8000298 <__aeabi_dsub>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	a372      	add	r3, pc, #456	; (adr r3, 8003588 <inverseKinematic+0x1ae8>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fc ff69 	bl	8000298 <__aeabi_dsub>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	a370      	add	r3, pc, #448	; (adr r3, 8003590 <inverseKinematic+0x1af0>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc ff62 	bl	800029c <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	f7fc ff58 	bl	800029c <__adddf3>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7fd fa32 	bl	800085c <__aeabi_ddiv>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4640      	mov	r0, r8
 80033fe:	4649      	mov	r1, r9
 8003400:	f7fc ff4c 	bl	800029c <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4969      	ldr	r1, [pc, #420]	; (80035b0 <inverseKinematic+0x1b10>)
 800340a:	e9c1 2300 	strd	r2, r3, [r1]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800340e:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <inverseKinematic+0x1b14>)
 8003410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003414:	a360      	add	r3, pc, #384	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd fa1f 	bl	800085c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	ec43 2b17 	vmov	d7, r2, r3
 8003426:	eeb0 0a47 	vmov.f32	s0, s14
 800342a:	eef0 0a67 	vmov.f32	s1, s15
 800342e:	f00b fc53 	bl	800ecd8 <asin>
 8003432:	ec53 2b10 	vmov	r2, r3, d0
 8003436:	613a      	str	r2, [r7, #16]
 8003438:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <inverseKinematic+0x1b18>)
 8003440:	ed97 7b04 	vldr	d7, [r7, #16]
 8003444:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <inverseKinematic+0x1b18>)
 800344a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <inverseKinematic+0x1b1c>)
 8003454:	f7fd f8d8 	bl	8000608 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	a34f      	add	r3, pc, #316	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f9f9 	bl	800085c <__aeabi_ddiv>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4952      	ldr	r1, [pc, #328]	; (80035b8 <inverseKinematic+0x1b18>)
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <inverseKinematic+0x1b20>)
 8003476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347a:	a347      	add	r3, pc, #284	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f9ec 	bl	800085c <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	ec43 2b17 	vmov	d7, r2, r3
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f00b fc20 	bl	800ecd8 <asin>
 8003498:	ec53 2b10 	vmov	r2, r3, d0
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <inverseKinematic+0x1b24>)
 80034a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80034aa:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80034ae:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <inverseKinematic+0x1b24>)
 80034b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <inverseKinematic+0x1b1c>)
 80034ba:	f7fd f8a5 	bl	8000608 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	a336      	add	r3, pc, #216	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f9c6 	bl	800085c <__aeabi_ddiv>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	493b      	ldr	r1, [pc, #236]	; (80035c4 <inverseKinematic+0x1b24>)
 80034d6:	e9c1 2300 	strd	r2, r3, [r1]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <inverseKinematic+0x1b08>)
 80034dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e0:	a32d      	add	r3, pc, #180	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f7fd f9b9 	bl	800085c <__aeabi_ddiv>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b17 	vmov	d7, r2, r3
 80034f2:	eeb0 0a47 	vmov.f32	s0, s14
 80034f6:	eef0 0a67 	vmov.f32	s1, s15
 80034fa:	f00b fbed 	bl	800ecd8 <asin>
 80034fe:	ec53 2b10 	vmov	r2, r3, d0
 8003502:	603a      	str	r2, [r7, #0]
 8003504:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <inverseKinematic+0x1b28>)
 800350c:	ed97 7b00 	vldr	d7, [r7]
 8003510:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <inverseKinematic+0x1b28>)
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <inverseKinematic+0x1b1c>)
 8003520:	f7fd f872 	bl	8000608 <__aeabi_dmul>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	a31c      	add	r3, pc, #112	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f7fd f993 	bl	800085c <__aeabi_ddiv>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4923      	ldr	r1, [pc, #140]	; (80035c8 <inverseKinematic+0x1b28>)
 800353c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003540:	bf00      	nop
 8003542:	3740      	adds	r7, #64	; 0x40
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w
 8003550:	5625749b 	.word	0x5625749b
 8003554:	3faf09d1 	.word	0x3faf09d1
 8003558:	e8584caa 	.word	0xe8584caa
 800355c:	400bb67a 	.word	0x400bb67a
 8003560:	1eb851ec 	.word	0x1eb851ec
 8003564:	3fa1eb85 	.word	0x3fa1eb85
 8003568:	9ba5e356 	.word	0x9ba5e356
 800356c:	3fe020c4 	.word	0x3fe020c4
 8003570:	24dd2f1b 	.word	0x24dd2f1b
 8003574:	3fc58106 	.word	0x3fc58106
 8003578:	00000000 	.word	0x00000000
 800357c:	40000000 	.word	0x40000000
 8003580:	70a3d70a 	.word	0x70a3d70a
 8003584:	3fd70a3d 	.word	0x3fd70a3d
 8003588:	93d96639 	.word	0x93d96639
 800358c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003590:	47ae147c 	.word	0x47ae147c
 8003594:	3fa47ae1 	.word	0x3fa47ae1
 8003598:	9999999a 	.word	0x9999999a
 800359c:	3fc99999 	.word	0x3fc99999
 80035a0:	54442eea 	.word	0x54442eea
 80035a4:	400921fb 	.word	0x400921fb
 80035a8:	20000360 	.word	0x20000360
 80035ac:	20000358 	.word	0x20000358
 80035b0:	20000368 	.word	0x20000368
 80035b4:	200002d0 	.word	0x200002d0
 80035b8:	200005f8 	.word	0x200005f8
 80035bc:	40668000 	.word	0x40668000
 80035c0:	20000318 	.word	0x20000318
 80035c4:	20000640 	.word	0x20000640
 80035c8:	20000688 	.word	0x20000688

080035cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d0:	f004 fd9a 	bl	8008108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d4:	f000 f818 	bl	8003608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035d8:	f000 fbbe 	bl	8003d58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035dc:	f000 fb92 	bl	8003d04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80035e0:	f000 f87e 	bl	80036e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80035e4:	f000 f91c 	bl	8003820 <MX_TIM2_Init>
  MX_TIM3_Init();
 80035e8:	f000 f966 	bl	80038b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80035ec:	f000 fa50 	bl	8003a90 <MX_TIM5_Init>
  MX_TIM9_Init();
 80035f0:	f000 fabe 	bl	8003b70 <MX_TIM9_Init>
  MX_TIM10_Init();
 80035f4:	f000 faf6 	bl	8003be4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80035f8:	f000 fb3c 	bl	8003c74 <MX_TIM11_Init>
  MX_TIM4_Init();
 80035fc:	f000 f9d2 	bl	80039a4 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statesMachineLoop();
 8003600:	f001 f816 	bl	8004630 <statesMachineLoop>
 8003604:	e7fc      	b.n	8003600 <main+0x34>
	...

08003608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b094      	sub	sp, #80	; 0x50
 800360c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800360e:	f107 0320 	add.w	r3, r7, #32
 8003612:	2230      	movs	r2, #48	; 0x30
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f008 fc98 	bl	800bf4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <SystemClock_Config+0xd0>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <SystemClock_Config+0xd0>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <SystemClock_Config+0xd0>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <SystemClock_Config+0xd4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <SystemClock_Config+0xd4>)
 8003652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b20      	ldr	r3, [pc, #128]	; (80036dc <SystemClock_Config+0xd4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003664:	2303      	movs	r3, #3
 8003666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800366e:	2301      	movs	r3, #1
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003672:	2310      	movs	r3, #16
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003676:	2302      	movs	r3, #2
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800367a:	2300      	movs	r3, #0
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800367e:	2308      	movs	r3, #8
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003686:	2302      	movs	r3, #2
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800368a:	2304      	movs	r3, #4
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800368e:	f107 0320 	add.w	r3, r7, #32
 8003692:	4618      	mov	r0, r3
 8003694:	f005 f98c 	bl	80089b0 <HAL_RCC_OscConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800369e:	f000 fea5 	bl	80043ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a2:	230f      	movs	r3, #15
 80036a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a6:	2302      	movs	r3, #2
 80036a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	2102      	movs	r1, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f005 fbee 	bl	8008ea0 <HAL_RCC_ClockConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80036ca:	f000 fe8f 	bl	80043ec <Error_Handler>
  }
}
 80036ce:	bf00      	nop
 80036d0:	3750      	adds	r7, #80	; 0x50
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000

080036e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b096      	sub	sp, #88	; 0x58
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2220      	movs	r2, #32
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f008 fc17 	bl	800bf4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <MX_TIM1_Init+0x138>)
 8003720:	4a3e      	ldr	r2, [pc, #248]	; (800381c <MX_TIM1_Init+0x13c>)
 8003722:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <MX_TIM1_Init+0x138>)
 8003726:	223f      	movs	r2, #63	; 0x3f
 8003728:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <MX_TIM1_Init+0x138>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <MX_TIM1_Init+0x138>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <MX_TIM1_Init+0x138>)
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <MX_TIM1_Init+0x138>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003742:	4b35      	ldr	r3, [pc, #212]	; (8003818 <MX_TIM1_Init+0x138>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003748:	4833      	ldr	r0, [pc, #204]	; (8003818 <MX_TIM1_Init+0x138>)
 800374a:	f005 feb9 	bl	80094c0 <HAL_TIM_Base_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003754:	f000 fe4a 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800375e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003762:	4619      	mov	r1, r3
 8003764:	482c      	ldr	r0, [pc, #176]	; (8003818 <MX_TIM1_Init+0x138>)
 8003766:	f006 fdb5 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003770:	f000 fe3c 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003774:	4828      	ldr	r0, [pc, #160]	; (8003818 <MX_TIM1_Init+0x138>)
 8003776:	f006 f806 	bl	8009786 <HAL_TIM_PWM_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003780:	f000 fe34 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800378c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003790:	4619      	mov	r1, r3
 8003792:	4821      	ldr	r0, [pc, #132]	; (8003818 <MX_TIM1_Init+0x138>)
 8003794:	f007 fa6e 	bl	800ac74 <HAL_TIMEx_MasterConfigSynchronization>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800379e:	f000 fe25 	bl	80043ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a2:	2360      	movs	r3, #96	; 0x60
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ae:	2300      	movs	r3, #0
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c2:	2200      	movs	r2, #0
 80037c4:	4619      	mov	r1, r3
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <MX_TIM1_Init+0x138>)
 80037c8:	f006 fcc2 	bl	800a150 <HAL_TIM_PWM_ConfigChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80037d2:	f000 fe0b 	bl	80043ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <MX_TIM1_Init+0x138>)
 80037fa:	f007 faa9 	bl	800ad50 <HAL_TIMEx_ConfigBreakDeadTime>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003804:	f000 fdf2 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <MX_TIM1_Init+0x138>)
 800380a:	f001 febd 	bl	8005588 <HAL_TIM_MspPostInit>

}
 800380e:	bf00      	nop
 8003810:	3758      	adds	r7, #88	; 0x58
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000370 	.word	0x20000370
 800381c:	40010000 	.word	0x40010000

08003820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003834:	463b      	mov	r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <MX_TIM2_Init+0x94>)
 800383e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <MX_TIM2_Init+0x94>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003852:	f04f 32ff 	mov.w	r2, #4294967295
 8003856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <MX_TIM2_Init+0x94>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003864:	4813      	ldr	r0, [pc, #76]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003866:	f005 fe2b 	bl	80094c0 <HAL_TIM_Base_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003870:	f000 fdbc 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4619      	mov	r1, r3
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003882:	f006 fd27 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800388c:	f000 fdae 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003898:	463b      	mov	r3, r7
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	; (80038b4 <MX_TIM2_Init+0x94>)
 800389e:	f007 f9e9 	bl	800ac74 <HAL_TIMEx_MasterConfigSynchronization>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038a8:	f000 fda0 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200003b8 	.word	0x200003b8

080038b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	; 0x38
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <MX_TIM3_Init+0xe4>)
 80038ea:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <MX_TIM3_Init+0xe8>)
 80038ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <MX_TIM3_Init+0xe4>)
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <MX_TIM3_Init+0xe4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <MX_TIM3_Init+0xe4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <MX_TIM3_Init+0xe4>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <MX_TIM3_Init+0xe4>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800390c:	4823      	ldr	r0, [pc, #140]	; (800399c <MX_TIM3_Init+0xe4>)
 800390e:	f005 fdd7 	bl	80094c0 <HAL_TIM_Base_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003918:	f000 fd68 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003926:	4619      	mov	r1, r3
 8003928:	481c      	ldr	r0, [pc, #112]	; (800399c <MX_TIM3_Init+0xe4>)
 800392a:	f006 fcd3 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003934:	f000 fd5a 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003938:	4818      	ldr	r0, [pc, #96]	; (800399c <MX_TIM3_Init+0xe4>)
 800393a:	f005 ff24 	bl	8009786 <HAL_TIM_PWM_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003944:	f000 fd52 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003950:	f107 0320 	add.w	r3, r7, #32
 8003954:	4619      	mov	r1, r3
 8003956:	4811      	ldr	r0, [pc, #68]	; (800399c <MX_TIM3_Init+0xe4>)
 8003958:	f007 f98c 	bl	800ac74 <HAL_TIMEx_MasterConfigSynchronization>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003962:	f000 fd43 	bl	80043ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003966:	2360      	movs	r3, #96	; 0x60
 8003968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	2200      	movs	r2, #0
 800397a:	4619      	mov	r1, r3
 800397c:	4807      	ldr	r0, [pc, #28]	; (800399c <MX_TIM3_Init+0xe4>)
 800397e:	f006 fbe7 	bl	800a150 <HAL_TIM_PWM_ConfigChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003988:	f000 fd30 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <MX_TIM3_Init+0xe4>)
 800398e:	f001 fdfb 	bl	8005588 <HAL_TIM_MspPostInit>

}
 8003992:	bf00      	nop
 8003994:	3738      	adds	r7, #56	; 0x38
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000400 	.word	0x20000400
 80039a0:	40000400 	.word	0x40000400

080039a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	; 0x38
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b8:	f107 0320 	add.w	r3, r7, #32
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039d4:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039d6:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <MX_TIM4_Init+0xe8>)
 80039d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000;
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039e8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80039ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039fa:	4823      	ldr	r0, [pc, #140]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039fc:	f005 fd60 	bl	80094c0 <HAL_TIM_Base_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003a06:	f000 fcf1 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a14:	4619      	mov	r1, r3
 8003a16:	481c      	ldr	r0, [pc, #112]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a18:	f006 fc5c 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003a22:	f000 fce3 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a26:	4818      	ldr	r0, [pc, #96]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a28:	f005 fead 	bl	8009786 <HAL_TIM_PWM_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003a32:	f000 fcdb 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a3e:	f107 0320 	add.w	r3, r7, #32
 8003a42:	4619      	mov	r1, r3
 8003a44:	4810      	ldr	r0, [pc, #64]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a46:	f007 f915 	bl	800ac74 <HAL_TIMEx_MasterConfigSynchronization>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003a50:	f000 fccc 	bl	80043ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a54:	2360      	movs	r3, #96	; 0x60
 8003a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4807      	ldr	r0, [pc, #28]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a6c:	f006 fb70 	bl	800a150 <HAL_TIM_PWM_ConfigChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003a76:	f000 fcb9 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a7c:	f001 fd84 	bl	8005588 <HAL_TIM_MspPostInit>

}
 8003a80:	bf00      	nop
 8003a82:	3738      	adds	r7, #56	; 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000448 	.word	0x20000448
 8003a8c:	40000800 	.word	0x40000800

08003a90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a96:	f107 0318 	add.w	r3, r7, #24
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003aae:	463b      	mov	r3, r7
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <MX_TIM5_Init+0xdc>)
 8003abe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ae0:	4821      	ldr	r0, [pc, #132]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ae2:	f005 fced 	bl	80094c0 <HAL_TIM_Base_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003aec:	f000 fc7e 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003af6:	f107 0318 	add.w	r3, r7, #24
 8003afa:	4619      	mov	r1, r3
 8003afc:	481a      	ldr	r0, [pc, #104]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003afe:	f006 fbe9 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003b08:	f000 fc70 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003b0c:	4816      	ldr	r0, [pc, #88]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b0e:	f005 ffa7 	bl	8009a60 <HAL_TIM_IC_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003b18:	f000 fc68 	bl	80043ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480f      	ldr	r0, [pc, #60]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b2c:	f007 f8a2 	bl	800ac74 <HAL_TIMEx_MasterConfigSynchronization>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8003b36:	f000 fc59 	bl	80043ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b52:	f006 fa61 	bl	800a018 <HAL_TIM_IC_ConfigChannel>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8003b5c:	f000 fc46 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000490 	.word	0x20000490
 8003b6c:	40000c00 	.word	0x40000c00

08003b70 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b76:	463b      	mov	r3, r7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <MX_TIM9_Init+0x70>)
 8003b86:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64000;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b96:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003b9a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003baa:	f005 fc89 	bl	80094c0 <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003bb4:	f000 fc1a 	bl	80043ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003bc4:	f006 fb86 	bl	800a2d4 <HAL_TIM_ConfigClockSource>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003bce:	f000 fc0d 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200004d8 	.word	0x200004d8
 8003be0:	40014000 	.word	0x40014000

08003be4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003bea:	463b      	mov	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <MX_TIM10_Init+0x8c>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c1e:	f005 fc4f 	bl	80094c0 <HAL_TIM_Base_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8003c28:	f000 fbe0 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8003c2c:	480f      	ldr	r0, [pc, #60]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c2e:	f005 ff17 	bl	8009a60 <HAL_TIM_IC_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8003c38:	f000 fbd8 	bl	80043ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c40:	2301      	movs	r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4619      	mov	r1, r3
 8003c52:	4806      	ldr	r0, [pc, #24]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c54:	f006 f9e0 	bl	800a018 <HAL_TIM_IC_ConfigChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8003c5e:	f000 fbc5 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000520 	.word	0x20000520
 8003c70:	40014400 	.word	0x40014400

08003c74 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <MX_TIM11_Init+0x8c>)
 8003c8a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca0:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003cac:	4813      	ldr	r0, [pc, #76]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003cae:	f005 fc07 	bl	80094c0 <HAL_TIM_Base_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8003cb8:	f000 fb98 	bl	80043ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8003cbc:	480f      	ldr	r0, [pc, #60]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003cbe:	f005 fecf 	bl	8009a60 <HAL_TIM_IC_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8003cc8:	f000 fb90 	bl	80043ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003cdc:	463b      	mov	r3, r7
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4806      	ldr	r0, [pc, #24]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ce4:	f006 f998 	bl	800a018 <HAL_TIM_IC_ConfigChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8003cee:	f000 fb7d 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000568 	.word	0x20000568
 8003d00:	40014800 	.word	0x40014800

08003d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <MX_USART2_UART_Init+0x50>)
 8003d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d3c:	f007 f86e 	bl	800ae1c <HAL_UART_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d46:	f000 fb51 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200005b0 	.word	0x200005b0
 8003d54:	40004400 	.word	0x40004400

08003d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b67      	ldr	r3, [pc, #412]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b63      	ldr	r3, [pc, #396]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a62      	ldr	r2, [pc, #392]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a5b      	ldr	r2, [pc, #364]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a54      	ldr	r2, [pc, #336]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b52      	ldr	r3, [pc, #328]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f240 1163 	movw	r1, #355	; 0x163
 8003e00:	4847      	ldr	r0, [pc, #284]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e02:	f004 fd89 	bl	8008918 <HAL_GPIO_WritePin>
                          |S_Enable_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4846      	ldr	r0, [pc, #280]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e0c:	f004 fd84 	bl	8008918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4619      	mov	r1, r3
 8003e26:	483e      	ldr	r0, [pc, #248]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e28:	f004 fbda 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_DirPaP3_Pin S_DirPaP2_Pin S_Enable_3_Pin S_Enable_2_Pin
                           S_Enable_1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003e2c:	f240 1363 	movw	r3, #355	; 0x163
 8003e30:	617b      	str	r3, [r7, #20]
                          |S_Enable_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4836      	ldr	r0, [pc, #216]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e46:	f004 fbcb 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : faultDriver3_Pin */
  GPIO_InitStruct.Pin = faultDriver3_Pin;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e54:	2301      	movs	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(faultDriver3_GPIO_Port, &GPIO_InitStruct);
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4832      	ldr	r0, [pc, #200]	; (8003f28 <MX_GPIO_Init+0x1d0>)
 8003e60:	f004 fbbe 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_DirPaP1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_DirPaP1_GPIO_Port, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	482a      	ldr	r0, [pc, #168]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e7c:	f004 fbb0 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : faultDriver2_Pin faultDriver1_Pin E_EndStop1_Sup_Pin E_EndStop1_Inf_Pin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
 8003e80:	f24c 0330 	movw	r3, #49200	; 0xc030
 8003e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4619      	mov	r1, r3
 8003e96:	4823      	ldr	r0, [pc, #140]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e98:	f004 fba2 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_EndStop3_Sup_Pin E_EndStop2_Sup_Pin E_EndStop3_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop2_Sup_Pin|E_EndStop3_Inf_Pin;
 8003e9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ea2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	481b      	ldr	r0, [pc, #108]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003eb4:	f004 fb94 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_EndStop2_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop2_Inf_Pin;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ebc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_EndStop2_Inf_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4817      	ldr	r0, [pc, #92]	; (8003f2c <MX_GPIO_Init+0x1d4>)
 8003ece:	f004 fb87 	bl	80085e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	2008      	movs	r0, #8
 8003ed8:	f004 faab 	bl	8008432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003edc:	2008      	movs	r0, #8
 8003ede:	f004 fac4 	bl	800846a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	200a      	movs	r0, #10
 8003ee8:	f004 faa3 	bl	8008432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003eec:	200a      	movs	r0, #10
 8003eee:	f004 fabc 	bl	800846a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	2017      	movs	r0, #23
 8003ef8:	f004 fa9b 	bl	8008432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003efc:	2017      	movs	r0, #23
 8003efe:	f004 fab4 	bl	800846a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2102      	movs	r1, #2
 8003f06:	2028      	movs	r0, #40	; 0x28
 8003f08:	f004 fa93 	bl	8008432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f0c:	2028      	movs	r0, #40	; 0x28
 8003f0e:	f004 faac 	bl	800846a <HAL_NVIC_EnableIRQ>

}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020c00 	.word	0x40020c00

08003f30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	80fb      	strh	r3, [r7, #6]
	test++;
 8003f3a:	4b93      	ldr	r3, [pc, #588]	; (8004188 <HAL_GPIO_EXTI_Callback+0x258>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a91      	ldr	r2, [pc, #580]	; (8004188 <HAL_GPIO_EXTI_Callback+0x258>)
 8003f42:	6013      	str	r3, [r2, #0]
	switch( GPIO_Pin){
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4a:	f000 8104 	beq.w	8004156 <HAL_GPIO_EXTI_Callback+0x226>
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	f300 8114 	bgt.w	800417e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	f000 80b2 	beq.w	80040c2 <HAL_GPIO_EXTI_Callback+0x192>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	f300 810c 	bgt.w	800417e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6a:	f000 8085 	beq.w	8004078 <HAL_GPIO_EXTI_Callback+0x148>
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	f300 8104 	bgt.w	800417e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	f000 80c7 	beq.w	800410c <HAL_GPIO_EXTI_Callback+0x1dc>
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	f300 80fc 	bgt.w	800417e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_EXTI_Callback+0x6a>
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	f300 80f7 	bgt.w	800417e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d04c      	beq.n	800402e <HAL_GPIO_EXTI_Callback+0xfe>
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d025      	beq.n	8003fe4 <HAL_GPIO_EXTI_Callback+0xb4>
//			 //manualTrigger = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8003f98:	e0f1      	b.n	800417e <HAL_GPIO_EXTI_Callback+0x24e>
			 Stop_PWM_MOTOR_1;
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	487b      	ldr	r0, [pc, #492]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 8003f9e:	f005 fcfb 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	487a      	ldr	r0, [pc, #488]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 8003fa6:	f005 fcf7 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003faa:	2100      	movs	r1, #0
 8003fac:	4879      	ldr	r0, [pc, #484]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 8003fae:	f005 fcf3 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003fb2:	4879      	ldr	r0, [pc, #484]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 8003fb4:	f005 fbb8 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003fb8:	4878      	ldr	r0, [pc, #480]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 8003fba:	f005 fb2b 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4877      	ldr	r0, [pc, #476]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 8003fc2:	f005 fda6 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4876      	ldr	r0, [pc, #472]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 8003fca:	f005 fda2 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4875      	ldr	r0, [pc, #468]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003fd2:	f005 fd9e 	bl	8009b12 <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8003fd6:	4b75      	ldr	r3, [pc, #468]	; (80041ac <HAL_GPIO_EXTI_Callback+0x27c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8003fdc:	4b74      	ldr	r3, [pc, #464]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 8003fde:	2204      	movs	r2, #4
 8003fe0:	701a      	strb	r2, [r3, #0]
			 break;
 8003fe2:	e0cd      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4869      	ldr	r0, [pc, #420]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 8003fe8:	f005 fcd6 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003fec:	2100      	movs	r1, #0
 8003fee:	4868      	ldr	r0, [pc, #416]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 8003ff0:	f005 fcd2 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4867      	ldr	r0, [pc, #412]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 8003ff8:	f005 fcce 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003ffc:	4866      	ldr	r0, [pc, #408]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 8003ffe:	f005 fb93 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004002:	4866      	ldr	r0, [pc, #408]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 8004004:	f005 fb06 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004008:	2100      	movs	r1, #0
 800400a:	4865      	ldr	r0, [pc, #404]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 800400c:	f005 fd81 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004010:	2100      	movs	r1, #0
 8004012:	4864      	ldr	r0, [pc, #400]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 8004014:	f005 fd7d 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004018:	2100      	movs	r1, #0
 800401a:	4863      	ldr	r0, [pc, #396]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 800401c:	f005 fd79 	bl	8009b12 <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x284>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004026:	4b62      	ldr	r3, [pc, #392]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004028:	2204      	movs	r2, #4
 800402a:	701a      	strb	r2, [r3, #0]
			 break;
 800402c:	e0a8      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 800402e:	2100      	movs	r1, #0
 8004030:	4856      	ldr	r0, [pc, #344]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 8004032:	f005 fcb1 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004036:	2100      	movs	r1, #0
 8004038:	4855      	ldr	r0, [pc, #340]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 800403a:	f005 fcad 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800403e:	2100      	movs	r1, #0
 8004040:	4854      	ldr	r0, [pc, #336]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 8004042:	f005 fca9 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004046:	4854      	ldr	r0, [pc, #336]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 8004048:	f005 fb6e 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800404c:	4853      	ldr	r0, [pc, #332]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 800404e:	f005 fae1 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004052:	2100      	movs	r1, #0
 8004054:	4852      	ldr	r0, [pc, #328]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 8004056:	f005 fd5c 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800405a:	2100      	movs	r1, #0
 800405c:	4851      	ldr	r0, [pc, #324]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 800405e:	f005 fd58 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004062:	2100      	movs	r1, #0
 8004064:	4850      	ldr	r0, [pc, #320]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 8004066:	f005 fd54 	bl	8009b12 <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 800406a:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_GPIO_EXTI_Callback+0x27c>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004072:	2204      	movs	r2, #4
 8004074:	701a      	strb	r2, [r3, #0]
			 break;
 8004076:	e083      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 8004078:	2100      	movs	r1, #0
 800407a:	4844      	ldr	r0, [pc, #272]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 800407c:	f005 fc8c 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004080:	2100      	movs	r1, #0
 8004082:	4843      	ldr	r0, [pc, #268]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 8004084:	f005 fc88 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8004088:	2100      	movs	r1, #0
 800408a:	4842      	ldr	r0, [pc, #264]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 800408c:	f005 fc84 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004090:	4841      	ldr	r0, [pc, #260]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 8004092:	f005 fb49 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004096:	4841      	ldr	r0, [pc, #260]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 8004098:	f005 fabc 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800409c:	2100      	movs	r1, #0
 800409e:	4840      	ldr	r0, [pc, #256]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 80040a0:	f005 fd37 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80040a4:	2100      	movs	r1, #0
 80040a6:	483f      	ldr	r0, [pc, #252]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 80040a8:	f005 fd33 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80040ac:	2100      	movs	r1, #0
 80040ae:	483e      	ldr	r0, [pc, #248]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 80040b0:	f005 fd2f 	bl	8009b12 <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 80040b4:	4b3f      	ldr	r3, [pc, #252]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x284>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 80040bc:	2204      	movs	r2, #4
 80040be:	701a      	strb	r2, [r3, #0]
			 break;
 80040c0:	e05e      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 80040c2:	2100      	movs	r1, #0
 80040c4:	4831      	ldr	r0, [pc, #196]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 80040c6:	f005 fc67 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80040ca:	2100      	movs	r1, #0
 80040cc:	4830      	ldr	r0, [pc, #192]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 80040ce:	f005 fc63 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040d2:	2100      	movs	r1, #0
 80040d4:	482f      	ldr	r0, [pc, #188]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 80040d6:	f005 fc5f 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 80040da:	482f      	ldr	r0, [pc, #188]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 80040dc:	f005 fb24 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 80040e0:	482e      	ldr	r0, [pc, #184]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 80040e2:	f005 fa97 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 80040e6:	2100      	movs	r1, #0
 80040e8:	482d      	ldr	r0, [pc, #180]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 80040ea:	f005 fd12 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80040ee:	2100      	movs	r1, #0
 80040f0:	482c      	ldr	r0, [pc, #176]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 80040f2:	f005 fd0e 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80040f6:	2100      	movs	r1, #0
 80040f8:	482b      	ldr	r0, [pc, #172]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 80040fa:	f005 fd0a 	bl	8009b12 <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_GPIO_EXTI_Callback+0x27c>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004104:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004106:	2204      	movs	r2, #4
 8004108:	701a      	strb	r2, [r3, #0]
			 break;
 800410a:	e039      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 800410c:	2100      	movs	r1, #0
 800410e:	481f      	ldr	r0, [pc, #124]	; (800418c <HAL_GPIO_EXTI_Callback+0x25c>)
 8004110:	f005 fc42 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004114:	2100      	movs	r1, #0
 8004116:	481e      	ldr	r0, [pc, #120]	; (8004190 <HAL_GPIO_EXTI_Callback+0x260>)
 8004118:	f005 fc3e 	bl	8009998 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800411c:	2100      	movs	r1, #0
 800411e:	481d      	ldr	r0, [pc, #116]	; (8004194 <HAL_GPIO_EXTI_Callback+0x264>)
 8004120:	f005 fc3a 	bl	8009998 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004124:	481c      	ldr	r0, [pc, #112]	; (8004198 <HAL_GPIO_EXTI_Callback+0x268>)
 8004126:	f005 faff 	bl	8009728 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800412a:	481c      	ldr	r0, [pc, #112]	; (800419c <HAL_GPIO_EXTI_Callback+0x26c>)
 800412c:	f005 fa72 	bl	8009614 <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004130:	2100      	movs	r1, #0
 8004132:	481b      	ldr	r0, [pc, #108]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x270>)
 8004134:	f005 fced 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004138:	2100      	movs	r1, #0
 800413a:	481a      	ldr	r0, [pc, #104]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x274>)
 800413c:	f005 fce9 	bl	8009b12 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004140:	2100      	movs	r1, #0
 8004142:	4819      	ldr	r0, [pc, #100]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x278>)
 8004144:	f005 fce5 	bl	8009b12 <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x284>)
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004150:	2204      	movs	r2, #4
 8004152:	701a      	strb	r2, [r3, #0]
			 break;
 8004154:	e014      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 if (!upperESalarm && !lowerESalarm && !faultDrivers){
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x284>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_GPIO_EXTI_Callback+0x246>
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_GPIO_EXTI_Callback+0x27c>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_GPIO_EXTI_Callback+0x246>
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x288>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_GPIO_EXTI_Callback+0x246>
				 manualTrigger = false;
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_GPIO_EXTI_Callback+0x28c>)
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
			 break;
 8004174:	e004      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
			 }else{manualTrigger = true;}
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_GPIO_EXTI_Callback+0x28c>)
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
			 break;
 800417c:	e000      	b.n	8004180 <HAL_GPIO_EXTI_Callback+0x250>
		 default: break;
 800417e:	bf00      	nop


	}


}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200006dc 	.word	0x200006dc
 800418c:	20000370 	.word	0x20000370
 8004190:	20000400 	.word	0x20000400
 8004194:	20000448 	.word	0x20000448
 8004198:	200004d8 	.word	0x200004d8
 800419c:	200003b8 	.word	0x200003b8
 80041a0:	20000490 	.word	0x20000490
 80041a4:	20000520 	.word	0x20000520
 80041a8:	20000568 	.word	0x20000568
 80041ac:	200006e5 	.word	0x200006e5
 80041b0:	200006e0 	.word	0x200006e0
 80041b4:	200006e4 	.word	0x200006e4
 80041b8:	200006e7 	.word	0x200006e7
 80041bc:	200006e6 	.word	0x200006e6

080041c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a30      	ldr	r2, [pc, #192]	; (8004290 <HAL_UART_RxCpltCallback+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d14d      	bne.n	800426e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_UART_RxCpltCallback+0xd4>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b3a      	cmp	r3, #58	; 0x3a
 80041dc:	d006      	beq.n	80041ec <HAL_UART_RxCpltCallback+0x2c>
 80041de:	2b3a      	cmp	r3, #58	; 0x3a
 80041e0:	dc36      	bgt.n	8004250 <HAL_UART_RxCpltCallback+0x90>
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d009      	beq.n	80041fa <HAL_UART_RxCpltCallback+0x3a>
 80041e6:	2b0d      	cmp	r3, #13
 80041e8:	d01e      	beq.n	8004228 <HAL_UART_RxCpltCallback+0x68>
 80041ea:	e031      	b.n	8004250 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 80041f2:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_UART_RxCpltCallback+0xdc>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
			break;
 80041f8:	e040      	b.n	800427c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 80041fa:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d037      	beq.n	8004272 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 800420c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800420e:	e030      	b.n	8004272 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_UART_RxCpltCallback+0xe0>)
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]
				rx_index++;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 8004226:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b1e      	cmp	r3, #30
 800422e:	d1ef      	bne.n	8004210 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_UART_RxCpltCallback+0xdc>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d11e      	bne.n	8004276 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8004238:	4b17      	ldr	r3, [pc, #92]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_UART_RxCpltCallback+0xe0>)
 8004240:	2100      	movs	r1, #0
 8004242:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8004244:	f7fd fa9a 	bl	800177c <interpretaComando>
				cm0 = 0;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <HAL_UART_RxCpltCallback+0xdc>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]

			}
			break;
 800424e:	e012      	b.n	8004276 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b1d      	cmp	r3, #29
 8004256:	d810      	bhi.n	800427a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	b2d1      	uxtb	r1, r2
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_UART_RxCpltCallback+0xd8>)
 8004262:	7011      	strb	r1, [r2, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <HAL_UART_RxCpltCallback+0xe0>)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	5453      	strb	r3, [r2, r1]
			}
			break;
 800426c:	e005      	b.n	800427a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800427a:	bf00      	nop
	HAL_UART_Receive_IT(&huart2, &rx_data, 1); //Receive data (one character only)
 800427c:	2201      	movs	r2, #1
 800427e:	4905      	ldr	r1, [pc, #20]	; (8004294 <HAL_UART_RxCpltCallback+0xd4>)
 8004280:	4808      	ldr	r0, [pc, #32]	; (80042a4 <HAL_UART_RxCpltCallback+0xe4>)
 8004282:	f006 feaa 	bl	800afda <HAL_UART_Receive_IT>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40004400 	.word	0x40004400
 8004294:	20000822 	.word	0x20000822
 8004298:	20000801 	.word	0x20000801
 800429c:	200006d8 	.word	0x200006d8
 80042a0:	20000804 	.word	0x20000804
 80042a4:	200005b0 	.word	0x200005b0

080042a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	__NOP();
 80042b0:	bf00      	nop
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_TIM_IC_CaptureCallback+0x90>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10f      	bne.n	80042f2 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d6:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	429a      	cmp	r2, r3
 80042dc:	d103      	bne.n	80042e6 <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 80042e4:	e02e      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	3301      	adds	r3, #1
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042f0:	e028      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM10){
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIM_IC_CaptureCallback+0x98>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10f      	bne.n	800431c <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	429a      	cmp	r2, r3
 8004306:	d103      	bne.n	8004310 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_TIM_IC_CaptureCallback+0x9c>)
 800430a:	2201      	movs	r2, #1
 800430c:	765a      	strb	r2, [r3, #25]
}
 800430e:	e019      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	3301      	adds	r3, #1
 8004316:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
}
 800431a:	e013      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM11){
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	429a      	cmp	r2, r3
 8004330:	d103      	bne.n	800433a <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004334:	2201      	movs	r2, #1
 8004336:	765a      	strb	r2, [r3, #25]
}
 8004338:	e004      	b.n	8004344 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	3301      	adds	r3, #1
 8004340:	4a08      	ldr	r2, [pc, #32]	; (8004364 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004342:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40000c00 	.word	0x40000c00
 8004354:	200005f8 	.word	0x200005f8
 8004358:	40014400 	.word	0x40014400
 800435c:	20000640 	.word	0x20000640
 8004360:	40014800 	.word	0x40014800
 8004364:	20000688 	.word	0x20000688

08004368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004368:	b5b0      	push	{r4, r5, r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

	if (htim == &htim9) {  //Timer that update velocity'curve. It interrups every 10 ms
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d129      	bne.n	80043cc <HAL_TIM_PeriodElapsedCallback+0x64>

		if (!timeFlag) {
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <HAL_TIM_PeriodElapsedCallback+0x26>
			timeFlag = true;
 8004380:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
			TIM2->CNT = 0;	//We start counting from here
 8004386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800438a:	2200      	movs	r2, #0
 800438c:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM2->CNT)) * ((double)(TIM2->PSC + 1) / FCL));
 800438e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc f8bd 	bl	8000514 <__aeabi_ui2d>
 800439a:	4604      	mov	r4, r0
 800439c:	460d      	mov	r5, r1
 800439e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	3301      	adds	r3, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8b4 	bl	8000514 <__aeabi_ui2d>
 80043ac:	a30a      	add	r3, pc, #40	; (adr r3, 80043d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc fa53 	bl	800085c <__aeabi_ddiv>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f7fc f923 	bl	8000608 <__aeabi_dmul>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4908      	ldr	r1, [pc, #32]	; (80043e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80043c8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bdb0      	pop	{r4, r5, r7, pc}
 80043d4:	f3af 8000 	nop.w
 80043d8:	00000000 	.word	0x00000000
 80043dc:	418e8480 	.word	0x418e8480
 80043e0:	200004d8 	.word	0x200004d8
 80043e4:	20000800 	.word	0x20000800
 80043e8:	200006d0 	.word	0x200006d0

080043ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043f0:	b672      	cpsid	i
}
 80043f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <Error_Handler+0x8>
	...

080043f8 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 80043f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004416:	f7fc fb7d 	bl	8000b14 <__aeabi_dcmpge>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02a      	beq.n	8004476 <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800442c:	f7fb ff34 	bl	8000298 <__aeabi_dsub>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <configMotor+0x5c>
 800444a:	2201      	movs	r2, #1
 800444c:	2101      	movs	r1, #1
 800444e:	484e      	ldr	r0, [pc, #312]	; (8004588 <configMotor+0x190>)
 8004450:	f004 fa62 	bl	8008918 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d104      	bne.n	8004464 <configMotor+0x6c>
 800445a:	2201      	movs	r2, #1
 800445c:	2102      	movs	r1, #2
 800445e:	484b      	ldr	r0, [pc, #300]	; (800458c <configMotor+0x194>)
 8004460:	f004 fa5a 	bl	8008918 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d12f      	bne.n	80044ca <configMotor+0xd2>
 800446a:	2201      	movs	r2, #1
 800446c:	2101      	movs	r1, #1
 800446e:	4847      	ldr	r0, [pc, #284]	; (800458c <configMotor+0x194>)
 8004470:	f004 fa52 	bl	8008918 <HAL_GPIO_WritePin>
 8004474:	e029      	b.n	80044ca <configMotor+0xd2>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fb ff09 	bl	8000298 <__aeabi_dsub>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <configMotor+0xb2>
 80044a0:	2200      	movs	r2, #0
 80044a2:	2101      	movs	r1, #1
 80044a4:	4838      	ldr	r0, [pc, #224]	; (8004588 <configMotor+0x190>)
 80044a6:	f004 fa37 	bl	8008918 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d104      	bne.n	80044ba <configMotor+0xc2>
 80044b0:	2200      	movs	r2, #0
 80044b2:	2102      	movs	r1, #2
 80044b4:	4835      	ldr	r0, [pc, #212]	; (800458c <configMotor+0x194>)
 80044b6:	f004 fa2f 	bl	8008918 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d104      	bne.n	80044ca <configMotor+0xd2>
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	4831      	ldr	r0, [pc, #196]	; (800458c <configMotor+0x194>)
 80044c6:	f004 fa27 	bl	8008918 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 80044ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <configMotor+0x198>)
 80044d4:	f7fc f898 	bl	8000608 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <configMotor+0x19c>)
 80044e6:	f7fc f9b9 	bl	800085c <__aeabi_ddiv>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80044fa:	4610      	mov	r0, r2
 80044fc:	4619      	mov	r1, r3
 80044fe:	f7fc fb33 	bl	8000b68 <__aeabi_d2uiz>
 8004502:	4602      	mov	r2, r0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4618      	mov	r0, r3
 800451a:	f7fb fffb 	bl	8000514 <__aeabi_ui2d>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f7fb feb7 	bl	8000298 <__aeabi_dsub>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fb feb3 	bl	800029c <__adddf3>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	if (motor->remainder >= 1) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b13      	ldr	r3, [pc, #76]	; (8004598 <configMotor+0x1a0>)
 800454c:	f7fc fae2 	bl	8000b14 <__aeabi_dcmpge>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d100      	bne.n	8004558 <configMotor+0x160>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8004556:	e011      	b.n	800457c <configMotor+0x184>
		motor->remainder -= 1;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <configMotor+0x1a0>)
 8004564:	f7fb fe98 	bl	8000298 <__aeabi_dsub>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		motor->numStep += 1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004586:	bf00      	nop
 8004588:	40020400 	.word	0x40020400
 800458c:	40020800 	.word	0x40020800
 8004590:	40bf4000 	.word	0x40bf4000
 8004594:	40768000 	.word	0x40768000
 8004598:	3ff00000 	.word	0x3ff00000

0800459c <robotInitialization>:
bool receptionFlag=false;


//--------------------------------------------

void robotInitialization(void){
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim1);
 80045a0:	481a      	ldr	r0, [pc, #104]	; (800460c <robotInitialization+0x70>)
 80045a2:	f004 ffdd 	bl	8009560 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80045a6:	481a      	ldr	r0, [pc, #104]	; (8004610 <robotInitialization+0x74>)
 80045a8:	f004 ffda 	bl	8009560 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80045ac:	4819      	ldr	r0, [pc, #100]	; (8004614 <robotInitialization+0x78>)
 80045ae:	f004 ffd7 	bl	8009560 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 80045b2:	2200      	movs	r2, #0
 80045b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b8:	4817      	ldr	r0, [pc, #92]	; (8004618 <robotInitialization+0x7c>)
 80045ba:	f004 f9ad 	bl	8008918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 80045be:	2200      	movs	r2, #0
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4815      	ldr	r0, [pc, #84]	; (8004618 <robotInitialization+0x7c>)
 80045c4:	f004 f9a8 	bl	8008918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2120      	movs	r1, #32
 80045cc:	4812      	ldr	r0, [pc, #72]	; (8004618 <robotInitialization+0x7c>)
 80045ce:	f004 f9a3 	bl	8008918 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 80045d2:	2032      	movs	r0, #50	; 0x32
 80045d4:	f003 fe0a 	bl	80081ec <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 80045d8:	2200      	movs	r2, #0
 80045da:	2101      	movs	r1, #1
 80045dc:	480f      	ldr	r0, [pc, #60]	; (800461c <robotInitialization+0x80>)
 80045de:	f004 f99b 	bl	8008918 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 80045e2:	2200      	movs	r2, #0
 80045e4:	2102      	movs	r1, #2
 80045e6:	480c      	ldr	r0, [pc, #48]	; (8004618 <robotInitialization+0x7c>)
 80045e8:	f004 f996 	bl	8008918 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 80045ec:	2200      	movs	r2, #0
 80045ee:	2101      	movs	r1, #1
 80045f0:	4809      	ldr	r0, [pc, #36]	; (8004618 <robotInitialization+0x7c>)
 80045f2:	f004 f991 	bl	8008918 <HAL_GPIO_WritePin>

	motor1.stepReached = false;
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <robotInitialization+0x84>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <robotInitialization+0x88>)
 80045fe:	2200      	movs	r2, #0
 8004600:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <robotInitialization+0x8c>)
 8004604:	2200      	movs	r2, #0
 8004606:	765a      	strb	r2, [r3, #25]


}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000370 	.word	0x20000370
 8004610:	20000400 	.word	0x20000400
 8004614:	20000448 	.word	0x20000448
 8004618:	40020800 	.word	0x40020800
 800461c:	40020400 	.word	0x40020400
 8004620:	200005f8 	.word	0x200005f8
 8004624:	20000640 	.word	0x20000640
 8004628:	20000688 	.word	0x20000688
 800462c:	00000000 	.word	0x00000000

08004630 <statesMachineLoop>:


void statesMachineLoop(void){
 8004630:	b5b0      	push	{r4, r5, r7, lr}
 8004632:	af00      	add	r7, sp, #0



	switch (state){
 8004634:	4ba4      	ldr	r3, [pc, #656]	; (80048c8 <statesMachineLoop+0x298>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b04      	cmp	r3, #4
 800463a:	f200 85fb 	bhi.w	8005234 <statesMachineLoop+0xc04>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <statesMachineLoop+0x14>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004659 	.word	0x08004659
 8004648:	080049c3 	.word	0x080049c3
 800464c:	08004759 	.word	0x08004759
 8004650:	08004689 	.word	0x08004689
 8004654:	08004b89 	.word	0x08004b89

	case INIT:

		  HAL_UART_Transmit(&huart2, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8004658:	2364      	movs	r3, #100	; 0x64
 800465a:	221c      	movs	r2, #28
 800465c:	499b      	ldr	r1, [pc, #620]	; (80048cc <statesMachineLoop+0x29c>)
 800465e:	489c      	ldr	r0, [pc, #624]	; (80048d0 <statesMachineLoop+0x2a0>)
 8004660:	f006 fc29 	bl	800aeb6 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8004664:	2201      	movs	r2, #1
 8004666:	499b      	ldr	r1, [pc, #620]	; (80048d4 <statesMachineLoop+0x2a4>)
 8004668:	4899      	ldr	r0, [pc, #612]	; (80048d0 <statesMachineLoop+0x2a0>)
 800466a:	f006 fcb6 	bl	800afda <HAL_UART_Receive_IT>
		  robotInitialization();
 800466e:	f7ff ff95 	bl	800459c <robotInitialization>
		  HAL_UART_Transmit(&huart2, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8004672:	2364      	movs	r3, #100	; 0x64
 8004674:	2227      	movs	r2, #39	; 0x27
 8004676:	4998      	ldr	r1, [pc, #608]	; (80048d8 <statesMachineLoop+0x2a8>)
 8004678:	4895      	ldr	r0, [pc, #596]	; (80048d0 <statesMachineLoop+0x2a0>)
 800467a:	f006 fc1c 	bl	800aeb6 <HAL_UART_Transmit>

		  state = READY;
 800467e:	4b92      	ldr	r3, [pc, #584]	; (80048c8 <statesMachineLoop+0x298>)
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]

		break;
 8004684:	f000 bddd 	b.w	8005242 <statesMachineLoop+0xc12>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8004688:	4b94      	ldr	r3, [pc, #592]	; (80048dc <statesMachineLoop+0x2ac>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]

		homing();
 800468e:	f7fc fc93 	bl	8000fb8 <homing>

        if(homFin){
 8004692:	4b93      	ldr	r3, [pc, #588]	; (80048e0 <statesMachineLoop+0x2b0>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 85ce 	beq.w	8005238 <statesMachineLoop+0xc08>

        	homFin = false;
 800469c:	4b90      	ldr	r3, [pc, #576]	; (80048e0 <statesMachineLoop+0x2b0>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 80046a2:	2001      	movs	r0, #1
 80046a4:	f003 fda2 	bl	80081ec <HAL_Delay>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 80046a8:	2006      	movs	r0, #6
 80046aa:	f003 fede 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 80046ae:	2007      	movs	r0, #7
 80046b0:	f003 fedb 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 80046b4:	2008      	movs	r0, #8
 80046b6:	f003 fed8 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 80046ba:	2009      	movs	r0, #9
 80046bc:	f003 fed5 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 80046c0:	200a      	movs	r0, #10
 80046c2:	f003 fed2 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 80046c6:	2017      	movs	r0, #23
 80046c8:	f003 fecf 	bl	800846a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 80046cc:	2028      	movs	r0, #40	; 0x28
 80046ce:	f003 fecc 	bl	800846a <HAL_NVIC_EnableIRQ>

			Pini.x=0;
 80046d2:	4984      	ldr	r1, [pc, #528]	; (80048e4 <statesMachineLoop+0x2b4>)
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 80046e0:	4980      	ldr	r1, [pc, #512]	; (80048e4 <statesMachineLoop+0x2b4>)
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 80046ee:	497d      	ldr	r1, [pc, #500]	; (80048e4 <statesMachineLoop+0x2b4>)
 80046f0:	a373      	add	r3, pc, #460	; (adr r3, 80048c0 <statesMachineLoop+0x290>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 80046fa:	497b      	ldr	r1, [pc, #492]	; (80048e8 <statesMachineLoop+0x2b8>)
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8004708:	4978      	ldr	r1, [pc, #480]	; (80048ec <statesMachineLoop+0x2bc>)
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8004716:	4976      	ldr	r1, [pc, #472]	; (80048f0 <statesMachineLoop+0x2c0>)
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8004724:	4970      	ldr	r1, [pc, #448]	; (80048e8 <statesMachineLoop+0x2b8>)
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8004732:	496e      	ldr	r1, [pc, #440]	; (80048ec <statesMachineLoop+0x2bc>)
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8004740:	496b      	ldr	r1, [pc, #428]	; (80048f0 <statesMachineLoop+0x2c0>)
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9c1 2308 	strd	r2, r3, [r1, #32]

			state = READY;
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <statesMachineLoop+0x298>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]

        }


		break;
 8004754:	f000 bd70 	b.w	8005238 <statesMachineLoop+0xc08>

	case WORKING:

		receptionFlag = false;
 8004758:	4b60      	ldr	r3, [pc, #384]	; (80048dc <statesMachineLoop+0x2ac>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 800475e:	e09f      	b.n	80048a0 <statesMachineLoop+0x270>

			if (state==FAULT)break;
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <statesMachineLoop+0x298>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	f000 80dd 	beq.w	8004924 <statesMachineLoop+0x2f4>

			if (motor1.stepReached) {
 800476a:	4b5f      	ldr	r3, [pc, #380]	; (80048e8 <statesMachineLoop+0x2b8>)
 800476c:	7e5b      	ldrb	r3, [r3, #25]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <statesMachineLoop+0x154>
				Stop_PWM_MOTOR_1;
 8004772:	2100      	movs	r1, #0
 8004774:	485f      	ldr	r0, [pc, #380]	; (80048f4 <statesMachineLoop+0x2c4>)
 8004776:	f005 f90f 	bl	8009998 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800477a:	2100      	movs	r1, #0
 800477c:	485e      	ldr	r0, [pc, #376]	; (80048f8 <statesMachineLoop+0x2c8>)
 800477e:	f005 f9c8 	bl	8009b12 <HAL_TIM_IC_Stop>
 8004782:	e018      	b.n	80047b6 <statesMachineLoop+0x186>
			}else if (motor2.stepReached) {
 8004784:	4b59      	ldr	r3, [pc, #356]	; (80048ec <statesMachineLoop+0x2bc>)
 8004786:	7e5b      	ldrb	r3, [r3, #25]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <statesMachineLoop+0x16e>
				Stop_PWM_MOTOR_2;
 800478c:	2100      	movs	r1, #0
 800478e:	485b      	ldr	r0, [pc, #364]	; (80048fc <statesMachineLoop+0x2cc>)
 8004790:	f005 f902 	bl	8009998 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_2);
 8004794:	2104      	movs	r1, #4
 8004796:	485a      	ldr	r0, [pc, #360]	; (8004900 <statesMachineLoop+0x2d0>)
 8004798:	f005 f9bb 	bl	8009b12 <HAL_TIM_IC_Stop>
 800479c:	e00b      	b.n	80047b6 <statesMachineLoop+0x186>
			}else if (motor3.stepReached){
 800479e:	4b54      	ldr	r3, [pc, #336]	; (80048f0 <statesMachineLoop+0x2c0>)
 80047a0:	7e5b      	ldrb	r3, [r3, #25]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <statesMachineLoop+0x186>
				Stop_PWM_MOTOR_3;
 80047a6:	2100      	movs	r1, #0
 80047a8:	4856      	ldr	r0, [pc, #344]	; (8004904 <statesMachineLoop+0x2d4>)
 80047aa:	f005 f8f5 	bl	8009998 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_3);
 80047ae:	2108      	movs	r1, #8
 80047b0:	4855      	ldr	r0, [pc, #340]	; (8004908 <statesMachineLoop+0x2d8>)
 80047b2:	f005 f9ae 	bl	8009b12 <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 80047b6:	4b55      	ldr	r3, [pc, #340]	; (800490c <statesMachineLoop+0x2dc>)
 80047b8:	ed93 7b00 	vldr	d7, [r3]
 80047bc:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <statesMachineLoop+0x2b8>)
 80047be:	ed93 6b08 	vldr	d6, [r3, #32]
 80047c2:	4b49      	ldr	r3, [pc, #292]	; (80048e8 <statesMachineLoop+0x2b8>)
 80047c4:	ed93 5b00 	vldr	d5, [r3]
 80047c8:	4851      	ldr	r0, [pc, #324]	; (8004910 <statesMachineLoop+0x2e0>)
 80047ca:	eeb0 2a45 	vmov.f32	s4, s10
 80047ce:	eef0 2a65 	vmov.f32	s5, s11
 80047d2:	eeb0 1a46 	vmov.f32	s2, s12
 80047d6:	eef0 1a66 	vmov.f32	s3, s13
 80047da:	eeb0 0a47 	vmov.f32	s0, s14
 80047de:	eef0 0a67 	vmov.f32	s1, s15
 80047e2:	f001 f925 	bl	8005a30 <get_Straj>
 80047e6:	eeb0 7a40 	vmov.f32	s14, s0
 80047ea:	eef0 7a60 	vmov.f32	s15, s1
 80047ee:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <statesMachineLoop+0x2b8>)
 80047f0:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 80047f4:	4b45      	ldr	r3, [pc, #276]	; (800490c <statesMachineLoop+0x2dc>)
 80047f6:	ed93 7b00 	vldr	d7, [r3]
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <statesMachineLoop+0x2bc>)
 80047fc:	ed93 6b08 	vldr	d6, [r3, #32]
 8004800:	4b3a      	ldr	r3, [pc, #232]	; (80048ec <statesMachineLoop+0x2bc>)
 8004802:	ed93 5b00 	vldr	d5, [r3]
 8004806:	4843      	ldr	r0, [pc, #268]	; (8004914 <statesMachineLoop+0x2e4>)
 8004808:	eeb0 2a45 	vmov.f32	s4, s10
 800480c:	eef0 2a65 	vmov.f32	s5, s11
 8004810:	eeb0 1a46 	vmov.f32	s2, s12
 8004814:	eef0 1a66 	vmov.f32	s3, s13
 8004818:	eeb0 0a47 	vmov.f32	s0, s14
 800481c:	eef0 0a67 	vmov.f32	s1, s15
 8004820:	f001 f906 	bl	8005a30 <get_Straj>
 8004824:	eeb0 7a40 	vmov.f32	s14, s0
 8004828:	eef0 7a60 	vmov.f32	s15, s1
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <statesMachineLoop+0x2bc>)
 800482e:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <statesMachineLoop+0x2dc>)
 8004834:	ed93 7b00 	vldr	d7, [r3]
 8004838:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <statesMachineLoop+0x2c0>)
 800483a:	ed93 6b08 	vldr	d6, [r3, #32]
 800483e:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <statesMachineLoop+0x2c0>)
 8004840:	ed93 5b00 	vldr	d5, [r3]
 8004844:	4834      	ldr	r0, [pc, #208]	; (8004918 <statesMachineLoop+0x2e8>)
 8004846:	eeb0 2a45 	vmov.f32	s4, s10
 800484a:	eef0 2a65 	vmov.f32	s5, s11
 800484e:	eeb0 1a46 	vmov.f32	s2, s12
 8004852:	eef0 1a66 	vmov.f32	s3, s13
 8004856:	eeb0 0a47 	vmov.f32	s0, s14
 800485a:	eef0 0a67 	vmov.f32	s1, s15
 800485e:	f001 f8e7 	bl	8005a30 <get_Straj>
 8004862:	eeb0 7a40 	vmov.f32	s14, s0
 8004866:	eef0 7a60 	vmov.f32	s15, s1
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <statesMachineLoop+0x2c0>)
 800486c:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8004870:	f003 fa92 	bl	8007d98 <setProfilTimer>


			if(startMotors){
 8004874:	4b29      	ldr	r3, [pc, #164]	; (800491c <statesMachineLoop+0x2ec>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <statesMachineLoop+0x26a>
				startMotors = false;
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <statesMachineLoop+0x2ec>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8004882:	2100      	movs	r1, #0
 8004884:	481b      	ldr	r0, [pc, #108]	; (80048f4 <statesMachineLoop+0x2c4>)
 8004886:	f004 ffd7 	bl	8009838 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 800488a:	2100      	movs	r1, #0
 800488c:	481b      	ldr	r0, [pc, #108]	; (80048fc <statesMachineLoop+0x2cc>)
 800488e:	f004 ffd3 	bl	8009838 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8004892:	2100      	movs	r1, #0
 8004894:	481b      	ldr	r0, [pc, #108]	; (8004904 <statesMachineLoop+0x2d4>)
 8004896:	f004 ffcf 	bl	8009838 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800489a:	4b21      	ldr	r3, [pc, #132]	; (8004920 <statesMachineLoop+0x2f0>)
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <statesMachineLoop+0x2b8>)
 80048a2:	7e5b      	ldrb	r3, [r3, #25]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f43f af5b 	beq.w	8004760 <statesMachineLoop+0x130>
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <statesMachineLoop+0x2bc>)
 80048ac:	7e5b      	ldrb	r3, [r3, #25]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f43f af56 	beq.w	8004760 <statesMachineLoop+0x130>
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <statesMachineLoop+0x2c0>)
 80048b6:	7e5b      	ldrb	r3, [r3, #25]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f43f af51 	beq.w	8004760 <statesMachineLoop+0x130>
 80048be:	e032      	b.n	8004926 <statesMachineLoop+0x2f6>
 80048c0:	c2f837b5 	.word	0xc2f837b5
 80048c4:	bfe0aa64 	.word	0xbfe0aa64
 80048c8:	200006e0 	.word	0x200006e0
 80048cc:	20000030 	.word	0x20000030
 80048d0:	200005b0 	.word	0x200005b0
 80048d4:	20000822 	.word	0x20000822
 80048d8:	2000004c 	.word	0x2000004c
 80048dc:	20000823 	.word	0x20000823
 80048e0:	200006e1 	.word	0x200006e1
 80048e4:	20000728 	.word	0x20000728
 80048e8:	200005f8 	.word	0x200005f8
 80048ec:	20000640 	.word	0x20000640
 80048f0:	20000688 	.word	0x20000688
 80048f4:	20000370 	.word	0x20000370
 80048f8:	20000490 	.word	0x20000490
 80048fc:	20000400 	.word	0x20000400
 8004900:	20000520 	.word	0x20000520
 8004904:	20000448 	.word	0x20000448
 8004908:	20000568 	.word	0x20000568
 800490c:	200006d0 	.word	0x200006d0
 8004910:	20000758 	.word	0x20000758
 8004914:	20000790 	.word	0x20000790
 8004918:	200007c8 	.word	0x200007c8
 800491c:	200006e2 	.word	0x200006e2
 8004920:	200006e3 	.word	0x200006e3
			if (state==FAULT)break;
 8004924:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 8004926:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <statesMachineLoop+0x4e8>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d026      	beq.n	800497c <statesMachineLoop+0x34c>

			startMotors = false;
 800492e:	4b7b      	ldr	r3, [pc, #492]	; (8004b1c <statesMachineLoop+0x4ec>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim5,  TIM_CHANNEL_1);
 8004934:	2100      	movs	r1, #0
 8004936:	487a      	ldr	r0, [pc, #488]	; (8004b20 <statesMachineLoop+0x4f0>)
 8004938:	f005 f8eb 	bl	8009b12 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800493c:	2100      	movs	r1, #0
 800493e:	4879      	ldr	r0, [pc, #484]	; (8004b24 <statesMachineLoop+0x4f4>)
 8004940:	f005 f8e7 	bl	8009b12 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004944:	2100      	movs	r1, #0
 8004946:	4878      	ldr	r0, [pc, #480]	; (8004b28 <statesMachineLoop+0x4f8>)
 8004948:	f005 f8e3 	bl	8009b12 <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 800494c:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <statesMachineLoop+0x4fc>)
 800494e:	7e5b      	ldrb	r3, [r3, #25]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <statesMachineLoop+0x32c>
 8004954:	2100      	movs	r1, #0
 8004956:	4876      	ldr	r0, [pc, #472]	; (8004b30 <statesMachineLoop+0x500>)
 8004958:	f005 f81e 	bl	8009998 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 800495c:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <statesMachineLoop+0x504>)
 800495e:	7e5b      	ldrb	r3, [r3, #25]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <statesMachineLoop+0x33c>
 8004964:	2100      	movs	r1, #0
 8004966:	4874      	ldr	r0, [pc, #464]	; (8004b38 <statesMachineLoop+0x508>)
 8004968:	f005 f816 	bl	8009998 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 800496c:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <statesMachineLoop+0x50c>)
 800496e:	7e5b      	ldrb	r3, [r3, #25]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <statesMachineLoop+0x34c>
 8004974:	2100      	movs	r1, #0
 8004976:	4872      	ldr	r0, [pc, #456]	; (8004b40 <statesMachineLoop+0x510>)
 8004978:	f005 f80e 	bl	8009998 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 800497c:	4b71      	ldr	r3, [pc, #452]	; (8004b44 <statesMachineLoop+0x514>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	4971      	ldr	r1, [pc, #452]	; (8004b48 <statesMachineLoop+0x518>)
 8004984:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 8004988:	4b6e      	ldr	r3, [pc, #440]	; (8004b44 <statesMachineLoop+0x514>)
 800498a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800498e:	496e      	ldr	r1, [pc, #440]	; (8004b48 <statesMachineLoop+0x518>)
 8004990:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <statesMachineLoop+0x514>)
 8004996:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800499a:	496b      	ldr	r1, [pc, #428]	; (8004b48 <statesMachineLoop+0x518>)
 800499c:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_UART_Transmit(&huart2, message2, sizeof(message2), 100);
 80049a0:	2364      	movs	r3, #100	; 0x64
 80049a2:	2206      	movs	r2, #6
 80049a4:	4969      	ldr	r1, [pc, #420]	; (8004b4c <statesMachineLoop+0x51c>)
 80049a6:	486a      	ldr	r0, [pc, #424]	; (8004b50 <statesMachineLoop+0x520>)
 80049a8:	f006 fa85 	bl	800aeb6 <HAL_UART_Transmit>

		HAL_TIM_Base_Stop_IT(&htim9);
 80049ac:	4869      	ldr	r0, [pc, #420]	; (8004b54 <statesMachineLoop+0x524>)
 80049ae:	f004 febb 	bl	8009728 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 80049b2:	4869      	ldr	r0, [pc, #420]	; (8004b58 <statesMachineLoop+0x528>)
 80049b4:	f004 fe2e 	bl	8009614 <HAL_TIM_Base_Stop>


		state = READY;
 80049b8:	4b68      	ldr	r3, [pc, #416]	; (8004b5c <statesMachineLoop+0x52c>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
		break;
 80049be:	f000 bc40 	b.w	8005242 <statesMachineLoop+0xc12>

	case READY:

		if (receptionFlag){
 80049c2:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <statesMachineLoop+0x530>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8438 	beq.w	800523c <statesMachineLoop+0xc0c>

			receptionFlag = false;
 80049cc:	4b64      	ldr	r3, [pc, #400]	; (8004b60 <statesMachineLoop+0x530>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 80049d2:	4b52      	ldr	r3, [pc, #328]	; (8004b1c <statesMachineLoop+0x4ec>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80049d8:	2100      	movs	r1, #0
 80049da:	4851      	ldr	r0, [pc, #324]	; (8004b20 <statesMachineLoop+0x4f0>)
 80049dc:	f005 f8fa 	bl	8009bd4 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 80049e0:	2100      	movs	r1, #0
 80049e2:	4850      	ldr	r0, [pc, #320]	; (8004b24 <statesMachineLoop+0x4f4>)
 80049e4:	f005 f8f6 	bl	8009bd4 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 80049e8:	2100      	movs	r1, #0
 80049ea:	484f      	ldr	r0, [pc, #316]	; (8004b28 <statesMachineLoop+0x4f8>)
 80049ec:	f005 f8f2 	bl	8009bd4 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 80049f0:	4b54      	ldr	r3, [pc, #336]	; (8004b44 <statesMachineLoop+0x514>)
 80049f2:	ed93 5b00 	vldr	d5, [r3]
 80049f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80049fa:	ed93 7b04 	vldr	d7, [r3, #16]
 80049fe:	eeb0 0a45 	vmov.f32	s0, s10
 8004a02:	eef0 0a65 	vmov.f32	s1, s11
 8004a06:	eeb0 1a46 	vmov.f32	s2, s12
 8004a0a:	eef0 1a66 	vmov.f32	s3, s13
 8004a0e:	eeb0 2a47 	vmov.f32	s4, s14
 8004a12:	eef0 2a67 	vmov.f32	s5, s15
 8004a16:	f7fd f843 	bl	8001aa0 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8004a1a:	4b44      	ldr	r3, [pc, #272]	; (8004b2c <statesMachineLoop+0x4fc>)
 8004a1c:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <statesMachineLoop+0x4fc>)
 8004a22:	ed93 1b00 	vldr	d1, [r3]
 8004a26:	4b4f      	ldr	r3, [pc, #316]	; (8004b64 <statesMachineLoop+0x534>)
 8004a28:	ed93 2b00 	vldr	d2, [r3]
 8004a2c:	4b4e      	ldr	r3, [pc, #312]	; (8004b68 <statesMachineLoop+0x538>)
 8004a2e:	ed93 3b00 	vldr	d3, [r3]
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <statesMachineLoop+0x53c>)
 8004a34:	ed93 4b00 	vldr	d4, [r3]
 8004a38:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <statesMachineLoop+0x540>)
 8004a3a:	ed93 5b00 	vldr	d5, [r3]
 8004a3e:	4b4d      	ldr	r3, [pc, #308]	; (8004b74 <statesMachineLoop+0x544>)
 8004a40:	ed93 6b00 	vldr	d6, [r3]
 8004a44:	484c      	ldr	r0, [pc, #304]	; (8004b78 <statesMachineLoop+0x548>)
 8004a46:	eeb0 0a47 	vmov.f32	s0, s14
 8004a4a:	eef0 0a67 	vmov.f32	s1, s15
 8004a4e:	f002 fa07 	bl	8006e60 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <statesMachineLoop+0x504>)
 8004a54:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <statesMachineLoop+0x504>)
 8004a5a:	ed93 1b00 	vldr	d1, [r3]
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <statesMachineLoop+0x534>)
 8004a60:	ed93 2b00 	vldr	d2, [r3]
 8004a64:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <statesMachineLoop+0x538>)
 8004a66:	ed93 3b00 	vldr	d3, [r3]
 8004a6a:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <statesMachineLoop+0x53c>)
 8004a6c:	ed93 4b00 	vldr	d4, [r3]
 8004a70:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <statesMachineLoop+0x540>)
 8004a72:	ed93 5b00 	vldr	d5, [r3]
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <statesMachineLoop+0x544>)
 8004a78:	ed93 6b00 	vldr	d6, [r3]
 8004a7c:	483f      	ldr	r0, [pc, #252]	; (8004b7c <statesMachineLoop+0x54c>)
 8004a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a82:	eef0 0a67 	vmov.f32	s1, s15
 8004a86:	f002 f9eb 	bl	8006e60 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <statesMachineLoop+0x50c>)
 8004a8c:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a90:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <statesMachineLoop+0x50c>)
 8004a92:	ed93 1b00 	vldr	d1, [r3]
 8004a96:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <statesMachineLoop+0x534>)
 8004a98:	ed93 2b00 	vldr	d2, [r3]
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <statesMachineLoop+0x538>)
 8004a9e:	ed93 3b00 	vldr	d3, [r3]
 8004aa2:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <statesMachineLoop+0x53c>)
 8004aa4:	ed93 4b00 	vldr	d4, [r3]
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <statesMachineLoop+0x540>)
 8004aaa:	ed93 5b00 	vldr	d5, [r3]
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <statesMachineLoop+0x544>)
 8004ab0:	ed93 6b00 	vldr	d6, [r3]
 8004ab4:	4832      	ldr	r0, [pc, #200]	; (8004b80 <statesMachineLoop+0x550>)
 8004ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aba:	eef0 0a67 	vmov.f32	s1, s15
 8004abe:	f002 f9cf 	bl	8006e60 <update_ScurveTraj>

			configMotor(&motor1,1);
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4819      	ldr	r0, [pc, #100]	; (8004b2c <statesMachineLoop+0x4fc>)
 8004ac6:	f7ff fc97 	bl	80043f8 <configMotor>
			configMotor(&motor2,2);
 8004aca:	2102      	movs	r1, #2
 8004acc:	4819      	ldr	r0, [pc, #100]	; (8004b34 <statesMachineLoop+0x504>)
 8004ace:	f7ff fc93 	bl	80043f8 <configMotor>
			configMotor(&motor3,3);
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	4819      	ldr	r0, [pc, #100]	; (8004b3c <statesMachineLoop+0x50c>)
 8004ad6:	f7ff fc8f 	bl	80043f8 <configMotor>

			timeFlag = false;
 8004ada:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <statesMachineLoop+0x554>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <statesMachineLoop+0x4fc>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <statesMachineLoop+0x504>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <statesMachineLoop+0x50c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <statesMachineLoop+0x4fc>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <statesMachineLoop+0x504>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <statesMachineLoop+0x50c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start_IT(&htim9);
 8004b04:	4813      	ldr	r0, [pc, #76]	; (8004b54 <statesMachineLoop+0x524>)
 8004b06:	f004 fdad 	bl	8009664 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8004b0a:	4813      	ldr	r0, [pc, #76]	; (8004b58 <statesMachineLoop+0x528>)
 8004b0c:	f004 fd28 	bl	8009560 <HAL_TIM_Base_Start>


			state = WORKING;
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <statesMachineLoop+0x52c>)
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004b16:	e391      	b.n	800523c <statesMachineLoop+0xc0c>
 8004b18:	200006e3 	.word	0x200006e3
 8004b1c:	200006e2 	.word	0x200006e2
 8004b20:	20000490 	.word	0x20000490
 8004b24:	20000520 	.word	0x20000520
 8004b28:	20000568 	.word	0x20000568
 8004b2c:	200005f8 	.word	0x200005f8
 8004b30:	20000370 	.word	0x20000370
 8004b34:	20000640 	.word	0x20000640
 8004b38:	20000400 	.word	0x20000400
 8004b3c:	20000688 	.word	0x20000688
 8004b40:	20000448 	.word	0x20000448
 8004b44:	20000740 	.word	0x20000740
 8004b48:	20000728 	.word	0x20000728
 8004b4c:	20000074 	.word	0x20000074
 8004b50:	200005b0 	.word	0x200005b0
 8004b54:	200004d8 	.word	0x200004d8
 8004b58:	200003b8 	.word	0x200003b8
 8004b5c:	200006e0 	.word	0x200006e0
 8004b60:	20000823 	.word	0x20000823
 8004b64:	20000018 	.word	0x20000018
 8004b68:	20000718 	.word	0x20000718
 8004b6c:	20000010 	.word	0x20000010
 8004b70:	20000020 	.word	0x20000020
 8004b74:	20000008 	.word	0x20000008
 8004b78:	20000758 	.word	0x20000758
 8004b7c:	20000790 	.word	0x20000790
 8004b80:	200007c8 	.word	0x200007c8
 8004b84:	20000800 	.word	0x20000800

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8004b88:	4bd3      	ldr	r3, [pc, #844]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fcc1 	bl	8000514 <__aeabi_ui2d>
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	4bd1      	ldr	r3, [pc, #836]	; (8004edc <statesMachineLoop+0x8ac>)
 8004b98:	f7fb fb80 	bl	800029c <__adddf3>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	a1cb      	add	r1, pc, #812	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba6:	f7fb fe59 	bl	800085c <__aeabi_ddiv>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4614      	mov	r4, r2
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	4bcb      	ldr	r3, [pc, #812]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	4bc9      	ldr	r3, [pc, #804]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004bbe:	f7fb fd23 	bl	8000608 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	f04f 0000 	mov.w	r0, #0
 8004bca:	49c7      	ldr	r1, [pc, #796]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004bcc:	f7fb fe46 	bl	800085c <__aeabi_ddiv>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb fd16 	bl	8000608 <__aeabi_dmul>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	4bbc      	ldr	r3, [pc, #752]	; (8004edc <statesMachineLoop+0x8ac>)
 8004bea:	f7fb fb55 	bl	8000298 <__aeabi_dsub>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	49be      	ldr	r1, [pc, #760]	; (8004eec <statesMachineLoop+0x8bc>)
 8004bf4:	680c      	ldr	r4, [r1, #0]
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f7fb ffb5 	bl	8000b68 <__aeabi_d2uiz>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c02:	4bb5      	ldr	r3, [pc, #724]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb fc84 	bl	8000514 <__aeabi_ui2d>
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	4bb2      	ldr	r3, [pc, #712]	; (8004edc <statesMachineLoop+0x8ac>)
 8004c12:	f7fb fb43 	bl	800029c <__adddf3>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	a1ad      	add	r1, pc, #692	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c20:	f7fb fe1c 	bl	800085c <__aeabi_ddiv>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	461d      	mov	r5, r3
 8004c2c:	4bac      	ldr	r3, [pc, #688]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	4bab      	ldr	r3, [pc, #684]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004c38:	f7fb fce6 	bl	8000608 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	f04f 0000 	mov.w	r0, #0
 8004c44:	49a8      	ldr	r1, [pc, #672]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004c46:	f7fb fe09 	bl	800085c <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4629      	mov	r1, r5
 8004c52:	f7fb fcd9 	bl	8000608 <__aeabi_dmul>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	4b9e      	ldr	r3, [pc, #632]	; (8004edc <statesMachineLoop+0x8ac>)
 8004c64:	f7fb fb18 	bl	8000298 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f7fb ff7a 	bl	8000b68 <__aeabi_d2uiz>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4a9d      	ldr	r2, [pc, #628]	; (8004eec <statesMachineLoop+0x8bc>)
 8004c78:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm_fault));
 8004c7a:	4b97      	ldr	r3, [pc, #604]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fc48 	bl	8000514 <__aeabi_ui2d>
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	4b94      	ldr	r3, [pc, #592]	; (8004edc <statesMachineLoop+0x8ac>)
 8004c8a:	f7fb fb07 	bl	800029c <__adddf3>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	a18f      	add	r1, pc, #572	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c98:	f7fb fde0 	bl	800085c <__aeabi_ddiv>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4b8e      	ldr	r3, [pc, #568]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	4b8d      	ldr	r3, [pc, #564]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004cb0:	f7fb fcaa 	bl	8000608 <__aeabi_dmul>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	498a      	ldr	r1, [pc, #552]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004cbe:	f7fb fdcd 	bl	800085c <__aeabi_ddiv>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fc9d 	bl	8000608 <__aeabi_dmul>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	4b80      	ldr	r3, [pc, #512]	; (8004edc <statesMachineLoop+0x8ac>)
 8004cdc:	f7fb fadc 	bl	8000298 <__aeabi_dsub>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4982      	ldr	r1, [pc, #520]	; (8004ef0 <statesMachineLoop+0x8c0>)
 8004ce6:	680c      	ldr	r4, [r1, #0]
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f7fb ff3c 	bl	8000b68 <__aeabi_d2uiz>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cf4:	4b78      	ldr	r3, [pc, #480]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fc0b 	bl	8000514 <__aeabi_ui2d>
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	4b76      	ldr	r3, [pc, #472]	; (8004edc <statesMachineLoop+0x8ac>)
 8004d04:	f7fb faca 	bl	800029c <__adddf3>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	a170      	add	r1, pc, #448	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d12:	f7fb fda3 	bl	800085c <__aeabi_ddiv>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	461d      	mov	r5, r3
 8004d1e:	4b70      	ldr	r3, [pc, #448]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	4b6e      	ldr	r3, [pc, #440]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004d2a:	f7fb fc6d 	bl	8000608 <__aeabi_dmul>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	496c      	ldr	r1, [pc, #432]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004d38:	f7fb fd90 	bl	800085c <__aeabi_ddiv>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4620      	mov	r0, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	f7fb fc60 	bl	8000608 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <statesMachineLoop+0x8ac>)
 8004d56:	f7fb fa9f 	bl	8000298 <__aeabi_dsub>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb ff01 	bl	8000b68 <__aeabi_d2uiz>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4a61      	ldr	r2, [pc, #388]	; (8004ef0 <statesMachineLoop+0x8c0>)
 8004d6a:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm_fault));
 8004d6c:	4b5a      	ldr	r3, [pc, #360]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fbcf 	bl	8000514 <__aeabi_ui2d>
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	4b58      	ldr	r3, [pc, #352]	; (8004edc <statesMachineLoop+0x8ac>)
 8004d7c:	f7fb fa8e 	bl	800029c <__adddf3>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	a152      	add	r1, pc, #328	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8a:	f7fb fd67 	bl	800085c <__aeabi_ddiv>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	461d      	mov	r5, r3
 8004d96:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	4b50      	ldr	r3, [pc, #320]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004da2:	f7fb fc31 	bl	8000608 <__aeabi_dmul>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	494e      	ldr	r1, [pc, #312]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004db0:	f7fb fd54 	bl	800085c <__aeabi_ddiv>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4620      	mov	r0, r4
 8004dba:	4629      	mov	r1, r5
 8004dbc:	f7fb fc24 	bl	8000608 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <statesMachineLoop+0x8ac>)
 8004dce:	f7fb fa63 	bl	8000298 <__aeabi_dsub>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4947      	ldr	r1, [pc, #284]	; (8004ef4 <statesMachineLoop+0x8c4>)
 8004dd8:	680c      	ldr	r4, [r1, #0]
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f7fb fec3 	bl	8000b68 <__aeabi_d2uiz>
 8004de2:	4603      	mov	r3, r0
 8004de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de6:	4b3c      	ldr	r3, [pc, #240]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb fb92 	bl	8000514 <__aeabi_ui2d>
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b39      	ldr	r3, [pc, #228]	; (8004edc <statesMachineLoop+0x8ac>)
 8004df6:	f7fb fa51 	bl	800029c <__adddf3>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	a134      	add	r1, pc, #208	; (adr r1, 8004ed0 <statesMachineLoop+0x8a0>)
 8004e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e04:	f7fb fd2a 	bl	800085c <__aeabi_ddiv>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <statesMachineLoop+0x8b0>)
 8004e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <statesMachineLoop+0x8b4>)
 8004e1c:	f7fb fbf4 	bl	8000608 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	492f      	ldr	r1, [pc, #188]	; (8004ee8 <statesMachineLoop+0x8b8>)
 8004e2a:	f7fb fd17 	bl	800085c <__aeabi_ddiv>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fbe7 	bl	8000608 <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <statesMachineLoop+0x8ac>)
 8004e48:	f7fb fa26 	bl	8000298 <__aeabi_dsub>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f7fb fe88 	bl	8000b68 <__aeabi_d2uiz>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <statesMachineLoop+0x8c4>)
 8004e5c:	60d3      	str	r3, [r2, #12]

		TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fb56 	bl	8000514 <__aeabi_ui2d>
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e70:	f7fb fcf4 	bl	800085c <__aeabi_ddiv>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4c17      	ldr	r4, [pc, #92]	; (8004ed8 <statesMachineLoop+0x8a8>)
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f7fb fe73 	bl	8000b68 <__aeabi_d2uiz>
 8004e82:	4603      	mov	r3, r0
 8004e84:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <statesMachineLoop+0x8c8>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb42 	bl	8000514 <__aeabi_ui2d>
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e98:	f7fb fce0 	bl	800085c <__aeabi_ddiv>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4c15      	ldr	r4, [pc, #84]	; (8004ef8 <statesMachineLoop+0x8c8>)
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb fe5f 	bl	8000b68 <__aeabi_d2uiz>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	6363      	str	r3, [r4, #52]	; 0x34
		TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <statesMachineLoop+0x8cc>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fb2e 	bl	8000514 <__aeabi_ui2d>
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec0:	f7fb fccc 	bl	800085c <__aeabi_ddiv>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	e01a      	b.n	8004f00 <statesMachineLoop+0x8d0>
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	418e8480 	.word	0x418e8480
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	3ff00000 	.word	0x3ff00000
 8004ee0:	20000028 	.word	0x20000028
 8004ee4:	40bf4000 	.word	0x40bf4000
 8004ee8:	404e0000 	.word	0x404e0000
 8004eec:	20000370 	.word	0x20000370
 8004ef0:	20000400 	.word	0x20000400
 8004ef4:	20000448 	.word	0x20000448
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	4cbd      	ldr	r4, [pc, #756]	; (80051f8 <statesMachineLoop+0xbc8>)
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	f7fb fe2f 	bl	8000b68 <__aeabi_d2uiz>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6363      	str	r3, [r4, #52]	; 0x34

		while((upperESalarm || lowerESalarm) && manualTrigger){
 8004f0e:	e14c      	b.n	80051aa <statesMachineLoop+0xb7a>

			 //HAL_UART_Transmit(&huart2,(uint8_t*)"EndStopAlarm\r\n", 16, 100);

			 if (ES1i_PRESSED){
 8004f10:	2120      	movs	r1, #32
 8004f12:	48ba      	ldr	r0, [pc, #744]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f14:	f003 fce8 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d11c      	bne.n	8004f58 <statesMachineLoop+0x928>
				 HAL_Delay(10);
 8004f1e:	200a      	movs	r0, #10
 8004f20:	f003 f964 	bl	80081ec <HAL_Delay>
				 if (ES1i_PRESSED){
 8004f24:	2120      	movs	r1, #32
 8004f26:	48b5      	ldr	r0, [pc, #724]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f28:	f003 fcde 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d112      	bne.n	8004f58 <statesMachineLoop+0x928>
					 positive_Dir_MOTOR_1;
 8004f32:	2200      	movs	r2, #0
 8004f34:	2101      	movs	r1, #1
 8004f36:	48b1      	ldr	r0, [pc, #708]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f38:	f003 fcee 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f003 f955 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8004f42:	2100      	movs	r1, #0
 8004f44:	48ae      	ldr	r0, [pc, #696]	; (8005200 <statesMachineLoop+0xbd0>)
 8004f46:	f004 fc77 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8004f4a:	20c8      	movs	r0, #200	; 0xc8
 8004f4c:	f003 f94e 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8004f50:	2100      	movs	r1, #0
 8004f52:	48ab      	ldr	r0, [pc, #684]	; (8005200 <statesMachineLoop+0xbd0>)
 8004f54:	f004 fd20 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8004f58:	2110      	movs	r1, #16
 8004f5a:	48a8      	ldr	r0, [pc, #672]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f5c:	f003 fcc4 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11c      	bne.n	8004fa0 <statesMachineLoop+0x970>
				 HAL_Delay(10);
 8004f66:	200a      	movs	r0, #10
 8004f68:	f003 f940 	bl	80081ec <HAL_Delay>
				 if (ES1s_PRESSED){
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	48a3      	ldr	r0, [pc, #652]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f70:	f003 fcba 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d112      	bne.n	8004fa0 <statesMachineLoop+0x970>
					 negative_Dir_MOTOR_1;
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	489f      	ldr	r0, [pc, #636]	; (80051fc <statesMachineLoop+0xbcc>)
 8004f80:	f003 fcca 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004f84:	2000      	movs	r0, #0
 8004f86:	f003 f931 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	489c      	ldr	r0, [pc, #624]	; (8005200 <statesMachineLoop+0xbd0>)
 8004f8e:	f004 fc53 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8004f92:	20c8      	movs	r0, #200	; 0xc8
 8004f94:	f003 f92a 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4899      	ldr	r0, [pc, #612]	; (8005200 <statesMachineLoop+0xbd0>)
 8004f9c:	f004 fcfc 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if (ES2i_PRESSED){
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	4898      	ldr	r0, [pc, #608]	; (8005204 <statesMachineLoop+0xbd4>)
 8004fa4:	f003 fca0 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11c      	bne.n	8004fe8 <statesMachineLoop+0x9b8>
				 HAL_Delay(30);
 8004fae:	201e      	movs	r0, #30
 8004fb0:	f003 f91c 	bl	80081ec <HAL_Delay>
				 if (ES2i_PRESSED){
 8004fb4:	2104      	movs	r1, #4
 8004fb6:	4893      	ldr	r0, [pc, #588]	; (8005204 <statesMachineLoop+0xbd4>)
 8004fb8:	f003 fc96 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d112      	bne.n	8004fe8 <statesMachineLoop+0x9b8>
					 positive_Dir_MOTOR_2;
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4890      	ldr	r0, [pc, #576]	; (8005208 <statesMachineLoop+0xbd8>)
 8004fc8:	f003 fca6 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f003 f90d 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	488d      	ldr	r0, [pc, #564]	; (800520c <statesMachineLoop+0xbdc>)
 8004fd6:	f004 fc2f 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8004fda:	20c8      	movs	r0, #200	; 0xc8
 8004fdc:	f003 f906 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	488a      	ldr	r0, [pc, #552]	; (800520c <statesMachineLoop+0xbdc>)
 8004fe4:	f004 fcd8 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 8004fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fec:	4886      	ldr	r0, [pc, #536]	; (8005208 <statesMachineLoop+0xbd8>)
 8004fee:	f003 fc7b 	bl	80088e8 <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11d      	bne.n	8005034 <statesMachineLoop+0xa04>
				 HAL_Delay(10);
 8004ff8:	200a      	movs	r0, #10
 8004ffa:	f003 f8f7 	bl	80081ec <HAL_Delay>
				 if (ES2s_PRESSED){
 8004ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005002:	4881      	ldr	r0, [pc, #516]	; (8005208 <statesMachineLoop+0xbd8>)
 8005004:	f003 fc70 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d112      	bne.n	8005034 <statesMachineLoop+0xa04>
					 negative_Dir_MOTOR_2;
 800500e:	2201      	movs	r2, #1
 8005010:	2102      	movs	r1, #2
 8005012:	487d      	ldr	r0, [pc, #500]	; (8005208 <statesMachineLoop+0xbd8>)
 8005014:	f003 fc80 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8005018:	2000      	movs	r0, #0
 800501a:	f003 f8e7 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_2;
 800501e:	2100      	movs	r1, #0
 8005020:	487a      	ldr	r0, [pc, #488]	; (800520c <statesMachineLoop+0xbdc>)
 8005022:	f004 fc09 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8005026:	20c8      	movs	r0, #200	; 0xc8
 8005028:	f003 f8e0 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 800502c:	2100      	movs	r1, #0
 800502e:	4877      	ldr	r0, [pc, #476]	; (800520c <statesMachineLoop+0xbdc>)
 8005030:	f004 fcb2 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 8005034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005038:	4873      	ldr	r0, [pc, #460]	; (8005208 <statesMachineLoop+0xbd8>)
 800503a:	f003 fc55 	bl	80088e8 <HAL_GPIO_ReadPin>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11d      	bne.n	8005080 <statesMachineLoop+0xa50>
				 HAL_Delay(10);
 8005044:	200a      	movs	r0, #10
 8005046:	f003 f8d1 	bl	80081ec <HAL_Delay>
				 if (ES3i_PRESSED){
 800504a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800504e:	486e      	ldr	r0, [pc, #440]	; (8005208 <statesMachineLoop+0xbd8>)
 8005050:	f003 fc4a 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d112      	bne.n	8005080 <statesMachineLoop+0xa50>
					 positive_Dir_MOTOR_3;
 800505a:	2200      	movs	r2, #0
 800505c:	2101      	movs	r1, #1
 800505e:	486a      	ldr	r0, [pc, #424]	; (8005208 <statesMachineLoop+0xbd8>)
 8005060:	f003 fc5a 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8005064:	2000      	movs	r0, #0
 8005066:	f003 f8c1 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_3;
 800506a:	2100      	movs	r1, #0
 800506c:	4868      	ldr	r0, [pc, #416]	; (8005210 <statesMachineLoop+0xbe0>)
 800506e:	f004 fbe3 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8005072:	20c8      	movs	r0, #200	; 0xc8
 8005074:	f003 f8ba 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8005078:	2100      	movs	r1, #0
 800507a:	4865      	ldr	r0, [pc, #404]	; (8005210 <statesMachineLoop+0xbe0>)
 800507c:	f004 fc8c 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 8005080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005084:	4860      	ldr	r0, [pc, #384]	; (8005208 <statesMachineLoop+0xbd8>)
 8005086:	f003 fc2f 	bl	80088e8 <HAL_GPIO_ReadPin>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11d      	bne.n	80050cc <statesMachineLoop+0xa9c>
				 HAL_Delay(10);
 8005090:	200a      	movs	r0, #10
 8005092:	f003 f8ab 	bl	80081ec <HAL_Delay>
				 if (ES3s_PRESSED){
 8005096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800509a:	485b      	ldr	r0, [pc, #364]	; (8005208 <statesMachineLoop+0xbd8>)
 800509c:	f003 fc24 	bl	80088e8 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d112      	bne.n	80050cc <statesMachineLoop+0xa9c>
					 negative_Dir_MOTOR_3;
 80050a6:	2201      	movs	r2, #1
 80050a8:	2101      	movs	r1, #1
 80050aa:	4857      	ldr	r0, [pc, #348]	; (8005208 <statesMachineLoop+0xbd8>)
 80050ac:	f003 fc34 	bl	8008918 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80050b0:	2000      	movs	r0, #0
 80050b2:	f003 f89b 	bl	80081ec <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80050b6:	2100      	movs	r1, #0
 80050b8:	4855      	ldr	r0, [pc, #340]	; (8005210 <statesMachineLoop+0xbe0>)
 80050ba:	f004 fbbd 	bl	8009838 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80050be:	20c8      	movs	r0, #200	; 0xc8
 80050c0:	f003 f894 	bl	80081ec <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80050c4:	2100      	movs	r1, #0
 80050c6:	4852      	ldr	r0, [pc, #328]	; (8005210 <statesMachineLoop+0xbe0>)
 80050c8:	f004 fc66 	bl	8009998 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80050cc:	2110      	movs	r1, #16
 80050ce:	484b      	ldr	r0, [pc, #300]	; (80051fc <statesMachineLoop+0xbcc>)
 80050d0:	f003 fc0a 	bl	80088e8 <HAL_GPIO_ReadPin>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d067      	beq.n	80051aa <statesMachineLoop+0xb7a>
 80050da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050de:	484a      	ldr	r0, [pc, #296]	; (8005208 <statesMachineLoop+0xbd8>)
 80050e0:	f003 fc02 	bl	80088e8 <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d05f      	beq.n	80051aa <statesMachineLoop+0xb7a>
 80050ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ee:	4846      	ldr	r0, [pc, #280]	; (8005208 <statesMachineLoop+0xbd8>)
 80050f0:	f003 fbfa 	bl	80088e8 <HAL_GPIO_ReadPin>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d057      	beq.n	80051aa <statesMachineLoop+0xb7a>
 80050fa:	2120      	movs	r1, #32
 80050fc:	483f      	ldr	r0, [pc, #252]	; (80051fc <statesMachineLoop+0xbcc>)
 80050fe:	f003 fbf3 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d050      	beq.n	80051aa <statesMachineLoop+0xb7a>
 8005108:	2104      	movs	r1, #4
 800510a:	483e      	ldr	r0, [pc, #248]	; (8005204 <statesMachineLoop+0xbd4>)
 800510c:	f003 fbec 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d049      	beq.n	80051aa <statesMachineLoop+0xb7a>
 8005116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800511a:	483b      	ldr	r0, [pc, #236]	; (8005208 <statesMachineLoop+0xbd8>)
 800511c:	f003 fbe4 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d041      	beq.n	80051aa <statesMachineLoop+0xb7a>
				 HAL_Delay(10);
 8005126:	200a      	movs	r0, #10
 8005128:	f003 f860 	bl	80081ec <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 800512c:	2110      	movs	r1, #16
 800512e:	4833      	ldr	r0, [pc, #204]	; (80051fc <statesMachineLoop+0xbcc>)
 8005130:	f003 fbda 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d037      	beq.n	80051aa <statesMachineLoop+0xb7a>
 800513a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800513e:	4832      	ldr	r0, [pc, #200]	; (8005208 <statesMachineLoop+0xbd8>)
 8005140:	f003 fbd2 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d02f      	beq.n	80051aa <statesMachineLoop+0xb7a>
 800514a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800514e:	482e      	ldr	r0, [pc, #184]	; (8005208 <statesMachineLoop+0xbd8>)
 8005150:	f003 fbca 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d027      	beq.n	80051aa <statesMachineLoop+0xb7a>
 800515a:	2120      	movs	r1, #32
 800515c:	4827      	ldr	r0, [pc, #156]	; (80051fc <statesMachineLoop+0xbcc>)
 800515e:	f003 fbc3 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <statesMachineLoop+0xb7a>
 8005168:	2104      	movs	r1, #4
 800516a:	4826      	ldr	r0, [pc, #152]	; (8005204 <statesMachineLoop+0xbd4>)
 800516c:	f003 fbbc 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d019      	beq.n	80051aa <statesMachineLoop+0xb7a>
 8005176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800517a:	4823      	ldr	r0, [pc, #140]	; (8005208 <statesMachineLoop+0xbd8>)
 800517c:	f003 fbb4 	bl	80088e8 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <statesMachineLoop+0xb7a>

					 upperESalarm = false;
 8005186:	4b23      	ldr	r3, [pc, #140]	; (8005214 <statesMachineLoop+0xbe4>)
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
					 lowerESalarm = false;
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <statesMachineLoop+0xbe8>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
					 manualTrigger = false;
 8005192:	4b22      	ldr	r3, [pc, #136]	; (800521c <statesMachineLoop+0xbec>)
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 8005198:	2364      	movs	r3, #100	; 0x64
 800519a:	220d      	movs	r2, #13
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <statesMachineLoop+0xbf0>)
 800519e:	4821      	ldr	r0, [pc, #132]	; (8005224 <statesMachineLoop+0xbf4>)
 80051a0:	f005 fe89 	bl	800aeb6 <HAL_UART_Transmit>
					 state = READY;
 80051a4:	4b20      	ldr	r3, [pc, #128]	; (8005228 <statesMachineLoop+0xbf8>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
		while((upperESalarm || lowerESalarm) && manualTrigger){
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <statesMachineLoop+0xbe4>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <statesMachineLoop+0xb8a>
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <statesMachineLoop+0xbe8>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d014      	beq.n	80051e4 <statesMachineLoop+0xbb4>
 80051ba:	4b18      	ldr	r3, [pc, #96]	; (800521c <statesMachineLoop+0xbec>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f47f aea6 	bne.w	8004f10 <statesMachineLoop+0x8e0>
			 }


		}//End while

		while(faultDrivers && manualTrigger){
 80051c4:	e00e      	b.n	80051e4 <statesMachineLoop+0xbb4>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <statesMachineLoop+0xbfc>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
			manualTrigger = false;
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <statesMachineLoop+0xbec>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 80051d2:	2364      	movs	r3, #100	; 0x64
 80051d4:	220d      	movs	r2, #13
 80051d6:	4916      	ldr	r1, [pc, #88]	; (8005230 <statesMachineLoop+0xc00>)
 80051d8:	4812      	ldr	r0, [pc, #72]	; (8005224 <statesMachineLoop+0xbf4>)
 80051da:	f005 fe6c 	bl	800aeb6 <HAL_UART_Transmit>
			state = READY;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <statesMachineLoop+0xbf8>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && manualTrigger){
 80051e4:	4b11      	ldr	r3, [pc, #68]	; (800522c <statesMachineLoop+0xbfc>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d029      	beq.n	8005240 <statesMachineLoop+0xc10>
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <statesMachineLoop+0xbec>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e8      	bne.n	80051c6 <statesMachineLoop+0xb96>

		}//End while


		break;
 80051f4:	e024      	b.n	8005240 <statesMachineLoop+0xc10>
 80051f6:	bf00      	nop
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40020400 	.word	0x40020400
 8005200:	20000370 	.word	0x20000370
 8005204:	40020c00 	.word	0x40020c00
 8005208:	40020800 	.word	0x40020800
 800520c:	20000400 	.word	0x20000400
 8005210:	20000448 	.word	0x20000448
 8005214:	200006e4 	.word	0x200006e4
 8005218:	200006e5 	.word	0x200006e5
 800521c:	200006e6 	.word	0x200006e6
 8005220:	08010048 	.word	0x08010048
 8005224:	200005b0 	.word	0x200005b0
 8005228:	200006e0 	.word	0x200006e0
 800522c:	200006e7 	.word	0x200006e7
 8005230:	08010054 	.word	0x08010054


	default:break;
 8005234:	bf00      	nop
 8005236:	e004      	b.n	8005242 <statesMachineLoop+0xc12>
		break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <statesMachineLoop+0xc12>
		break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <statesMachineLoop+0xc12>
		break;
 8005240:	bf00      	nop
	}
}
 8005242:	bf00      	nop
 8005244:	bdb0      	pop	{r4, r5, r7, pc}
 8005246:	bf00      	nop

08005248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <HAL_MspInit+0x5c>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <HAL_MspInit+0x5c>)
 8005258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800525c:	6453      	str	r3, [r2, #68]	; 0x44
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_MspInit+0x5c>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <HAL_MspInit+0x5c>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <HAL_MspInit+0x5c>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	; 0x40
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_MspInit+0x5c>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005286:	2005      	movs	r0, #5
 8005288:	f003 f8c8 	bl	800841c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	2001      	movs	r0, #1
 8005292:	f003 f8ce 	bl	8008432 <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005296:	2001      	movs	r0, #1
 8005298:	f003 f8e7 	bl	800846a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40023800 	.word	0x40023800

080052a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b098      	sub	sp, #96	; 0x60
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
 80052d0:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4aa2      	ldr	r2, [pc, #648]	; (8005560 <HAL_TIM_Base_MspInit+0x2b8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d126      	bne.n	800532a <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052dc:	2300      	movs	r3, #0
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
 80052e0:	4ba0      	ldr	r3, [pc, #640]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	4a9f      	ldr	r2, [pc, #636]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6453      	str	r3, [r2, #68]	; 0x44
 80052ec:	4b9d      	ldr	r3, [pc, #628]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80052ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	2018      	movs	r0, #24
 80052fe:	f003 f898 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005302:	2018      	movs	r0, #24
 8005304:	f003 f8b1 	bl	800846a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005308:	2200      	movs	r2, #0
 800530a:	2102      	movs	r1, #2
 800530c:	2019      	movs	r0, #25
 800530e:	f003 f890 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005312:	2019      	movs	r0, #25
 8005314:	f003 f8a9 	bl	800846a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8005318:	2200      	movs	r2, #0
 800531a:	2102      	movs	r1, #2
 800531c:	201a      	movs	r0, #26
 800531e:	f003 f888 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005322:	201a      	movs	r0, #26
 8005324:	f003 f8a1 	bl	800846a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005328:	e115      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d10e      	bne.n	8005352 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005338:	4b8a      	ldr	r3, [pc, #552]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	4a89      	ldr	r2, [pc, #548]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6413      	str	r3, [r2, #64]	; 0x40
 8005344:	4b87      	ldr	r3, [pc, #540]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005350:	e101      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM3)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a84      	ldr	r2, [pc, #528]	; (8005568 <HAL_TIM_Base_MspInit+0x2c0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10e      	bne.n	800537a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800535c:	2300      	movs	r3, #0
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005360:	4b80      	ldr	r3, [pc, #512]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	4a7f      	ldr	r2, [pc, #508]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005366:	f043 0302 	orr.w	r3, r3, #2
 800536a:	6413      	str	r3, [r2, #64]	; 0x40
 800536c:	4b7d      	ldr	r3, [pc, #500]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005378:	e0ed      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM4)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a7b      	ldr	r2, [pc, #492]	; (800556c <HAL_TIM_Base_MspInit+0x2c4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005384:	2300      	movs	r3, #0
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	4b76      	ldr	r3, [pc, #472]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	4a75      	ldr	r2, [pc, #468]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800538e:	f043 0304 	orr.w	r3, r3, #4
 8005392:	6413      	str	r3, [r2, #64]	; 0x40
 8005394:	4b73      	ldr	r3, [pc, #460]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053a0:	e0d9      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM5)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a72      	ldr	r2, [pc, #456]	; (8005570 <HAL_TIM_Base_MspInit+0x2c8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d134      	bne.n	8005416 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	4b6c      	ldr	r3, [pc, #432]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	4a6b      	ldr	r2, [pc, #428]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053b6:	f043 0308 	orr.w	r3, r3, #8
 80053ba:	6413      	str	r3, [r2, #64]	; 0x40
 80053bc:	4b69      	ldr	r3, [pc, #420]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	4b65      	ldr	r3, [pc, #404]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4a64      	ldr	r2, [pc, #400]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	6313      	str	r3, [r2, #48]	; 0x30
 80053d8:	4b62      	ldr	r3, [pc, #392]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 80053e4:	2301      	movs	r3, #1
 80053e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f0:	2300      	movs	r3, #0
 80053f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80053f4:	2302      	movs	r3, #2
 80053f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 80053f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053fc:	4619      	mov	r1, r3
 80053fe:	485d      	ldr	r0, [pc, #372]	; (8005574 <HAL_TIM_Base_MspInit+0x2cc>)
 8005400:	f003 f8ee 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8005404:	2200      	movs	r2, #0
 8005406:	2102      	movs	r1, #2
 8005408:	2032      	movs	r0, #50	; 0x32
 800540a:	f003 f812 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800540e:	2032      	movs	r0, #50	; 0x32
 8005410:	f003 f82b 	bl	800846a <HAL_NVIC_EnableIRQ>
}
 8005414:	e09f      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM9)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a57      	ldr	r2, [pc, #348]	; (8005578 <HAL_TIM_Base_MspInit+0x2d0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d116      	bne.n	800544e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800542a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542e:	6453      	str	r3, [r2, #68]	; 0x44
 8005430:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800543c:	2200      	movs	r2, #0
 800543e:	2100      	movs	r1, #0
 8005440:	2018      	movs	r0, #24
 8005442:	f002 fff6 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005446:	2018      	movs	r0, #24
 8005448:	f003 f80f 	bl	800846a <HAL_NVIC_EnableIRQ>
}
 800544c:	e083      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM10)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a4a      	ldr	r2, [pc, #296]	; (800557c <HAL_TIM_Base_MspInit+0x2d4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d135      	bne.n	80054c4 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	4b41      	ldr	r3, [pc, #260]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005460:	4a40      	ldr	r2, [pc, #256]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005466:	6453      	str	r3, [r2, #68]	; 0x44
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	4b3a      	ldr	r3, [pc, #232]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4a39      	ldr	r2, [pc, #228]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800547e:	f043 0302 	orr.w	r3, r3, #2
 8005482:	6313      	str	r3, [r2, #48]	; 0x30
 8005484:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 8005490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005496:	2302      	movs	r3, #2
 8005498:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549e:	2300      	movs	r3, #0
 80054a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80054a2:	2303      	movs	r3, #3
 80054a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 80054a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054aa:	4619      	mov	r1, r3
 80054ac:	4834      	ldr	r0, [pc, #208]	; (8005580 <HAL_TIM_Base_MspInit+0x2d8>)
 80054ae:	f003 f897 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80054b2:	2200      	movs	r2, #0
 80054b4:	2102      	movs	r1, #2
 80054b6:	2019      	movs	r0, #25
 80054b8:	f002 ffbb 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80054bc:	2019      	movs	r0, #25
 80054be:	f002 ffd4 	bl	800846a <HAL_NVIC_EnableIRQ>
}
 80054c2:	e048      	b.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM11)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <HAL_TIM_Base_MspInit+0x2dc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d143      	bne.n	8005556 <HAL_TIM_Base_MspInit+0x2ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054ce:	2302      	movs	r3, #2
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80054d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054dc:	4618      	mov	r0, r3
 80054de:	f003 feff 	bl	80092e0 <HAL_RCCEx_PeriphCLKConfig>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_TIM_Base_MspInit+0x244>
      Error_Handler();
 80054e8:	f7fe ff80 	bl	80043ec <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80054f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fa:	6453      	str	r3, [r2, #68]	; 0x44
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a14      	ldr	r2, [pc, #80]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 8005512:	f043 0302 	orr.w	r3, r3, #2
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_TIM_Base_MspInit+0x2bc>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 8005524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005528:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005532:	2300      	movs	r3, #0
 8005534:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005536:	2303      	movs	r3, #3
 8005538:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 800553a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800553e:	4619      	mov	r1, r3
 8005540:	480f      	ldr	r0, [pc, #60]	; (8005580 <HAL_TIM_Base_MspInit+0x2d8>)
 8005542:	f003 f84d 	bl	80085e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8005546:	2200      	movs	r2, #0
 8005548:	2102      	movs	r1, #2
 800554a:	201a      	movs	r0, #26
 800554c:	f002 ff71 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005550:	201a      	movs	r0, #26
 8005552:	f002 ff8a 	bl	800846a <HAL_NVIC_EnableIRQ>
}
 8005556:	bf00      	nop
 8005558:	3760      	adds	r7, #96	; 0x60
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40023800 	.word	0x40023800
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40020000 	.word	0x40020000
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40020400 	.word	0x40020400
 8005584:	40014800 	.word	0x40014800

08005588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	605a      	str	r2, [r3, #4]
 800559a:	609a      	str	r2, [r3, #8]
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a36      	ldr	r2, [pc, #216]	; (8005680 <HAL_TIM_MspPostInit+0xf8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d11f      	bne.n	80055ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	4b35      	ldr	r3, [pc, #212]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	4a34      	ldr	r2, [pc, #208]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ba:	4b32      	ldr	r3, [pc, #200]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = S_PulsePaP1_Pin;
 80055c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d4:	2300      	movs	r3, #0
 80055d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP1_GPIO_Port, &GPIO_InitStruct);
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	4619      	mov	r1, r3
 80055e2:	4829      	ldr	r0, [pc, #164]	; (8005688 <HAL_TIM_MspPostInit+0x100>)
 80055e4:	f002 fffc 	bl	80085e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80055e8:	e046      	b.n	8005678 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a27      	ldr	r2, [pc, #156]	; (800568c <HAL_TIM_MspPostInit+0x104>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d11e      	bne.n	8005632 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6313      	str	r3, [r2, #48]	; 0x30
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsePaP2_Pin;
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	2302      	movs	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005620:	2302      	movs	r3, #2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP2_GPIO_Port, &GPIO_InitStruct);
 8005624:	f107 0314 	add.w	r3, r7, #20
 8005628:	4619      	mov	r1, r3
 800562a:	4817      	ldr	r0, [pc, #92]	; (8005688 <HAL_TIM_MspPostInit+0x100>)
 800562c:	f002 ffd8 	bl	80085e0 <HAL_GPIO_Init>
}
 8005630:	e022      	b.n	8005678 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <HAL_TIM_MspPostInit+0x108>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d11d      	bne.n	8005678 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	4a0f      	ldr	r2, [pc, #60]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	6313      	str	r3, [r2, #48]	; 0x30
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <HAL_TIM_MspPostInit+0xfc>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsePaP3_Pin;
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565c:	2302      	movs	r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005664:	2300      	movs	r3, #0
 8005666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005668:	2302      	movs	r3, #2
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP3_GPIO_Port, &GPIO_InitStruct);
 800566c:	f107 0314 	add.w	r3, r7, #20
 8005670:	4619      	mov	r1, r3
 8005672:	4808      	ldr	r0, [pc, #32]	; (8005694 <HAL_TIM_MspPostInit+0x10c>)
 8005674:	f002 ffb4 	bl	80085e0 <HAL_GPIO_Init>
}
 8005678:	bf00      	nop
 800567a:	3728      	adds	r7, #40	; 0x28
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40010000 	.word	0x40010000
 8005684:	40023800 	.word	0x40023800
 8005688:	40020000 	.word	0x40020000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40020400 	.word	0x40020400

08005698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	; (800572c <HAL_UART_MspInit+0x94>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d133      	bne.n	8005722 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ca:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	4a14      	ldr	r2, [pc, #80]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6313      	str	r3, [r2, #48]	; 0x30
 80056e6:	4b12      	ldr	r3, [pc, #72]	; (8005730 <HAL_UART_MspInit+0x98>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80056f2:	230c      	movs	r3, #12
 80056f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f6:	2302      	movs	r3, #2
 80056f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056fe:	2303      	movs	r3, #3
 8005700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005702:	2307      	movs	r3, #7
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	4619      	mov	r1, r3
 800570c:	4809      	ldr	r0, [pc, #36]	; (8005734 <HAL_UART_MspInit+0x9c>)
 800570e:	f002 ff67 	bl	80085e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005712:	2200      	movs	r2, #0
 8005714:	2101      	movs	r1, #1
 8005716:	2026      	movs	r0, #38	; 0x26
 8005718:	f002 fe8b 	bl	8008432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800571c:	2026      	movs	r0, #38	; 0x26
 800571e:	f002 fea4 	bl	800846a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005722:	bf00      	nop
 8005724:	3728      	adds	r7, #40	; 0x28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40004400 	.word	0x40004400
 8005730:	40023800 	.word	0x40023800
 8005734:	40020000 	.word	0x40020000

08005738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800573c:	e7fe      	b.n	800573c <NMI_Handler+0x4>

0800573e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800573e:	b480      	push	{r7}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005742:	e7fe      	b.n	8005742 <HardFault_Handler+0x4>

08005744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005748:	e7fe      	b.n	8005748 <MemManage_Handler+0x4>

0800574a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800574e:	e7fe      	b.n	800574e <BusFault_Handler+0x4>

08005750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005754:	e7fe      	b.n	8005754 <UsageFault_Handler+0x4>

08005756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800575a:	bf00      	nop
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005772:	b480      	push	{r7}
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005784:	f002 fd12 	bl	80081ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}

0800578c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005790:	f003 f8f4 	bl	800897c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}

08005798 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 800579c:	2004      	movs	r0, #4
 800579e:	f003 f8d5 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 80057aa:	2010      	movs	r0, #16
 80057ac:	f003 f8ce 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 80057b8:	2020      	movs	r0, #32
 80057ba:	f003 f8c7 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 80057be:	2080      	movs	r0, #128	; 0x80
 80057c0:	f003 f8c4 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057c4:	bf00      	nop
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057cc:	4803      	ldr	r0, [pc, #12]	; (80057dc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80057ce:	f004 fb1b 	bl	8009e08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80057d2:	4803      	ldr	r0, [pc, #12]	; (80057e0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80057d4:	f004 fb18 	bl	8009e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000370 	.word	0x20000370
 80057e0:	200004d8 	.word	0x200004d8

080057e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80057e8:	4803      	ldr	r0, [pc, #12]	; (80057f8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80057ea:	f004 fb0d 	bl	8009e08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80057ee:	4803      	ldr	r0, [pc, #12]	; (80057fc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80057f0:	f004 fb0a 	bl	8009e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000370 	.word	0x20000370
 80057fc:	20000520 	.word	0x20000520

08005800 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005804:	4803      	ldr	r0, [pc, #12]	; (8005814 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005806:	f004 faff 	bl	8009e08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800580a:	4803      	ldr	r0, [pc, #12]	; (8005818 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800580c:	f004 fafc 	bl	8009e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000370 	.word	0x20000370
 8005818:	20000568 	.word	0x20000568

0800581c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <USART2_IRQHandler+0x10>)
 8005822:	f005 fc0b 	bl	800b03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	200005b0 	.word	0x200005b0

08005830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8005834:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005838:	f003 f888 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 800583c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005840:	f003 f884 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8005844:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005848:	f003 f880 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800584c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005850:	f003 f87c 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8005854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005858:	f003 f878 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 800585c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005860:	f003 f874 	bl	800894c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}

08005868 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <TIM5_IRQHandler+0x10>)
 800586e:	f004 facb 	bl	8009e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000490 	.word	0x20000490

0800587c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	return 1;
 8005880:	2301      	movs	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <_kill>:

int _kill(int pid, int sig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005896:	f006 fb2f 	bl	800bef8 <__errno>
 800589a:	4603      	mov	r3, r0
 800589c:	2216      	movs	r2, #22
 800589e:	601a      	str	r2, [r3, #0]
	return -1;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_exit>:

void _exit (int status)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058b4:	f04f 31ff 	mov.w	r1, #4294967295
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ffe7 	bl	800588c <_kill>
	while (1) {}		/* Make sure we hang here */
 80058be:	e7fe      	b.n	80058be <_exit+0x12>

080058c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e00a      	b.n	80058e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80058d2:	f3af 8000 	nop.w
 80058d6:	4601      	mov	r1, r0
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	60ba      	str	r2, [r7, #8]
 80058de:	b2ca      	uxtb	r2, r1
 80058e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3301      	adds	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	dbf0      	blt.n	80058d2 <_read+0x12>
	}

return len;
 80058f0:	687b      	ldr	r3, [r7, #4]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e009      	b.n	8005920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	60ba      	str	r2, [r7, #8]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3301      	adds	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	dbf1      	blt.n	800590c <_write+0x12>
	}
	return len;
 8005928:	687b      	ldr	r3, [r7, #4]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <_close>:

int _close(int file)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
	return -1;
 800593a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800595a:	605a      	str	r2, [r3, #4]
	return 0;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <_isatty>:

int _isatty(int file)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
	return 1;
 8005972:	2301      	movs	r3, #1
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
	return 0;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <_sbrk+0x5c>)
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <_sbrk+0x60>)
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <_sbrk+0x64>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <_sbrk+0x64>)
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <_sbrk+0x68>)
 80059bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <_sbrk+0x64>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059cc:	f006 fa94 	bl	800bef8 <__errno>
 80059d0:	4603      	mov	r3, r0
 80059d2:	220c      	movs	r2, #12
 80059d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	e009      	b.n	80059f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <_sbrk+0x64>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <_sbrk+0x64>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <_sbrk+0x64>)
 80059ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20020000 	.word	0x20020000
 80059fc:	00000400 	.word	0x00000400
 8005a00:	20000824 	.word	0x20000824
 8005a04:	200008c8 	.word	0x200008c8

08005a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <SystemInit+0x20>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <SystemInit+0x20>)
 8005a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000ed00 	.word	0xe000ed00
 8005a2c:	00000000 	.word	0x00000000

08005a30 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b0e0      	sub	sp, #384	; 0x180
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
 8005a3c:	ed87 1b5c 	vstr	d1, [r7, #368]	; 0x170
 8005a40:	ed87 2b5a 	vstr	d2, [r7, #360]	; 0x168
 8005a44:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164

	Tj1 = params[0];
 8005a48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	498a      	ldr	r1, [pc, #552]	; (8005c7c <get_Straj+0x24c>)
 8005a52:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8005a56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005a5e:	4988      	ldr	r1, [pc, #544]	; (8005c80 <get_Straj+0x250>)
 8005a60:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8005a64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005a6c:	4985      	ldr	r1, [pc, #532]	; (8005c84 <get_Straj+0x254>)
 8005a6e:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8005a72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a76:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005a7a:	4983      	ldr	r1, [pc, #524]	; (8005c88 <get_Straj+0x258>)
 8005a7c:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8005a80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a88:	4980      	ldr	r1, [pc, #512]	; (8005c8c <get_Straj+0x25c>)
 8005a8a:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8005a8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005a96:	497e      	ldr	r1, [pc, #504]	; (8005c90 <get_Straj+0x260>)
 8005a98:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8005a9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005aa0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005aa4:	497b      	ldr	r1, [pc, #492]	; (8005c94 <get_Straj+0x264>)
 8005aa6:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8005aaa:	497b      	ldr	r1, [pc, #492]	; (8005c98 <get_Straj+0x268>)
 8005aac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005ab0:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8005ab4:	4979      	ldr	r1, [pc, #484]	; (8005c9c <get_Straj+0x26c>)
 8005ab6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005aba:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8005abe:	4b77      	ldr	r3, [pc, #476]	; (8005c9c <get_Straj+0x26c>)
 8005ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ac4:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <get_Straj+0x268>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fb f80f 	bl	8000aec <__aeabi_dcmplt>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80fd 	beq.w	8005cd0 <get_Straj+0x2a0>

    flagInv = true;
 8005ad6:	4a72      	ldr	r2, [pc, #456]	; (8005ca0 <get_Straj+0x270>)
 8005ad8:	2301      	movs	r3, #1
 8005ada:	7013      	strb	r3, [r2, #0]

    qi = -qi;
 8005adc:	4b6e      	ldr	r3, [pc, #440]	; (8005c98 <get_Straj+0x268>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005ae8:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <get_Straj+0x268>)
 8005aea:	e9c3 8900 	strd	r8, r9, [r3]
    qf = -qf;
 8005aee:	4b6b      	ldr	r3, [pc, #428]	; (8005c9c <get_Straj+0x26c>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8005af8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005b00:	4b66      	ldr	r3, [pc, #408]	; (8005c9c <get_Straj+0x26c>)
 8005b02:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005b06:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8005b0a:	4b66      	ldr	r3, [pc, #408]	; (8005ca4 <get_Straj+0x274>)
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005b14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b18:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005b1c:	4b61      	ldr	r3, [pc, #388]	; (8005ca4 <get_Straj+0x274>)
 8005b1e:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005b22:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 8005b26:	4b60      	ldr	r3, [pc, #384]	; (8005ca8 <get_Straj+0x278>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <get_Straj+0x278>)
 8005b3a:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005b3e:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 8005b42:	4b5a      	ldr	r3, [pc, #360]	; (8005cac <get_Straj+0x27c>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005b54:	4b56      	ldr	r3, [pc, #344]	; (8005cb0 <get_Straj+0x280>)
 8005b56:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005b5a:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 8005b5e:	4b54      	ldr	r3, [pc, #336]	; (8005cb0 <get_Straj+0x280>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8005b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005b70:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <get_Straj+0x27c>)
 8005b72:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005b76:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8005b7a:	4b4e      	ldr	r3, [pc, #312]	; (8005cb4 <get_Straj+0x284>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005b84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005b8c:	4b4a      	ldr	r3, [pc, #296]	; (8005cb8 <get_Straj+0x288>)
 8005b8e:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005b92:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8005b96:	4b48      	ldr	r3, [pc, #288]	; (8005cb8 <get_Straj+0x288>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8005ba0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ba8:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <get_Straj+0x284>)
 8005baa:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8005bae:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8005bb2:	4b42      	ldr	r3, [pc, #264]	; (8005cbc <get_Straj+0x28c>)
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8005bbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bc4:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <get_Straj+0x290>)
 8005bc6:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8005bca:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8005bce:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <get_Straj+0x290>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005bd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <get_Straj+0x28c>)
 8005be2:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8005be6:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8005bea:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <get_Straj+0x290>)
 8005bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <get_Straj+0x24c>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fd07 	bl	8000608 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <get_Straj+0x294>)
 8005c04:	e9c3 0100 	strd	r0, r1, [r3]
    alimd = -jmax*Tj2;
 8005c08:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <get_Straj+0x290>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005c12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <get_Straj+0x250>)
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005c24:	f7fa fcf0 	bl	8000608 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <get_Straj+0x298>)
 8005c32:	e9c3 0100 	strd	r0, r1, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <get_Straj+0x258>)
 8005c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <get_Straj+0x24c>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fb29 	bl	8000298 <__aeabi_dsub>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <get_Straj+0x294>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fcd8 	bl	8000608 <__aeabi_dmul>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <get_Straj+0x274>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa fb19 	bl	800029c <__adddf3>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <get_Straj+0x29c>)
 8005c74:	e9c3 0100 	strd	r0, r1, [r3]
 8005c78:	e091      	b.n	8005d9e <get_Straj+0x36e>
 8005c7a:	bf00      	nop
 8005c7c:	20000880 	.word	0x20000880
 8005c80:	20000888 	.word	0x20000888
 8005c84:	20000890 	.word	0x20000890
 8005c88:	20000868 	.word	0x20000868
 8005c8c:	20000870 	.word	0x20000870
 8005c90:	20000878 	.word	0x20000878
 8005c94:	20000860 	.word	0x20000860
 8005c98:	200008a0 	.word	0x200008a0
 8005c9c:	200008a8 	.word	0x200008a8
 8005ca0:	20000840 	.word	0x20000840
 8005ca4:	20000018 	.word	0x20000018
 8005ca8:	20000718 	.word	0x20000718
 8005cac:	20000710 	.word	0x20000710
 8005cb0:	20000010 	.word	0x20000010
 8005cb4:	20000720 	.word	0x20000720
 8005cb8:	20000020 	.word	0x20000020
 8005cbc:	20000708 	.word	0x20000708
 8005cc0:	20000008 	.word	0x20000008
 8005cc4:	20000848 	.word	0x20000848
 8005cc8:	20000850 	.word	0x20000850
 8005ccc:	20000858 	.word	0x20000858

    }else{
        jmin = -jmax;
 8005cd0:	4b99      	ldr	r3, [pc, #612]	; (8005f38 <get_Straj+0x508>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005cdc:	4b97      	ldr	r3, [pc, #604]	; (8005f3c <get_Straj+0x50c>)
 8005cde:	e9c3 4500 	strd	r4, r5, [r3]
        amin = -amax;
 8005ce2:	4b97      	ldr	r3, [pc, #604]	; (8005f40 <get_Straj+0x510>)
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	4692      	mov	sl, r2
 8005cea:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005cee:	4b95      	ldr	r3, [pc, #596]	; (8005f44 <get_Straj+0x514>)
 8005cf0:	e9c3 ab00 	strd	sl, fp, [r3]
        vmin = -vmax;
 8005cf4:	4b94      	ldr	r3, [pc, #592]	; (8005f48 <get_Straj+0x518>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005cfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d06:	4b91      	ldr	r3, [pc, #580]	; (8005f4c <get_Straj+0x51c>)
 8005d08:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8005d0c:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8005d10:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <get_Straj+0x508>)
 8005d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d16:	4b8e      	ldr	r3, [pc, #568]	; (8005f50 <get_Straj+0x520>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fc74 	bl	8000608 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	4b8a      	ldr	r3, [pc, #552]	; (8005f54 <get_Straj+0x524>)
 8005d2a:	e9c3 0100 	strd	r0, r1, [r3]
        alimd = -jmax*Tj2;
 8005d2e:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <get_Straj+0x508>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d40:	4b85      	ldr	r3, [pc, #532]	; (8005f58 <get_Straj+0x528>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005d4a:	f7fa fc5d 	bl	8000608 <__aeabi_dmul>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <get_Straj+0x52c>)
 8005d58:	e9c3 0100 	strd	r0, r1, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8005d5c:	4b80      	ldr	r3, [pc, #512]	; (8005f60 <get_Straj+0x530>)
 8005d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d62:	4b7b      	ldr	r3, [pc, #492]	; (8005f50 <get_Straj+0x520>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fa96 	bl	8000298 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	4b77      	ldr	r3, [pc, #476]	; (8005f54 <get_Straj+0x524>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fc45 	bl	8000608 <__aeabi_dmul>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	4b77      	ldr	r3, [pc, #476]	; (8005f64 <get_Straj+0x534>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fa86 	bl	800029c <__adddf3>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4610      	mov	r0, r2
 8005d96:	4619      	mov	r1, r3
 8005d98:	4b73      	ldr	r3, [pc, #460]	; (8005f68 <get_Straj+0x538>)
 8005d9a:	e9c3 0100 	strd	r0, r1, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005daa:	f7fa feb3 	bl	8000b14 <__aeabi_dcmpge>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80e9 	beq.w	8005f88 <get_Straj+0x558>
 8005db6:	4b66      	ldr	r3, [pc, #408]	; (8005f50 <get_Straj+0x520>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005dc0:	f7fa fe9e 	bl	8000b00 <__aeabi_dcmple>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80de 	beq.w	8005f88 <get_Straj+0x558>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8005dcc:	4b65      	ldr	r3, [pc, #404]	; (8005f64 <get_Straj+0x534>)
 8005dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dd2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005dd6:	f7fa fc17 	bl	8000608 <__aeabi_dmul>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <get_Straj+0x53c>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa fa58 	bl	800029c <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	461d      	mov	r5, r3
 8005df4:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8005f28 <get_Straj+0x4f8>
 8005df8:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005dfc:	f008 ffa0 	bl	800ed40 <pow>
 8005e00:	ec51 0b10 	vmov	r0, r1, d0
 8005e04:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <get_Straj+0x508>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fbfd 	bl	8000608 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	4b55      	ldr	r3, [pc, #340]	; (8005f70 <get_Straj+0x540>)
 8005e1c:	f7fa fd1e 	bl	800085c <__aeabi_ddiv>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa fa38 	bl	800029c <__adddf3>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4950      	ldr	r1, [pc, #320]	; (8005f74 <get_Straj+0x544>)
 8005e32:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+jmax*pow(t,2)/2;
 8005e36:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8005f30 <get_Straj+0x500>
 8005e3a:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005e3e:	f008 ff7f 	bl	800ed40 <pow>
 8005e42:	ec51 0b10 	vmov	r0, r1, d0
 8005e46:	4b3c      	ldr	r3, [pc, #240]	; (8005f38 <get_Straj+0x508>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fbdc 	bl	8000608 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e60:	f7fa fcfc 	bl	800085c <__aeabi_ddiv>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <get_Straj+0x534>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f7fa fa13 	bl	800029c <__adddf3>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	493f      	ldr	r1, [pc, #252]	; (8005f78 <get_Straj+0x548>)
 8005e7c:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*t;
 8005e80:	4b2d      	ldr	r3, [pc, #180]	; (8005f38 <get_Straj+0x508>)
 8005e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e86:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005e8a:	f7fa fbbd 	bl	8000608 <__aeabi_dmul>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	493a      	ldr	r1, [pc, #232]	; (8005f7c <get_Straj+0x54c>)
 8005e94:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <get_Straj+0x508>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	4938      	ldr	r1, [pc, #224]	; (8005f80 <get_Straj+0x550>)
 8005ea0:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005ea4:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <get_Straj+0x554>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 87a8 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005eae:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <get_Straj+0x544>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005eb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ec0:	4b2c      	ldr	r3, [pc, #176]	; (8005f74 <get_Straj+0x544>)
 8005ec2:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8005ec6:	ed83 7b00 	vstr	d7, [r3]
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <get_Straj+0x548>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005ed4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005edc:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <get_Straj+0x548>)
 8005ede:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8005ee2:	ed83 7b00 	vstr	d7, [r3]
 8005ee6:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <get_Straj+0x54c>)
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8005ef0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <get_Straj+0x54c>)
 8005efa:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8005efe:	ed83 7b00 	vstr	d7, [r3]
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <get_Straj+0x550>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8005f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f14:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <get_Straj+0x550>)
 8005f16:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8005f1a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005f1e:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <get_Straj+0x554>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005f24:	f000 bf6b 	b.w	8006dfe <get_Straj+0x13ce>
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	40080000 	.word	0x40080000
 8005f30:	00000000 	.word	0x00000000
 8005f34:	40000000 	.word	0x40000000
 8005f38:	20000008 	.word	0x20000008
 8005f3c:	20000708 	.word	0x20000708
 8005f40:	20000020 	.word	0x20000020
 8005f44:	20000720 	.word	0x20000720
 8005f48:	20000010 	.word	0x20000010
 8005f4c:	20000710 	.word	0x20000710
 8005f50:	20000880 	.word	0x20000880
 8005f54:	20000848 	.word	0x20000848
 8005f58:	20000888 	.word	0x20000888
 8005f5c:	20000850 	.word	0x20000850
 8005f60:	20000868 	.word	0x20000868
 8005f64:	20000018 	.word	0x20000018
 8005f68:	20000858 	.word	0x20000858
 8005f6c:	200008a0 	.word	0x200008a0
 8005f70:	40180000 	.word	0x40180000
 8005f74:	200006e8 	.word	0x200006e8
 8005f78:	200006f0 	.word	0x200006f0
 8005f7c:	200006f8 	.word	0x200006f8
 8005f80:	20000700 	.word	0x20000700
 8005f84:	20000840 	.word	0x20000840
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8005f88:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <get_Straj+0x770>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005f92:	f7fa fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 811b 	beq.w	80061d4 <get_Straj+0x7a4>
 8005f9e:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <get_Straj+0x774>)
 8005fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fa4:	4b7e      	ldr	r3, [pc, #504]	; (80061a0 <get_Straj+0x770>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa f975 	bl	8000298 <__aeabi_dsub>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005fb6:	f7fa fda3 	bl	8000b00 <__aeabi_dcmple>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8109 	beq.w	80061d4 <get_Straj+0x7a4>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8005fc2:	4b79      	ldr	r3, [pc, #484]	; (80061a8 <get_Straj+0x778>)
 8005fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fc8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005fcc:	f7fa fb1c 	bl	8000608 <__aeabi_dmul>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4b74      	ldr	r3, [pc, #464]	; (80061ac <get_Straj+0x77c>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa f95d 	bl	800029c <__adddf3>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4692      	mov	sl, r2
 8005fe8:	469b      	mov	fp, r3
 8005fea:	4b71      	ldr	r3, [pc, #452]	; (80061b0 <get_Straj+0x780>)
 8005fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	4b6f      	ldr	r3, [pc, #444]	; (80061b4 <get_Straj+0x784>)
 8005ff6:	f7fa fc31 	bl	800085c <__aeabi_ddiv>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4690      	mov	r8, r2
 8006000:	4699      	mov	r9, r3
 8006002:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8006198 <get_Straj+0x768>
 8006006:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 800600a:	f008 fe99 	bl	800ed40 <pow>
 800600e:	ec51 0b10 	vmov	r0, r1, d0
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	4b68      	ldr	r3, [pc, #416]	; (80061b8 <get_Straj+0x788>)
 8006018:	f7fa faf6 	bl	8000608 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4614      	mov	r4, r2
 8006022:	461d      	mov	r5, r3
 8006024:	4b5e      	ldr	r3, [pc, #376]	; (80061a0 <get_Straj+0x770>)
 8006026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	4b62      	ldr	r3, [pc, #392]	; (80061b8 <get_Straj+0x788>)
 8006030:	f7fa faea 	bl	8000608 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006040:	f7fa fae2 	bl	8000608 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4620      	mov	r0, r4
 800604a:	4629      	mov	r1, r5
 800604c:	f7fa f924 	bl	8000298 <__aeabi_dsub>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	4b51      	ldr	r3, [pc, #324]	; (80061a0 <get_Straj+0x770>)
 800605a:	ed93 7b00 	vldr	d7, [r3]
 800605e:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8006198 <get_Straj+0x768>
 8006062:	eeb0 0a47 	vmov.f32	s0, s14
 8006066:	eef0 0a67 	vmov.f32	s1, s15
 800606a:	f008 fe69 	bl	800ed40 <pow>
 800606e:	ec53 2b10 	vmov	r2, r3, d0
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa f911 	bl	800029c <__adddf3>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fac1 	bl	8000608 <__aeabi_dmul>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4650      	mov	r0, sl
 800608c:	4659      	mov	r1, fp
 800608e:	f7fa f905 	bl	800029c <__adddf3>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4949      	ldr	r1, [pc, #292]	; (80061bc <get_Straj+0x78c>)
 8006098:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+alima*(t-Tj1/2);
 800609c:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <get_Straj+0x770>)
 800609e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060aa:	f7fa fbd7 	bl	800085c <__aeabi_ddiv>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80060b6:	f7fa f8ef 	bl	8000298 <__aeabi_dsub>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <get_Straj+0x780>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <get_Straj+0x778>)
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa f8df 	bl	800029c <__adddf3>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4937      	ldr	r1, [pc, #220]	; (80061c0 <get_Straj+0x790>)
 80060e4:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*Tj1;
 80060e8:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <get_Straj+0x794>)
 80060ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060ee:	4b2c      	ldr	r3, [pc, #176]	; (80061a0 <get_Straj+0x770>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f7fa fa88 	bl	8000608 <__aeabi_dmul>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4932      	ldr	r1, [pc, #200]	; (80061c8 <get_Straj+0x798>)
 80060fe:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006102:	4932      	ldr	r1, [pc, #200]	; (80061cc <get_Straj+0x79c>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8006110:	4b2f      	ldr	r3, [pc, #188]	; (80061d0 <get_Straj+0x7a0>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8672 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800611a:	4b28      	ldr	r3, [pc, #160]	; (80061bc <get_Straj+0x78c>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8006124:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800612c:	4b23      	ldr	r3, [pc, #140]	; (80061bc <get_Straj+0x78c>)
 800612e:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8006132:	ed83 7b00 	vstr	d7, [r3]
 8006136:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <get_Straj+0x790>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006140:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006148:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <get_Straj+0x790>)
 800614a:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800614e:	ed83 7b00 	vstr	d7, [r3]
 8006152:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <get_Straj+0x798>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800615c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006164:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <get_Straj+0x798>)
 8006166:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 800616a:	ed83 7b00 	vstr	d7, [r3]
 800616e:	4b17      	ldr	r3, [pc, #92]	; (80061cc <get_Straj+0x79c>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800617c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <get_Straj+0x79c>)
 8006182:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8006186:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <get_Straj+0x7a0>)
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006190:	f000 be35 	b.w	8006dfe <get_Straj+0x13ce>
 8006194:	f3af 8000 	nop.w
 8006198:	00000000 	.word	0x00000000
 800619c:	40000000 	.word	0x40000000
 80061a0:	20000880 	.word	0x20000880
 80061a4:	20000868 	.word	0x20000868
 80061a8:	20000018 	.word	0x20000018
 80061ac:	200008a0 	.word	0x200008a0
 80061b0:	20000848 	.word	0x20000848
 80061b4:	40180000 	.word	0x40180000
 80061b8:	40080000 	.word	0x40080000
 80061bc:	200006e8 	.word	0x200006e8
 80061c0:	200006f0 	.word	0x200006f0
 80061c4:	20000008 	.word	0x20000008
 80061c8:	200006f8 	.word	0x200006f8
 80061cc:	20000700 	.word	0x20000700
 80061d0:	20000840 	.word	0x20000840
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 80061d4:	4b94      	ldr	r3, [pc, #592]	; (8006428 <get_Straj+0x9f8>)
 80061d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061da:	4b94      	ldr	r3, [pc, #592]	; (800642c <get_Straj+0x9fc>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f7fa f85a 	bl	8000298 <__aeabi_dsub>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80061ec:	f7fa fc9c 	bl	8000b28 <__aeabi_dcmpgt>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8130 	beq.w	8006458 <get_Straj+0xa28>
 80061f8:	4b8b      	ldr	r3, [pc, #556]	; (8006428 <get_Straj+0x9f8>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006202:	f7fa fc7d 	bl	8000b00 <__aeabi_dcmple>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8125 	beq.w	8006458 <get_Straj+0xa28>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 800620e:	4b88      	ldr	r3, [pc, #544]	; (8006430 <get_Straj+0xa00>)
 8006210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006214:	4b87      	ldr	r3, [pc, #540]	; (8006434 <get_Straj+0xa04>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f7fa f83f 	bl	800029c <__adddf3>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	4b80      	ldr	r3, [pc, #512]	; (8006428 <get_Straj+0x9f8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4610      	mov	r0, r2
 8006236:	4619      	mov	r1, r3
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006240:	f7fa fb0c 	bl	800085c <__aeabi_ddiv>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	4b7a      	ldr	r3, [pc, #488]	; (8006438 <get_Straj+0xa08>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7fa f823 	bl	800029c <__adddf3>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	4b72      	ldr	r3, [pc, #456]	; (8006428 <get_Straj+0x9f8>)
 8006260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006264:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006268:	f7fa f816 	bl	8000298 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	4b6e      	ldr	r3, [pc, #440]	; (8006430 <get_Straj+0xa00>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa f9c5 	bl	8000608 <__aeabi_dmul>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	f7fa f807 	bl	8000298 <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4614      	mov	r4, r2
 8006290:	461d      	mov	r5, r3
 8006292:	4b65      	ldr	r3, [pc, #404]	; (8006428 <get_Straj+0x9f8>)
 8006294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006298:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800629c:	f7f9 fffc 	bl	8000298 <__aeabi_dsub>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	ec43 2b17 	vmov	d7, r2, r3
 80062a8:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8006418 <get_Straj+0x9e8>
 80062ac:	eeb0 0a47 	vmov.f32	s0, s14
 80062b0:	eef0 0a67 	vmov.f32	s1, s15
 80062b4:	f008 fd44 	bl	800ed40 <pow>
 80062b8:	ec51 0b10 	vmov	r0, r1, d0
 80062bc:	4b5f      	ldr	r3, [pc, #380]	; (800643c <get_Straj+0xa0c>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7fa f9a1 	bl	8000608 <__aeabi_dmul>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <get_Straj+0xa10>)
 80062d4:	f7fa fac2 	bl	800085c <__aeabi_ddiv>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 ffda 	bl	8000298 <__aeabi_dsub>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4956      	ldr	r1, [pc, #344]	; (8006444 <get_Straj+0xa14>)
 80062ea:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 80062ee:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <get_Straj+0x9f8>)
 80062f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062f4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80062f8:	f7f9 ffce 	bl	8000298 <__aeabi_dsub>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	ec43 2b17 	vmov	d7, r2, r3
 8006304:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8006420 <get_Straj+0x9f0>
 8006308:	eeb0 0a47 	vmov.f32	s0, s14
 800630c:	eef0 0a67 	vmov.f32	s1, s15
 8006310:	f008 fd16 	bl	800ed40 <pow>
 8006314:	ec51 0b10 	vmov	r0, r1, d0
 8006318:	4b48      	ldr	r3, [pc, #288]	; (800643c <get_Straj+0xa0c>)
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f7fa f973 	bl	8000608 <__aeabi_dmul>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006332:	f7fa fa93 	bl	800085c <__aeabi_ddiv>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4b3c      	ldr	r3, [pc, #240]	; (8006430 <get_Straj+0xa00>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7f9 ffaa 	bl	800029c <__adddf3>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	493e      	ldr	r1, [pc, #248]	; (8006448 <get_Straj+0xa18>)
 800634e:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmin*(Ta-t);
 8006352:	4b3a      	ldr	r3, [pc, #232]	; (800643c <get_Straj+0xa0c>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800635c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <get_Straj+0x9f8>)
 8006366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800636a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800636e:	f7f9 ff93 	bl	8000298 <__aeabi_dsub>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800637a:	f7fa f945 	bl	8000608 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4932      	ldr	r1, [pc, #200]	; (800644c <get_Straj+0xa1c>)
 8006384:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmin;
 8006388:	4b2c      	ldr	r3, [pc, #176]	; (800643c <get_Straj+0xa0c>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	4930      	ldr	r1, [pc, #192]	; (8006450 <get_Straj+0xa20>)
 8006390:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006394:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <get_Straj+0xa24>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8530 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <get_Straj+0xa14>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80063a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063b0:	4b24      	ldr	r3, [pc, #144]	; (8006444 <get_Straj+0xa14>)
 80063b2:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80063b6:	ed83 7b00 	vstr	d7, [r3]
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <get_Straj+0xa18>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063cc:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <get_Straj+0xa18>)
 80063ce:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80063d2:	ed83 7b00 	vstr	d7, [r3]
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <get_Straj+0xa1c>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80063e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063e8:	4b18      	ldr	r3, [pc, #96]	; (800644c <get_Straj+0xa1c>)
 80063ea:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80063ee:	ed83 7b00 	vstr	d7, [r3]
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <get_Straj+0xa20>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80063fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <get_Straj+0xa20>)
 8006406:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800640a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <get_Straj+0xa24>)
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006414:	f000 bcf3 	b.w	8006dfe <get_Straj+0x13ce>
 8006418:	00000000 	.word	0x00000000
 800641c:	40080000 	.word	0x40080000
 8006420:	00000000 	.word	0x00000000
 8006424:	40000000 	.word	0x40000000
 8006428:	20000868 	.word	0x20000868
 800642c:	20000880 	.word	0x20000880
 8006430:	20000858 	.word	0x20000858
 8006434:	20000018 	.word	0x20000018
 8006438:	200008a0 	.word	0x200008a0
 800643c:	20000708 	.word	0x20000708
 8006440:	40180000 	.word	0x40180000
 8006444:	200006e8 	.word	0x200006e8
 8006448:	200006f0 	.word	0x200006f0
 800644c:	200006f8 	.word	0x200006f8
 8006450:	20000700 	.word	0x20000700
 8006454:	20000840 	.word	0x20000840
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <get_Straj+0xb90>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006462:	f7fa fb61 	bl	8000b28 <__aeabi_dcmpgt>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80bd 	beq.w	80065e8 <get_Straj+0xbb8>
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <get_Straj+0xb90>)
 8006470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006474:	4b53      	ldr	r3, [pc, #332]	; (80065c4 <get_Straj+0xb94>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7f9 ff0f 	bl	800029c <__adddf3>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006486:	f7fa fb3b 	bl	8000b00 <__aeabi_dcmple>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80ab 	beq.w	80065e8 <get_Straj+0xbb8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8006492:	4b4d      	ldr	r3, [pc, #308]	; (80065c8 <get_Straj+0xb98>)
 8006494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006498:	4b4c      	ldr	r3, [pc, #304]	; (80065cc <get_Straj+0xb9c>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7f9 fefd 	bl	800029c <__adddf3>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <get_Straj+0xb90>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f7fa f8aa 	bl	8000608 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064c4:	f7fa f9ca 	bl	800085c <__aeabi_ddiv>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4610      	mov	r0, r2
 80064ce:	4619      	mov	r1, r3
 80064d0:	4b3f      	ldr	r3, [pc, #252]	; (80065d0 <get_Straj+0xba0>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 fee1 	bl	800029c <__adddf3>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4614      	mov	r4, r2
 80064e0:	461d      	mov	r5, r3
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <get_Straj+0xb90>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80064ec:	f7f9 fed4 	bl	8000298 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	4b33      	ldr	r3, [pc, #204]	; (80065c8 <get_Straj+0xb98>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa f883 	bl	8000608 <__aeabi_dmul>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f7f9 fec7 	bl	800029c <__adddf3>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4930      	ldr	r1, [pc, #192]	; (80065d4 <get_Straj+0xba4>)
 8006514:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim;
 8006518:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <get_Straj+0xb98>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	492e      	ldr	r1, [pc, #184]	; (80065d8 <get_Straj+0xba8>)
 8006520:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8006524:	492d      	ldr	r1, [pc, #180]	; (80065dc <get_Straj+0xbac>)
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006532:	492b      	ldr	r1, [pc, #172]	; (80065e0 <get_Straj+0xbb0>)
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <get_Straj+0xbb4>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 845a 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800654a:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <get_Straj+0xba4>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <get_Straj+0xba4>)
 800655e:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8006562:	ed83 7b00 	vstr	d7, [r3]
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <get_Straj+0xba8>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006570:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006578:	4b17      	ldr	r3, [pc, #92]	; (80065d8 <get_Straj+0xba8>)
 800657a:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800657e:	ed83 7b00 	vstr	d7, [r3]
 8006582:	4b16      	ldr	r3, [pc, #88]	; (80065dc <get_Straj+0xbac>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800658c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <get_Straj+0xbac>)
 8006596:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800659a:	ed83 7b00 	vstr	d7, [r3]
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <get_Straj+0xbb0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	67ba      	str	r2, [r7, #120]	; 0x78
 80065a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <get_Straj+0xbb0>)
 80065ae:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80065b2:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <get_Straj+0xbb4>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80065bc:	f000 bc1f 	b.w	8006dfe <get_Straj+0x13ce>
 80065c0:	20000868 	.word	0x20000868
 80065c4:	20000878 	.word	0x20000878
 80065c8:	20000858 	.word	0x20000858
 80065cc:	20000018 	.word	0x20000018
 80065d0:	200008a0 	.word	0x200008a0
 80065d4:	200006e8 	.word	0x200006e8
 80065d8:	200006f0 	.word	0x200006f0
 80065dc:	200006f8 	.word	0x200006f8
 80065e0:	20000700 	.word	0x20000700
 80065e4:	20000840 	.word	0x20000840
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 80065e8:	4ba9      	ldr	r3, [pc, #676]	; (8006890 <get_Straj+0xe60>)
 80065ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065ee:	4ba9      	ldr	r3, [pc, #676]	; (8006894 <get_Straj+0xe64>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f7f9 fe50 	bl	8000298 <__aeabi_dsub>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006600:	f7fa fa88 	bl	8000b14 <__aeabi_dcmpge>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 815e 	beq.w	80068c8 <get_Straj+0xe98>
 800660c:	4ba0      	ldr	r3, [pc, #640]	; (8006890 <get_Straj+0xe60>)
 800660e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006612:	4ba0      	ldr	r3, [pc, #640]	; (8006894 <get_Straj+0xe64>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 fe3e 	bl	8000298 <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	4b9c      	ldr	r3, [pc, #624]	; (8006898 <get_Straj+0xe68>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fe37 	bl	800029c <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006636:	f7fa fa63 	bl	8000b00 <__aeabi_dcmple>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8143 	beq.w	80068c8 <get_Straj+0xe98>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8006642:	4b96      	ldr	r3, [pc, #600]	; (800689c <get_Straj+0xe6c>)
 8006644:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006648:	4b95      	ldr	r3, [pc, #596]	; (80068a0 <get_Straj+0xe70>)
 800664a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800664e:	4b95      	ldr	r3, [pc, #596]	; (80068a4 <get_Straj+0xe74>)
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7f9 fe22 	bl	800029c <__adddf3>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4610      	mov	r0, r2
 800665e:	4619      	mov	r1, r3
 8006660:	4b8c      	ldr	r3, [pc, #560]	; (8006894 <get_Straj+0xe64>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ffcf 	bl	8000608 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800667a:	f7fa f8ef 	bl	800085c <__aeabi_ddiv>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7f9 fe07 	bl	8000298 <__aeabi_dsub>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4614      	mov	r4, r2
 8006690:	461d      	mov	r5, r3
 8006692:	4b7f      	ldr	r3, [pc, #508]	; (8006890 <get_Straj+0xe60>)
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800669c:	f7f9 fdfc 	bl	8000298 <__aeabi_dsub>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	4b7a      	ldr	r3, [pc, #488]	; (8006894 <get_Straj+0xe64>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 fdf5 	bl	800029c <__adddf3>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4b79      	ldr	r3, [pc, #484]	; (80068a0 <get_Straj+0xe70>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 ffa2 	bl	8000608 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7f9 fde6 	bl	800029c <__adddf3>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	4b6d      	ldr	r3, [pc, #436]	; (8006890 <get_Straj+0xe60>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80066e2:	f7f9 fdd9 	bl	8000298 <__aeabi_dsub>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	4b69      	ldr	r3, [pc, #420]	; (8006894 <get_Straj+0xe64>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fdd2 	bl	800029c <__adddf3>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	ec43 2b17 	vmov	d7, r2, r3
 8006700:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8006880 <get_Straj+0xe50>
 8006704:	eeb0 0a47 	vmov.f32	s0, s14
 8006708:	eef0 0a67 	vmov.f32	s1, s15
 800670c:	f008 fb18 	bl	800ed40 <pow>
 8006710:	ec51 0b10 	vmov	r0, r1, d0
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <get_Straj+0xe78>)
 800671a:	f7fa f89f 	bl	800085c <__aeabi_ddiv>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	4b61      	ldr	r3, [pc, #388]	; (80068ac <get_Straj+0xe7c>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 ff6c 	bl	8000608 <__aeabi_dmul>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7f9 fdae 	bl	8000298 <__aeabi_dsub>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	495b      	ldr	r1, [pc, #364]	; (80068b0 <get_Straj+0xe80>)
 8006742:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8006746:	4b56      	ldr	r3, [pc, #344]	; (80068a0 <get_Straj+0xe70>)
 8006748:	e9d3 4500 	ldrd	r4, r5, [r3]
 800674c:	4b50      	ldr	r3, [pc, #320]	; (8006890 <get_Straj+0xe60>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006756:	f7f9 fd9f 	bl	8000298 <__aeabi_dsub>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	4b4c      	ldr	r3, [pc, #304]	; (8006894 <get_Straj+0xe64>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 fd98 	bl	800029c <__adddf3>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	ec43 2b17 	vmov	d7, r2, r3
 8006774:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8006888 <get_Straj+0xe58>
 8006778:	eeb0 0a47 	vmov.f32	s0, s14
 800677c:	eef0 0a67 	vmov.f32	s1, s15
 8006780:	f008 fade 	bl	800ed40 <pow>
 8006784:	ec51 0b10 	vmov	r0, r1, d0
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006790:	f7fa f864 	bl	800085c <__aeabi_ddiv>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	4b43      	ldr	r3, [pc, #268]	; (80068ac <get_Straj+0xe7c>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 ff31 	bl	8000608 <__aeabi_dmul>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4620      	mov	r0, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7f9 fd73 	bl	8000298 <__aeabi_dsub>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	493f      	ldr	r1, [pc, #252]	; (80068b4 <get_Straj+0xe84>)
 80067b8:	e9c1 2300 	strd	r2, r3, [r1]
        qdd=-jmax*(t-T+Td);
 80067bc:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <get_Straj+0xe7c>)
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	673a      	str	r2, [r7, #112]	; 0x70
 80067c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	677b      	str	r3, [r7, #116]	; 0x74
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <get_Straj+0xe60>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80067d4:	f7f9 fd60 	bl	8000298 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	4b2c      	ldr	r3, [pc, #176]	; (8006894 <get_Straj+0xe64>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 fd59 	bl	800029c <__adddf3>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80067f2:	f7f9 ff09 	bl	8000608 <__aeabi_dmul>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	492f      	ldr	r1, [pc, #188]	; (80068b8 <get_Straj+0xe88>)
 80067fc:	e9c1 2300 	strd	r2, r3, [r1]
        qddd=jmin;
 8006800:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <get_Straj+0xe8c>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	492e      	ldr	r1, [pc, #184]	; (80068c0 <get_Straj+0xe90>)
 8006808:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800680c:	4b2d      	ldr	r3, [pc, #180]	; (80068c4 <get_Straj+0xe94>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 82f4 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006816:	4b26      	ldr	r3, [pc, #152]	; (80068b0 <get_Straj+0xe80>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	66ba      	str	r2, [r7, #104]	; 0x68
 800681e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006824:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <get_Straj+0xe80>)
 8006826:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800682a:	ed83 7b00 	vstr	d7, [r3]
 800682e:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <get_Straj+0xe84>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	663a      	str	r2, [r7, #96]	; 0x60
 8006836:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800683a:	667b      	str	r3, [r7, #100]	; 0x64
 800683c:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <get_Straj+0xe84>)
 800683e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8006842:	ed83 7b00 	vstr	d7, [r3]
 8006846:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <get_Straj+0xe88>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	65ba      	str	r2, [r7, #88]	; 0x58
 800684e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <get_Straj+0xe88>)
 8006856:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800685a:	ed83 7b00 	vstr	d7, [r3]
 800685e:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <get_Straj+0xe90>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	653a      	str	r2, [r7, #80]	; 0x50
 8006866:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800686a:	657b      	str	r3, [r7, #84]	; 0x54
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <get_Straj+0xe90>)
 800686e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006872:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006876:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <get_Straj+0xe94>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800687c:	e2bf      	b.n	8006dfe <get_Straj+0x13ce>
 800687e:	bf00      	nop
 8006880:	00000000 	.word	0x00000000
 8006884:	40080000 	.word	0x40080000
 8006888:	00000000 	.word	0x00000000
 800688c:	40000000 	.word	0x40000000
 8006890:	20000860 	.word	0x20000860
 8006894:	20000870 	.word	0x20000870
 8006898:	20000888 	.word	0x20000888
 800689c:	200008a8 	.word	0x200008a8
 80068a0:	20000858 	.word	0x20000858
 80068a4:	20000718 	.word	0x20000718
 80068a8:	40180000 	.word	0x40180000
 80068ac:	20000008 	.word	0x20000008
 80068b0:	200006e8 	.word	0x200006e8
 80068b4:	200006f0 	.word	0x200006f0
 80068b8:	200006f8 	.word	0x200006f8
 80068bc:	20000708 	.word	0x20000708
 80068c0:	20000700 	.word	0x20000700
 80068c4:	20000840 	.word	0x20000840
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 80068c8:	4bbb      	ldr	r3, [pc, #748]	; (8006bb8 <get_Straj+0x1188>)
 80068ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068ce:	4bbb      	ldr	r3, [pc, #748]	; (8006bbc <get_Straj+0x118c>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f7f9 fce0 	bl	8000298 <__aeabi_dsub>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4610      	mov	r0, r2
 80068de:	4619      	mov	r1, r3
 80068e0:	4bb7      	ldr	r3, [pc, #732]	; (8006bc0 <get_Straj+0x1190>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fcd9 	bl	800029c <__adddf3>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80068f2:	f7fa f919 	bl	8000b28 <__aeabi_dcmpgt>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8190 	beq.w	8006c1e <get_Straj+0x11ee>
 80068fe:	4bae      	ldr	r3, [pc, #696]	; (8006bb8 <get_Straj+0x1188>)
 8006900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006904:	4bae      	ldr	r3, [pc, #696]	; (8006bc0 <get_Straj+0x1190>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f7f9 fcc5 	bl	8000298 <__aeabi_dsub>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006916:	f7fa f8f3 	bl	8000b00 <__aeabi_dcmple>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 817e 	beq.w	8006c1e <get_Straj+0x11ee>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8006922:	4ba8      	ldr	r3, [pc, #672]	; (8006bc4 <get_Straj+0x1194>)
 8006924:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006928:	4ba7      	ldr	r3, [pc, #668]	; (8006bc8 <get_Straj+0x1198>)
 800692a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800692e:	4ba7      	ldr	r3, [pc, #668]	; (8006bcc <get_Straj+0x119c>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fcb2 	bl	800029c <__adddf3>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	4b9e      	ldr	r3, [pc, #632]	; (8006bbc <get_Straj+0x118c>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fe5f 	bl	8000608 <__aeabi_dmul>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800695a:	f7f9 ff7f 	bl	800085c <__aeabi_ddiv>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4620      	mov	r0, r4
 8006964:	4629      	mov	r1, r5
 8006966:	f7f9 fc97 	bl	8000298 <__aeabi_dsub>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4614      	mov	r4, r2
 8006970:	461d      	mov	r5, r3
 8006972:	4b91      	ldr	r3, [pc, #580]	; (8006bb8 <get_Straj+0x1188>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800697c:	f7f9 fc8c 	bl	8000298 <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	4b8c      	ldr	r3, [pc, #560]	; (8006bbc <get_Straj+0x118c>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fc85 	bl	800029c <__adddf3>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4610      	mov	r0, r2
 8006998:	4619      	mov	r1, r3
 800699a:	4b8b      	ldr	r3, [pc, #556]	; (8006bc8 <get_Straj+0x1198>)
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f7f9 fe32 	bl	8000608 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7f9 fc76 	bl	800029c <__adddf3>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 80069b8:	4b85      	ldr	r3, [pc, #532]	; (8006bd0 <get_Straj+0x11a0>)
 80069ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	4b84      	ldr	r3, [pc, #528]	; (8006bd4 <get_Straj+0x11a4>)
 80069c4:	f7f9 ff4a 	bl	800085c <__aeabi_ddiv>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4692      	mov	sl, r2
 80069ce:	469b      	mov	fp, r3
 80069d0:	4b79      	ldr	r3, [pc, #484]	; (8006bb8 <get_Straj+0x1188>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80069da:	f7f9 fc5d 	bl	8000298 <__aeabi_dsub>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	4b75      	ldr	r3, [pc, #468]	; (8006bbc <get_Straj+0x118c>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	ec43 2b17 	vmov	d7, r2, r3
 80069f8:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8006bb0 <get_Straj+0x1180>
 80069fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006a00:	eef0 0a67 	vmov.f32	s1, s15
 8006a04:	f008 f99c 	bl	800ed40 <pow>
 8006a08:	ec51 0b10 	vmov	r0, r1, d0
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	4b71      	ldr	r3, [pc, #452]	; (8006bd8 <get_Straj+0x11a8>)
 8006a12:	f7f9 fdf9 	bl	8000608 <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4690      	mov	r8, r2
 8006a1c:	4699      	mov	r9, r3
 8006a1e:	4b68      	ldr	r3, [pc, #416]	; (8006bc0 <get_Straj+0x1190>)
 8006a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	4b6b      	ldr	r3, [pc, #428]	; (8006bd8 <get_Straj+0x11a8>)
 8006a2a:	f7f9 fded 	bl	8000608 <__aeabi_dmul>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4614      	mov	r4, r2
 8006a34:	461d      	mov	r5, r3
 8006a36:	4b60      	ldr	r3, [pc, #384]	; (8006bb8 <get_Straj+0x1188>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006a40:	f7f9 fc2a 	bl	8000298 <__aeabi_dsub>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4b5b      	ldr	r3, [pc, #364]	; (8006bbc <get_Straj+0x118c>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fc23 	bl	800029c <__adddf3>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7f9 fdd3 	bl	8000608 <__aeabi_dmul>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4640      	mov	r0, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f7f9 fc15 	bl	8000298 <__aeabi_dsub>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	461d      	mov	r5, r3
 8006a76:	4b52      	ldr	r3, [pc, #328]	; (8006bc0 <get_Straj+0x1190>)
 8006a78:	ed93 7b00 	vldr	d7, [r3]
 8006a7c:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8006bb0 <get_Straj+0x1180>
 8006a80:	eeb0 0a47 	vmov.f32	s0, s14
 8006a84:	eef0 0a67 	vmov.f32	s1, s15
 8006a88:	f008 f95a 	bl	800ed40 <pow>
 8006a8c:	ec53 2b10 	vmov	r2, r3, d0
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7f9 fc02 	bl	800029c <__adddf3>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	4659      	mov	r1, fp
 8006aa0:	f7f9 fdb2 	bl	8000608 <__aeabi_dmul>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006aac:	f7f9 fbf6 	bl	800029c <__adddf3>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4949      	ldr	r1, [pc, #292]	; (8006bdc <get_Straj+0x11ac>)
 8006ab6:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8006aba:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <get_Straj+0x1188>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006ac4:	f7f9 fbe8 	bl	8000298 <__aeabi_dsub>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4b3a      	ldr	r3, [pc, #232]	; (8006bbc <get_Straj+0x118c>)
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f7f9 fbe1 	bl	800029c <__adddf3>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	4b37      	ldr	r3, [pc, #220]	; (8006bc0 <get_Straj+0x1190>)
 8006ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006af0:	f7f9 feb4 	bl	800085c <__aeabi_ddiv>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fbcc 	bl	8000298 <__aeabi_dsub>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	4b31      	ldr	r3, [pc, #196]	; (8006bd0 <get_Straj+0x11a0>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fd7b 	bl	8000608 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4610      	mov	r0, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <get_Straj+0x1198>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fbbc 	bl	800029c <__adddf3>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	492d      	ldr	r1, [pc, #180]	; (8006be0 <get_Straj+0x11b0>)
 8006b2a:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*Tj2;
 8006b2e:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <get_Straj+0x11b4>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b36:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <get_Straj+0x1190>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b46:	f7f9 fd5f 	bl	8000608 <__aeabi_dmul>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4926      	ldr	r1, [pc, #152]	; (8006be8 <get_Straj+0x11b8>)
 8006b50:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006b54:	4925      	ldr	r1, [pc, #148]	; (8006bec <get_Straj+0x11bc>)
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006b62:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <get_Straj+0x11c0>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8149 	beq.w	8006dfe <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <get_Straj+0x11ac>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	643a      	str	r2, [r7, #64]	; 0x40
 8006b74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b78:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7a:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <get_Straj+0x11ac>)
 8006b7c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006b80:	ed83 7b00 	vstr	d7, [r3]
 8006b84:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <get_Straj+0x11b0>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <get_Straj+0x11b0>)
 8006b94:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006b98:	ed83 7b00 	vstr	d7, [r3]
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <get_Straj+0x11b8>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8006baa:	e023      	b.n	8006bf4 <get_Straj+0x11c4>
 8006bac:	f3af 8000 	nop.w
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	40000000 	.word	0x40000000
 8006bb8:	20000860 	.word	0x20000860
 8006bbc:	20000870 	.word	0x20000870
 8006bc0:	20000888 	.word	0x20000888
 8006bc4:	200008a8 	.word	0x200008a8
 8006bc8:	20000858 	.word	0x20000858
 8006bcc:	20000718 	.word	0x20000718
 8006bd0:	20000850 	.word	0x20000850
 8006bd4:	40180000 	.word	0x40180000
 8006bd8:	40080000 	.word	0x40080000
 8006bdc:	200006e8 	.word	0x200006e8
 8006be0:	200006f0 	.word	0x200006f0
 8006be4:	20000008 	.word	0x20000008
 8006be8:	200006f8 	.word	0x200006f8
 8006bec:	20000700 	.word	0x20000700
 8006bf0:	20000840 	.word	0x20000840
 8006bf4:	4b8e      	ldr	r3, [pc, #568]	; (8006e30 <get_Straj+0x1400>)
 8006bf6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006bfa:	ed83 7b00 	vstr	d7, [r3]
 8006bfe:	4b8d      	ldr	r3, [pc, #564]	; (8006e34 <get_Straj+0x1404>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0c:	4b89      	ldr	r3, [pc, #548]	; (8006e34 <get_Straj+0x1404>)
 8006c0e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006c12:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006c16:	4b88      	ldr	r3, [pc, #544]	; (8006e38 <get_Straj+0x1408>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006c1c:	e0ef      	b.n	8006dfe <get_Straj+0x13ce>
        }

    } else if (t>T-Tj2 && t<=T){
 8006c1e:	4b87      	ldr	r3, [pc, #540]	; (8006e3c <get_Straj+0x140c>)
 8006c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c24:	4b86      	ldr	r3, [pc, #536]	; (8006e40 <get_Straj+0x1410>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	f7f9 fb35 	bl	8000298 <__aeabi_dsub>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006c36:	f7f9 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80de 	beq.w	8006dfe <get_Straj+0x13ce>
 8006c42:	4b7e      	ldr	r3, [pc, #504]	; (8006e3c <get_Straj+0x140c>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006c4c:	f7f9 ff58 	bl	8000b00 <__aeabi_dcmple>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80d3 	beq.w	8006dfe <get_Straj+0x13ce>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8006c58:	4b7a      	ldr	r3, [pc, #488]	; (8006e44 <get_Straj+0x1414>)
 8006c5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006c5e:	4b77      	ldr	r3, [pc, #476]	; (8006e3c <get_Straj+0x140c>)
 8006c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c64:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006c68:	f7f9 fb16 	bl	8000298 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	4b74      	ldr	r3, [pc, #464]	; (8006e48 <get_Straj+0x1418>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fcc5 	bl	8000608 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4620      	mov	r0, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7f9 fb07 	bl	8000298 <__aeabi_dsub>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4614      	mov	r4, r2
 8006c90:	461d      	mov	r5, r3
 8006c92:	4b6a      	ldr	r3, [pc, #424]	; (8006e3c <get_Straj+0x140c>)
 8006c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c98:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006c9c:	f7f9 fafc 	bl	8000298 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	ec43 2b17 	vmov	d7, r2, r3
 8006ca8:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8006e20 <get_Straj+0x13f0>
 8006cac:	eeb0 0a47 	vmov.f32	s0, s14
 8006cb0:	eef0 0a67 	vmov.f32	s1, s15
 8006cb4:	f008 f844 	bl	800ed40 <pow>
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	4b62      	ldr	r3, [pc, #392]	; (8006e4c <get_Straj+0x141c>)
 8006cc2:	f7f9 fdcb 	bl	800085c <__aeabi_ddiv>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4b60      	ldr	r3, [pc, #384]	; (8006e50 <get_Straj+0x1420>)
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f7f9 fc98 	bl	8000608 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 fada 	bl	8000298 <__aeabi_dsub>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	495a      	ldr	r1, [pc, #360]	; (8006e54 <get_Straj+0x1424>)
 8006cea:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vf+jmax*(pow(T-t,2))/2;
 8006cee:	4b53      	ldr	r3, [pc, #332]	; (8006e3c <get_Straj+0x140c>)
 8006cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cf4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006cf8:	f7f9 face 	bl	8000298 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	ec43 2b17 	vmov	d7, r2, r3
 8006d04:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8006e28 <get_Straj+0x13f8>
 8006d08:	eeb0 0a47 	vmov.f32	s0, s14
 8006d0c:	eef0 0a67 	vmov.f32	s1, s15
 8006d10:	f008 f816 	bl	800ed40 <pow>
 8006d14:	ec51 0b10 	vmov	r0, r1, d0
 8006d18:	4b4d      	ldr	r3, [pc, #308]	; (8006e50 <get_Straj+0x1420>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fc73 	bl	8000608 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d32:	f7f9 fd93 	bl	800085c <__aeabi_ddiv>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4b42      	ldr	r3, [pc, #264]	; (8006e48 <get_Straj+0x1418>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7f9 faaa 	bl	800029c <__adddf3>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4942      	ldr	r1, [pc, #264]	; (8006e58 <get_Straj+0x1428>)
 8006d4e:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*(T-t);
 8006d52:	4b3f      	ldr	r3, [pc, #252]	; (8006e50 <get_Straj+0x1420>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	623a      	str	r2, [r7, #32]
 8006d5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <get_Straj+0x140c>)
 8006d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d66:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d6a:	f7f9 fa95 	bl	8000298 <__aeabi_dsub>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006d76:	f7f9 fc47 	bl	8000608 <__aeabi_dmul>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	492c      	ldr	r1, [pc, #176]	; (8006e30 <get_Straj+0x1400>)
 8006d80:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <get_Straj+0x1420>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	492a      	ldr	r1, [pc, #168]	; (8006e34 <get_Straj+0x1404>)
 8006d8c:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006d90:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <get_Straj+0x1408>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d032      	beq.n	8006dfe <get_Straj+0x13ce>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006d98:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <get_Straj+0x1424>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	61ba      	str	r2, [r7, #24]
 8006da0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <get_Straj+0x1424>)
 8006da8:	ed97 7b06 	vldr	d7, [r7, #24]
 8006dac:	ed83 7b00 	vstr	d7, [r3]
 8006db0:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <get_Straj+0x1428>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	613a      	str	r2, [r7, #16]
 8006db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <get_Straj+0x1428>)
 8006dc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8006dc4:	ed83 7b00 	vstr	d7, [r3]
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <get_Straj+0x1400>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	60ba      	str	r2, [r7, #8]
 8006dd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <get_Straj+0x1400>)
 8006dd8:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ddc:	ed83 7b00 	vstr	d7, [r3]
 8006de0:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <get_Straj+0x1404>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	603a      	str	r2, [r7, #0]
 8006de8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <get_Straj+0x1404>)
 8006df0:	ed97 7b00 	vldr	d7, [r7]
 8006df4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006df8:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <get_Straj+0x1408>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <get_Straj+0x1428>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e08:	eeb0 0a47 	vmov.f32	s0, s14
 8006e0c:	eef0 0a67 	vmov.f32	s1, s15
 8006e10:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8006e14:	46bd      	mov	sp, r7
 8006e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1a:	bf00      	nop
 8006e1c:	f3af 8000 	nop.w
 8006e20:	00000000 	.word	0x00000000
 8006e24:	40080000 	.word	0x40080000
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	40000000 	.word	0x40000000
 8006e30:	200006f8 	.word	0x200006f8
 8006e34:	20000700 	.word	0x20000700
 8006e38:	20000840 	.word	0x20000840
 8006e3c:	20000860 	.word	0x20000860
 8006e40:	20000888 	.word	0x20000888
 8006e44:	200008a8 	.word	0x200008a8
 8006e48:	20000718 	.word	0x20000718
 8006e4c:	40180000 	.word	0x40180000
 8006e50:	20000008 	.word	0x20000008
 8006e54:	200006e8 	.word	0x200006e8
 8006e58:	200006f0 	.word	0x200006f0
 8006e5c:	00000000 	.word	0x00000000

08006e60 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8006e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e64:	b0a6      	sub	sp, #152	; 0x98
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
 8006e6c:	ed87 1b20 	vstr	d1, [r7, #128]	; 0x80
 8006e70:	ed87 2b1e 	vstr	d2, [r7, #120]	; 0x78
 8006e74:	ed87 3b1c 	vstr	d3, [r7, #112]	; 0x70
 8006e78:	ed87 4b1a 	vstr	d4, [r7, #104]	; 0x68
 8006e7c:	ed87 5b18 	vstr	d5, [r7, #96]	; 0x60
 8006e80:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 8006e84:	6578      	str	r0, [r7, #84]	; 0x54

	jmin = -jmax;
 8006e86:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006e8e:	4bae      	ldr	r3, [pc, #696]	; (8007148 <update_ScurveTraj+0x2e8>)
 8006e90:	e9c3 4500 	strd	r4, r5, [r3]
	amin = -amax;
 8006e94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e98:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006e9c:	4bab      	ldr	r3, [pc, #684]	; (800714c <update_ScurveTraj+0x2ec>)
 8006e9e:	e9c3 1200 	strd	r1, r2, [r3]
	vmin = -vmax;
 8006ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eae:	4ba8      	ldr	r3, [pc, #672]	; (8007150 <update_ScurveTraj+0x2f0>)
 8006eb0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006eb4:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8006eb8:	49a6      	ldr	r1, [pc, #664]	; (8007154 <update_ScurveTraj+0x2f4>)
 8006eba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006ebe:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8006ec2:	49a5      	ldr	r1, [pc, #660]	; (8007158 <update_ScurveTraj+0x2f8>)
 8006ec4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006ec8:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8006ecc:	4ba2      	ldr	r3, [pc, #648]	; (8007158 <update_ScurveTraj+0x2f8>)
 8006ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ed2:	4ba0      	ldr	r3, [pc, #640]	; (8007154 <update_ScurveTraj+0x2f4>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f7f9 fe08 	bl	8000aec <__aeabi_dcmplt>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d061      	beq.n	8006fa6 <update_ScurveTraj+0x146>

		flagInv = true;
 8006ee2:	4a9e      	ldr	r2, [pc, #632]	; (800715c <update_ScurveTraj+0x2fc>)
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	7013      	strb	r3, [r2, #0]

		qi = -qi;
 8006ee8:	4b9a      	ldr	r3, [pc, #616]	; (8007154 <update_ScurveTraj+0x2f4>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4690      	mov	r8, r2
 8006ef0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006ef4:	4b97      	ldr	r3, [pc, #604]	; (8007154 <update_ScurveTraj+0x2f4>)
 8006ef6:	e9c3 8900 	strd	r8, r9, [r3]
		qf = -qf;
 8006efa:	4b97      	ldr	r3, [pc, #604]	; (8007158 <update_ScurveTraj+0x2f8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	4692      	mov	sl, r2
 8006f02:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8006f06:	4b94      	ldr	r3, [pc, #592]	; (8007158 <update_ScurveTraj+0x2f8>)
 8006f08:	e9c3 ab00 	strd	sl, fp, [r3]
		vi = -vi;
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f1c:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
		vf = -vf;
 8006f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	ed97 7b00 	vldr	d7, [r7]
 8006f30:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70

		vmax = -vmin;
 8006f34:	4b86      	ldr	r3, [pc, #536]	; (8007150 <update_ScurveTraj+0x2f0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	66b9      	str	r1, [r7, #104]	; 0x68
 8006f3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f42:	66fb      	str	r3, [r7, #108]	; 0x6c
		vmin = -vmax;
 8006f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f46:	643b      	str	r3, [r7, #64]	; 0x40
 8006f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f50:	4b7f      	ldr	r3, [pc, #508]	; (8007150 <update_ScurveTraj+0x2f0>)
 8006f52:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006f56:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8006f5a:	4b7c      	ldr	r3, [pc, #496]	; (800714c <update_ScurveTraj+0x2ec>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	6639      	str	r1, [r7, #96]	; 0x60
 8006f64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	667b      	str	r3, [r7, #100]	; 0x64
		amin = -amax;
 8006f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f76:	4b75      	ldr	r3, [pc, #468]	; (800714c <update_ScurveTraj+0x2ec>)
 8006f78:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006f7c:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8006f80:	4b71      	ldr	r3, [pc, #452]	; (8007148 <update_ScurveTraj+0x2e8>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	4611      	mov	r1, r2
 8006f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
		jmin = -jmax;
 8006f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
 8006f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	4b6a      	ldr	r3, [pc, #424]	; (8007148 <update_ScurveTraj+0x2e8>)
 8006f9e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006fa2:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8006fa6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006faa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006fae:	f7f9 f973 	bl	8000298 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fc6:	f7f9 fc49 	bl	800085c <__aeabi_ddiv>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	ec43 2b17 	vmov	d7, r2, r3
 8006fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8006fd6:	eef0 0a67 	vmov.f32	s1, s15
 8006fda:	f007 ff21 	bl	800ee20 <sqrt>
 8006fde:	ec55 4b10 	vmov	r4, r5, d0
 8006fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fe6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006fea:	f7f9 fc37 	bl	800085c <__aeabi_ddiv>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fd79 	bl	8000aec <__aeabi_dcmplt>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01e      	beq.n	800703e <update_ScurveTraj+0x1de>
 8007000:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007004:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007008:	f7f9 f946 	bl	8000298 <__aeabi_dsub>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	623a      	str	r2, [r7, #32]
 8007012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800701c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007020:	f7f9 fc1c 	bl	800085c <__aeabi_ddiv>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	ec43 2b17 	vmov	d7, r2, r3
 800702c:	eeb0 0a47 	vmov.f32	s0, s14
 8007030:	eef0 0a67 	vmov.f32	s1, s15
 8007034:	f007 fef4 	bl	800ee20 <sqrt>
 8007038:	ec53 2b10 	vmov	r2, r3, d0
 800703c:	e007      	b.n	800704e <update_ScurveTraj+0x1ee>
 800703e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007042:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007046:	f7f9 fc09 	bl	800085c <__aeabi_ddiv>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	f7f9 fda9 	bl	8000ba8 <__aeabi_d2f>
 8007056:	4603      	mov	r3, r0
 8007058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


	if (Tjaux<amax/jmax){
 800705c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007060:	4618      	mov	r0, r3
 8007062:	f7f9 fa79 	bl	8000558 <__aeabi_f2d>
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
 800706a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800706e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007072:	f7f9 fbf3 	bl	800085c <__aeabi_ddiv>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 fd35 	bl	8000aec <__aeabi_dcmplt>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <update_ScurveTraj+0x23e>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8007088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800708c:	4618      	mov	r0, r3
 800708e:	f7f9 fa63 	bl	8000558 <__aeabi_f2d>
 8007092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007096:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800709a:	f7f9 fbdf 	bl	800085c <__aeabi_ddiv>
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 800709e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80070a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070a6:	f7f9 f8f7 	bl	8000298 <__aeabi_dsub>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4610      	mov	r0, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070b6:	f7f9 faa7 	bl	8000608 <__aeabi_dmul>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4614      	mov	r4, r2
 80070c0:	461d      	mov	r5, r3
 80070c2:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007140 <update_ScurveTraj+0x2e0>
 80070c6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80070ca:	f007 fe39 	bl	800ed40 <pow>
 80070ce:	ec53 2b10 	vmov	r2, r3, d0
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 fd09 	bl	8000aec <__aeabi_dcmplt>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d043      	beq.n	8007168 <update_ScurveTraj+0x308>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 80070e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80070e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070e8:	f7f9 f8d6 	bl	8000298 <__aeabi_dsub>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	61ba      	str	r2, [r7, #24]
 80070f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007100:	f7f9 fbac 	bl	800085c <__aeabi_ddiv>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	ec43 2b17 	vmov	d7, r2, r3
 800710c:	eeb0 0a47 	vmov.f32	s0, s14
 8007110:	eef0 0a67 	vmov.f32	s1, s15
 8007114:	f007 fe84 	bl	800ee20 <sqrt>
 8007118:	eeb0 7a40 	vmov.f32	s14, s0
 800711c:	eef0 7a60 	vmov.f32	s15, s1
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <update_ScurveTraj+0x300>)
 8007122:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8007126:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <update_ScurveTraj+0x300>)
 8007128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	f7f9 f8b4 	bl	800029c <__adddf3>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	490a      	ldr	r1, [pc, #40]	; (8007164 <update_ScurveTraj+0x304>)
 800713a:	e9c1 2300 	strd	r2, r3, [r1]
 800713e:	e03a      	b.n	80071b6 <update_ScurveTraj+0x356>
 8007140:	00000000 	.word	0x00000000
 8007144:	40000000 	.word	0x40000000
 8007148:	20000708 	.word	0x20000708
 800714c:	20000720 	.word	0x20000720
 8007150:	20000710 	.word	0x20000710
 8007154:	200008a0 	.word	0x200008a0
 8007158:	200008a8 	.word	0x200008a8
 800715c:	20000840 	.word	0x20000840
 8007160:	20000880 	.word	0x20000880
 8007164:	20000868 	.word	0x20000868
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8007168:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800716c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007170:	f7f9 fb74 	bl	800085c <__aeabi_ddiv>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4939      	ldr	r1, [pc, #228]	; (8007260 <update_ScurveTraj+0x400>)
 800717a:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=Tj1+(vmax-vi)/amax;
 800717e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007186:	f7f9 f887 	bl	8000298 <__aeabi_dsub>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007196:	f7f9 fb61 	bl	800085c <__aeabi_ddiv>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	4b2f      	ldr	r3, [pc, #188]	; (8007260 <update_ScurveTraj+0x400>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 f878 	bl	800029c <__adddf3>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	492c      	ldr	r1, [pc, #176]	; (8007264 <update_ScurveTraj+0x404>)
 80071b2:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 80071b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80071ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071be:	f7f9 f86b 	bl	8000298 <__aeabi_dsub>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071ce:	f7f9 fa1b 	bl	8000608 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007258 <update_ScurveTraj+0x3f8>
 80071de:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80071e2:	f007 fdad 	bl	800ed40 <pow>
 80071e6:	ec53 2b10 	vmov	r2, r3, d0
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	f7f9 fc7d 	bl	8000aec <__aeabi_dcmplt>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03b      	beq.n	8007270 <update_ScurveTraj+0x410>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80071f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80071fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007200:	f7f9 f84a 	bl	8000298 <__aeabi_dsub>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	613a      	str	r2, [r7, #16]
 800720a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007214:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007218:	f7f9 fb20 	bl	800085c <__aeabi_ddiv>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	ec43 2b17 	vmov	d7, r2, r3
 8007224:	eeb0 0a47 	vmov.f32	s0, s14
 8007228:	eef0 0a67 	vmov.f32	s1, s15
 800722c:	f007 fdf8 	bl	800ee20 <sqrt>
 8007230:	eeb0 7a40 	vmov.f32	s14, s0
 8007234:	eef0 7a60 	vmov.f32	s15, s1
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <update_ScurveTraj+0x408>)
 800723a:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 800723e:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <update_ScurveTraj+0x408>)
 8007240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	f7f9 f828 	bl	800029c <__adddf3>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4906      	ldr	r1, [pc, #24]	; (800726c <update_ScurveTraj+0x40c>)
 8007252:	e9c1 2300 	strd	r2, r3, [r1]
 8007256:	e032      	b.n	80072be <update_ScurveTraj+0x45e>
 8007258:	00000000 	.word	0x00000000
 800725c:	40000000 	.word	0x40000000
 8007260:	20000880 	.word	0x20000880
 8007264:	20000868 	.word	0x20000868
 8007268:	20000888 	.word	0x20000888
 800726c:	20000870 	.word	0x20000870
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8007270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007274:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007278:	f7f9 faf0 	bl	800085c <__aeabi_ddiv>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	49cb      	ldr	r1, [pc, #812]	; (80075b0 <update_ScurveTraj+0x750>)
 8007282:	e9c1 2300 	strd	r2, r3, [r1]
		Td=Tj2+(vmax-vf)/amax;
 8007286:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800728a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800728e:	f7f9 f803 	bl	8000298 <__aeabi_dsub>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4610      	mov	r0, r2
 8007298:	4619      	mov	r1, r3
 800729a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800729e:	f7f9 fadd 	bl	800085c <__aeabi_ddiv>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4610      	mov	r0, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	4bc1      	ldr	r3, [pc, #772]	; (80075b0 <update_ScurveTraj+0x750>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f8 fff4 	bl	800029c <__adddf3>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	49be      	ldr	r1, [pc, #760]	; (80075b4 <update_ScurveTraj+0x754>)
 80072ba:	e9c1 2300 	strd	r2, r3, [r1]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 80072be:	4bbe      	ldr	r3, [pc, #760]	; (80075b8 <update_ScurveTraj+0x758>)
 80072c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072c4:	4bbd      	ldr	r3, [pc, #756]	; (80075bc <update_ScurveTraj+0x75c>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f7f8 ffe5 	bl	8000298 <__aeabi_dsub>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80072da:	f7f9 fabf 	bl	800085c <__aeabi_ddiv>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4614      	mov	r4, r2
 80072e4:	461d      	mov	r5, r3
 80072e6:	4bb6      	ldr	r3, [pc, #728]	; (80075c0 <update_ScurveTraj+0x760>)
 80072e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072f4:	f7f9 fab2 	bl	800085c <__aeabi_ddiv>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4690      	mov	r8, r2
 80072fe:	4699      	mov	r9, r3
 8007300:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007304:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007308:	f7f9 faa8 	bl	800085c <__aeabi_ddiv>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	4baa      	ldr	r3, [pc, #680]	; (80075c4 <update_ScurveTraj+0x764>)
 800731a:	f7f8 ffbf 	bl	800029c <__adddf3>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f8 ffb1 	bl	8000298 <__aeabi_dsub>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	4b9d      	ldr	r3, [pc, #628]	; (80075b4 <update_ScurveTraj+0x754>)
 8007340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800734c:	f7f9 fa86 	bl	800085c <__aeabi_ddiv>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4690      	mov	r8, r2
 8007356:	4699      	mov	r9, r3
 8007358:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800735c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007360:	f7f9 fa7c 	bl	800085c <__aeabi_ddiv>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4610      	mov	r0, r2
 800736a:	4619      	mov	r1, r3
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	4b94      	ldr	r3, [pc, #592]	; (80075c4 <update_ScurveTraj+0x764>)
 8007372:	f7f8 ff93 	bl	800029c <__adddf3>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4640      	mov	r0, r8
 800737c:	4649      	mov	r1, r9
 800737e:	f7f9 f943 	bl	8000608 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f8 ff85 	bl	8000298 <__aeabi_dsub>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	498d      	ldr	r1, [pc, #564]	; (80075c8 <update_ScurveTraj+0x768>)
 8007394:	e9c1 2300 	strd	r2, r3, [r1]

	if (Tv>0){
 8007398:	4b8b      	ldr	r3, [pc, #556]	; (80075c8 <update_ScurveTraj+0x768>)
 800739a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	f7f9 fbbf 	bl	8000b28 <__aeabi_dcmpgt>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 849f 	bne.w	8007cf0 <update_ScurveTraj+0xe90>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 80073b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80073ba:	f7f9 fa4f 	bl	800085c <__aeabi_ddiv>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4982      	ldr	r1, [pc, #520]	; (80075cc <update_ScurveTraj+0x76c>)
 80073c4:	e9c1 2300 	strd	r2, r3, [r1]
		Tj2=Tj1;
 80073c8:	4b80      	ldr	r3, [pc, #512]	; (80075cc <update_ScurveTraj+0x76c>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	4978      	ldr	r1, [pc, #480]	; (80075b0 <update_ScurveTraj+0x750>)
 80073d0:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 80073d4:	4b7d      	ldr	r3, [pc, #500]	; (80075cc <update_ScurveTraj+0x76c>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	497d      	ldr	r1, [pc, #500]	; (80075d0 <update_ScurveTraj+0x770>)
 80073dc:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80073e0:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80075a0 <update_ScurveTraj+0x740>
 80073e4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80073e8:	f007 fcaa 	bl	800ed40 <pow>
 80073ec:	ec55 4b10 	vmov	r4, r5, d0
 80073f0:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80075a8 <update_ScurveTraj+0x748>
 80073f4:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80073f8:	f007 fca2 	bl	800ed40 <pow>
 80073fc:	ec53 2b10 	vmov	r2, r3, d0
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f9 fa2a 	bl	800085c <__aeabi_ddiv>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80075a8 <update_ScurveTraj+0x748>
 8007414:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 8007418:	f007 fc92 	bl	800ed40 <pow>
 800741c:	ec59 8b10 	vmov	r8, r9, d0
 8007420:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80075a8 <update_ScurveTraj+0x748>
 8007424:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8007428:	f007 fc8a 	bl	800ed40 <pow>
 800742c:	ec53 2b10 	vmov	r2, r3, d0
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 ff32 	bl	800029c <__adddf3>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	f7f8 ff2a 	bl	800029c <__adddf3>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4620      	mov	r0, r4
 800744e:	4629      	mov	r1, r5
 8007450:	f7f8 ff24 	bl	800029c <__adddf3>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4614      	mov	r4, r2
 800745a:	461d      	mov	r5, r3
 800745c:	4b56      	ldr	r3, [pc, #344]	; (80075b8 <update_ScurveTraj+0x758>)
 800745e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007462:	4b56      	ldr	r3, [pc, #344]	; (80075bc <update_ScurveTraj+0x75c>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f8 ff16 	bl	8000298 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4610      	mov	r0, r2
 8007472:	4619      	mov	r1, r3
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	4b56      	ldr	r3, [pc, #344]	; (80075d4 <update_ScurveTraj+0x774>)
 800747a:	f7f9 f8c5 	bl	8000608 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4690      	mov	r8, r2
 8007484:	4699      	mov	r9, r3
 8007486:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800748a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800748e:	f7f9 f9e5 	bl	800085c <__aeabi_ddiv>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	f7f8 fefd 	bl	800029c <__adddf3>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4692      	mov	sl, r2
 80074a8:	469b      	mov	fp, r3
 80074aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80074ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80074b2:	f7f8 fef3 	bl	800029c <__adddf3>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4650      	mov	r0, sl
 80074bc:	4659      	mov	r1, fp
 80074be:	f7f9 f8a3 	bl	8000608 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f8 fee5 	bl	8000298 <__aeabi_dsub>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80074da:	f7f9 f895 	bl	8000608 <__aeabi_dmul>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f8 fed9 	bl	800029c <__adddf3>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	493a      	ldr	r1, [pc, #232]	; (80075d8 <update_ScurveTraj+0x778>)
 80074f0:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80074f4:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80075a8 <update_ScurveTraj+0x748>
 80074f8:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80074fc:	f007 fc20 	bl	800ed40 <pow>
 8007500:	ec51 0b10 	vmov	r0, r1, d0
 8007504:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007508:	f7f9 f9a8 	bl	800085c <__aeabi_ddiv>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	f7f8 febe 	bl	800029c <__adddf3>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4620      	mov	r0, r4
 8007526:	4629      	mov	r1, r5
 8007528:	f7f8 feb6 	bl	8000298 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4614      	mov	r4, r2
 8007532:	461d      	mov	r5, r3
 8007534:	4b28      	ldr	r3, [pc, #160]	; (80075d8 <update_ScurveTraj+0x778>)
 8007536:	ed93 7b00 	vldr	d7, [r3]
 800753a:	eeb0 0a47 	vmov.f32	s0, s14
 800753e:	eef0 0a67 	vmov.f32	s1, s15
 8007542:	f007 fc6d 	bl	800ee20 <sqrt>
 8007546:	ec53 2b10 	vmov	r2, r3, d0
 800754a:	4620      	mov	r0, r4
 800754c:	4629      	mov	r1, r5
 800754e:	f7f8 fea5 	bl	800029c <__adddf3>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	f7f8 fe9b 	bl	800029c <__adddf3>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f9 f975 	bl	800085c <__aeabi_ddiv>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4912      	ldr	r1, [pc, #72]	; (80075c0 <update_ScurveTraj+0x760>)
 8007578:	e9c1 2300 	strd	r2, r3, [r1]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 800757c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80075a8 <update_ScurveTraj+0x748>
 8007580:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007584:	f007 fbdc 	bl	800ed40 <pow>
 8007588:	ec51 0b10 	vmov	r0, r1, d0
 800758c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007590:	f7f9 f964 	bl	800085c <__aeabi_ddiv>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	e01e      	b.n	80075dc <update_ScurveTraj+0x77c>
 800759e:	bf00      	nop
 80075a0:	00000000 	.word	0x00000000
 80075a4:	40100000 	.word	0x40100000
 80075a8:	00000000 	.word	0x00000000
 80075ac:	40000000 	.word	0x40000000
 80075b0:	20000888 	.word	0x20000888
 80075b4:	20000870 	.word	0x20000870
 80075b8:	200008a8 	.word	0x200008a8
 80075bc:	200008a0 	.word	0x200008a0
 80075c0:	20000868 	.word	0x20000868
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	20000878 	.word	0x20000878
 80075cc:	20000880 	.word	0x20000880
 80075d0:	20000890 	.word	0x20000890
 80075d4:	40100000 	.word	0x40100000
 80075d8:	20000898 	.word	0x20000898
 80075dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	f7f8 fe5a 	bl	800029c <__adddf3>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f8 fe52 	bl	8000298 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4614      	mov	r4, r2
 80075fa:	461d      	mov	r5, r3
 80075fc:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <update_ScurveTraj+0x844>)
 80075fe:	ed93 7b00 	vldr	d7, [r3]
 8007602:	eeb0 0a47 	vmov.f32	s0, s14
 8007606:	eef0 0a67 	vmov.f32	s1, s15
 800760a:	f007 fc09 	bl	800ee20 <sqrt>
 800760e:	ec53 2b10 	vmov	r2, r3, d0
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f8 fe41 	bl	800029c <__adddf3>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4614      	mov	r4, r2
 8007620:	461d      	mov	r5, r3
 8007622:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	f7f8 fe37 	bl	800029c <__adddf3>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	f7f9 f911 	bl	800085c <__aeabi_ddiv>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	491a      	ldr	r1, [pc, #104]	; (80076a8 <update_ScurveTraj+0x848>)
 8007640:	e9c1 2300 	strd	r2, r3, [r1]
		Tv=0;
 8007644:	4919      	ldr	r1, [pc, #100]	; (80076ac <update_ScurveTraj+0x84c>)
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <update_ScurveTraj+0x850>)
 8007654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	f7f8 fe1e 	bl	800029c <__adddf3>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4610      	mov	r0, r2
 8007666:	4619      	mov	r1, r3
 8007668:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <update_ScurveTraj+0x854>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f7f9 fa5b 	bl	8000b28 <__aeabi_dcmpgt>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 8301 	bne.w	8007c7c <update_ScurveTraj+0xe1c>
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <update_ScurveTraj+0x850>)
 800767c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	f7f8 fe0a 	bl	800029c <__adddf3>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <update_ScurveTraj+0x848>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f7f9 fa47 	bl	8000b28 <__aeabi_dcmpgt>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8327 	beq.w	8007cf0 <update_ScurveTraj+0xe90>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 80076a2:	e2eb      	b.n	8007c7c <update_ScurveTraj+0xe1c>
 80076a4:	20000898 	.word	0x20000898
 80076a8:	20000870 	.word	0x20000870
 80076ac:	20000878 	.word	0x20000878
 80076b0:	20000890 	.word	0x20000890
 80076b4:	20000868 	.word	0x20000868

				amax=amax*0.99;
 80076b8:	a3e3      	add	r3, pc, #908	; (adr r3, 8007a48 <update_ScurveTraj+0xbe8>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80076c2:	f7f8 ffa1 	bl	8000608 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				Tj=amax/jmax;
 80076ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80076d6:	f7f9 f8c1 	bl	800085c <__aeabi_ddiv>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	49d2      	ldr	r1, [pc, #840]	; (8007a28 <update_ScurveTraj+0xbc8>)
 80076e0:	e9c1 2300 	strd	r2, r3, [r1]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80076e4:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 8007a18 <update_ScurveTraj+0xbb8>
 80076e8:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80076ec:	f007 fb28 	bl	800ed40 <pow>
 80076f0:	ec55 4b10 	vmov	r4, r5, d0
 80076f4:	ed9f 1bca 	vldr	d1, [pc, #808]	; 8007a20 <update_ScurveTraj+0xbc0>
 80076f8:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80076fc:	f007 fb20 	bl	800ed40 <pow>
 8007700:	ec53 2b10 	vmov	r2, r3, d0
 8007704:	4620      	mov	r0, r4
 8007706:	4629      	mov	r1, r5
 8007708:	f7f9 f8a8 	bl	800085c <__aeabi_ddiv>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4614      	mov	r4, r2
 8007712:	461d      	mov	r5, r3
 8007714:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8007a20 <update_ScurveTraj+0xbc0>
 8007718:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 800771c:	f007 fb10 	bl	800ed40 <pow>
 8007720:	ec59 8b10 	vmov	r8, r9, d0
 8007724:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8007a20 <update_ScurveTraj+0xbc0>
 8007728:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800772c:	f007 fb08 	bl	800ed40 <pow>
 8007730:	ec53 2b10 	vmov	r2, r3, d0
 8007734:	4640      	mov	r0, r8
 8007736:	4649      	mov	r1, r9
 8007738:	f7f8 fdb0 	bl	800029c <__adddf3>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4610      	mov	r0, r2
 8007742:	4619      	mov	r1, r3
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	f7f8 fda8 	bl	800029c <__adddf3>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4620      	mov	r0, r4
 8007752:	4629      	mov	r1, r5
 8007754:	f7f8 fda2 	bl	800029c <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4614      	mov	r4, r2
 800775e:	461d      	mov	r5, r3
 8007760:	4bb2      	ldr	r3, [pc, #712]	; (8007a2c <update_ScurveTraj+0xbcc>)
 8007762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007766:	4bb2      	ldr	r3, [pc, #712]	; (8007a30 <update_ScurveTraj+0xbd0>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f7f8 fd94 	bl	8000298 <__aeabi_dsub>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	4bad      	ldr	r3, [pc, #692]	; (8007a34 <update_ScurveTraj+0xbd4>)
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4690      	mov	r8, r2
 8007788:	4699      	mov	r9, r3
 800778a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800778e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007792:	f7f9 f863 	bl	800085c <__aeabi_ddiv>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	f7f8 fd7b 	bl	800029c <__adddf3>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4692      	mov	sl, r2
 80077ac:	469b      	mov	fp, r3
 80077ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80077b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80077b6:	f7f8 fd71 	bl	800029c <__adddf3>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4650      	mov	r0, sl
 80077c0:	4659      	mov	r1, fp
 80077c2:	f7f8 ff21 	bl	8000608 <__aeabi_dmul>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f8 fd63 	bl	8000298 <__aeabi_dsub>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4610      	mov	r0, r2
 80077d8:	4619      	mov	r1, r3
 80077da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80077de:	f7f8 ff13 	bl	8000608 <__aeabi_dmul>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 fd57 	bl	800029c <__adddf3>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4991      	ldr	r1, [pc, #580]	; (8007a38 <update_ScurveTraj+0xbd8>)
 80077f4:	e9c1 2300 	strd	r2, r3, [r1]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80077f8:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8007a20 <update_ScurveTraj+0xbc0>
 80077fc:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007800:	f007 fa9e 	bl	800ed40 <pow>
 8007804:	ec51 0b10 	vmov	r0, r1, d0
 8007808:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800780c:	f7f9 f826 	bl	800085c <__aeabi_ddiv>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	f7f8 fd3c 	bl	800029c <__adddf3>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	f7f8 fd34 	bl	8000298 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4614      	mov	r4, r2
 8007836:	461d      	mov	r5, r3
 8007838:	4b7f      	ldr	r3, [pc, #508]	; (8007a38 <update_ScurveTraj+0xbd8>)
 800783a:	ed93 7b00 	vldr	d7, [r3]
 800783e:	eeb0 0a47 	vmov.f32	s0, s14
 8007842:	eef0 0a67 	vmov.f32	s1, s15
 8007846:	f007 faeb 	bl	800ee20 <sqrt>
 800784a:	ec53 2b10 	vmov	r2, r3, d0
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f8 fd23 	bl	800029c <__adddf3>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4614      	mov	r4, r2
 800785c:	461d      	mov	r5, r3
 800785e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	f7f8 fd19 	bl	800029c <__adddf3>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fff3 	bl	800085c <__aeabi_ddiv>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4970      	ldr	r1, [pc, #448]	; (8007a3c <update_ScurveTraj+0xbdc>)
 800787c:	e9c1 2300 	strd	r2, r3, [r1]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007880:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007a20 <update_ScurveTraj+0xbc0>
 8007884:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007888:	f007 fa5a 	bl	800ed40 <pow>
 800788c:	ec51 0b10 	vmov	r0, r1, d0
 8007890:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007894:	f7f8 ffe2 	bl	800085c <__aeabi_ddiv>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4614      	mov	r4, r2
 800789e:	461d      	mov	r5, r3
 80078a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	f7f8 fcf8 	bl	800029c <__adddf3>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fcf0 	bl	8000298 <__aeabi_dsub>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	4b5d      	ldr	r3, [pc, #372]	; (8007a38 <update_ScurveTraj+0xbd8>)
 80078c2:	ed93 7b00 	vldr	d7, [r3]
 80078c6:	eeb0 0a47 	vmov.f32	s0, s14
 80078ca:	eef0 0a67 	vmov.f32	s1, s15
 80078ce:	f007 faa7 	bl	800ee20 <sqrt>
 80078d2:	ec53 2b10 	vmov	r2, r3, d0
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fcdf 	bl	800029c <__adddf3>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4614      	mov	r4, r2
 80078e4:	461d      	mov	r5, r3
 80078e6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	f7f8 fcd5 	bl	800029c <__adddf3>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 ffaf 	bl	800085c <__aeabi_ddiv>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	494f      	ldr	r1, [pc, #316]	; (8007a40 <update_ScurveTraj+0xbe0>)
 8007904:	e9c1 2300 	strd	r2, r3, [r1]

				//print(f'{i}',amax)


				if (Ta<0){
 8007908:	4b4c      	ldr	r3, [pc, #304]	; (8007a3c <update_ScurveTraj+0xbdc>)
 800790a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	f04f 0300 	mov.w	r3, #0
 8007916:	f7f9 f8e9 	bl	8000aec <__aeabi_dcmplt>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80df 	beq.w	8007ae0 <update_ScurveTraj+0xc80>
					Ta=0;
 8007922:	4946      	ldr	r1, [pc, #280]	; (8007a3c <update_ScurveTraj+0xbdc>)
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8007930:	4944      	ldr	r1, [pc, #272]	; (8007a44 <update_ScurveTraj+0xbe4>)
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 800793e:	4b3b      	ldr	r3, [pc, #236]	; (8007a2c <update_ScurveTraj+0xbcc>)
 8007940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007944:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <update_ScurveTraj+0xbd0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fca5 	bl	8000298 <__aeabi_dsub>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4614      	mov	r4, r2
 8007954:	461d      	mov	r5, r3
 8007956:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800795a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800795e:	f7f8 fc9d 	bl	800029c <__adddf3>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 ff77 	bl	800085c <__aeabi_ddiv>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	f7f8 fc8f 	bl	800029c <__adddf3>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	492f      	ldr	r1, [pc, #188]	; (8007a40 <update_ScurveTraj+0xbe0>)
 8007984:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007988:	4b28      	ldr	r3, [pc, #160]	; (8007a2c <update_ScurveTraj+0xbcc>)
 800798a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800798e:	4b28      	ldr	r3, [pc, #160]	; (8007a30 <update_ScurveTraj+0xbd0>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc80 	bl	8000298 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079a4:	f7f8 fe30 	bl	8000608 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	461d      	mov	r5, r3
 80079b0:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <update_ScurveTraj+0xbcc>)
 80079b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079b6:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <update_ScurveTraj+0xbd0>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fc6c 	bl	8000298 <__aeabi_dsub>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	ec43 2b17 	vmov	d7, r2, r3
 80079c8:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8007a20 <update_ScurveTraj+0xbc0>
 80079cc:	eeb0 0a47 	vmov.f32	s0, s14
 80079d0:	eef0 0a67 	vmov.f32	s1, s15
 80079d4:	f007 f9b4 	bl	800ed40 <pow>
 80079d8:	ec51 0b10 	vmov	r0, r1, d0
 80079dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80079e0:	f7f8 fe12 	bl	8000608 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4690      	mov	r8, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80079f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80079f4:	f7f8 fc52 	bl	800029c <__adddf3>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	ec43 2b17 	vmov	d7, r2, r3
 8007a00:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8007a20 <update_ScurveTraj+0xbc0>
 8007a04:	eeb0 0a47 	vmov.f32	s0, s14
 8007a08:	eef0 0a67 	vmov.f32	s1, s15
 8007a0c:	f007 f998 	bl	800ed40 <pow>
 8007a10:	ec5b ab10 	vmov	sl, fp, d0
 8007a14:	e01c      	b.n	8007a50 <update_ScurveTraj+0xbf0>
 8007a16:	bf00      	nop
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	40100000 	.word	0x40100000
 8007a20:	00000000 	.word	0x00000000
 8007a24:	40000000 	.word	0x40000000
 8007a28:	20000890 	.word	0x20000890
 8007a2c:	200008a8 	.word	0x200008a8
 8007a30:	200008a0 	.word	0x200008a0
 8007a34:	40100000 	.word	0x40100000
 8007a38:	20000898 	.word	0x20000898
 8007a3c:	20000868 	.word	0x20000868
 8007a40:	20000870 	.word	0x20000870
 8007a44:	20000880 	.word	0x20000880
 8007a48:	7ae147ae 	.word	0x7ae147ae
 8007a4c:	3fefae14 	.word	0x3fefae14
 8007a50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007a54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a58:	f7f8 fc1e 	bl	8000298 <__aeabi_dsub>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4650      	mov	r0, sl
 8007a62:	4659      	mov	r1, fp
 8007a64:	f7f8 fdd0 	bl	8000608 <__aeabi_dmul>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fc14 	bl	800029c <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a80:	f7f8 fdc2 	bl	8000608 <__aeabi_dmul>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	ec43 2b17 	vmov	d7, r2, r3
 8007a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a90:	eef0 0a67 	vmov.f32	s1, s15
 8007a94:	f007 f9c4 	bl	800ee20 <sqrt>
 8007a98:	ec53 2b10 	vmov	r2, r3, d0
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	f7f8 fbfa 	bl	8000298 <__aeabi_dsub>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	461d      	mov	r5, r3
 8007aac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007ab0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007ab4:	f7f8 fbf2 	bl	800029c <__adddf3>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ac4:	f7f8 fda0 	bl	8000608 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	f7f8 fec4 	bl	800085c <__aeabi_ddiv>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	49a5      	ldr	r1, [pc, #660]	; (8007d70 <update_ScurveTraj+0xf10>)
 8007ada:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007ade:	e107      	b.n	8007cf0 <update_ScurveTraj+0xe90>
				}
				if (Td<0){
 8007ae0:	4ba4      	ldr	r3, [pc, #656]	; (8007d74 <update_ScurveTraj+0xf14>)
 8007ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	f7f8 fffd 	bl	8000aec <__aeabi_dcmplt>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d100      	bne.n	8007afa <update_ScurveTraj+0xc9a>
 8007af8:	e0c0      	b.n	8007c7c <update_ScurveTraj+0xe1c>
					Td=0;
 8007afa:	499e      	ldr	r1, [pc, #632]	; (8007d74 <update_ScurveTraj+0xf14>)
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8007b08:	4b9b      	ldr	r3, [pc, #620]	; (8007d78 <update_ScurveTraj+0xf18>)
 8007b0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b0e:	4b9b      	ldr	r3, [pc, #620]	; (8007d7c <update_ScurveTraj+0xf1c>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fbc0 	bl	8000298 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	461d      	mov	r5, r3
 8007b20:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007b28:	f7f8 fbb8 	bl	800029c <__adddf3>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 fe92 	bl	800085c <__aeabi_ddiv>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	f7f8 fbaa 	bl	800029c <__adddf3>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	498c      	ldr	r1, [pc, #560]	; (8007d80 <update_ScurveTraj+0xf20>)
 8007b4e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007b52:	4b89      	ldr	r3, [pc, #548]	; (8007d78 <update_ScurveTraj+0xf18>)
 8007b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b58:	4b88      	ldr	r3, [pc, #544]	; (8007d7c <update_ScurveTraj+0xf1c>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fb9b 	bl	8000298 <__aeabi_dsub>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4610      	mov	r0, r2
 8007b68:	4619      	mov	r1, r3
 8007b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b6e:	f7f8 fd4b 	bl	8000608 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4614      	mov	r4, r2
 8007b78:	461d      	mov	r5, r3
 8007b7a:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <update_ScurveTraj+0xf18>)
 8007b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b80:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <update_ScurveTraj+0xf1c>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fb87 	bl	8000298 <__aeabi_dsub>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	ec43 2b17 	vmov	d7, r2, r3
 8007b92:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8007d68 <update_ScurveTraj+0xf08>
 8007b96:	eeb0 0a47 	vmov.f32	s0, s14
 8007b9a:	eef0 0a67 	vmov.f32	s1, s15
 8007b9e:	f007 f8cf 	bl	800ed40 <pow>
 8007ba2:	ec51 0b10 	vmov	r0, r1, d0
 8007ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007baa:	f7f8 fd2d 	bl	8000608 <__aeabi_dmul>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4690      	mov	r8, r2
 8007bb4:	4699      	mov	r9, r3
 8007bb6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007bba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007bbe:	f7f8 fb6d 	bl	800029c <__adddf3>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	ec43 2b17 	vmov	d7, r2, r3
 8007bca:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007d68 <update_ScurveTraj+0xf08>
 8007bce:	eeb0 0a47 	vmov.f32	s0, s14
 8007bd2:	eef0 0a67 	vmov.f32	s1, s15
 8007bd6:	f007 f8b3 	bl	800ed40 <pow>
 8007bda:	ec5b ab10 	vmov	sl, fp, d0
 8007bde:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007be2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007be6:	f7f8 fb57 	bl	8000298 <__aeabi_dsub>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4650      	mov	r0, sl
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	f7f8 fd09 	bl	8000608 <__aeabi_dmul>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	f7f8 fb4b 	bl	8000298 <__aeabi_dsub>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	ec43 2b17 	vmov	d7, r2, r3
 8007c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8007c1e:	eef0 0a67 	vmov.f32	s1, s15
 8007c22:	f007 f8fd 	bl	800ee20 <sqrt>
 8007c26:	ec53 2b10 	vmov	r2, r3, d0
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f7f8 fb33 	bl	8000298 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4614      	mov	r4, r2
 8007c38:	461d      	mov	r5, r3
 8007c3a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007c3e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007c42:	f7f8 fb2b 	bl	800029c <__adddf3>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c52:	f7f8 fcd9 	bl	8000608 <__aeabi_dmul>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 fdfd 	bl	800085c <__aeabi_ddiv>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4947      	ldr	r1, [pc, #284]	; (8007d84 <update_ScurveTraj+0xf24>)
 8007c68:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=0;
 8007c6c:	4940      	ldr	r1, [pc, #256]	; (8007d70 <update_ScurveTraj+0xf10>)
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007c7a:	e039      	b.n	8007cf0 <update_ScurveTraj+0xe90>
			while (!(Ta>2*Tj && Td>2*Tj)){
 8007c7c:	4b42      	ldr	r3, [pc, #264]	; (8007d88 <update_ScurveTraj+0xf28>)
 8007c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	f7f8 fb09 	bl	800029c <__adddf3>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	4b3b      	ldr	r3, [pc, #236]	; (8007d80 <update_ScurveTraj+0xf20>)
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	2401      	movs	r4, #1
 8007c9a:	f7f8 ff27 	bl	8000aec <__aeabi_dcmplt>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <update_ScurveTraj+0xe48>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	b2e3      	uxtb	r3, r4
 8007caa:	f083 0301 	eor.w	r3, r3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f ad01 	bne.w	80076b8 <update_ScurveTraj+0x858>
 8007cb6:	4b34      	ldr	r3, [pc, #208]	; (8007d88 <update_ScurveTraj+0xf28>)
 8007cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	f7f8 faec 	bl	800029c <__adddf3>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <update_ScurveTraj+0xf14>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	2401      	movs	r4, #1
 8007cd4:	f7f8 ff0a 	bl	8000aec <__aeabi_dcmplt>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <update_ScurveTraj+0xe82>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	461c      	mov	r4, r3
 8007ce2:	b2e3      	uxtb	r3, r4
 8007ce4:	f083 0301 	eor.w	r3, r3, #1
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f47f ace4 	bne.w	80076b8 <update_ScurveTraj+0x858>
				}
			}
		}
	}

	*(params)=Tj1;
 8007cf0:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <update_ScurveTraj+0xf24>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cf8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8007cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfe:	f103 0108 	add.w	r1, r3, #8
 8007d02:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <update_ScurveTraj+0xf10>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8007d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d0e:	f103 0110 	add.w	r1, r3, #16
 8007d12:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <update_ScurveTraj+0xf28>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1e:	f103 0118 	add.w	r1, r3, #24
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <update_ScurveTraj+0xf20>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8007d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d2e:	f103 0120 	add.w	r1, r3, #32
 8007d32:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <update_ScurveTraj+0xf14>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8007d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d3e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <update_ScurveTraj+0xf2c>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8007d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d52:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <update_ScurveTraj+0xf30>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	e9c1 2300 	strd	r2, r3, [r1]

}
 8007d5c:	bf00      	nop
 8007d5e:	3798      	adds	r7, #152	; 0x98
 8007d60:	46bd      	mov	sp, r7
 8007d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d66:	bf00      	nop
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	40000000 	.word	0x40000000
 8007d70:	20000888 	.word	0x20000888
 8007d74:	20000870 	.word	0x20000870
 8007d78:	200008a8 	.word	0x200008a8
 8007d7c:	200008a0 	.word	0x200008a0
 8007d80:	20000868 	.word	0x20000868
 8007d84:	20000880 	.word	0x20000880
 8007d88:	20000890 	.word	0x20000890
 8007d8c:	20000878 	.word	0x20000878
 8007d90:	20000860 	.word	0x20000860
 8007d94:	00000000 	.word	0x00000000

08007d98 <setProfilTimer>:


void setProfilTimer(void){
 8007d98:	b5b0      	push	{r4, r5, r7, lr}
 8007d9a:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8007d9c:	4bb8      	ldr	r3, [pc, #736]	; (8008080 <setProfilTimer+0x2e8>)
 8007d9e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007da2:	a3b3      	add	r3, pc, #716	; (adr r3, 8008070 <setProfilTimer+0x2d8>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	49b3      	ldr	r1, [pc, #716]	; (8008080 <setProfilTimer+0x2e8>)
 8007db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8007db6:	4bb3      	ldr	r3, [pc, #716]	; (8008084 <setProfilTimer+0x2ec>)
 8007db8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007dbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008070 <setProfilTimer+0x2d8>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fc21 	bl	8000608 <__aeabi_dmul>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	49ae      	ldr	r1, [pc, #696]	; (8008084 <setProfilTimer+0x2ec>)
 8007dcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8007dd0:	4bad      	ldr	r3, [pc, #692]	; (8008088 <setProfilTimer+0x2f0>)
 8007dd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007dd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008070 <setProfilTimer+0x2d8>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	49a8      	ldr	r1, [pc, #672]	; (8008088 <setProfilTimer+0x2f0>)
 8007de6:	e9c1 2304 	strd	r2, r3, [r1, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8007dea:	4ba8      	ldr	r3, [pc, #672]	; (800808c <setProfilTimer+0x2f4>)
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f8 fb90 	bl	8000514 <__aeabi_ui2d>
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	4ba5      	ldr	r3, [pc, #660]	; (8008090 <setProfilTimer+0x2f8>)
 8007dfa:	f7f8 fa4f 	bl	800029c <__adddf3>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	a19d      	add	r1, pc, #628	; (adr r1, 8008078 <setProfilTimer+0x2e0>)
 8007e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e08:	f7f8 fd28 	bl	800085c <__aeabi_ddiv>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	4b9a      	ldr	r3, [pc, #616]	; (8008080 <setProfilTimer+0x2e8>)
 8007e16:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	4b9d      	ldr	r3, [pc, #628]	; (8008094 <setProfilTimer+0x2fc>)
 8007e20:	f7f8 fbf2 	bl	8000608 <__aeabi_dmul>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	499a      	ldr	r1, [pc, #616]	; (8008098 <setProfilTimer+0x300>)
 8007e2e:	f7f8 fd15 	bl	800085c <__aeabi_ddiv>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fbe5 	bl	8000608 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	4b91      	ldr	r3, [pc, #580]	; (8008090 <setProfilTimer+0x2f8>)
 8007e4c:	f7f8 fa24 	bl	8000298 <__aeabi_dsub>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	f7f8 fe86 	bl	8000b68 <__aeabi_d2uiz>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f8 fb58 	bl	8000514 <__aeabi_ui2d>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	498c      	ldr	r1, [pc, #560]	; (800809c <setProfilTimer+0x304>)
 8007e6a:	e9c1 2300 	strd	r2, r3, [r1]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8007e6e:	4b87      	ldr	r3, [pc, #540]	; (800808c <setProfilTimer+0x2f4>)
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7f8 fb4e 	bl	8000514 <__aeabi_ui2d>
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	4b84      	ldr	r3, [pc, #528]	; (8008090 <setProfilTimer+0x2f8>)
 8007e7e:	f7f8 fa0d 	bl	800029c <__adddf3>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	a17c      	add	r1, pc, #496	; (adr r1, 8008078 <setProfilTimer+0x2e0>)
 8007e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e8c:	f7f8 fce6 	bl	800085c <__aeabi_ddiv>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4614      	mov	r4, r2
 8007e96:	461d      	mov	r5, r3
 8007e98:	4b7a      	ldr	r3, [pc, #488]	; (8008084 <setProfilTimer+0x2ec>)
 8007e9a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	4b7c      	ldr	r3, [pc, #496]	; (8008094 <setProfilTimer+0x2fc>)
 8007ea4:	f7f8 fbb0 	bl	8000608 <__aeabi_dmul>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	f04f 0000 	mov.w	r0, #0
 8007eb0:	4979      	ldr	r1, [pc, #484]	; (8008098 <setProfilTimer+0x300>)
 8007eb2:	f7f8 fcd3 	bl	800085c <__aeabi_ddiv>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	4b70      	ldr	r3, [pc, #448]	; (8008090 <setProfilTimer+0x2f8>)
 8007ed0:	f7f8 f9e2 	bl	8000298 <__aeabi_dsub>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4619      	mov	r1, r3
 8007edc:	f7f8 fe44 	bl	8000b68 <__aeabi_d2uiz>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f8 fb16 	bl	8000514 <__aeabi_ui2d>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	496b      	ldr	r1, [pc, #428]	; (800809c <setProfilTimer+0x304>)
 8007eee:	e9c1 2302 	strd	r2, r3, [r1, #8]
    period[2] = COUNTERPERIOD(motor3.rpm);
 8007ef2:	4b66      	ldr	r3, [pc, #408]	; (800808c <setProfilTimer+0x2f4>)
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7f8 fb0c 	bl	8000514 <__aeabi_ui2d>
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	4b63      	ldr	r3, [pc, #396]	; (8008090 <setProfilTimer+0x2f8>)
 8007f02:	f7f8 f9cb 	bl	800029c <__adddf3>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	a15b      	add	r1, pc, #364	; (adr r1, 8008078 <setProfilTimer+0x2e0>)
 8007f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f10:	f7f8 fca4 	bl	800085c <__aeabi_ddiv>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	461d      	mov	r5, r3
 8007f1c:	4b5a      	ldr	r3, [pc, #360]	; (8008088 <setProfilTimer+0x2f0>)
 8007f1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b5b      	ldr	r3, [pc, #364]	; (8008094 <setProfilTimer+0x2fc>)
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f04f 0000 	mov.w	r0, #0
 8007f34:	4958      	ldr	r1, [pc, #352]	; (8008098 <setProfilTimer+0x300>)
 8007f36:	f7f8 fc91 	bl	800085c <__aeabi_ddiv>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fb61 	bl	8000608 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	4b4f      	ldr	r3, [pc, #316]	; (8008090 <setProfilTimer+0x2f8>)
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f7f8 fe02 	bl	8000b68 <__aeabi_d2uiz>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 fad4 	bl	8000514 <__aeabi_ui2d>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	494a      	ldr	r1, [pc, #296]	; (800809c <setProfilTimer+0x304>)
 8007f72:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	*/

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim1,period[0]);
 8007f76:	4b49      	ldr	r3, [pc, #292]	; (800809c <setProfilTimer+0x304>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	4948      	ldr	r1, [pc, #288]	; (80080a0 <setProfilTimer+0x308>)
 8007f7e:	680c      	ldr	r4, [r1, #0]
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	f7f8 fdf0 	bl	8000b68 <__aeabi_d2uiz>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f8c:	4b43      	ldr	r3, [pc, #268]	; (800809c <setProfilTimer+0x304>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	f7f8 fde7 	bl	8000b68 <__aeabi_d2uiz>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4a40      	ldr	r2, [pc, #256]	; (80080a0 <setProfilTimer+0x308>)
 8007f9e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,period[1]);
 8007fa0:	4b3e      	ldr	r3, [pc, #248]	; (800809c <setProfilTimer+0x304>)
 8007fa2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007fa6:	493f      	ldr	r1, [pc, #252]	; (80080a4 <setProfilTimer+0x30c>)
 8007fa8:	680c      	ldr	r4, [r1, #0]
 8007faa:	4610      	mov	r0, r2
 8007fac:	4619      	mov	r1, r3
 8007fae:	f7f8 fddb 	bl	8000b68 <__aeabi_d2uiz>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fb6:	4b39      	ldr	r3, [pc, #228]	; (800809c <setProfilTimer+0x304>)
 8007fb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f7f8 fdd2 	bl	8000b68 <__aeabi_d2uiz>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4a37      	ldr	r2, [pc, #220]	; (80080a4 <setProfilTimer+0x30c>)
 8007fc8:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,period[2]);
 8007fca:	4b34      	ldr	r3, [pc, #208]	; (800809c <setProfilTimer+0x304>)
 8007fcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007fd0:	4935      	ldr	r1, [pc, #212]	; (80080a8 <setProfilTimer+0x310>)
 8007fd2:	680c      	ldr	r4, [r1, #0]
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f7f8 fdc6 	bl	8000b68 <__aeabi_d2uiz>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe0:	4b2e      	ldr	r3, [pc, #184]	; (800809c <setProfilTimer+0x304>)
 8007fe2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f7f8 fdbd 	bl	8000b68 <__aeabi_d2uiz>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4a2d      	ldr	r2, [pc, #180]	; (80080a8 <setProfilTimer+0x310>)
 8007ff2:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <setProfilTimer+0x2f4>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7f8 fa8b 	bl	8000514 <__aeabi_ui2d>
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008006:	f7f8 fc29 	bl	800085c <__aeabi_ddiv>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4c1f      	ldr	r4, [pc, #124]	; (800808c <setProfilTimer+0x2f4>)
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f7f8 fda8 	bl	8000b68 <__aeabi_d2uiz>
 8008018:	4603      	mov	r3, r0
 800801a:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <setProfilTimer+0x314>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4618      	mov	r0, r3
 8008022:	f7f8 fa77 	bl	8000514 <__aeabi_ui2d>
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800802e:	f7f8 fc15 	bl	800085c <__aeabi_ddiv>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4c1d      	ldr	r4, [pc, #116]	; (80080ac <setProfilTimer+0x314>)
 8008038:	4610      	mov	r0, r2
 800803a:	4619      	mov	r1, r3
 800803c:	f7f8 fd94 	bl	8000b68 <__aeabi_d2uiz>
 8008040:	4603      	mov	r3, r0
 8008042:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <setProfilTimer+0x318>)
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	4618      	mov	r0, r3
 800804a:	f7f8 fa63 	bl	8000514 <__aeabi_ui2d>
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008056:	f7f8 fc01 	bl	800085c <__aeabi_ddiv>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4c14      	ldr	r4, [pc, #80]	; (80080b0 <setProfilTimer+0x318>)
 8008060:	4610      	mov	r0, r2
 8008062:	4619      	mov	r1, r3
 8008064:	f7f8 fd80 	bl	8000b68 <__aeabi_d2uiz>
 8008068:	4603      	mov	r3, r0
 800806a:	6363      	str	r3, [r4, #52]	; 0x34


}
 800806c:	bf00      	nop
 800806e:	bdb0      	pop	{r4, r5, r7, pc}
 8008070:	66ed2a99 	.word	0x66ed2a99
 8008074:	4023193d 	.word	0x4023193d
 8008078:	00000000 	.word	0x00000000
 800807c:	418e8480 	.word	0x418e8480
 8008080:	200005f8 	.word	0x200005f8
 8008084:	20000640 	.word	0x20000640
 8008088:	20000688 	.word	0x20000688
 800808c:	40010000 	.word	0x40010000
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	40bf4000 	.word	0x40bf4000
 8008098:	404e0000 	.word	0x404e0000
 800809c:	20000828 	.word	0x20000828
 80080a0:	20000370 	.word	0x20000370
 80080a4:	20000400 	.word	0x20000400
 80080a8:	20000448 	.word	0x20000448
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800

080080b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80080b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80080b8:	480d      	ldr	r0, [pc, #52]	; (80080f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80080ba:	490e      	ldr	r1, [pc, #56]	; (80080f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80080bc:	4a0e      	ldr	r2, [pc, #56]	; (80080f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80080be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080c0:	e002      	b.n	80080c8 <LoopCopyDataInit>

080080c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080c6:	3304      	adds	r3, #4

080080c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080cc:	d3f9      	bcc.n	80080c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080ce:	4a0b      	ldr	r2, [pc, #44]	; (80080fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80080d0:	4c0b      	ldr	r4, [pc, #44]	; (8008100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80080d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080d4:	e001      	b.n	80080da <LoopFillZerobss>

080080d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080d8:	3204      	adds	r2, #4

080080da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080dc:	d3fb      	bcc.n	80080d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80080de:	f7fd fc93 	bl	8005a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080e2:	f003 ff0f 	bl	800bf04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80080e6:	f7fb fa71 	bl	80035cc <main>
  bx  lr    
 80080ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80080ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80080f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80080f4:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80080f8:	080104e8 	.word	0x080104e8
  ldr r2, =_sbss
 80080fc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8008100:	200008c4 	.word	0x200008c4

08008104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008104:	e7fe      	b.n	8008104 <ADC_IRQHandler>
	...

08008108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <HAL_Init+0x40>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0d      	ldr	r2, [pc, #52]	; (8008148 <HAL_Init+0x40>)
 8008112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008118:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <HAL_Init+0x40>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <HAL_Init+0x40>)
 800811e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <HAL_Init+0x40>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a07      	ldr	r2, [pc, #28]	; (8008148 <HAL_Init+0x40>)
 800812a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008130:	2003      	movs	r0, #3
 8008132:	f000 f973 	bl	800841c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008136:	2000      	movs	r0, #0
 8008138:	f000 f808 	bl	800814c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800813c:	f7fd f884 	bl	8005248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40023c00 	.word	0x40023c00

0800814c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008154:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <HAL_InitTick+0x54>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_InitTick+0x58>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	4619      	mov	r1, r3
 800815e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008162:	fbb3 f3f1 	udiv	r3, r3, r1
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f999 	bl	80084a2 <HAL_SYSTICK_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e00e      	b.n	8008198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b0f      	cmp	r3, #15
 800817e:	d80a      	bhi.n	8008196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008180:	2200      	movs	r2, #0
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	f000 f953 	bl	8008432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800818c:	4a06      	ldr	r2, [pc, #24]	; (80081a8 <HAL_InitTick+0x5c>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	e000      	b.n	8008198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000007c 	.word	0x2000007c
 80081a4:	20000084 	.word	0x20000084
 80081a8:	20000080 	.word	0x20000080

080081ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_IncTick+0x20>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_IncTick+0x24>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4413      	add	r3, r2
 80081bc:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <HAL_IncTick+0x24>)
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000084 	.word	0x20000084
 80081d0:	200008b0 	.word	0x200008b0

080081d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
  return uwTick;
 80081d8:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <HAL_GetTick+0x14>)
 80081da:	681b      	ldr	r3, [r3, #0]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	200008b0 	.word	0x200008b0

080081ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081f4:	f7ff ffee 	bl	80081d4 <HAL_GetTick>
 80081f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d005      	beq.n	8008212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <HAL_Delay+0x44>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008212:	bf00      	nop
 8008214:	f7ff ffde 	bl	80081d4 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	429a      	cmp	r2, r3
 8008222:	d8f7      	bhi.n	8008214 <HAL_Delay+0x28>
  {
  }
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000084 	.word	0x20000084

08008234 <__NVIC_SetPriorityGrouping>:
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <__NVIC_SetPriorityGrouping+0x44>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008250:	4013      	ands	r3, r2
 8008252:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800825c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008266:	4a04      	ldr	r2, [pc, #16]	; (8008278 <__NVIC_SetPriorityGrouping+0x44>)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	60d3      	str	r3, [r2, #12]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	e000ed00 	.word	0xe000ed00

0800827c <__NVIC_GetPriorityGrouping>:
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <__NVIC_GetPriorityGrouping+0x18>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	0a1b      	lsrs	r3, r3, #8
 8008286:	f003 0307 	and.w	r3, r3, #7
}
 800828a:	4618      	mov	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	e000ed00 	.word	0xe000ed00

08008298 <__NVIC_EnableIRQ>:
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db0b      	blt.n	80082c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	f003 021f 	and.w	r2, r3, #31
 80082b0:	4907      	ldr	r1, [pc, #28]	; (80082d0 <__NVIC_EnableIRQ+0x38>)
 80082b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	2001      	movs	r0, #1
 80082ba:	fa00 f202 	lsl.w	r2, r0, r2
 80082be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000e100 	.word	0xe000e100

080082d4 <__NVIC_DisableIRQ>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	db12      	blt.n	800830c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	f003 021f 	and.w	r2, r3, #31
 80082ec:	490a      	ldr	r1, [pc, #40]	; (8008318 <__NVIC_DisableIRQ+0x44>)
 80082ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2001      	movs	r0, #1
 80082f6:	fa00 f202 	lsl.w	r2, r0, r2
 80082fa:	3320      	adds	r3, #32
 80082fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008300:	f3bf 8f4f 	dsb	sy
}
 8008304:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008306:	f3bf 8f6f 	isb	sy
}
 800830a:	bf00      	nop
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	e000e100 	.word	0xe000e100

0800831c <__NVIC_SetPriority>:
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	6039      	str	r1, [r7, #0]
 8008326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db0a      	blt.n	8008346 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	b2da      	uxtb	r2, r3
 8008334:	490c      	ldr	r1, [pc, #48]	; (8008368 <__NVIC_SetPriority+0x4c>)
 8008336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833a:	0112      	lsls	r2, r2, #4
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	440b      	add	r3, r1
 8008340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008344:	e00a      	b.n	800835c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	b2da      	uxtb	r2, r3
 800834a:	4908      	ldr	r1, [pc, #32]	; (800836c <__NVIC_SetPriority+0x50>)
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	3b04      	subs	r3, #4
 8008354:	0112      	lsls	r2, r2, #4
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	440b      	add	r3, r1
 800835a:	761a      	strb	r2, [r3, #24]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	e000e100 	.word	0xe000e100
 800836c:	e000ed00 	.word	0xe000ed00

08008370 <NVIC_EncodePriority>:
{
 8008370:	b480      	push	{r7}
 8008372:	b089      	sub	sp, #36	; 0x24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	f1c3 0307 	rsb	r3, r3, #7
 800838a:	2b04      	cmp	r3, #4
 800838c:	bf28      	it	cs
 800838e:	2304      	movcs	r3, #4
 8008390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	3304      	adds	r3, #4
 8008396:	2b06      	cmp	r3, #6
 8008398:	d902      	bls.n	80083a0 <NVIC_EncodePriority+0x30>
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3b03      	subs	r3, #3
 800839e:	e000      	b.n	80083a2 <NVIC_EncodePriority+0x32>
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	43da      	mvns	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	401a      	ands	r2, r3
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083b8:	f04f 31ff 	mov.w	r1, #4294967295
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	fa01 f303 	lsl.w	r3, r1, r3
 80083c2:	43d9      	mvns	r1, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083c8:	4313      	orrs	r3, r2
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3724      	adds	r7, #36	; 0x24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083e8:	d301      	bcc.n	80083ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083ea:	2301      	movs	r3, #1
 80083ec:	e00f      	b.n	800840e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083ee:	4a0a      	ldr	r2, [pc, #40]	; (8008418 <SysTick_Config+0x40>)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083f6:	210f      	movs	r1, #15
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	f7ff ff8e 	bl	800831c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <SysTick_Config+0x40>)
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008406:	4b04      	ldr	r3, [pc, #16]	; (8008418 <SysTick_Config+0x40>)
 8008408:	2207      	movs	r2, #7
 800840a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	e000e010 	.word	0xe000e010

0800841c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff ff05 	bl	8008234 <__NVIC_SetPriorityGrouping>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008432:	b580      	push	{r7, lr}
 8008434:	b086      	sub	sp, #24
 8008436:	af00      	add	r7, sp, #0
 8008438:	4603      	mov	r3, r0
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
 800843e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008440:	2300      	movs	r3, #0
 8008442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008444:	f7ff ff1a 	bl	800827c <__NVIC_GetPriorityGrouping>
 8008448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f7ff ff8e 	bl	8008370 <NVIC_EncodePriority>
 8008454:	4602      	mov	r2, r0
 8008456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff ff5d 	bl	800831c <__NVIC_SetPriority>
}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	4603      	mov	r3, r0
 8008472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff ff0d 	bl	8008298 <__NVIC_EnableIRQ>
}
 800847e:	bf00      	nop
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	4603      	mov	r3, r0
 800848e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff ff1d 	bl	80082d4 <__NVIC_DisableIRQ>
}
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff94 	bl	80083d8 <SysTick_Config>
 80084b0:	4603      	mov	r3, r0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80084c8:	f7ff fe84 	bl	80081d4 <HAL_GetTick>
 80084cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d008      	beq.n	80084ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2280      	movs	r2, #128	; 0x80
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e052      	b.n	8008592 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0216 	bic.w	r2, r2, #22
 80084fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800850a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d103      	bne.n	800851c <HAL_DMA_Abort+0x62>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0208 	bic.w	r2, r2, #8
 800852a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0201 	bic.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800853c:	e013      	b.n	8008566 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800853e:	f7ff fe49 	bl	80081d4 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b05      	cmp	r3, #5
 800854a:	d90c      	bls.n	8008566 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2203      	movs	r2, #3
 8008556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e015      	b.n	8008592 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e4      	bne.n	800853e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008578:	223f      	movs	r2, #63	; 0x3f
 800857a:	409a      	lsls	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d004      	beq.n	80085b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2280      	movs	r2, #128	; 0x80
 80085b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e00c      	b.n	80085d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2205      	movs	r2, #5
 80085bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0201 	bic.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
	...

080085e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	e159      	b.n	80088b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085fc:	2201      	movs	r2, #1
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4013      	ands	r3, r2
 800860e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	429a      	cmp	r2, r3
 8008616:	f040 8148 	bne.w	80088aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f003 0303 	and.w	r3, r3, #3
 8008622:	2b01      	cmp	r3, #1
 8008624:	d005      	beq.n	8008632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800862e:	2b02      	cmp	r3, #2
 8008630:	d130      	bne.n	8008694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	2203      	movs	r2, #3
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4013      	ands	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4313      	orrs	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008668:	2201      	movs	r2, #1
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	fa02 f303 	lsl.w	r3, r2, r3
 8008670:	43db      	mvns	r3, r3
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	4013      	ands	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	f003 0201 	and.w	r2, r3, #1
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	4313      	orrs	r3, r2
 800868c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	2b03      	cmp	r3, #3
 800869e:	d017      	beq.n	80086d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	2203      	movs	r2, #3
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	43db      	mvns	r3, r3
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	4013      	ands	r3, r2
 80086b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d123      	bne.n	8008724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	08da      	lsrs	r2, r3, #3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3208      	adds	r2, #8
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	220f      	movs	r2, #15
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	43db      	mvns	r3, r3
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4013      	ands	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	4313      	orrs	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	08da      	lsrs	r2, r3, #3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3208      	adds	r2, #8
 800871e:	69b9      	ldr	r1, [r7, #24]
 8008720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	2203      	movs	r2, #3
 8008730:	fa02 f303 	lsl.w	r3, r2, r3
 8008734:	43db      	mvns	r3, r3
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	4013      	ands	r3, r2
 800873a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f003 0203 	and.w	r2, r3, #3
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4313      	orrs	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80a2 	beq.w	80088aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	4b57      	ldr	r3, [pc, #348]	; (80088c8 <HAL_GPIO_Init+0x2e8>)
 800876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876e:	4a56      	ldr	r2, [pc, #344]	; (80088c8 <HAL_GPIO_Init+0x2e8>)
 8008770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008774:	6453      	str	r3, [r2, #68]	; 0x44
 8008776:	4b54      	ldr	r3, [pc, #336]	; (80088c8 <HAL_GPIO_Init+0x2e8>)
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008782:	4a52      	ldr	r2, [pc, #328]	; (80088cc <HAL_GPIO_Init+0x2ec>)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	3302      	adds	r3, #2
 800878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	220f      	movs	r2, #15
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	43db      	mvns	r3, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	4013      	ands	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a49      	ldr	r2, [pc, #292]	; (80088d0 <HAL_GPIO_Init+0x2f0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d019      	beq.n	80087e2 <HAL_GPIO_Init+0x202>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a48      	ldr	r2, [pc, #288]	; (80088d4 <HAL_GPIO_Init+0x2f4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <HAL_GPIO_Init+0x1fe>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a47      	ldr	r2, [pc, #284]	; (80088d8 <HAL_GPIO_Init+0x2f8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00d      	beq.n	80087da <HAL_GPIO_Init+0x1fa>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a46      	ldr	r2, [pc, #280]	; (80088dc <HAL_GPIO_Init+0x2fc>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d007      	beq.n	80087d6 <HAL_GPIO_Init+0x1f6>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a45      	ldr	r2, [pc, #276]	; (80088e0 <HAL_GPIO_Init+0x300>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d101      	bne.n	80087d2 <HAL_GPIO_Init+0x1f2>
 80087ce:	2304      	movs	r3, #4
 80087d0:	e008      	b.n	80087e4 <HAL_GPIO_Init+0x204>
 80087d2:	2307      	movs	r3, #7
 80087d4:	e006      	b.n	80087e4 <HAL_GPIO_Init+0x204>
 80087d6:	2303      	movs	r3, #3
 80087d8:	e004      	b.n	80087e4 <HAL_GPIO_Init+0x204>
 80087da:	2302      	movs	r3, #2
 80087dc:	e002      	b.n	80087e4 <HAL_GPIO_Init+0x204>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <HAL_GPIO_Init+0x204>
 80087e2:	2300      	movs	r3, #0
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	f002 0203 	and.w	r2, r2, #3
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	4093      	lsls	r3, r2
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087f4:	4935      	ldr	r1, [pc, #212]	; (80088cc <HAL_GPIO_Init+0x2ec>)
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	089b      	lsrs	r3, r3, #2
 80087fa:	3302      	adds	r3, #2
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008802:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <HAL_GPIO_Init+0x304>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	43db      	mvns	r3, r3
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	4013      	ands	r3, r2
 8008810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008826:	4a2f      	ldr	r2, [pc, #188]	; (80088e4 <HAL_GPIO_Init+0x304>)
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800882c:	4b2d      	ldr	r3, [pc, #180]	; (80088e4 <HAL_GPIO_Init+0x304>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	43db      	mvns	r3, r3
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	4013      	ands	r3, r2
 800883a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008850:	4a24      	ldr	r2, [pc, #144]	; (80088e4 <HAL_GPIO_Init+0x304>)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008856:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <HAL_GPIO_Init+0x304>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	43db      	mvns	r3, r3
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	4013      	ands	r3, r2
 8008864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800887a:	4a1a      	ldr	r2, [pc, #104]	; (80088e4 <HAL_GPIO_Init+0x304>)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008880:	4b18      	ldr	r3, [pc, #96]	; (80088e4 <HAL_GPIO_Init+0x304>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	43db      	mvns	r3, r3
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	4013      	ands	r3, r2
 800888e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088a4:	4a0f      	ldr	r2, [pc, #60]	; (80088e4 <HAL_GPIO_Init+0x304>)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	3301      	adds	r3, #1
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	f67f aea2 	bls.w	80085fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	3724      	adds	r7, #36	; 0x24
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40023800 	.word	0x40023800
 80088cc:	40013800 	.word	0x40013800
 80088d0:	40020000 	.word	0x40020000
 80088d4:	40020400 	.word	0x40020400
 80088d8:	40020800 	.word	0x40020800
 80088dc:	40020c00 	.word	0x40020c00
 80088e0:	40021000 	.word	0x40021000
 80088e4:	40013c00 	.word	0x40013c00

080088e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	887b      	ldrh	r3, [r7, #2]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	e001      	b.n	800890a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	807b      	strh	r3, [r7, #2]
 8008924:	4613      	mov	r3, r2
 8008926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008928:	787b      	ldrb	r3, [r7, #1]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800892e:	887a      	ldrh	r2, [r7, #2]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008934:	e003      	b.n	800893e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008936:	887b      	ldrh	r3, [r7, #2]
 8008938:	041a      	lsls	r2, r3, #16
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	619a      	str	r2, [r3, #24]
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008956:	4b08      	ldr	r3, [pc, #32]	; (8008978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008958:	695a      	ldr	r2, [r3, #20]
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	4013      	ands	r3, r2
 800895e:	2b00      	cmp	r3, #0
 8008960:	d006      	beq.n	8008970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008962:	4a05      	ldr	r2, [pc, #20]	; (8008978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008964:	88fb      	ldrh	r3, [r7, #6]
 8008966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	4618      	mov	r0, r3
 800896c:	f7fb fae0 	bl	8003f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40013c00 	.word	0x40013c00

0800897c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008980:	4b06      	ldr	r3, [pc, #24]	; (800899c <HAL_PWR_PVD_IRQHandler+0x20>)
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800898c:	f000 f808 	bl	80089a0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008990:	4b02      	ldr	r3, [pc, #8]	; (800899c <HAL_PWR_PVD_IRQHandler+0x20>)
 8008992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008996:	615a      	str	r2, [r3, #20]
  }
}
 8008998:	bf00      	nop
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40013c00 	.word	0x40013c00

080089a0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80089a4:	bf00      	nop
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e267      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d075      	beq.n	8008aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089ce:	4b88      	ldr	r3, [pc, #544]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 030c 	and.w	r3, r3, #12
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d00c      	beq.n	80089f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089da:	4b85      	ldr	r3, [pc, #532]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d112      	bne.n	8008a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089e6:	4b82      	ldr	r3, [pc, #520]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f2:	d10b      	bne.n	8008a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089f4:	4b7e      	ldr	r3, [pc, #504]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d05b      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x108>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d157      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e242      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a14:	d106      	bne.n	8008a24 <HAL_RCC_OscConfig+0x74>
 8008a16:	4b76      	ldr	r3, [pc, #472]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a75      	ldr	r2, [pc, #468]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	e01d      	b.n	8008a60 <HAL_RCC_OscConfig+0xb0>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCC_OscConfig+0x98>
 8008a2e:	4b70      	ldr	r3, [pc, #448]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a6f      	ldr	r2, [pc, #444]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	4b6d      	ldr	r3, [pc, #436]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a6c      	ldr	r2, [pc, #432]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	e00b      	b.n	8008a60 <HAL_RCC_OscConfig+0xb0>
 8008a48:	4b69      	ldr	r3, [pc, #420]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a68      	ldr	r2, [pc, #416]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	4b66      	ldr	r3, [pc, #408]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a65      	ldr	r2, [pc, #404]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d013      	beq.n	8008a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a68:	f7ff fbb4 	bl	80081d4 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a70:	f7ff fbb0 	bl	80081d4 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b64      	cmp	r3, #100	; 0x64
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e207      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a82:	4b5b      	ldr	r3, [pc, #364]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f0      	beq.n	8008a70 <HAL_RCC_OscConfig+0xc0>
 8008a8e:	e014      	b.n	8008aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a90:	f7ff fba0 	bl	80081d4 <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a96:	e008      	b.n	8008aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a98:	f7ff fb9c 	bl	80081d4 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	2b64      	cmp	r3, #100	; 0x64
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e1f3      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aaa:	4b51      	ldr	r3, [pc, #324]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f0      	bne.n	8008a98 <HAL_RCC_OscConfig+0xe8>
 8008ab6:	e000      	b.n	8008aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d063      	beq.n	8008b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ac6:	4b4a      	ldr	r3, [pc, #296]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 030c 	and.w	r3, r3, #12
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00b      	beq.n	8008aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ad2:	4b47      	ldr	r3, [pc, #284]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d11c      	bne.n	8008b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ade:	4b44      	ldr	r3, [pc, #272]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d116      	bne.n	8008b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aea:	4b41      	ldr	r3, [pc, #260]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_RCC_OscConfig+0x152>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d001      	beq.n	8008b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e1c7      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b02:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4937      	ldr	r1, [pc, #220]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b16:	e03a      	b.n	8008b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d020      	beq.n	8008b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b20:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <HAL_RCC_OscConfig+0x244>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b26:	f7ff fb55 	bl	80081d4 <HAL_GetTick>
 8008b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b2c:	e008      	b.n	8008b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b2e:	f7ff fb51 	bl	80081d4 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d901      	bls.n	8008b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e1a8      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b40:	4b2b      	ldr	r3, [pc, #172]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0f0      	beq.n	8008b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b4c:	4b28      	ldr	r3, [pc, #160]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4925      	ldr	r1, [pc, #148]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	600b      	str	r3, [r1, #0]
 8008b60:	e015      	b.n	8008b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b62:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <HAL_RCC_OscConfig+0x244>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b68:	f7ff fb34 	bl	80081d4 <HAL_GetTick>
 8008b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b6e:	e008      	b.n	8008b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b70:	f7ff fb30 	bl	80081d4 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e187      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b82:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1f0      	bne.n	8008b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d036      	beq.n	8008c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d016      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ba2:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <HAL_RCC_OscConfig+0x248>)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba8:	f7ff fb14 	bl	80081d4 <HAL_GetTick>
 8008bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bb0:	f7ff fb10 	bl	80081d4 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e167      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bc2:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <HAL_RCC_OscConfig+0x240>)
 8008bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0f0      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x200>
 8008bce:	e01b      	b.n	8008c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <HAL_RCC_OscConfig+0x248>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bd6:	f7ff fafd 	bl	80081d4 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bdc:	e00e      	b.n	8008bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bde:	f7ff faf9 	bl	80081d4 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d907      	bls.n	8008bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e150      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	42470000 	.word	0x42470000
 8008bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bfc:	4b88      	ldr	r3, [pc, #544]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1ea      	bne.n	8008bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8097 	beq.w	8008d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c1a:	4b81      	ldr	r3, [pc, #516]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10f      	bne.n	8008c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]
 8008c2a:	4b7d      	ldr	r3, [pc, #500]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	4a7c      	ldr	r2, [pc, #496]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c34:	6413      	str	r3, [r2, #64]	; 0x40
 8008c36:	4b7a      	ldr	r3, [pc, #488]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c3e:	60bb      	str	r3, [r7, #8]
 8008c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c46:	4b77      	ldr	r3, [pc, #476]	; (8008e24 <HAL_RCC_OscConfig+0x474>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d118      	bne.n	8008c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c52:	4b74      	ldr	r3, [pc, #464]	; (8008e24 <HAL_RCC_OscConfig+0x474>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a73      	ldr	r2, [pc, #460]	; (8008e24 <HAL_RCC_OscConfig+0x474>)
 8008c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c5e:	f7ff fab9 	bl	80081d4 <HAL_GetTick>
 8008c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c64:	e008      	b.n	8008c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c66:	f7ff fab5 	bl	80081d4 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e10c      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c78:	4b6a      	ldr	r3, [pc, #424]	; (8008e24 <HAL_RCC_OscConfig+0x474>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f0      	beq.n	8008c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d106      	bne.n	8008c9a <HAL_RCC_OscConfig+0x2ea>
 8008c8c:	4b64      	ldr	r3, [pc, #400]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c90:	4a63      	ldr	r2, [pc, #396]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008c92:	f043 0301 	orr.w	r3, r3, #1
 8008c96:	6713      	str	r3, [r2, #112]	; 0x70
 8008c98:	e01c      	b.n	8008cd4 <HAL_RCC_OscConfig+0x324>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d10c      	bne.n	8008cbc <HAL_RCC_OscConfig+0x30c>
 8008ca2:	4b5f      	ldr	r3, [pc, #380]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca6:	4a5e      	ldr	r2, [pc, #376]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008ca8:	f043 0304 	orr.w	r3, r3, #4
 8008cac:	6713      	str	r3, [r2, #112]	; 0x70
 8008cae:	4b5c      	ldr	r3, [pc, #368]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb2:	4a5b      	ldr	r2, [pc, #364]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cba:	e00b      	b.n	8008cd4 <HAL_RCC_OscConfig+0x324>
 8008cbc:	4b58      	ldr	r3, [pc, #352]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	4a57      	ldr	r2, [pc, #348]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc8:	4b55      	ldr	r3, [pc, #340]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ccc:	4a54      	ldr	r2, [pc, #336]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cce:	f023 0304 	bic.w	r3, r3, #4
 8008cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d015      	beq.n	8008d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cdc:	f7ff fa7a 	bl	80081d4 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ce2:	e00a      	b.n	8008cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ce4:	f7ff fa76 	bl	80081d4 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e0cb      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cfa:	4b49      	ldr	r3, [pc, #292]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0ee      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x334>
 8008d06:	e014      	b.n	8008d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d08:	f7ff fa64 	bl	80081d4 <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d0e:	e00a      	b.n	8008d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d10:	f7ff fa60 	bl	80081d4 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e0b5      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d26:	4b3e      	ldr	r3, [pc, #248]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1ee      	bne.n	8008d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d105      	bne.n	8008d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d38:	4b39      	ldr	r3, [pc, #228]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	4a38      	ldr	r2, [pc, #224]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 80a1 	beq.w	8008e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d4e:	4b34      	ldr	r3, [pc, #208]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 030c 	and.w	r3, r3, #12
 8008d56:	2b08      	cmp	r3, #8
 8008d58:	d05c      	beq.n	8008e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d141      	bne.n	8008de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d62:	4b31      	ldr	r3, [pc, #196]	; (8008e28 <HAL_RCC_OscConfig+0x478>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d68:	f7ff fa34 	bl	80081d4 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d70:	f7ff fa30 	bl	80081d4 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e087      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d82:	4b27      	ldr	r3, [pc, #156]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f0      	bne.n	8008d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	019b      	lsls	r3, r3, #6
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	3b01      	subs	r3, #1
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	491b      	ldr	r1, [pc, #108]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008db8:	4b1b      	ldr	r3, [pc, #108]	; (8008e28 <HAL_RCC_OscConfig+0x478>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dbe:	f7ff fa09 	bl	80081d4 <HAL_GetTick>
 8008dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dc6:	f7ff fa05 	bl	80081d4 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e05c      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0f0      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x416>
 8008de4:	e054      	b.n	8008e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <HAL_RCC_OscConfig+0x478>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dec:	f7ff f9f2 	bl	80081d4 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008df4:	f7ff f9ee 	bl	80081d4 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e045      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <HAL_RCC_OscConfig+0x470>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f0      	bne.n	8008df4 <HAL_RCC_OscConfig+0x444>
 8008e12:	e03d      	b.n	8008e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e038      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
 8008e20:	40023800 	.word	0x40023800
 8008e24:	40007000 	.word	0x40007000
 8008e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <HAL_RCC_OscConfig+0x4ec>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d028      	beq.n	8008e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d121      	bne.n	8008e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d11a      	bne.n	8008e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d111      	bne.n	8008e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	3b01      	subs	r3, #1
 8008e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d001      	beq.n	8008e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e000      	b.n	8008e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3718      	adds	r7, #24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40023800 	.word	0x40023800

08008ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0cc      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008eb4:	4b68      	ldr	r3, [pc, #416]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d90c      	bls.n	8008edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec2:	4b65      	ldr	r3, [pc, #404]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eca:	4b63      	ldr	r3, [pc, #396]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d001      	beq.n	8008edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0b8      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d020      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ef4:	4b59      	ldr	r3, [pc, #356]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	4a58      	ldr	r2, [pc, #352]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0308 	and.w	r3, r3, #8
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f0c:	4b53      	ldr	r3, [pc, #332]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	4a52      	ldr	r2, [pc, #328]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f18:	4b50      	ldr	r3, [pc, #320]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	494d      	ldr	r1, [pc, #308]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d044      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f3e:	4b47      	ldr	r3, [pc, #284]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d119      	bne.n	8008f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e07f      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d003      	beq.n	8008f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d107      	bne.n	8008f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f5e:	4b3f      	ldr	r3, [pc, #252]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e06f      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f6e:	4b3b      	ldr	r3, [pc, #236]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e067      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f7e:	4b37      	ldr	r3, [pc, #220]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 0203 	bic.w	r2, r3, #3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4934      	ldr	r1, [pc, #208]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f90:	f7ff f920 	bl	80081d4 <HAL_GetTick>
 8008f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f96:	e00a      	b.n	8008fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f98:	f7ff f91c 	bl	80081d4 <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e04f      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fae:	4b2b      	ldr	r3, [pc, #172]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 020c 	and.w	r2, r3, #12
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d1eb      	bne.n	8008f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fc0:	4b25      	ldr	r3, [pc, #148]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0307 	and.w	r3, r3, #7
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d20c      	bcs.n	8008fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fce:	4b22      	ldr	r3, [pc, #136]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fd6:	4b20      	ldr	r3, [pc, #128]	; (8009058 <HAL_RCC_ClockConfig+0x1b8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d001      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e032      	b.n	800904e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ff4:	4b19      	ldr	r3, [pc, #100]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	4916      	ldr	r1, [pc, #88]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8009002:	4313      	orrs	r3, r2
 8009004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	490e      	ldr	r1, [pc, #56]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 8009022:	4313      	orrs	r3, r2
 8009024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009026:	f000 f821 	bl	800906c <HAL_RCC_GetSysClockFreq>
 800902a:	4602      	mov	r2, r0
 800902c:	4b0b      	ldr	r3, [pc, #44]	; (800905c <HAL_RCC_ClockConfig+0x1bc>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	091b      	lsrs	r3, r3, #4
 8009032:	f003 030f 	and.w	r3, r3, #15
 8009036:	490a      	ldr	r1, [pc, #40]	; (8009060 <HAL_RCC_ClockConfig+0x1c0>)
 8009038:	5ccb      	ldrb	r3, [r1, r3]
 800903a:	fa22 f303 	lsr.w	r3, r2, r3
 800903e:	4a09      	ldr	r2, [pc, #36]	; (8009064 <HAL_RCC_ClockConfig+0x1c4>)
 8009040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_RCC_ClockConfig+0x1c8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff f880 	bl	800814c <HAL_InitTick>

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40023c00 	.word	0x40023c00
 800905c:	40023800 	.word	0x40023800
 8009060:	08010060 	.word	0x08010060
 8009064:	2000007c 	.word	0x2000007c
 8009068:	20000080 	.word	0x20000080

0800906c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800906c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009070:	b094      	sub	sp, #80	; 0x50
 8009072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	647b      	str	r3, [r7, #68]	; 0x44
 8009078:	2300      	movs	r3, #0
 800907a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907c:	2300      	movs	r3, #0
 800907e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009084:	4b79      	ldr	r3, [pc, #484]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 030c 	and.w	r3, r3, #12
 800908c:	2b08      	cmp	r3, #8
 800908e:	d00d      	beq.n	80090ac <HAL_RCC_GetSysClockFreq+0x40>
 8009090:	2b08      	cmp	r3, #8
 8009092:	f200 80e1 	bhi.w	8009258 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_RCC_GetSysClockFreq+0x34>
 800909a:	2b04      	cmp	r3, #4
 800909c:	d003      	beq.n	80090a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800909e:	e0db      	b.n	8009258 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090a0:	4b73      	ldr	r3, [pc, #460]	; (8009270 <HAL_RCC_GetSysClockFreq+0x204>)
 80090a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80090a4:	e0db      	b.n	800925e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80090a6:	4b73      	ldr	r3, [pc, #460]	; (8009274 <HAL_RCC_GetSysClockFreq+0x208>)
 80090a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090aa:	e0d8      	b.n	800925e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090ac:	4b6f      	ldr	r3, [pc, #444]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090b6:	4b6d      	ldr	r3, [pc, #436]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d063      	beq.n	800918a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c2:	4b6a      	ldr	r3, [pc, #424]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	099b      	lsrs	r3, r3, #6
 80090c8:	2200      	movs	r2, #0
 80090ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80090cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d4:	633b      	str	r3, [r7, #48]	; 0x30
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
 80090da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f04f 0100 	mov.w	r1, #0
 80090ea:	0159      	lsls	r1, r3, #5
 80090ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090f0:	0150      	lsls	r0, r2, #5
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4621      	mov	r1, r4
 80090f8:	1a51      	subs	r1, r2, r1
 80090fa:	6139      	str	r1, [r7, #16]
 80090fc:	4629      	mov	r1, r5
 80090fe:	eb63 0301 	sbc.w	r3, r3, r1
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009110:	4659      	mov	r1, fp
 8009112:	018b      	lsls	r3, r1, #6
 8009114:	4651      	mov	r1, sl
 8009116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800911a:	4651      	mov	r1, sl
 800911c:	018a      	lsls	r2, r1, #6
 800911e:	4651      	mov	r1, sl
 8009120:	ebb2 0801 	subs.w	r8, r2, r1
 8009124:	4659      	mov	r1, fp
 8009126:	eb63 0901 	sbc.w	r9, r3, r1
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800913a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800913e:	4690      	mov	r8, r2
 8009140:	4699      	mov	r9, r3
 8009142:	4623      	mov	r3, r4
 8009144:	eb18 0303 	adds.w	r3, r8, r3
 8009148:	60bb      	str	r3, [r7, #8]
 800914a:	462b      	mov	r3, r5
 800914c:	eb49 0303 	adc.w	r3, r9, r3
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800915e:	4629      	mov	r1, r5
 8009160:	024b      	lsls	r3, r1, #9
 8009162:	4621      	mov	r1, r4
 8009164:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009168:	4621      	mov	r1, r4
 800916a:	024a      	lsls	r2, r1, #9
 800916c:	4610      	mov	r0, r2
 800916e:	4619      	mov	r1, r3
 8009170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009172:	2200      	movs	r2, #0
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
 8009176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800917c:	f7f7 fd64 	bl	8000c48 <__aeabi_uldivmod>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4613      	mov	r3, r2
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009188:	e058      	b.n	800923c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800918a:	4b38      	ldr	r3, [pc, #224]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	099b      	lsrs	r3, r3, #6
 8009190:	2200      	movs	r2, #0
 8009192:	4618      	mov	r0, r3
 8009194:	4611      	mov	r1, r2
 8009196:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800919a:	623b      	str	r3, [r7, #32]
 800919c:	2300      	movs	r3, #0
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	f04f 0000 	mov.w	r0, #0
 80091ac:	f04f 0100 	mov.w	r1, #0
 80091b0:	0159      	lsls	r1, r3, #5
 80091b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091b6:	0150      	lsls	r0, r2, #5
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4641      	mov	r1, r8
 80091be:	ebb2 0a01 	subs.w	sl, r2, r1
 80091c2:	4649      	mov	r1, r9
 80091c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80091d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80091d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80091dc:	ebb2 040a 	subs.w	r4, r2, sl
 80091e0:	eb63 050b 	sbc.w	r5, r3, fp
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	00eb      	lsls	r3, r5, #3
 80091ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091f2:	00e2      	lsls	r2, r4, #3
 80091f4:	4614      	mov	r4, r2
 80091f6:	461d      	mov	r5, r3
 80091f8:	4643      	mov	r3, r8
 80091fa:	18e3      	adds	r3, r4, r3
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	464b      	mov	r3, r9
 8009200:	eb45 0303 	adc.w	r3, r5, r3
 8009204:	607b      	str	r3, [r7, #4]
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	f04f 0300 	mov.w	r3, #0
 800920e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009212:	4629      	mov	r1, r5
 8009214:	028b      	lsls	r3, r1, #10
 8009216:	4621      	mov	r1, r4
 8009218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800921c:	4621      	mov	r1, r4
 800921e:	028a      	lsls	r2, r1, #10
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009226:	2200      	movs	r2, #0
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	61fa      	str	r2, [r7, #28]
 800922c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009230:	f7f7 fd0a 	bl	8000c48 <__aeabi_uldivmod>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4613      	mov	r3, r2
 800923a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <HAL_RCC_GetSysClockFreq+0x200>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	0c1b      	lsrs	r3, r3, #16
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	3301      	adds	r3, #1
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800924c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	fbb2 f3f3 	udiv	r3, r2, r3
 8009254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009256:	e002      	b.n	800925e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_RCC_GetSysClockFreq+0x204>)
 800925a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800925c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800925e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009260:	4618      	mov	r0, r3
 8009262:	3750      	adds	r7, #80	; 0x50
 8009264:	46bd      	mov	sp, r7
 8009266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800926a:	bf00      	nop
 800926c:	40023800 	.word	0x40023800
 8009270:	00f42400 	.word	0x00f42400
 8009274:	007a1200 	.word	0x007a1200

08009278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800927c:	4b03      	ldr	r3, [pc, #12]	; (800928c <HAL_RCC_GetHCLKFreq+0x14>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	2000007c 	.word	0x2000007c

08009290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009294:	f7ff fff0 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 8009298:	4602      	mov	r2, r0
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	0a9b      	lsrs	r3, r3, #10
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	4903      	ldr	r1, [pc, #12]	; (80092b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092a6:	5ccb      	ldrb	r3, [r1, r3]
 80092a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	40023800 	.word	0x40023800
 80092b4:	08010070 	.word	0x08010070

080092b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80092bc:	f7ff ffdc 	bl	8009278 <HAL_RCC_GetHCLKFreq>
 80092c0:	4602      	mov	r2, r0
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	0b5b      	lsrs	r3, r3, #13
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	4903      	ldr	r1, [pc, #12]	; (80092dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80092ce:	5ccb      	ldrb	r3, [r1, r3]
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	40023800 	.word	0x40023800
 80092dc:	08010070 	.word	0x08010070

080092e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009304:	2b00      	cmp	r3, #0
 8009306:	d038      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009308:	4b68      	ldr	r3, [pc, #416]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800930e:	f7fe ff61 	bl	80081d4 <HAL_GetTick>
 8009312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009314:	e008      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009316:	f7fe ff5d 	bl	80081d4 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e0bd      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009328:	4b61      	ldr	r3, [pc, #388]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	019b      	lsls	r3, r3, #6
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	071b      	lsls	r3, r3, #28
 8009346:	495a      	ldr	r1, [pc, #360]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009348:	4313      	orrs	r3, r2
 800934a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800934e:	4b57      	ldr	r3, [pc, #348]	; (80094ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009354:	f7fe ff3e 	bl	80081d4 <HAL_GetTick>
 8009358:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800935a:	e008      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800935c:	f7fe ff3a 	bl	80081d4 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e09a      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800936e:	4b50      	ldr	r3, [pc, #320]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f0      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 8083 	beq.w	800948e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	4b48      	ldr	r3, [pc, #288]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009390:	4a47      	ldr	r2, [pc, #284]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009396:	6413      	str	r3, [r2, #64]	; 0x40
 8009398:	4b45      	ldr	r3, [pc, #276]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800939a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80093a4:	4b43      	ldr	r3, [pc, #268]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a42      	ldr	r2, [pc, #264]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093b0:	f7fe ff10 	bl	80081d4 <HAL_GetTick>
 80093b4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093b6:	e008      	b.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093b8:	f7fe ff0c 	bl	80081d4 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d901      	bls.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e06c      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80093ca:	4b3a      	ldr	r3, [pc, #232]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f0      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093d6:	4b36      	ldr	r3, [pc, #216]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093de:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d02f      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d028      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093f4:	4b2e      	ldr	r3, [pc, #184]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093fc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093fe:	4b2e      	ldr	r3, [pc, #184]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009400:	2201      	movs	r2, #1
 8009402:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009404:	4b2c      	ldr	r3, [pc, #176]	; (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800940a:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009410:	4b27      	ldr	r3, [pc, #156]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b01      	cmp	r3, #1
 800941a:	d114      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800941c:	f7fe feda 	bl	80081d4 <HAL_GetTick>
 8009420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009422:	e00a      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009424:	f7fe fed6 	bl	80081d4 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009432:	4293      	cmp	r3, r2
 8009434:	d901      	bls.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e034      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800943a:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ee      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009452:	d10d      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009454:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009468:	4911      	ldr	r1, [pc, #68]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800946a:	4313      	orrs	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	e005      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009470:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	4a0e      	ldr	r2, [pc, #56]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800947a:	6093      	str	r3, [r2, #8]
 800947c:	4b0c      	ldr	r3, [pc, #48]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009488:	4909      	ldr	r1, [pc, #36]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948a:	4313      	orrs	r3, r2
 800948c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7d1a      	ldrb	r2, [r3, #20]
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80094a0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	42470068 	.word	0x42470068
 80094b0:	40023800 	.word	0x40023800
 80094b4:	40007000 	.word	0x40007000
 80094b8:	42470e40 	.word	0x42470e40
 80094bc:	424711e0 	.word	0x424711e0

080094c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e041      	b.n	8009556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d106      	bne.n	80094ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7fb fede 	bl	80052a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f000 ffce 	bl	800a4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d001      	beq.n	8009578 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e03c      	b.n	80095f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a1e      	ldr	r2, [pc, #120]	; (8009600 <HAL_TIM_Base_Start+0xa0>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d018      	beq.n	80095bc <HAL_TIM_Base_Start+0x5c>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009592:	d013      	beq.n	80095bc <HAL_TIM_Base_Start+0x5c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a1a      	ldr	r2, [pc, #104]	; (8009604 <HAL_TIM_Base_Start+0xa4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00e      	beq.n	80095bc <HAL_TIM_Base_Start+0x5c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a19      	ldr	r2, [pc, #100]	; (8009608 <HAL_TIM_Base_Start+0xa8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d009      	beq.n	80095bc <HAL_TIM_Base_Start+0x5c>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a17      	ldr	r2, [pc, #92]	; (800960c <HAL_TIM_Base_Start+0xac>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <HAL_TIM_Base_Start+0x5c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a16      	ldr	r2, [pc, #88]	; (8009610 <HAL_TIM_Base_Start+0xb0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d111      	bne.n	80095e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b06      	cmp	r3, #6
 80095cc:	d010      	beq.n	80095f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0201 	orr.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095de:	e007      	b.n	80095f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40000400 	.word	0x40000400
 8009608:	40000800 	.word	0x40000800
 800960c:	40000c00 	.word	0x40000c00
 8009610:	40014000 	.word	0x40014000

08009614 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a1a      	ldr	r2, [r3, #32]
 8009622:	f241 1311 	movw	r3, #4369	; 0x1111
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10f      	bne.n	800964c <HAL_TIM_Base_Stop+0x38>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a1a      	ldr	r2, [r3, #32]
 8009632:	f240 4344 	movw	r3, #1092	; 0x444
 8009636:	4013      	ands	r3, r2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d107      	bne.n	800964c <HAL_TIM_Base_Stop+0x38>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0201 	bic.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
	...

08009664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b01      	cmp	r3, #1
 8009676:	d001      	beq.n	800967c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e044      	b.n	8009706 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f042 0201 	orr.w	r2, r2, #1
 8009692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1e      	ldr	r2, [pc, #120]	; (8009714 <HAL_TIM_Base_Start_IT+0xb0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d018      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x6c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a6:	d013      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x6c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1a      	ldr	r2, [pc, #104]	; (8009718 <HAL_TIM_Base_Start_IT+0xb4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00e      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x6c>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a19      	ldr	r2, [pc, #100]	; (800971c <HAL_TIM_Base_Start_IT+0xb8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d009      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x6c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a17      	ldr	r2, [pc, #92]	; (8009720 <HAL_TIM_Base_Start_IT+0xbc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x6c>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a16      	ldr	r2, [pc, #88]	; (8009724 <HAL_TIM_Base_Start_IT+0xc0>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d111      	bne.n	80096f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b06      	cmp	r3, #6
 80096e0:	d010      	beq.n	8009704 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f2:	e007      	b.n	8009704 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	40010000 	.word	0x40010000
 8009718:	40000400 	.word	0x40000400
 800971c:	40000800 	.word	0x40000800
 8009720:	40000c00 	.word	0x40000c00
 8009724:	40014000 	.word	0x40014000

08009728 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0201 	bic.w	r2, r2, #1
 800973e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a1a      	ldr	r2, [r3, #32]
 8009746:	f241 1311 	movw	r3, #4369	; 0x1111
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10f      	bne.n	8009770 <HAL_TIM_Base_Stop_IT+0x48>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	f240 4344 	movw	r3, #1092	; 0x444
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d107      	bne.n	8009770 <HAL_TIM_Base_Stop_IT+0x48>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0201 	bic.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e041      	b.n	800981c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f839 	bl	8009824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2202      	movs	r2, #2
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3304      	adds	r3, #4
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f000 fe6b 	bl	800a4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d109      	bne.n	800985c <HAL_TIM_PWM_Start+0x24>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b01      	cmp	r3, #1
 8009852:	bf14      	ite	ne
 8009854:	2301      	movne	r3, #1
 8009856:	2300      	moveq	r3, #0
 8009858:	b2db      	uxtb	r3, r3
 800985a:	e022      	b.n	80098a2 <HAL_TIM_PWM_Start+0x6a>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b04      	cmp	r3, #4
 8009860:	d109      	bne.n	8009876 <HAL_TIM_PWM_Start+0x3e>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b01      	cmp	r3, #1
 800986c:	bf14      	ite	ne
 800986e:	2301      	movne	r3, #1
 8009870:	2300      	moveq	r3, #0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	e015      	b.n	80098a2 <HAL_TIM_PWM_Start+0x6a>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b08      	cmp	r3, #8
 800987a:	d109      	bne.n	8009890 <HAL_TIM_PWM_Start+0x58>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	bf14      	ite	ne
 8009888:	2301      	movne	r3, #1
 800988a:	2300      	moveq	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	e008      	b.n	80098a2 <HAL_TIM_PWM_Start+0x6a>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e068      	b.n	800997c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <HAL_TIM_PWM_Start+0x82>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b8:	e013      	b.n	80098e2 <HAL_TIM_PWM_Start+0xaa>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d104      	bne.n	80098ca <HAL_TIM_PWM_Start+0x92>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c8:	e00b      	b.n	80098e2 <HAL_TIM_PWM_Start+0xaa>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d104      	bne.n	80098da <HAL_TIM_PWM_Start+0xa2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098d8:	e003      	b.n	80098e2 <HAL_TIM_PWM_Start+0xaa>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2202      	movs	r2, #2
 80098de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 f99c 	bl	800ac28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a23      	ldr	r2, [pc, #140]	; (8009984 <HAL_TIM_PWM_Start+0x14c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d107      	bne.n	800990a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009908:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a1d      	ldr	r2, [pc, #116]	; (8009984 <HAL_TIM_PWM_Start+0x14c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d018      	beq.n	8009946 <HAL_TIM_PWM_Start+0x10e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800991c:	d013      	beq.n	8009946 <HAL_TIM_PWM_Start+0x10e>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a19      	ldr	r2, [pc, #100]	; (8009988 <HAL_TIM_PWM_Start+0x150>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00e      	beq.n	8009946 <HAL_TIM_PWM_Start+0x10e>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a17      	ldr	r2, [pc, #92]	; (800998c <HAL_TIM_PWM_Start+0x154>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d009      	beq.n	8009946 <HAL_TIM_PWM_Start+0x10e>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a16      	ldr	r2, [pc, #88]	; (8009990 <HAL_TIM_PWM_Start+0x158>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d004      	beq.n	8009946 <HAL_TIM_PWM_Start+0x10e>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a14      	ldr	r2, [pc, #80]	; (8009994 <HAL_TIM_PWM_Start+0x15c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d111      	bne.n	800996a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b06      	cmp	r3, #6
 8009956:	d010      	beq.n	800997a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0201 	orr.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009968:	e007      	b.n	800997a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0201 	orr.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40010000 	.word	0x40010000
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800
 8009990:	40000c00 	.word	0x40000c00
 8009994:	40014000 	.word	0x40014000

08009998 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2200      	movs	r2, #0
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 f93c 	bl	800ac28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a29      	ldr	r2, [pc, #164]	; (8009a5c <HAL_TIM_PWM_Stop+0xc4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d117      	bne.n	80099ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6a1a      	ldr	r2, [r3, #32]
 80099c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80099c4:	4013      	ands	r3, r2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10f      	bne.n	80099ea <HAL_TIM_PWM_Stop+0x52>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6a1a      	ldr	r2, [r3, #32]
 80099d0:	f240 4344 	movw	r3, #1092	; 0x444
 80099d4:	4013      	ands	r3, r2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d107      	bne.n	80099ea <HAL_TIM_PWM_Stop+0x52>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6a1a      	ldr	r2, [r3, #32]
 80099f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10f      	bne.n	8009a1a <HAL_TIM_PWM_Stop+0x82>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6a1a      	ldr	r2, [r3, #32]
 8009a00:	f240 4344 	movw	r3, #1092	; 0x444
 8009a04:	4013      	ands	r3, r2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d107      	bne.n	8009a1a <HAL_TIM_PWM_Stop+0x82>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0201 	bic.w	r2, r2, #1
 8009a18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <HAL_TIM_PWM_Stop+0x92>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a28:	e013      	b.n	8009a52 <HAL_TIM_PWM_Stop+0xba>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d104      	bne.n	8009a3a <HAL_TIM_PWM_Stop+0xa2>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a38:	e00b      	b.n	8009a52 <HAL_TIM_PWM_Stop+0xba>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_PWM_Stop+0xb2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a48:	e003      	b.n	8009a52 <HAL_TIM_PWM_Stop+0xba>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40010000 	.word	0x40010000

08009a60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e041      	b.n	8009af6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f839 	bl	8009afe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f000 fcfe 	bl	800a4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2200      	movs	r2, #0
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 f87f 	bl	800ac28 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6a1a      	ldr	r2, [r3, #32]
 8009b30:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b34:	4013      	ands	r3, r2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10f      	bne.n	8009b5a <HAL_TIM_IC_Stop+0x48>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6a1a      	ldr	r2, [r3, #32]
 8009b40:	f240 4344 	movw	r3, #1092	; 0x444
 8009b44:	4013      	ands	r3, r2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d107      	bne.n	8009b5a <HAL_TIM_IC_Stop+0x48>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f022 0201 	bic.w	r2, r2, #1
 8009b58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <HAL_TIM_IC_Stop+0x58>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b68:	e013      	b.n	8009b92 <HAL_TIM_IC_Stop+0x80>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d104      	bne.n	8009b7a <HAL_TIM_IC_Stop+0x68>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b78:	e00b      	b.n	8009b92 <HAL_TIM_IC_Stop+0x80>
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b08      	cmp	r3, #8
 8009b7e:	d104      	bne.n	8009b8a <HAL_TIM_IC_Stop+0x78>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b88:	e003      	b.n	8009b92 <HAL_TIM_IC_Stop+0x80>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <HAL_TIM_IC_Stop+0x90>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ba0:	e013      	b.n	8009bca <HAL_TIM_IC_Stop+0xb8>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d104      	bne.n	8009bb2 <HAL_TIM_IC_Stop+0xa0>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bb0:	e00b      	b.n	8009bca <HAL_TIM_IC_Stop+0xb8>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_IC_Stop+0xb0>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bc0:	e003      	b.n	8009bca <HAL_TIM_IC_Stop+0xb8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIM_IC_Start_IT+0x1e>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	e013      	b.n	8009c1a <HAL_TIM_IC_Start_IT+0x46>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d104      	bne.n	8009c02 <HAL_TIM_IC_Start_IT+0x2e>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e00b      	b.n	8009c1a <HAL_TIM_IC_Start_IT+0x46>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d104      	bne.n	8009c12 <HAL_TIM_IC_Start_IT+0x3e>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	e003      	b.n	8009c1a <HAL_TIM_IC_Start_IT+0x46>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <HAL_TIM_IC_Start_IT+0x58>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	e013      	b.n	8009c54 <HAL_TIM_IC_Start_IT+0x80>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d104      	bne.n	8009c3c <HAL_TIM_IC_Start_IT+0x68>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	e00b      	b.n	8009c54 <HAL_TIM_IC_Start_IT+0x80>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d104      	bne.n	8009c4c <HAL_TIM_IC_Start_IT+0x78>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	e003      	b.n	8009c54 <HAL_TIM_IC_Start_IT+0x80>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d102      	bne.n	8009c62 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c5c:	7b7b      	ldrb	r3, [r7, #13]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d001      	beq.n	8009c66 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e0c2      	b.n	8009dec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIM_IC_Start_IT+0xa2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c74:	e013      	b.n	8009c9e <HAL_TIM_IC_Start_IT+0xca>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d104      	bne.n	8009c86 <HAL_TIM_IC_Start_IT+0xb2>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c84:	e00b      	b.n	8009c9e <HAL_TIM_IC_Start_IT+0xca>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d104      	bne.n	8009c96 <HAL_TIM_IC_Start_IT+0xc2>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c94:	e003      	b.n	8009c9e <HAL_TIM_IC_Start_IT+0xca>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <HAL_TIM_IC_Start_IT+0xda>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cac:	e013      	b.n	8009cd6 <HAL_TIM_IC_Start_IT+0x102>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d104      	bne.n	8009cbe <HAL_TIM_IC_Start_IT+0xea>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cbc:	e00b      	b.n	8009cd6 <HAL_TIM_IC_Start_IT+0x102>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d104      	bne.n	8009cce <HAL_TIM_IC_Start_IT+0xfa>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ccc:	e003      	b.n	8009cd6 <HAL_TIM_IC_Start_IT+0x102>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b0c      	cmp	r3, #12
 8009cda:	d841      	bhi.n	8009d60 <HAL_TIM_IC_Start_IT+0x18c>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <HAL_TIM_IC_Start_IT+0x110>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d19 	.word	0x08009d19
 8009ce8:	08009d61 	.word	0x08009d61
 8009cec:	08009d61 	.word	0x08009d61
 8009cf0:	08009d61 	.word	0x08009d61
 8009cf4:	08009d2b 	.word	0x08009d2b
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009d61 	.word	0x08009d61
 8009d00:	08009d61 	.word	0x08009d61
 8009d04:	08009d3d 	.word	0x08009d3d
 8009d08:	08009d61 	.word	0x08009d61
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009d61 	.word	0x08009d61
 8009d14:	08009d4f 	.word	0x08009d4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0202 	orr.w	r2, r2, #2
 8009d26:	60da      	str	r2, [r3, #12]
      break;
 8009d28:	e01d      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f042 0204 	orr.w	r2, r2, #4
 8009d38:	60da      	str	r2, [r3, #12]
      break;
 8009d3a:	e014      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0208 	orr.w	r2, r2, #8
 8009d4a:	60da      	str	r2, [r3, #12]
      break;
 8009d4c:	e00b      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0210 	orr.w	r2, r2, #16
 8009d5c:	60da      	str	r2, [r3, #12]
      break;
 8009d5e:	e002      	b.n	8009d66 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	73fb      	strb	r3, [r7, #15]
      break;
 8009d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d13e      	bne.n	8009dea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2201      	movs	r2, #1
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 ff57 	bl	800ac28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a1d      	ldr	r2, [pc, #116]	; (8009df4 <HAL_TIM_IC_Start_IT+0x220>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d018      	beq.n	8009db6 <HAL_TIM_IC_Start_IT+0x1e2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8c:	d013      	beq.n	8009db6 <HAL_TIM_IC_Start_IT+0x1e2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a19      	ldr	r2, [pc, #100]	; (8009df8 <HAL_TIM_IC_Start_IT+0x224>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00e      	beq.n	8009db6 <HAL_TIM_IC_Start_IT+0x1e2>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a17      	ldr	r2, [pc, #92]	; (8009dfc <HAL_TIM_IC_Start_IT+0x228>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d009      	beq.n	8009db6 <HAL_TIM_IC_Start_IT+0x1e2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a16      	ldr	r2, [pc, #88]	; (8009e00 <HAL_TIM_IC_Start_IT+0x22c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <HAL_TIM_IC_Start_IT+0x1e2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a14      	ldr	r2, [pc, #80]	; (8009e04 <HAL_TIM_IC_Start_IT+0x230>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d111      	bne.n	8009dda <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 0307 	and.w	r3, r3, #7
 8009dc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b06      	cmp	r3, #6
 8009dc6:	d010      	beq.n	8009dea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd8:	e007      	b.n	8009dea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f042 0201 	orr.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40000400 	.word	0x40000400
 8009dfc:	40000800 	.word	0x40000800
 8009e00:	40000c00 	.word	0x40000c00
 8009e04:	40014000 	.word	0x40014000

08009e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d122      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d11b      	bne.n	8009e64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f06f 0202 	mvn.w	r2, #2
 8009e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fa fa38 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8009e50:	e005      	b.n	8009e5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fb05 	bl	800a462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb0c 	bl	800a476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f003 0304 	and.w	r3, r3, #4
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d122      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d11b      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0204 	mvn.w	r2, #4
 8009e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fa fa0e 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8009ea4:	e005      	b.n	8009eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fadb 	bl	800a462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fae2 	bl	800a476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b08      	cmp	r3, #8
 8009ec4:	d122      	bne.n	8009f0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d11b      	bne.n	8009f0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0208 	mvn.w	r2, #8
 8009edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7fa f9e4 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8009ef8:	e005      	b.n	8009f06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fab1 	bl	800a462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fab8 	bl	800a476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	f003 0310 	and.w	r3, r3, #16
 8009f16:	2b10      	cmp	r3, #16
 8009f18:	d122      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b10      	cmp	r3, #16
 8009f26:	d11b      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f06f 0210 	mvn.w	r2, #16
 8009f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2208      	movs	r2, #8
 8009f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fa f9ba 	bl	80042c0 <HAL_TIM_IC_CaptureCallback>
 8009f4c:	e005      	b.n	8009f5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa87 	bl	800a462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa8e 	bl	800a476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d10e      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d107      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0201 	mvn.w	r2, #1
 8009f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7fa f9ee 	bl	8004368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f96:	2b80      	cmp	r3, #128	; 0x80
 8009f98:	d10e      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa4:	2b80      	cmp	r3, #128	; 0x80
 8009fa6:	d107      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 ff28 	bl	800ae08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b40      	cmp	r3, #64	; 0x40
 8009fd2:	d107      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fa53 	bl	800a48a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0220 	mvn.w	r2, #32
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fef2 	bl	800adf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a032:	2302      	movs	r3, #2
 800a034:	e088      	b.n	800a148 <HAL_TIM_IC_ConfigChannel+0x130>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11b      	bne.n	800a07c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f000 fc30 	bl	800a8b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	699a      	ldr	r2, [r3, #24]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 020c 	bic.w	r2, r2, #12
 800a066:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6999      	ldr	r1, [r3, #24]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	619a      	str	r2, [r3, #24]
 800a07a:	e060      	b.n	800a13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d11c      	bne.n	800a0bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	f000 fca8 	bl	800a9e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a0a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6999      	ldr	r1, [r3, #24]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	021a      	lsls	r2, r3, #8
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	619a      	str	r2, [r3, #24]
 800a0ba:	e040      	b.n	800a13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d11b      	bne.n	800a0fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6819      	ldr	r1, [r3, #0]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f000 fcf5 	bl	800aac0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 020c 	bic.w	r2, r2, #12
 800a0e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69d9      	ldr	r1, [r3, #28]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	61da      	str	r2, [r3, #28]
 800a0f8:	e021      	b.n	800a13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b0c      	cmp	r3, #12
 800a0fe:	d11c      	bne.n	800a13a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6819      	ldr	r1, [r3, #0]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f000 fd12 	bl	800ab38 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a122:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69d9      	ldr	r1, [r3, #28]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	021a      	lsls	r2, r3, #8
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	61da      	str	r2, [r3, #28]
 800a138:	e001      	b.n	800a13e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a166:	2b01      	cmp	r3, #1
 800a168:	d101      	bne.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a16a:	2302      	movs	r3, #2
 800a16c:	e0ae      	b.n	800a2cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b0c      	cmp	r3, #12
 800a17a:	f200 809f 	bhi.w	800a2bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1b9 	.word	0x0800a1b9
 800a188:	0800a2bd 	.word	0x0800a2bd
 800a18c:	0800a2bd 	.word	0x0800a2bd
 800a190:	0800a2bd 	.word	0x0800a2bd
 800a194:	0800a1f9 	.word	0x0800a1f9
 800a198:	0800a2bd 	.word	0x0800a2bd
 800a19c:	0800a2bd 	.word	0x0800a2bd
 800a1a0:	0800a2bd 	.word	0x0800a2bd
 800a1a4:	0800a23b 	.word	0x0800a23b
 800a1a8:	0800a2bd 	.word	0x0800a2bd
 800a1ac:	0800a2bd 	.word	0x0800a2bd
 800a1b0:	0800a2bd 	.word	0x0800a2bd
 800a1b4:	0800a27b 	.word	0x0800a27b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f9ee 	bl	800a5a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0208 	orr.w	r2, r2, #8
 800a1d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699a      	ldr	r2, [r3, #24]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 0204 	bic.w	r2, r2, #4
 800a1e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6999      	ldr	r1, [r3, #24]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	619a      	str	r2, [r3, #24]
      break;
 800a1f6:	e064      	b.n	800a2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fa34 	bl	800a66c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	699a      	ldr	r2, [r3, #24]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6999      	ldr	r1, [r3, #24]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	021a      	lsls	r2, r3, #8
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	619a      	str	r2, [r3, #24]
      break;
 800a238:	e043      	b.n	800a2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fa7f 	bl	800a744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69da      	ldr	r2, [r3, #28]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f042 0208 	orr.w	r2, r2, #8
 800a254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	69da      	ldr	r2, [r3, #28]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0204 	bic.w	r2, r2, #4
 800a264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69d9      	ldr	r1, [r3, #28]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	691a      	ldr	r2, [r3, #16]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	61da      	str	r2, [r3, #28]
      break;
 800a278:	e023      	b.n	800a2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fac9 	bl	800a818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	69da      	ldr	r2, [r3, #28]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69da      	ldr	r2, [r3, #28]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69d9      	ldr	r1, [r3, #28]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	021a      	lsls	r2, r3, #8
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	61da      	str	r2, [r3, #28]
      break;
 800a2ba:	e002      	b.n	800a2c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d101      	bne.n	800a2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e0b4      	b.n	800a45a <HAL_TIM_ConfigClockSource+0x186>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a328:	d03e      	beq.n	800a3a8 <HAL_TIM_ConfigClockSource+0xd4>
 800a32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a32e:	f200 8087 	bhi.w	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a336:	f000 8086 	beq.w	800a446 <HAL_TIM_ConfigClockSource+0x172>
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33e:	d87f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a340:	2b70      	cmp	r3, #112	; 0x70
 800a342:	d01a      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0xa6>
 800a344:	2b70      	cmp	r3, #112	; 0x70
 800a346:	d87b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a348:	2b60      	cmp	r3, #96	; 0x60
 800a34a:	d050      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x11a>
 800a34c:	2b60      	cmp	r3, #96	; 0x60
 800a34e:	d877      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a350:	2b50      	cmp	r3, #80	; 0x50
 800a352:	d03c      	beq.n	800a3ce <HAL_TIM_ConfigClockSource+0xfa>
 800a354:	2b50      	cmp	r3, #80	; 0x50
 800a356:	d873      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a358:	2b40      	cmp	r3, #64	; 0x40
 800a35a:	d058      	beq.n	800a40e <HAL_TIM_ConfigClockSource+0x13a>
 800a35c:	2b40      	cmp	r3, #64	; 0x40
 800a35e:	d86f      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a360:	2b30      	cmp	r3, #48	; 0x30
 800a362:	d064      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x15a>
 800a364:	2b30      	cmp	r3, #48	; 0x30
 800a366:	d86b      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d060      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x15a>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d867      	bhi.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05c      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x15a>
 800a374:	2b10      	cmp	r3, #16
 800a376:	d05a      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0x15a>
 800a378:	e062      	b.n	800a440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6899      	ldr	r1, [r3, #8]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f000 fc2d 	bl	800abe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a39c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	609a      	str	r2, [r3, #8]
      break;
 800a3a6:	e04f      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6899      	ldr	r1, [r3, #8]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f000 fc16 	bl	800abe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3ca:	609a      	str	r2, [r3, #8]
      break;
 800a3cc:	e03c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6859      	ldr	r1, [r3, #4]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f000 fad4 	bl	800a988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2150      	movs	r1, #80	; 0x50
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fbe3 	bl	800abb2 <TIM_ITRx_SetConfig>
      break;
 800a3ec:	e02c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6859      	ldr	r1, [r3, #4]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f000 fb30 	bl	800aa60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2160      	movs	r1, #96	; 0x60
 800a406:	4618      	mov	r0, r3
 800a408:	f000 fbd3 	bl	800abb2 <TIM_ITRx_SetConfig>
      break;
 800a40c:	e01c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6859      	ldr	r1, [r3, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f000 fab4 	bl	800a988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2140      	movs	r1, #64	; 0x40
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fbc3 	bl	800abb2 <TIM_ITRx_SetConfig>
      break;
 800a42c:	e00c      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f000 fbba 	bl	800abb2 <TIM_ITRx_SetConfig>
      break;
 800a43e:	e003      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
      break;
 800a444:	e000      	b.n	800a448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a46a:	bf00      	nop
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a476:	b480      	push	{r7}
 800a478:	b083      	sub	sp, #12
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a492:	bf00      	nop
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
	...

0800a4a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a34      	ldr	r2, [pc, #208]	; (800a584 <TIM_Base_SetConfig+0xe4>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00f      	beq.n	800a4d8 <TIM_Base_SetConfig+0x38>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4be:	d00b      	beq.n	800a4d8 <TIM_Base_SetConfig+0x38>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a31      	ldr	r2, [pc, #196]	; (800a588 <TIM_Base_SetConfig+0xe8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d007      	beq.n	800a4d8 <TIM_Base_SetConfig+0x38>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a30      	ldr	r2, [pc, #192]	; (800a58c <TIM_Base_SetConfig+0xec>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_Base_SetConfig+0x38>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a2f      	ldr	r2, [pc, #188]	; (800a590 <TIM_Base_SetConfig+0xf0>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d108      	bne.n	800a4ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a25      	ldr	r2, [pc, #148]	; (800a584 <TIM_Base_SetConfig+0xe4>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d01b      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f8:	d017      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a22      	ldr	r2, [pc, #136]	; (800a588 <TIM_Base_SetConfig+0xe8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d013      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a21      	ldr	r2, [pc, #132]	; (800a58c <TIM_Base_SetConfig+0xec>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00f      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a20      	ldr	r2, [pc, #128]	; (800a590 <TIM_Base_SetConfig+0xf0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00b      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1f      	ldr	r2, [pc, #124]	; (800a594 <TIM_Base_SetConfig+0xf4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d007      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1e      	ldr	r2, [pc, #120]	; (800a598 <TIM_Base_SetConfig+0xf8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_Base_SetConfig+0x8a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a1d      	ldr	r2, [pc, #116]	; (800a59c <TIM_Base_SetConfig+0xfc>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d108      	bne.n	800a53c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a08      	ldr	r2, [pc, #32]	; (800a584 <TIM_Base_SetConfig+0xe4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d103      	bne.n	800a570 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	691a      	ldr	r2, [r3, #16]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	615a      	str	r2, [r3, #20]
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40010000 	.word	0x40010000
 800a588:	40000400 	.word	0x40000400
 800a58c:	40000800 	.word	0x40000800
 800a590:	40000c00 	.word	0x40000c00
 800a594:	40014000 	.word	0x40014000
 800a598:	40014400 	.word	0x40014400
 800a59c:	40014800 	.word	0x40014800

0800a5a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0303 	bic.w	r3, r3, #3
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f023 0302 	bic.w	r3, r3, #2
 800a5e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a1c      	ldr	r2, [pc, #112]	; (800a668 <TIM_OC1_SetConfig+0xc8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d10c      	bne.n	800a616 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f023 0308 	bic.w	r3, r3, #8
 800a602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f023 0304 	bic.w	r3, r3, #4
 800a614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a13      	ldr	r2, [pc, #76]	; (800a668 <TIM_OC1_SetConfig+0xc8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d111      	bne.n	800a642 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a62c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	4313      	orrs	r3, r2
 800a636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	4313      	orrs	r3, r2
 800a640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	621a      	str	r2, [r3, #32]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	40010000 	.word	0x40010000

0800a66c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f023 0210 	bic.w	r2, r3, #16
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f023 0320 	bic.w	r3, r3, #32
 800a6b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	011b      	lsls	r3, r3, #4
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a1e      	ldr	r2, [pc, #120]	; (800a740 <TIM_OC2_SetConfig+0xd4>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10d      	bne.n	800a6e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <TIM_OC2_SetConfig+0xd4>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d113      	bne.n	800a718 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4313      	orrs	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	4313      	orrs	r3, r2
 800a716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	621a      	str	r2, [r3, #32]
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40010000 	.word	0x40010000

0800a744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a78c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <TIM_OC3_SetConfig+0xd0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d10d      	bne.n	800a7be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a14      	ldr	r2, [pc, #80]	; (800a814 <TIM_OC3_SetConfig+0xd0>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d113      	bne.n	800a7ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	621a      	str	r2, [r3, #32]
}
 800a808:	bf00      	nop
 800a80a:	371c      	adds	r7, #28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	40010000 	.word	0x40010000

0800a818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	021b      	lsls	r3, r3, #8
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	4313      	orrs	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	031b      	lsls	r3, r3, #12
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <TIM_OC4_SetConfig+0x9c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d109      	bne.n	800a88c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a87e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	019b      	lsls	r3, r3, #6
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	4313      	orrs	r3, r2
 800a88a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010000 	.word	0x40010000

0800a8b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f023 0201 	bic.w	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4a24      	ldr	r2, [pc, #144]	; (800a974 <TIM_TI1_SetConfig+0xbc>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d013      	beq.n	800a90e <TIM_TI1_SetConfig+0x56>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ec:	d00f      	beq.n	800a90e <TIM_TI1_SetConfig+0x56>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	4a21      	ldr	r2, [pc, #132]	; (800a978 <TIM_TI1_SetConfig+0xc0>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00b      	beq.n	800a90e <TIM_TI1_SetConfig+0x56>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4a20      	ldr	r2, [pc, #128]	; (800a97c <TIM_TI1_SetConfig+0xc4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d007      	beq.n	800a90e <TIM_TI1_SetConfig+0x56>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4a1f      	ldr	r2, [pc, #124]	; (800a980 <TIM_TI1_SetConfig+0xc8>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_TI1_SetConfig+0x56>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a1e      	ldr	r2, [pc, #120]	; (800a984 <TIM_TI1_SetConfig+0xcc>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d101      	bne.n	800a912 <TIM_TI1_SetConfig+0x5a>
 800a90e:	2301      	movs	r3, #1
 800a910:	e000      	b.n	800a914 <TIM_TI1_SetConfig+0x5c>
 800a912:	2300      	movs	r3, #0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d008      	beq.n	800a92a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4313      	orrs	r3, r2
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e003      	b.n	800a932 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f023 030a 	bic.w	r3, r3, #10
 800a94c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	f003 030a 	and.w	r3, r3, #10
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	4313      	orrs	r3, r2
 800a958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	621a      	str	r2, [r3, #32]
}
 800a966:	bf00      	nop
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	40010000 	.word	0x40010000
 800a978:	40000400 	.word	0x40000400
 800a97c:	40000800 	.word	0x40000800
 800a980:	40000c00 	.word	0x40000c00
 800a984:	40014000 	.word	0x40014000

0800a988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f023 0201 	bic.w	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f023 030a 	bic.w	r3, r3, #10
 800a9c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	621a      	str	r2, [r3, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b087      	sub	sp, #28
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	607a      	str	r2, [r7, #4]
 800a9f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	f023 0210 	bic.w	r2, r3, #16
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	031b      	lsls	r3, r3, #12
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	621a      	str	r2, [r3, #32]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	f023 0210 	bic.w	r2, r3, #16
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	031b      	lsls	r3, r3, #12
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	621a      	str	r2, [r3, #32]
}
 800aab4:	bf00      	nop
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aafc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	011b      	lsls	r3, r3, #4
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	621a      	str	r2, [r3, #32]
}
 800ab2c:	bf00      	nop
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	69db      	ldr	r3, [r3, #28]
 800ab56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	031b      	lsls	r3, r3, #12
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	031b      	lsls	r3, r3, #12
 800ab90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	621a      	str	r2, [r3, #32]
}
 800aba6:	bf00      	nop
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4313      	orrs	r3, r2
 800abd0:	f043 0307 	orr.w	r3, r3, #7
 800abd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	609a      	str	r2, [r3, #8]
}
 800abdc:	bf00      	nop
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	021a      	lsls	r2, r3, #8
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	609a      	str	r2, [r3, #8]
}
 800ac1c:	bf00      	nop
 800ac1e:	371c      	adds	r7, #28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f003 031f 	and.w	r3, r3, #31
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	43db      	mvns	r3, r3
 800ac4a:	401a      	ands	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a1a      	ldr	r2, [r3, #32]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f003 031f 	and.w	r3, r3, #31
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac60:	431a      	orrs	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
}
 800ac66:	bf00      	nop
 800ac68:	371c      	adds	r7, #28
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
	...

0800ac74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d101      	bne.n	800ac8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac88:	2302      	movs	r3, #2
 800ac8a:	e050      	b.n	800ad2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a1c      	ldr	r2, [pc, #112]	; (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d018      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd8:	d013      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a18      	ldr	r2, [pc, #96]	; (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00e      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a16      	ldr	r2, [pc, #88]	; (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d009      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a15      	ldr	r2, [pc, #84]	; (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d004      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a13      	ldr	r2, [pc, #76]	; (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d10c      	bne.n	800ad1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40000400 	.word	0x40000400
 800ad44:	40000800 	.word	0x40000800
 800ad48:	40000c00 	.word	0x40000c00
 800ad4c:	40014000 	.word	0x40014000

0800ad50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d101      	bne.n	800ad6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e03d      	b.n	800ade8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e03f      	b.n	800aeae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d106      	bne.n	800ae48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fa fc28 	bl	8005698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2224      	movs	r2, #36	; 0x24
 800ae4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fdd5 	bl	800ba10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b08a      	sub	sp, #40	; 0x28
 800aeba:	af02      	add	r7, sp, #8
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	603b      	str	r3, [r7, #0]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d17c      	bne.n	800afd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <HAL_UART_Transmit+0x2c>
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e075      	b.n	800afd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_UART_Transmit+0x3e>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e06e      	b.n	800afd2 <HAL_UART_Transmit+0x11c>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2221      	movs	r2, #33	; 0x21
 800af06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af0a:	f7fd f963 	bl	80081d4 <HAL_GetTick>
 800af0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	88fa      	ldrh	r2, [r7, #6]
 800af14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	88fa      	ldrh	r2, [r7, #6]
 800af1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af24:	d108      	bne.n	800af38 <HAL_UART_Transmit+0x82>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d104      	bne.n	800af38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	e003      	b.n	800af40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800af48:	e02a      	b.n	800afa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2200      	movs	r2, #0
 800af52:	2180      	movs	r1, #128	; 0x80
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fb15 	bl	800b584 <UART_WaitOnFlagUntilTimeout>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e036      	b.n	800afd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	3302      	adds	r3, #2
 800af7e:	61bb      	str	r3, [r7, #24]
 800af80:	e007      	b.n	800af92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	781a      	ldrb	r2, [r3, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	3301      	adds	r3, #1
 800af90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af96:	b29b      	uxth	r3, r3
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1cf      	bne.n	800af4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2200      	movs	r2, #0
 800afb2:	2140      	movs	r1, #64	; 0x40
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 fae5 	bl	800b584 <UART_WaitOnFlagUntilTimeout>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e006      	b.n	800afd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	e000      	b.n	800afd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800afd0:	2302      	movs	r3, #2
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3720      	adds	r7, #32
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	4613      	mov	r3, r2
 800afe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d11d      	bne.n	800b030 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <HAL_UART_Receive_IT+0x26>
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e016      	b.n	800b032 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <HAL_UART_Receive_IT+0x38>
 800b00e:	2302      	movs	r3, #2
 800b010:	e00f      	b.n	800b032 <HAL_UART_Receive_IT+0x58>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	461a      	mov	r2, r3
 800b024:	68b9      	ldr	r1, [r7, #8]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 fb1a 	bl	800b660 <UART_Start_Receive_IT>
 800b02c:	4603      	mov	r3, r0
 800b02e:	e000      	b.n	800b032 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b030:	2302      	movs	r3, #2
  }
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b0ba      	sub	sp, #232	; 0xe8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b068:	2300      	movs	r3, #0
 800b06a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b07a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10f      	bne.n	800b0a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x66>
 800b08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fbfd 	bl	800b89a <UART_Receive_IT>
      return;
 800b0a0:	e256      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 80de 	beq.w	800b268 <HAL_UART_IRQHandler+0x22c>
 800b0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80d1 	beq.w	800b268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <HAL_UART_IRQHandler+0xae>
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	f043 0201 	orr.w	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00b      	beq.n	800b10e <HAL_UART_IRQHandler+0xd2>
 800b0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	f043 0202 	orr.w	r2, r3, #2
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <HAL_UART_IRQHandler+0xf6>
 800b11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	f043 0204 	orr.w	r2, r3, #4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d011      	beq.n	800b162 <HAL_UART_IRQHandler+0x126>
 800b13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d105      	bne.n	800b156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	f043 0208 	orr.w	r2, r3, #8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	f000 81ed 	beq.w	800b546 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b170:	f003 0320 	and.w	r3, r3, #32
 800b174:	2b00      	cmp	r3, #0
 800b176:	d008      	beq.n	800b18a <HAL_UART_IRQHandler+0x14e>
 800b178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fb88 	bl	800b89a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b194:	2b40      	cmp	r3, #64	; 0x40
 800b196:	bf0c      	ite	eq
 800b198:	2301      	moveq	r3, #1
 800b19a:	2300      	movne	r3, #0
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <HAL_UART_IRQHandler+0x17a>
 800b1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d04f      	beq.n	800b256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa90 	bl	800b6dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b40      	cmp	r3, #64	; 0x40
 800b1c8:	d141      	bne.n	800b24e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3314      	adds	r3, #20
 800b1d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3314      	adds	r3, #20
 800b1f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1d9      	bne.n	800b1ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b222:	4a7d      	ldr	r2, [pc, #500]	; (800b418 <HAL_UART_IRQHandler+0x3dc>)
 800b224:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd f9b5 	bl	800859a <HAL_DMA_Abort_IT>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d016      	beq.n	800b264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b240:	4610      	mov	r0, r2
 800b242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b244:	e00e      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f986 	bl	800b558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24c:	e00a      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f982 	bl	800b558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b254:	e006      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f97e 	bl	800b558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b262:	e170      	b.n	800b546 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b264:	bf00      	nop
    return;
 800b266:	e16e      	b.n	800b546 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 814a 	bne.w	800b506 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b276:	f003 0310 	and.w	r3, r3, #16
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 8143 	beq.w	800b506 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b284:	f003 0310 	and.w	r3, r3, #16
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 813c 	beq.w	800b506 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60bb      	str	r3, [r7, #8]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	60bb      	str	r3, [r7, #8]
 800b2a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ae:	2b40      	cmp	r3, #64	; 0x40
 800b2b0:	f040 80b4 	bne.w	800b41c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 8140 	beq.w	800b54a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	f080 8139 	bcs.w	800b54a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ea:	f000 8088 	beq.w	800b3fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	330c      	adds	r3, #12
 800b2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b30c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	330c      	adds	r3, #12
 800b316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b31a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b31e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1d9      	bne.n	800b2ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3314      	adds	r3, #20
 800b340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b34a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34c:	f023 0301 	bic.w	r3, r3, #1
 800b350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3314      	adds	r3, #20
 800b35a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b35e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e1      	bne.n	800b33a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3314      	adds	r3, #20
 800b37c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b38c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3314      	adds	r3, #20
 800b396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b39a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b39c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e3      	bne.n	800b376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ce:	f023 0310 	bic.w	r3, r3, #16
 800b3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	330c      	adds	r3, #12
 800b3dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b3e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b3e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3e8:	e841 2300 	strex	r3, r2, [r1]
 800b3ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e3      	bne.n	800b3bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd f85e 	bl	80084ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b406:	b29b      	uxth	r3, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f8ac 	bl	800b56c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b414:	e099      	b.n	800b54a <HAL_UART_IRQHandler+0x50e>
 800b416:	bf00      	nop
 800b418:	0800b7a3 	.word	0x0800b7a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b424:	b29b      	uxth	r3, r3
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b430:	b29b      	uxth	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 808b 	beq.w	800b54e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8086 	beq.w	800b54e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	330c      	adds	r3, #12
 800b448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	330c      	adds	r3, #12
 800b462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b466:	647a      	str	r2, [r7, #68]	; 0x44
 800b468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b46c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e3      	bne.n	800b442 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3314      	adds	r3, #20
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3314      	adds	r3, #20
 800b49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b49e:	633a      	str	r2, [r7, #48]	; 0x30
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e3      	bne.n	800b47a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0310 	bic.w	r3, r3, #16
 800b4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4e4:	61fa      	str	r2, [r7, #28]
 800b4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	69b9      	ldr	r1, [r7, #24]
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e3      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f834 	bl	800b56c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b504:	e023      	b.n	800b54e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <HAL_UART_IRQHandler+0x4ea>
 800b512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f953 	bl	800b7ca <UART_Transmit_IT>
    return;
 800b524:	e014      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00e      	beq.n	800b550 <HAL_UART_IRQHandler+0x514>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d008      	beq.n	800b550 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f993 	bl	800b86a <UART_EndTransmit_IT>
    return;
 800b544:	e004      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
    return;
 800b546:	bf00      	nop
 800b548:	e002      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
      return;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
      return;
 800b54e:	bf00      	nop
  }
}
 800b550:	37e8      	adds	r7, #232	; 0xe8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop

0800b558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b090      	sub	sp, #64	; 0x40
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b594:	e050      	b.n	800b638 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d04c      	beq.n	800b638 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d007      	beq.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5a4:	f7fc fe16 	bl	80081d4 <HAL_GetTick>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d241      	bcs.n	800b638 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5d4:	637a      	str	r2, [r7, #52]	; 0x34
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e5      	bne.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3314      	adds	r3, #20
 800b5ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f023 0301 	bic.w	r3, r3, #1
 800b5fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3314      	adds	r3, #20
 800b606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b608:	623a      	str	r2, [r7, #32]
 800b60a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69f9      	ldr	r1, [r7, #28]
 800b60e:	6a3a      	ldr	r2, [r7, #32]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	61bb      	str	r3, [r7, #24]
   return(result);
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2220      	movs	r2, #32
 800b620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e00f      	b.n	800b658 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	4013      	ands	r3, r2
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	429a      	cmp	r2, r3
 800b646:	bf0c      	ite	eq
 800b648:	2301      	moveq	r3, #1
 800b64a:	2300      	movne	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	429a      	cmp	r2, r3
 800b654:	d09f      	beq.n	800b596 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3740      	adds	r7, #64	; 0x40
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	88fa      	ldrh	r2, [r7, #6]
 800b678:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	88fa      	ldrh	r2, [r7, #6]
 800b67e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2222      	movs	r2, #34	; 0x22
 800b68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d007      	beq.n	800b6ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	695a      	ldr	r2, [r3, #20]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f042 0201 	orr.w	r2, r2, #1
 800b6bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68da      	ldr	r2, [r3, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f042 0220 	orr.w	r2, r2, #32
 800b6cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b095      	sub	sp, #84	; 0x54
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b704:	643a      	str	r2, [r7, #64]	; 0x40
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b70a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e5      	bne.n	800b6e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3314      	adds	r3, #20
 800b71e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	61fb      	str	r3, [r7, #28]
   return(result);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	f023 0301 	bic.w	r3, r3, #1
 800b72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3314      	adds	r3, #20
 800b736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b750:	2b01      	cmp	r3, #1
 800b752:	d119      	bne.n	800b788 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	330c      	adds	r3, #12
 800b75a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	60bb      	str	r3, [r7, #8]
   return(result);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f023 0310 	bic.w	r3, r3, #16
 800b76a:	647b      	str	r3, [r7, #68]	; 0x44
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	330c      	adds	r3, #12
 800b772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b774:	61ba      	str	r2, [r7, #24]
 800b776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6979      	ldr	r1, [r7, #20]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	613b      	str	r3, [r7, #16]
   return(result);
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e5      	bne.n	800b754 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b796:	bf00      	nop
 800b798:	3754      	adds	r7, #84	; 0x54
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7ff fecb 	bl	800b558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b21      	cmp	r3, #33	; 0x21
 800b7dc:	d13e      	bne.n	800b85c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e6:	d114      	bne.n	800b812 <UART_Transmit_IT+0x48>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d110      	bne.n	800b812 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a1b      	ldr	r3, [r3, #32]
 800b7f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b804:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	1c9a      	adds	r2, r3, #2
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	621a      	str	r2, [r3, #32]
 800b810:	e008      	b.n	800b824 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	1c59      	adds	r1, r3, #1
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	6211      	str	r1, [r2, #32]
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b828:	b29b      	uxth	r3, r3
 800b82a:	3b01      	subs	r3, #1
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4619      	mov	r1, r3
 800b832:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10f      	bne.n	800b858 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68da      	ldr	r2, [r3, #12]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b846:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b856:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	e000      	b.n	800b85e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b85c:	2302      	movs	r3, #2
  }
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68da      	ldr	r2, [r3, #12]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b880:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2220      	movs	r2, #32
 800b886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7f8 fd0c 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b08c      	sub	sp, #48	; 0x30
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b22      	cmp	r3, #34	; 0x22
 800b8ac:	f040 80ab 	bne.w	800ba06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b8:	d117      	bne.n	800b8ea <UART_Receive_IT+0x50>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d113      	bne.n	800b8ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e2:	1c9a      	adds	r2, r3, #2
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	629a      	str	r2, [r3, #40]	; 0x28
 800b8e8:	e026      	b.n	800b938 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8fc:	d007      	beq.n	800b90e <UART_Receive_IT+0x74>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <UART_Receive_IT+0x82>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	b2da      	uxtb	r2, r3
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	e008      	b.n	800b92e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	3b01      	subs	r3, #1
 800b940:	b29b      	uxth	r3, r3
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4619      	mov	r1, r3
 800b946:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d15a      	bne.n	800ba02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0220 	bic.w	r2, r2, #32
 800b95a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b96a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	695a      	ldr	r2, [r3, #20]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f022 0201 	bic.w	r2, r2, #1
 800b97a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2220      	movs	r2, #32
 800b980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d135      	bne.n	800b9f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	f023 0310 	bic.w	r3, r3, #16
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	330c      	adds	r3, #12
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	623a      	str	r2, [r7, #32]
 800b9b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	69f9      	ldr	r1, [r7, #28]
 800b9b8:	6a3a      	ldr	r2, [r7, #32]
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e5      	bne.n	800b992 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0310 	and.w	r3, r3, #16
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	d10a      	bne.n	800b9ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff fdbb 	bl	800b56c <HAL_UARTEx_RxEventCallback>
 800b9f6:	e002      	b.n	800b9fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7f8 fbe1 	bl	80041c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e002      	b.n	800ba08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e000      	b.n	800ba08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba06:	2302      	movs	r3, #2
  }
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3730      	adds	r7, #48	; 0x30
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba14:	b0c0      	sub	sp, #256	; 0x100
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2c:	68d9      	ldr	r1, [r3, #12]
 800ba2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	ea40 0301 	orr.w	r3, r0, r1
 800ba38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	431a      	orrs	r2, r3
 800ba48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ba5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba68:	f021 010c 	bic.w	r1, r1, #12
 800ba6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba76:	430b      	orrs	r3, r1
 800ba78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba8a:	6999      	ldr	r1, [r3, #24]
 800ba8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	ea40 0301 	orr.w	r3, r0, r1
 800ba96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4b8f      	ldr	r3, [pc, #572]	; (800bcdc <UART_SetConfig+0x2cc>)
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d005      	beq.n	800bab0 <UART_SetConfig+0xa0>
 800baa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	4b8d      	ldr	r3, [pc, #564]	; (800bce0 <UART_SetConfig+0x2d0>)
 800baac:	429a      	cmp	r2, r3
 800baae:	d104      	bne.n	800baba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bab0:	f7fd fc02 	bl	80092b8 <HAL_RCC_GetPCLK2Freq>
 800bab4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bab8:	e003      	b.n	800bac2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800baba:	f7fd fbe9 	bl	8009290 <HAL_RCC_GetPCLK1Freq>
 800babe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bacc:	f040 810c 	bne.w	800bce8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bada:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bade:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bae2:	4622      	mov	r2, r4
 800bae4:	462b      	mov	r3, r5
 800bae6:	1891      	adds	r1, r2, r2
 800bae8:	65b9      	str	r1, [r7, #88]	; 0x58
 800baea:	415b      	adcs	r3, r3
 800baec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800baf2:	4621      	mov	r1, r4
 800baf4:	eb12 0801 	adds.w	r8, r2, r1
 800baf8:	4629      	mov	r1, r5
 800bafa:	eb43 0901 	adc.w	r9, r3, r1
 800bafe:	f04f 0200 	mov.w	r2, #0
 800bb02:	f04f 0300 	mov.w	r3, #0
 800bb06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb12:	4690      	mov	r8, r2
 800bb14:	4699      	mov	r9, r3
 800bb16:	4623      	mov	r3, r4
 800bb18:	eb18 0303 	adds.w	r3, r8, r3
 800bb1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb20:	462b      	mov	r3, r5
 800bb22:	eb49 0303 	adc.w	r3, r9, r3
 800bb26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bb3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb3e:	460b      	mov	r3, r1
 800bb40:	18db      	adds	r3, r3, r3
 800bb42:	653b      	str	r3, [r7, #80]	; 0x50
 800bb44:	4613      	mov	r3, r2
 800bb46:	eb42 0303 	adc.w	r3, r2, r3
 800bb4a:	657b      	str	r3, [r7, #84]	; 0x54
 800bb4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb54:	f7f5 f878 	bl	8000c48 <__aeabi_uldivmod>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4b61      	ldr	r3, [pc, #388]	; (800bce4 <UART_SetConfig+0x2d4>)
 800bb5e:	fba3 2302 	umull	r2, r3, r3, r2
 800bb62:	095b      	lsrs	r3, r3, #5
 800bb64:	011c      	lsls	r4, r3, #4
 800bb66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bb74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	1891      	adds	r1, r2, r2
 800bb7e:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb80:	415b      	adcs	r3, r3
 800bb82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bb88:	4641      	mov	r1, r8
 800bb8a:	eb12 0a01 	adds.w	sl, r2, r1
 800bb8e:	4649      	mov	r1, r9
 800bb90:	eb43 0b01 	adc.w	fp, r3, r1
 800bb94:	f04f 0200 	mov.w	r2, #0
 800bb98:	f04f 0300 	mov.w	r3, #0
 800bb9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bba0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bba8:	4692      	mov	sl, r2
 800bbaa:	469b      	mov	fp, r3
 800bbac:	4643      	mov	r3, r8
 800bbae:	eb1a 0303 	adds.w	r3, sl, r3
 800bbb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	eb4b 0303 	adc.w	r3, fp, r3
 800bbbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bbd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	18db      	adds	r3, r3, r3
 800bbd8:	643b      	str	r3, [r7, #64]	; 0x40
 800bbda:	4613      	mov	r3, r2
 800bbdc:	eb42 0303 	adc.w	r3, r2, r3
 800bbe0:	647b      	str	r3, [r7, #68]	; 0x44
 800bbe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bbe6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bbea:	f7f5 f82d 	bl	8000c48 <__aeabi_uldivmod>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4b3b      	ldr	r3, [pc, #236]	; (800bce4 <UART_SetConfig+0x2d4>)
 800bbf6:	fba3 2301 	umull	r2, r3, r3, r1
 800bbfa:	095b      	lsrs	r3, r3, #5
 800bbfc:	2264      	movs	r2, #100	; 0x64
 800bbfe:	fb02 f303 	mul.w	r3, r2, r3
 800bc02:	1acb      	subs	r3, r1, r3
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc0a:	4b36      	ldr	r3, [pc, #216]	; (800bce4 <UART_SetConfig+0x2d4>)
 800bc0c:	fba3 2302 	umull	r2, r3, r3, r2
 800bc10:	095b      	lsrs	r3, r3, #5
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc18:	441c      	add	r4, r3
 800bc1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	464b      	mov	r3, r9
 800bc30:	1891      	adds	r1, r2, r2
 800bc32:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc34:	415b      	adcs	r3, r3
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc3c:	4641      	mov	r1, r8
 800bc3e:	1851      	adds	r1, r2, r1
 800bc40:	6339      	str	r1, [r7, #48]	; 0x30
 800bc42:	4649      	mov	r1, r9
 800bc44:	414b      	adcs	r3, r1
 800bc46:	637b      	str	r3, [r7, #52]	; 0x34
 800bc48:	f04f 0200 	mov.w	r2, #0
 800bc4c:	f04f 0300 	mov.w	r3, #0
 800bc50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bc54:	4659      	mov	r1, fp
 800bc56:	00cb      	lsls	r3, r1, #3
 800bc58:	4651      	mov	r1, sl
 800bc5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc5e:	4651      	mov	r1, sl
 800bc60:	00ca      	lsls	r2, r1, #3
 800bc62:	4610      	mov	r0, r2
 800bc64:	4619      	mov	r1, r3
 800bc66:	4603      	mov	r3, r0
 800bc68:	4642      	mov	r2, r8
 800bc6a:	189b      	adds	r3, r3, r2
 800bc6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc70:	464b      	mov	r3, r9
 800bc72:	460a      	mov	r2, r1
 800bc74:	eb42 0303 	adc.w	r3, r2, r3
 800bc78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc90:	460b      	mov	r3, r1
 800bc92:	18db      	adds	r3, r3, r3
 800bc94:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc96:	4613      	mov	r3, r2
 800bc98:	eb42 0303 	adc.w	r3, r2, r3
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bca2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bca6:	f7f4 ffcf 	bl	8000c48 <__aeabi_uldivmod>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4b0d      	ldr	r3, [pc, #52]	; (800bce4 <UART_SetConfig+0x2d4>)
 800bcb0:	fba3 1302 	umull	r1, r3, r3, r2
 800bcb4:	095b      	lsrs	r3, r3, #5
 800bcb6:	2164      	movs	r1, #100	; 0x64
 800bcb8:	fb01 f303 	mul.w	r3, r1, r3
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	00db      	lsls	r3, r3, #3
 800bcc0:	3332      	adds	r3, #50	; 0x32
 800bcc2:	4a08      	ldr	r2, [pc, #32]	; (800bce4 <UART_SetConfig+0x2d4>)
 800bcc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc8:	095b      	lsrs	r3, r3, #5
 800bcca:	f003 0207 	and.w	r2, r3, #7
 800bcce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4422      	add	r2, r4
 800bcd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bcd8:	e105      	b.n	800bee6 <UART_SetConfig+0x4d6>
 800bcda:	bf00      	nop
 800bcdc:	40011000 	.word	0x40011000
 800bce0:	40011400 	.word	0x40011400
 800bce4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcec:	2200      	movs	r2, #0
 800bcee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bcfa:	4642      	mov	r2, r8
 800bcfc:	464b      	mov	r3, r9
 800bcfe:	1891      	adds	r1, r2, r2
 800bd00:	6239      	str	r1, [r7, #32]
 800bd02:	415b      	adcs	r3, r3
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
 800bd06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	1854      	adds	r4, r2, r1
 800bd0e:	4649      	mov	r1, r9
 800bd10:	eb43 0501 	adc.w	r5, r3, r1
 800bd14:	f04f 0200 	mov.w	r2, #0
 800bd18:	f04f 0300 	mov.w	r3, #0
 800bd1c:	00eb      	lsls	r3, r5, #3
 800bd1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd22:	00e2      	lsls	r2, r4, #3
 800bd24:	4614      	mov	r4, r2
 800bd26:	461d      	mov	r5, r3
 800bd28:	4643      	mov	r3, r8
 800bd2a:	18e3      	adds	r3, r4, r3
 800bd2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd30:	464b      	mov	r3, r9
 800bd32:	eb45 0303 	adc.w	r3, r5, r3
 800bd36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd4a:	f04f 0200 	mov.w	r2, #0
 800bd4e:	f04f 0300 	mov.w	r3, #0
 800bd52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd56:	4629      	mov	r1, r5
 800bd58:	008b      	lsls	r3, r1, #2
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd60:	4621      	mov	r1, r4
 800bd62:	008a      	lsls	r2, r1, #2
 800bd64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd68:	f7f4 ff6e 	bl	8000c48 <__aeabi_uldivmod>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4b60      	ldr	r3, [pc, #384]	; (800bef4 <UART_SetConfig+0x4e4>)
 800bd72:	fba3 2302 	umull	r2, r3, r3, r2
 800bd76:	095b      	lsrs	r3, r3, #5
 800bd78:	011c      	lsls	r4, r3, #4
 800bd7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	1891      	adds	r1, r2, r2
 800bd92:	61b9      	str	r1, [r7, #24]
 800bd94:	415b      	adcs	r3, r3
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd9c:	4641      	mov	r1, r8
 800bd9e:	1851      	adds	r1, r2, r1
 800bda0:	6139      	str	r1, [r7, #16]
 800bda2:	4649      	mov	r1, r9
 800bda4:	414b      	adcs	r3, r1
 800bda6:	617b      	str	r3, [r7, #20]
 800bda8:	f04f 0200 	mov.w	r2, #0
 800bdac:	f04f 0300 	mov.w	r3, #0
 800bdb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	00cb      	lsls	r3, r1, #3
 800bdb8:	4651      	mov	r1, sl
 800bdba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdbe:	4651      	mov	r1, sl
 800bdc0:	00ca      	lsls	r2, r1, #3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	4642      	mov	r2, r8
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	eb42 0303 	adc.w	r3, r2, r3
 800bdd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bde6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	f04f 0300 	mov.w	r3, #0
 800bdf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	008b      	lsls	r3, r1, #2
 800bdf8:	4641      	mov	r1, r8
 800bdfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdfe:	4641      	mov	r1, r8
 800be00:	008a      	lsls	r2, r1, #2
 800be02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be06:	f7f4 ff1f 	bl	8000c48 <__aeabi_uldivmod>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4b39      	ldr	r3, [pc, #228]	; (800bef4 <UART_SetConfig+0x4e4>)
 800be10:	fba3 1302 	umull	r1, r3, r3, r2
 800be14:	095b      	lsrs	r3, r3, #5
 800be16:	2164      	movs	r1, #100	; 0x64
 800be18:	fb01 f303 	mul.w	r3, r1, r3
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	011b      	lsls	r3, r3, #4
 800be20:	3332      	adds	r3, #50	; 0x32
 800be22:	4a34      	ldr	r2, [pc, #208]	; (800bef4 <UART_SetConfig+0x4e4>)
 800be24:	fba2 2303 	umull	r2, r3, r2, r3
 800be28:	095b      	lsrs	r3, r3, #5
 800be2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be2e:	441c      	add	r4, r3
 800be30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be34:	2200      	movs	r2, #0
 800be36:	673b      	str	r3, [r7, #112]	; 0x70
 800be38:	677a      	str	r2, [r7, #116]	; 0x74
 800be3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800be3e:	4642      	mov	r2, r8
 800be40:	464b      	mov	r3, r9
 800be42:	1891      	adds	r1, r2, r2
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	415b      	adcs	r3, r3
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be4e:	4641      	mov	r1, r8
 800be50:	1851      	adds	r1, r2, r1
 800be52:	6039      	str	r1, [r7, #0]
 800be54:	4649      	mov	r1, r9
 800be56:	414b      	adcs	r3, r1
 800be58:	607b      	str	r3, [r7, #4]
 800be5a:	f04f 0200 	mov.w	r2, #0
 800be5e:	f04f 0300 	mov.w	r3, #0
 800be62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be66:	4659      	mov	r1, fp
 800be68:	00cb      	lsls	r3, r1, #3
 800be6a:	4651      	mov	r1, sl
 800be6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be70:	4651      	mov	r1, sl
 800be72:	00ca      	lsls	r2, r1, #3
 800be74:	4610      	mov	r0, r2
 800be76:	4619      	mov	r1, r3
 800be78:	4603      	mov	r3, r0
 800be7a:	4642      	mov	r2, r8
 800be7c:	189b      	adds	r3, r3, r2
 800be7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be80:	464b      	mov	r3, r9
 800be82:	460a      	mov	r2, r1
 800be84:	eb42 0303 	adc.w	r3, r2, r3
 800be88:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	663b      	str	r3, [r7, #96]	; 0x60
 800be94:	667a      	str	r2, [r7, #100]	; 0x64
 800be96:	f04f 0200 	mov.w	r2, #0
 800be9a:	f04f 0300 	mov.w	r3, #0
 800be9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bea2:	4649      	mov	r1, r9
 800bea4:	008b      	lsls	r3, r1, #2
 800bea6:	4641      	mov	r1, r8
 800bea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800beac:	4641      	mov	r1, r8
 800beae:	008a      	lsls	r2, r1, #2
 800beb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800beb4:	f7f4 fec8 	bl	8000c48 <__aeabi_uldivmod>
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	4b0d      	ldr	r3, [pc, #52]	; (800bef4 <UART_SetConfig+0x4e4>)
 800bebe:	fba3 1302 	umull	r1, r3, r3, r2
 800bec2:	095b      	lsrs	r3, r3, #5
 800bec4:	2164      	movs	r1, #100	; 0x64
 800bec6:	fb01 f303 	mul.w	r3, r1, r3
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	3332      	adds	r3, #50	; 0x32
 800bed0:	4a08      	ldr	r2, [pc, #32]	; (800bef4 <UART_SetConfig+0x4e4>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	095b      	lsrs	r3, r3, #5
 800bed8:	f003 020f 	and.w	r2, r3, #15
 800bedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4422      	add	r2, r4
 800bee4:	609a      	str	r2, [r3, #8]
}
 800bee6:	bf00      	nop
 800bee8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800beec:	46bd      	mov	sp, r7
 800beee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bef2:	bf00      	nop
 800bef4:	51eb851f 	.word	0x51eb851f

0800bef8 <__errno>:
 800bef8:	4b01      	ldr	r3, [pc, #4]	; (800bf00 <__errno+0x8>)
 800befa:	6818      	ldr	r0, [r3, #0]
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	20000088 	.word	0x20000088

0800bf04 <__libc_init_array>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	4d0d      	ldr	r5, [pc, #52]	; (800bf3c <__libc_init_array+0x38>)
 800bf08:	4c0d      	ldr	r4, [pc, #52]	; (800bf40 <__libc_init_array+0x3c>)
 800bf0a:	1b64      	subs	r4, r4, r5
 800bf0c:	10a4      	asrs	r4, r4, #2
 800bf0e:	2600      	movs	r6, #0
 800bf10:	42a6      	cmp	r6, r4
 800bf12:	d109      	bne.n	800bf28 <__libc_init_array+0x24>
 800bf14:	4d0b      	ldr	r5, [pc, #44]	; (800bf44 <__libc_init_array+0x40>)
 800bf16:	4c0c      	ldr	r4, [pc, #48]	; (800bf48 <__libc_init_array+0x44>)
 800bf18:	f004 f86c 	bl	800fff4 <_init>
 800bf1c:	1b64      	subs	r4, r4, r5
 800bf1e:	10a4      	asrs	r4, r4, #2
 800bf20:	2600      	movs	r6, #0
 800bf22:	42a6      	cmp	r6, r4
 800bf24:	d105      	bne.n	800bf32 <__libc_init_array+0x2e>
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2c:	4798      	blx	r3
 800bf2e:	3601      	adds	r6, #1
 800bf30:	e7ee      	b.n	800bf10 <__libc_init_array+0xc>
 800bf32:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf36:	4798      	blx	r3
 800bf38:	3601      	adds	r6, #1
 800bf3a:	e7f2      	b.n	800bf22 <__libc_init_array+0x1e>
 800bf3c:	080104e0 	.word	0x080104e0
 800bf40:	080104e0 	.word	0x080104e0
 800bf44:	080104e0 	.word	0x080104e0
 800bf48:	080104e4 	.word	0x080104e4

0800bf4c <memset>:
 800bf4c:	4402      	add	r2, r0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d100      	bne.n	800bf56 <memset+0xa>
 800bf54:	4770      	bx	lr
 800bf56:	f803 1b01 	strb.w	r1, [r3], #1
 800bf5a:	e7f9      	b.n	800bf50 <memset+0x4>

0800bf5c <sulp>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	ec45 4b10 	vmov	d0, r4, r5
 800bf66:	4616      	mov	r6, r2
 800bf68:	f001 fd2a 	bl	800d9c0 <__ulp>
 800bf6c:	ec51 0b10 	vmov	r0, r1, d0
 800bf70:	b17e      	cbz	r6, 800bf92 <sulp+0x36>
 800bf72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd09      	ble.n	800bf92 <sulp+0x36>
 800bf7e:	051b      	lsls	r3, r3, #20
 800bf80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf84:	2400      	movs	r4, #0
 800bf86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	f7f4 fb3b 	bl	8000608 <__aeabi_dmul>
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	0000      	movs	r0, r0
	...

0800bf98 <_strtod_l>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	ed2d 8b02 	vpush	{d8}
 800bfa0:	b09d      	sub	sp, #116	; 0x74
 800bfa2:	461f      	mov	r7, r3
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9318      	str	r3, [sp, #96]	; 0x60
 800bfa8:	4ba2      	ldr	r3, [pc, #648]	; (800c234 <_strtod_l+0x29c>)
 800bfaa:	9213      	str	r2, [sp, #76]	; 0x4c
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	9305      	str	r3, [sp, #20]
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	4688      	mov	r8, r1
 800bfb6:	f7f4 f913 	bl	80001e0 <strlen>
 800bfba:	f04f 0a00 	mov.w	sl, #0
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	f04f 0b00 	mov.w	fp, #0
 800bfc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bfc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	2a2b      	cmp	r2, #43	; 0x2b
 800bfce:	d04e      	beq.n	800c06e <_strtod_l+0xd6>
 800bfd0:	d83b      	bhi.n	800c04a <_strtod_l+0xb2>
 800bfd2:	2a0d      	cmp	r2, #13
 800bfd4:	d834      	bhi.n	800c040 <_strtod_l+0xa8>
 800bfd6:	2a08      	cmp	r2, #8
 800bfd8:	d834      	bhi.n	800c044 <_strtod_l+0xac>
 800bfda:	2a00      	cmp	r2, #0
 800bfdc:	d03e      	beq.n	800c05c <_strtod_l+0xc4>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bfe4:	7833      	ldrb	r3, [r6, #0]
 800bfe6:	2b30      	cmp	r3, #48	; 0x30
 800bfe8:	f040 80b0 	bne.w	800c14c <_strtod_l+0x1b4>
 800bfec:	7873      	ldrb	r3, [r6, #1]
 800bfee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bff2:	2b58      	cmp	r3, #88	; 0x58
 800bff4:	d168      	bne.n	800c0c8 <_strtod_l+0x130>
 800bff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	ab18      	add	r3, sp, #96	; 0x60
 800bffc:	9702      	str	r7, [sp, #8]
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	4a8d      	ldr	r2, [pc, #564]	; (800c238 <_strtod_l+0x2a0>)
 800c002:	ab19      	add	r3, sp, #100	; 0x64
 800c004:	a917      	add	r1, sp, #92	; 0x5c
 800c006:	4620      	mov	r0, r4
 800c008:	f000 fe40 	bl	800cc8c <__gethex>
 800c00c:	f010 0707 	ands.w	r7, r0, #7
 800c010:	4605      	mov	r5, r0
 800c012:	d005      	beq.n	800c020 <_strtod_l+0x88>
 800c014:	2f06      	cmp	r7, #6
 800c016:	d12c      	bne.n	800c072 <_strtod_l+0xda>
 800c018:	3601      	adds	r6, #1
 800c01a:	2300      	movs	r3, #0
 800c01c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c01e:	930a      	str	r3, [sp, #40]	; 0x28
 800c020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c022:	2b00      	cmp	r3, #0
 800c024:	f040 8590 	bne.w	800cb48 <_strtod_l+0xbb0>
 800c028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c02a:	b1eb      	cbz	r3, 800c068 <_strtod_l+0xd0>
 800c02c:	4652      	mov	r2, sl
 800c02e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c032:	ec43 2b10 	vmov	d0, r2, r3
 800c036:	b01d      	add	sp, #116	; 0x74
 800c038:	ecbd 8b02 	vpop	{d8}
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	2a20      	cmp	r2, #32
 800c042:	d1cc      	bne.n	800bfde <_strtod_l+0x46>
 800c044:	3301      	adds	r3, #1
 800c046:	9317      	str	r3, [sp, #92]	; 0x5c
 800c048:	e7be      	b.n	800bfc8 <_strtod_l+0x30>
 800c04a:	2a2d      	cmp	r2, #45	; 0x2d
 800c04c:	d1c7      	bne.n	800bfde <_strtod_l+0x46>
 800c04e:	2201      	movs	r2, #1
 800c050:	920a      	str	r2, [sp, #40]	; 0x28
 800c052:	1c5a      	adds	r2, r3, #1
 800c054:	9217      	str	r2, [sp, #92]	; 0x5c
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1c2      	bne.n	800bfe2 <_strtod_l+0x4a>
 800c05c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c05e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c062:	2b00      	cmp	r3, #0
 800c064:	f040 856e 	bne.w	800cb44 <_strtod_l+0xbac>
 800c068:	4652      	mov	r2, sl
 800c06a:	465b      	mov	r3, fp
 800c06c:	e7e1      	b.n	800c032 <_strtod_l+0x9a>
 800c06e:	2200      	movs	r2, #0
 800c070:	e7ee      	b.n	800c050 <_strtod_l+0xb8>
 800c072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c074:	b13a      	cbz	r2, 800c086 <_strtod_l+0xee>
 800c076:	2135      	movs	r1, #53	; 0x35
 800c078:	a81a      	add	r0, sp, #104	; 0x68
 800c07a:	f001 fdac 	bl	800dbd6 <__copybits>
 800c07e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c080:	4620      	mov	r0, r4
 800c082:	f001 f96b 	bl	800d35c <_Bfree>
 800c086:	3f01      	subs	r7, #1
 800c088:	2f04      	cmp	r7, #4
 800c08a:	d806      	bhi.n	800c09a <_strtod_l+0x102>
 800c08c:	e8df f007 	tbb	[pc, r7]
 800c090:	1714030a 	.word	0x1714030a
 800c094:	0a          	.byte	0x0a
 800c095:	00          	.byte	0x00
 800c096:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c09a:	0728      	lsls	r0, r5, #28
 800c09c:	d5c0      	bpl.n	800c020 <_strtod_l+0x88>
 800c09e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c0a2:	e7bd      	b.n	800c020 <_strtod_l+0x88>
 800c0a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c0a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c0aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c0ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c0b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0b6:	e7f0      	b.n	800c09a <_strtod_l+0x102>
 800c0b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c23c <_strtod_l+0x2a4>
 800c0bc:	e7ed      	b.n	800c09a <_strtod_l+0x102>
 800c0be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c0c2:	f04f 3aff 	mov.w	sl, #4294967295
 800c0c6:	e7e8      	b.n	800c09a <_strtod_l+0x102>
 800c0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0ce:	785b      	ldrb	r3, [r3, #1]
 800c0d0:	2b30      	cmp	r3, #48	; 0x30
 800c0d2:	d0f9      	beq.n	800c0c8 <_strtod_l+0x130>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0a3      	beq.n	800c020 <_strtod_l+0x88>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	9304      	str	r3, [sp, #16]
 800c0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0e2:	9308      	str	r3, [sp, #32]
 800c0e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800c0e8:	464f      	mov	r7, r9
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c0ee:	7806      	ldrb	r6, [r0, #0]
 800c0f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c0f4:	b2d9      	uxtb	r1, r3
 800c0f6:	2909      	cmp	r1, #9
 800c0f8:	d92a      	bls.n	800c150 <_strtod_l+0x1b8>
 800c0fa:	9905      	ldr	r1, [sp, #20]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	f001 fe73 	bl	800dde8 <strncmp>
 800c102:	b398      	cbz	r0, 800c16c <_strtod_l+0x1d4>
 800c104:	2000      	movs	r0, #0
 800c106:	4632      	mov	r2, r6
 800c108:	463d      	mov	r5, r7
 800c10a:	9005      	str	r0, [sp, #20]
 800c10c:	4603      	mov	r3, r0
 800c10e:	2a65      	cmp	r2, #101	; 0x65
 800c110:	d001      	beq.n	800c116 <_strtod_l+0x17e>
 800c112:	2a45      	cmp	r2, #69	; 0x45
 800c114:	d118      	bne.n	800c148 <_strtod_l+0x1b0>
 800c116:	b91d      	cbnz	r5, 800c120 <_strtod_l+0x188>
 800c118:	9a04      	ldr	r2, [sp, #16]
 800c11a:	4302      	orrs	r2, r0
 800c11c:	d09e      	beq.n	800c05c <_strtod_l+0xc4>
 800c11e:	2500      	movs	r5, #0
 800c120:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c124:	f108 0201 	add.w	r2, r8, #1
 800c128:	9217      	str	r2, [sp, #92]	; 0x5c
 800c12a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c12e:	2a2b      	cmp	r2, #43	; 0x2b
 800c130:	d075      	beq.n	800c21e <_strtod_l+0x286>
 800c132:	2a2d      	cmp	r2, #45	; 0x2d
 800c134:	d07b      	beq.n	800c22e <_strtod_l+0x296>
 800c136:	f04f 0c00 	mov.w	ip, #0
 800c13a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c13e:	2909      	cmp	r1, #9
 800c140:	f240 8082 	bls.w	800c248 <_strtod_l+0x2b0>
 800c144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c148:	2600      	movs	r6, #0
 800c14a:	e09d      	b.n	800c288 <_strtod_l+0x2f0>
 800c14c:	2300      	movs	r3, #0
 800c14e:	e7c4      	b.n	800c0da <_strtod_l+0x142>
 800c150:	2f08      	cmp	r7, #8
 800c152:	bfd8      	it	le
 800c154:	9907      	ldrle	r1, [sp, #28]
 800c156:	f100 0001 	add.w	r0, r0, #1
 800c15a:	bfda      	itte	le
 800c15c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c160:	9307      	strle	r3, [sp, #28]
 800c162:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c166:	3701      	adds	r7, #1
 800c168:	9017      	str	r0, [sp, #92]	; 0x5c
 800c16a:	e7bf      	b.n	800c0ec <_strtod_l+0x154>
 800c16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c16e:	195a      	adds	r2, r3, r5
 800c170:	9217      	str	r2, [sp, #92]	; 0x5c
 800c172:	5d5a      	ldrb	r2, [r3, r5]
 800c174:	2f00      	cmp	r7, #0
 800c176:	d037      	beq.n	800c1e8 <_strtod_l+0x250>
 800c178:	9005      	str	r0, [sp, #20]
 800c17a:	463d      	mov	r5, r7
 800c17c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c180:	2b09      	cmp	r3, #9
 800c182:	d912      	bls.n	800c1aa <_strtod_l+0x212>
 800c184:	2301      	movs	r3, #1
 800c186:	e7c2      	b.n	800c10e <_strtod_l+0x176>
 800c188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c18e:	785a      	ldrb	r2, [r3, #1]
 800c190:	3001      	adds	r0, #1
 800c192:	2a30      	cmp	r2, #48	; 0x30
 800c194:	d0f8      	beq.n	800c188 <_strtod_l+0x1f0>
 800c196:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c19a:	2b08      	cmp	r3, #8
 800c19c:	f200 84d9 	bhi.w	800cb52 <_strtod_l+0xbba>
 800c1a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1a2:	9005      	str	r0, [sp, #20]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	9308      	str	r3, [sp, #32]
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	3a30      	subs	r2, #48	; 0x30
 800c1ac:	f100 0301 	add.w	r3, r0, #1
 800c1b0:	d014      	beq.n	800c1dc <_strtod_l+0x244>
 800c1b2:	9905      	ldr	r1, [sp, #20]
 800c1b4:	4419      	add	r1, r3
 800c1b6:	9105      	str	r1, [sp, #20]
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	eb00 0e05 	add.w	lr, r0, r5
 800c1be:	210a      	movs	r1, #10
 800c1c0:	4573      	cmp	r3, lr
 800c1c2:	d113      	bne.n	800c1ec <_strtod_l+0x254>
 800c1c4:	182b      	adds	r3, r5, r0
 800c1c6:	2b08      	cmp	r3, #8
 800c1c8:	f105 0501 	add.w	r5, r5, #1
 800c1cc:	4405      	add	r5, r0
 800c1ce:	dc1c      	bgt.n	800c20a <_strtod_l+0x272>
 800c1d0:	9907      	ldr	r1, [sp, #28]
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	fb03 2301 	mla	r3, r3, r1, r2
 800c1d8:	9307      	str	r3, [sp, #28]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1de:	1c51      	adds	r1, r2, #1
 800c1e0:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1e2:	7852      	ldrb	r2, [r2, #1]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	e7c9      	b.n	800c17c <_strtod_l+0x1e4>
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	e7d2      	b.n	800c192 <_strtod_l+0x1fa>
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	dc04      	bgt.n	800c1fa <_strtod_l+0x262>
 800c1f0:	9e07      	ldr	r6, [sp, #28]
 800c1f2:	434e      	muls	r6, r1
 800c1f4:	9607      	str	r6, [sp, #28]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	e7e2      	b.n	800c1c0 <_strtod_l+0x228>
 800c1fa:	f103 0c01 	add.w	ip, r3, #1
 800c1fe:	f1bc 0f10 	cmp.w	ip, #16
 800c202:	bfd8      	it	le
 800c204:	fb01 f909 	mulle.w	r9, r1, r9
 800c208:	e7f5      	b.n	800c1f6 <_strtod_l+0x25e>
 800c20a:	2d10      	cmp	r5, #16
 800c20c:	bfdc      	itt	le
 800c20e:	230a      	movle	r3, #10
 800c210:	fb03 2909 	mlale	r9, r3, r9, r2
 800c214:	e7e1      	b.n	800c1da <_strtod_l+0x242>
 800c216:	2300      	movs	r3, #0
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	2301      	movs	r3, #1
 800c21c:	e77c      	b.n	800c118 <_strtod_l+0x180>
 800c21e:	f04f 0c00 	mov.w	ip, #0
 800c222:	f108 0202 	add.w	r2, r8, #2
 800c226:	9217      	str	r2, [sp, #92]	; 0x5c
 800c228:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c22c:	e785      	b.n	800c13a <_strtod_l+0x1a2>
 800c22e:	f04f 0c01 	mov.w	ip, #1
 800c232:	e7f6      	b.n	800c222 <_strtod_l+0x28a>
 800c234:	08010150 	.word	0x08010150
 800c238:	08010088 	.word	0x08010088
 800c23c:	7ff00000 	.word	0x7ff00000
 800c240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c242:	1c51      	adds	r1, r2, #1
 800c244:	9117      	str	r1, [sp, #92]	; 0x5c
 800c246:	7852      	ldrb	r2, [r2, #1]
 800c248:	2a30      	cmp	r2, #48	; 0x30
 800c24a:	d0f9      	beq.n	800c240 <_strtod_l+0x2a8>
 800c24c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c250:	2908      	cmp	r1, #8
 800c252:	f63f af79 	bhi.w	800c148 <_strtod_l+0x1b0>
 800c256:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c25a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c25c:	9206      	str	r2, [sp, #24]
 800c25e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c260:	1c51      	adds	r1, r2, #1
 800c262:	9117      	str	r1, [sp, #92]	; 0x5c
 800c264:	7852      	ldrb	r2, [r2, #1]
 800c266:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c26a:	2e09      	cmp	r6, #9
 800c26c:	d937      	bls.n	800c2de <_strtod_l+0x346>
 800c26e:	9e06      	ldr	r6, [sp, #24]
 800c270:	1b89      	subs	r1, r1, r6
 800c272:	2908      	cmp	r1, #8
 800c274:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c278:	dc02      	bgt.n	800c280 <_strtod_l+0x2e8>
 800c27a:	4576      	cmp	r6, lr
 800c27c:	bfa8      	it	ge
 800c27e:	4676      	movge	r6, lr
 800c280:	f1bc 0f00 	cmp.w	ip, #0
 800c284:	d000      	beq.n	800c288 <_strtod_l+0x2f0>
 800c286:	4276      	negs	r6, r6
 800c288:	2d00      	cmp	r5, #0
 800c28a:	d14d      	bne.n	800c328 <_strtod_l+0x390>
 800c28c:	9904      	ldr	r1, [sp, #16]
 800c28e:	4301      	orrs	r1, r0
 800c290:	f47f aec6 	bne.w	800c020 <_strtod_l+0x88>
 800c294:	2b00      	cmp	r3, #0
 800c296:	f47f aee1 	bne.w	800c05c <_strtod_l+0xc4>
 800c29a:	2a69      	cmp	r2, #105	; 0x69
 800c29c:	d027      	beq.n	800c2ee <_strtod_l+0x356>
 800c29e:	dc24      	bgt.n	800c2ea <_strtod_l+0x352>
 800c2a0:	2a49      	cmp	r2, #73	; 0x49
 800c2a2:	d024      	beq.n	800c2ee <_strtod_l+0x356>
 800c2a4:	2a4e      	cmp	r2, #78	; 0x4e
 800c2a6:	f47f aed9 	bne.w	800c05c <_strtod_l+0xc4>
 800c2aa:	499f      	ldr	r1, [pc, #636]	; (800c528 <_strtod_l+0x590>)
 800c2ac:	a817      	add	r0, sp, #92	; 0x5c
 800c2ae:	f000 ff45 	bl	800d13c <__match>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	f43f aed2 	beq.w	800c05c <_strtod_l+0xc4>
 800c2b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2b28      	cmp	r3, #40	; 0x28
 800c2be:	d12d      	bne.n	800c31c <_strtod_l+0x384>
 800c2c0:	499a      	ldr	r1, [pc, #616]	; (800c52c <_strtod_l+0x594>)
 800c2c2:	aa1a      	add	r2, sp, #104	; 0x68
 800c2c4:	a817      	add	r0, sp, #92	; 0x5c
 800c2c6:	f000 ff4d 	bl	800d164 <__hexnan>
 800c2ca:	2805      	cmp	r0, #5
 800c2cc:	d126      	bne.n	800c31c <_strtod_l+0x384>
 800c2ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c2d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c2d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c2dc:	e6a0      	b.n	800c020 <_strtod_l+0x88>
 800c2de:	210a      	movs	r1, #10
 800c2e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c2e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c2e8:	e7b9      	b.n	800c25e <_strtod_l+0x2c6>
 800c2ea:	2a6e      	cmp	r2, #110	; 0x6e
 800c2ec:	e7db      	b.n	800c2a6 <_strtod_l+0x30e>
 800c2ee:	4990      	ldr	r1, [pc, #576]	; (800c530 <_strtod_l+0x598>)
 800c2f0:	a817      	add	r0, sp, #92	; 0x5c
 800c2f2:	f000 ff23 	bl	800d13c <__match>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f43f aeb0 	beq.w	800c05c <_strtod_l+0xc4>
 800c2fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2fe:	498d      	ldr	r1, [pc, #564]	; (800c534 <_strtod_l+0x59c>)
 800c300:	3b01      	subs	r3, #1
 800c302:	a817      	add	r0, sp, #92	; 0x5c
 800c304:	9317      	str	r3, [sp, #92]	; 0x5c
 800c306:	f000 ff19 	bl	800d13c <__match>
 800c30a:	b910      	cbnz	r0, 800c312 <_strtod_l+0x37a>
 800c30c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c30e:	3301      	adds	r3, #1
 800c310:	9317      	str	r3, [sp, #92]	; 0x5c
 800c312:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c544 <_strtod_l+0x5ac>
 800c316:	f04f 0a00 	mov.w	sl, #0
 800c31a:	e681      	b.n	800c020 <_strtod_l+0x88>
 800c31c:	4886      	ldr	r0, [pc, #536]	; (800c538 <_strtod_l+0x5a0>)
 800c31e:	f001 fd4b 	bl	800ddb8 <nan>
 800c322:	ec5b ab10 	vmov	sl, fp, d0
 800c326:	e67b      	b.n	800c020 <_strtod_l+0x88>
 800c328:	9b05      	ldr	r3, [sp, #20]
 800c32a:	9807      	ldr	r0, [sp, #28]
 800c32c:	1af3      	subs	r3, r6, r3
 800c32e:	2f00      	cmp	r7, #0
 800c330:	bf08      	it	eq
 800c332:	462f      	moveq	r7, r5
 800c334:	2d10      	cmp	r5, #16
 800c336:	9306      	str	r3, [sp, #24]
 800c338:	46a8      	mov	r8, r5
 800c33a:	bfa8      	it	ge
 800c33c:	f04f 0810 	movge.w	r8, #16
 800c340:	f7f4 f8e8 	bl	8000514 <__aeabi_ui2d>
 800c344:	2d09      	cmp	r5, #9
 800c346:	4682      	mov	sl, r0
 800c348:	468b      	mov	fp, r1
 800c34a:	dd13      	ble.n	800c374 <_strtod_l+0x3dc>
 800c34c:	4b7b      	ldr	r3, [pc, #492]	; (800c53c <_strtod_l+0x5a4>)
 800c34e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c352:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c356:	f7f4 f957 	bl	8000608 <__aeabi_dmul>
 800c35a:	4682      	mov	sl, r0
 800c35c:	4648      	mov	r0, r9
 800c35e:	468b      	mov	fp, r1
 800c360:	f7f4 f8d8 	bl	8000514 <__aeabi_ui2d>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4650      	mov	r0, sl
 800c36a:	4659      	mov	r1, fp
 800c36c:	f7f3 ff96 	bl	800029c <__adddf3>
 800c370:	4682      	mov	sl, r0
 800c372:	468b      	mov	fp, r1
 800c374:	2d0f      	cmp	r5, #15
 800c376:	dc38      	bgt.n	800c3ea <_strtod_l+0x452>
 800c378:	9b06      	ldr	r3, [sp, #24]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f43f ae50 	beq.w	800c020 <_strtod_l+0x88>
 800c380:	dd24      	ble.n	800c3cc <_strtod_l+0x434>
 800c382:	2b16      	cmp	r3, #22
 800c384:	dc0b      	bgt.n	800c39e <_strtod_l+0x406>
 800c386:	496d      	ldr	r1, [pc, #436]	; (800c53c <_strtod_l+0x5a4>)
 800c388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c390:	4652      	mov	r2, sl
 800c392:	465b      	mov	r3, fp
 800c394:	f7f4 f938 	bl	8000608 <__aeabi_dmul>
 800c398:	4682      	mov	sl, r0
 800c39a:	468b      	mov	fp, r1
 800c39c:	e640      	b.n	800c020 <_strtod_l+0x88>
 800c39e:	9a06      	ldr	r2, [sp, #24]
 800c3a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	db20      	blt.n	800c3ea <_strtod_l+0x452>
 800c3a8:	4c64      	ldr	r4, [pc, #400]	; (800c53c <_strtod_l+0x5a4>)
 800c3aa:	f1c5 050f 	rsb	r5, r5, #15
 800c3ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	465b      	mov	r3, fp
 800c3b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ba:	f7f4 f925 	bl	8000608 <__aeabi_dmul>
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	1b5d      	subs	r5, r3, r5
 800c3c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c3c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c3ca:	e7e3      	b.n	800c394 <_strtod_l+0x3fc>
 800c3cc:	9b06      	ldr	r3, [sp, #24]
 800c3ce:	3316      	adds	r3, #22
 800c3d0:	db0b      	blt.n	800c3ea <_strtod_l+0x452>
 800c3d2:	9b05      	ldr	r3, [sp, #20]
 800c3d4:	1b9e      	subs	r6, r3, r6
 800c3d6:	4b59      	ldr	r3, [pc, #356]	; (800c53c <_strtod_l+0x5a4>)
 800c3d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c3dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	4659      	mov	r1, fp
 800c3e4:	f7f4 fa3a 	bl	800085c <__aeabi_ddiv>
 800c3e8:	e7d6      	b.n	800c398 <_strtod_l+0x400>
 800c3ea:	9b06      	ldr	r3, [sp, #24]
 800c3ec:	eba5 0808 	sub.w	r8, r5, r8
 800c3f0:	4498      	add	r8, r3
 800c3f2:	f1b8 0f00 	cmp.w	r8, #0
 800c3f6:	dd74      	ble.n	800c4e2 <_strtod_l+0x54a>
 800c3f8:	f018 030f 	ands.w	r3, r8, #15
 800c3fc:	d00a      	beq.n	800c414 <_strtod_l+0x47c>
 800c3fe:	494f      	ldr	r1, [pc, #316]	; (800c53c <_strtod_l+0x5a4>)
 800c400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c404:	4652      	mov	r2, sl
 800c406:	465b      	mov	r3, fp
 800c408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c40c:	f7f4 f8fc 	bl	8000608 <__aeabi_dmul>
 800c410:	4682      	mov	sl, r0
 800c412:	468b      	mov	fp, r1
 800c414:	f038 080f 	bics.w	r8, r8, #15
 800c418:	d04f      	beq.n	800c4ba <_strtod_l+0x522>
 800c41a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c41e:	dd22      	ble.n	800c466 <_strtod_l+0x4ce>
 800c420:	2500      	movs	r5, #0
 800c422:	462e      	mov	r6, r5
 800c424:	9507      	str	r5, [sp, #28]
 800c426:	9505      	str	r5, [sp, #20]
 800c428:	2322      	movs	r3, #34	; 0x22
 800c42a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c544 <_strtod_l+0x5ac>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	f04f 0a00 	mov.w	sl, #0
 800c434:	9b07      	ldr	r3, [sp, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f43f adf2 	beq.w	800c020 <_strtod_l+0x88>
 800c43c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 ff8c 	bl	800d35c <_Bfree>
 800c444:	9905      	ldr	r1, [sp, #20]
 800c446:	4620      	mov	r0, r4
 800c448:	f000 ff88 	bl	800d35c <_Bfree>
 800c44c:	4631      	mov	r1, r6
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 ff84 	bl	800d35c <_Bfree>
 800c454:	9907      	ldr	r1, [sp, #28]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 ff80 	bl	800d35c <_Bfree>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 ff7c 	bl	800d35c <_Bfree>
 800c464:	e5dc      	b.n	800c020 <_strtod_l+0x88>
 800c466:	4b36      	ldr	r3, [pc, #216]	; (800c540 <_strtod_l+0x5a8>)
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	2300      	movs	r3, #0
 800c46c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c470:	4650      	mov	r0, sl
 800c472:	4659      	mov	r1, fp
 800c474:	4699      	mov	r9, r3
 800c476:	f1b8 0f01 	cmp.w	r8, #1
 800c47a:	dc21      	bgt.n	800c4c0 <_strtod_l+0x528>
 800c47c:	b10b      	cbz	r3, 800c482 <_strtod_l+0x4ea>
 800c47e:	4682      	mov	sl, r0
 800c480:	468b      	mov	fp, r1
 800c482:	4b2f      	ldr	r3, [pc, #188]	; (800c540 <_strtod_l+0x5a8>)
 800c484:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c488:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c48c:	4652      	mov	r2, sl
 800c48e:	465b      	mov	r3, fp
 800c490:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c494:	f7f4 f8b8 	bl	8000608 <__aeabi_dmul>
 800c498:	4b2a      	ldr	r3, [pc, #168]	; (800c544 <_strtod_l+0x5ac>)
 800c49a:	460a      	mov	r2, r1
 800c49c:	400b      	ands	r3, r1
 800c49e:	492a      	ldr	r1, [pc, #168]	; (800c548 <_strtod_l+0x5b0>)
 800c4a0:	428b      	cmp	r3, r1
 800c4a2:	4682      	mov	sl, r0
 800c4a4:	d8bc      	bhi.n	800c420 <_strtod_l+0x488>
 800c4a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c4aa:	428b      	cmp	r3, r1
 800c4ac:	bf86      	itte	hi
 800c4ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c54c <_strtod_l+0x5b4>
 800c4b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800c4b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9304      	str	r3, [sp, #16]
 800c4be:	e084      	b.n	800c5ca <_strtod_l+0x632>
 800c4c0:	f018 0f01 	tst.w	r8, #1
 800c4c4:	d005      	beq.n	800c4d2 <_strtod_l+0x53a>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f7f4 f89c 	bl	8000608 <__aeabi_dmul>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	9a04      	ldr	r2, [sp, #16]
 800c4d4:	3208      	adds	r2, #8
 800c4d6:	f109 0901 	add.w	r9, r9, #1
 800c4da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4de:	9204      	str	r2, [sp, #16]
 800c4e0:	e7c9      	b.n	800c476 <_strtod_l+0x4de>
 800c4e2:	d0ea      	beq.n	800c4ba <_strtod_l+0x522>
 800c4e4:	f1c8 0800 	rsb	r8, r8, #0
 800c4e8:	f018 020f 	ands.w	r2, r8, #15
 800c4ec:	d00a      	beq.n	800c504 <_strtod_l+0x56c>
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <_strtod_l+0x5a4>)
 800c4f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4f4:	4650      	mov	r0, sl
 800c4f6:	4659      	mov	r1, fp
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f4 f9ae 	bl	800085c <__aeabi_ddiv>
 800c500:	4682      	mov	sl, r0
 800c502:	468b      	mov	fp, r1
 800c504:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c508:	d0d7      	beq.n	800c4ba <_strtod_l+0x522>
 800c50a:	f1b8 0f1f 	cmp.w	r8, #31
 800c50e:	dd1f      	ble.n	800c550 <_strtod_l+0x5b8>
 800c510:	2500      	movs	r5, #0
 800c512:	462e      	mov	r6, r5
 800c514:	9507      	str	r5, [sp, #28]
 800c516:	9505      	str	r5, [sp, #20]
 800c518:	2322      	movs	r3, #34	; 0x22
 800c51a:	f04f 0a00 	mov.w	sl, #0
 800c51e:	f04f 0b00 	mov.w	fp, #0
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	e786      	b.n	800c434 <_strtod_l+0x49c>
 800c526:	bf00      	nop
 800c528:	08010085 	.word	0x08010085
 800c52c:	0801009c 	.word	0x0801009c
 800c530:	0801007c 	.word	0x0801007c
 800c534:	0801007f 	.word	0x0801007f
 800c538:	0801030f 	.word	0x0801030f
 800c53c:	08010200 	.word	0x08010200
 800c540:	080101d8 	.word	0x080101d8
 800c544:	7ff00000 	.word	0x7ff00000
 800c548:	7ca00000 	.word	0x7ca00000
 800c54c:	7fefffff 	.word	0x7fefffff
 800c550:	f018 0310 	ands.w	r3, r8, #16
 800c554:	bf18      	it	ne
 800c556:	236a      	movne	r3, #106	; 0x6a
 800c558:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c908 <_strtod_l+0x970>
 800c55c:	9304      	str	r3, [sp, #16]
 800c55e:	4650      	mov	r0, sl
 800c560:	4659      	mov	r1, fp
 800c562:	2300      	movs	r3, #0
 800c564:	f018 0f01 	tst.w	r8, #1
 800c568:	d004      	beq.n	800c574 <_strtod_l+0x5dc>
 800c56a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c56e:	f7f4 f84b 	bl	8000608 <__aeabi_dmul>
 800c572:	2301      	movs	r3, #1
 800c574:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c578:	f109 0908 	add.w	r9, r9, #8
 800c57c:	d1f2      	bne.n	800c564 <_strtod_l+0x5cc>
 800c57e:	b10b      	cbz	r3, 800c584 <_strtod_l+0x5ec>
 800c580:	4682      	mov	sl, r0
 800c582:	468b      	mov	fp, r1
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	b1c3      	cbz	r3, 800c5ba <_strtod_l+0x622>
 800c588:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c58c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c590:	2b00      	cmp	r3, #0
 800c592:	4659      	mov	r1, fp
 800c594:	dd11      	ble.n	800c5ba <_strtod_l+0x622>
 800c596:	2b1f      	cmp	r3, #31
 800c598:	f340 8124 	ble.w	800c7e4 <_strtod_l+0x84c>
 800c59c:	2b34      	cmp	r3, #52	; 0x34
 800c59e:	bfde      	ittt	le
 800c5a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c5a4:	f04f 33ff 	movle.w	r3, #4294967295
 800c5a8:	fa03 f202 	lslle.w	r2, r3, r2
 800c5ac:	f04f 0a00 	mov.w	sl, #0
 800c5b0:	bfcc      	ite	gt
 800c5b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c5b6:	ea02 0b01 	andle.w	fp, r2, r1
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4650      	mov	r0, sl
 800c5c0:	4659      	mov	r1, fp
 800c5c2:	f7f4 fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d1a2      	bne.n	800c510 <_strtod_l+0x578>
 800c5ca:	9b07      	ldr	r3, [sp, #28]
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	9908      	ldr	r1, [sp, #32]
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	463a      	mov	r2, r7
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 ff29 	bl	800d42c <__s2b>
 800c5da:	9007      	str	r0, [sp, #28]
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f43f af1f 	beq.w	800c420 <_strtod_l+0x488>
 800c5e2:	9b05      	ldr	r3, [sp, #20]
 800c5e4:	1b9e      	subs	r6, r3, r6
 800c5e6:	9b06      	ldr	r3, [sp, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfb4      	ite	lt
 800c5ec:	4633      	movlt	r3, r6
 800c5ee:	2300      	movge	r3, #0
 800c5f0:	930c      	str	r3, [sp, #48]	; 0x30
 800c5f2:	9b06      	ldr	r3, [sp, #24]
 800c5f4:	2500      	movs	r5, #0
 800c5f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5fa:	9312      	str	r3, [sp, #72]	; 0x48
 800c5fc:	462e      	mov	r6, r5
 800c5fe:	9b07      	ldr	r3, [sp, #28]
 800c600:	4620      	mov	r0, r4
 800c602:	6859      	ldr	r1, [r3, #4]
 800c604:	f000 fe6a 	bl	800d2dc <_Balloc>
 800c608:	9005      	str	r0, [sp, #20]
 800c60a:	2800      	cmp	r0, #0
 800c60c:	f43f af0c 	beq.w	800c428 <_strtod_l+0x490>
 800c610:	9b07      	ldr	r3, [sp, #28]
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	3202      	adds	r2, #2
 800c616:	f103 010c 	add.w	r1, r3, #12
 800c61a:	0092      	lsls	r2, r2, #2
 800c61c:	300c      	adds	r0, #12
 800c61e:	f000 fe4f 	bl	800d2c0 <memcpy>
 800c622:	ec4b ab10 	vmov	d0, sl, fp
 800c626:	aa1a      	add	r2, sp, #104	; 0x68
 800c628:	a919      	add	r1, sp, #100	; 0x64
 800c62a:	4620      	mov	r0, r4
 800c62c:	f001 fa44 	bl	800dab8 <__d2b>
 800c630:	ec4b ab18 	vmov	d8, sl, fp
 800c634:	9018      	str	r0, [sp, #96]	; 0x60
 800c636:	2800      	cmp	r0, #0
 800c638:	f43f aef6 	beq.w	800c428 <_strtod_l+0x490>
 800c63c:	2101      	movs	r1, #1
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 ff8e 	bl	800d560 <__i2b>
 800c644:	4606      	mov	r6, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f aeee 	beq.w	800c428 <_strtod_l+0x490>
 800c64c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c64e:	9904      	ldr	r1, [sp, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	bfab      	itete	ge
 800c654:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c656:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c658:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c65a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c65e:	bfac      	ite	ge
 800c660:	eb03 0902 	addge.w	r9, r3, r2
 800c664:	1ad7      	sublt	r7, r2, r3
 800c666:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c668:	eba3 0801 	sub.w	r8, r3, r1
 800c66c:	4490      	add	r8, r2
 800c66e:	4ba1      	ldr	r3, [pc, #644]	; (800c8f4 <_strtod_l+0x95c>)
 800c670:	f108 38ff 	add.w	r8, r8, #4294967295
 800c674:	4598      	cmp	r8, r3
 800c676:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c67a:	f280 80c7 	bge.w	800c80c <_strtod_l+0x874>
 800c67e:	eba3 0308 	sub.w	r3, r3, r8
 800c682:	2b1f      	cmp	r3, #31
 800c684:	eba2 0203 	sub.w	r2, r2, r3
 800c688:	f04f 0101 	mov.w	r1, #1
 800c68c:	f300 80b1 	bgt.w	800c7f2 <_strtod_l+0x85a>
 800c690:	fa01 f303 	lsl.w	r3, r1, r3
 800c694:	930d      	str	r3, [sp, #52]	; 0x34
 800c696:	2300      	movs	r3, #0
 800c698:	9308      	str	r3, [sp, #32]
 800c69a:	eb09 0802 	add.w	r8, r9, r2
 800c69e:	9b04      	ldr	r3, [sp, #16]
 800c6a0:	45c1      	cmp	r9, r8
 800c6a2:	4417      	add	r7, r2
 800c6a4:	441f      	add	r7, r3
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	bfa8      	it	ge
 800c6aa:	4643      	movge	r3, r8
 800c6ac:	42bb      	cmp	r3, r7
 800c6ae:	bfa8      	it	ge
 800c6b0:	463b      	movge	r3, r7
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	bfc2      	ittt	gt
 800c6b6:	eba8 0803 	subgt.w	r8, r8, r3
 800c6ba:	1aff      	subgt	r7, r7, r3
 800c6bc:	eba9 0903 	subgt.w	r9, r9, r3
 800c6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dd17      	ble.n	800c6f6 <_strtod_l+0x75e>
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f001 f808 	bl	800d6e0 <__pow5mult>
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	f43f aea8 	beq.w	800c428 <_strtod_l+0x490>
 800c6d8:	4601      	mov	r1, r0
 800c6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 ff55 	bl	800d58c <__multiply>
 800c6e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f43f ae9f 	beq.w	800c428 <_strtod_l+0x490>
 800c6ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 fe35 	bl	800d35c <_Bfree>
 800c6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f4:	9318      	str	r3, [sp, #96]	; 0x60
 800c6f6:	f1b8 0f00 	cmp.w	r8, #0
 800c6fa:	f300 808c 	bgt.w	800c816 <_strtod_l+0x87e>
 800c6fe:	9b06      	ldr	r3, [sp, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	dd08      	ble.n	800c716 <_strtod_l+0x77e>
 800c704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c706:	9905      	ldr	r1, [sp, #20]
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 ffe9 	bl	800d6e0 <__pow5mult>
 800c70e:	9005      	str	r0, [sp, #20]
 800c710:	2800      	cmp	r0, #0
 800c712:	f43f ae89 	beq.w	800c428 <_strtod_l+0x490>
 800c716:	2f00      	cmp	r7, #0
 800c718:	dd08      	ble.n	800c72c <_strtod_l+0x794>
 800c71a:	9905      	ldr	r1, [sp, #20]
 800c71c:	463a      	mov	r2, r7
 800c71e:	4620      	mov	r0, r4
 800c720:	f001 f838 	bl	800d794 <__lshift>
 800c724:	9005      	str	r0, [sp, #20]
 800c726:	2800      	cmp	r0, #0
 800c728:	f43f ae7e 	beq.w	800c428 <_strtod_l+0x490>
 800c72c:	f1b9 0f00 	cmp.w	r9, #0
 800c730:	dd08      	ble.n	800c744 <_strtod_l+0x7ac>
 800c732:	4631      	mov	r1, r6
 800c734:	464a      	mov	r2, r9
 800c736:	4620      	mov	r0, r4
 800c738:	f001 f82c 	bl	800d794 <__lshift>
 800c73c:	4606      	mov	r6, r0
 800c73e:	2800      	cmp	r0, #0
 800c740:	f43f ae72 	beq.w	800c428 <_strtod_l+0x490>
 800c744:	9a05      	ldr	r2, [sp, #20]
 800c746:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 f8af 	bl	800d8ac <__mdiff>
 800c74e:	4605      	mov	r5, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	f43f ae69 	beq.w	800c428 <_strtod_l+0x490>
 800c756:	68c3      	ldr	r3, [r0, #12]
 800c758:	930b      	str	r3, [sp, #44]	; 0x2c
 800c75a:	2300      	movs	r3, #0
 800c75c:	60c3      	str	r3, [r0, #12]
 800c75e:	4631      	mov	r1, r6
 800c760:	f001 f888 	bl	800d874 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	da60      	bge.n	800c82a <_strtod_l+0x892>
 800c768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c76a:	ea53 030a 	orrs.w	r3, r3, sl
 800c76e:	f040 8082 	bne.w	800c876 <_strtod_l+0x8de>
 800c772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c776:	2b00      	cmp	r3, #0
 800c778:	d17d      	bne.n	800c876 <_strtod_l+0x8de>
 800c77a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c77e:	0d1b      	lsrs	r3, r3, #20
 800c780:	051b      	lsls	r3, r3, #20
 800c782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c786:	d976      	bls.n	800c876 <_strtod_l+0x8de>
 800c788:	696b      	ldr	r3, [r5, #20]
 800c78a:	b913      	cbnz	r3, 800c792 <_strtod_l+0x7fa>
 800c78c:	692b      	ldr	r3, [r5, #16]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	dd71      	ble.n	800c876 <_strtod_l+0x8de>
 800c792:	4629      	mov	r1, r5
 800c794:	2201      	movs	r2, #1
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fffc 	bl	800d794 <__lshift>
 800c79c:	4631      	mov	r1, r6
 800c79e:	4605      	mov	r5, r0
 800c7a0:	f001 f868 	bl	800d874 <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	dd66      	ble.n	800c876 <_strtod_l+0x8de>
 800c7a8:	9904      	ldr	r1, [sp, #16]
 800c7aa:	4a53      	ldr	r2, [pc, #332]	; (800c8f8 <_strtod_l+0x960>)
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	2900      	cmp	r1, #0
 800c7b0:	f000 8081 	beq.w	800c8b6 <_strtod_l+0x91e>
 800c7b4:	ea02 010b 	and.w	r1, r2, fp
 800c7b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c7bc:	dc7b      	bgt.n	800c8b6 <_strtod_l+0x91e>
 800c7be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c7c2:	f77f aea9 	ble.w	800c518 <_strtod_l+0x580>
 800c7c6:	4b4d      	ldr	r3, [pc, #308]	; (800c8fc <_strtod_l+0x964>)
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	4659      	mov	r1, fp
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f7f3 ff1b 	bl	8000608 <__aeabi_dmul>
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4303      	orrs	r3, r0
 800c7d6:	bf08      	it	eq
 800c7d8:	2322      	moveq	r3, #34	; 0x22
 800c7da:	4682      	mov	sl, r0
 800c7dc:	468b      	mov	fp, r1
 800c7de:	bf08      	it	eq
 800c7e0:	6023      	streq	r3, [r4, #0]
 800c7e2:	e62b      	b.n	800c43c <_strtod_l+0x4a4>
 800c7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ec:	ea03 0a0a 	and.w	sl, r3, sl
 800c7f0:	e6e3      	b.n	800c5ba <_strtod_l+0x622>
 800c7f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c7f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c7fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c7fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c802:	fa01 f308 	lsl.w	r3, r1, r8
 800c806:	9308      	str	r3, [sp, #32]
 800c808:	910d      	str	r1, [sp, #52]	; 0x34
 800c80a:	e746      	b.n	800c69a <_strtod_l+0x702>
 800c80c:	2300      	movs	r3, #0
 800c80e:	9308      	str	r3, [sp, #32]
 800c810:	2301      	movs	r3, #1
 800c812:	930d      	str	r3, [sp, #52]	; 0x34
 800c814:	e741      	b.n	800c69a <_strtod_l+0x702>
 800c816:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c818:	4642      	mov	r2, r8
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 ffba 	bl	800d794 <__lshift>
 800c820:	9018      	str	r0, [sp, #96]	; 0x60
 800c822:	2800      	cmp	r0, #0
 800c824:	f47f af6b 	bne.w	800c6fe <_strtod_l+0x766>
 800c828:	e5fe      	b.n	800c428 <_strtod_l+0x490>
 800c82a:	465f      	mov	r7, fp
 800c82c:	d16e      	bne.n	800c90c <_strtod_l+0x974>
 800c82e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c834:	b342      	cbz	r2, 800c888 <_strtod_l+0x8f0>
 800c836:	4a32      	ldr	r2, [pc, #200]	; (800c900 <_strtod_l+0x968>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d128      	bne.n	800c88e <_strtod_l+0x8f6>
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	4651      	mov	r1, sl
 800c840:	b1eb      	cbz	r3, 800c87e <_strtod_l+0x8e6>
 800c842:	4b2d      	ldr	r3, [pc, #180]	; (800c8f8 <_strtod_l+0x960>)
 800c844:	403b      	ands	r3, r7
 800c846:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295
 800c84e:	d819      	bhi.n	800c884 <_strtod_l+0x8ec>
 800c850:	0d1b      	lsrs	r3, r3, #20
 800c852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c856:	fa02 f303 	lsl.w	r3, r2, r3
 800c85a:	4299      	cmp	r1, r3
 800c85c:	d117      	bne.n	800c88e <_strtod_l+0x8f6>
 800c85e:	4b29      	ldr	r3, [pc, #164]	; (800c904 <_strtod_l+0x96c>)
 800c860:	429f      	cmp	r7, r3
 800c862:	d102      	bne.n	800c86a <_strtod_l+0x8d2>
 800c864:	3101      	adds	r1, #1
 800c866:	f43f addf 	beq.w	800c428 <_strtod_l+0x490>
 800c86a:	4b23      	ldr	r3, [pc, #140]	; (800c8f8 <_strtod_l+0x960>)
 800c86c:	403b      	ands	r3, r7
 800c86e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c872:	f04f 0a00 	mov.w	sl, #0
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1a4      	bne.n	800c7c6 <_strtod_l+0x82e>
 800c87c:	e5de      	b.n	800c43c <_strtod_l+0x4a4>
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
 800c882:	e7ea      	b.n	800c85a <_strtod_l+0x8c2>
 800c884:	4613      	mov	r3, r2
 800c886:	e7e8      	b.n	800c85a <_strtod_l+0x8c2>
 800c888:	ea53 030a 	orrs.w	r3, r3, sl
 800c88c:	d08c      	beq.n	800c7a8 <_strtod_l+0x810>
 800c88e:	9b08      	ldr	r3, [sp, #32]
 800c890:	b1db      	cbz	r3, 800c8ca <_strtod_l+0x932>
 800c892:	423b      	tst	r3, r7
 800c894:	d0ef      	beq.n	800c876 <_strtod_l+0x8de>
 800c896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c898:	9a04      	ldr	r2, [sp, #16]
 800c89a:	4650      	mov	r0, sl
 800c89c:	4659      	mov	r1, fp
 800c89e:	b1c3      	cbz	r3, 800c8d2 <_strtod_l+0x93a>
 800c8a0:	f7ff fb5c 	bl	800bf5c <sulp>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	ec51 0b18 	vmov	r0, r1, d8
 800c8ac:	f7f3 fcf6 	bl	800029c <__adddf3>
 800c8b0:	4682      	mov	sl, r0
 800c8b2:	468b      	mov	fp, r1
 800c8b4:	e7df      	b.n	800c876 <_strtod_l+0x8de>
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c8c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c8c4:	f04f 3aff 	mov.w	sl, #4294967295
 800c8c8:	e7d5      	b.n	800c876 <_strtod_l+0x8de>
 800c8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8cc:	ea13 0f0a 	tst.w	r3, sl
 800c8d0:	e7e0      	b.n	800c894 <_strtod_l+0x8fc>
 800c8d2:	f7ff fb43 	bl	800bf5c <sulp>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	ec51 0b18 	vmov	r0, r1, d8
 800c8de:	f7f3 fcdb 	bl	8000298 <__aeabi_dsub>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	468b      	mov	fp, r1
 800c8ea:	f7f4 f8f5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0c1      	beq.n	800c876 <_strtod_l+0x8de>
 800c8f2:	e611      	b.n	800c518 <_strtod_l+0x580>
 800c8f4:	fffffc02 	.word	0xfffffc02
 800c8f8:	7ff00000 	.word	0x7ff00000
 800c8fc:	39500000 	.word	0x39500000
 800c900:	000fffff 	.word	0x000fffff
 800c904:	7fefffff 	.word	0x7fefffff
 800c908:	080100b0 	.word	0x080100b0
 800c90c:	4631      	mov	r1, r6
 800c90e:	4628      	mov	r0, r5
 800c910:	f001 f92e 	bl	800db70 <__ratio>
 800c914:	ec59 8b10 	vmov	r8, r9, d0
 800c918:	ee10 0a10 	vmov	r0, s0
 800c91c:	2200      	movs	r2, #0
 800c91e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c922:	4649      	mov	r1, r9
 800c924:	f7f4 f8ec 	bl	8000b00 <__aeabi_dcmple>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d07a      	beq.n	800ca22 <_strtod_l+0xa8a>
 800c92c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d04a      	beq.n	800c9c8 <_strtod_l+0xa30>
 800c932:	4b95      	ldr	r3, [pc, #596]	; (800cb88 <_strtod_l+0xbf0>)
 800c934:	2200      	movs	r2, #0
 800c936:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c93a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cb88 <_strtod_l+0xbf0>
 800c93e:	f04f 0800 	mov.w	r8, #0
 800c942:	4b92      	ldr	r3, [pc, #584]	; (800cb8c <_strtod_l+0xbf4>)
 800c944:	403b      	ands	r3, r7
 800c946:	930d      	str	r3, [sp, #52]	; 0x34
 800c948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c94a:	4b91      	ldr	r3, [pc, #580]	; (800cb90 <_strtod_l+0xbf8>)
 800c94c:	429a      	cmp	r2, r3
 800c94e:	f040 80b0 	bne.w	800cab2 <_strtod_l+0xb1a>
 800c952:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c956:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c95a:	ec4b ab10 	vmov	d0, sl, fp
 800c95e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c962:	f001 f82d 	bl	800d9c0 <__ulp>
 800c966:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c96a:	ec53 2b10 	vmov	r2, r3, d0
 800c96e:	f7f3 fe4b 	bl	8000608 <__aeabi_dmul>
 800c972:	4652      	mov	r2, sl
 800c974:	465b      	mov	r3, fp
 800c976:	f7f3 fc91 	bl	800029c <__adddf3>
 800c97a:	460b      	mov	r3, r1
 800c97c:	4983      	ldr	r1, [pc, #524]	; (800cb8c <_strtod_l+0xbf4>)
 800c97e:	4a85      	ldr	r2, [pc, #532]	; (800cb94 <_strtod_l+0xbfc>)
 800c980:	4019      	ands	r1, r3
 800c982:	4291      	cmp	r1, r2
 800c984:	4682      	mov	sl, r0
 800c986:	d960      	bls.n	800ca4a <_strtod_l+0xab2>
 800c988:	ee18 3a90 	vmov	r3, s17
 800c98c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c990:	4293      	cmp	r3, r2
 800c992:	d104      	bne.n	800c99e <_strtod_l+0xa06>
 800c994:	ee18 3a10 	vmov	r3, s16
 800c998:	3301      	adds	r3, #1
 800c99a:	f43f ad45 	beq.w	800c428 <_strtod_l+0x490>
 800c99e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cba0 <_strtod_l+0xc08>
 800c9a2:	f04f 3aff 	mov.w	sl, #4294967295
 800c9a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 fcd7 	bl	800d35c <_Bfree>
 800c9ae:	9905      	ldr	r1, [sp, #20]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fcd3 	bl	800d35c <_Bfree>
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 fccf 	bl	800d35c <_Bfree>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fccb 	bl	800d35c <_Bfree>
 800c9c6:	e61a      	b.n	800c5fe <_strtod_l+0x666>
 800c9c8:	f1ba 0f00 	cmp.w	sl, #0
 800c9cc:	d11b      	bne.n	800ca06 <_strtod_l+0xa6e>
 800c9ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d2:	b9f3      	cbnz	r3, 800ca12 <_strtod_l+0xa7a>
 800c9d4:	4b6c      	ldr	r3, [pc, #432]	; (800cb88 <_strtod_l+0xbf0>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	4640      	mov	r0, r8
 800c9da:	4649      	mov	r1, r9
 800c9dc:	f7f4 f886 	bl	8000aec <__aeabi_dcmplt>
 800c9e0:	b9d0      	cbnz	r0, 800ca18 <_strtod_l+0xa80>
 800c9e2:	4640      	mov	r0, r8
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	4b6c      	ldr	r3, [pc, #432]	; (800cb98 <_strtod_l+0xc00>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f7f3 fe0d 	bl	8000608 <__aeabi_dmul>
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c9f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c9fa:	9315      	str	r3, [sp, #84]	; 0x54
 800c9fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ca00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca04:	e79d      	b.n	800c942 <_strtod_l+0x9aa>
 800ca06:	f1ba 0f01 	cmp.w	sl, #1
 800ca0a:	d102      	bne.n	800ca12 <_strtod_l+0xa7a>
 800ca0c:	2f00      	cmp	r7, #0
 800ca0e:	f43f ad83 	beq.w	800c518 <_strtod_l+0x580>
 800ca12:	4b62      	ldr	r3, [pc, #392]	; (800cb9c <_strtod_l+0xc04>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	e78e      	b.n	800c936 <_strtod_l+0x99e>
 800ca18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cb98 <_strtod_l+0xc00>
 800ca1c:	f04f 0800 	mov.w	r8, #0
 800ca20:	e7e7      	b.n	800c9f2 <_strtod_l+0xa5a>
 800ca22:	4b5d      	ldr	r3, [pc, #372]	; (800cb98 <_strtod_l+0xc00>)
 800ca24:	4640      	mov	r0, r8
 800ca26:	4649      	mov	r1, r9
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f7f3 fded 	bl	8000608 <__aeabi_dmul>
 800ca2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca30:	4680      	mov	r8, r0
 800ca32:	4689      	mov	r9, r1
 800ca34:	b933      	cbnz	r3, 800ca44 <_strtod_l+0xaac>
 800ca36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca3a:	900e      	str	r0, [sp, #56]	; 0x38
 800ca3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ca42:	e7dd      	b.n	800ca00 <_strtod_l+0xa68>
 800ca44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ca48:	e7f9      	b.n	800ca3e <_strtod_l+0xaa6>
 800ca4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1a8      	bne.n	800c9a6 <_strtod_l+0xa0e>
 800ca54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca5a:	0d1b      	lsrs	r3, r3, #20
 800ca5c:	051b      	lsls	r3, r3, #20
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d1a1      	bne.n	800c9a6 <_strtod_l+0xa0e>
 800ca62:	4640      	mov	r0, r8
 800ca64:	4649      	mov	r1, r9
 800ca66:	f7f4 f907 	bl	8000c78 <__aeabi_d2lz>
 800ca6a:	f7f3 fd9f 	bl	80005ac <__aeabi_l2d>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	f7f3 fc0f 	bl	8000298 <__aeabi_dsub>
 800ca7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca80:	ea43 030a 	orr.w	r3, r3, sl
 800ca84:	4313      	orrs	r3, r2
 800ca86:	4680      	mov	r8, r0
 800ca88:	4689      	mov	r9, r1
 800ca8a:	d055      	beq.n	800cb38 <_strtod_l+0xba0>
 800ca8c:	a336      	add	r3, pc, #216	; (adr r3, 800cb68 <_strtod_l+0xbd0>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f4 f82b 	bl	8000aec <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f47f acd0 	bne.w	800c43c <_strtod_l+0x4a4>
 800ca9c:	a334      	add	r3, pc, #208	; (adr r3, 800cb70 <_strtod_l+0xbd8>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f4 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 800caaa:	2800      	cmp	r0, #0
 800caac:	f43f af7b 	beq.w	800c9a6 <_strtod_l+0xa0e>
 800cab0:	e4c4      	b.n	800c43c <_strtod_l+0x4a4>
 800cab2:	9b04      	ldr	r3, [sp, #16]
 800cab4:	b333      	cbz	r3, 800cb04 <_strtod_l+0xb6c>
 800cab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cabc:	d822      	bhi.n	800cb04 <_strtod_l+0xb6c>
 800cabe:	a32e      	add	r3, pc, #184	; (adr r3, 800cb78 <_strtod_l+0xbe0>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	4640      	mov	r0, r8
 800cac6:	4649      	mov	r1, r9
 800cac8:	f7f4 f81a 	bl	8000b00 <__aeabi_dcmple>
 800cacc:	b1a0      	cbz	r0, 800caf8 <_strtod_l+0xb60>
 800cace:	4649      	mov	r1, r9
 800cad0:	4640      	mov	r0, r8
 800cad2:	f7f4 f849 	bl	8000b68 <__aeabi_d2uiz>
 800cad6:	2801      	cmp	r0, #1
 800cad8:	bf38      	it	cc
 800cada:	2001      	movcc	r0, #1
 800cadc:	f7f3 fd1a 	bl	8000514 <__aeabi_ui2d>
 800cae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cae2:	4680      	mov	r8, r0
 800cae4:	4689      	mov	r9, r1
 800cae6:	bb23      	cbnz	r3, 800cb32 <_strtod_l+0xb9a>
 800cae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caec:	9010      	str	r0, [sp, #64]	; 0x40
 800caee:	9311      	str	r3, [sp, #68]	; 0x44
 800caf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800caf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800caf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cafa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cafc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	9309      	str	r3, [sp, #36]	; 0x24
 800cb04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb08:	eeb0 0a48 	vmov.f32	s0, s16
 800cb0c:	eef0 0a68 	vmov.f32	s1, s17
 800cb10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb14:	f000 ff54 	bl	800d9c0 <__ulp>
 800cb18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb1c:	ec53 2b10 	vmov	r2, r3, d0
 800cb20:	f7f3 fd72 	bl	8000608 <__aeabi_dmul>
 800cb24:	ec53 2b18 	vmov	r2, r3, d8
 800cb28:	f7f3 fbb8 	bl	800029c <__adddf3>
 800cb2c:	4682      	mov	sl, r0
 800cb2e:	468b      	mov	fp, r1
 800cb30:	e78d      	b.n	800ca4e <_strtod_l+0xab6>
 800cb32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cb36:	e7db      	b.n	800caf0 <_strtod_l+0xb58>
 800cb38:	a311      	add	r3, pc, #68	; (adr r3, 800cb80 <_strtod_l+0xbe8>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7f3 ffd5 	bl	8000aec <__aeabi_dcmplt>
 800cb42:	e7b2      	b.n	800caaa <_strtod_l+0xb12>
 800cb44:	2300      	movs	r3, #0
 800cb46:	930a      	str	r3, [sp, #40]	; 0x28
 800cb48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	f7ff ba6b 	b.w	800c028 <_strtod_l+0x90>
 800cb52:	2a65      	cmp	r2, #101	; 0x65
 800cb54:	f43f ab5f 	beq.w	800c216 <_strtod_l+0x27e>
 800cb58:	2a45      	cmp	r2, #69	; 0x45
 800cb5a:	f43f ab5c 	beq.w	800c216 <_strtod_l+0x27e>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f7ff bb94 	b.w	800c28c <_strtod_l+0x2f4>
 800cb64:	f3af 8000 	nop.w
 800cb68:	94a03595 	.word	0x94a03595
 800cb6c:	3fdfffff 	.word	0x3fdfffff
 800cb70:	35afe535 	.word	0x35afe535
 800cb74:	3fe00000 	.word	0x3fe00000
 800cb78:	ffc00000 	.word	0xffc00000
 800cb7c:	41dfffff 	.word	0x41dfffff
 800cb80:	94a03595 	.word	0x94a03595
 800cb84:	3fcfffff 	.word	0x3fcfffff
 800cb88:	3ff00000 	.word	0x3ff00000
 800cb8c:	7ff00000 	.word	0x7ff00000
 800cb90:	7fe00000 	.word	0x7fe00000
 800cb94:	7c9fffff 	.word	0x7c9fffff
 800cb98:	3fe00000 	.word	0x3fe00000
 800cb9c:	bff00000 	.word	0xbff00000
 800cba0:	7fefffff 	.word	0x7fefffff

0800cba4 <strtod>:
 800cba4:	460a      	mov	r2, r1
 800cba6:	4601      	mov	r1, r0
 800cba8:	4802      	ldr	r0, [pc, #8]	; (800cbb4 <strtod+0x10>)
 800cbaa:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <strtod+0x14>)
 800cbac:	6800      	ldr	r0, [r0, #0]
 800cbae:	f7ff b9f3 	b.w	800bf98 <_strtod_l>
 800cbb2:	bf00      	nop
 800cbb4:	20000088 	.word	0x20000088
 800cbb8:	200000f0 	.word	0x200000f0

0800cbbc <rshift>:
 800cbbc:	6903      	ldr	r3, [r0, #16]
 800cbbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cbca:	f100 0414 	add.w	r4, r0, #20
 800cbce:	dd45      	ble.n	800cc5c <rshift+0xa0>
 800cbd0:	f011 011f 	ands.w	r1, r1, #31
 800cbd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cbd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cbdc:	d10c      	bne.n	800cbf8 <rshift+0x3c>
 800cbde:	f100 0710 	add.w	r7, r0, #16
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	42b1      	cmp	r1, r6
 800cbe6:	d334      	bcc.n	800cc52 <rshift+0x96>
 800cbe8:	1a9b      	subs	r3, r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	1eea      	subs	r2, r5, #3
 800cbee:	4296      	cmp	r6, r2
 800cbf0:	bf38      	it	cc
 800cbf2:	2300      	movcc	r3, #0
 800cbf4:	4423      	add	r3, r4
 800cbf6:	e015      	b.n	800cc24 <rshift+0x68>
 800cbf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cbfc:	f1c1 0820 	rsb	r8, r1, #32
 800cc00:	40cf      	lsrs	r7, r1
 800cc02:	f105 0e04 	add.w	lr, r5, #4
 800cc06:	46a1      	mov	r9, r4
 800cc08:	4576      	cmp	r6, lr
 800cc0a:	46f4      	mov	ip, lr
 800cc0c:	d815      	bhi.n	800cc3a <rshift+0x7e>
 800cc0e:	1a9a      	subs	r2, r3, r2
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	3a04      	subs	r2, #4
 800cc14:	3501      	adds	r5, #1
 800cc16:	42ae      	cmp	r6, r5
 800cc18:	bf38      	it	cc
 800cc1a:	2200      	movcc	r2, #0
 800cc1c:	18a3      	adds	r3, r4, r2
 800cc1e:	50a7      	str	r7, [r4, r2]
 800cc20:	b107      	cbz	r7, 800cc24 <rshift+0x68>
 800cc22:	3304      	adds	r3, #4
 800cc24:	1b1a      	subs	r2, r3, r4
 800cc26:	42a3      	cmp	r3, r4
 800cc28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc2c:	bf08      	it	eq
 800cc2e:	2300      	moveq	r3, #0
 800cc30:	6102      	str	r2, [r0, #16]
 800cc32:	bf08      	it	eq
 800cc34:	6143      	streq	r3, [r0, #20]
 800cc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc3a:	f8dc c000 	ldr.w	ip, [ip]
 800cc3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc42:	ea4c 0707 	orr.w	r7, ip, r7
 800cc46:	f849 7b04 	str.w	r7, [r9], #4
 800cc4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc4e:	40cf      	lsrs	r7, r1
 800cc50:	e7da      	b.n	800cc08 <rshift+0x4c>
 800cc52:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc56:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc5a:	e7c3      	b.n	800cbe4 <rshift+0x28>
 800cc5c:	4623      	mov	r3, r4
 800cc5e:	e7e1      	b.n	800cc24 <rshift+0x68>

0800cc60 <__hexdig_fun>:
 800cc60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cc64:	2b09      	cmp	r3, #9
 800cc66:	d802      	bhi.n	800cc6e <__hexdig_fun+0xe>
 800cc68:	3820      	subs	r0, #32
 800cc6a:	b2c0      	uxtb	r0, r0
 800cc6c:	4770      	bx	lr
 800cc6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cc72:	2b05      	cmp	r3, #5
 800cc74:	d801      	bhi.n	800cc7a <__hexdig_fun+0x1a>
 800cc76:	3847      	subs	r0, #71	; 0x47
 800cc78:	e7f7      	b.n	800cc6a <__hexdig_fun+0xa>
 800cc7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc7e:	2b05      	cmp	r3, #5
 800cc80:	d801      	bhi.n	800cc86 <__hexdig_fun+0x26>
 800cc82:	3827      	subs	r0, #39	; 0x27
 800cc84:	e7f1      	b.n	800cc6a <__hexdig_fun+0xa>
 800cc86:	2000      	movs	r0, #0
 800cc88:	4770      	bx	lr
	...

0800cc8c <__gethex>:
 800cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc90:	ed2d 8b02 	vpush	{d8}
 800cc94:	b089      	sub	sp, #36	; 0x24
 800cc96:	ee08 0a10 	vmov	s16, r0
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	4bb4      	ldr	r3, [pc, #720]	; (800cf70 <__gethex+0x2e4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	4618      	mov	r0, r3
 800cca4:	468b      	mov	fp, r1
 800cca6:	4690      	mov	r8, r2
 800cca8:	f7f3 fa9a 	bl	80001e0 <strlen>
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	f8db 2000 	ldr.w	r2, [fp]
 800ccb2:	4403      	add	r3, r0
 800ccb4:	4682      	mov	sl, r0
 800ccb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ccba:	9305      	str	r3, [sp, #20]
 800ccbc:	1c93      	adds	r3, r2, #2
 800ccbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ccc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ccc6:	32fe      	adds	r2, #254	; 0xfe
 800ccc8:	18d1      	adds	r1, r2, r3
 800ccca:	461f      	mov	r7, r3
 800cccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ccd0:	9100      	str	r1, [sp, #0]
 800ccd2:	2830      	cmp	r0, #48	; 0x30
 800ccd4:	d0f8      	beq.n	800ccc8 <__gethex+0x3c>
 800ccd6:	f7ff ffc3 	bl	800cc60 <__hexdig_fun>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d13a      	bne.n	800cd56 <__gethex+0xca>
 800cce0:	9901      	ldr	r1, [sp, #4]
 800cce2:	4652      	mov	r2, sl
 800cce4:	4638      	mov	r0, r7
 800cce6:	f001 f87f 	bl	800dde8 <strncmp>
 800ccea:	4605      	mov	r5, r0
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d168      	bne.n	800cdc2 <__gethex+0x136>
 800ccf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ccf4:	eb07 060a 	add.w	r6, r7, sl
 800ccf8:	f7ff ffb2 	bl	800cc60 <__hexdig_fun>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d062      	beq.n	800cdc6 <__gethex+0x13a>
 800cd00:	4633      	mov	r3, r6
 800cd02:	7818      	ldrb	r0, [r3, #0]
 800cd04:	2830      	cmp	r0, #48	; 0x30
 800cd06:	461f      	mov	r7, r3
 800cd08:	f103 0301 	add.w	r3, r3, #1
 800cd0c:	d0f9      	beq.n	800cd02 <__gethex+0x76>
 800cd0e:	f7ff ffa7 	bl	800cc60 <__hexdig_fun>
 800cd12:	2301      	movs	r3, #1
 800cd14:	fab0 f480 	clz	r4, r0
 800cd18:	0964      	lsrs	r4, r4, #5
 800cd1a:	4635      	mov	r5, r6
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	463a      	mov	r2, r7
 800cd20:	4616      	mov	r6, r2
 800cd22:	3201      	adds	r2, #1
 800cd24:	7830      	ldrb	r0, [r6, #0]
 800cd26:	f7ff ff9b 	bl	800cc60 <__hexdig_fun>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	d1f8      	bne.n	800cd20 <__gethex+0x94>
 800cd2e:	9901      	ldr	r1, [sp, #4]
 800cd30:	4652      	mov	r2, sl
 800cd32:	4630      	mov	r0, r6
 800cd34:	f001 f858 	bl	800dde8 <strncmp>
 800cd38:	b980      	cbnz	r0, 800cd5c <__gethex+0xd0>
 800cd3a:	b94d      	cbnz	r5, 800cd50 <__gethex+0xc4>
 800cd3c:	eb06 050a 	add.w	r5, r6, sl
 800cd40:	462a      	mov	r2, r5
 800cd42:	4616      	mov	r6, r2
 800cd44:	3201      	adds	r2, #1
 800cd46:	7830      	ldrb	r0, [r6, #0]
 800cd48:	f7ff ff8a 	bl	800cc60 <__hexdig_fun>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d1f8      	bne.n	800cd42 <__gethex+0xb6>
 800cd50:	1bad      	subs	r5, r5, r6
 800cd52:	00ad      	lsls	r5, r5, #2
 800cd54:	e004      	b.n	800cd60 <__gethex+0xd4>
 800cd56:	2400      	movs	r4, #0
 800cd58:	4625      	mov	r5, r4
 800cd5a:	e7e0      	b.n	800cd1e <__gethex+0x92>
 800cd5c:	2d00      	cmp	r5, #0
 800cd5e:	d1f7      	bne.n	800cd50 <__gethex+0xc4>
 800cd60:	7833      	ldrb	r3, [r6, #0]
 800cd62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd66:	2b50      	cmp	r3, #80	; 0x50
 800cd68:	d13b      	bne.n	800cde2 <__gethex+0x156>
 800cd6a:	7873      	ldrb	r3, [r6, #1]
 800cd6c:	2b2b      	cmp	r3, #43	; 0x2b
 800cd6e:	d02c      	beq.n	800cdca <__gethex+0x13e>
 800cd70:	2b2d      	cmp	r3, #45	; 0x2d
 800cd72:	d02e      	beq.n	800cdd2 <__gethex+0x146>
 800cd74:	1c71      	adds	r1, r6, #1
 800cd76:	f04f 0900 	mov.w	r9, #0
 800cd7a:	7808      	ldrb	r0, [r1, #0]
 800cd7c:	f7ff ff70 	bl	800cc60 <__hexdig_fun>
 800cd80:	1e43      	subs	r3, r0, #1
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b18      	cmp	r3, #24
 800cd86:	d82c      	bhi.n	800cde2 <__gethex+0x156>
 800cd88:	f1a0 0210 	sub.w	r2, r0, #16
 800cd8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd90:	f7ff ff66 	bl	800cc60 <__hexdig_fun>
 800cd94:	1e43      	subs	r3, r0, #1
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b18      	cmp	r3, #24
 800cd9a:	d91d      	bls.n	800cdd8 <__gethex+0x14c>
 800cd9c:	f1b9 0f00 	cmp.w	r9, #0
 800cda0:	d000      	beq.n	800cda4 <__gethex+0x118>
 800cda2:	4252      	negs	r2, r2
 800cda4:	4415      	add	r5, r2
 800cda6:	f8cb 1000 	str.w	r1, [fp]
 800cdaa:	b1e4      	cbz	r4, 800cde6 <__gethex+0x15a>
 800cdac:	9b00      	ldr	r3, [sp, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bf14      	ite	ne
 800cdb2:	2700      	movne	r7, #0
 800cdb4:	2706      	moveq	r7, #6
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	b009      	add	sp, #36	; 0x24
 800cdba:	ecbd 8b02 	vpop	{d8}
 800cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc2:	463e      	mov	r6, r7
 800cdc4:	4625      	mov	r5, r4
 800cdc6:	2401      	movs	r4, #1
 800cdc8:	e7ca      	b.n	800cd60 <__gethex+0xd4>
 800cdca:	f04f 0900 	mov.w	r9, #0
 800cdce:	1cb1      	adds	r1, r6, #2
 800cdd0:	e7d3      	b.n	800cd7a <__gethex+0xee>
 800cdd2:	f04f 0901 	mov.w	r9, #1
 800cdd6:	e7fa      	b.n	800cdce <__gethex+0x142>
 800cdd8:	230a      	movs	r3, #10
 800cdda:	fb03 0202 	mla	r2, r3, r2, r0
 800cdde:	3a10      	subs	r2, #16
 800cde0:	e7d4      	b.n	800cd8c <__gethex+0x100>
 800cde2:	4631      	mov	r1, r6
 800cde4:	e7df      	b.n	800cda6 <__gethex+0x11a>
 800cde6:	1bf3      	subs	r3, r6, r7
 800cde8:	3b01      	subs	r3, #1
 800cdea:	4621      	mov	r1, r4
 800cdec:	2b07      	cmp	r3, #7
 800cdee:	dc0b      	bgt.n	800ce08 <__gethex+0x17c>
 800cdf0:	ee18 0a10 	vmov	r0, s16
 800cdf4:	f000 fa72 	bl	800d2dc <_Balloc>
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	b940      	cbnz	r0, 800ce0e <__gethex+0x182>
 800cdfc:	4b5d      	ldr	r3, [pc, #372]	; (800cf74 <__gethex+0x2e8>)
 800cdfe:	4602      	mov	r2, r0
 800ce00:	21de      	movs	r1, #222	; 0xde
 800ce02:	485d      	ldr	r0, [pc, #372]	; (800cf78 <__gethex+0x2ec>)
 800ce04:	f001 f812 	bl	800de2c <__assert_func>
 800ce08:	3101      	adds	r1, #1
 800ce0a:	105b      	asrs	r3, r3, #1
 800ce0c:	e7ee      	b.n	800cdec <__gethex+0x160>
 800ce0e:	f100 0914 	add.w	r9, r0, #20
 800ce12:	f04f 0b00 	mov.w	fp, #0
 800ce16:	f1ca 0301 	rsb	r3, sl, #1
 800ce1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce1e:	f8cd b000 	str.w	fp, [sp]
 800ce22:	9306      	str	r3, [sp, #24]
 800ce24:	42b7      	cmp	r7, r6
 800ce26:	d340      	bcc.n	800ceaa <__gethex+0x21e>
 800ce28:	9802      	ldr	r0, [sp, #8]
 800ce2a:	9b00      	ldr	r3, [sp, #0]
 800ce2c:	f840 3b04 	str.w	r3, [r0], #4
 800ce30:	eba0 0009 	sub.w	r0, r0, r9
 800ce34:	1080      	asrs	r0, r0, #2
 800ce36:	0146      	lsls	r6, r0, #5
 800ce38:	6120      	str	r0, [r4, #16]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fb40 	bl	800d4c0 <__hi0bits>
 800ce40:	1a30      	subs	r0, r6, r0
 800ce42:	f8d8 6000 	ldr.w	r6, [r8]
 800ce46:	42b0      	cmp	r0, r6
 800ce48:	dd63      	ble.n	800cf12 <__gethex+0x286>
 800ce4a:	1b87      	subs	r7, r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 fee4 	bl	800dc1c <__any_on>
 800ce54:	4682      	mov	sl, r0
 800ce56:	b1a8      	cbz	r0, 800ce84 <__gethex+0x1f8>
 800ce58:	1e7b      	subs	r3, r7, #1
 800ce5a:	1159      	asrs	r1, r3, #5
 800ce5c:	f003 021f 	and.w	r2, r3, #31
 800ce60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ce64:	f04f 0a01 	mov.w	sl, #1
 800ce68:	fa0a f202 	lsl.w	r2, sl, r2
 800ce6c:	420a      	tst	r2, r1
 800ce6e:	d009      	beq.n	800ce84 <__gethex+0x1f8>
 800ce70:	4553      	cmp	r3, sl
 800ce72:	dd05      	ble.n	800ce80 <__gethex+0x1f4>
 800ce74:	1eb9      	subs	r1, r7, #2
 800ce76:	4620      	mov	r0, r4
 800ce78:	f000 fed0 	bl	800dc1c <__any_on>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d145      	bne.n	800cf0c <__gethex+0x280>
 800ce80:	f04f 0a02 	mov.w	sl, #2
 800ce84:	4639      	mov	r1, r7
 800ce86:	4620      	mov	r0, r4
 800ce88:	f7ff fe98 	bl	800cbbc <rshift>
 800ce8c:	443d      	add	r5, r7
 800ce8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce92:	42ab      	cmp	r3, r5
 800ce94:	da4c      	bge.n	800cf30 <__gethex+0x2a4>
 800ce96:	ee18 0a10 	vmov	r0, s16
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	f000 fa5e 	bl	800d35c <_Bfree>
 800cea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cea2:	2300      	movs	r3, #0
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	27a3      	movs	r7, #163	; 0xa3
 800cea8:	e785      	b.n	800cdb6 <__gethex+0x12a>
 800ceaa:	1e73      	subs	r3, r6, #1
 800ceac:	9a05      	ldr	r2, [sp, #20]
 800ceae:	9303      	str	r3, [sp, #12]
 800ceb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d019      	beq.n	800ceec <__gethex+0x260>
 800ceb8:	f1bb 0f20 	cmp.w	fp, #32
 800cebc:	d107      	bne.n	800cece <__gethex+0x242>
 800cebe:	9b02      	ldr	r3, [sp, #8]
 800cec0:	9a00      	ldr	r2, [sp, #0]
 800cec2:	f843 2b04 	str.w	r2, [r3], #4
 800cec6:	9302      	str	r3, [sp, #8]
 800cec8:	2300      	movs	r3, #0
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	469b      	mov	fp, r3
 800cece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ced2:	f7ff fec5 	bl	800cc60 <__hexdig_fun>
 800ced6:	9b00      	ldr	r3, [sp, #0]
 800ced8:	f000 000f 	and.w	r0, r0, #15
 800cedc:	fa00 f00b 	lsl.w	r0, r0, fp
 800cee0:	4303      	orrs	r3, r0
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	f10b 0b04 	add.w	fp, fp, #4
 800cee8:	9b03      	ldr	r3, [sp, #12]
 800ceea:	e00d      	b.n	800cf08 <__gethex+0x27c>
 800ceec:	9b03      	ldr	r3, [sp, #12]
 800ceee:	9a06      	ldr	r2, [sp, #24]
 800cef0:	4413      	add	r3, r2
 800cef2:	42bb      	cmp	r3, r7
 800cef4:	d3e0      	bcc.n	800ceb8 <__gethex+0x22c>
 800cef6:	4618      	mov	r0, r3
 800cef8:	9901      	ldr	r1, [sp, #4]
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	4652      	mov	r2, sl
 800cefe:	f000 ff73 	bl	800dde8 <strncmp>
 800cf02:	9b07      	ldr	r3, [sp, #28]
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1d7      	bne.n	800ceb8 <__gethex+0x22c>
 800cf08:	461e      	mov	r6, r3
 800cf0a:	e78b      	b.n	800ce24 <__gethex+0x198>
 800cf0c:	f04f 0a03 	mov.w	sl, #3
 800cf10:	e7b8      	b.n	800ce84 <__gethex+0x1f8>
 800cf12:	da0a      	bge.n	800cf2a <__gethex+0x29e>
 800cf14:	1a37      	subs	r7, r6, r0
 800cf16:	4621      	mov	r1, r4
 800cf18:	ee18 0a10 	vmov	r0, s16
 800cf1c:	463a      	mov	r2, r7
 800cf1e:	f000 fc39 	bl	800d794 <__lshift>
 800cf22:	1bed      	subs	r5, r5, r7
 800cf24:	4604      	mov	r4, r0
 800cf26:	f100 0914 	add.w	r9, r0, #20
 800cf2a:	f04f 0a00 	mov.w	sl, #0
 800cf2e:	e7ae      	b.n	800ce8e <__gethex+0x202>
 800cf30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cf34:	42a8      	cmp	r0, r5
 800cf36:	dd72      	ble.n	800d01e <__gethex+0x392>
 800cf38:	1b45      	subs	r5, r0, r5
 800cf3a:	42ae      	cmp	r6, r5
 800cf3c:	dc36      	bgt.n	800cfac <__gethex+0x320>
 800cf3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d02a      	beq.n	800cf9c <__gethex+0x310>
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d02c      	beq.n	800cfa4 <__gethex+0x318>
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d11c      	bne.n	800cf88 <__gethex+0x2fc>
 800cf4e:	42ae      	cmp	r6, r5
 800cf50:	d11a      	bne.n	800cf88 <__gethex+0x2fc>
 800cf52:	2e01      	cmp	r6, #1
 800cf54:	d112      	bne.n	800cf7c <__gethex+0x2f0>
 800cf56:	9a04      	ldr	r2, [sp, #16]
 800cf58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	2301      	movs	r3, #1
 800cf60:	6123      	str	r3, [r4, #16]
 800cf62:	f8c9 3000 	str.w	r3, [r9]
 800cf66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf68:	2762      	movs	r7, #98	; 0x62
 800cf6a:	601c      	str	r4, [r3, #0]
 800cf6c:	e723      	b.n	800cdb6 <__gethex+0x12a>
 800cf6e:	bf00      	nop
 800cf70:	08010150 	.word	0x08010150
 800cf74:	080100d8 	.word	0x080100d8
 800cf78:	080100e9 	.word	0x080100e9
 800cf7c:	1e71      	subs	r1, r6, #1
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 fe4c 	bl	800dc1c <__any_on>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d1e6      	bne.n	800cf56 <__gethex+0x2ca>
 800cf88:	ee18 0a10 	vmov	r0, s16
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	f000 f9e5 	bl	800d35c <_Bfree>
 800cf92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf94:	2300      	movs	r3, #0
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	2750      	movs	r7, #80	; 0x50
 800cf9a:	e70c      	b.n	800cdb6 <__gethex+0x12a>
 800cf9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1f2      	bne.n	800cf88 <__gethex+0x2fc>
 800cfa2:	e7d8      	b.n	800cf56 <__gethex+0x2ca>
 800cfa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1d5      	bne.n	800cf56 <__gethex+0x2ca>
 800cfaa:	e7ed      	b.n	800cf88 <__gethex+0x2fc>
 800cfac:	1e6f      	subs	r7, r5, #1
 800cfae:	f1ba 0f00 	cmp.w	sl, #0
 800cfb2:	d131      	bne.n	800d018 <__gethex+0x38c>
 800cfb4:	b127      	cbz	r7, 800cfc0 <__gethex+0x334>
 800cfb6:	4639      	mov	r1, r7
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f000 fe2f 	bl	800dc1c <__any_on>
 800cfbe:	4682      	mov	sl, r0
 800cfc0:	117b      	asrs	r3, r7, #5
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cfc8:	f007 071f 	and.w	r7, r7, #31
 800cfcc:	fa01 f707 	lsl.w	r7, r1, r7
 800cfd0:	421f      	tst	r7, r3
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	bf18      	it	ne
 800cfd8:	f04a 0a02 	orrne.w	sl, sl, #2
 800cfdc:	1b76      	subs	r6, r6, r5
 800cfde:	f7ff fded 	bl	800cbbc <rshift>
 800cfe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cfe6:	2702      	movs	r7, #2
 800cfe8:	f1ba 0f00 	cmp.w	sl, #0
 800cfec:	d048      	beq.n	800d080 <__gethex+0x3f4>
 800cfee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d015      	beq.n	800d022 <__gethex+0x396>
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d017      	beq.n	800d02a <__gethex+0x39e>
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d109      	bne.n	800d012 <__gethex+0x386>
 800cffe:	f01a 0f02 	tst.w	sl, #2
 800d002:	d006      	beq.n	800d012 <__gethex+0x386>
 800d004:	f8d9 0000 	ldr.w	r0, [r9]
 800d008:	ea4a 0a00 	orr.w	sl, sl, r0
 800d00c:	f01a 0f01 	tst.w	sl, #1
 800d010:	d10e      	bne.n	800d030 <__gethex+0x3a4>
 800d012:	f047 0710 	orr.w	r7, r7, #16
 800d016:	e033      	b.n	800d080 <__gethex+0x3f4>
 800d018:	f04f 0a01 	mov.w	sl, #1
 800d01c:	e7d0      	b.n	800cfc0 <__gethex+0x334>
 800d01e:	2701      	movs	r7, #1
 800d020:	e7e2      	b.n	800cfe8 <__gethex+0x35c>
 800d022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d024:	f1c3 0301 	rsb	r3, r3, #1
 800d028:	9315      	str	r3, [sp, #84]	; 0x54
 800d02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0f0      	beq.n	800d012 <__gethex+0x386>
 800d030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d034:	f104 0314 	add.w	r3, r4, #20
 800d038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d03c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d040:	f04f 0c00 	mov.w	ip, #0
 800d044:	4618      	mov	r0, r3
 800d046:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d04e:	d01c      	beq.n	800d08a <__gethex+0x3fe>
 800d050:	3201      	adds	r2, #1
 800d052:	6002      	str	r2, [r0, #0]
 800d054:	2f02      	cmp	r7, #2
 800d056:	f104 0314 	add.w	r3, r4, #20
 800d05a:	d13f      	bne.n	800d0dc <__gethex+0x450>
 800d05c:	f8d8 2000 	ldr.w	r2, [r8]
 800d060:	3a01      	subs	r2, #1
 800d062:	42b2      	cmp	r2, r6
 800d064:	d10a      	bne.n	800d07c <__gethex+0x3f0>
 800d066:	1171      	asrs	r1, r6, #5
 800d068:	2201      	movs	r2, #1
 800d06a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d06e:	f006 061f 	and.w	r6, r6, #31
 800d072:	fa02 f606 	lsl.w	r6, r2, r6
 800d076:	421e      	tst	r6, r3
 800d078:	bf18      	it	ne
 800d07a:	4617      	movne	r7, r2
 800d07c:	f047 0720 	orr.w	r7, r7, #32
 800d080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d082:	601c      	str	r4, [r3, #0]
 800d084:	9b04      	ldr	r3, [sp, #16]
 800d086:	601d      	str	r5, [r3, #0]
 800d088:	e695      	b.n	800cdb6 <__gethex+0x12a>
 800d08a:	4299      	cmp	r1, r3
 800d08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d090:	d8d8      	bhi.n	800d044 <__gethex+0x3b8>
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	459b      	cmp	fp, r3
 800d096:	db19      	blt.n	800d0cc <__gethex+0x440>
 800d098:	6861      	ldr	r1, [r4, #4]
 800d09a:	ee18 0a10 	vmov	r0, s16
 800d09e:	3101      	adds	r1, #1
 800d0a0:	f000 f91c 	bl	800d2dc <_Balloc>
 800d0a4:	4681      	mov	r9, r0
 800d0a6:	b918      	cbnz	r0, 800d0b0 <__gethex+0x424>
 800d0a8:	4b1a      	ldr	r3, [pc, #104]	; (800d114 <__gethex+0x488>)
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	2184      	movs	r1, #132	; 0x84
 800d0ae:	e6a8      	b.n	800ce02 <__gethex+0x176>
 800d0b0:	6922      	ldr	r2, [r4, #16]
 800d0b2:	3202      	adds	r2, #2
 800d0b4:	f104 010c 	add.w	r1, r4, #12
 800d0b8:	0092      	lsls	r2, r2, #2
 800d0ba:	300c      	adds	r0, #12
 800d0bc:	f000 f900 	bl	800d2c0 <memcpy>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	ee18 0a10 	vmov	r0, s16
 800d0c6:	f000 f949 	bl	800d35c <_Bfree>
 800d0ca:	464c      	mov	r4, r9
 800d0cc:	6923      	ldr	r3, [r4, #16]
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0d4:	6122      	str	r2, [r4, #16]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	615a      	str	r2, [r3, #20]
 800d0da:	e7bb      	b.n	800d054 <__gethex+0x3c8>
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	455a      	cmp	r2, fp
 800d0e0:	dd0b      	ble.n	800d0fa <__gethex+0x46e>
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f7ff fd69 	bl	800cbbc <rshift>
 800d0ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0ee:	3501      	adds	r5, #1
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	f6ff aed0 	blt.w	800ce96 <__gethex+0x20a>
 800d0f6:	2701      	movs	r7, #1
 800d0f8:	e7c0      	b.n	800d07c <__gethex+0x3f0>
 800d0fa:	f016 061f 	ands.w	r6, r6, #31
 800d0fe:	d0fa      	beq.n	800d0f6 <__gethex+0x46a>
 800d100:	4453      	add	r3, sl
 800d102:	f1c6 0620 	rsb	r6, r6, #32
 800d106:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d10a:	f000 f9d9 	bl	800d4c0 <__hi0bits>
 800d10e:	42b0      	cmp	r0, r6
 800d110:	dbe7      	blt.n	800d0e2 <__gethex+0x456>
 800d112:	e7f0      	b.n	800d0f6 <__gethex+0x46a>
 800d114:	080100d8 	.word	0x080100d8

0800d118 <L_shift>:
 800d118:	f1c2 0208 	rsb	r2, r2, #8
 800d11c:	0092      	lsls	r2, r2, #2
 800d11e:	b570      	push	{r4, r5, r6, lr}
 800d120:	f1c2 0620 	rsb	r6, r2, #32
 800d124:	6843      	ldr	r3, [r0, #4]
 800d126:	6804      	ldr	r4, [r0, #0]
 800d128:	fa03 f506 	lsl.w	r5, r3, r6
 800d12c:	432c      	orrs	r4, r5
 800d12e:	40d3      	lsrs	r3, r2
 800d130:	6004      	str	r4, [r0, #0]
 800d132:	f840 3f04 	str.w	r3, [r0, #4]!
 800d136:	4288      	cmp	r0, r1
 800d138:	d3f4      	bcc.n	800d124 <L_shift+0xc>
 800d13a:	bd70      	pop	{r4, r5, r6, pc}

0800d13c <__match>:
 800d13c:	b530      	push	{r4, r5, lr}
 800d13e:	6803      	ldr	r3, [r0, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d146:	b914      	cbnz	r4, 800d14e <__match+0x12>
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	2001      	movs	r0, #1
 800d14c:	bd30      	pop	{r4, r5, pc}
 800d14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d156:	2d19      	cmp	r5, #25
 800d158:	bf98      	it	ls
 800d15a:	3220      	addls	r2, #32
 800d15c:	42a2      	cmp	r2, r4
 800d15e:	d0f0      	beq.n	800d142 <__match+0x6>
 800d160:	2000      	movs	r0, #0
 800d162:	e7f3      	b.n	800d14c <__match+0x10>

0800d164 <__hexnan>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	680b      	ldr	r3, [r1, #0]
 800d16a:	115e      	asrs	r6, r3, #5
 800d16c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d170:	f013 031f 	ands.w	r3, r3, #31
 800d174:	b087      	sub	sp, #28
 800d176:	bf18      	it	ne
 800d178:	3604      	addne	r6, #4
 800d17a:	2500      	movs	r5, #0
 800d17c:	1f37      	subs	r7, r6, #4
 800d17e:	4690      	mov	r8, r2
 800d180:	6802      	ldr	r2, [r0, #0]
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	4682      	mov	sl, r0
 800d186:	f846 5c04 	str.w	r5, [r6, #-4]
 800d18a:	46b9      	mov	r9, r7
 800d18c:	463c      	mov	r4, r7
 800d18e:	9502      	str	r5, [sp, #8]
 800d190:	46ab      	mov	fp, r5
 800d192:	7851      	ldrb	r1, [r2, #1]
 800d194:	1c53      	adds	r3, r2, #1
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	b341      	cbz	r1, 800d1ec <__hexnan+0x88>
 800d19a:	4608      	mov	r0, r1
 800d19c:	9205      	str	r2, [sp, #20]
 800d19e:	9104      	str	r1, [sp, #16]
 800d1a0:	f7ff fd5e 	bl	800cc60 <__hexdig_fun>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d14f      	bne.n	800d248 <__hexnan+0xe4>
 800d1a8:	9904      	ldr	r1, [sp, #16]
 800d1aa:	9a05      	ldr	r2, [sp, #20]
 800d1ac:	2920      	cmp	r1, #32
 800d1ae:	d818      	bhi.n	800d1e2 <__hexnan+0x7e>
 800d1b0:	9b02      	ldr	r3, [sp, #8]
 800d1b2:	459b      	cmp	fp, r3
 800d1b4:	dd13      	ble.n	800d1de <__hexnan+0x7a>
 800d1b6:	454c      	cmp	r4, r9
 800d1b8:	d206      	bcs.n	800d1c8 <__hexnan+0x64>
 800d1ba:	2d07      	cmp	r5, #7
 800d1bc:	dc04      	bgt.n	800d1c8 <__hexnan+0x64>
 800d1be:	462a      	mov	r2, r5
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f7ff ffa8 	bl	800d118 <L_shift>
 800d1c8:	4544      	cmp	r4, r8
 800d1ca:	d950      	bls.n	800d26e <__hexnan+0x10a>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f1a4 0904 	sub.w	r9, r4, #4
 800d1d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1d6:	f8cd b008 	str.w	fp, [sp, #8]
 800d1da:	464c      	mov	r4, r9
 800d1dc:	461d      	mov	r5, r3
 800d1de:	9a03      	ldr	r2, [sp, #12]
 800d1e0:	e7d7      	b.n	800d192 <__hexnan+0x2e>
 800d1e2:	2929      	cmp	r1, #41	; 0x29
 800d1e4:	d156      	bne.n	800d294 <__hexnan+0x130>
 800d1e6:	3202      	adds	r2, #2
 800d1e8:	f8ca 2000 	str.w	r2, [sl]
 800d1ec:	f1bb 0f00 	cmp.w	fp, #0
 800d1f0:	d050      	beq.n	800d294 <__hexnan+0x130>
 800d1f2:	454c      	cmp	r4, r9
 800d1f4:	d206      	bcs.n	800d204 <__hexnan+0xa0>
 800d1f6:	2d07      	cmp	r5, #7
 800d1f8:	dc04      	bgt.n	800d204 <__hexnan+0xa0>
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	4620      	mov	r0, r4
 800d200:	f7ff ff8a 	bl	800d118 <L_shift>
 800d204:	4544      	cmp	r4, r8
 800d206:	d934      	bls.n	800d272 <__hexnan+0x10e>
 800d208:	f1a8 0204 	sub.w	r2, r8, #4
 800d20c:	4623      	mov	r3, r4
 800d20e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d212:	f842 1f04 	str.w	r1, [r2, #4]!
 800d216:	429f      	cmp	r7, r3
 800d218:	d2f9      	bcs.n	800d20e <__hexnan+0xaa>
 800d21a:	1b3b      	subs	r3, r7, r4
 800d21c:	f023 0303 	bic.w	r3, r3, #3
 800d220:	3304      	adds	r3, #4
 800d222:	3401      	adds	r4, #1
 800d224:	3e03      	subs	r6, #3
 800d226:	42b4      	cmp	r4, r6
 800d228:	bf88      	it	hi
 800d22a:	2304      	movhi	r3, #4
 800d22c:	4443      	add	r3, r8
 800d22e:	2200      	movs	r2, #0
 800d230:	f843 2b04 	str.w	r2, [r3], #4
 800d234:	429f      	cmp	r7, r3
 800d236:	d2fb      	bcs.n	800d230 <__hexnan+0xcc>
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	b91b      	cbnz	r3, 800d244 <__hexnan+0xe0>
 800d23c:	4547      	cmp	r7, r8
 800d23e:	d127      	bne.n	800d290 <__hexnan+0x12c>
 800d240:	2301      	movs	r3, #1
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	2005      	movs	r0, #5
 800d246:	e026      	b.n	800d296 <__hexnan+0x132>
 800d248:	3501      	adds	r5, #1
 800d24a:	2d08      	cmp	r5, #8
 800d24c:	f10b 0b01 	add.w	fp, fp, #1
 800d250:	dd06      	ble.n	800d260 <__hexnan+0xfc>
 800d252:	4544      	cmp	r4, r8
 800d254:	d9c3      	bls.n	800d1de <__hexnan+0x7a>
 800d256:	2300      	movs	r3, #0
 800d258:	f844 3c04 	str.w	r3, [r4, #-4]
 800d25c:	2501      	movs	r5, #1
 800d25e:	3c04      	subs	r4, #4
 800d260:	6822      	ldr	r2, [r4, #0]
 800d262:	f000 000f 	and.w	r0, r0, #15
 800d266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d26a:	6022      	str	r2, [r4, #0]
 800d26c:	e7b7      	b.n	800d1de <__hexnan+0x7a>
 800d26e:	2508      	movs	r5, #8
 800d270:	e7b5      	b.n	800d1de <__hexnan+0x7a>
 800d272:	9b01      	ldr	r3, [sp, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0df      	beq.n	800d238 <__hexnan+0xd4>
 800d278:	f04f 32ff 	mov.w	r2, #4294967295
 800d27c:	f1c3 0320 	rsb	r3, r3, #32
 800d280:	fa22 f303 	lsr.w	r3, r2, r3
 800d284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d288:	401a      	ands	r2, r3
 800d28a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d28e:	e7d3      	b.n	800d238 <__hexnan+0xd4>
 800d290:	3f04      	subs	r7, #4
 800d292:	e7d1      	b.n	800d238 <__hexnan+0xd4>
 800d294:	2004      	movs	r0, #4
 800d296:	b007      	add	sp, #28
 800d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d29c <__ascii_mbtowc>:
 800d29c:	b082      	sub	sp, #8
 800d29e:	b901      	cbnz	r1, 800d2a2 <__ascii_mbtowc+0x6>
 800d2a0:	a901      	add	r1, sp, #4
 800d2a2:	b142      	cbz	r2, 800d2b6 <__ascii_mbtowc+0x1a>
 800d2a4:	b14b      	cbz	r3, 800d2ba <__ascii_mbtowc+0x1e>
 800d2a6:	7813      	ldrb	r3, [r2, #0]
 800d2a8:	600b      	str	r3, [r1, #0]
 800d2aa:	7812      	ldrb	r2, [r2, #0]
 800d2ac:	1e10      	subs	r0, r2, #0
 800d2ae:	bf18      	it	ne
 800d2b0:	2001      	movne	r0, #1
 800d2b2:	b002      	add	sp, #8
 800d2b4:	4770      	bx	lr
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	e7fb      	b.n	800d2b2 <__ascii_mbtowc+0x16>
 800d2ba:	f06f 0001 	mvn.w	r0, #1
 800d2be:	e7f8      	b.n	800d2b2 <__ascii_mbtowc+0x16>

0800d2c0 <memcpy>:
 800d2c0:	440a      	add	r2, r1
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c8:	d100      	bne.n	800d2cc <memcpy+0xc>
 800d2ca:	4770      	bx	lr
 800d2cc:	b510      	push	{r4, lr}
 800d2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d6:	4291      	cmp	r1, r2
 800d2d8:	d1f9      	bne.n	800d2ce <memcpy+0xe>
 800d2da:	bd10      	pop	{r4, pc}

0800d2dc <_Balloc>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	b976      	cbnz	r6, 800d304 <_Balloc+0x28>
 800d2e6:	2010      	movs	r0, #16
 800d2e8:	f000 fdd0 	bl	800de8c <malloc>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6260      	str	r0, [r4, #36]	; 0x24
 800d2f0:	b920      	cbnz	r0, 800d2fc <_Balloc+0x20>
 800d2f2:	4b18      	ldr	r3, [pc, #96]	; (800d354 <_Balloc+0x78>)
 800d2f4:	4818      	ldr	r0, [pc, #96]	; (800d358 <_Balloc+0x7c>)
 800d2f6:	2166      	movs	r1, #102	; 0x66
 800d2f8:	f000 fd98 	bl	800de2c <__assert_func>
 800d2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d300:	6006      	str	r6, [r0, #0]
 800d302:	60c6      	str	r6, [r0, #12]
 800d304:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d306:	68f3      	ldr	r3, [r6, #12]
 800d308:	b183      	cbz	r3, 800d32c <_Balloc+0x50>
 800d30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d312:	b9b8      	cbnz	r0, 800d344 <_Balloc+0x68>
 800d314:	2101      	movs	r1, #1
 800d316:	fa01 f605 	lsl.w	r6, r1, r5
 800d31a:	1d72      	adds	r2, r6, #5
 800d31c:	0092      	lsls	r2, r2, #2
 800d31e:	4620      	mov	r0, r4
 800d320:	f000 fc9d 	bl	800dc5e <_calloc_r>
 800d324:	b160      	cbz	r0, 800d340 <_Balloc+0x64>
 800d326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d32a:	e00e      	b.n	800d34a <_Balloc+0x6e>
 800d32c:	2221      	movs	r2, #33	; 0x21
 800d32e:	2104      	movs	r1, #4
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fc94 	bl	800dc5e <_calloc_r>
 800d336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d338:	60f0      	str	r0, [r6, #12]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e4      	bne.n	800d30a <_Balloc+0x2e>
 800d340:	2000      	movs	r0, #0
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	6802      	ldr	r2, [r0, #0]
 800d346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d34a:	2300      	movs	r3, #0
 800d34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d350:	e7f7      	b.n	800d342 <_Balloc+0x66>
 800d352:	bf00      	nop
 800d354:	08010164 	.word	0x08010164
 800d358:	0801017b 	.word	0x0801017b

0800d35c <_Bfree>:
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d360:	4605      	mov	r5, r0
 800d362:	460c      	mov	r4, r1
 800d364:	b976      	cbnz	r6, 800d384 <_Bfree+0x28>
 800d366:	2010      	movs	r0, #16
 800d368:	f000 fd90 	bl	800de8c <malloc>
 800d36c:	4602      	mov	r2, r0
 800d36e:	6268      	str	r0, [r5, #36]	; 0x24
 800d370:	b920      	cbnz	r0, 800d37c <_Bfree+0x20>
 800d372:	4b09      	ldr	r3, [pc, #36]	; (800d398 <_Bfree+0x3c>)
 800d374:	4809      	ldr	r0, [pc, #36]	; (800d39c <_Bfree+0x40>)
 800d376:	218a      	movs	r1, #138	; 0x8a
 800d378:	f000 fd58 	bl	800de2c <__assert_func>
 800d37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d380:	6006      	str	r6, [r0, #0]
 800d382:	60c6      	str	r6, [r0, #12]
 800d384:	b13c      	cbz	r4, 800d396 <_Bfree+0x3a>
 800d386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d388:	6862      	ldr	r2, [r4, #4]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d390:	6021      	str	r1, [r4, #0]
 800d392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	08010164 	.word	0x08010164
 800d39c:	0801017b 	.word	0x0801017b

0800d3a0 <__multadd>:
 800d3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a4:	690d      	ldr	r5, [r1, #16]
 800d3a6:	4607      	mov	r7, r0
 800d3a8:	460c      	mov	r4, r1
 800d3aa:	461e      	mov	r6, r3
 800d3ac:	f101 0c14 	add.w	ip, r1, #20
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	f8dc 3000 	ldr.w	r3, [ip]
 800d3b6:	b299      	uxth	r1, r3
 800d3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800d3bc:	0c1e      	lsrs	r6, r3, #16
 800d3be:	0c0b      	lsrs	r3, r1, #16
 800d3c0:	fb02 3306 	mla	r3, r2, r6, r3
 800d3c4:	b289      	uxth	r1, r1
 800d3c6:	3001      	adds	r0, #1
 800d3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3cc:	4285      	cmp	r5, r0
 800d3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800d3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3d6:	dcec      	bgt.n	800d3b2 <__multadd+0x12>
 800d3d8:	b30e      	cbz	r6, 800d41e <__multadd+0x7e>
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	42ab      	cmp	r3, r5
 800d3de:	dc19      	bgt.n	800d414 <__multadd+0x74>
 800d3e0:	6861      	ldr	r1, [r4, #4]
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	3101      	adds	r1, #1
 800d3e6:	f7ff ff79 	bl	800d2dc <_Balloc>
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	b928      	cbnz	r0, 800d3fa <__multadd+0x5a>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	4b0c      	ldr	r3, [pc, #48]	; (800d424 <__multadd+0x84>)
 800d3f2:	480d      	ldr	r0, [pc, #52]	; (800d428 <__multadd+0x88>)
 800d3f4:	21b5      	movs	r1, #181	; 0xb5
 800d3f6:	f000 fd19 	bl	800de2c <__assert_func>
 800d3fa:	6922      	ldr	r2, [r4, #16]
 800d3fc:	3202      	adds	r2, #2
 800d3fe:	f104 010c 	add.w	r1, r4, #12
 800d402:	0092      	lsls	r2, r2, #2
 800d404:	300c      	adds	r0, #12
 800d406:	f7ff ff5b 	bl	800d2c0 <memcpy>
 800d40a:	4621      	mov	r1, r4
 800d40c:	4638      	mov	r0, r7
 800d40e:	f7ff ffa5 	bl	800d35c <_Bfree>
 800d412:	4644      	mov	r4, r8
 800d414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d418:	3501      	adds	r5, #1
 800d41a:	615e      	str	r6, [r3, #20]
 800d41c:	6125      	str	r5, [r4, #16]
 800d41e:	4620      	mov	r0, r4
 800d420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d424:	080100d8 	.word	0x080100d8
 800d428:	0801017b 	.word	0x0801017b

0800d42c <__s2b>:
 800d42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	460c      	mov	r4, r1
 800d432:	4615      	mov	r5, r2
 800d434:	461f      	mov	r7, r3
 800d436:	2209      	movs	r2, #9
 800d438:	3308      	adds	r3, #8
 800d43a:	4606      	mov	r6, r0
 800d43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d440:	2100      	movs	r1, #0
 800d442:	2201      	movs	r2, #1
 800d444:	429a      	cmp	r2, r3
 800d446:	db09      	blt.n	800d45c <__s2b+0x30>
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff ff47 	bl	800d2dc <_Balloc>
 800d44e:	b940      	cbnz	r0, 800d462 <__s2b+0x36>
 800d450:	4602      	mov	r2, r0
 800d452:	4b19      	ldr	r3, [pc, #100]	; (800d4b8 <__s2b+0x8c>)
 800d454:	4819      	ldr	r0, [pc, #100]	; (800d4bc <__s2b+0x90>)
 800d456:	21ce      	movs	r1, #206	; 0xce
 800d458:	f000 fce8 	bl	800de2c <__assert_func>
 800d45c:	0052      	lsls	r2, r2, #1
 800d45e:	3101      	adds	r1, #1
 800d460:	e7f0      	b.n	800d444 <__s2b+0x18>
 800d462:	9b08      	ldr	r3, [sp, #32]
 800d464:	6143      	str	r3, [r0, #20]
 800d466:	2d09      	cmp	r5, #9
 800d468:	f04f 0301 	mov.w	r3, #1
 800d46c:	6103      	str	r3, [r0, #16]
 800d46e:	dd16      	ble.n	800d49e <__s2b+0x72>
 800d470:	f104 0909 	add.w	r9, r4, #9
 800d474:	46c8      	mov	r8, r9
 800d476:	442c      	add	r4, r5
 800d478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d47c:	4601      	mov	r1, r0
 800d47e:	3b30      	subs	r3, #48	; 0x30
 800d480:	220a      	movs	r2, #10
 800d482:	4630      	mov	r0, r6
 800d484:	f7ff ff8c 	bl	800d3a0 <__multadd>
 800d488:	45a0      	cmp	r8, r4
 800d48a:	d1f5      	bne.n	800d478 <__s2b+0x4c>
 800d48c:	f1a5 0408 	sub.w	r4, r5, #8
 800d490:	444c      	add	r4, r9
 800d492:	1b2d      	subs	r5, r5, r4
 800d494:	1963      	adds	r3, r4, r5
 800d496:	42bb      	cmp	r3, r7
 800d498:	db04      	blt.n	800d4a4 <__s2b+0x78>
 800d49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49e:	340a      	adds	r4, #10
 800d4a0:	2509      	movs	r5, #9
 800d4a2:	e7f6      	b.n	800d492 <__s2b+0x66>
 800d4a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	3b30      	subs	r3, #48	; 0x30
 800d4ac:	220a      	movs	r2, #10
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f7ff ff76 	bl	800d3a0 <__multadd>
 800d4b4:	e7ee      	b.n	800d494 <__s2b+0x68>
 800d4b6:	bf00      	nop
 800d4b8:	080100d8 	.word	0x080100d8
 800d4bc:	0801017b 	.word	0x0801017b

0800d4c0 <__hi0bits>:
 800d4c0:	0c03      	lsrs	r3, r0, #16
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	b9d3      	cbnz	r3, 800d4fc <__hi0bits+0x3c>
 800d4c6:	0400      	lsls	r0, r0, #16
 800d4c8:	2310      	movs	r3, #16
 800d4ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4ce:	bf04      	itt	eq
 800d4d0:	0200      	lsleq	r0, r0, #8
 800d4d2:	3308      	addeq	r3, #8
 800d4d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4d8:	bf04      	itt	eq
 800d4da:	0100      	lsleq	r0, r0, #4
 800d4dc:	3304      	addeq	r3, #4
 800d4de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4e2:	bf04      	itt	eq
 800d4e4:	0080      	lsleq	r0, r0, #2
 800d4e6:	3302      	addeq	r3, #2
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	db05      	blt.n	800d4f8 <__hi0bits+0x38>
 800d4ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d4f0:	f103 0301 	add.w	r3, r3, #1
 800d4f4:	bf08      	it	eq
 800d4f6:	2320      	moveq	r3, #32
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	4770      	bx	lr
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	e7e4      	b.n	800d4ca <__hi0bits+0xa>

0800d500 <__lo0bits>:
 800d500:	6803      	ldr	r3, [r0, #0]
 800d502:	f013 0207 	ands.w	r2, r3, #7
 800d506:	4601      	mov	r1, r0
 800d508:	d00b      	beq.n	800d522 <__lo0bits+0x22>
 800d50a:	07da      	lsls	r2, r3, #31
 800d50c:	d423      	bmi.n	800d556 <__lo0bits+0x56>
 800d50e:	0798      	lsls	r0, r3, #30
 800d510:	bf49      	itett	mi
 800d512:	085b      	lsrmi	r3, r3, #1
 800d514:	089b      	lsrpl	r3, r3, #2
 800d516:	2001      	movmi	r0, #1
 800d518:	600b      	strmi	r3, [r1, #0]
 800d51a:	bf5c      	itt	pl
 800d51c:	600b      	strpl	r3, [r1, #0]
 800d51e:	2002      	movpl	r0, #2
 800d520:	4770      	bx	lr
 800d522:	b298      	uxth	r0, r3
 800d524:	b9a8      	cbnz	r0, 800d552 <__lo0bits+0x52>
 800d526:	0c1b      	lsrs	r3, r3, #16
 800d528:	2010      	movs	r0, #16
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	b90a      	cbnz	r2, 800d532 <__lo0bits+0x32>
 800d52e:	3008      	adds	r0, #8
 800d530:	0a1b      	lsrs	r3, r3, #8
 800d532:	071a      	lsls	r2, r3, #28
 800d534:	bf04      	itt	eq
 800d536:	091b      	lsreq	r3, r3, #4
 800d538:	3004      	addeq	r0, #4
 800d53a:	079a      	lsls	r2, r3, #30
 800d53c:	bf04      	itt	eq
 800d53e:	089b      	lsreq	r3, r3, #2
 800d540:	3002      	addeq	r0, #2
 800d542:	07da      	lsls	r2, r3, #31
 800d544:	d403      	bmi.n	800d54e <__lo0bits+0x4e>
 800d546:	085b      	lsrs	r3, r3, #1
 800d548:	f100 0001 	add.w	r0, r0, #1
 800d54c:	d005      	beq.n	800d55a <__lo0bits+0x5a>
 800d54e:	600b      	str	r3, [r1, #0]
 800d550:	4770      	bx	lr
 800d552:	4610      	mov	r0, r2
 800d554:	e7e9      	b.n	800d52a <__lo0bits+0x2a>
 800d556:	2000      	movs	r0, #0
 800d558:	4770      	bx	lr
 800d55a:	2020      	movs	r0, #32
 800d55c:	4770      	bx	lr
	...

0800d560 <__i2b>:
 800d560:	b510      	push	{r4, lr}
 800d562:	460c      	mov	r4, r1
 800d564:	2101      	movs	r1, #1
 800d566:	f7ff feb9 	bl	800d2dc <_Balloc>
 800d56a:	4602      	mov	r2, r0
 800d56c:	b928      	cbnz	r0, 800d57a <__i2b+0x1a>
 800d56e:	4b05      	ldr	r3, [pc, #20]	; (800d584 <__i2b+0x24>)
 800d570:	4805      	ldr	r0, [pc, #20]	; (800d588 <__i2b+0x28>)
 800d572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d576:	f000 fc59 	bl	800de2c <__assert_func>
 800d57a:	2301      	movs	r3, #1
 800d57c:	6144      	str	r4, [r0, #20]
 800d57e:	6103      	str	r3, [r0, #16]
 800d580:	bd10      	pop	{r4, pc}
 800d582:	bf00      	nop
 800d584:	080100d8 	.word	0x080100d8
 800d588:	0801017b 	.word	0x0801017b

0800d58c <__multiply>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	4691      	mov	r9, r2
 800d592:	690a      	ldr	r2, [r1, #16]
 800d594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d598:	429a      	cmp	r2, r3
 800d59a:	bfb8      	it	lt
 800d59c:	460b      	movlt	r3, r1
 800d59e:	460c      	mov	r4, r1
 800d5a0:	bfbc      	itt	lt
 800d5a2:	464c      	movlt	r4, r9
 800d5a4:	4699      	movlt	r9, r3
 800d5a6:	6927      	ldr	r7, [r4, #16]
 800d5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5ac:	68a3      	ldr	r3, [r4, #8]
 800d5ae:	6861      	ldr	r1, [r4, #4]
 800d5b0:	eb07 060a 	add.w	r6, r7, sl
 800d5b4:	42b3      	cmp	r3, r6
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	bfb8      	it	lt
 800d5ba:	3101      	addlt	r1, #1
 800d5bc:	f7ff fe8e 	bl	800d2dc <_Balloc>
 800d5c0:	b930      	cbnz	r0, 800d5d0 <__multiply+0x44>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	4b44      	ldr	r3, [pc, #272]	; (800d6d8 <__multiply+0x14c>)
 800d5c6:	4845      	ldr	r0, [pc, #276]	; (800d6dc <__multiply+0x150>)
 800d5c8:	f240 115d 	movw	r1, #349	; 0x15d
 800d5cc:	f000 fc2e 	bl	800de2c <__assert_func>
 800d5d0:	f100 0514 	add.w	r5, r0, #20
 800d5d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5d8:	462b      	mov	r3, r5
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4543      	cmp	r3, r8
 800d5de:	d321      	bcc.n	800d624 <__multiply+0x98>
 800d5e0:	f104 0314 	add.w	r3, r4, #20
 800d5e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d5e8:	f109 0314 	add.w	r3, r9, #20
 800d5ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d5f0:	9202      	str	r2, [sp, #8]
 800d5f2:	1b3a      	subs	r2, r7, r4
 800d5f4:	3a15      	subs	r2, #21
 800d5f6:	f022 0203 	bic.w	r2, r2, #3
 800d5fa:	3204      	adds	r2, #4
 800d5fc:	f104 0115 	add.w	r1, r4, #21
 800d600:	428f      	cmp	r7, r1
 800d602:	bf38      	it	cc
 800d604:	2204      	movcc	r2, #4
 800d606:	9201      	str	r2, [sp, #4]
 800d608:	9a02      	ldr	r2, [sp, #8]
 800d60a:	9303      	str	r3, [sp, #12]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d80c      	bhi.n	800d62a <__multiply+0x9e>
 800d610:	2e00      	cmp	r6, #0
 800d612:	dd03      	ble.n	800d61c <__multiply+0x90>
 800d614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d05a      	beq.n	800d6d2 <__multiply+0x146>
 800d61c:	6106      	str	r6, [r0, #16]
 800d61e:	b005      	add	sp, #20
 800d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d624:	f843 2b04 	str.w	r2, [r3], #4
 800d628:	e7d8      	b.n	800d5dc <__multiply+0x50>
 800d62a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d62e:	f1ba 0f00 	cmp.w	sl, #0
 800d632:	d024      	beq.n	800d67e <__multiply+0xf2>
 800d634:	f104 0e14 	add.w	lr, r4, #20
 800d638:	46a9      	mov	r9, r5
 800d63a:	f04f 0c00 	mov.w	ip, #0
 800d63e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d642:	f8d9 1000 	ldr.w	r1, [r9]
 800d646:	fa1f fb82 	uxth.w	fp, r2
 800d64a:	b289      	uxth	r1, r1
 800d64c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d654:	f8d9 2000 	ldr.w	r2, [r9]
 800d658:	4461      	add	r1, ip
 800d65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d65e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d666:	b289      	uxth	r1, r1
 800d668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d66c:	4577      	cmp	r7, lr
 800d66e:	f849 1b04 	str.w	r1, [r9], #4
 800d672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d676:	d8e2      	bhi.n	800d63e <__multiply+0xb2>
 800d678:	9a01      	ldr	r2, [sp, #4]
 800d67a:	f845 c002 	str.w	ip, [r5, r2]
 800d67e:	9a03      	ldr	r2, [sp, #12]
 800d680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d684:	3304      	adds	r3, #4
 800d686:	f1b9 0f00 	cmp.w	r9, #0
 800d68a:	d020      	beq.n	800d6ce <__multiply+0x142>
 800d68c:	6829      	ldr	r1, [r5, #0]
 800d68e:	f104 0c14 	add.w	ip, r4, #20
 800d692:	46ae      	mov	lr, r5
 800d694:	f04f 0a00 	mov.w	sl, #0
 800d698:	f8bc b000 	ldrh.w	fp, [ip]
 800d69c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6a0:	fb09 220b 	mla	r2, r9, fp, r2
 800d6a4:	4492      	add	sl, r2
 800d6a6:	b289      	uxth	r1, r1
 800d6a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6ac:	f84e 1b04 	str.w	r1, [lr], #4
 800d6b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6b4:	f8be 1000 	ldrh.w	r1, [lr]
 800d6b8:	0c12      	lsrs	r2, r2, #16
 800d6ba:	fb09 1102 	mla	r1, r9, r2, r1
 800d6be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6c2:	4567      	cmp	r7, ip
 800d6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6c8:	d8e6      	bhi.n	800d698 <__multiply+0x10c>
 800d6ca:	9a01      	ldr	r2, [sp, #4]
 800d6cc:	50a9      	str	r1, [r5, r2]
 800d6ce:	3504      	adds	r5, #4
 800d6d0:	e79a      	b.n	800d608 <__multiply+0x7c>
 800d6d2:	3e01      	subs	r6, #1
 800d6d4:	e79c      	b.n	800d610 <__multiply+0x84>
 800d6d6:	bf00      	nop
 800d6d8:	080100d8 	.word	0x080100d8
 800d6dc:	0801017b 	.word	0x0801017b

0800d6e0 <__pow5mult>:
 800d6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e4:	4615      	mov	r5, r2
 800d6e6:	f012 0203 	ands.w	r2, r2, #3
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	460f      	mov	r7, r1
 800d6ee:	d007      	beq.n	800d700 <__pow5mult+0x20>
 800d6f0:	4c25      	ldr	r4, [pc, #148]	; (800d788 <__pow5mult+0xa8>)
 800d6f2:	3a01      	subs	r2, #1
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6fa:	f7ff fe51 	bl	800d3a0 <__multadd>
 800d6fe:	4607      	mov	r7, r0
 800d700:	10ad      	asrs	r5, r5, #2
 800d702:	d03d      	beq.n	800d780 <__pow5mult+0xa0>
 800d704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d706:	b97c      	cbnz	r4, 800d728 <__pow5mult+0x48>
 800d708:	2010      	movs	r0, #16
 800d70a:	f000 fbbf 	bl	800de8c <malloc>
 800d70e:	4602      	mov	r2, r0
 800d710:	6270      	str	r0, [r6, #36]	; 0x24
 800d712:	b928      	cbnz	r0, 800d720 <__pow5mult+0x40>
 800d714:	4b1d      	ldr	r3, [pc, #116]	; (800d78c <__pow5mult+0xac>)
 800d716:	481e      	ldr	r0, [pc, #120]	; (800d790 <__pow5mult+0xb0>)
 800d718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d71c:	f000 fb86 	bl	800de2c <__assert_func>
 800d720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d724:	6004      	str	r4, [r0, #0]
 800d726:	60c4      	str	r4, [r0, #12]
 800d728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d72c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d730:	b94c      	cbnz	r4, 800d746 <__pow5mult+0x66>
 800d732:	f240 2171 	movw	r1, #625	; 0x271
 800d736:	4630      	mov	r0, r6
 800d738:	f7ff ff12 	bl	800d560 <__i2b>
 800d73c:	2300      	movs	r3, #0
 800d73e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d742:	4604      	mov	r4, r0
 800d744:	6003      	str	r3, [r0, #0]
 800d746:	f04f 0900 	mov.w	r9, #0
 800d74a:	07eb      	lsls	r3, r5, #31
 800d74c:	d50a      	bpl.n	800d764 <__pow5mult+0x84>
 800d74e:	4639      	mov	r1, r7
 800d750:	4622      	mov	r2, r4
 800d752:	4630      	mov	r0, r6
 800d754:	f7ff ff1a 	bl	800d58c <__multiply>
 800d758:	4639      	mov	r1, r7
 800d75a:	4680      	mov	r8, r0
 800d75c:	4630      	mov	r0, r6
 800d75e:	f7ff fdfd 	bl	800d35c <_Bfree>
 800d762:	4647      	mov	r7, r8
 800d764:	106d      	asrs	r5, r5, #1
 800d766:	d00b      	beq.n	800d780 <__pow5mult+0xa0>
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	b938      	cbnz	r0, 800d77c <__pow5mult+0x9c>
 800d76c:	4622      	mov	r2, r4
 800d76e:	4621      	mov	r1, r4
 800d770:	4630      	mov	r0, r6
 800d772:	f7ff ff0b 	bl	800d58c <__multiply>
 800d776:	6020      	str	r0, [r4, #0]
 800d778:	f8c0 9000 	str.w	r9, [r0]
 800d77c:	4604      	mov	r4, r0
 800d77e:	e7e4      	b.n	800d74a <__pow5mult+0x6a>
 800d780:	4638      	mov	r0, r7
 800d782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d786:	bf00      	nop
 800d788:	080102c8 	.word	0x080102c8
 800d78c:	08010164 	.word	0x08010164
 800d790:	0801017b 	.word	0x0801017b

0800d794 <__lshift>:
 800d794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d798:	460c      	mov	r4, r1
 800d79a:	6849      	ldr	r1, [r1, #4]
 800d79c:	6923      	ldr	r3, [r4, #16]
 800d79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7a2:	68a3      	ldr	r3, [r4, #8]
 800d7a4:	4607      	mov	r7, r0
 800d7a6:	4691      	mov	r9, r2
 800d7a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7ac:	f108 0601 	add.w	r6, r8, #1
 800d7b0:	42b3      	cmp	r3, r6
 800d7b2:	db0b      	blt.n	800d7cc <__lshift+0x38>
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	f7ff fd91 	bl	800d2dc <_Balloc>
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	b948      	cbnz	r0, 800d7d2 <__lshift+0x3e>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <__lshift+0xd8>)
 800d7c2:	482b      	ldr	r0, [pc, #172]	; (800d870 <__lshift+0xdc>)
 800d7c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7c8:	f000 fb30 	bl	800de2c <__assert_func>
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	e7ee      	b.n	800d7b0 <__lshift+0x1c>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f100 0114 	add.w	r1, r0, #20
 800d7d8:	f100 0210 	add.w	r2, r0, #16
 800d7dc:	4618      	mov	r0, r3
 800d7de:	4553      	cmp	r3, sl
 800d7e0:	db37      	blt.n	800d852 <__lshift+0xbe>
 800d7e2:	6920      	ldr	r0, [r4, #16]
 800d7e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7e8:	f104 0314 	add.w	r3, r4, #20
 800d7ec:	f019 091f 	ands.w	r9, r9, #31
 800d7f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7f8:	d02f      	beq.n	800d85a <__lshift+0xc6>
 800d7fa:	f1c9 0e20 	rsb	lr, r9, #32
 800d7fe:	468a      	mov	sl, r1
 800d800:	f04f 0c00 	mov.w	ip, #0
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	fa02 f209 	lsl.w	r2, r2, r9
 800d80a:	ea42 020c 	orr.w	r2, r2, ip
 800d80e:	f84a 2b04 	str.w	r2, [sl], #4
 800d812:	f853 2b04 	ldr.w	r2, [r3], #4
 800d816:	4298      	cmp	r0, r3
 800d818:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d81c:	d8f2      	bhi.n	800d804 <__lshift+0x70>
 800d81e:	1b03      	subs	r3, r0, r4
 800d820:	3b15      	subs	r3, #21
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	3304      	adds	r3, #4
 800d828:	f104 0215 	add.w	r2, r4, #21
 800d82c:	4290      	cmp	r0, r2
 800d82e:	bf38      	it	cc
 800d830:	2304      	movcc	r3, #4
 800d832:	f841 c003 	str.w	ip, [r1, r3]
 800d836:	f1bc 0f00 	cmp.w	ip, #0
 800d83a:	d001      	beq.n	800d840 <__lshift+0xac>
 800d83c:	f108 0602 	add.w	r6, r8, #2
 800d840:	3e01      	subs	r6, #1
 800d842:	4638      	mov	r0, r7
 800d844:	612e      	str	r6, [r5, #16]
 800d846:	4621      	mov	r1, r4
 800d848:	f7ff fd88 	bl	800d35c <_Bfree>
 800d84c:	4628      	mov	r0, r5
 800d84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d852:	f842 0f04 	str.w	r0, [r2, #4]!
 800d856:	3301      	adds	r3, #1
 800d858:	e7c1      	b.n	800d7de <__lshift+0x4a>
 800d85a:	3904      	subs	r1, #4
 800d85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d860:	f841 2f04 	str.w	r2, [r1, #4]!
 800d864:	4298      	cmp	r0, r3
 800d866:	d8f9      	bhi.n	800d85c <__lshift+0xc8>
 800d868:	e7ea      	b.n	800d840 <__lshift+0xac>
 800d86a:	bf00      	nop
 800d86c:	080100d8 	.word	0x080100d8
 800d870:	0801017b 	.word	0x0801017b

0800d874 <__mcmp>:
 800d874:	b530      	push	{r4, r5, lr}
 800d876:	6902      	ldr	r2, [r0, #16]
 800d878:	690c      	ldr	r4, [r1, #16]
 800d87a:	1b12      	subs	r2, r2, r4
 800d87c:	d10e      	bne.n	800d89c <__mcmp+0x28>
 800d87e:	f100 0314 	add.w	r3, r0, #20
 800d882:	3114      	adds	r1, #20
 800d884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d894:	42a5      	cmp	r5, r4
 800d896:	d003      	beq.n	800d8a0 <__mcmp+0x2c>
 800d898:	d305      	bcc.n	800d8a6 <__mcmp+0x32>
 800d89a:	2201      	movs	r2, #1
 800d89c:	4610      	mov	r0, r2
 800d89e:	bd30      	pop	{r4, r5, pc}
 800d8a0:	4283      	cmp	r3, r0
 800d8a2:	d3f3      	bcc.n	800d88c <__mcmp+0x18>
 800d8a4:	e7fa      	b.n	800d89c <__mcmp+0x28>
 800d8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8aa:	e7f7      	b.n	800d89c <__mcmp+0x28>

0800d8ac <__mdiff>:
 800d8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4690      	mov	r8, r2
 800d8ba:	f7ff ffdb 	bl	800d874 <__mcmp>
 800d8be:	1e05      	subs	r5, r0, #0
 800d8c0:	d110      	bne.n	800d8e4 <__mdiff+0x38>
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f7ff fd09 	bl	800d2dc <_Balloc>
 800d8ca:	b930      	cbnz	r0, 800d8da <__mdiff+0x2e>
 800d8cc:	4b3a      	ldr	r3, [pc, #232]	; (800d9b8 <__mdiff+0x10c>)
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	f240 2132 	movw	r1, #562	; 0x232
 800d8d4:	4839      	ldr	r0, [pc, #228]	; (800d9bc <__mdiff+0x110>)
 800d8d6:	f000 faa9 	bl	800de2c <__assert_func>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e4:	bfa4      	itt	ge
 800d8e6:	4643      	movge	r3, r8
 800d8e8:	46a0      	movge	r8, r4
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8f0:	bfa6      	itte	ge
 800d8f2:	461c      	movge	r4, r3
 800d8f4:	2500      	movge	r5, #0
 800d8f6:	2501      	movlt	r5, #1
 800d8f8:	f7ff fcf0 	bl	800d2dc <_Balloc>
 800d8fc:	b920      	cbnz	r0, 800d908 <__mdiff+0x5c>
 800d8fe:	4b2e      	ldr	r3, [pc, #184]	; (800d9b8 <__mdiff+0x10c>)
 800d900:	4602      	mov	r2, r0
 800d902:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d906:	e7e5      	b.n	800d8d4 <__mdiff+0x28>
 800d908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d90c:	6926      	ldr	r6, [r4, #16]
 800d90e:	60c5      	str	r5, [r0, #12]
 800d910:	f104 0914 	add.w	r9, r4, #20
 800d914:	f108 0514 	add.w	r5, r8, #20
 800d918:	f100 0e14 	add.w	lr, r0, #20
 800d91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d924:	f108 0210 	add.w	r2, r8, #16
 800d928:	46f2      	mov	sl, lr
 800d92a:	2100      	movs	r1, #0
 800d92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d934:	fa1f f883 	uxth.w	r8, r3
 800d938:	fa11 f18b 	uxtah	r1, r1, fp
 800d93c:	0c1b      	lsrs	r3, r3, #16
 800d93e:	eba1 0808 	sub.w	r8, r1, r8
 800d942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d94a:	fa1f f888 	uxth.w	r8, r8
 800d94e:	1419      	asrs	r1, r3, #16
 800d950:	454e      	cmp	r6, r9
 800d952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d956:	f84a 3b04 	str.w	r3, [sl], #4
 800d95a:	d8e7      	bhi.n	800d92c <__mdiff+0x80>
 800d95c:	1b33      	subs	r3, r6, r4
 800d95e:	3b15      	subs	r3, #21
 800d960:	f023 0303 	bic.w	r3, r3, #3
 800d964:	3304      	adds	r3, #4
 800d966:	3415      	adds	r4, #21
 800d968:	42a6      	cmp	r6, r4
 800d96a:	bf38      	it	cc
 800d96c:	2304      	movcc	r3, #4
 800d96e:	441d      	add	r5, r3
 800d970:	4473      	add	r3, lr
 800d972:	469e      	mov	lr, r3
 800d974:	462e      	mov	r6, r5
 800d976:	4566      	cmp	r6, ip
 800d978:	d30e      	bcc.n	800d998 <__mdiff+0xec>
 800d97a:	f10c 0203 	add.w	r2, ip, #3
 800d97e:	1b52      	subs	r2, r2, r5
 800d980:	f022 0203 	bic.w	r2, r2, #3
 800d984:	3d03      	subs	r5, #3
 800d986:	45ac      	cmp	ip, r5
 800d988:	bf38      	it	cc
 800d98a:	2200      	movcc	r2, #0
 800d98c:	441a      	add	r2, r3
 800d98e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d992:	b17b      	cbz	r3, 800d9b4 <__mdiff+0x108>
 800d994:	6107      	str	r7, [r0, #16]
 800d996:	e7a3      	b.n	800d8e0 <__mdiff+0x34>
 800d998:	f856 8b04 	ldr.w	r8, [r6], #4
 800d99c:	fa11 f288 	uxtah	r2, r1, r8
 800d9a0:	1414      	asrs	r4, r2, #16
 800d9a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9a6:	b292      	uxth	r2, r2
 800d9a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9ac:	f84e 2b04 	str.w	r2, [lr], #4
 800d9b0:	1421      	asrs	r1, r4, #16
 800d9b2:	e7e0      	b.n	800d976 <__mdiff+0xca>
 800d9b4:	3f01      	subs	r7, #1
 800d9b6:	e7ea      	b.n	800d98e <__mdiff+0xe2>
 800d9b8:	080100d8 	.word	0x080100d8
 800d9bc:	0801017b 	.word	0x0801017b

0800d9c0 <__ulp>:
 800d9c0:	b082      	sub	sp, #8
 800d9c2:	ed8d 0b00 	vstr	d0, [sp]
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	4912      	ldr	r1, [pc, #72]	; (800da14 <__ulp+0x54>)
 800d9ca:	4019      	ands	r1, r3
 800d9cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	dd05      	ble.n	800d9e0 <__ulp+0x20>
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	ec43 2b10 	vmov	d0, r2, r3
 800d9dc:	b002      	add	sp, #8
 800d9de:	4770      	bx	lr
 800d9e0:	4249      	negs	r1, r1
 800d9e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d9e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d9ea:	f04f 0200 	mov.w	r2, #0
 800d9ee:	f04f 0300 	mov.w	r3, #0
 800d9f2:	da04      	bge.n	800d9fe <__ulp+0x3e>
 800d9f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d9f8:	fa41 f300 	asr.w	r3, r1, r0
 800d9fc:	e7ec      	b.n	800d9d8 <__ulp+0x18>
 800d9fe:	f1a0 0114 	sub.w	r1, r0, #20
 800da02:	291e      	cmp	r1, #30
 800da04:	bfda      	itte	le
 800da06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800da0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800da0e:	2101      	movgt	r1, #1
 800da10:	460a      	mov	r2, r1
 800da12:	e7e1      	b.n	800d9d8 <__ulp+0x18>
 800da14:	7ff00000 	.word	0x7ff00000

0800da18 <__b2d>:
 800da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1a:	6905      	ldr	r5, [r0, #16]
 800da1c:	f100 0714 	add.w	r7, r0, #20
 800da20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800da24:	1f2e      	subs	r6, r5, #4
 800da26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800da2a:	4620      	mov	r0, r4
 800da2c:	f7ff fd48 	bl	800d4c0 <__hi0bits>
 800da30:	f1c0 0320 	rsb	r3, r0, #32
 800da34:	280a      	cmp	r0, #10
 800da36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dab4 <__b2d+0x9c>
 800da3a:	600b      	str	r3, [r1, #0]
 800da3c:	dc14      	bgt.n	800da68 <__b2d+0x50>
 800da3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800da42:	fa24 f10e 	lsr.w	r1, r4, lr
 800da46:	42b7      	cmp	r7, r6
 800da48:	ea41 030c 	orr.w	r3, r1, ip
 800da4c:	bf34      	ite	cc
 800da4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da52:	2100      	movcs	r1, #0
 800da54:	3015      	adds	r0, #21
 800da56:	fa04 f000 	lsl.w	r0, r4, r0
 800da5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800da5e:	ea40 0201 	orr.w	r2, r0, r1
 800da62:	ec43 2b10 	vmov	d0, r2, r3
 800da66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da68:	42b7      	cmp	r7, r6
 800da6a:	bf3a      	itte	cc
 800da6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da70:	f1a5 0608 	subcc.w	r6, r5, #8
 800da74:	2100      	movcs	r1, #0
 800da76:	380b      	subs	r0, #11
 800da78:	d017      	beq.n	800daaa <__b2d+0x92>
 800da7a:	f1c0 0c20 	rsb	ip, r0, #32
 800da7e:	fa04 f500 	lsl.w	r5, r4, r0
 800da82:	42be      	cmp	r6, r7
 800da84:	fa21 f40c 	lsr.w	r4, r1, ip
 800da88:	ea45 0504 	orr.w	r5, r5, r4
 800da8c:	bf8c      	ite	hi
 800da8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800da92:	2400      	movls	r4, #0
 800da94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800da98:	fa01 f000 	lsl.w	r0, r1, r0
 800da9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800daa0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800daa4:	ea40 0204 	orr.w	r2, r0, r4
 800daa8:	e7db      	b.n	800da62 <__b2d+0x4a>
 800daaa:	ea44 030c 	orr.w	r3, r4, ip
 800daae:	460a      	mov	r2, r1
 800dab0:	e7d7      	b.n	800da62 <__b2d+0x4a>
 800dab2:	bf00      	nop
 800dab4:	3ff00000 	.word	0x3ff00000

0800dab8 <__d2b>:
 800dab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4689      	mov	r9, r1
 800dabe:	2101      	movs	r1, #1
 800dac0:	ec57 6b10 	vmov	r6, r7, d0
 800dac4:	4690      	mov	r8, r2
 800dac6:	f7ff fc09 	bl	800d2dc <_Balloc>
 800daca:	4604      	mov	r4, r0
 800dacc:	b930      	cbnz	r0, 800dadc <__d2b+0x24>
 800dace:	4602      	mov	r2, r0
 800dad0:	4b25      	ldr	r3, [pc, #148]	; (800db68 <__d2b+0xb0>)
 800dad2:	4826      	ldr	r0, [pc, #152]	; (800db6c <__d2b+0xb4>)
 800dad4:	f240 310a 	movw	r1, #778	; 0x30a
 800dad8:	f000 f9a8 	bl	800de2c <__assert_func>
 800dadc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dae0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dae4:	bb35      	cbnz	r5, 800db34 <__d2b+0x7c>
 800dae6:	2e00      	cmp	r6, #0
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	d028      	beq.n	800db3e <__d2b+0x86>
 800daec:	4668      	mov	r0, sp
 800daee:	9600      	str	r6, [sp, #0]
 800daf0:	f7ff fd06 	bl	800d500 <__lo0bits>
 800daf4:	9900      	ldr	r1, [sp, #0]
 800daf6:	b300      	cbz	r0, 800db3a <__d2b+0x82>
 800daf8:	9a01      	ldr	r2, [sp, #4]
 800dafa:	f1c0 0320 	rsb	r3, r0, #32
 800dafe:	fa02 f303 	lsl.w	r3, r2, r3
 800db02:	430b      	orrs	r3, r1
 800db04:	40c2      	lsrs	r2, r0
 800db06:	6163      	str	r3, [r4, #20]
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9b01      	ldr	r3, [sp, #4]
 800db0c:	61a3      	str	r3, [r4, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bf14      	ite	ne
 800db12:	2202      	movne	r2, #2
 800db14:	2201      	moveq	r2, #1
 800db16:	6122      	str	r2, [r4, #16]
 800db18:	b1d5      	cbz	r5, 800db50 <__d2b+0x98>
 800db1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db1e:	4405      	add	r5, r0
 800db20:	f8c9 5000 	str.w	r5, [r9]
 800db24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db28:	f8c8 0000 	str.w	r0, [r8]
 800db2c:	4620      	mov	r0, r4
 800db2e:	b003      	add	sp, #12
 800db30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db38:	e7d5      	b.n	800dae6 <__d2b+0x2e>
 800db3a:	6161      	str	r1, [r4, #20]
 800db3c:	e7e5      	b.n	800db0a <__d2b+0x52>
 800db3e:	a801      	add	r0, sp, #4
 800db40:	f7ff fcde 	bl	800d500 <__lo0bits>
 800db44:	9b01      	ldr	r3, [sp, #4]
 800db46:	6163      	str	r3, [r4, #20]
 800db48:	2201      	movs	r2, #1
 800db4a:	6122      	str	r2, [r4, #16]
 800db4c:	3020      	adds	r0, #32
 800db4e:	e7e3      	b.n	800db18 <__d2b+0x60>
 800db50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db58:	f8c9 0000 	str.w	r0, [r9]
 800db5c:	6918      	ldr	r0, [r3, #16]
 800db5e:	f7ff fcaf 	bl	800d4c0 <__hi0bits>
 800db62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db66:	e7df      	b.n	800db28 <__d2b+0x70>
 800db68:	080100d8 	.word	0x080100d8
 800db6c:	0801017b 	.word	0x0801017b

0800db70 <__ratio>:
 800db70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	4688      	mov	r8, r1
 800db76:	4669      	mov	r1, sp
 800db78:	4681      	mov	r9, r0
 800db7a:	f7ff ff4d 	bl	800da18 <__b2d>
 800db7e:	a901      	add	r1, sp, #4
 800db80:	4640      	mov	r0, r8
 800db82:	ec55 4b10 	vmov	r4, r5, d0
 800db86:	f7ff ff47 	bl	800da18 <__b2d>
 800db8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800db92:	eba3 0c02 	sub.w	ip, r3, r2
 800db96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800db9a:	1a9b      	subs	r3, r3, r2
 800db9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dba0:	ec51 0b10 	vmov	r0, r1, d0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	bfd6      	itet	le
 800dba8:	460a      	movle	r2, r1
 800dbaa:	462a      	movgt	r2, r5
 800dbac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbb0:	468b      	mov	fp, r1
 800dbb2:	462f      	mov	r7, r5
 800dbb4:	bfd4      	ite	le
 800dbb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dbba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	ee10 2a10 	vmov	r2, s0
 800dbc4:	465b      	mov	r3, fp
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	f7f2 fe48 	bl	800085c <__aeabi_ddiv>
 800dbcc:	ec41 0b10 	vmov	d0, r0, r1
 800dbd0:	b003      	add	sp, #12
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbd6 <__copybits>:
 800dbd6:	3901      	subs	r1, #1
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	1149      	asrs	r1, r1, #5
 800dbdc:	6914      	ldr	r4, [r2, #16]
 800dbde:	3101      	adds	r1, #1
 800dbe0:	f102 0314 	add.w	r3, r2, #20
 800dbe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dbe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbec:	1f05      	subs	r5, r0, #4
 800dbee:	42a3      	cmp	r3, r4
 800dbf0:	d30c      	bcc.n	800dc0c <__copybits+0x36>
 800dbf2:	1aa3      	subs	r3, r4, r2
 800dbf4:	3b11      	subs	r3, #17
 800dbf6:	f023 0303 	bic.w	r3, r3, #3
 800dbfa:	3211      	adds	r2, #17
 800dbfc:	42a2      	cmp	r2, r4
 800dbfe:	bf88      	it	hi
 800dc00:	2300      	movhi	r3, #0
 800dc02:	4418      	add	r0, r3
 800dc04:	2300      	movs	r3, #0
 800dc06:	4288      	cmp	r0, r1
 800dc08:	d305      	bcc.n	800dc16 <__copybits+0x40>
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
 800dc0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc10:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc14:	e7eb      	b.n	800dbee <__copybits+0x18>
 800dc16:	f840 3b04 	str.w	r3, [r0], #4
 800dc1a:	e7f4      	b.n	800dc06 <__copybits+0x30>

0800dc1c <__any_on>:
 800dc1c:	f100 0214 	add.w	r2, r0, #20
 800dc20:	6900      	ldr	r0, [r0, #16]
 800dc22:	114b      	asrs	r3, r1, #5
 800dc24:	4298      	cmp	r0, r3
 800dc26:	b510      	push	{r4, lr}
 800dc28:	db11      	blt.n	800dc4e <__any_on+0x32>
 800dc2a:	dd0a      	ble.n	800dc42 <__any_on+0x26>
 800dc2c:	f011 011f 	ands.w	r1, r1, #31
 800dc30:	d007      	beq.n	800dc42 <__any_on+0x26>
 800dc32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc36:	fa24 f001 	lsr.w	r0, r4, r1
 800dc3a:	fa00 f101 	lsl.w	r1, r0, r1
 800dc3e:	428c      	cmp	r4, r1
 800dc40:	d10b      	bne.n	800dc5a <__any_on+0x3e>
 800dc42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d803      	bhi.n	800dc52 <__any_on+0x36>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	4603      	mov	r3, r0
 800dc50:	e7f7      	b.n	800dc42 <__any_on+0x26>
 800dc52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d0f5      	beq.n	800dc46 <__any_on+0x2a>
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	e7f6      	b.n	800dc4c <__any_on+0x30>

0800dc5e <_calloc_r>:
 800dc5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc60:	fba1 2402 	umull	r2, r4, r1, r2
 800dc64:	b94c      	cbnz	r4, 800dc7a <_calloc_r+0x1c>
 800dc66:	4611      	mov	r1, r2
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	f000 f82f 	bl	800dccc <_malloc_r>
 800dc6e:	9a01      	ldr	r2, [sp, #4]
 800dc70:	4605      	mov	r5, r0
 800dc72:	b930      	cbnz	r0, 800dc82 <_calloc_r+0x24>
 800dc74:	4628      	mov	r0, r5
 800dc76:	b003      	add	sp, #12
 800dc78:	bd30      	pop	{r4, r5, pc}
 800dc7a:	220c      	movs	r2, #12
 800dc7c:	6002      	str	r2, [r0, #0]
 800dc7e:	2500      	movs	r5, #0
 800dc80:	e7f8      	b.n	800dc74 <_calloc_r+0x16>
 800dc82:	4621      	mov	r1, r4
 800dc84:	f7fe f962 	bl	800bf4c <memset>
 800dc88:	e7f4      	b.n	800dc74 <_calloc_r+0x16>
	...

0800dc8c <sbrk_aligned>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	4e0e      	ldr	r6, [pc, #56]	; (800dcc8 <sbrk_aligned+0x3c>)
 800dc90:	460c      	mov	r4, r1
 800dc92:	6831      	ldr	r1, [r6, #0]
 800dc94:	4605      	mov	r5, r0
 800dc96:	b911      	cbnz	r1, 800dc9e <sbrk_aligned+0x12>
 800dc98:	f000 f896 	bl	800ddc8 <_sbrk_r>
 800dc9c:	6030      	str	r0, [r6, #0]
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4628      	mov	r0, r5
 800dca2:	f000 f891 	bl	800ddc8 <_sbrk_r>
 800dca6:	1c43      	adds	r3, r0, #1
 800dca8:	d00a      	beq.n	800dcc0 <sbrk_aligned+0x34>
 800dcaa:	1cc4      	adds	r4, r0, #3
 800dcac:	f024 0403 	bic.w	r4, r4, #3
 800dcb0:	42a0      	cmp	r0, r4
 800dcb2:	d007      	beq.n	800dcc4 <sbrk_aligned+0x38>
 800dcb4:	1a21      	subs	r1, r4, r0
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f000 f886 	bl	800ddc8 <_sbrk_r>
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	d101      	bne.n	800dcc4 <sbrk_aligned+0x38>
 800dcc0:	f04f 34ff 	mov.w	r4, #4294967295
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}
 800dcc8:	200008b8 	.word	0x200008b8

0800dccc <_malloc_r>:
 800dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	1ccd      	adds	r5, r1, #3
 800dcd2:	f025 0503 	bic.w	r5, r5, #3
 800dcd6:	3508      	adds	r5, #8
 800dcd8:	2d0c      	cmp	r5, #12
 800dcda:	bf38      	it	cc
 800dcdc:	250c      	movcc	r5, #12
 800dcde:	2d00      	cmp	r5, #0
 800dce0:	4607      	mov	r7, r0
 800dce2:	db01      	blt.n	800dce8 <_malloc_r+0x1c>
 800dce4:	42a9      	cmp	r1, r5
 800dce6:	d905      	bls.n	800dcf4 <_malloc_r+0x28>
 800dce8:	230c      	movs	r3, #12
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	2600      	movs	r6, #0
 800dcee:	4630      	mov	r0, r6
 800dcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf4:	4e2e      	ldr	r6, [pc, #184]	; (800ddb0 <_malloc_r+0xe4>)
 800dcf6:	f000 f8d1 	bl	800de9c <__malloc_lock>
 800dcfa:	6833      	ldr	r3, [r6, #0]
 800dcfc:	461c      	mov	r4, r3
 800dcfe:	bb34      	cbnz	r4, 800dd4e <_malloc_r+0x82>
 800dd00:	4629      	mov	r1, r5
 800dd02:	4638      	mov	r0, r7
 800dd04:	f7ff ffc2 	bl	800dc8c <sbrk_aligned>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	d14d      	bne.n	800ddaa <_malloc_r+0xde>
 800dd0e:	6834      	ldr	r4, [r6, #0]
 800dd10:	4626      	mov	r6, r4
 800dd12:	2e00      	cmp	r6, #0
 800dd14:	d140      	bne.n	800dd98 <_malloc_r+0xcc>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	4631      	mov	r1, r6
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	eb04 0803 	add.w	r8, r4, r3
 800dd20:	f000 f852 	bl	800ddc8 <_sbrk_r>
 800dd24:	4580      	cmp	r8, r0
 800dd26:	d13a      	bne.n	800dd9e <_malloc_r+0xd2>
 800dd28:	6821      	ldr	r1, [r4, #0]
 800dd2a:	3503      	adds	r5, #3
 800dd2c:	1a6d      	subs	r5, r5, r1
 800dd2e:	f025 0503 	bic.w	r5, r5, #3
 800dd32:	3508      	adds	r5, #8
 800dd34:	2d0c      	cmp	r5, #12
 800dd36:	bf38      	it	cc
 800dd38:	250c      	movcc	r5, #12
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	f7ff ffa5 	bl	800dc8c <sbrk_aligned>
 800dd42:	3001      	adds	r0, #1
 800dd44:	d02b      	beq.n	800dd9e <_malloc_r+0xd2>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	442b      	add	r3, r5
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	e00e      	b.n	800dd6c <_malloc_r+0xa0>
 800dd4e:	6822      	ldr	r2, [r4, #0]
 800dd50:	1b52      	subs	r2, r2, r5
 800dd52:	d41e      	bmi.n	800dd92 <_malloc_r+0xc6>
 800dd54:	2a0b      	cmp	r2, #11
 800dd56:	d916      	bls.n	800dd86 <_malloc_r+0xba>
 800dd58:	1961      	adds	r1, r4, r5
 800dd5a:	42a3      	cmp	r3, r4
 800dd5c:	6025      	str	r5, [r4, #0]
 800dd5e:	bf18      	it	ne
 800dd60:	6059      	strne	r1, [r3, #4]
 800dd62:	6863      	ldr	r3, [r4, #4]
 800dd64:	bf08      	it	eq
 800dd66:	6031      	streq	r1, [r6, #0]
 800dd68:	5162      	str	r2, [r4, r5]
 800dd6a:	604b      	str	r3, [r1, #4]
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	f104 060b 	add.w	r6, r4, #11
 800dd72:	f000 f899 	bl	800dea8 <__malloc_unlock>
 800dd76:	f026 0607 	bic.w	r6, r6, #7
 800dd7a:	1d23      	adds	r3, r4, #4
 800dd7c:	1af2      	subs	r2, r6, r3
 800dd7e:	d0b6      	beq.n	800dcee <_malloc_r+0x22>
 800dd80:	1b9b      	subs	r3, r3, r6
 800dd82:	50a3      	str	r3, [r4, r2]
 800dd84:	e7b3      	b.n	800dcee <_malloc_r+0x22>
 800dd86:	6862      	ldr	r2, [r4, #4]
 800dd88:	42a3      	cmp	r3, r4
 800dd8a:	bf0c      	ite	eq
 800dd8c:	6032      	streq	r2, [r6, #0]
 800dd8e:	605a      	strne	r2, [r3, #4]
 800dd90:	e7ec      	b.n	800dd6c <_malloc_r+0xa0>
 800dd92:	4623      	mov	r3, r4
 800dd94:	6864      	ldr	r4, [r4, #4]
 800dd96:	e7b2      	b.n	800dcfe <_malloc_r+0x32>
 800dd98:	4634      	mov	r4, r6
 800dd9a:	6876      	ldr	r6, [r6, #4]
 800dd9c:	e7b9      	b.n	800dd12 <_malloc_r+0x46>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	603b      	str	r3, [r7, #0]
 800dda2:	4638      	mov	r0, r7
 800dda4:	f000 f880 	bl	800dea8 <__malloc_unlock>
 800dda8:	e7a1      	b.n	800dcee <_malloc_r+0x22>
 800ddaa:	6025      	str	r5, [r4, #0]
 800ddac:	e7de      	b.n	800dd6c <_malloc_r+0xa0>
 800ddae:	bf00      	nop
 800ddb0:	200008b4 	.word	0x200008b4
 800ddb4:	00000000 	.word	0x00000000

0800ddb8 <nan>:
 800ddb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ddc0 <nan+0x8>
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	00000000 	.word	0x00000000
 800ddc4:	7ff80000 	.word	0x7ff80000

0800ddc8 <_sbrk_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d06      	ldr	r5, [pc, #24]	; (800dde4 <_sbrk_r+0x1c>)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4604      	mov	r4, r0
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	602b      	str	r3, [r5, #0]
 800ddd4:	f7f7 fde2 	bl	800599c <_sbrk>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_sbrk_r+0x1a>
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_sbrk_r+0x1a>
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	200008bc 	.word	0x200008bc

0800dde8 <strncmp>:
 800dde8:	b510      	push	{r4, lr}
 800ddea:	b17a      	cbz	r2, 800de0c <strncmp+0x24>
 800ddec:	4603      	mov	r3, r0
 800ddee:	3901      	subs	r1, #1
 800ddf0:	1884      	adds	r4, r0, r2
 800ddf2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ddf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ddfa:	4290      	cmp	r0, r2
 800ddfc:	d101      	bne.n	800de02 <strncmp+0x1a>
 800ddfe:	42a3      	cmp	r3, r4
 800de00:	d101      	bne.n	800de06 <strncmp+0x1e>
 800de02:	1a80      	subs	r0, r0, r2
 800de04:	bd10      	pop	{r4, pc}
 800de06:	2800      	cmp	r0, #0
 800de08:	d1f3      	bne.n	800ddf2 <strncmp+0xa>
 800de0a:	e7fa      	b.n	800de02 <strncmp+0x1a>
 800de0c:	4610      	mov	r0, r2
 800de0e:	e7f9      	b.n	800de04 <strncmp+0x1c>

0800de10 <__ascii_wctomb>:
 800de10:	b149      	cbz	r1, 800de26 <__ascii_wctomb+0x16>
 800de12:	2aff      	cmp	r2, #255	; 0xff
 800de14:	bf85      	ittet	hi
 800de16:	238a      	movhi	r3, #138	; 0x8a
 800de18:	6003      	strhi	r3, [r0, #0]
 800de1a:	700a      	strbls	r2, [r1, #0]
 800de1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800de20:	bf98      	it	ls
 800de22:	2001      	movls	r0, #1
 800de24:	4770      	bx	lr
 800de26:	4608      	mov	r0, r1
 800de28:	4770      	bx	lr
	...

0800de2c <__assert_func>:
 800de2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de2e:	4614      	mov	r4, r2
 800de30:	461a      	mov	r2, r3
 800de32:	4b09      	ldr	r3, [pc, #36]	; (800de58 <__assert_func+0x2c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4605      	mov	r5, r0
 800de38:	68d8      	ldr	r0, [r3, #12]
 800de3a:	b14c      	cbz	r4, 800de50 <__assert_func+0x24>
 800de3c:	4b07      	ldr	r3, [pc, #28]	; (800de5c <__assert_func+0x30>)
 800de3e:	9100      	str	r1, [sp, #0]
 800de40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de44:	4906      	ldr	r1, [pc, #24]	; (800de60 <__assert_func+0x34>)
 800de46:	462b      	mov	r3, r5
 800de48:	f000 f80e 	bl	800de68 <fiprintf>
 800de4c:	f000 fc2c 	bl	800e6a8 <abort>
 800de50:	4b04      	ldr	r3, [pc, #16]	; (800de64 <__assert_func+0x38>)
 800de52:	461c      	mov	r4, r3
 800de54:	e7f3      	b.n	800de3e <__assert_func+0x12>
 800de56:	bf00      	nop
 800de58:	20000088 	.word	0x20000088
 800de5c:	080102d4 	.word	0x080102d4
 800de60:	080102e1 	.word	0x080102e1
 800de64:	0801030f 	.word	0x0801030f

0800de68 <fiprintf>:
 800de68:	b40e      	push	{r1, r2, r3}
 800de6a:	b503      	push	{r0, r1, lr}
 800de6c:	4601      	mov	r1, r0
 800de6e:	ab03      	add	r3, sp, #12
 800de70:	4805      	ldr	r0, [pc, #20]	; (800de88 <fiprintf+0x20>)
 800de72:	f853 2b04 	ldr.w	r2, [r3], #4
 800de76:	6800      	ldr	r0, [r0, #0]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	f000 f891 	bl	800dfa0 <_vfiprintf_r>
 800de7e:	b002      	add	sp, #8
 800de80:	f85d eb04 	ldr.w	lr, [sp], #4
 800de84:	b003      	add	sp, #12
 800de86:	4770      	bx	lr
 800de88:	20000088 	.word	0x20000088

0800de8c <malloc>:
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <malloc+0xc>)
 800de8e:	4601      	mov	r1, r0
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	f7ff bf1b 	b.w	800dccc <_malloc_r>
 800de96:	bf00      	nop
 800de98:	20000088 	.word	0x20000088

0800de9c <__malloc_lock>:
 800de9c:	4801      	ldr	r0, [pc, #4]	; (800dea4 <__malloc_lock+0x8>)
 800de9e:	f000 bdc3 	b.w	800ea28 <__retarget_lock_acquire_recursive>
 800dea2:	bf00      	nop
 800dea4:	200008c0 	.word	0x200008c0

0800dea8 <__malloc_unlock>:
 800dea8:	4801      	ldr	r0, [pc, #4]	; (800deb0 <__malloc_unlock+0x8>)
 800deaa:	f000 bdbe 	b.w	800ea2a <__retarget_lock_release_recursive>
 800deae:	bf00      	nop
 800deb0:	200008c0 	.word	0x200008c0

0800deb4 <_free_r>:
 800deb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deb6:	2900      	cmp	r1, #0
 800deb8:	d044      	beq.n	800df44 <_free_r+0x90>
 800deba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800debe:	9001      	str	r0, [sp, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f1a1 0404 	sub.w	r4, r1, #4
 800dec6:	bfb8      	it	lt
 800dec8:	18e4      	addlt	r4, r4, r3
 800deca:	f7ff ffe7 	bl	800de9c <__malloc_lock>
 800dece:	4a1e      	ldr	r2, [pc, #120]	; (800df48 <_free_r+0x94>)
 800ded0:	9801      	ldr	r0, [sp, #4]
 800ded2:	6813      	ldr	r3, [r2, #0]
 800ded4:	b933      	cbnz	r3, 800dee4 <_free_r+0x30>
 800ded6:	6063      	str	r3, [r4, #4]
 800ded8:	6014      	str	r4, [r2, #0]
 800deda:	b003      	add	sp, #12
 800dedc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dee0:	f7ff bfe2 	b.w	800dea8 <__malloc_unlock>
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d908      	bls.n	800defa <_free_r+0x46>
 800dee8:	6825      	ldr	r5, [r4, #0]
 800deea:	1961      	adds	r1, r4, r5
 800deec:	428b      	cmp	r3, r1
 800deee:	bf01      	itttt	eq
 800def0:	6819      	ldreq	r1, [r3, #0]
 800def2:	685b      	ldreq	r3, [r3, #4]
 800def4:	1949      	addeq	r1, r1, r5
 800def6:	6021      	streq	r1, [r4, #0]
 800def8:	e7ed      	b.n	800ded6 <_free_r+0x22>
 800defa:	461a      	mov	r2, r3
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	b10b      	cbz	r3, 800df04 <_free_r+0x50>
 800df00:	42a3      	cmp	r3, r4
 800df02:	d9fa      	bls.n	800defa <_free_r+0x46>
 800df04:	6811      	ldr	r1, [r2, #0]
 800df06:	1855      	adds	r5, r2, r1
 800df08:	42a5      	cmp	r5, r4
 800df0a:	d10b      	bne.n	800df24 <_free_r+0x70>
 800df0c:	6824      	ldr	r4, [r4, #0]
 800df0e:	4421      	add	r1, r4
 800df10:	1854      	adds	r4, r2, r1
 800df12:	42a3      	cmp	r3, r4
 800df14:	6011      	str	r1, [r2, #0]
 800df16:	d1e0      	bne.n	800deda <_free_r+0x26>
 800df18:	681c      	ldr	r4, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	6053      	str	r3, [r2, #4]
 800df1e:	4421      	add	r1, r4
 800df20:	6011      	str	r1, [r2, #0]
 800df22:	e7da      	b.n	800deda <_free_r+0x26>
 800df24:	d902      	bls.n	800df2c <_free_r+0x78>
 800df26:	230c      	movs	r3, #12
 800df28:	6003      	str	r3, [r0, #0]
 800df2a:	e7d6      	b.n	800deda <_free_r+0x26>
 800df2c:	6825      	ldr	r5, [r4, #0]
 800df2e:	1961      	adds	r1, r4, r5
 800df30:	428b      	cmp	r3, r1
 800df32:	bf04      	itt	eq
 800df34:	6819      	ldreq	r1, [r3, #0]
 800df36:	685b      	ldreq	r3, [r3, #4]
 800df38:	6063      	str	r3, [r4, #4]
 800df3a:	bf04      	itt	eq
 800df3c:	1949      	addeq	r1, r1, r5
 800df3e:	6021      	streq	r1, [r4, #0]
 800df40:	6054      	str	r4, [r2, #4]
 800df42:	e7ca      	b.n	800deda <_free_r+0x26>
 800df44:	b003      	add	sp, #12
 800df46:	bd30      	pop	{r4, r5, pc}
 800df48:	200008b4 	.word	0x200008b4

0800df4c <__sfputc_r>:
 800df4c:	6893      	ldr	r3, [r2, #8]
 800df4e:	3b01      	subs	r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	b410      	push	{r4}
 800df54:	6093      	str	r3, [r2, #8]
 800df56:	da08      	bge.n	800df6a <__sfputc_r+0x1e>
 800df58:	6994      	ldr	r4, [r2, #24]
 800df5a:	42a3      	cmp	r3, r4
 800df5c:	db01      	blt.n	800df62 <__sfputc_r+0x16>
 800df5e:	290a      	cmp	r1, #10
 800df60:	d103      	bne.n	800df6a <__sfputc_r+0x1e>
 800df62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df66:	f000 badf 	b.w	800e528 <__swbuf_r>
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	1c58      	adds	r0, r3, #1
 800df6e:	6010      	str	r0, [r2, #0]
 800df70:	7019      	strb	r1, [r3, #0]
 800df72:	4608      	mov	r0, r1
 800df74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <__sfputs_r>:
 800df7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7c:	4606      	mov	r6, r0
 800df7e:	460f      	mov	r7, r1
 800df80:	4614      	mov	r4, r2
 800df82:	18d5      	adds	r5, r2, r3
 800df84:	42ac      	cmp	r4, r5
 800df86:	d101      	bne.n	800df8c <__sfputs_r+0x12>
 800df88:	2000      	movs	r0, #0
 800df8a:	e007      	b.n	800df9c <__sfputs_r+0x22>
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	463a      	mov	r2, r7
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ffda 	bl	800df4c <__sfputc_r>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d1f3      	bne.n	800df84 <__sfputs_r+0xa>
 800df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfa0 <_vfiprintf_r>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	460d      	mov	r5, r1
 800dfa6:	b09d      	sub	sp, #116	; 0x74
 800dfa8:	4614      	mov	r4, r2
 800dfaa:	4698      	mov	r8, r3
 800dfac:	4606      	mov	r6, r0
 800dfae:	b118      	cbz	r0, 800dfb8 <_vfiprintf_r+0x18>
 800dfb0:	6983      	ldr	r3, [r0, #24]
 800dfb2:	b90b      	cbnz	r3, 800dfb8 <_vfiprintf_r+0x18>
 800dfb4:	f000 fc9a 	bl	800e8ec <__sinit>
 800dfb8:	4b89      	ldr	r3, [pc, #548]	; (800e1e0 <_vfiprintf_r+0x240>)
 800dfba:	429d      	cmp	r5, r3
 800dfbc:	d11b      	bne.n	800dff6 <_vfiprintf_r+0x56>
 800dfbe:	6875      	ldr	r5, [r6, #4]
 800dfc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfc2:	07d9      	lsls	r1, r3, #31
 800dfc4:	d405      	bmi.n	800dfd2 <_vfiprintf_r+0x32>
 800dfc6:	89ab      	ldrh	r3, [r5, #12]
 800dfc8:	059a      	lsls	r2, r3, #22
 800dfca:	d402      	bmi.n	800dfd2 <_vfiprintf_r+0x32>
 800dfcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfce:	f000 fd2b 	bl	800ea28 <__retarget_lock_acquire_recursive>
 800dfd2:	89ab      	ldrh	r3, [r5, #12]
 800dfd4:	071b      	lsls	r3, r3, #28
 800dfd6:	d501      	bpl.n	800dfdc <_vfiprintf_r+0x3c>
 800dfd8:	692b      	ldr	r3, [r5, #16]
 800dfda:	b9eb      	cbnz	r3, 800e018 <_vfiprintf_r+0x78>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f000 faf4 	bl	800e5cc <__swsetup_r>
 800dfe4:	b1c0      	cbz	r0, 800e018 <_vfiprintf_r+0x78>
 800dfe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe8:	07dc      	lsls	r4, r3, #31
 800dfea:	d50e      	bpl.n	800e00a <_vfiprintf_r+0x6a>
 800dfec:	f04f 30ff 	mov.w	r0, #4294967295
 800dff0:	b01d      	add	sp, #116	; 0x74
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	4b7b      	ldr	r3, [pc, #492]	; (800e1e4 <_vfiprintf_r+0x244>)
 800dff8:	429d      	cmp	r5, r3
 800dffa:	d101      	bne.n	800e000 <_vfiprintf_r+0x60>
 800dffc:	68b5      	ldr	r5, [r6, #8]
 800dffe:	e7df      	b.n	800dfc0 <_vfiprintf_r+0x20>
 800e000:	4b79      	ldr	r3, [pc, #484]	; (800e1e8 <_vfiprintf_r+0x248>)
 800e002:	429d      	cmp	r5, r3
 800e004:	bf08      	it	eq
 800e006:	68f5      	ldreq	r5, [r6, #12]
 800e008:	e7da      	b.n	800dfc0 <_vfiprintf_r+0x20>
 800e00a:	89ab      	ldrh	r3, [r5, #12]
 800e00c:	0598      	lsls	r0, r3, #22
 800e00e:	d4ed      	bmi.n	800dfec <_vfiprintf_r+0x4c>
 800e010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e012:	f000 fd0a 	bl	800ea2a <__retarget_lock_release_recursive>
 800e016:	e7e9      	b.n	800dfec <_vfiprintf_r+0x4c>
 800e018:	2300      	movs	r3, #0
 800e01a:	9309      	str	r3, [sp, #36]	; 0x24
 800e01c:	2320      	movs	r3, #32
 800e01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e022:	f8cd 800c 	str.w	r8, [sp, #12]
 800e026:	2330      	movs	r3, #48	; 0x30
 800e028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e1ec <_vfiprintf_r+0x24c>
 800e02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e030:	f04f 0901 	mov.w	r9, #1
 800e034:	4623      	mov	r3, r4
 800e036:	469a      	mov	sl, r3
 800e038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03c:	b10a      	cbz	r2, 800e042 <_vfiprintf_r+0xa2>
 800e03e:	2a25      	cmp	r2, #37	; 0x25
 800e040:	d1f9      	bne.n	800e036 <_vfiprintf_r+0x96>
 800e042:	ebba 0b04 	subs.w	fp, sl, r4
 800e046:	d00b      	beq.n	800e060 <_vfiprintf_r+0xc0>
 800e048:	465b      	mov	r3, fp
 800e04a:	4622      	mov	r2, r4
 800e04c:	4629      	mov	r1, r5
 800e04e:	4630      	mov	r0, r6
 800e050:	f7ff ff93 	bl	800df7a <__sfputs_r>
 800e054:	3001      	adds	r0, #1
 800e056:	f000 80aa 	beq.w	800e1ae <_vfiprintf_r+0x20e>
 800e05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e05c:	445a      	add	r2, fp
 800e05e:	9209      	str	r2, [sp, #36]	; 0x24
 800e060:	f89a 3000 	ldrb.w	r3, [sl]
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 80a2 	beq.w	800e1ae <_vfiprintf_r+0x20e>
 800e06a:	2300      	movs	r3, #0
 800e06c:	f04f 32ff 	mov.w	r2, #4294967295
 800e070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e074:	f10a 0a01 	add.w	sl, sl, #1
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	9307      	str	r3, [sp, #28]
 800e07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e080:	931a      	str	r3, [sp, #104]	; 0x68
 800e082:	4654      	mov	r4, sl
 800e084:	2205      	movs	r2, #5
 800e086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08a:	4858      	ldr	r0, [pc, #352]	; (800e1ec <_vfiprintf_r+0x24c>)
 800e08c:	f7f2 f8b0 	bl	80001f0 <memchr>
 800e090:	9a04      	ldr	r2, [sp, #16]
 800e092:	b9d8      	cbnz	r0, 800e0cc <_vfiprintf_r+0x12c>
 800e094:	06d1      	lsls	r1, r2, #27
 800e096:	bf44      	itt	mi
 800e098:	2320      	movmi	r3, #32
 800e09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e09e:	0713      	lsls	r3, r2, #28
 800e0a0:	bf44      	itt	mi
 800e0a2:	232b      	movmi	r3, #43	; 0x2b
 800e0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ae:	d015      	beq.n	800e0dc <_vfiprintf_r+0x13c>
 800e0b0:	9a07      	ldr	r2, [sp, #28]
 800e0b2:	4654      	mov	r4, sl
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f04f 0c0a 	mov.w	ip, #10
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0c0:	3b30      	subs	r3, #48	; 0x30
 800e0c2:	2b09      	cmp	r3, #9
 800e0c4:	d94e      	bls.n	800e164 <_vfiprintf_r+0x1c4>
 800e0c6:	b1b0      	cbz	r0, 800e0f6 <_vfiprintf_r+0x156>
 800e0c8:	9207      	str	r2, [sp, #28]
 800e0ca:	e014      	b.n	800e0f6 <_vfiprintf_r+0x156>
 800e0cc:	eba0 0308 	sub.w	r3, r0, r8
 800e0d0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	46a2      	mov	sl, r4
 800e0da:	e7d2      	b.n	800e082 <_vfiprintf_r+0xe2>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	1d19      	adds	r1, r3, #4
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	9103      	str	r1, [sp, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	bfbb      	ittet	lt
 800e0e8:	425b      	neglt	r3, r3
 800e0ea:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ee:	9307      	strge	r3, [sp, #28]
 800e0f0:	9307      	strlt	r3, [sp, #28]
 800e0f2:	bfb8      	it	lt
 800e0f4:	9204      	strlt	r2, [sp, #16]
 800e0f6:	7823      	ldrb	r3, [r4, #0]
 800e0f8:	2b2e      	cmp	r3, #46	; 0x2e
 800e0fa:	d10c      	bne.n	800e116 <_vfiprintf_r+0x176>
 800e0fc:	7863      	ldrb	r3, [r4, #1]
 800e0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e100:	d135      	bne.n	800e16e <_vfiprintf_r+0x1ce>
 800e102:	9b03      	ldr	r3, [sp, #12]
 800e104:	1d1a      	adds	r2, r3, #4
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	9203      	str	r2, [sp, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bfb8      	it	lt
 800e10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e112:	3402      	adds	r4, #2
 800e114:	9305      	str	r3, [sp, #20]
 800e116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e1fc <_vfiprintf_r+0x25c>
 800e11a:	7821      	ldrb	r1, [r4, #0]
 800e11c:	2203      	movs	r2, #3
 800e11e:	4650      	mov	r0, sl
 800e120:	f7f2 f866 	bl	80001f0 <memchr>
 800e124:	b140      	cbz	r0, 800e138 <_vfiprintf_r+0x198>
 800e126:	2340      	movs	r3, #64	; 0x40
 800e128:	eba0 000a 	sub.w	r0, r0, sl
 800e12c:	fa03 f000 	lsl.w	r0, r3, r0
 800e130:	9b04      	ldr	r3, [sp, #16]
 800e132:	4303      	orrs	r3, r0
 800e134:	3401      	adds	r4, #1
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e13c:	482c      	ldr	r0, [pc, #176]	; (800e1f0 <_vfiprintf_r+0x250>)
 800e13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e142:	2206      	movs	r2, #6
 800e144:	f7f2 f854 	bl	80001f0 <memchr>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d03f      	beq.n	800e1cc <_vfiprintf_r+0x22c>
 800e14c:	4b29      	ldr	r3, [pc, #164]	; (800e1f4 <_vfiprintf_r+0x254>)
 800e14e:	bb1b      	cbnz	r3, 800e198 <_vfiprintf_r+0x1f8>
 800e150:	9b03      	ldr	r3, [sp, #12]
 800e152:	3307      	adds	r3, #7
 800e154:	f023 0307 	bic.w	r3, r3, #7
 800e158:	3308      	adds	r3, #8
 800e15a:	9303      	str	r3, [sp, #12]
 800e15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15e:	443b      	add	r3, r7
 800e160:	9309      	str	r3, [sp, #36]	; 0x24
 800e162:	e767      	b.n	800e034 <_vfiprintf_r+0x94>
 800e164:	fb0c 3202 	mla	r2, ip, r2, r3
 800e168:	460c      	mov	r4, r1
 800e16a:	2001      	movs	r0, #1
 800e16c:	e7a5      	b.n	800e0ba <_vfiprintf_r+0x11a>
 800e16e:	2300      	movs	r3, #0
 800e170:	3401      	adds	r4, #1
 800e172:	9305      	str	r3, [sp, #20]
 800e174:	4619      	mov	r1, r3
 800e176:	f04f 0c0a 	mov.w	ip, #10
 800e17a:	4620      	mov	r0, r4
 800e17c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e180:	3a30      	subs	r2, #48	; 0x30
 800e182:	2a09      	cmp	r2, #9
 800e184:	d903      	bls.n	800e18e <_vfiprintf_r+0x1ee>
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0c5      	beq.n	800e116 <_vfiprintf_r+0x176>
 800e18a:	9105      	str	r1, [sp, #20]
 800e18c:	e7c3      	b.n	800e116 <_vfiprintf_r+0x176>
 800e18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e192:	4604      	mov	r4, r0
 800e194:	2301      	movs	r3, #1
 800e196:	e7f0      	b.n	800e17a <_vfiprintf_r+0x1da>
 800e198:	ab03      	add	r3, sp, #12
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	462a      	mov	r2, r5
 800e19e:	4b16      	ldr	r3, [pc, #88]	; (800e1f8 <_vfiprintf_r+0x258>)
 800e1a0:	a904      	add	r1, sp, #16
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f3af 8000 	nop.w
 800e1a8:	4607      	mov	r7, r0
 800e1aa:	1c78      	adds	r0, r7, #1
 800e1ac:	d1d6      	bne.n	800e15c <_vfiprintf_r+0x1bc>
 800e1ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1b0:	07d9      	lsls	r1, r3, #31
 800e1b2:	d405      	bmi.n	800e1c0 <_vfiprintf_r+0x220>
 800e1b4:	89ab      	ldrh	r3, [r5, #12]
 800e1b6:	059a      	lsls	r2, r3, #22
 800e1b8:	d402      	bmi.n	800e1c0 <_vfiprintf_r+0x220>
 800e1ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1bc:	f000 fc35 	bl	800ea2a <__retarget_lock_release_recursive>
 800e1c0:	89ab      	ldrh	r3, [r5, #12]
 800e1c2:	065b      	lsls	r3, r3, #25
 800e1c4:	f53f af12 	bmi.w	800dfec <_vfiprintf_r+0x4c>
 800e1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ca:	e711      	b.n	800dff0 <_vfiprintf_r+0x50>
 800e1cc:	ab03      	add	r3, sp, #12
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	462a      	mov	r2, r5
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <_vfiprintf_r+0x258>)
 800e1d4:	a904      	add	r1, sp, #16
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f000 f880 	bl	800e2dc <_printf_i>
 800e1dc:	e7e4      	b.n	800e1a8 <_vfiprintf_r+0x208>
 800e1de:	bf00      	nop
 800e1e0:	08010464 	.word	0x08010464
 800e1e4:	08010484 	.word	0x08010484
 800e1e8:	08010444 	.word	0x08010444
 800e1ec:	08010411 	.word	0x08010411
 800e1f0:	0801041b 	.word	0x0801041b
 800e1f4:	00000000 	.word	0x00000000
 800e1f8:	0800df7b 	.word	0x0800df7b
 800e1fc:	08010417 	.word	0x08010417

0800e200 <_printf_common>:
 800e200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e204:	4616      	mov	r6, r2
 800e206:	4699      	mov	r9, r3
 800e208:	688a      	ldr	r2, [r1, #8]
 800e20a:	690b      	ldr	r3, [r1, #16]
 800e20c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e210:	4293      	cmp	r3, r2
 800e212:	bfb8      	it	lt
 800e214:	4613      	movlt	r3, r2
 800e216:	6033      	str	r3, [r6, #0]
 800e218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e21c:	4607      	mov	r7, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	b10a      	cbz	r2, 800e226 <_printf_common+0x26>
 800e222:	3301      	adds	r3, #1
 800e224:	6033      	str	r3, [r6, #0]
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	0699      	lsls	r1, r3, #26
 800e22a:	bf42      	ittt	mi
 800e22c:	6833      	ldrmi	r3, [r6, #0]
 800e22e:	3302      	addmi	r3, #2
 800e230:	6033      	strmi	r3, [r6, #0]
 800e232:	6825      	ldr	r5, [r4, #0]
 800e234:	f015 0506 	ands.w	r5, r5, #6
 800e238:	d106      	bne.n	800e248 <_printf_common+0x48>
 800e23a:	f104 0a19 	add.w	sl, r4, #25
 800e23e:	68e3      	ldr	r3, [r4, #12]
 800e240:	6832      	ldr	r2, [r6, #0]
 800e242:	1a9b      	subs	r3, r3, r2
 800e244:	42ab      	cmp	r3, r5
 800e246:	dc26      	bgt.n	800e296 <_printf_common+0x96>
 800e248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e24c:	1e13      	subs	r3, r2, #0
 800e24e:	6822      	ldr	r2, [r4, #0]
 800e250:	bf18      	it	ne
 800e252:	2301      	movne	r3, #1
 800e254:	0692      	lsls	r2, r2, #26
 800e256:	d42b      	bmi.n	800e2b0 <_printf_common+0xb0>
 800e258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e25c:	4649      	mov	r1, r9
 800e25e:	4638      	mov	r0, r7
 800e260:	47c0      	blx	r8
 800e262:	3001      	adds	r0, #1
 800e264:	d01e      	beq.n	800e2a4 <_printf_common+0xa4>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	68e5      	ldr	r5, [r4, #12]
 800e26a:	6832      	ldr	r2, [r6, #0]
 800e26c:	f003 0306 	and.w	r3, r3, #6
 800e270:	2b04      	cmp	r3, #4
 800e272:	bf08      	it	eq
 800e274:	1aad      	subeq	r5, r5, r2
 800e276:	68a3      	ldr	r3, [r4, #8]
 800e278:	6922      	ldr	r2, [r4, #16]
 800e27a:	bf0c      	ite	eq
 800e27c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e280:	2500      	movne	r5, #0
 800e282:	4293      	cmp	r3, r2
 800e284:	bfc4      	itt	gt
 800e286:	1a9b      	subgt	r3, r3, r2
 800e288:	18ed      	addgt	r5, r5, r3
 800e28a:	2600      	movs	r6, #0
 800e28c:	341a      	adds	r4, #26
 800e28e:	42b5      	cmp	r5, r6
 800e290:	d11a      	bne.n	800e2c8 <_printf_common+0xc8>
 800e292:	2000      	movs	r0, #0
 800e294:	e008      	b.n	800e2a8 <_printf_common+0xa8>
 800e296:	2301      	movs	r3, #1
 800e298:	4652      	mov	r2, sl
 800e29a:	4649      	mov	r1, r9
 800e29c:	4638      	mov	r0, r7
 800e29e:	47c0      	blx	r8
 800e2a0:	3001      	adds	r0, #1
 800e2a2:	d103      	bne.n	800e2ac <_printf_common+0xac>
 800e2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ac:	3501      	adds	r5, #1
 800e2ae:	e7c6      	b.n	800e23e <_printf_common+0x3e>
 800e2b0:	18e1      	adds	r1, r4, r3
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	2030      	movs	r0, #48	; 0x30
 800e2b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2ba:	4422      	add	r2, r4
 800e2bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	e7c7      	b.n	800e258 <_printf_common+0x58>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4649      	mov	r1, r9
 800e2ce:	4638      	mov	r0, r7
 800e2d0:	47c0      	blx	r8
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	d0e6      	beq.n	800e2a4 <_printf_common+0xa4>
 800e2d6:	3601      	adds	r6, #1
 800e2d8:	e7d9      	b.n	800e28e <_printf_common+0x8e>
	...

0800e2dc <_printf_i>:
 800e2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	7e0f      	ldrb	r7, [r1, #24]
 800e2e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2e4:	2f78      	cmp	r7, #120	; 0x78
 800e2e6:	4691      	mov	r9, r2
 800e2e8:	4680      	mov	r8, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	469a      	mov	sl, r3
 800e2ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2f2:	d807      	bhi.n	800e304 <_printf_i+0x28>
 800e2f4:	2f62      	cmp	r7, #98	; 0x62
 800e2f6:	d80a      	bhi.n	800e30e <_printf_i+0x32>
 800e2f8:	2f00      	cmp	r7, #0
 800e2fa:	f000 80d8 	beq.w	800e4ae <_printf_i+0x1d2>
 800e2fe:	2f58      	cmp	r7, #88	; 0x58
 800e300:	f000 80a3 	beq.w	800e44a <_printf_i+0x16e>
 800e304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e30c:	e03a      	b.n	800e384 <_printf_i+0xa8>
 800e30e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e312:	2b15      	cmp	r3, #21
 800e314:	d8f6      	bhi.n	800e304 <_printf_i+0x28>
 800e316:	a101      	add	r1, pc, #4	; (adr r1, 800e31c <_printf_i+0x40>)
 800e318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e31c:	0800e375 	.word	0x0800e375
 800e320:	0800e389 	.word	0x0800e389
 800e324:	0800e305 	.word	0x0800e305
 800e328:	0800e305 	.word	0x0800e305
 800e32c:	0800e305 	.word	0x0800e305
 800e330:	0800e305 	.word	0x0800e305
 800e334:	0800e389 	.word	0x0800e389
 800e338:	0800e305 	.word	0x0800e305
 800e33c:	0800e305 	.word	0x0800e305
 800e340:	0800e305 	.word	0x0800e305
 800e344:	0800e305 	.word	0x0800e305
 800e348:	0800e495 	.word	0x0800e495
 800e34c:	0800e3b9 	.word	0x0800e3b9
 800e350:	0800e477 	.word	0x0800e477
 800e354:	0800e305 	.word	0x0800e305
 800e358:	0800e305 	.word	0x0800e305
 800e35c:	0800e4b7 	.word	0x0800e4b7
 800e360:	0800e305 	.word	0x0800e305
 800e364:	0800e3b9 	.word	0x0800e3b9
 800e368:	0800e305 	.word	0x0800e305
 800e36c:	0800e305 	.word	0x0800e305
 800e370:	0800e47f 	.word	0x0800e47f
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	602a      	str	r2, [r5, #0]
 800e37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e384:	2301      	movs	r3, #1
 800e386:	e0a3      	b.n	800e4d0 <_printf_i+0x1f4>
 800e388:	6820      	ldr	r0, [r4, #0]
 800e38a:	6829      	ldr	r1, [r5, #0]
 800e38c:	0606      	lsls	r6, r0, #24
 800e38e:	f101 0304 	add.w	r3, r1, #4
 800e392:	d50a      	bpl.n	800e3aa <_printf_i+0xce>
 800e394:	680e      	ldr	r6, [r1, #0]
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	2e00      	cmp	r6, #0
 800e39a:	da03      	bge.n	800e3a4 <_printf_i+0xc8>
 800e39c:	232d      	movs	r3, #45	; 0x2d
 800e39e:	4276      	negs	r6, r6
 800e3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3a4:	485e      	ldr	r0, [pc, #376]	; (800e520 <_printf_i+0x244>)
 800e3a6:	230a      	movs	r3, #10
 800e3a8:	e019      	b.n	800e3de <_printf_i+0x102>
 800e3aa:	680e      	ldr	r6, [r1, #0]
 800e3ac:	602b      	str	r3, [r5, #0]
 800e3ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e3b2:	bf18      	it	ne
 800e3b4:	b236      	sxthne	r6, r6
 800e3b6:	e7ef      	b.n	800e398 <_printf_i+0xbc>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	6820      	ldr	r0, [r4, #0]
 800e3bc:	1d19      	adds	r1, r3, #4
 800e3be:	6029      	str	r1, [r5, #0]
 800e3c0:	0601      	lsls	r1, r0, #24
 800e3c2:	d501      	bpl.n	800e3c8 <_printf_i+0xec>
 800e3c4:	681e      	ldr	r6, [r3, #0]
 800e3c6:	e002      	b.n	800e3ce <_printf_i+0xf2>
 800e3c8:	0646      	lsls	r6, r0, #25
 800e3ca:	d5fb      	bpl.n	800e3c4 <_printf_i+0xe8>
 800e3cc:	881e      	ldrh	r6, [r3, #0]
 800e3ce:	4854      	ldr	r0, [pc, #336]	; (800e520 <_printf_i+0x244>)
 800e3d0:	2f6f      	cmp	r7, #111	; 0x6f
 800e3d2:	bf0c      	ite	eq
 800e3d4:	2308      	moveq	r3, #8
 800e3d6:	230a      	movne	r3, #10
 800e3d8:	2100      	movs	r1, #0
 800e3da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3de:	6865      	ldr	r5, [r4, #4]
 800e3e0:	60a5      	str	r5, [r4, #8]
 800e3e2:	2d00      	cmp	r5, #0
 800e3e4:	bfa2      	ittt	ge
 800e3e6:	6821      	ldrge	r1, [r4, #0]
 800e3e8:	f021 0104 	bicge.w	r1, r1, #4
 800e3ec:	6021      	strge	r1, [r4, #0]
 800e3ee:	b90e      	cbnz	r6, 800e3f4 <_printf_i+0x118>
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	d04d      	beq.n	800e490 <_printf_i+0x1b4>
 800e3f4:	4615      	mov	r5, r2
 800e3f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e3fa:	fb03 6711 	mls	r7, r3, r1, r6
 800e3fe:	5dc7      	ldrb	r7, [r0, r7]
 800e400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e404:	4637      	mov	r7, r6
 800e406:	42bb      	cmp	r3, r7
 800e408:	460e      	mov	r6, r1
 800e40a:	d9f4      	bls.n	800e3f6 <_printf_i+0x11a>
 800e40c:	2b08      	cmp	r3, #8
 800e40e:	d10b      	bne.n	800e428 <_printf_i+0x14c>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	07de      	lsls	r6, r3, #31
 800e414:	d508      	bpl.n	800e428 <_printf_i+0x14c>
 800e416:	6923      	ldr	r3, [r4, #16]
 800e418:	6861      	ldr	r1, [r4, #4]
 800e41a:	4299      	cmp	r1, r3
 800e41c:	bfde      	ittt	le
 800e41e:	2330      	movle	r3, #48	; 0x30
 800e420:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e424:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e428:	1b52      	subs	r2, r2, r5
 800e42a:	6122      	str	r2, [r4, #16]
 800e42c:	f8cd a000 	str.w	sl, [sp]
 800e430:	464b      	mov	r3, r9
 800e432:	aa03      	add	r2, sp, #12
 800e434:	4621      	mov	r1, r4
 800e436:	4640      	mov	r0, r8
 800e438:	f7ff fee2 	bl	800e200 <_printf_common>
 800e43c:	3001      	adds	r0, #1
 800e43e:	d14c      	bne.n	800e4da <_printf_i+0x1fe>
 800e440:	f04f 30ff 	mov.w	r0, #4294967295
 800e444:	b004      	add	sp, #16
 800e446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44a:	4835      	ldr	r0, [pc, #212]	; (800e520 <_printf_i+0x244>)
 800e44c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e450:	6829      	ldr	r1, [r5, #0]
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	f851 6b04 	ldr.w	r6, [r1], #4
 800e458:	6029      	str	r1, [r5, #0]
 800e45a:	061d      	lsls	r5, r3, #24
 800e45c:	d514      	bpl.n	800e488 <_printf_i+0x1ac>
 800e45e:	07df      	lsls	r7, r3, #31
 800e460:	bf44      	itt	mi
 800e462:	f043 0320 	orrmi.w	r3, r3, #32
 800e466:	6023      	strmi	r3, [r4, #0]
 800e468:	b91e      	cbnz	r6, 800e472 <_printf_i+0x196>
 800e46a:	6823      	ldr	r3, [r4, #0]
 800e46c:	f023 0320 	bic.w	r3, r3, #32
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	2310      	movs	r3, #16
 800e474:	e7b0      	b.n	800e3d8 <_printf_i+0xfc>
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	f043 0320 	orr.w	r3, r3, #32
 800e47c:	6023      	str	r3, [r4, #0]
 800e47e:	2378      	movs	r3, #120	; 0x78
 800e480:	4828      	ldr	r0, [pc, #160]	; (800e524 <_printf_i+0x248>)
 800e482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e486:	e7e3      	b.n	800e450 <_printf_i+0x174>
 800e488:	0659      	lsls	r1, r3, #25
 800e48a:	bf48      	it	mi
 800e48c:	b2b6      	uxthmi	r6, r6
 800e48e:	e7e6      	b.n	800e45e <_printf_i+0x182>
 800e490:	4615      	mov	r5, r2
 800e492:	e7bb      	b.n	800e40c <_printf_i+0x130>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	6826      	ldr	r6, [r4, #0]
 800e498:	6961      	ldr	r1, [r4, #20]
 800e49a:	1d18      	adds	r0, r3, #4
 800e49c:	6028      	str	r0, [r5, #0]
 800e49e:	0635      	lsls	r5, r6, #24
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	d501      	bpl.n	800e4a8 <_printf_i+0x1cc>
 800e4a4:	6019      	str	r1, [r3, #0]
 800e4a6:	e002      	b.n	800e4ae <_printf_i+0x1d2>
 800e4a8:	0670      	lsls	r0, r6, #25
 800e4aa:	d5fb      	bpl.n	800e4a4 <_printf_i+0x1c8>
 800e4ac:	8019      	strh	r1, [r3, #0]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	4615      	mov	r5, r2
 800e4b4:	e7ba      	b.n	800e42c <_printf_i+0x150>
 800e4b6:	682b      	ldr	r3, [r5, #0]
 800e4b8:	1d1a      	adds	r2, r3, #4
 800e4ba:	602a      	str	r2, [r5, #0]
 800e4bc:	681d      	ldr	r5, [r3, #0]
 800e4be:	6862      	ldr	r2, [r4, #4]
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f7f1 fe94 	bl	80001f0 <memchr>
 800e4c8:	b108      	cbz	r0, 800e4ce <_printf_i+0x1f2>
 800e4ca:	1b40      	subs	r0, r0, r5
 800e4cc:	6060      	str	r0, [r4, #4]
 800e4ce:	6863      	ldr	r3, [r4, #4]
 800e4d0:	6123      	str	r3, [r4, #16]
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4d8:	e7a8      	b.n	800e42c <_printf_i+0x150>
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	462a      	mov	r2, r5
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	47d0      	blx	sl
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d0ab      	beq.n	800e440 <_printf_i+0x164>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	079b      	lsls	r3, r3, #30
 800e4ec:	d413      	bmi.n	800e516 <_printf_i+0x23a>
 800e4ee:	68e0      	ldr	r0, [r4, #12]
 800e4f0:	9b03      	ldr	r3, [sp, #12]
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	bfb8      	it	lt
 800e4f6:	4618      	movlt	r0, r3
 800e4f8:	e7a4      	b.n	800e444 <_printf_i+0x168>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	4632      	mov	r2, r6
 800e4fe:	4649      	mov	r1, r9
 800e500:	4640      	mov	r0, r8
 800e502:	47d0      	blx	sl
 800e504:	3001      	adds	r0, #1
 800e506:	d09b      	beq.n	800e440 <_printf_i+0x164>
 800e508:	3501      	adds	r5, #1
 800e50a:	68e3      	ldr	r3, [r4, #12]
 800e50c:	9903      	ldr	r1, [sp, #12]
 800e50e:	1a5b      	subs	r3, r3, r1
 800e510:	42ab      	cmp	r3, r5
 800e512:	dcf2      	bgt.n	800e4fa <_printf_i+0x21e>
 800e514:	e7eb      	b.n	800e4ee <_printf_i+0x212>
 800e516:	2500      	movs	r5, #0
 800e518:	f104 0619 	add.w	r6, r4, #25
 800e51c:	e7f5      	b.n	800e50a <_printf_i+0x22e>
 800e51e:	bf00      	nop
 800e520:	08010422 	.word	0x08010422
 800e524:	08010433 	.word	0x08010433

0800e528 <__swbuf_r>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	460e      	mov	r6, r1
 800e52c:	4614      	mov	r4, r2
 800e52e:	4605      	mov	r5, r0
 800e530:	b118      	cbz	r0, 800e53a <__swbuf_r+0x12>
 800e532:	6983      	ldr	r3, [r0, #24]
 800e534:	b90b      	cbnz	r3, 800e53a <__swbuf_r+0x12>
 800e536:	f000 f9d9 	bl	800e8ec <__sinit>
 800e53a:	4b21      	ldr	r3, [pc, #132]	; (800e5c0 <__swbuf_r+0x98>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	d12b      	bne.n	800e598 <__swbuf_r+0x70>
 800e540:	686c      	ldr	r4, [r5, #4]
 800e542:	69a3      	ldr	r3, [r4, #24]
 800e544:	60a3      	str	r3, [r4, #8]
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	071a      	lsls	r2, r3, #28
 800e54a:	d52f      	bpl.n	800e5ac <__swbuf_r+0x84>
 800e54c:	6923      	ldr	r3, [r4, #16]
 800e54e:	b36b      	cbz	r3, 800e5ac <__swbuf_r+0x84>
 800e550:	6923      	ldr	r3, [r4, #16]
 800e552:	6820      	ldr	r0, [r4, #0]
 800e554:	1ac0      	subs	r0, r0, r3
 800e556:	6963      	ldr	r3, [r4, #20]
 800e558:	b2f6      	uxtb	r6, r6
 800e55a:	4283      	cmp	r3, r0
 800e55c:	4637      	mov	r7, r6
 800e55e:	dc04      	bgt.n	800e56a <__swbuf_r+0x42>
 800e560:	4621      	mov	r1, r4
 800e562:	4628      	mov	r0, r5
 800e564:	f000 f92e 	bl	800e7c4 <_fflush_r>
 800e568:	bb30      	cbnz	r0, 800e5b8 <__swbuf_r+0x90>
 800e56a:	68a3      	ldr	r3, [r4, #8]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	60a3      	str	r3, [r4, #8]
 800e570:	6823      	ldr	r3, [r4, #0]
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	6022      	str	r2, [r4, #0]
 800e576:	701e      	strb	r6, [r3, #0]
 800e578:	6963      	ldr	r3, [r4, #20]
 800e57a:	3001      	adds	r0, #1
 800e57c:	4283      	cmp	r3, r0
 800e57e:	d004      	beq.n	800e58a <__swbuf_r+0x62>
 800e580:	89a3      	ldrh	r3, [r4, #12]
 800e582:	07db      	lsls	r3, r3, #31
 800e584:	d506      	bpl.n	800e594 <__swbuf_r+0x6c>
 800e586:	2e0a      	cmp	r6, #10
 800e588:	d104      	bne.n	800e594 <__swbuf_r+0x6c>
 800e58a:	4621      	mov	r1, r4
 800e58c:	4628      	mov	r0, r5
 800e58e:	f000 f919 	bl	800e7c4 <_fflush_r>
 800e592:	b988      	cbnz	r0, 800e5b8 <__swbuf_r+0x90>
 800e594:	4638      	mov	r0, r7
 800e596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <__swbuf_r+0x9c>)
 800e59a:	429c      	cmp	r4, r3
 800e59c:	d101      	bne.n	800e5a2 <__swbuf_r+0x7a>
 800e59e:	68ac      	ldr	r4, [r5, #8]
 800e5a0:	e7cf      	b.n	800e542 <__swbuf_r+0x1a>
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <__swbuf_r+0xa0>)
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	bf08      	it	eq
 800e5a8:	68ec      	ldreq	r4, [r5, #12]
 800e5aa:	e7ca      	b.n	800e542 <__swbuf_r+0x1a>
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f000 f80c 	bl	800e5cc <__swsetup_r>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d0cb      	beq.n	800e550 <__swbuf_r+0x28>
 800e5b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e5bc:	e7ea      	b.n	800e594 <__swbuf_r+0x6c>
 800e5be:	bf00      	nop
 800e5c0:	08010464 	.word	0x08010464
 800e5c4:	08010484 	.word	0x08010484
 800e5c8:	08010444 	.word	0x08010444

0800e5cc <__swsetup_r>:
 800e5cc:	4b32      	ldr	r3, [pc, #200]	; (800e698 <__swsetup_r+0xcc>)
 800e5ce:	b570      	push	{r4, r5, r6, lr}
 800e5d0:	681d      	ldr	r5, [r3, #0]
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	b125      	cbz	r5, 800e5e2 <__swsetup_r+0x16>
 800e5d8:	69ab      	ldr	r3, [r5, #24]
 800e5da:	b913      	cbnz	r3, 800e5e2 <__swsetup_r+0x16>
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f000 f985 	bl	800e8ec <__sinit>
 800e5e2:	4b2e      	ldr	r3, [pc, #184]	; (800e69c <__swsetup_r+0xd0>)
 800e5e4:	429c      	cmp	r4, r3
 800e5e6:	d10f      	bne.n	800e608 <__swsetup_r+0x3c>
 800e5e8:	686c      	ldr	r4, [r5, #4]
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5f0:	0719      	lsls	r1, r3, #28
 800e5f2:	d42c      	bmi.n	800e64e <__swsetup_r+0x82>
 800e5f4:	06dd      	lsls	r5, r3, #27
 800e5f6:	d411      	bmi.n	800e61c <__swsetup_r+0x50>
 800e5f8:	2309      	movs	r3, #9
 800e5fa:	6033      	str	r3, [r6, #0]
 800e5fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e600:	81a3      	strh	r3, [r4, #12]
 800e602:	f04f 30ff 	mov.w	r0, #4294967295
 800e606:	e03e      	b.n	800e686 <__swsetup_r+0xba>
 800e608:	4b25      	ldr	r3, [pc, #148]	; (800e6a0 <__swsetup_r+0xd4>)
 800e60a:	429c      	cmp	r4, r3
 800e60c:	d101      	bne.n	800e612 <__swsetup_r+0x46>
 800e60e:	68ac      	ldr	r4, [r5, #8]
 800e610:	e7eb      	b.n	800e5ea <__swsetup_r+0x1e>
 800e612:	4b24      	ldr	r3, [pc, #144]	; (800e6a4 <__swsetup_r+0xd8>)
 800e614:	429c      	cmp	r4, r3
 800e616:	bf08      	it	eq
 800e618:	68ec      	ldreq	r4, [r5, #12]
 800e61a:	e7e6      	b.n	800e5ea <__swsetup_r+0x1e>
 800e61c:	0758      	lsls	r0, r3, #29
 800e61e:	d512      	bpl.n	800e646 <__swsetup_r+0x7a>
 800e620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e622:	b141      	cbz	r1, 800e636 <__swsetup_r+0x6a>
 800e624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e628:	4299      	cmp	r1, r3
 800e62a:	d002      	beq.n	800e632 <__swsetup_r+0x66>
 800e62c:	4630      	mov	r0, r6
 800e62e:	f7ff fc41 	bl	800deb4 <_free_r>
 800e632:	2300      	movs	r3, #0
 800e634:	6363      	str	r3, [r4, #52]	; 0x34
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e63c:	81a3      	strh	r3, [r4, #12]
 800e63e:	2300      	movs	r3, #0
 800e640:	6063      	str	r3, [r4, #4]
 800e642:	6923      	ldr	r3, [r4, #16]
 800e644:	6023      	str	r3, [r4, #0]
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	f043 0308 	orr.w	r3, r3, #8
 800e64c:	81a3      	strh	r3, [r4, #12]
 800e64e:	6923      	ldr	r3, [r4, #16]
 800e650:	b94b      	cbnz	r3, 800e666 <__swsetup_r+0x9a>
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e65c:	d003      	beq.n	800e666 <__swsetup_r+0x9a>
 800e65e:	4621      	mov	r1, r4
 800e660:	4630      	mov	r0, r6
 800e662:	f000 fa09 	bl	800ea78 <__smakebuf_r>
 800e666:	89a0      	ldrh	r0, [r4, #12]
 800e668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e66c:	f010 0301 	ands.w	r3, r0, #1
 800e670:	d00a      	beq.n	800e688 <__swsetup_r+0xbc>
 800e672:	2300      	movs	r3, #0
 800e674:	60a3      	str	r3, [r4, #8]
 800e676:	6963      	ldr	r3, [r4, #20]
 800e678:	425b      	negs	r3, r3
 800e67a:	61a3      	str	r3, [r4, #24]
 800e67c:	6923      	ldr	r3, [r4, #16]
 800e67e:	b943      	cbnz	r3, 800e692 <__swsetup_r+0xc6>
 800e680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e684:	d1ba      	bne.n	800e5fc <__swsetup_r+0x30>
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	0781      	lsls	r1, r0, #30
 800e68a:	bf58      	it	pl
 800e68c:	6963      	ldrpl	r3, [r4, #20]
 800e68e:	60a3      	str	r3, [r4, #8]
 800e690:	e7f4      	b.n	800e67c <__swsetup_r+0xb0>
 800e692:	2000      	movs	r0, #0
 800e694:	e7f7      	b.n	800e686 <__swsetup_r+0xba>
 800e696:	bf00      	nop
 800e698:	20000088 	.word	0x20000088
 800e69c:	08010464 	.word	0x08010464
 800e6a0:	08010484 	.word	0x08010484
 800e6a4:	08010444 	.word	0x08010444

0800e6a8 <abort>:
 800e6a8:	b508      	push	{r3, lr}
 800e6aa:	2006      	movs	r0, #6
 800e6ac:	f000 fa4c 	bl	800eb48 <raise>
 800e6b0:	2001      	movs	r0, #1
 800e6b2:	f7f7 f8fb 	bl	80058ac <_exit>
	...

0800e6b8 <__sflush_r>:
 800e6b8:	898a      	ldrh	r2, [r1, #12]
 800e6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6be:	4605      	mov	r5, r0
 800e6c0:	0710      	lsls	r0, r2, #28
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	d458      	bmi.n	800e778 <__sflush_r+0xc0>
 800e6c6:	684b      	ldr	r3, [r1, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dc05      	bgt.n	800e6d8 <__sflush_r+0x20>
 800e6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dc02      	bgt.n	800e6d8 <__sflush_r+0x20>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6da:	2e00      	cmp	r6, #0
 800e6dc:	d0f9      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6e4:	682f      	ldr	r7, [r5, #0]
 800e6e6:	602b      	str	r3, [r5, #0]
 800e6e8:	d032      	beq.n	800e750 <__sflush_r+0x98>
 800e6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	075a      	lsls	r2, r3, #29
 800e6f0:	d505      	bpl.n	800e6fe <__sflush_r+0x46>
 800e6f2:	6863      	ldr	r3, [r4, #4]
 800e6f4:	1ac0      	subs	r0, r0, r3
 800e6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6f8:	b10b      	cbz	r3, 800e6fe <__sflush_r+0x46>
 800e6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6fc:	1ac0      	subs	r0, r0, r3
 800e6fe:	2300      	movs	r3, #0
 800e700:	4602      	mov	r2, r0
 800e702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e704:	6a21      	ldr	r1, [r4, #32]
 800e706:	4628      	mov	r0, r5
 800e708:	47b0      	blx	r6
 800e70a:	1c43      	adds	r3, r0, #1
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	d106      	bne.n	800e71e <__sflush_r+0x66>
 800e710:	6829      	ldr	r1, [r5, #0]
 800e712:	291d      	cmp	r1, #29
 800e714:	d82c      	bhi.n	800e770 <__sflush_r+0xb8>
 800e716:	4a2a      	ldr	r2, [pc, #168]	; (800e7c0 <__sflush_r+0x108>)
 800e718:	40ca      	lsrs	r2, r1
 800e71a:	07d6      	lsls	r6, r2, #31
 800e71c:	d528      	bpl.n	800e770 <__sflush_r+0xb8>
 800e71e:	2200      	movs	r2, #0
 800e720:	6062      	str	r2, [r4, #4]
 800e722:	04d9      	lsls	r1, r3, #19
 800e724:	6922      	ldr	r2, [r4, #16]
 800e726:	6022      	str	r2, [r4, #0]
 800e728:	d504      	bpl.n	800e734 <__sflush_r+0x7c>
 800e72a:	1c42      	adds	r2, r0, #1
 800e72c:	d101      	bne.n	800e732 <__sflush_r+0x7a>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b903      	cbnz	r3, 800e734 <__sflush_r+0x7c>
 800e732:	6560      	str	r0, [r4, #84]	; 0x54
 800e734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e736:	602f      	str	r7, [r5, #0]
 800e738:	2900      	cmp	r1, #0
 800e73a:	d0ca      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e740:	4299      	cmp	r1, r3
 800e742:	d002      	beq.n	800e74a <__sflush_r+0x92>
 800e744:	4628      	mov	r0, r5
 800e746:	f7ff fbb5 	bl	800deb4 <_free_r>
 800e74a:	2000      	movs	r0, #0
 800e74c:	6360      	str	r0, [r4, #52]	; 0x34
 800e74e:	e7c1      	b.n	800e6d4 <__sflush_r+0x1c>
 800e750:	6a21      	ldr	r1, [r4, #32]
 800e752:	2301      	movs	r3, #1
 800e754:	4628      	mov	r0, r5
 800e756:	47b0      	blx	r6
 800e758:	1c41      	adds	r1, r0, #1
 800e75a:	d1c7      	bne.n	800e6ec <__sflush_r+0x34>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d0c4      	beq.n	800e6ec <__sflush_r+0x34>
 800e762:	2b1d      	cmp	r3, #29
 800e764:	d001      	beq.n	800e76a <__sflush_r+0xb2>
 800e766:	2b16      	cmp	r3, #22
 800e768:	d101      	bne.n	800e76e <__sflush_r+0xb6>
 800e76a:	602f      	str	r7, [r5, #0]
 800e76c:	e7b1      	b.n	800e6d2 <__sflush_r+0x1a>
 800e76e:	89a3      	ldrh	r3, [r4, #12]
 800e770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e774:	81a3      	strh	r3, [r4, #12]
 800e776:	e7ad      	b.n	800e6d4 <__sflush_r+0x1c>
 800e778:	690f      	ldr	r7, [r1, #16]
 800e77a:	2f00      	cmp	r7, #0
 800e77c:	d0a9      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e77e:	0793      	lsls	r3, r2, #30
 800e780:	680e      	ldr	r6, [r1, #0]
 800e782:	bf08      	it	eq
 800e784:	694b      	ldreq	r3, [r1, #20]
 800e786:	600f      	str	r7, [r1, #0]
 800e788:	bf18      	it	ne
 800e78a:	2300      	movne	r3, #0
 800e78c:	eba6 0807 	sub.w	r8, r6, r7
 800e790:	608b      	str	r3, [r1, #8]
 800e792:	f1b8 0f00 	cmp.w	r8, #0
 800e796:	dd9c      	ble.n	800e6d2 <__sflush_r+0x1a>
 800e798:	6a21      	ldr	r1, [r4, #32]
 800e79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e79c:	4643      	mov	r3, r8
 800e79e:	463a      	mov	r2, r7
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b0      	blx	r6
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	dc06      	bgt.n	800e7b6 <__sflush_r+0xfe>
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ae:	81a3      	strh	r3, [r4, #12]
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	e78e      	b.n	800e6d4 <__sflush_r+0x1c>
 800e7b6:	4407      	add	r7, r0
 800e7b8:	eba8 0800 	sub.w	r8, r8, r0
 800e7bc:	e7e9      	b.n	800e792 <__sflush_r+0xda>
 800e7be:	bf00      	nop
 800e7c0:	20400001 	.word	0x20400001

0800e7c4 <_fflush_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	690b      	ldr	r3, [r1, #16]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	b913      	cbnz	r3, 800e7d4 <_fflush_r+0x10>
 800e7ce:	2500      	movs	r5, #0
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	b118      	cbz	r0, 800e7de <_fflush_r+0x1a>
 800e7d6:	6983      	ldr	r3, [r0, #24]
 800e7d8:	b90b      	cbnz	r3, 800e7de <_fflush_r+0x1a>
 800e7da:	f000 f887 	bl	800e8ec <__sinit>
 800e7de:	4b14      	ldr	r3, [pc, #80]	; (800e830 <_fflush_r+0x6c>)
 800e7e0:	429c      	cmp	r4, r3
 800e7e2:	d11b      	bne.n	800e81c <_fflush_r+0x58>
 800e7e4:	686c      	ldr	r4, [r5, #4]
 800e7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0ef      	beq.n	800e7ce <_fflush_r+0xa>
 800e7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7f0:	07d0      	lsls	r0, r2, #31
 800e7f2:	d404      	bmi.n	800e7fe <_fflush_r+0x3a>
 800e7f4:	0599      	lsls	r1, r3, #22
 800e7f6:	d402      	bmi.n	800e7fe <_fflush_r+0x3a>
 800e7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7fa:	f000 f915 	bl	800ea28 <__retarget_lock_acquire_recursive>
 800e7fe:	4628      	mov	r0, r5
 800e800:	4621      	mov	r1, r4
 800e802:	f7ff ff59 	bl	800e6b8 <__sflush_r>
 800e806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e808:	07da      	lsls	r2, r3, #31
 800e80a:	4605      	mov	r5, r0
 800e80c:	d4e0      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	059b      	lsls	r3, r3, #22
 800e812:	d4dd      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e816:	f000 f908 	bl	800ea2a <__retarget_lock_release_recursive>
 800e81a:	e7d9      	b.n	800e7d0 <_fflush_r+0xc>
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <_fflush_r+0x70>)
 800e81e:	429c      	cmp	r4, r3
 800e820:	d101      	bne.n	800e826 <_fflush_r+0x62>
 800e822:	68ac      	ldr	r4, [r5, #8]
 800e824:	e7df      	b.n	800e7e6 <_fflush_r+0x22>
 800e826:	4b04      	ldr	r3, [pc, #16]	; (800e838 <_fflush_r+0x74>)
 800e828:	429c      	cmp	r4, r3
 800e82a:	bf08      	it	eq
 800e82c:	68ec      	ldreq	r4, [r5, #12]
 800e82e:	e7da      	b.n	800e7e6 <_fflush_r+0x22>
 800e830:	08010464 	.word	0x08010464
 800e834:	08010484 	.word	0x08010484
 800e838:	08010444 	.word	0x08010444

0800e83c <std>:
 800e83c:	2300      	movs	r3, #0
 800e83e:	b510      	push	{r4, lr}
 800e840:	4604      	mov	r4, r0
 800e842:	e9c0 3300 	strd	r3, r3, [r0]
 800e846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e84a:	6083      	str	r3, [r0, #8]
 800e84c:	8181      	strh	r1, [r0, #12]
 800e84e:	6643      	str	r3, [r0, #100]	; 0x64
 800e850:	81c2      	strh	r2, [r0, #14]
 800e852:	6183      	str	r3, [r0, #24]
 800e854:	4619      	mov	r1, r3
 800e856:	2208      	movs	r2, #8
 800e858:	305c      	adds	r0, #92	; 0x5c
 800e85a:	f7fd fb77 	bl	800bf4c <memset>
 800e85e:	4b05      	ldr	r3, [pc, #20]	; (800e874 <std+0x38>)
 800e860:	6263      	str	r3, [r4, #36]	; 0x24
 800e862:	4b05      	ldr	r3, [pc, #20]	; (800e878 <std+0x3c>)
 800e864:	62a3      	str	r3, [r4, #40]	; 0x28
 800e866:	4b05      	ldr	r3, [pc, #20]	; (800e87c <std+0x40>)
 800e868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e86a:	4b05      	ldr	r3, [pc, #20]	; (800e880 <std+0x44>)
 800e86c:	6224      	str	r4, [r4, #32]
 800e86e:	6323      	str	r3, [r4, #48]	; 0x30
 800e870:	bd10      	pop	{r4, pc}
 800e872:	bf00      	nop
 800e874:	0800eb81 	.word	0x0800eb81
 800e878:	0800eba3 	.word	0x0800eba3
 800e87c:	0800ebdb 	.word	0x0800ebdb
 800e880:	0800ebff 	.word	0x0800ebff

0800e884 <_cleanup_r>:
 800e884:	4901      	ldr	r1, [pc, #4]	; (800e88c <_cleanup_r+0x8>)
 800e886:	f000 b8af 	b.w	800e9e8 <_fwalk_reent>
 800e88a:	bf00      	nop
 800e88c:	0800e7c5 	.word	0x0800e7c5

0800e890 <__sfmoreglue>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	2268      	movs	r2, #104	; 0x68
 800e894:	1e4d      	subs	r5, r1, #1
 800e896:	4355      	muls	r5, r2
 800e898:	460e      	mov	r6, r1
 800e89a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e89e:	f7ff fa15 	bl	800dccc <_malloc_r>
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	b140      	cbz	r0, 800e8b8 <__sfmoreglue+0x28>
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	60a0      	str	r0, [r4, #8]
 800e8b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8b4:	f7fd fb4a 	bl	800bf4c <memset>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}

0800e8bc <__sfp_lock_acquire>:
 800e8bc:	4801      	ldr	r0, [pc, #4]	; (800e8c4 <__sfp_lock_acquire+0x8>)
 800e8be:	f000 b8b3 	b.w	800ea28 <__retarget_lock_acquire_recursive>
 800e8c2:	bf00      	nop
 800e8c4:	200008c1 	.word	0x200008c1

0800e8c8 <__sfp_lock_release>:
 800e8c8:	4801      	ldr	r0, [pc, #4]	; (800e8d0 <__sfp_lock_release+0x8>)
 800e8ca:	f000 b8ae 	b.w	800ea2a <__retarget_lock_release_recursive>
 800e8ce:	bf00      	nop
 800e8d0:	200008c1 	.word	0x200008c1

0800e8d4 <__sinit_lock_acquire>:
 800e8d4:	4801      	ldr	r0, [pc, #4]	; (800e8dc <__sinit_lock_acquire+0x8>)
 800e8d6:	f000 b8a7 	b.w	800ea28 <__retarget_lock_acquire_recursive>
 800e8da:	bf00      	nop
 800e8dc:	200008c2 	.word	0x200008c2

0800e8e0 <__sinit_lock_release>:
 800e8e0:	4801      	ldr	r0, [pc, #4]	; (800e8e8 <__sinit_lock_release+0x8>)
 800e8e2:	f000 b8a2 	b.w	800ea2a <__retarget_lock_release_recursive>
 800e8e6:	bf00      	nop
 800e8e8:	200008c2 	.word	0x200008c2

0800e8ec <__sinit>:
 800e8ec:	b510      	push	{r4, lr}
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	f7ff fff0 	bl	800e8d4 <__sinit_lock_acquire>
 800e8f4:	69a3      	ldr	r3, [r4, #24]
 800e8f6:	b11b      	cbz	r3, 800e900 <__sinit+0x14>
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f7ff bff0 	b.w	800e8e0 <__sinit_lock_release>
 800e900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e904:	6523      	str	r3, [r4, #80]	; 0x50
 800e906:	4b13      	ldr	r3, [pc, #76]	; (800e954 <__sinit+0x68>)
 800e908:	4a13      	ldr	r2, [pc, #76]	; (800e958 <__sinit+0x6c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e90e:	42a3      	cmp	r3, r4
 800e910:	bf04      	itt	eq
 800e912:	2301      	moveq	r3, #1
 800e914:	61a3      	streq	r3, [r4, #24]
 800e916:	4620      	mov	r0, r4
 800e918:	f000 f820 	bl	800e95c <__sfp>
 800e91c:	6060      	str	r0, [r4, #4]
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 f81c 	bl	800e95c <__sfp>
 800e924:	60a0      	str	r0, [r4, #8]
 800e926:	4620      	mov	r0, r4
 800e928:	f000 f818 	bl	800e95c <__sfp>
 800e92c:	2200      	movs	r2, #0
 800e92e:	60e0      	str	r0, [r4, #12]
 800e930:	2104      	movs	r1, #4
 800e932:	6860      	ldr	r0, [r4, #4]
 800e934:	f7ff ff82 	bl	800e83c <std>
 800e938:	68a0      	ldr	r0, [r4, #8]
 800e93a:	2201      	movs	r2, #1
 800e93c:	2109      	movs	r1, #9
 800e93e:	f7ff ff7d 	bl	800e83c <std>
 800e942:	68e0      	ldr	r0, [r4, #12]
 800e944:	2202      	movs	r2, #2
 800e946:	2112      	movs	r1, #18
 800e948:	f7ff ff78 	bl	800e83c <std>
 800e94c:	2301      	movs	r3, #1
 800e94e:	61a3      	str	r3, [r4, #24]
 800e950:	e7d2      	b.n	800e8f8 <__sinit+0xc>
 800e952:	bf00      	nop
 800e954:	08010078 	.word	0x08010078
 800e958:	0800e885 	.word	0x0800e885

0800e95c <__sfp>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	4607      	mov	r7, r0
 800e960:	f7ff ffac 	bl	800e8bc <__sfp_lock_acquire>
 800e964:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <__sfp+0x84>)
 800e966:	681e      	ldr	r6, [r3, #0]
 800e968:	69b3      	ldr	r3, [r6, #24]
 800e96a:	b913      	cbnz	r3, 800e972 <__sfp+0x16>
 800e96c:	4630      	mov	r0, r6
 800e96e:	f7ff ffbd 	bl	800e8ec <__sinit>
 800e972:	3648      	adds	r6, #72	; 0x48
 800e974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e978:	3b01      	subs	r3, #1
 800e97a:	d503      	bpl.n	800e984 <__sfp+0x28>
 800e97c:	6833      	ldr	r3, [r6, #0]
 800e97e:	b30b      	cbz	r3, 800e9c4 <__sfp+0x68>
 800e980:	6836      	ldr	r6, [r6, #0]
 800e982:	e7f7      	b.n	800e974 <__sfp+0x18>
 800e984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e988:	b9d5      	cbnz	r5, 800e9c0 <__sfp+0x64>
 800e98a:	4b16      	ldr	r3, [pc, #88]	; (800e9e4 <__sfp+0x88>)
 800e98c:	60e3      	str	r3, [r4, #12]
 800e98e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e992:	6665      	str	r5, [r4, #100]	; 0x64
 800e994:	f000 f847 	bl	800ea26 <__retarget_lock_init_recursive>
 800e998:	f7ff ff96 	bl	800e8c8 <__sfp_lock_release>
 800e99c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9a4:	6025      	str	r5, [r4, #0]
 800e9a6:	61a5      	str	r5, [r4, #24]
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9b0:	f7fd facc 	bl	800bf4c <memset>
 800e9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9bc:	4620      	mov	r0, r4
 800e9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c0:	3468      	adds	r4, #104	; 0x68
 800e9c2:	e7d9      	b.n	800e978 <__sfp+0x1c>
 800e9c4:	2104      	movs	r1, #4
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	f7ff ff62 	bl	800e890 <__sfmoreglue>
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	6030      	str	r0, [r6, #0]
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d1d5      	bne.n	800e980 <__sfp+0x24>
 800e9d4:	f7ff ff78 	bl	800e8c8 <__sfp_lock_release>
 800e9d8:	230c      	movs	r3, #12
 800e9da:	603b      	str	r3, [r7, #0]
 800e9dc:	e7ee      	b.n	800e9bc <__sfp+0x60>
 800e9de:	bf00      	nop
 800e9e0:	08010078 	.word	0x08010078
 800e9e4:	ffff0001 	.word	0xffff0001

0800e9e8 <_fwalk_reent>:
 800e9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	4688      	mov	r8, r1
 800e9f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e9f4:	2700      	movs	r7, #0
 800e9f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e9fa:	f1b9 0901 	subs.w	r9, r9, #1
 800e9fe:	d505      	bpl.n	800ea0c <_fwalk_reent+0x24>
 800ea00:	6824      	ldr	r4, [r4, #0]
 800ea02:	2c00      	cmp	r4, #0
 800ea04:	d1f7      	bne.n	800e9f6 <_fwalk_reent+0xe>
 800ea06:	4638      	mov	r0, r7
 800ea08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea0c:	89ab      	ldrh	r3, [r5, #12]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d907      	bls.n	800ea22 <_fwalk_reent+0x3a>
 800ea12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea16:	3301      	adds	r3, #1
 800ea18:	d003      	beq.n	800ea22 <_fwalk_reent+0x3a>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	47c0      	blx	r8
 800ea20:	4307      	orrs	r7, r0
 800ea22:	3568      	adds	r5, #104	; 0x68
 800ea24:	e7e9      	b.n	800e9fa <_fwalk_reent+0x12>

0800ea26 <__retarget_lock_init_recursive>:
 800ea26:	4770      	bx	lr

0800ea28 <__retarget_lock_acquire_recursive>:
 800ea28:	4770      	bx	lr

0800ea2a <__retarget_lock_release_recursive>:
 800ea2a:	4770      	bx	lr

0800ea2c <__swhatbuf_r>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	460e      	mov	r6, r1
 800ea30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea34:	2900      	cmp	r1, #0
 800ea36:	b096      	sub	sp, #88	; 0x58
 800ea38:	4614      	mov	r4, r2
 800ea3a:	461d      	mov	r5, r3
 800ea3c:	da08      	bge.n	800ea50 <__swhatbuf_r+0x24>
 800ea3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	602a      	str	r2, [r5, #0]
 800ea46:	061a      	lsls	r2, r3, #24
 800ea48:	d410      	bmi.n	800ea6c <__swhatbuf_r+0x40>
 800ea4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea4e:	e00e      	b.n	800ea6e <__swhatbuf_r+0x42>
 800ea50:	466a      	mov	r2, sp
 800ea52:	f000 f8fb 	bl	800ec4c <_fstat_r>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	dbf1      	blt.n	800ea3e <__swhatbuf_r+0x12>
 800ea5a:	9a01      	ldr	r2, [sp, #4]
 800ea5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea64:	425a      	negs	r2, r3
 800ea66:	415a      	adcs	r2, r3
 800ea68:	602a      	str	r2, [r5, #0]
 800ea6a:	e7ee      	b.n	800ea4a <__swhatbuf_r+0x1e>
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	2000      	movs	r0, #0
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	b016      	add	sp, #88	; 0x58
 800ea74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea78 <__smakebuf_r>:
 800ea78:	898b      	ldrh	r3, [r1, #12]
 800ea7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea7c:	079d      	lsls	r5, r3, #30
 800ea7e:	4606      	mov	r6, r0
 800ea80:	460c      	mov	r4, r1
 800ea82:	d507      	bpl.n	800ea94 <__smakebuf_r+0x1c>
 800ea84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	6163      	str	r3, [r4, #20]
 800ea90:	b002      	add	sp, #8
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
 800ea94:	ab01      	add	r3, sp, #4
 800ea96:	466a      	mov	r2, sp
 800ea98:	f7ff ffc8 	bl	800ea2c <__swhatbuf_r>
 800ea9c:	9900      	ldr	r1, [sp, #0]
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f7ff f913 	bl	800dccc <_malloc_r>
 800eaa6:	b948      	cbnz	r0, 800eabc <__smakebuf_r+0x44>
 800eaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaac:	059a      	lsls	r2, r3, #22
 800eaae:	d4ef      	bmi.n	800ea90 <__smakebuf_r+0x18>
 800eab0:	f023 0303 	bic.w	r3, r3, #3
 800eab4:	f043 0302 	orr.w	r3, r3, #2
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	e7e3      	b.n	800ea84 <__smakebuf_r+0xc>
 800eabc:	4b0d      	ldr	r3, [pc, #52]	; (800eaf4 <__smakebuf_r+0x7c>)
 800eabe:	62b3      	str	r3, [r6, #40]	; 0x28
 800eac0:	89a3      	ldrh	r3, [r4, #12]
 800eac2:	6020      	str	r0, [r4, #0]
 800eac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac8:	81a3      	strh	r3, [r4, #12]
 800eaca:	9b00      	ldr	r3, [sp, #0]
 800eacc:	6163      	str	r3, [r4, #20]
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	6120      	str	r0, [r4, #16]
 800ead2:	b15b      	cbz	r3, 800eaec <__smakebuf_r+0x74>
 800ead4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ead8:	4630      	mov	r0, r6
 800eada:	f000 f8c9 	bl	800ec70 <_isatty_r>
 800eade:	b128      	cbz	r0, 800eaec <__smakebuf_r+0x74>
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	f043 0301 	orr.w	r3, r3, #1
 800eaea:	81a3      	strh	r3, [r4, #12]
 800eaec:	89a0      	ldrh	r0, [r4, #12]
 800eaee:	4305      	orrs	r5, r0
 800eaf0:	81a5      	strh	r5, [r4, #12]
 800eaf2:	e7cd      	b.n	800ea90 <__smakebuf_r+0x18>
 800eaf4:	0800e885 	.word	0x0800e885

0800eaf8 <_raise_r>:
 800eaf8:	291f      	cmp	r1, #31
 800eafa:	b538      	push	{r3, r4, r5, lr}
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	d904      	bls.n	800eb0c <_raise_r+0x14>
 800eb02:	2316      	movs	r3, #22
 800eb04:	6003      	str	r3, [r0, #0]
 800eb06:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb0e:	b112      	cbz	r2, 800eb16 <_raise_r+0x1e>
 800eb10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb14:	b94b      	cbnz	r3, 800eb2a <_raise_r+0x32>
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 f830 	bl	800eb7c <_getpid_r>
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	4601      	mov	r1, r0
 800eb20:	4620      	mov	r0, r4
 800eb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb26:	f000 b817 	b.w	800eb58 <_kill_r>
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d00a      	beq.n	800eb44 <_raise_r+0x4c>
 800eb2e:	1c59      	adds	r1, r3, #1
 800eb30:	d103      	bne.n	800eb3a <_raise_r+0x42>
 800eb32:	2316      	movs	r3, #22
 800eb34:	6003      	str	r3, [r0, #0]
 800eb36:	2001      	movs	r0, #1
 800eb38:	e7e7      	b.n	800eb0a <_raise_r+0x12>
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb40:	4628      	mov	r0, r5
 800eb42:	4798      	blx	r3
 800eb44:	2000      	movs	r0, #0
 800eb46:	e7e0      	b.n	800eb0a <_raise_r+0x12>

0800eb48 <raise>:
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <raise+0xc>)
 800eb4a:	4601      	mov	r1, r0
 800eb4c:	6818      	ldr	r0, [r3, #0]
 800eb4e:	f7ff bfd3 	b.w	800eaf8 <_raise_r>
 800eb52:	bf00      	nop
 800eb54:	20000088 	.word	0x20000088

0800eb58 <_kill_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4d07      	ldr	r5, [pc, #28]	; (800eb78 <_kill_r+0x20>)
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4604      	mov	r4, r0
 800eb60:	4608      	mov	r0, r1
 800eb62:	4611      	mov	r1, r2
 800eb64:	602b      	str	r3, [r5, #0]
 800eb66:	f7f6 fe91 	bl	800588c <_kill>
 800eb6a:	1c43      	adds	r3, r0, #1
 800eb6c:	d102      	bne.n	800eb74 <_kill_r+0x1c>
 800eb6e:	682b      	ldr	r3, [r5, #0]
 800eb70:	b103      	cbz	r3, 800eb74 <_kill_r+0x1c>
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	bd38      	pop	{r3, r4, r5, pc}
 800eb76:	bf00      	nop
 800eb78:	200008bc 	.word	0x200008bc

0800eb7c <_getpid_r>:
 800eb7c:	f7f6 be7e 	b.w	800587c <_getpid>

0800eb80 <__sread>:
 800eb80:	b510      	push	{r4, lr}
 800eb82:	460c      	mov	r4, r1
 800eb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb88:	f000 f894 	bl	800ecb4 <_read_r>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	bfab      	itete	ge
 800eb90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb92:	89a3      	ldrhlt	r3, [r4, #12]
 800eb94:	181b      	addge	r3, r3, r0
 800eb96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb9a:	bfac      	ite	ge
 800eb9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb9e:	81a3      	strhlt	r3, [r4, #12]
 800eba0:	bd10      	pop	{r4, pc}

0800eba2 <__swrite>:
 800eba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba6:	461f      	mov	r7, r3
 800eba8:	898b      	ldrh	r3, [r1, #12]
 800ebaa:	05db      	lsls	r3, r3, #23
 800ebac:	4605      	mov	r5, r0
 800ebae:	460c      	mov	r4, r1
 800ebb0:	4616      	mov	r6, r2
 800ebb2:	d505      	bpl.n	800ebc0 <__swrite+0x1e>
 800ebb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb8:	2302      	movs	r3, #2
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f000 f868 	bl	800ec90 <_lseek_r>
 800ebc0:	89a3      	ldrh	r3, [r4, #12]
 800ebc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	4632      	mov	r2, r6
 800ebce:	463b      	mov	r3, r7
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd6:	f000 b817 	b.w	800ec08 <_write_r>

0800ebda <__sseek>:
 800ebda:	b510      	push	{r4, lr}
 800ebdc:	460c      	mov	r4, r1
 800ebde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe2:	f000 f855 	bl	800ec90 <_lseek_r>
 800ebe6:	1c43      	adds	r3, r0, #1
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	bf15      	itete	ne
 800ebec:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebf6:	81a3      	strheq	r3, [r4, #12]
 800ebf8:	bf18      	it	ne
 800ebfa:	81a3      	strhne	r3, [r4, #12]
 800ebfc:	bd10      	pop	{r4, pc}

0800ebfe <__sclose>:
 800ebfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec02:	f000 b813 	b.w	800ec2c <_close_r>
	...

0800ec08 <_write_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d07      	ldr	r5, [pc, #28]	; (800ec28 <_write_r+0x20>)
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	4608      	mov	r0, r1
 800ec10:	4611      	mov	r1, r2
 800ec12:	2200      	movs	r2, #0
 800ec14:	602a      	str	r2, [r5, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	f7f6 fe6f 	bl	80058fa <_write>
 800ec1c:	1c43      	adds	r3, r0, #1
 800ec1e:	d102      	bne.n	800ec26 <_write_r+0x1e>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	b103      	cbz	r3, 800ec26 <_write_r+0x1e>
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	200008bc 	.word	0x200008bc

0800ec2c <_close_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4d06      	ldr	r5, [pc, #24]	; (800ec48 <_close_r+0x1c>)
 800ec30:	2300      	movs	r3, #0
 800ec32:	4604      	mov	r4, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	f7f6 fe7b 	bl	8005932 <_close>
 800ec3c:	1c43      	adds	r3, r0, #1
 800ec3e:	d102      	bne.n	800ec46 <_close_r+0x1a>
 800ec40:	682b      	ldr	r3, [r5, #0]
 800ec42:	b103      	cbz	r3, 800ec46 <_close_r+0x1a>
 800ec44:	6023      	str	r3, [r4, #0]
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	200008bc 	.word	0x200008bc

0800ec4c <_fstat_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4d07      	ldr	r5, [pc, #28]	; (800ec6c <_fstat_r+0x20>)
 800ec50:	2300      	movs	r3, #0
 800ec52:	4604      	mov	r4, r0
 800ec54:	4608      	mov	r0, r1
 800ec56:	4611      	mov	r1, r2
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	f7f6 fe76 	bl	800594a <_fstat>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	d102      	bne.n	800ec68 <_fstat_r+0x1c>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b103      	cbz	r3, 800ec68 <_fstat_r+0x1c>
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	bd38      	pop	{r3, r4, r5, pc}
 800ec6a:	bf00      	nop
 800ec6c:	200008bc 	.word	0x200008bc

0800ec70 <_isatty_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	4d06      	ldr	r5, [pc, #24]	; (800ec8c <_isatty_r+0x1c>)
 800ec74:	2300      	movs	r3, #0
 800ec76:	4604      	mov	r4, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	f7f6 fe75 	bl	800596a <_isatty>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_isatty_r+0x1a>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_isatty_r+0x1a>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	200008bc 	.word	0x200008bc

0800ec90 <_lseek_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d07      	ldr	r5, [pc, #28]	; (800ecb0 <_lseek_r+0x20>)
 800ec94:	4604      	mov	r4, r0
 800ec96:	4608      	mov	r0, r1
 800ec98:	4611      	mov	r1, r2
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	602a      	str	r2, [r5, #0]
 800ec9e:	461a      	mov	r2, r3
 800eca0:	f7f6 fe6e 	bl	8005980 <_lseek>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_lseek_r+0x1e>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_lseek_r+0x1e>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	200008bc 	.word	0x200008bc

0800ecb4 <_read_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	4d07      	ldr	r5, [pc, #28]	; (800ecd4 <_read_r+0x20>)
 800ecb8:	4604      	mov	r4, r0
 800ecba:	4608      	mov	r0, r1
 800ecbc:	4611      	mov	r1, r2
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	602a      	str	r2, [r5, #0]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f7f6 fdfc 	bl	80058c0 <_read>
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	d102      	bne.n	800ecd2 <_read_r+0x1e>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	b103      	cbz	r3, 800ecd2 <_read_r+0x1e>
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	bd38      	pop	{r3, r4, r5, pc}
 800ecd4:	200008bc 	.word	0x200008bc

0800ecd8 <asin>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	ed2d 8b02 	vpush	{d8}
 800ecde:	ec55 4b10 	vmov	r4, r5, d0
 800ece2:	f000 f8c9 	bl	800ee78 <__ieee754_asin>
 800ece6:	4622      	mov	r2, r4
 800ece8:	462b      	mov	r3, r5
 800ecea:	4620      	mov	r0, r4
 800ecec:	4629      	mov	r1, r5
 800ecee:	eeb0 8a40 	vmov.f32	s16, s0
 800ecf2:	eef0 8a60 	vmov.f32	s17, s1
 800ecf6:	f7f1 ff21 	bl	8000b3c <__aeabi_dcmpun>
 800ecfa:	b9a8      	cbnz	r0, 800ed28 <asin+0x50>
 800ecfc:	ec45 4b10 	vmov	d0, r4, r5
 800ed00:	f001 f8de 	bl	800fec0 <fabs>
 800ed04:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <asin+0x60>)
 800ed06:	ec51 0b10 	vmov	r0, r1, d0
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f7f1 ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 800ed10:	b150      	cbz	r0, 800ed28 <asin+0x50>
 800ed12:	f7fd f8f1 	bl	800bef8 <__errno>
 800ed16:	ecbd 8b02 	vpop	{d8}
 800ed1a:	2321      	movs	r3, #33	; 0x21
 800ed1c:	6003      	str	r3, [r0, #0]
 800ed1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed22:	4806      	ldr	r0, [pc, #24]	; (800ed3c <asin+0x64>)
 800ed24:	f7ff b848 	b.w	800ddb8 <nan>
 800ed28:	eeb0 0a48 	vmov.f32	s0, s16
 800ed2c:	eef0 0a68 	vmov.f32	s1, s17
 800ed30:	ecbd 8b02 	vpop	{d8}
 800ed34:	bd38      	pop	{r3, r4, r5, pc}
 800ed36:	bf00      	nop
 800ed38:	3ff00000 	.word	0x3ff00000
 800ed3c:	0801030f 	.word	0x0801030f

0800ed40 <pow>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	ed2d 8b02 	vpush	{d8}
 800ed46:	eeb0 8a40 	vmov.f32	s16, s0
 800ed4a:	eef0 8a60 	vmov.f32	s17, s1
 800ed4e:	ec55 4b11 	vmov	r4, r5, d1
 800ed52:	f000 faa5 	bl	800f2a0 <__ieee754_pow>
 800ed56:	4622      	mov	r2, r4
 800ed58:	462b      	mov	r3, r5
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	ec57 6b10 	vmov	r6, r7, d0
 800ed62:	f7f1 feeb 	bl	8000b3c <__aeabi_dcmpun>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d13b      	bne.n	800ede2 <pow+0xa2>
 800ed6a:	ec51 0b18 	vmov	r0, r1, d8
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2300      	movs	r3, #0
 800ed72:	f7f1 feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed76:	b1b8      	cbz	r0, 800eda8 <pow+0x68>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	f7f1 feaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d146      	bne.n	800ee16 <pow+0xd6>
 800ed88:	ec45 4b10 	vmov	d0, r4, r5
 800ed8c:	f001 f8a1 	bl	800fed2 <finite>
 800ed90:	b338      	cbz	r0, 800ede2 <pow+0xa2>
 800ed92:	2200      	movs	r2, #0
 800ed94:	2300      	movs	r3, #0
 800ed96:	4620      	mov	r0, r4
 800ed98:	4629      	mov	r1, r5
 800ed9a:	f7f1 fea7 	bl	8000aec <__aeabi_dcmplt>
 800ed9e:	b300      	cbz	r0, 800ede2 <pow+0xa2>
 800eda0:	f7fd f8aa 	bl	800bef8 <__errno>
 800eda4:	2322      	movs	r3, #34	; 0x22
 800eda6:	e01b      	b.n	800ede0 <pow+0xa0>
 800eda8:	ec47 6b10 	vmov	d0, r6, r7
 800edac:	f001 f891 	bl	800fed2 <finite>
 800edb0:	b9e0      	cbnz	r0, 800edec <pow+0xac>
 800edb2:	eeb0 0a48 	vmov.f32	s0, s16
 800edb6:	eef0 0a68 	vmov.f32	s1, s17
 800edba:	f001 f88a 	bl	800fed2 <finite>
 800edbe:	b1a8      	cbz	r0, 800edec <pow+0xac>
 800edc0:	ec45 4b10 	vmov	d0, r4, r5
 800edc4:	f001 f885 	bl	800fed2 <finite>
 800edc8:	b180      	cbz	r0, 800edec <pow+0xac>
 800edca:	4632      	mov	r2, r6
 800edcc:	463b      	mov	r3, r7
 800edce:	4630      	mov	r0, r6
 800edd0:	4639      	mov	r1, r7
 800edd2:	f7f1 feb3 	bl	8000b3c <__aeabi_dcmpun>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0e2      	beq.n	800eda0 <pow+0x60>
 800edda:	f7fd f88d 	bl	800bef8 <__errno>
 800edde:	2321      	movs	r3, #33	; 0x21
 800ede0:	6003      	str	r3, [r0, #0]
 800ede2:	ecbd 8b02 	vpop	{d8}
 800ede6:	ec47 6b10 	vmov	d0, r6, r7
 800edea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edec:	2200      	movs	r2, #0
 800edee:	2300      	movs	r3, #0
 800edf0:	4630      	mov	r0, r6
 800edf2:	4639      	mov	r1, r7
 800edf4:	f7f1 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d0f2      	beq.n	800ede2 <pow+0xa2>
 800edfc:	eeb0 0a48 	vmov.f32	s0, s16
 800ee00:	eef0 0a68 	vmov.f32	s1, s17
 800ee04:	f001 f865 	bl	800fed2 <finite>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d0ea      	beq.n	800ede2 <pow+0xa2>
 800ee0c:	ec45 4b10 	vmov	d0, r4, r5
 800ee10:	f001 f85f 	bl	800fed2 <finite>
 800ee14:	e7c3      	b.n	800ed9e <pow+0x5e>
 800ee16:	4f01      	ldr	r7, [pc, #4]	; (800ee1c <pow+0xdc>)
 800ee18:	2600      	movs	r6, #0
 800ee1a:	e7e2      	b.n	800ede2 <pow+0xa2>
 800ee1c:	3ff00000 	.word	0x3ff00000

0800ee20 <sqrt>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	ed2d 8b02 	vpush	{d8}
 800ee26:	ec55 4b10 	vmov	r4, r5, d0
 800ee2a:	f000 ff67 	bl	800fcfc <__ieee754_sqrt>
 800ee2e:	4622      	mov	r2, r4
 800ee30:	462b      	mov	r3, r5
 800ee32:	4620      	mov	r0, r4
 800ee34:	4629      	mov	r1, r5
 800ee36:	eeb0 8a40 	vmov.f32	s16, s0
 800ee3a:	eef0 8a60 	vmov.f32	s17, s1
 800ee3e:	f7f1 fe7d 	bl	8000b3c <__aeabi_dcmpun>
 800ee42:	b990      	cbnz	r0, 800ee6a <sqrt+0x4a>
 800ee44:	2200      	movs	r2, #0
 800ee46:	2300      	movs	r3, #0
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f7f1 fe4e 	bl	8000aec <__aeabi_dcmplt>
 800ee50:	b158      	cbz	r0, 800ee6a <sqrt+0x4a>
 800ee52:	f7fd f851 	bl	800bef8 <__errno>
 800ee56:	2321      	movs	r3, #33	; 0x21
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4610      	mov	r0, r2
 800ee60:	4619      	mov	r1, r3
 800ee62:	f7f1 fcfb 	bl	800085c <__aeabi_ddiv>
 800ee66:	ec41 0b18 	vmov	d8, r0, r1
 800ee6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee6e:	eef0 0a68 	vmov.f32	s1, s17
 800ee72:	ecbd 8b02 	vpop	{d8}
 800ee76:	bd38      	pop	{r3, r4, r5, pc}

0800ee78 <__ieee754_asin>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	ed2d 8b04 	vpush	{d8-d9}
 800ee80:	ec55 4b10 	vmov	r4, r5, d0
 800ee84:	4bcc      	ldr	r3, [pc, #816]	; (800f1b8 <__ieee754_asin+0x340>)
 800ee86:	b083      	sub	sp, #12
 800ee88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ee8c:	4598      	cmp	r8, r3
 800ee8e:	9501      	str	r5, [sp, #4]
 800ee90:	dd35      	ble.n	800eefe <__ieee754_asin+0x86>
 800ee92:	ee10 3a10 	vmov	r3, s0
 800ee96:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800ee9a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800ee9e:	ea58 0303 	orrs.w	r3, r8, r3
 800eea2:	d117      	bne.n	800eed4 <__ieee754_asin+0x5c>
 800eea4:	a3aa      	add	r3, pc, #680	; (adr r3, 800f150 <__ieee754_asin+0x2d8>)
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	ee10 0a10 	vmov	r0, s0
 800eeae:	4629      	mov	r1, r5
 800eeb0:	f7f1 fbaa 	bl	8000608 <__aeabi_dmul>
 800eeb4:	a3a8      	add	r3, pc, #672	; (adr r3, 800f158 <__ieee754_asin+0x2e0>)
 800eeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeba:	4606      	mov	r6, r0
 800eebc:	460f      	mov	r7, r1
 800eebe:	4620      	mov	r0, r4
 800eec0:	4629      	mov	r1, r5
 800eec2:	f7f1 fba1 	bl	8000608 <__aeabi_dmul>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4630      	mov	r0, r6
 800eecc:	4639      	mov	r1, r7
 800eece:	f7f1 f9e5 	bl	800029c <__adddf3>
 800eed2:	e00b      	b.n	800eeec <__ieee754_asin+0x74>
 800eed4:	ee10 2a10 	vmov	r2, s0
 800eed8:	462b      	mov	r3, r5
 800eeda:	ee10 0a10 	vmov	r0, s0
 800eede:	4629      	mov	r1, r5
 800eee0:	f7f1 f9da 	bl	8000298 <__aeabi_dsub>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	f7f1 fcb8 	bl	800085c <__aeabi_ddiv>
 800eeec:	4604      	mov	r4, r0
 800eeee:	460d      	mov	r5, r1
 800eef0:	ec45 4b10 	vmov	d0, r4, r5
 800eef4:	b003      	add	sp, #12
 800eef6:	ecbd 8b04 	vpop	{d8-d9}
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	4baf      	ldr	r3, [pc, #700]	; (800f1bc <__ieee754_asin+0x344>)
 800ef00:	4598      	cmp	r8, r3
 800ef02:	dc11      	bgt.n	800ef28 <__ieee754_asin+0xb0>
 800ef04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ef08:	f280 80ae 	bge.w	800f068 <__ieee754_asin+0x1f0>
 800ef0c:	a394      	add	r3, pc, #592	; (adr r3, 800f160 <__ieee754_asin+0x2e8>)
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	ee10 0a10 	vmov	r0, s0
 800ef16:	4629      	mov	r1, r5
 800ef18:	f7f1 f9c0 	bl	800029c <__adddf3>
 800ef1c:	4ba8      	ldr	r3, [pc, #672]	; (800f1c0 <__ieee754_asin+0x348>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f7f1 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d1e3      	bne.n	800eef0 <__ieee754_asin+0x78>
 800ef28:	ec45 4b10 	vmov	d0, r4, r5
 800ef2c:	f000 ffc8 	bl	800fec0 <fabs>
 800ef30:	49a3      	ldr	r1, [pc, #652]	; (800f1c0 <__ieee754_asin+0x348>)
 800ef32:	ec53 2b10 	vmov	r2, r3, d0
 800ef36:	2000      	movs	r0, #0
 800ef38:	f7f1 f9ae 	bl	8000298 <__aeabi_dsub>
 800ef3c:	4ba1      	ldr	r3, [pc, #644]	; (800f1c4 <__ieee754_asin+0x34c>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f7f1 fb62 	bl	8000608 <__aeabi_dmul>
 800ef44:	a388      	add	r3, pc, #544	; (adr r3, 800f168 <__ieee754_asin+0x2f0>)
 800ef46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	f7f1 fb5b 	bl	8000608 <__aeabi_dmul>
 800ef52:	a387      	add	r3, pc, #540	; (adr r3, 800f170 <__ieee754_asin+0x2f8>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 f9a0 	bl	800029c <__adddf3>
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	462b      	mov	r3, r5
 800ef60:	f7f1 fb52 	bl	8000608 <__aeabi_dmul>
 800ef64:	a384      	add	r3, pc, #528	; (adr r3, 800f178 <__ieee754_asin+0x300>)
 800ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6a:	f7f1 f995 	bl	8000298 <__aeabi_dsub>
 800ef6e:	4622      	mov	r2, r4
 800ef70:	462b      	mov	r3, r5
 800ef72:	f7f1 fb49 	bl	8000608 <__aeabi_dmul>
 800ef76:	a382      	add	r3, pc, #520	; (adr r3, 800f180 <__ieee754_asin+0x308>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	f7f1 f98e 	bl	800029c <__adddf3>
 800ef80:	4622      	mov	r2, r4
 800ef82:	462b      	mov	r3, r5
 800ef84:	f7f1 fb40 	bl	8000608 <__aeabi_dmul>
 800ef88:	a37f      	add	r3, pc, #508	; (adr r3, 800f188 <__ieee754_asin+0x310>)
 800ef8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8e:	f7f1 f983 	bl	8000298 <__aeabi_dsub>
 800ef92:	4622      	mov	r2, r4
 800ef94:	462b      	mov	r3, r5
 800ef96:	f7f1 fb37 	bl	8000608 <__aeabi_dmul>
 800ef9a:	a37d      	add	r3, pc, #500	; (adr r3, 800f190 <__ieee754_asin+0x318>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	f7f1 f97c 	bl	800029c <__adddf3>
 800efa4:	4622      	mov	r2, r4
 800efa6:	462b      	mov	r3, r5
 800efa8:	f7f1 fb2e 	bl	8000608 <__aeabi_dmul>
 800efac:	a37a      	add	r3, pc, #488	; (adr r3, 800f198 <__ieee754_asin+0x320>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	ec41 0b18 	vmov	d8, r0, r1
 800efb6:	4620      	mov	r0, r4
 800efb8:	4629      	mov	r1, r5
 800efba:	f7f1 fb25 	bl	8000608 <__aeabi_dmul>
 800efbe:	a378      	add	r3, pc, #480	; (adr r3, 800f1a0 <__ieee754_asin+0x328>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 f968 	bl	8000298 <__aeabi_dsub>
 800efc8:	4622      	mov	r2, r4
 800efca:	462b      	mov	r3, r5
 800efcc:	f7f1 fb1c 	bl	8000608 <__aeabi_dmul>
 800efd0:	a375      	add	r3, pc, #468	; (adr r3, 800f1a8 <__ieee754_asin+0x330>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 f961 	bl	800029c <__adddf3>
 800efda:	4622      	mov	r2, r4
 800efdc:	462b      	mov	r3, r5
 800efde:	f7f1 fb13 	bl	8000608 <__aeabi_dmul>
 800efe2:	a373      	add	r3, pc, #460	; (adr r3, 800f1b0 <__ieee754_asin+0x338>)
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	f7f1 f956 	bl	8000298 <__aeabi_dsub>
 800efec:	4622      	mov	r2, r4
 800efee:	462b      	mov	r3, r5
 800eff0:	f7f1 fb0a 	bl	8000608 <__aeabi_dmul>
 800eff4:	4b72      	ldr	r3, [pc, #456]	; (800f1c0 <__ieee754_asin+0x348>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	f7f1 f950 	bl	800029c <__adddf3>
 800effc:	ec45 4b10 	vmov	d0, r4, r5
 800f000:	4606      	mov	r6, r0
 800f002:	460f      	mov	r7, r1
 800f004:	f000 fe7a 	bl	800fcfc <__ieee754_sqrt>
 800f008:	4b6f      	ldr	r3, [pc, #444]	; (800f1c8 <__ieee754_asin+0x350>)
 800f00a:	4598      	cmp	r8, r3
 800f00c:	ec5b ab10 	vmov	sl, fp, d0
 800f010:	f340 80dc 	ble.w	800f1cc <__ieee754_asin+0x354>
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	ec51 0b18 	vmov	r0, r1, d8
 800f01c:	f7f1 fc1e 	bl	800085c <__aeabi_ddiv>
 800f020:	4652      	mov	r2, sl
 800f022:	465b      	mov	r3, fp
 800f024:	f7f1 faf0 	bl	8000608 <__aeabi_dmul>
 800f028:	4652      	mov	r2, sl
 800f02a:	465b      	mov	r3, fp
 800f02c:	f7f1 f936 	bl	800029c <__adddf3>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	f7f1 f932 	bl	800029c <__adddf3>
 800f038:	a347      	add	r3, pc, #284	; (adr r3, 800f158 <__ieee754_asin+0x2e0>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 f92b 	bl	8000298 <__aeabi_dsub>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	a142      	add	r1, pc, #264	; (adr r1, 800f150 <__ieee754_asin+0x2d8>)
 800f048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f04c:	f7f1 f924 	bl	8000298 <__aeabi_dsub>
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	bfdc      	itt	le
 800f056:	4602      	movle	r2, r0
 800f058:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800f05c:	4604      	mov	r4, r0
 800f05e:	460d      	mov	r5, r1
 800f060:	bfdc      	itt	le
 800f062:	4614      	movle	r4, r2
 800f064:	461d      	movle	r5, r3
 800f066:	e743      	b.n	800eef0 <__ieee754_asin+0x78>
 800f068:	ee10 2a10 	vmov	r2, s0
 800f06c:	ee10 0a10 	vmov	r0, s0
 800f070:	462b      	mov	r3, r5
 800f072:	4629      	mov	r1, r5
 800f074:	f7f1 fac8 	bl	8000608 <__aeabi_dmul>
 800f078:	a33b      	add	r3, pc, #236	; (adr r3, 800f168 <__ieee754_asin+0x2f0>)
 800f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07e:	4606      	mov	r6, r0
 800f080:	460f      	mov	r7, r1
 800f082:	f7f1 fac1 	bl	8000608 <__aeabi_dmul>
 800f086:	a33a      	add	r3, pc, #232	; (adr r3, 800f170 <__ieee754_asin+0x2f8>)
 800f088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08c:	f7f1 f906 	bl	800029c <__adddf3>
 800f090:	4632      	mov	r2, r6
 800f092:	463b      	mov	r3, r7
 800f094:	f7f1 fab8 	bl	8000608 <__aeabi_dmul>
 800f098:	a337      	add	r3, pc, #220	; (adr r3, 800f178 <__ieee754_asin+0x300>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	f7f1 f8fb 	bl	8000298 <__aeabi_dsub>
 800f0a2:	4632      	mov	r2, r6
 800f0a4:	463b      	mov	r3, r7
 800f0a6:	f7f1 faaf 	bl	8000608 <__aeabi_dmul>
 800f0aa:	a335      	add	r3, pc, #212	; (adr r3, 800f180 <__ieee754_asin+0x308>)
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	f7f1 f8f4 	bl	800029c <__adddf3>
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	f7f1 faa6 	bl	8000608 <__aeabi_dmul>
 800f0bc:	a332      	add	r3, pc, #200	; (adr r3, 800f188 <__ieee754_asin+0x310>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	f7f1 f8e9 	bl	8000298 <__aeabi_dsub>
 800f0c6:	4632      	mov	r2, r6
 800f0c8:	463b      	mov	r3, r7
 800f0ca:	f7f1 fa9d 	bl	8000608 <__aeabi_dmul>
 800f0ce:	a330      	add	r3, pc, #192	; (adr r3, 800f190 <__ieee754_asin+0x318>)
 800f0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d4:	f7f1 f8e2 	bl	800029c <__adddf3>
 800f0d8:	4632      	mov	r2, r6
 800f0da:	463b      	mov	r3, r7
 800f0dc:	f7f1 fa94 	bl	8000608 <__aeabi_dmul>
 800f0e0:	a32d      	add	r3, pc, #180	; (adr r3, 800f198 <__ieee754_asin+0x320>)
 800f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	4689      	mov	r9, r1
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	4639      	mov	r1, r7
 800f0ee:	f7f1 fa8b 	bl	8000608 <__aeabi_dmul>
 800f0f2:	a32b      	add	r3, pc, #172	; (adr r3, 800f1a0 <__ieee754_asin+0x328>)
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8ce 	bl	8000298 <__aeabi_dsub>
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	463b      	mov	r3, r7
 800f100:	f7f1 fa82 	bl	8000608 <__aeabi_dmul>
 800f104:	a328      	add	r3, pc, #160	; (adr r3, 800f1a8 <__ieee754_asin+0x330>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f7f1 f8c7 	bl	800029c <__adddf3>
 800f10e:	4632      	mov	r2, r6
 800f110:	463b      	mov	r3, r7
 800f112:	f7f1 fa79 	bl	8000608 <__aeabi_dmul>
 800f116:	a326      	add	r3, pc, #152	; (adr r3, 800f1b0 <__ieee754_asin+0x338>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	f7f1 f8bc 	bl	8000298 <__aeabi_dsub>
 800f120:	4632      	mov	r2, r6
 800f122:	463b      	mov	r3, r7
 800f124:	f7f1 fa70 	bl	8000608 <__aeabi_dmul>
 800f128:	4b25      	ldr	r3, [pc, #148]	; (800f1c0 <__ieee754_asin+0x348>)
 800f12a:	2200      	movs	r2, #0
 800f12c:	f7f1 f8b6 	bl	800029c <__adddf3>
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	4640      	mov	r0, r8
 800f136:	4649      	mov	r1, r9
 800f138:	f7f1 fb90 	bl	800085c <__aeabi_ddiv>
 800f13c:	4622      	mov	r2, r4
 800f13e:	462b      	mov	r3, r5
 800f140:	f7f1 fa62 	bl	8000608 <__aeabi_dmul>
 800f144:	4602      	mov	r2, r0
 800f146:	460b      	mov	r3, r1
 800f148:	4620      	mov	r0, r4
 800f14a:	4629      	mov	r1, r5
 800f14c:	e6bf      	b.n	800eece <__ieee754_asin+0x56>
 800f14e:	bf00      	nop
 800f150:	54442d18 	.word	0x54442d18
 800f154:	3ff921fb 	.word	0x3ff921fb
 800f158:	33145c07 	.word	0x33145c07
 800f15c:	3c91a626 	.word	0x3c91a626
 800f160:	8800759c 	.word	0x8800759c
 800f164:	7e37e43c 	.word	0x7e37e43c
 800f168:	0dfdf709 	.word	0x0dfdf709
 800f16c:	3f023de1 	.word	0x3f023de1
 800f170:	7501b288 	.word	0x7501b288
 800f174:	3f49efe0 	.word	0x3f49efe0
 800f178:	b5688f3b 	.word	0xb5688f3b
 800f17c:	3fa48228 	.word	0x3fa48228
 800f180:	0e884455 	.word	0x0e884455
 800f184:	3fc9c155 	.word	0x3fc9c155
 800f188:	03eb6f7d 	.word	0x03eb6f7d
 800f18c:	3fd4d612 	.word	0x3fd4d612
 800f190:	55555555 	.word	0x55555555
 800f194:	3fc55555 	.word	0x3fc55555
 800f198:	b12e9282 	.word	0xb12e9282
 800f19c:	3fb3b8c5 	.word	0x3fb3b8c5
 800f1a0:	1b8d0159 	.word	0x1b8d0159
 800f1a4:	3fe6066c 	.word	0x3fe6066c
 800f1a8:	9c598ac8 	.word	0x9c598ac8
 800f1ac:	40002ae5 	.word	0x40002ae5
 800f1b0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f1b4:	40033a27 	.word	0x40033a27
 800f1b8:	3fefffff 	.word	0x3fefffff
 800f1bc:	3fdfffff 	.word	0x3fdfffff
 800f1c0:	3ff00000 	.word	0x3ff00000
 800f1c4:	3fe00000 	.word	0x3fe00000
 800f1c8:	3fef3332 	.word	0x3fef3332
 800f1cc:	ee10 2a10 	vmov	r2, s0
 800f1d0:	ee10 0a10 	vmov	r0, s0
 800f1d4:	465b      	mov	r3, fp
 800f1d6:	4659      	mov	r1, fp
 800f1d8:	f7f1 f860 	bl	800029c <__adddf3>
 800f1dc:	4632      	mov	r2, r6
 800f1de:	463b      	mov	r3, r7
 800f1e0:	ec41 0b19 	vmov	d9, r0, r1
 800f1e4:	ec51 0b18 	vmov	r0, r1, d8
 800f1e8:	f7f1 fb38 	bl	800085c <__aeabi_ddiv>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	ec51 0b19 	vmov	r0, r1, d9
 800f1f4:	f7f1 fa08 	bl	8000608 <__aeabi_dmul>
 800f1f8:	f04f 0800 	mov.w	r8, #0
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	460f      	mov	r7, r1
 800f200:	4642      	mov	r2, r8
 800f202:	465b      	mov	r3, fp
 800f204:	4640      	mov	r0, r8
 800f206:	4659      	mov	r1, fp
 800f208:	f7f1 f9fe 	bl	8000608 <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	4620      	mov	r0, r4
 800f212:	4629      	mov	r1, r5
 800f214:	f7f1 f840 	bl	8000298 <__aeabi_dsub>
 800f218:	4642      	mov	r2, r8
 800f21a:	4604      	mov	r4, r0
 800f21c:	460d      	mov	r5, r1
 800f21e:	465b      	mov	r3, fp
 800f220:	4650      	mov	r0, sl
 800f222:	4659      	mov	r1, fp
 800f224:	f7f1 f83a 	bl	800029c <__adddf3>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	4620      	mov	r0, r4
 800f22e:	4629      	mov	r1, r5
 800f230:	f7f1 fb14 	bl	800085c <__aeabi_ddiv>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	f7f1 f830 	bl	800029c <__adddf3>
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	a113      	add	r1, pc, #76	; (adr r1, 800f290 <__ieee754_asin+0x418>)
 800f242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f246:	f7f1 f827 	bl	8000298 <__aeabi_dsub>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	4630      	mov	r0, r6
 800f250:	4639      	mov	r1, r7
 800f252:	f7f1 f821 	bl	8000298 <__aeabi_dsub>
 800f256:	4642      	mov	r2, r8
 800f258:	4604      	mov	r4, r0
 800f25a:	460d      	mov	r5, r1
 800f25c:	465b      	mov	r3, fp
 800f25e:	4640      	mov	r0, r8
 800f260:	4659      	mov	r1, fp
 800f262:	f7f1 f81b 	bl	800029c <__adddf3>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	a10b      	add	r1, pc, #44	; (adr r1, 800f298 <__ieee754_asin+0x420>)
 800f26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f270:	f7f1 f812 	bl	8000298 <__aeabi_dsub>
 800f274:	4602      	mov	r2, r0
 800f276:	460b      	mov	r3, r1
 800f278:	4620      	mov	r0, r4
 800f27a:	4629      	mov	r1, r5
 800f27c:	f7f1 f80c 	bl	8000298 <__aeabi_dsub>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	a104      	add	r1, pc, #16	; (adr r1, 800f298 <__ieee754_asin+0x420>)
 800f286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f28a:	e6df      	b.n	800f04c <__ieee754_asin+0x1d4>
 800f28c:	f3af 8000 	nop.w
 800f290:	33145c07 	.word	0x33145c07
 800f294:	3c91a626 	.word	0x3c91a626
 800f298:	54442d18 	.word	0x54442d18
 800f29c:	3fe921fb 	.word	0x3fe921fb

0800f2a0 <__ieee754_pow>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	ed2d 8b06 	vpush	{d8-d10}
 800f2a8:	b089      	sub	sp, #36	; 0x24
 800f2aa:	ed8d 1b00 	vstr	d1, [sp]
 800f2ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f2b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f2b6:	ea58 0102 	orrs.w	r1, r8, r2
 800f2ba:	ec57 6b10 	vmov	r6, r7, d0
 800f2be:	d115      	bne.n	800f2ec <__ieee754_pow+0x4c>
 800f2c0:	19b3      	adds	r3, r6, r6
 800f2c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f2c6:	4152      	adcs	r2, r2
 800f2c8:	4299      	cmp	r1, r3
 800f2ca:	4b89      	ldr	r3, [pc, #548]	; (800f4f0 <__ieee754_pow+0x250>)
 800f2cc:	4193      	sbcs	r3, r2
 800f2ce:	f080 84d2 	bcs.w	800fc76 <__ieee754_pow+0x9d6>
 800f2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	4639      	mov	r1, r7
 800f2da:	f7f0 ffdf 	bl	800029c <__adddf3>
 800f2de:	ec41 0b10 	vmov	d0, r0, r1
 800f2e2:	b009      	add	sp, #36	; 0x24
 800f2e4:	ecbd 8b06 	vpop	{d8-d10}
 800f2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ec:	4b81      	ldr	r3, [pc, #516]	; (800f4f4 <__ieee754_pow+0x254>)
 800f2ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f2f2:	429c      	cmp	r4, r3
 800f2f4:	ee10 aa10 	vmov	sl, s0
 800f2f8:	463d      	mov	r5, r7
 800f2fa:	dc06      	bgt.n	800f30a <__ieee754_pow+0x6a>
 800f2fc:	d101      	bne.n	800f302 <__ieee754_pow+0x62>
 800f2fe:	2e00      	cmp	r6, #0
 800f300:	d1e7      	bne.n	800f2d2 <__ieee754_pow+0x32>
 800f302:	4598      	cmp	r8, r3
 800f304:	dc01      	bgt.n	800f30a <__ieee754_pow+0x6a>
 800f306:	d10f      	bne.n	800f328 <__ieee754_pow+0x88>
 800f308:	b172      	cbz	r2, 800f328 <__ieee754_pow+0x88>
 800f30a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f30e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f312:	ea55 050a 	orrs.w	r5, r5, sl
 800f316:	d1dc      	bne.n	800f2d2 <__ieee754_pow+0x32>
 800f318:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f31c:	18db      	adds	r3, r3, r3
 800f31e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f322:	4152      	adcs	r2, r2
 800f324:	429d      	cmp	r5, r3
 800f326:	e7d0      	b.n	800f2ca <__ieee754_pow+0x2a>
 800f328:	2d00      	cmp	r5, #0
 800f32a:	da3b      	bge.n	800f3a4 <__ieee754_pow+0x104>
 800f32c:	4b72      	ldr	r3, [pc, #456]	; (800f4f8 <__ieee754_pow+0x258>)
 800f32e:	4598      	cmp	r8, r3
 800f330:	dc51      	bgt.n	800f3d6 <__ieee754_pow+0x136>
 800f332:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f336:	4598      	cmp	r8, r3
 800f338:	f340 84ac 	ble.w	800fc94 <__ieee754_pow+0x9f4>
 800f33c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f340:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f344:	2b14      	cmp	r3, #20
 800f346:	dd0f      	ble.n	800f368 <__ieee754_pow+0xc8>
 800f348:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f34c:	fa22 f103 	lsr.w	r1, r2, r3
 800f350:	fa01 f303 	lsl.w	r3, r1, r3
 800f354:	4293      	cmp	r3, r2
 800f356:	f040 849d 	bne.w	800fc94 <__ieee754_pow+0x9f4>
 800f35a:	f001 0101 	and.w	r1, r1, #1
 800f35e:	f1c1 0302 	rsb	r3, r1, #2
 800f362:	9304      	str	r3, [sp, #16]
 800f364:	b182      	cbz	r2, 800f388 <__ieee754_pow+0xe8>
 800f366:	e05f      	b.n	800f428 <__ieee754_pow+0x188>
 800f368:	2a00      	cmp	r2, #0
 800f36a:	d15b      	bne.n	800f424 <__ieee754_pow+0x184>
 800f36c:	f1c3 0314 	rsb	r3, r3, #20
 800f370:	fa48 f103 	asr.w	r1, r8, r3
 800f374:	fa01 f303 	lsl.w	r3, r1, r3
 800f378:	4543      	cmp	r3, r8
 800f37a:	f040 8488 	bne.w	800fc8e <__ieee754_pow+0x9ee>
 800f37e:	f001 0101 	and.w	r1, r1, #1
 800f382:	f1c1 0302 	rsb	r3, r1, #2
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	4b5c      	ldr	r3, [pc, #368]	; (800f4fc <__ieee754_pow+0x25c>)
 800f38a:	4598      	cmp	r8, r3
 800f38c:	d132      	bne.n	800f3f4 <__ieee754_pow+0x154>
 800f38e:	f1b9 0f00 	cmp.w	r9, #0
 800f392:	f280 8478 	bge.w	800fc86 <__ieee754_pow+0x9e6>
 800f396:	4959      	ldr	r1, [pc, #356]	; (800f4fc <__ieee754_pow+0x25c>)
 800f398:	4632      	mov	r2, r6
 800f39a:	463b      	mov	r3, r7
 800f39c:	2000      	movs	r0, #0
 800f39e:	f7f1 fa5d 	bl	800085c <__aeabi_ddiv>
 800f3a2:	e79c      	b.n	800f2de <__ieee754_pow+0x3e>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	2a00      	cmp	r2, #0
 800f3aa:	d13d      	bne.n	800f428 <__ieee754_pow+0x188>
 800f3ac:	4b51      	ldr	r3, [pc, #324]	; (800f4f4 <__ieee754_pow+0x254>)
 800f3ae:	4598      	cmp	r8, r3
 800f3b0:	d1ea      	bne.n	800f388 <__ieee754_pow+0xe8>
 800f3b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f3b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f3ba:	ea53 030a 	orrs.w	r3, r3, sl
 800f3be:	f000 845a 	beq.w	800fc76 <__ieee754_pow+0x9d6>
 800f3c2:	4b4f      	ldr	r3, [pc, #316]	; (800f500 <__ieee754_pow+0x260>)
 800f3c4:	429c      	cmp	r4, r3
 800f3c6:	dd08      	ble.n	800f3da <__ieee754_pow+0x13a>
 800f3c8:	f1b9 0f00 	cmp.w	r9, #0
 800f3cc:	f2c0 8457 	blt.w	800fc7e <__ieee754_pow+0x9de>
 800f3d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3d4:	e783      	b.n	800f2de <__ieee754_pow+0x3e>
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	e7e5      	b.n	800f3a6 <__ieee754_pow+0x106>
 800f3da:	f1b9 0f00 	cmp.w	r9, #0
 800f3de:	f04f 0000 	mov.w	r0, #0
 800f3e2:	f04f 0100 	mov.w	r1, #0
 800f3e6:	f6bf af7a 	bge.w	800f2de <__ieee754_pow+0x3e>
 800f3ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f3ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f3f2:	e774      	b.n	800f2de <__ieee754_pow+0x3e>
 800f3f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f3f8:	d106      	bne.n	800f408 <__ieee754_pow+0x168>
 800f3fa:	4632      	mov	r2, r6
 800f3fc:	463b      	mov	r3, r7
 800f3fe:	4630      	mov	r0, r6
 800f400:	4639      	mov	r1, r7
 800f402:	f7f1 f901 	bl	8000608 <__aeabi_dmul>
 800f406:	e76a      	b.n	800f2de <__ieee754_pow+0x3e>
 800f408:	4b3e      	ldr	r3, [pc, #248]	; (800f504 <__ieee754_pow+0x264>)
 800f40a:	4599      	cmp	r9, r3
 800f40c:	d10c      	bne.n	800f428 <__ieee754_pow+0x188>
 800f40e:	2d00      	cmp	r5, #0
 800f410:	db0a      	blt.n	800f428 <__ieee754_pow+0x188>
 800f412:	ec47 6b10 	vmov	d0, r6, r7
 800f416:	b009      	add	sp, #36	; 0x24
 800f418:	ecbd 8b06 	vpop	{d8-d10}
 800f41c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	f000 bc6c 	b.w	800fcfc <__ieee754_sqrt>
 800f424:	2300      	movs	r3, #0
 800f426:	9304      	str	r3, [sp, #16]
 800f428:	ec47 6b10 	vmov	d0, r6, r7
 800f42c:	f000 fd48 	bl	800fec0 <fabs>
 800f430:	ec51 0b10 	vmov	r0, r1, d0
 800f434:	f1ba 0f00 	cmp.w	sl, #0
 800f438:	d129      	bne.n	800f48e <__ieee754_pow+0x1ee>
 800f43a:	b124      	cbz	r4, 800f446 <__ieee754_pow+0x1a6>
 800f43c:	4b2f      	ldr	r3, [pc, #188]	; (800f4fc <__ieee754_pow+0x25c>)
 800f43e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f442:	429a      	cmp	r2, r3
 800f444:	d123      	bne.n	800f48e <__ieee754_pow+0x1ee>
 800f446:	f1b9 0f00 	cmp.w	r9, #0
 800f44a:	da05      	bge.n	800f458 <__ieee754_pow+0x1b8>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	2000      	movs	r0, #0
 800f452:	492a      	ldr	r1, [pc, #168]	; (800f4fc <__ieee754_pow+0x25c>)
 800f454:	f7f1 fa02 	bl	800085c <__aeabi_ddiv>
 800f458:	2d00      	cmp	r5, #0
 800f45a:	f6bf af40 	bge.w	800f2de <__ieee754_pow+0x3e>
 800f45e:	9b04      	ldr	r3, [sp, #16]
 800f460:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f464:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f468:	4323      	orrs	r3, r4
 800f46a:	d108      	bne.n	800f47e <__ieee754_pow+0x1de>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	4610      	mov	r0, r2
 800f472:	4619      	mov	r1, r3
 800f474:	f7f0 ff10 	bl	8000298 <__aeabi_dsub>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	e78f      	b.n	800f39e <__ieee754_pow+0xfe>
 800f47e:	9b04      	ldr	r3, [sp, #16]
 800f480:	2b01      	cmp	r3, #1
 800f482:	f47f af2c 	bne.w	800f2de <__ieee754_pow+0x3e>
 800f486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f48a:	4619      	mov	r1, r3
 800f48c:	e727      	b.n	800f2de <__ieee754_pow+0x3e>
 800f48e:	0feb      	lsrs	r3, r5, #31
 800f490:	3b01      	subs	r3, #1
 800f492:	9306      	str	r3, [sp, #24]
 800f494:	9a06      	ldr	r2, [sp, #24]
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	4313      	orrs	r3, r2
 800f49a:	d102      	bne.n	800f4a2 <__ieee754_pow+0x202>
 800f49c:	4632      	mov	r2, r6
 800f49e:	463b      	mov	r3, r7
 800f4a0:	e7e6      	b.n	800f470 <__ieee754_pow+0x1d0>
 800f4a2:	4b19      	ldr	r3, [pc, #100]	; (800f508 <__ieee754_pow+0x268>)
 800f4a4:	4598      	cmp	r8, r3
 800f4a6:	f340 80fb 	ble.w	800f6a0 <__ieee754_pow+0x400>
 800f4aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f4ae:	4598      	cmp	r8, r3
 800f4b0:	4b13      	ldr	r3, [pc, #76]	; (800f500 <__ieee754_pow+0x260>)
 800f4b2:	dd0c      	ble.n	800f4ce <__ieee754_pow+0x22e>
 800f4b4:	429c      	cmp	r4, r3
 800f4b6:	dc0f      	bgt.n	800f4d8 <__ieee754_pow+0x238>
 800f4b8:	f1b9 0f00 	cmp.w	r9, #0
 800f4bc:	da0f      	bge.n	800f4de <__ieee754_pow+0x23e>
 800f4be:	2000      	movs	r0, #0
 800f4c0:	b009      	add	sp, #36	; 0x24
 800f4c2:	ecbd 8b06 	vpop	{d8-d10}
 800f4c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ca:	f000 bcf0 	b.w	800feae <__math_oflow>
 800f4ce:	429c      	cmp	r4, r3
 800f4d0:	dbf2      	blt.n	800f4b8 <__ieee754_pow+0x218>
 800f4d2:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <__ieee754_pow+0x25c>)
 800f4d4:	429c      	cmp	r4, r3
 800f4d6:	dd19      	ble.n	800f50c <__ieee754_pow+0x26c>
 800f4d8:	f1b9 0f00 	cmp.w	r9, #0
 800f4dc:	dcef      	bgt.n	800f4be <__ieee754_pow+0x21e>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	b009      	add	sp, #36	; 0x24
 800f4e2:	ecbd 8b06 	vpop	{d8-d10}
 800f4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ea:	f000 bcd7 	b.w	800fe9c <__math_uflow>
 800f4ee:	bf00      	nop
 800f4f0:	fff00000 	.word	0xfff00000
 800f4f4:	7ff00000 	.word	0x7ff00000
 800f4f8:	433fffff 	.word	0x433fffff
 800f4fc:	3ff00000 	.word	0x3ff00000
 800f500:	3fefffff 	.word	0x3fefffff
 800f504:	3fe00000 	.word	0x3fe00000
 800f508:	41e00000 	.word	0x41e00000
 800f50c:	4b60      	ldr	r3, [pc, #384]	; (800f690 <__ieee754_pow+0x3f0>)
 800f50e:	2200      	movs	r2, #0
 800f510:	f7f0 fec2 	bl	8000298 <__aeabi_dsub>
 800f514:	a354      	add	r3, pc, #336	; (adr r3, 800f668 <__ieee754_pow+0x3c8>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	4604      	mov	r4, r0
 800f51c:	460d      	mov	r5, r1
 800f51e:	f7f1 f873 	bl	8000608 <__aeabi_dmul>
 800f522:	a353      	add	r3, pc, #332	; (adr r3, 800f670 <__ieee754_pow+0x3d0>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	4606      	mov	r6, r0
 800f52a:	460f      	mov	r7, r1
 800f52c:	4620      	mov	r0, r4
 800f52e:	4629      	mov	r1, r5
 800f530:	f7f1 f86a 	bl	8000608 <__aeabi_dmul>
 800f534:	4b57      	ldr	r3, [pc, #348]	; (800f694 <__ieee754_pow+0x3f4>)
 800f536:	4682      	mov	sl, r0
 800f538:	468b      	mov	fp, r1
 800f53a:	2200      	movs	r2, #0
 800f53c:	4620      	mov	r0, r4
 800f53e:	4629      	mov	r1, r5
 800f540:	f7f1 f862 	bl	8000608 <__aeabi_dmul>
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	a14b      	add	r1, pc, #300	; (adr r1, 800f678 <__ieee754_pow+0x3d8>)
 800f54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f54e:	f7f0 fea3 	bl	8000298 <__aeabi_dsub>
 800f552:	4622      	mov	r2, r4
 800f554:	462b      	mov	r3, r5
 800f556:	f7f1 f857 	bl	8000608 <__aeabi_dmul>
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	2000      	movs	r0, #0
 800f560:	494d      	ldr	r1, [pc, #308]	; (800f698 <__ieee754_pow+0x3f8>)
 800f562:	f7f0 fe99 	bl	8000298 <__aeabi_dsub>
 800f566:	4622      	mov	r2, r4
 800f568:	4680      	mov	r8, r0
 800f56a:	4689      	mov	r9, r1
 800f56c:	462b      	mov	r3, r5
 800f56e:	4620      	mov	r0, r4
 800f570:	4629      	mov	r1, r5
 800f572:	f7f1 f849 	bl	8000608 <__aeabi_dmul>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	4640      	mov	r0, r8
 800f57c:	4649      	mov	r1, r9
 800f57e:	f7f1 f843 	bl	8000608 <__aeabi_dmul>
 800f582:	a33f      	add	r3, pc, #252	; (adr r3, 800f680 <__ieee754_pow+0x3e0>)
 800f584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f588:	f7f1 f83e 	bl	8000608 <__aeabi_dmul>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4650      	mov	r0, sl
 800f592:	4659      	mov	r1, fp
 800f594:	f7f0 fe80 	bl	8000298 <__aeabi_dsub>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4680      	mov	r8, r0
 800f59e:	4689      	mov	r9, r1
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	4639      	mov	r1, r7
 800f5a4:	f7f0 fe7a 	bl	800029c <__adddf3>
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	463b      	mov	r3, r7
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	460d      	mov	r5, r1
 800f5b2:	f7f0 fe71 	bl	8000298 <__aeabi_dsub>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	f7f0 fe6b 	bl	8000298 <__aeabi_dsub>
 800f5c2:	9b04      	ldr	r3, [sp, #16]
 800f5c4:	9a06      	ldr	r2, [sp, #24]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	4682      	mov	sl, r0
 800f5cc:	468b      	mov	fp, r1
 800f5ce:	f040 81e7 	bne.w	800f9a0 <__ieee754_pow+0x700>
 800f5d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f688 <__ieee754_pow+0x3e8>
 800f5d6:	eeb0 8a47 	vmov.f32	s16, s14
 800f5da:	eef0 8a67 	vmov.f32	s17, s15
 800f5de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f5e2:	2600      	movs	r6, #0
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ec:	f7f0 fe54 	bl	8000298 <__aeabi_dsub>
 800f5f0:	4622      	mov	r2, r4
 800f5f2:	462b      	mov	r3, r5
 800f5f4:	f7f1 f808 	bl	8000608 <__aeabi_dmul>
 800f5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5fc:	4680      	mov	r8, r0
 800f5fe:	4689      	mov	r9, r1
 800f600:	4650      	mov	r0, sl
 800f602:	4659      	mov	r1, fp
 800f604:	f7f1 f800 	bl	8000608 <__aeabi_dmul>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4640      	mov	r0, r8
 800f60e:	4649      	mov	r1, r9
 800f610:	f7f0 fe44 	bl	800029c <__adddf3>
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	4680      	mov	r8, r0
 800f61a:	4689      	mov	r9, r1
 800f61c:	4620      	mov	r0, r4
 800f61e:	4629      	mov	r1, r5
 800f620:	f7f0 fff2 	bl	8000608 <__aeabi_dmul>
 800f624:	460b      	mov	r3, r1
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	4602      	mov	r2, r0
 800f62c:	4649      	mov	r1, r9
 800f62e:	4640      	mov	r0, r8
 800f630:	f7f0 fe34 	bl	800029c <__adddf3>
 800f634:	4b19      	ldr	r3, [pc, #100]	; (800f69c <__ieee754_pow+0x3fc>)
 800f636:	4299      	cmp	r1, r3
 800f638:	ec45 4b19 	vmov	d9, r4, r5
 800f63c:	4606      	mov	r6, r0
 800f63e:	460f      	mov	r7, r1
 800f640:	468b      	mov	fp, r1
 800f642:	f340 82f1 	ble.w	800fc28 <__ieee754_pow+0x988>
 800f646:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f64a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f64e:	4303      	orrs	r3, r0
 800f650:	f000 81e4 	beq.w	800fa1c <__ieee754_pow+0x77c>
 800f654:	ec51 0b18 	vmov	r0, r1, d8
 800f658:	2200      	movs	r2, #0
 800f65a:	2300      	movs	r3, #0
 800f65c:	f7f1 fa46 	bl	8000aec <__aeabi_dcmplt>
 800f660:	3800      	subs	r0, #0
 800f662:	bf18      	it	ne
 800f664:	2001      	movne	r0, #1
 800f666:	e72b      	b.n	800f4c0 <__ieee754_pow+0x220>
 800f668:	60000000 	.word	0x60000000
 800f66c:	3ff71547 	.word	0x3ff71547
 800f670:	f85ddf44 	.word	0xf85ddf44
 800f674:	3e54ae0b 	.word	0x3e54ae0b
 800f678:	55555555 	.word	0x55555555
 800f67c:	3fd55555 	.word	0x3fd55555
 800f680:	652b82fe 	.word	0x652b82fe
 800f684:	3ff71547 	.word	0x3ff71547
 800f688:	00000000 	.word	0x00000000
 800f68c:	bff00000 	.word	0xbff00000
 800f690:	3ff00000 	.word	0x3ff00000
 800f694:	3fd00000 	.word	0x3fd00000
 800f698:	3fe00000 	.word	0x3fe00000
 800f69c:	408fffff 	.word	0x408fffff
 800f6a0:	4bd5      	ldr	r3, [pc, #852]	; (800f9f8 <__ieee754_pow+0x758>)
 800f6a2:	402b      	ands	r3, r5
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	b92b      	cbnz	r3, 800f6b4 <__ieee754_pow+0x414>
 800f6a8:	4bd4      	ldr	r3, [pc, #848]	; (800f9fc <__ieee754_pow+0x75c>)
 800f6aa:	f7f0 ffad 	bl	8000608 <__aeabi_dmul>
 800f6ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	1523      	asrs	r3, r4, #20
 800f6b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f6ba:	4413      	add	r3, r2
 800f6bc:	9305      	str	r3, [sp, #20]
 800f6be:	4bd0      	ldr	r3, [pc, #832]	; (800fa00 <__ieee754_pow+0x760>)
 800f6c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f6c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f6c8:	429c      	cmp	r4, r3
 800f6ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f6ce:	dd08      	ble.n	800f6e2 <__ieee754_pow+0x442>
 800f6d0:	4bcc      	ldr	r3, [pc, #816]	; (800fa04 <__ieee754_pow+0x764>)
 800f6d2:	429c      	cmp	r4, r3
 800f6d4:	f340 8162 	ble.w	800f99c <__ieee754_pow+0x6fc>
 800f6d8:	9b05      	ldr	r3, [sp, #20]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	9305      	str	r3, [sp, #20]
 800f6de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f6e2:	2400      	movs	r4, #0
 800f6e4:	00e3      	lsls	r3, r4, #3
 800f6e6:	9307      	str	r3, [sp, #28]
 800f6e8:	4bc7      	ldr	r3, [pc, #796]	; (800fa08 <__ieee754_pow+0x768>)
 800f6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6ee:	ed93 7b00 	vldr	d7, [r3]
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	ec53 2b17 	vmov	r2, r3, d7
 800f6f8:	eeb0 9a47 	vmov.f32	s18, s14
 800f6fc:	eef0 9a67 	vmov.f32	s19, s15
 800f700:	4682      	mov	sl, r0
 800f702:	f7f0 fdc9 	bl	8000298 <__aeabi_dsub>
 800f706:	4652      	mov	r2, sl
 800f708:	4606      	mov	r6, r0
 800f70a:	460f      	mov	r7, r1
 800f70c:	462b      	mov	r3, r5
 800f70e:	ec51 0b19 	vmov	r0, r1, d9
 800f712:	f7f0 fdc3 	bl	800029c <__adddf3>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	2000      	movs	r0, #0
 800f71c:	49bb      	ldr	r1, [pc, #748]	; (800fa0c <__ieee754_pow+0x76c>)
 800f71e:	f7f1 f89d 	bl	800085c <__aeabi_ddiv>
 800f722:	ec41 0b1a 	vmov	d10, r0, r1
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4630      	mov	r0, r6
 800f72c:	4639      	mov	r1, r7
 800f72e:	f7f0 ff6b 	bl	8000608 <__aeabi_dmul>
 800f732:	2300      	movs	r3, #0
 800f734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f738:	9302      	str	r3, [sp, #8]
 800f73a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f73e:	46ab      	mov	fp, r5
 800f740:	106d      	asrs	r5, r5, #1
 800f742:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f746:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f74a:	ec41 0b18 	vmov	d8, r0, r1
 800f74e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f752:	2200      	movs	r2, #0
 800f754:	4640      	mov	r0, r8
 800f756:	4649      	mov	r1, r9
 800f758:	4614      	mov	r4, r2
 800f75a:	461d      	mov	r5, r3
 800f75c:	f7f0 ff54 	bl	8000608 <__aeabi_dmul>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	4630      	mov	r0, r6
 800f766:	4639      	mov	r1, r7
 800f768:	f7f0 fd96 	bl	8000298 <__aeabi_dsub>
 800f76c:	ec53 2b19 	vmov	r2, r3, d9
 800f770:	4606      	mov	r6, r0
 800f772:	460f      	mov	r7, r1
 800f774:	4620      	mov	r0, r4
 800f776:	4629      	mov	r1, r5
 800f778:	f7f0 fd8e 	bl	8000298 <__aeabi_dsub>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	4650      	mov	r0, sl
 800f782:	4659      	mov	r1, fp
 800f784:	f7f0 fd88 	bl	8000298 <__aeabi_dsub>
 800f788:	4642      	mov	r2, r8
 800f78a:	464b      	mov	r3, r9
 800f78c:	f7f0 ff3c 	bl	8000608 <__aeabi_dmul>
 800f790:	4602      	mov	r2, r0
 800f792:	460b      	mov	r3, r1
 800f794:	4630      	mov	r0, r6
 800f796:	4639      	mov	r1, r7
 800f798:	f7f0 fd7e 	bl	8000298 <__aeabi_dsub>
 800f79c:	ec53 2b1a 	vmov	r2, r3, d10
 800f7a0:	f7f0 ff32 	bl	8000608 <__aeabi_dmul>
 800f7a4:	ec53 2b18 	vmov	r2, r3, d8
 800f7a8:	ec41 0b19 	vmov	d9, r0, r1
 800f7ac:	ec51 0b18 	vmov	r0, r1, d8
 800f7b0:	f7f0 ff2a 	bl	8000608 <__aeabi_dmul>
 800f7b4:	a37c      	add	r3, pc, #496	; (adr r3, 800f9a8 <__ieee754_pow+0x708>)
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	460d      	mov	r5, r1
 800f7be:	f7f0 ff23 	bl	8000608 <__aeabi_dmul>
 800f7c2:	a37b      	add	r3, pc, #492	; (adr r3, 800f9b0 <__ieee754_pow+0x710>)
 800f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c8:	f7f0 fd68 	bl	800029c <__adddf3>
 800f7cc:	4622      	mov	r2, r4
 800f7ce:	462b      	mov	r3, r5
 800f7d0:	f7f0 ff1a 	bl	8000608 <__aeabi_dmul>
 800f7d4:	a378      	add	r3, pc, #480	; (adr r3, 800f9b8 <__ieee754_pow+0x718>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	f7f0 fd5f 	bl	800029c <__adddf3>
 800f7de:	4622      	mov	r2, r4
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	f7f0 ff11 	bl	8000608 <__aeabi_dmul>
 800f7e6:	a376      	add	r3, pc, #472	; (adr r3, 800f9c0 <__ieee754_pow+0x720>)
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f7f0 fd56 	bl	800029c <__adddf3>
 800f7f0:	4622      	mov	r2, r4
 800f7f2:	462b      	mov	r3, r5
 800f7f4:	f7f0 ff08 	bl	8000608 <__aeabi_dmul>
 800f7f8:	a373      	add	r3, pc, #460	; (adr r3, 800f9c8 <__ieee754_pow+0x728>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f7f0 fd4d 	bl	800029c <__adddf3>
 800f802:	4622      	mov	r2, r4
 800f804:	462b      	mov	r3, r5
 800f806:	f7f0 feff 	bl	8000608 <__aeabi_dmul>
 800f80a:	a371      	add	r3, pc, #452	; (adr r3, 800f9d0 <__ieee754_pow+0x730>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	f7f0 fd44 	bl	800029c <__adddf3>
 800f814:	4622      	mov	r2, r4
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	462b      	mov	r3, r5
 800f81c:	4620      	mov	r0, r4
 800f81e:	4629      	mov	r1, r5
 800f820:	f7f0 fef2 	bl	8000608 <__aeabi_dmul>
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f0 feec 	bl	8000608 <__aeabi_dmul>
 800f830:	4642      	mov	r2, r8
 800f832:	4604      	mov	r4, r0
 800f834:	460d      	mov	r5, r1
 800f836:	464b      	mov	r3, r9
 800f838:	ec51 0b18 	vmov	r0, r1, d8
 800f83c:	f7f0 fd2e 	bl	800029c <__adddf3>
 800f840:	ec53 2b19 	vmov	r2, r3, d9
 800f844:	f7f0 fee0 	bl	8000608 <__aeabi_dmul>
 800f848:	4622      	mov	r2, r4
 800f84a:	462b      	mov	r3, r5
 800f84c:	f7f0 fd26 	bl	800029c <__adddf3>
 800f850:	4642      	mov	r2, r8
 800f852:	4682      	mov	sl, r0
 800f854:	468b      	mov	fp, r1
 800f856:	464b      	mov	r3, r9
 800f858:	4640      	mov	r0, r8
 800f85a:	4649      	mov	r1, r9
 800f85c:	f7f0 fed4 	bl	8000608 <__aeabi_dmul>
 800f860:	4b6b      	ldr	r3, [pc, #428]	; (800fa10 <__ieee754_pow+0x770>)
 800f862:	2200      	movs	r2, #0
 800f864:	4606      	mov	r6, r0
 800f866:	460f      	mov	r7, r1
 800f868:	f7f0 fd18 	bl	800029c <__adddf3>
 800f86c:	4652      	mov	r2, sl
 800f86e:	465b      	mov	r3, fp
 800f870:	f7f0 fd14 	bl	800029c <__adddf3>
 800f874:	2000      	movs	r0, #0
 800f876:	4604      	mov	r4, r0
 800f878:	460d      	mov	r5, r1
 800f87a:	4602      	mov	r2, r0
 800f87c:	460b      	mov	r3, r1
 800f87e:	4640      	mov	r0, r8
 800f880:	4649      	mov	r1, r9
 800f882:	f7f0 fec1 	bl	8000608 <__aeabi_dmul>
 800f886:	4b62      	ldr	r3, [pc, #392]	; (800fa10 <__ieee754_pow+0x770>)
 800f888:	4680      	mov	r8, r0
 800f88a:	4689      	mov	r9, r1
 800f88c:	2200      	movs	r2, #0
 800f88e:	4620      	mov	r0, r4
 800f890:	4629      	mov	r1, r5
 800f892:	f7f0 fd01 	bl	8000298 <__aeabi_dsub>
 800f896:	4632      	mov	r2, r6
 800f898:	463b      	mov	r3, r7
 800f89a:	f7f0 fcfd 	bl	8000298 <__aeabi_dsub>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	4659      	mov	r1, fp
 800f8a6:	f7f0 fcf7 	bl	8000298 <__aeabi_dsub>
 800f8aa:	ec53 2b18 	vmov	r2, r3, d8
 800f8ae:	f7f0 feab 	bl	8000608 <__aeabi_dmul>
 800f8b2:	4622      	mov	r2, r4
 800f8b4:	4606      	mov	r6, r0
 800f8b6:	460f      	mov	r7, r1
 800f8b8:	462b      	mov	r3, r5
 800f8ba:	ec51 0b19 	vmov	r0, r1, d9
 800f8be:	f7f0 fea3 	bl	8000608 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f0 fce7 	bl	800029c <__adddf3>
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	4649      	mov	r1, r9
 800f8da:	f7f0 fcdf 	bl	800029c <__adddf3>
 800f8de:	a33e      	add	r3, pc, #248	; (adr r3, 800f9d8 <__ieee754_pow+0x738>)
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	460d      	mov	r5, r1
 800f8ea:	f7f0 fe8d 	bl	8000608 <__aeabi_dmul>
 800f8ee:	4642      	mov	r2, r8
 800f8f0:	ec41 0b18 	vmov	d8, r0, r1
 800f8f4:	464b      	mov	r3, r9
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7f0 fccd 	bl	8000298 <__aeabi_dsub>
 800f8fe:	4602      	mov	r2, r0
 800f900:	460b      	mov	r3, r1
 800f902:	4630      	mov	r0, r6
 800f904:	4639      	mov	r1, r7
 800f906:	f7f0 fcc7 	bl	8000298 <__aeabi_dsub>
 800f90a:	a335      	add	r3, pc, #212	; (adr r3, 800f9e0 <__ieee754_pow+0x740>)
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	f7f0 fe7a 	bl	8000608 <__aeabi_dmul>
 800f914:	a334      	add	r3, pc, #208	; (adr r3, 800f9e8 <__ieee754_pow+0x748>)
 800f916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91a:	4606      	mov	r6, r0
 800f91c:	460f      	mov	r7, r1
 800f91e:	4620      	mov	r0, r4
 800f920:	4629      	mov	r1, r5
 800f922:	f7f0 fe71 	bl	8000608 <__aeabi_dmul>
 800f926:	4602      	mov	r2, r0
 800f928:	460b      	mov	r3, r1
 800f92a:	4630      	mov	r0, r6
 800f92c:	4639      	mov	r1, r7
 800f92e:	f7f0 fcb5 	bl	800029c <__adddf3>
 800f932:	9a07      	ldr	r2, [sp, #28]
 800f934:	4b37      	ldr	r3, [pc, #220]	; (800fa14 <__ieee754_pow+0x774>)
 800f936:	4413      	add	r3, r2
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f7f0 fcae 	bl	800029c <__adddf3>
 800f940:	4682      	mov	sl, r0
 800f942:	9805      	ldr	r0, [sp, #20]
 800f944:	468b      	mov	fp, r1
 800f946:	f7f0 fdf5 	bl	8000534 <__aeabi_i2d>
 800f94a:	9a07      	ldr	r2, [sp, #28]
 800f94c:	4b32      	ldr	r3, [pc, #200]	; (800fa18 <__ieee754_pow+0x778>)
 800f94e:	4413      	add	r3, r2
 800f950:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f954:	4606      	mov	r6, r0
 800f956:	460f      	mov	r7, r1
 800f958:	4652      	mov	r2, sl
 800f95a:	465b      	mov	r3, fp
 800f95c:	ec51 0b18 	vmov	r0, r1, d8
 800f960:	f7f0 fc9c 	bl	800029c <__adddf3>
 800f964:	4642      	mov	r2, r8
 800f966:	464b      	mov	r3, r9
 800f968:	f7f0 fc98 	bl	800029c <__adddf3>
 800f96c:	4632      	mov	r2, r6
 800f96e:	463b      	mov	r3, r7
 800f970:	f7f0 fc94 	bl	800029c <__adddf3>
 800f974:	2000      	movs	r0, #0
 800f976:	4632      	mov	r2, r6
 800f978:	463b      	mov	r3, r7
 800f97a:	4604      	mov	r4, r0
 800f97c:	460d      	mov	r5, r1
 800f97e:	f7f0 fc8b 	bl	8000298 <__aeabi_dsub>
 800f982:	4642      	mov	r2, r8
 800f984:	464b      	mov	r3, r9
 800f986:	f7f0 fc87 	bl	8000298 <__aeabi_dsub>
 800f98a:	ec53 2b18 	vmov	r2, r3, d8
 800f98e:	f7f0 fc83 	bl	8000298 <__aeabi_dsub>
 800f992:	4602      	mov	r2, r0
 800f994:	460b      	mov	r3, r1
 800f996:	4650      	mov	r0, sl
 800f998:	4659      	mov	r1, fp
 800f99a:	e610      	b.n	800f5be <__ieee754_pow+0x31e>
 800f99c:	2401      	movs	r4, #1
 800f99e:	e6a1      	b.n	800f6e4 <__ieee754_pow+0x444>
 800f9a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f9f0 <__ieee754_pow+0x750>
 800f9a4:	e617      	b.n	800f5d6 <__ieee754_pow+0x336>
 800f9a6:	bf00      	nop
 800f9a8:	4a454eef 	.word	0x4a454eef
 800f9ac:	3fca7e28 	.word	0x3fca7e28
 800f9b0:	93c9db65 	.word	0x93c9db65
 800f9b4:	3fcd864a 	.word	0x3fcd864a
 800f9b8:	a91d4101 	.word	0xa91d4101
 800f9bc:	3fd17460 	.word	0x3fd17460
 800f9c0:	518f264d 	.word	0x518f264d
 800f9c4:	3fd55555 	.word	0x3fd55555
 800f9c8:	db6fabff 	.word	0xdb6fabff
 800f9cc:	3fdb6db6 	.word	0x3fdb6db6
 800f9d0:	33333303 	.word	0x33333303
 800f9d4:	3fe33333 	.word	0x3fe33333
 800f9d8:	e0000000 	.word	0xe0000000
 800f9dc:	3feec709 	.word	0x3feec709
 800f9e0:	dc3a03fd 	.word	0xdc3a03fd
 800f9e4:	3feec709 	.word	0x3feec709
 800f9e8:	145b01f5 	.word	0x145b01f5
 800f9ec:	be3e2fe0 	.word	0xbe3e2fe0
 800f9f0:	00000000 	.word	0x00000000
 800f9f4:	3ff00000 	.word	0x3ff00000
 800f9f8:	7ff00000 	.word	0x7ff00000
 800f9fc:	43400000 	.word	0x43400000
 800fa00:	0003988e 	.word	0x0003988e
 800fa04:	000bb679 	.word	0x000bb679
 800fa08:	080104a8 	.word	0x080104a8
 800fa0c:	3ff00000 	.word	0x3ff00000
 800fa10:	40080000 	.word	0x40080000
 800fa14:	080104c8 	.word	0x080104c8
 800fa18:	080104b8 	.word	0x080104b8
 800fa1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800fcf4 <__ieee754_pow+0xa54>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f0 fc39 	bl	800029c <__adddf3>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	ec41 0b1a 	vmov	d10, r0, r1
 800fa30:	462b      	mov	r3, r5
 800fa32:	4630      	mov	r0, r6
 800fa34:	4639      	mov	r1, r7
 800fa36:	f7f0 fc2f 	bl	8000298 <__aeabi_dsub>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	ec51 0b1a 	vmov	r0, r1, d10
 800fa42:	f7f1 f871 	bl	8000b28 <__aeabi_dcmpgt>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f47f ae04 	bne.w	800f654 <__ieee754_pow+0x3b4>
 800fa4c:	4aa4      	ldr	r2, [pc, #656]	; (800fce0 <__ieee754_pow+0xa40>)
 800fa4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa52:	4293      	cmp	r3, r2
 800fa54:	f340 8108 	ble.w	800fc68 <__ieee754_pow+0x9c8>
 800fa58:	151b      	asrs	r3, r3, #20
 800fa5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fa5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fa62:	fa4a f303 	asr.w	r3, sl, r3
 800fa66:	445b      	add	r3, fp
 800fa68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fa6c:	4e9d      	ldr	r6, [pc, #628]	; (800fce4 <__ieee754_pow+0xa44>)
 800fa6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fa72:	4116      	asrs	r6, r2
 800fa74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fa78:	2000      	movs	r0, #0
 800fa7a:	ea23 0106 	bic.w	r1, r3, r6
 800fa7e:	f1c2 0214 	rsb	r2, r2, #20
 800fa82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fa86:	fa4a fa02 	asr.w	sl, sl, r2
 800fa8a:	f1bb 0f00 	cmp.w	fp, #0
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	4620      	mov	r0, r4
 800fa94:	4629      	mov	r1, r5
 800fa96:	bfb8      	it	lt
 800fa98:	f1ca 0a00 	rsblt	sl, sl, #0
 800fa9c:	f7f0 fbfc 	bl	8000298 <__aeabi_dsub>
 800faa0:	ec41 0b19 	vmov	d9, r0, r1
 800faa4:	4642      	mov	r2, r8
 800faa6:	464b      	mov	r3, r9
 800faa8:	ec51 0b19 	vmov	r0, r1, d9
 800faac:	f7f0 fbf6 	bl	800029c <__adddf3>
 800fab0:	a37b      	add	r3, pc, #492	; (adr r3, 800fca0 <__ieee754_pow+0xa00>)
 800fab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab6:	2000      	movs	r0, #0
 800fab8:	4604      	mov	r4, r0
 800faba:	460d      	mov	r5, r1
 800fabc:	f7f0 fda4 	bl	8000608 <__aeabi_dmul>
 800fac0:	ec53 2b19 	vmov	r2, r3, d9
 800fac4:	4606      	mov	r6, r0
 800fac6:	460f      	mov	r7, r1
 800fac8:	4620      	mov	r0, r4
 800faca:	4629      	mov	r1, r5
 800facc:	f7f0 fbe4 	bl	8000298 <__aeabi_dsub>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4640      	mov	r0, r8
 800fad6:	4649      	mov	r1, r9
 800fad8:	f7f0 fbde 	bl	8000298 <__aeabi_dsub>
 800fadc:	a372      	add	r3, pc, #456	; (adr r3, 800fca8 <__ieee754_pow+0xa08>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fd91 	bl	8000608 <__aeabi_dmul>
 800fae6:	a372      	add	r3, pc, #456	; (adr r3, 800fcb0 <__ieee754_pow+0xa10>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	4680      	mov	r8, r0
 800faee:	4689      	mov	r9, r1
 800faf0:	4620      	mov	r0, r4
 800faf2:	4629      	mov	r1, r5
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4640      	mov	r0, r8
 800fafe:	4649      	mov	r1, r9
 800fb00:	f7f0 fbcc 	bl	800029c <__adddf3>
 800fb04:	4604      	mov	r4, r0
 800fb06:	460d      	mov	r5, r1
 800fb08:	4602      	mov	r2, r0
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	4639      	mov	r1, r7
 800fb10:	f7f0 fbc4 	bl	800029c <__adddf3>
 800fb14:	4632      	mov	r2, r6
 800fb16:	463b      	mov	r3, r7
 800fb18:	4680      	mov	r8, r0
 800fb1a:	4689      	mov	r9, r1
 800fb1c:	f7f0 fbbc 	bl	8000298 <__aeabi_dsub>
 800fb20:	4602      	mov	r2, r0
 800fb22:	460b      	mov	r3, r1
 800fb24:	4620      	mov	r0, r4
 800fb26:	4629      	mov	r1, r5
 800fb28:	f7f0 fbb6 	bl	8000298 <__aeabi_dsub>
 800fb2c:	4642      	mov	r2, r8
 800fb2e:	4606      	mov	r6, r0
 800fb30:	460f      	mov	r7, r1
 800fb32:	464b      	mov	r3, r9
 800fb34:	4640      	mov	r0, r8
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7f0 fd66 	bl	8000608 <__aeabi_dmul>
 800fb3c:	a35e      	add	r3, pc, #376	; (adr r3, 800fcb8 <__ieee754_pow+0xa18>)
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	4604      	mov	r4, r0
 800fb44:	460d      	mov	r5, r1
 800fb46:	f7f0 fd5f 	bl	8000608 <__aeabi_dmul>
 800fb4a:	a35d      	add	r3, pc, #372	; (adr r3, 800fcc0 <__ieee754_pow+0xa20>)
 800fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb50:	f7f0 fba2 	bl	8000298 <__aeabi_dsub>
 800fb54:	4622      	mov	r2, r4
 800fb56:	462b      	mov	r3, r5
 800fb58:	f7f0 fd56 	bl	8000608 <__aeabi_dmul>
 800fb5c:	a35a      	add	r3, pc, #360	; (adr r3, 800fcc8 <__ieee754_pow+0xa28>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	f7f0 fb9b 	bl	800029c <__adddf3>
 800fb66:	4622      	mov	r2, r4
 800fb68:	462b      	mov	r3, r5
 800fb6a:	f7f0 fd4d 	bl	8000608 <__aeabi_dmul>
 800fb6e:	a358      	add	r3, pc, #352	; (adr r3, 800fcd0 <__ieee754_pow+0xa30>)
 800fb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb74:	f7f0 fb90 	bl	8000298 <__aeabi_dsub>
 800fb78:	4622      	mov	r2, r4
 800fb7a:	462b      	mov	r3, r5
 800fb7c:	f7f0 fd44 	bl	8000608 <__aeabi_dmul>
 800fb80:	a355      	add	r3, pc, #340	; (adr r3, 800fcd8 <__ieee754_pow+0xa38>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	f7f0 fb89 	bl	800029c <__adddf3>
 800fb8a:	4622      	mov	r2, r4
 800fb8c:	462b      	mov	r3, r5
 800fb8e:	f7f0 fd3b 	bl	8000608 <__aeabi_dmul>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	4640      	mov	r0, r8
 800fb98:	4649      	mov	r1, r9
 800fb9a:	f7f0 fb7d 	bl	8000298 <__aeabi_dsub>
 800fb9e:	4604      	mov	r4, r0
 800fba0:	460d      	mov	r5, r1
 800fba2:	4602      	mov	r2, r0
 800fba4:	460b      	mov	r3, r1
 800fba6:	4640      	mov	r0, r8
 800fba8:	4649      	mov	r1, r9
 800fbaa:	f7f0 fd2d 	bl	8000608 <__aeabi_dmul>
 800fbae:	2200      	movs	r2, #0
 800fbb0:	ec41 0b19 	vmov	d9, r0, r1
 800fbb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4629      	mov	r1, r5
 800fbbc:	f7f0 fb6c 	bl	8000298 <__aeabi_dsub>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	ec51 0b19 	vmov	r0, r1, d9
 800fbc8:	f7f0 fe48 	bl	800085c <__aeabi_ddiv>
 800fbcc:	4632      	mov	r2, r6
 800fbce:	4604      	mov	r4, r0
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	463b      	mov	r3, r7
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	f7f0 fd16 	bl	8000608 <__aeabi_dmul>
 800fbdc:	4632      	mov	r2, r6
 800fbde:	463b      	mov	r3, r7
 800fbe0:	f7f0 fb5c 	bl	800029c <__adddf3>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4620      	mov	r0, r4
 800fbea:	4629      	mov	r1, r5
 800fbec:	f7f0 fb54 	bl	8000298 <__aeabi_dsub>
 800fbf0:	4642      	mov	r2, r8
 800fbf2:	464b      	mov	r3, r9
 800fbf4:	f7f0 fb50 	bl	8000298 <__aeabi_dsub>
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	493a      	ldr	r1, [pc, #232]	; (800fce8 <__ieee754_pow+0xa48>)
 800fbfe:	2000      	movs	r0, #0
 800fc00:	f7f0 fb4a 	bl	8000298 <__aeabi_dsub>
 800fc04:	ec41 0b10 	vmov	d0, r0, r1
 800fc08:	ee10 3a90 	vmov	r3, s1
 800fc0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fc10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc14:	da2b      	bge.n	800fc6e <__ieee754_pow+0x9ce>
 800fc16:	4650      	mov	r0, sl
 800fc18:	f000 f966 	bl	800fee8 <scalbn>
 800fc1c:	ec51 0b10 	vmov	r0, r1, d0
 800fc20:	ec53 2b18 	vmov	r2, r3, d8
 800fc24:	f7ff bbed 	b.w	800f402 <__ieee754_pow+0x162>
 800fc28:	4b30      	ldr	r3, [pc, #192]	; (800fcec <__ieee754_pow+0xa4c>)
 800fc2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fc2e:	429e      	cmp	r6, r3
 800fc30:	f77f af0c 	ble.w	800fa4c <__ieee754_pow+0x7ac>
 800fc34:	4b2e      	ldr	r3, [pc, #184]	; (800fcf0 <__ieee754_pow+0xa50>)
 800fc36:	440b      	add	r3, r1
 800fc38:	4303      	orrs	r3, r0
 800fc3a:	d009      	beq.n	800fc50 <__ieee754_pow+0x9b0>
 800fc3c:	ec51 0b18 	vmov	r0, r1, d8
 800fc40:	2200      	movs	r2, #0
 800fc42:	2300      	movs	r3, #0
 800fc44:	f7f0 ff52 	bl	8000aec <__aeabi_dcmplt>
 800fc48:	3800      	subs	r0, #0
 800fc4a:	bf18      	it	ne
 800fc4c:	2001      	movne	r0, #1
 800fc4e:	e447      	b.n	800f4e0 <__ieee754_pow+0x240>
 800fc50:	4622      	mov	r2, r4
 800fc52:	462b      	mov	r3, r5
 800fc54:	f7f0 fb20 	bl	8000298 <__aeabi_dsub>
 800fc58:	4642      	mov	r2, r8
 800fc5a:	464b      	mov	r3, r9
 800fc5c:	f7f0 ff5a 	bl	8000b14 <__aeabi_dcmpge>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	f43f aef3 	beq.w	800fa4c <__ieee754_pow+0x7ac>
 800fc66:	e7e9      	b.n	800fc3c <__ieee754_pow+0x99c>
 800fc68:	f04f 0a00 	mov.w	sl, #0
 800fc6c:	e71a      	b.n	800faa4 <__ieee754_pow+0x804>
 800fc6e:	ec51 0b10 	vmov	r0, r1, d0
 800fc72:	4619      	mov	r1, r3
 800fc74:	e7d4      	b.n	800fc20 <__ieee754_pow+0x980>
 800fc76:	491c      	ldr	r1, [pc, #112]	; (800fce8 <__ieee754_pow+0xa48>)
 800fc78:	2000      	movs	r0, #0
 800fc7a:	f7ff bb30 	b.w	800f2de <__ieee754_pow+0x3e>
 800fc7e:	2000      	movs	r0, #0
 800fc80:	2100      	movs	r1, #0
 800fc82:	f7ff bb2c 	b.w	800f2de <__ieee754_pow+0x3e>
 800fc86:	4630      	mov	r0, r6
 800fc88:	4639      	mov	r1, r7
 800fc8a:	f7ff bb28 	b.w	800f2de <__ieee754_pow+0x3e>
 800fc8e:	9204      	str	r2, [sp, #16]
 800fc90:	f7ff bb7a 	b.w	800f388 <__ieee754_pow+0xe8>
 800fc94:	2300      	movs	r3, #0
 800fc96:	f7ff bb64 	b.w	800f362 <__ieee754_pow+0xc2>
 800fc9a:	bf00      	nop
 800fc9c:	f3af 8000 	nop.w
 800fca0:	00000000 	.word	0x00000000
 800fca4:	3fe62e43 	.word	0x3fe62e43
 800fca8:	fefa39ef 	.word	0xfefa39ef
 800fcac:	3fe62e42 	.word	0x3fe62e42
 800fcb0:	0ca86c39 	.word	0x0ca86c39
 800fcb4:	be205c61 	.word	0xbe205c61
 800fcb8:	72bea4d0 	.word	0x72bea4d0
 800fcbc:	3e663769 	.word	0x3e663769
 800fcc0:	c5d26bf1 	.word	0xc5d26bf1
 800fcc4:	3ebbbd41 	.word	0x3ebbbd41
 800fcc8:	af25de2c 	.word	0xaf25de2c
 800fccc:	3f11566a 	.word	0x3f11566a
 800fcd0:	16bebd93 	.word	0x16bebd93
 800fcd4:	3f66c16c 	.word	0x3f66c16c
 800fcd8:	5555553e 	.word	0x5555553e
 800fcdc:	3fc55555 	.word	0x3fc55555
 800fce0:	3fe00000 	.word	0x3fe00000
 800fce4:	000fffff 	.word	0x000fffff
 800fce8:	3ff00000 	.word	0x3ff00000
 800fcec:	4090cbff 	.word	0x4090cbff
 800fcf0:	3f6f3400 	.word	0x3f6f3400
 800fcf4:	652b82fe 	.word	0x652b82fe
 800fcf8:	3c971547 	.word	0x3c971547

0800fcfc <__ieee754_sqrt>:
 800fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd00:	ec55 4b10 	vmov	r4, r5, d0
 800fd04:	4e55      	ldr	r6, [pc, #340]	; (800fe5c <__ieee754_sqrt+0x160>)
 800fd06:	43ae      	bics	r6, r5
 800fd08:	ee10 0a10 	vmov	r0, s0
 800fd0c:	ee10 3a10 	vmov	r3, s0
 800fd10:	462a      	mov	r2, r5
 800fd12:	4629      	mov	r1, r5
 800fd14:	d110      	bne.n	800fd38 <__ieee754_sqrt+0x3c>
 800fd16:	ee10 2a10 	vmov	r2, s0
 800fd1a:	462b      	mov	r3, r5
 800fd1c:	f7f0 fc74 	bl	8000608 <__aeabi_dmul>
 800fd20:	4602      	mov	r2, r0
 800fd22:	460b      	mov	r3, r1
 800fd24:	4620      	mov	r0, r4
 800fd26:	4629      	mov	r1, r5
 800fd28:	f7f0 fab8 	bl	800029c <__adddf3>
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	460d      	mov	r5, r1
 800fd30:	ec45 4b10 	vmov	d0, r4, r5
 800fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd38:	2d00      	cmp	r5, #0
 800fd3a:	dc10      	bgt.n	800fd5e <__ieee754_sqrt+0x62>
 800fd3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd40:	4330      	orrs	r0, r6
 800fd42:	d0f5      	beq.n	800fd30 <__ieee754_sqrt+0x34>
 800fd44:	b15d      	cbz	r5, 800fd5e <__ieee754_sqrt+0x62>
 800fd46:	ee10 2a10 	vmov	r2, s0
 800fd4a:	462b      	mov	r3, r5
 800fd4c:	ee10 0a10 	vmov	r0, s0
 800fd50:	f7f0 faa2 	bl	8000298 <__aeabi_dsub>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	f7f0 fd80 	bl	800085c <__aeabi_ddiv>
 800fd5c:	e7e6      	b.n	800fd2c <__ieee754_sqrt+0x30>
 800fd5e:	1512      	asrs	r2, r2, #20
 800fd60:	d074      	beq.n	800fe4c <__ieee754_sqrt+0x150>
 800fd62:	07d4      	lsls	r4, r2, #31
 800fd64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fd6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fd70:	bf5e      	ittt	pl
 800fd72:	0fda      	lsrpl	r2, r3, #31
 800fd74:	005b      	lslpl	r3, r3, #1
 800fd76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fd7a:	2400      	movs	r4, #0
 800fd7c:	0fda      	lsrs	r2, r3, #31
 800fd7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fd82:	107f      	asrs	r7, r7, #1
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	2516      	movs	r5, #22
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fd8e:	1886      	adds	r6, r0, r2
 800fd90:	428e      	cmp	r6, r1
 800fd92:	bfde      	ittt	le
 800fd94:	1b89      	suble	r1, r1, r6
 800fd96:	18b0      	addle	r0, r6, r2
 800fd98:	18a4      	addle	r4, r4, r2
 800fd9a:	0049      	lsls	r1, r1, #1
 800fd9c:	3d01      	subs	r5, #1
 800fd9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fda2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fda6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fdaa:	d1f0      	bne.n	800fd8e <__ieee754_sqrt+0x92>
 800fdac:	462a      	mov	r2, r5
 800fdae:	f04f 0e20 	mov.w	lr, #32
 800fdb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fdb6:	4281      	cmp	r1, r0
 800fdb8:	eb06 0c05 	add.w	ip, r6, r5
 800fdbc:	dc02      	bgt.n	800fdc4 <__ieee754_sqrt+0xc8>
 800fdbe:	d113      	bne.n	800fde8 <__ieee754_sqrt+0xec>
 800fdc0:	459c      	cmp	ip, r3
 800fdc2:	d811      	bhi.n	800fde8 <__ieee754_sqrt+0xec>
 800fdc4:	f1bc 0f00 	cmp.w	ip, #0
 800fdc8:	eb0c 0506 	add.w	r5, ip, r6
 800fdcc:	da43      	bge.n	800fe56 <__ieee754_sqrt+0x15a>
 800fdce:	2d00      	cmp	r5, #0
 800fdd0:	db41      	blt.n	800fe56 <__ieee754_sqrt+0x15a>
 800fdd2:	f100 0801 	add.w	r8, r0, #1
 800fdd6:	1a09      	subs	r1, r1, r0
 800fdd8:	459c      	cmp	ip, r3
 800fdda:	bf88      	it	hi
 800fddc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fde0:	eba3 030c 	sub.w	r3, r3, ip
 800fde4:	4432      	add	r2, r6
 800fde6:	4640      	mov	r0, r8
 800fde8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fdec:	f1be 0e01 	subs.w	lr, lr, #1
 800fdf0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fdf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fdf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fdfc:	d1db      	bne.n	800fdb6 <__ieee754_sqrt+0xba>
 800fdfe:	430b      	orrs	r3, r1
 800fe00:	d006      	beq.n	800fe10 <__ieee754_sqrt+0x114>
 800fe02:	1c50      	adds	r0, r2, #1
 800fe04:	bf13      	iteet	ne
 800fe06:	3201      	addne	r2, #1
 800fe08:	3401      	addeq	r4, #1
 800fe0a:	4672      	moveq	r2, lr
 800fe0c:	f022 0201 	bicne.w	r2, r2, #1
 800fe10:	1063      	asrs	r3, r4, #1
 800fe12:	0852      	lsrs	r2, r2, #1
 800fe14:	07e1      	lsls	r1, r4, #31
 800fe16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fe1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fe1e:	bf48      	it	mi
 800fe20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fe24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fe28:	4614      	mov	r4, r2
 800fe2a:	e781      	b.n	800fd30 <__ieee754_sqrt+0x34>
 800fe2c:	0ad9      	lsrs	r1, r3, #11
 800fe2e:	3815      	subs	r0, #21
 800fe30:	055b      	lsls	r3, r3, #21
 800fe32:	2900      	cmp	r1, #0
 800fe34:	d0fa      	beq.n	800fe2c <__ieee754_sqrt+0x130>
 800fe36:	02cd      	lsls	r5, r1, #11
 800fe38:	d50a      	bpl.n	800fe50 <__ieee754_sqrt+0x154>
 800fe3a:	f1c2 0420 	rsb	r4, r2, #32
 800fe3e:	fa23 f404 	lsr.w	r4, r3, r4
 800fe42:	1e55      	subs	r5, r2, #1
 800fe44:	4093      	lsls	r3, r2
 800fe46:	4321      	orrs	r1, r4
 800fe48:	1b42      	subs	r2, r0, r5
 800fe4a:	e78a      	b.n	800fd62 <__ieee754_sqrt+0x66>
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	e7f0      	b.n	800fe32 <__ieee754_sqrt+0x136>
 800fe50:	0049      	lsls	r1, r1, #1
 800fe52:	3201      	adds	r2, #1
 800fe54:	e7ef      	b.n	800fe36 <__ieee754_sqrt+0x13a>
 800fe56:	4680      	mov	r8, r0
 800fe58:	e7bd      	b.n	800fdd6 <__ieee754_sqrt+0xda>
 800fe5a:	bf00      	nop
 800fe5c:	7ff00000 	.word	0x7ff00000

0800fe60 <with_errno>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	4604      	mov	r4, r0
 800fe64:	460d      	mov	r5, r1
 800fe66:	4616      	mov	r6, r2
 800fe68:	f7fc f846 	bl	800bef8 <__errno>
 800fe6c:	4629      	mov	r1, r5
 800fe6e:	6006      	str	r6, [r0, #0]
 800fe70:	4620      	mov	r0, r4
 800fe72:	bd70      	pop	{r4, r5, r6, pc}

0800fe74 <xflow>:
 800fe74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe76:	4614      	mov	r4, r2
 800fe78:	461d      	mov	r5, r3
 800fe7a:	b108      	cbz	r0, 800fe80 <xflow+0xc>
 800fe7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe80:	e9cd 2300 	strd	r2, r3, [sp]
 800fe84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe88:	4620      	mov	r0, r4
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7f0 fbbc 	bl	8000608 <__aeabi_dmul>
 800fe90:	2222      	movs	r2, #34	; 0x22
 800fe92:	b003      	add	sp, #12
 800fe94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe98:	f7ff bfe2 	b.w	800fe60 <with_errno>

0800fe9c <__math_uflow>:
 800fe9c:	b508      	push	{r3, lr}
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fea4:	f7ff ffe6 	bl	800fe74 <xflow>
 800fea8:	ec41 0b10 	vmov	d0, r0, r1
 800feac:	bd08      	pop	{r3, pc}

0800feae <__math_oflow>:
 800feae:	b508      	push	{r3, lr}
 800feb0:	2200      	movs	r2, #0
 800feb2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800feb6:	f7ff ffdd 	bl	800fe74 <xflow>
 800feba:	ec41 0b10 	vmov	d0, r0, r1
 800febe:	bd08      	pop	{r3, pc}

0800fec0 <fabs>:
 800fec0:	ec51 0b10 	vmov	r0, r1, d0
 800fec4:	ee10 2a10 	vmov	r2, s0
 800fec8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fecc:	ec43 2b10 	vmov	d0, r2, r3
 800fed0:	4770      	bx	lr

0800fed2 <finite>:
 800fed2:	b082      	sub	sp, #8
 800fed4:	ed8d 0b00 	vstr	d0, [sp]
 800fed8:	9801      	ldr	r0, [sp, #4]
 800feda:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fede:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fee2:	0fc0      	lsrs	r0, r0, #31
 800fee4:	b002      	add	sp, #8
 800fee6:	4770      	bx	lr

0800fee8 <scalbn>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	ec55 4b10 	vmov	r4, r5, d0
 800feee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fef2:	4606      	mov	r6, r0
 800fef4:	462b      	mov	r3, r5
 800fef6:	b99a      	cbnz	r2, 800ff20 <scalbn+0x38>
 800fef8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fefc:	4323      	orrs	r3, r4
 800fefe:	d036      	beq.n	800ff6e <scalbn+0x86>
 800ff00:	4b39      	ldr	r3, [pc, #228]	; (800ffe8 <scalbn+0x100>)
 800ff02:	4629      	mov	r1, r5
 800ff04:	ee10 0a10 	vmov	r0, s0
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f7f0 fb7d 	bl	8000608 <__aeabi_dmul>
 800ff0e:	4b37      	ldr	r3, [pc, #220]	; (800ffec <scalbn+0x104>)
 800ff10:	429e      	cmp	r6, r3
 800ff12:	4604      	mov	r4, r0
 800ff14:	460d      	mov	r5, r1
 800ff16:	da10      	bge.n	800ff3a <scalbn+0x52>
 800ff18:	a32b      	add	r3, pc, #172	; (adr r3, 800ffc8 <scalbn+0xe0>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	e03a      	b.n	800ff96 <scalbn+0xae>
 800ff20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ff24:	428a      	cmp	r2, r1
 800ff26:	d10c      	bne.n	800ff42 <scalbn+0x5a>
 800ff28:	ee10 2a10 	vmov	r2, s0
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	4629      	mov	r1, r5
 800ff30:	f7f0 f9b4 	bl	800029c <__adddf3>
 800ff34:	4604      	mov	r4, r0
 800ff36:	460d      	mov	r5, r1
 800ff38:	e019      	b.n	800ff6e <scalbn+0x86>
 800ff3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff3e:	460b      	mov	r3, r1
 800ff40:	3a36      	subs	r2, #54	; 0x36
 800ff42:	4432      	add	r2, r6
 800ff44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff48:	428a      	cmp	r2, r1
 800ff4a:	dd08      	ble.n	800ff5e <scalbn+0x76>
 800ff4c:	2d00      	cmp	r5, #0
 800ff4e:	a120      	add	r1, pc, #128	; (adr r1, 800ffd0 <scalbn+0xe8>)
 800ff50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff54:	da1c      	bge.n	800ff90 <scalbn+0xa8>
 800ff56:	a120      	add	r1, pc, #128	; (adr r1, 800ffd8 <scalbn+0xf0>)
 800ff58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff5c:	e018      	b.n	800ff90 <scalbn+0xa8>
 800ff5e:	2a00      	cmp	r2, #0
 800ff60:	dd08      	ble.n	800ff74 <scalbn+0x8c>
 800ff62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff6e:	ec45 4b10 	vmov	d0, r4, r5
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ff78:	da19      	bge.n	800ffae <scalbn+0xc6>
 800ff7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff7e:	429e      	cmp	r6, r3
 800ff80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ff84:	dd0a      	ble.n	800ff9c <scalbn+0xb4>
 800ff86:	a112      	add	r1, pc, #72	; (adr r1, 800ffd0 <scalbn+0xe8>)
 800ff88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e2      	bne.n	800ff56 <scalbn+0x6e>
 800ff90:	a30f      	add	r3, pc, #60	; (adr r3, 800ffd0 <scalbn+0xe8>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	f7f0 fb37 	bl	8000608 <__aeabi_dmul>
 800ff9a:	e7cb      	b.n	800ff34 <scalbn+0x4c>
 800ff9c:	a10a      	add	r1, pc, #40	; (adr r1, 800ffc8 <scalbn+0xe0>)
 800ff9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d0b8      	beq.n	800ff18 <scalbn+0x30>
 800ffa6:	a10e      	add	r1, pc, #56	; (adr r1, 800ffe0 <scalbn+0xf8>)
 800ffa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffac:	e7b4      	b.n	800ff18 <scalbn+0x30>
 800ffae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffb2:	3236      	adds	r2, #54	; 0x36
 800ffb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	4b0c      	ldr	r3, [pc, #48]	; (800fff0 <scalbn+0x108>)
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	e7e8      	b.n	800ff96 <scalbn+0xae>
 800ffc4:	f3af 8000 	nop.w
 800ffc8:	c2f8f359 	.word	0xc2f8f359
 800ffcc:	01a56e1f 	.word	0x01a56e1f
 800ffd0:	8800759c 	.word	0x8800759c
 800ffd4:	7e37e43c 	.word	0x7e37e43c
 800ffd8:	8800759c 	.word	0x8800759c
 800ffdc:	fe37e43c 	.word	0xfe37e43c
 800ffe0:	c2f8f359 	.word	0xc2f8f359
 800ffe4:	81a56e1f 	.word	0x81a56e1f
 800ffe8:	43500000 	.word	0x43500000
 800ffec:	ffff3cb0 	.word	0xffff3cb0
 800fff0:	3c900000 	.word	0x3c900000

0800fff4 <_init>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	bf00      	nop
 800fff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fffa:	bc08      	pop	{r3}
 800fffc:	469e      	mov	lr, r3
 800fffe:	4770      	bx	lr

08010000 <_fini>:
 8010000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010002:	bf00      	nop
 8010004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010006:	bc08      	pop	{r3}
 8010008:	469e      	mov	lr, r3
 801000a:	4770      	bx	lr
