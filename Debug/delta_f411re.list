
delta_f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080100c8  080100c8  000200c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00020598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801059c  0801059c  0002059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080105a0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000238  080107d8  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  080107d8  0003089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013278  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3f  00000000  00000000  000434e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00046120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00047050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018285  00000000  00000000  00047e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014222  00000000  00000000  000600cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009190b  00000000  00000000  000742ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005318  00000000  00000000  00105c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080100ac 	.word	0x080100ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	080100ac 	.word	0x080100ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <homing>:
#define TIME_OFFSET 1100
double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	homAprox = true;
 8000fbc:	4bd4      	ldr	r3, [pc, #848]	; (8001310 <homing+0x358>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000fc2:	4bd4      	ldr	r3, [pc, #848]	; (8001314 <homing+0x35c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000fc8:	4bd3      	ldr	r3, [pc, #844]	; (8001318 <homing+0x360>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000fce:	4bd3      	ldr	r3, [pc, #844]	; (800131c <homing+0x364>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000fd4:	4bd2      	ldr	r3, [pc, #840]	; (8001320 <homing+0x368>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	48d1      	ldr	r0, [pc, #836]	; (8001324 <homing+0x36c>)
 8000fe0:	f007 fcf6 	bl	80089d0 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	48cf      	ldr	r0, [pc, #828]	; (8001328 <homing+0x370>)
 8000fea:	f007 fcf1 	bl	80089d0 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	48cd      	ldr	r0, [pc, #820]	; (8001328 <homing+0x370>)
 8000ff4:	f007 fcec 	bl	80089d0 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f007 faa0 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000ffe:	2007      	movs	r0, #7
 8001000:	f007 fa9d 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001004:	2008      	movs	r0, #8
 8001006:	f007 fa9a 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 800100a:	2009      	movs	r0, #9
 800100c:	f007 fa97 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001010:	200a      	movs	r0, #10
 8001012:	f007 fa94 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001016:	2017      	movs	r0, #23
 8001018:	f007 fa91 	bl	800853e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f007 fa8e 	bl	800853e <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8001022:	2100      	movs	r1, #0
 8001024:	48c1      	ldr	r0, [pc, #772]	; (800132c <homing+0x374>)
 8001026:	f008 fd13 	bl	8009a50 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 800102a:	2100      	movs	r1, #0
 800102c:	48c0      	ldr	r0, [pc, #768]	; (8001330 <homing+0x378>)
 800102e:	f008 fd0f 	bl	8009a50 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8001032:	2100      	movs	r1, #0
 8001034:	48bf      	ldr	r0, [pc, #764]	; (8001334 <homing+0x37c>)
 8001036:	f008 fd0b 	bl	8009a50 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm));
 800103a:	4bbf      	ldr	r3, [pc, #764]	; (8001338 <homing+0x380>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa68 	bl	8000514 <__aeabi_ui2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4bbc      	ldr	r3, [pc, #752]	; (800133c <homing+0x384>)
 800104a:	f7ff f927 	bl	800029c <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	a1ad      	add	r1, pc, #692	; (adr r1, 8001308 <homing+0x350>)
 8001054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	4bb6      	ldr	r3, [pc, #728]	; (8001340 <homing+0x388>)
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <homing+0x38c>)
 8001070:	f7ff faca 	bl	8000608 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	49b2      	ldr	r1, [pc, #712]	; (8001348 <homing+0x390>)
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4ba8      	ldr	r3, [pc, #672]	; (800133c <homing+0x384>)
 800109c:	f7ff f8fc 	bl	8000298 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	49a1      	ldr	r1, [pc, #644]	; (800132c <homing+0x374>)
 80010a6:	680c      	ldr	r4, [r1, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd5c 	bl	8000b68 <__aeabi_d2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010b4:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <homing+0x380>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa2b 	bl	8000514 <__aeabi_ui2d>
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b9e      	ldr	r3, [pc, #632]	; (800133c <homing+0x384>)
 80010c4:	f7ff f8ea 	bl	800029c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	a18e      	add	r1, pc, #568	; (adr r1, 8001308 <homing+0x350>)
 80010ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d2:	f7ff fbc3 	bl	800085c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	4b98      	ldr	r3, [pc, #608]	; (8001340 <homing+0x388>)
 80010e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <homing+0x38c>)
 80010ea:	f7ff fa8d 	bl	8000608 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4994      	ldr	r1, [pc, #592]	; (8001348 <homing+0x390>)
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b89      	ldr	r3, [pc, #548]	; (800133c <homing+0x384>)
 8001116:	f7ff f8bf 	bl	8000298 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd21 	bl	8000b68 <__aeabi_d2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	4a80      	ldr	r2, [pc, #512]	; (800132c <homing+0x374>)
 800112a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm));
 800112c:	4b82      	ldr	r3, [pc, #520]	; (8001338 <homing+0x380>)
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9ef 	bl	8000514 <__aeabi_ui2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <homing+0x384>)
 800113c:	f7ff f8ae 	bl	800029c <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	a170      	add	r1, pc, #448	; (adr r1, 8001308 <homing+0x350>)
 8001146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114a:	f7ff fb87 	bl	800085c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	4b7a      	ldr	r3, [pc, #488]	; (8001340 <homing+0x388>)
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b78      	ldr	r3, [pc, #480]	; (8001344 <homing+0x38c>)
 8001162:	f7ff fa51 	bl	8000608 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4976      	ldr	r1, [pc, #472]	; (8001348 <homing+0x390>)
 8001170:	f7ff fb74 	bl	800085c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa44 	bl	8000608 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <homing+0x384>)
 800118e:	f7ff f883 	bl	8000298 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4966      	ldr	r1, [pc, #408]	; (8001330 <homing+0x378>)
 8001198:	680c      	ldr	r4, [r1, #0]
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fce3 	bl	8000b68 <__aeabi_d2uiz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011a6:	4b64      	ldr	r3, [pc, #400]	; (8001338 <homing+0x380>)
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9b2 	bl	8000514 <__aeabi_ui2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <homing+0x384>)
 80011b6:	f7ff f871 	bl	800029c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	a152      	add	r1, pc, #328	; (adr r1, 8001308 <homing+0x350>)
 80011c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011c4:	f7ff fb4a 	bl	800085c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <homing+0x388>)
 80011d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <homing+0x38c>)
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4957      	ldr	r1, [pc, #348]	; (8001348 <homing+0x390>)
 80011ea:	f7ff fb37 	bl	800085c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff fa07 	bl	8000608 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <homing+0x384>)
 8001208:	f7ff f846 	bl	8000298 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fca8 	bl	8000b68 <__aeabi_d2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	4a45      	ldr	r2, [pc, #276]	; (8001330 <homing+0x378>)
 800121c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm));
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <homing+0x380>)
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_ui2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <homing+0x384>)
 800122e:	f7ff f835 	bl	800029c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	a134      	add	r1, pc, #208	; (adr r1, 8001308 <homing+0x350>)
 8001238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <homing+0x388>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <homing+0x38c>)
 8001254:	f7ff f9d8 	bl	8000608 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4939      	ldr	r1, [pc, #228]	; (8001348 <homing+0x390>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <homing+0x384>)
 8001280:	f7ff f80a 	bl	8000298 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	492a      	ldr	r1, [pc, #168]	; (8001334 <homing+0x37c>)
 800128a:	680c      	ldr	r4, [r1, #0]
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc6a 	bl	8000b68 <__aeabi_d2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <homing+0x380>)
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f939 	bl	8000514 <__aeabi_ui2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <homing+0x384>)
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	a115      	add	r1, pc, #84	; (adr r1, 8001308 <homing+0x350>)
 80012b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b6:	f7ff fad1 	bl	800085c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <homing+0x388>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <homing+0x38c>)
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <homing+0x390>)
 80012dc:	f7ff fabe 	bl	800085c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <homing+0x384>)
 80012fa:	f7fe ffcd 	bl	8000298 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	e024      	b.n	800134c <homing+0x394>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	418e8480 	.word	0x418e8480
 8001310:	20000254 	.word	0x20000254
 8001314:	20000255 	.word	0x20000255
 8001318:	200005d0 	.word	0x200005d0
 800131c:	20000618 	.word	0x20000618
 8001320:	20000660 	.word	0x20000660
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	20000348 	.word	0x20000348
 8001330:	200003d8 	.word	0x200003d8
 8001334:	20000420 	.word	0x20000420
 8001338:	40010000 	.word	0x40010000
 800133c:	3ff00000 	.word	0x3ff00000
 8001340:	20000000 	.word	0x20000000
 8001344:	40bf4000 	.word	0x40bf4000
 8001348:	404e0000 	.word	0x404e0000
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	4ab0      	ldr	r2, [pc, #704]	; (800161c <homing+0x664>)
 800135a:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <homing+0x668>)
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d7 	bl	8000514 <__aeabi_ui2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f7ff fa75 	bl	800085c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4caa      	ldr	r4, [pc, #680]	; (8001620 <homing+0x668>)
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbf4 	bl	8000b68 <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8001384:	4ba7      	ldr	r3, [pc, #668]	; (8001624 <homing+0x66c>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8c3 	bl	8000514 <__aeabi_ui2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001396:	f7ff fa61 	bl	800085c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4ca1      	ldr	r4, [pc, #644]	; (8001624 <homing+0x66c>)
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbe0 	bl	8000b68 <__aeabi_d2uiz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 80013ac:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <homing+0x670>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013be:	f7ff fa4d 	bl	800085c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4c98      	ldr	r4, [pc, #608]	; (8001628 <homing+0x670>)
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fbcc 	bl	8000b68 <__aeabi_d2uiz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	6363      	str	r3, [r4, #52]	; 0x34


    while(homAprox){
 80013d4:	e04b      	b.n	800146e <homing+0x4b6>

        Start_PWM_MOTOR_1;
 80013d6:	2100      	movs	r1, #0
 80013d8:	4894      	ldr	r0, [pc, #592]	; (800162c <homing+0x674>)
 80013da:	f008 fa89 	bl	80098f0 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 80013de:	2100      	movs	r1, #0
 80013e0:	4893      	ldr	r0, [pc, #588]	; (8001630 <homing+0x678>)
 80013e2:	f008 fa85 	bl	80098f0 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 80013e6:	2100      	movs	r1, #0
 80013e8:	488c      	ldr	r0, [pc, #560]	; (800161c <homing+0x664>)
 80013ea:	f008 fa81 	bl	80098f0 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 80013ee:	2110      	movs	r1, #16
 80013f0:	4890      	ldr	r0, [pc, #576]	; (8001634 <homing+0x67c>)
 80013f2:	f007 fad5 	bl	80089a0 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00f      	beq.n	800141c <homing+0x464>
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	488d      	ldr	r0, [pc, #564]	; (8001638 <homing+0x680>)
 8001402:	f007 facd 	bl	80089a0 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <homing+0x464>
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4889      	ldr	r0, [pc, #548]	; (8001638 <homing+0x680>)
 8001412:	f007 fac5 	bl	80089a0 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d128      	bne.n	800146e <homing+0x4b6>
            HAL_Delay(DELAY_FC_SENSOR);
 800141c:	201e      	movs	r0, #30
 800141e:	f006 ff41 	bl	80082a4 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001422:	2110      	movs	r1, #16
 8001424:	4883      	ldr	r0, [pc, #524]	; (8001634 <homing+0x67c>)
 8001426:	f007 fabb 	bl	80089a0 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <homing+0x498>
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	4880      	ldr	r0, [pc, #512]	; (8001638 <homing+0x680>)
 8001436:	f007 fab3 	bl	80089a0 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <homing+0x498>
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	487c      	ldr	r0, [pc, #496]	; (8001638 <homing+0x680>)
 8001446:	f007 faab 	bl	80089a0 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10e      	bne.n	800146e <homing+0x4b6>

                Stop_PWM_MOTOR_1;
 8001450:	2100      	movs	r1, #0
 8001452:	4876      	ldr	r0, [pc, #472]	; (800162c <homing+0x674>)
 8001454:	f008 fafc 	bl	8009a50 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001458:	2100      	movs	r1, #0
 800145a:	4875      	ldr	r0, [pc, #468]	; (8001630 <homing+0x678>)
 800145c:	f008 faf8 	bl	8009a50 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001460:	2100      	movs	r1, #0
 8001462:	486e      	ldr	r0, [pc, #440]	; (800161c <homing+0x664>)
 8001464:	f008 faf4 	bl	8009a50 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8001468:	4b74      	ldr	r3, [pc, #464]	; (800163c <homing+0x684>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 800146e:	4b73      	ldr	r3, [pc, #460]	; (800163c <homing+0x684>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1af      	bne.n	80013d6 <homing+0x41e>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 8001476:	e14b      	b.n	8001710 <homing+0x758>

        if (ES1s_PRESSED && !motor1.hom) {
 8001478:	2110      	movs	r1, #16
 800147a:	486e      	ldr	r0, [pc, #440]	; (8001634 <homing+0x67c>)
 800147c:	f007 fa90 	bl	80089a0 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d156      	bne.n	8001534 <homing+0x57c>
 8001486:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <homing+0x688>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d152      	bne.n	8001534 <homing+0x57c>

            Stop_PWM_MOTOR_2;
 800148e:	2100      	movs	r1, #0
 8001490:	4867      	ldr	r0, [pc, #412]	; (8001630 <homing+0x678>)
 8001492:	f008 fadd 	bl	8009a50 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001496:	2100      	movs	r1, #0
 8001498:	4860      	ldr	r0, [pc, #384]	; (800161c <homing+0x664>)
 800149a:	f008 fad9 	bl	8009a50 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES1s
 800149e:	201e      	movs	r0, #30
 80014a0:	f006 ff00 	bl	80082a4 <HAL_Delay>

            while(ES1s_PRESSED){
 80014a4:	e00f      	b.n	80014c6 <homing+0x50e>

                negative_Dir_MOTOR_1;
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	4862      	ldr	r0, [pc, #392]	; (8001634 <homing+0x67c>)
 80014ac:	f007 fa90 	bl	80089d0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80014b0:	2000      	movs	r0, #0
 80014b2:	f006 fef7 	bl	80082a4 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80014b6:	2100      	movs	r1, #0
 80014b8:	485c      	ldr	r0, [pc, #368]	; (800162c <homing+0x674>)
 80014ba:	f008 fa19 	bl	80098f0 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80014be:	f240 404c 	movw	r0, #1100	; 0x44c
 80014c2:	f006 feef 	bl	80082a4 <HAL_Delay>
            while(ES1s_PRESSED){
 80014c6:	2110      	movs	r1, #16
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <homing+0x67c>)
 80014ca:	f007 fa69 	bl	80089a0 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e8      	beq.n	80014a6 <homing+0x4ee>

            }

            Stop_PWM_MOTOR_1;
 80014d4:	2100      	movs	r1, #0
 80014d6:	4855      	ldr	r0, [pc, #340]	; (800162c <homing+0x674>)
 80014d8:	f008 faba 	bl	8009a50 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <homing+0x688>)
 80014de:	2201      	movs	r2, #1
 80014e0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F1\n", 4, 100);
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	2204      	movs	r2, #4
 80014e6:	4957      	ldr	r1, [pc, #348]	; (8001644 <homing+0x68c>)
 80014e8:	4857      	ldr	r0, [pc, #348]	; (8001648 <homing+0x690>)
 80014ea:	f009 fd40 	bl	800af6e <HAL_UART_Transmit>
            HAL_Delay(DELAY_FC_SENSOR);
 80014ee:	201e      	movs	r0, #30
 80014f0:	f006 fed8 	bl	80082a4 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	484f      	ldr	r0, [pc, #316]	; (8001638 <homing+0x680>)
 80014fa:	f007 fa51 	bl	80089a0 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <homing+0x55c>
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <homing+0x694>)
 8001506:	7e1b      	ldrb	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <homing+0x55c>
 800150c:	2100      	movs	r1, #0
 800150e:	4848      	ldr	r0, [pc, #288]	; (8001630 <homing+0x678>)
 8001510:	f008 f9ee 	bl	80098f0 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001518:	4847      	ldr	r0, [pc, #284]	; (8001638 <homing+0x680>)
 800151a:	f007 fa41 	bl	80089a0 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <homing+0x57c>
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <homing+0x698>)
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <homing+0x57c>
 800152c:	2100      	movs	r1, #0
 800152e:	483b      	ldr	r0, [pc, #236]	; (800161c <homing+0x664>)
 8001530:	f008 f9de 	bl	80098f0 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	483f      	ldr	r0, [pc, #252]	; (8001638 <homing+0x680>)
 800153a:	f007 fa31 	bl	80089a0 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d156      	bne.n	80015f2 <homing+0x63a>
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <homing+0x694>)
 8001546:	7e1b      	ldrb	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d152      	bne.n	80015f2 <homing+0x63a>

            Stop_PWM_MOTOR_1;
 800154c:	2100      	movs	r1, #0
 800154e:	4837      	ldr	r0, [pc, #220]	; (800162c <homing+0x674>)
 8001550:	f008 fa7e 	bl	8009a50 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001554:	2100      	movs	r1, #0
 8001556:	4831      	ldr	r0, [pc, #196]	; (800161c <homing+0x664>)
 8001558:	f008 fa7a 	bl	8009a50 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800155c:	201e      	movs	r0, #30
 800155e:	f006 fea1 	bl	80082a4 <HAL_Delay>

            while(ES2s_PRESSED){
 8001562:	e00f      	b.n	8001584 <homing+0x5cc>

                negative_Dir_MOTOR_2;
 8001564:	2201      	movs	r2, #1
 8001566:	2102      	movs	r1, #2
 8001568:	4833      	ldr	r0, [pc, #204]	; (8001638 <homing+0x680>)
 800156a:	f007 fa31 	bl	80089d0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 800156e:	2000      	movs	r0, #0
 8001570:	f006 fe98 	bl	80082a4 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001574:	2100      	movs	r1, #0
 8001576:	482e      	ldr	r0, [pc, #184]	; (8001630 <homing+0x678>)
 8001578:	f008 f9ba 	bl	80098f0 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 800157c:	f240 404c 	movw	r0, #1100	; 0x44c
 8001580:	f006 fe90 	bl	80082a4 <HAL_Delay>
            while(ES2s_PRESSED){
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	482b      	ldr	r0, [pc, #172]	; (8001638 <homing+0x680>)
 800158a:	f007 fa09 	bl	80089a0 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e7      	beq.n	8001564 <homing+0x5ac>

            }

            Stop_PWM_MOTOR_2;
 8001594:	2100      	movs	r1, #0
 8001596:	4826      	ldr	r0, [pc, #152]	; (8001630 <homing+0x678>)
 8001598:	f008 fa5a 	bl	8009a50 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <homing+0x694>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F2\n", 4, 100);
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2204      	movs	r2, #4
 80015a6:	492b      	ldr	r1, [pc, #172]	; (8001654 <homing+0x69c>)
 80015a8:	4827      	ldr	r0, [pc, #156]	; (8001648 <homing+0x690>)
 80015aa:	f009 fce0 	bl	800af6e <HAL_UART_Transmit>
            HAL_Delay(DELAY_FC_SENSOR);
 80015ae:	201e      	movs	r0, #30
 80015b0:	f006 fe78 	bl	80082a4 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80015b4:	2110      	movs	r1, #16
 80015b6:	481f      	ldr	r0, [pc, #124]	; (8001634 <homing+0x67c>)
 80015b8:	f007 f9f2 	bl	80089a0 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <homing+0x61a>
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <homing+0x688>)
 80015c4:	7e1b      	ldrb	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <homing+0x61a>
 80015ca:	2100      	movs	r1, #0
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <homing+0x674>)
 80015ce:	f008 f98f 	bl	80098f0 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <homing+0x680>)
 80015d8:	f007 f9e2 	bl	80089a0 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <homing+0x63a>
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <homing+0x698>)
 80015e4:	7e1b      	ldrb	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <homing+0x63a>
 80015ea:	2100      	movs	r1, #0
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <homing+0x664>)
 80015ee:	f008 f97f 	bl	80098f0 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <homing+0x680>)
 80015f8:	f007 f9d2 	bl	80089a0 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d171      	bne.n	80016e6 <homing+0x72e>

            Stop_PWM_MOTOR_1;
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <homing+0x674>)
 8001606:	f008 fa23 	bl	8009a50 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <homing+0x678>)
 800160e:	f008 fa1f 	bl	8009a50 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001612:	201e      	movs	r0, #30
 8001614:	f006 fe46 	bl	80082a4 <HAL_Delay>

            while(ES3s_PRESSED){
 8001618:	e02e      	b.n	8001678 <homing+0x6c0>
 800161a:	bf00      	nop
 800161c:	20000420 	.word	0x20000420
 8001620:	40010000 	.word	0x40010000
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800
 800162c:	20000348 	.word	0x20000348
 8001630:	200003d8 	.word	0x200003d8
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	20000254 	.word	0x20000254
 8001640:	200005d0 	.word	0x200005d0
 8001644:	080100c8 	.word	0x080100c8
 8001648:	20000588 	.word	0x20000588
 800164c:	20000618 	.word	0x20000618
 8001650:	20000660 	.word	0x20000660
 8001654:	080100cc 	.word	0x080100cc

                negative_Dir_MOTOR_3;
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4830      	ldr	r0, [pc, #192]	; (8001720 <homing+0x768>)
 800165e:	f007 f9b7 	bl	80089d0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 8001662:	2000      	movs	r0, #0
 8001664:	f006 fe1e 	bl	80082a4 <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001668:	2100      	movs	r1, #0
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <homing+0x76c>)
 800166c:	f008 f940 	bl	80098f0 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 8001670:	f240 404c 	movw	r0, #1100	; 0x44c
 8001674:	f006 fe16 	bl	80082a4 <HAL_Delay>
            while(ES3s_PRESSED){
 8001678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167c:	4828      	ldr	r0, [pc, #160]	; (8001720 <homing+0x768>)
 800167e:	f007 f98f 	bl	80089a0 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0e7      	beq.n	8001658 <homing+0x6a0>
            }

            Stop_PWM_MOTOR_3;
 8001688:	2100      	movs	r1, #0
 800168a:	4826      	ldr	r0, [pc, #152]	; (8001724 <homing+0x76c>)
 800168c:	f008 f9e0 	bl	8009a50 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <homing+0x770>)
 8001692:	2201      	movs	r2, #1
 8001694:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F3\n", 4, 100);
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	2204      	movs	r2, #4
 800169a:	4924      	ldr	r1, [pc, #144]	; (800172c <homing+0x774>)
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <homing+0x778>)
 800169e:	f009 fc66 	bl	800af6e <HAL_UART_Transmit>
			HAL_Delay(DELAY_FC_SENSOR);
 80016a2:	201e      	movs	r0, #30
 80016a4:	f006 fdfe 	bl	80082a4 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80016a8:	2110      	movs	r1, #16
 80016aa:	4822      	ldr	r0, [pc, #136]	; (8001734 <homing+0x77c>)
 80016ac:	f007 f978 	bl	80089a0 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <homing+0x70e>
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <homing+0x780>)
 80016b8:	7e1b      	ldrb	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <homing+0x70e>
 80016be:	2100      	movs	r1, #0
 80016c0:	481e      	ldr	r0, [pc, #120]	; (800173c <homing+0x784>)
 80016c2:	f008 f915 	bl	80098f0 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4815      	ldr	r0, [pc, #84]	; (8001720 <homing+0x768>)
 80016cc:	f007 f968 	bl	80089a0 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <homing+0x72e>
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <homing+0x788>)
 80016d8:	7e1b      	ldrb	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <homing+0x72e>
 80016de:	2100      	movs	r1, #0
 80016e0:	4818      	ldr	r0, [pc, #96]	; (8001744 <homing+0x78c>)
 80016e2:	f008 f905 	bl	80098f0 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <homing+0x780>)
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <homing+0x758>
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <homing+0x788>)
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <homing+0x758>
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <homing+0x770>)
 80016f8:	7e1b      	ldrb	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <homing+0x758>
        	homFin=true;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <homing+0x790>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2,(uint8_t *)"FH\n", 4, 100);
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	2204      	movs	r2, #4
 8001708:	4910      	ldr	r1, [pc, #64]	; (800174c <homing+0x794>)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <homing+0x778>)
 800170c:	f009 fc2f 	bl	800af6e <HAL_UART_Transmit>
    while (!homFin){
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <homing+0x790>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f43f aeaf 	beq.w	8001478 <homing+0x4c0>
        }
       }


    }
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	40020800 	.word	0x40020800
 8001724:	20000420 	.word	0x20000420
 8001728:	20000660 	.word	0x20000660
 800172c:	080100d0 	.word	0x080100d0
 8001730:	20000588 	.word	0x20000588
 8001734:	40020400 	.word	0x40020400
 8001738:	200005d0 	.word	0x200005d0
 800173c:	20000348 	.word	0x20000348
 8001740:	20000618 	.word	0x20000618
 8001744:	200003d8 	.word	0x200003d8
 8001748:	200006b2 	.word	0x200006b2
 800174c:	080100d4 	.word	0x080100d4

08001750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
}
 8001758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SystemReset+0x24>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001762:	4904      	ldr	r1, [pc, #16]	; (8001774 <__NVIC_SystemReset+0x24>)
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_SystemReset+0x28>)
 8001766:	4313      	orrs	r3, r2
 8001768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800176a:	f3bf 8f4f 	dsb	sy
}
 800176e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <__NVIC_SystemReset+0x20>
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	05fa0004 	.word	0x05fa0004

0800177c <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <interpretaComando+0x258>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3b48      	subs	r3, #72	; 0x48
 8001788:	2b2a      	cmp	r3, #42	; 0x2a
 800178a:	f200 816f 	bhi.w	8001a6c <interpretaComando+0x2f0>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <interpretaComando+0x18>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001841 	.word	0x08001841
 8001798:	08001a6d 	.word	0x08001a6d
 800179c:	08001a6d 	.word	0x08001a6d
 80017a0:	08001a6d 	.word	0x08001a6d
 80017a4:	08001a6d 	.word	0x08001a6d
 80017a8:	08001a6d 	.word	0x08001a6d
 80017ac:	08001a6d 	.word	0x08001a6d
 80017b0:	08001a6d 	.word	0x08001a6d
 80017b4:	08001849 	.word	0x08001849
 80017b8:	08001a6d 	.word	0x08001a6d
 80017bc:	08001a5d 	.word	0x08001a5d
 80017c0:	08001a6d 	.word	0x08001a6d
 80017c4:	08001a6d 	.word	0x08001a6d
 80017c8:	08001a6d 	.word	0x08001a6d
 80017cc:	08001a6d 	.word	0x08001a6d
 80017d0:	08001a6d 	.word	0x08001a6d
 80017d4:	08001a6d 	.word	0x08001a6d
 80017d8:	08001a6d 	.word	0x08001a6d
 80017dc:	08001a6d 	.word	0x08001a6d
 80017e0:	08001a6d 	.word	0x08001a6d
 80017e4:	08001a6d 	.word	0x08001a6d
 80017e8:	08001a6d 	.word	0x08001a6d
 80017ec:	08001a6d 	.word	0x08001a6d
 80017f0:	08001a6d 	.word	0x08001a6d
 80017f4:	08001a6d 	.word	0x08001a6d
 80017f8:	08001a6d 	.word	0x08001a6d
 80017fc:	08001a6d 	.word	0x08001a6d
 8001800:	08001a6d 	.word	0x08001a6d
 8001804:	08001a6d 	.word	0x08001a6d
 8001808:	08001a6d 	.word	0x08001a6d
 800180c:	08001a6d 	.word	0x08001a6d
 8001810:	08001a6d 	.word	0x08001a6d
 8001814:	08001841 	.word	0x08001841
 8001818:	08001a6d 	.word	0x08001a6d
 800181c:	08001a6d 	.word	0x08001a6d
 8001820:	08001a6d 	.word	0x08001a6d
 8001824:	08001a6d 	.word	0x08001a6d
 8001828:	08001a6d 	.word	0x08001a6d
 800182c:	08001a6d 	.word	0x08001a6d
 8001830:	08001a6d 	.word	0x08001a6d
 8001834:	08001849 	.word	0x08001849
 8001838:	08001a6d 	.word	0x08001a6d
 800183c:	08001a5d 	.word	0x08001a5d


	case 'H':
	case 'h':
		state = HOME;
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <interpretaComando+0x25c>)
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
	break;
 8001846:	e112      	b.n	8001a6e <interpretaComando+0x2f2>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001848:	4b64      	ldr	r3, [pc, #400]	; (80019dc <interpretaComando+0x260>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]
		j = 0;
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <interpretaComando+0x264>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001854:	e0f3      	b.n	8001a3e <interpretaComando+0x2c2>
			if(rx_buffer[i] == 'x'){
 8001856:	4b61      	ldr	r3, [pc, #388]	; (80019dc <interpretaComando+0x260>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5e      	ldr	r2, [pc, #376]	; (80019d4 <interpretaComando+0x258>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	2b78      	cmp	r3, #120	; 0x78
 8001860:	d13d      	bne.n	80018de <interpretaComando+0x162>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001862:	e012      	b.n	800188a <interpretaComando+0x10e>
					auxString[j] = rx_buffer[i+1];
 8001864:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <interpretaComando+0x260>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <interpretaComando+0x264>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4959      	ldr	r1, [pc, #356]	; (80019d4 <interpretaComando+0x258>)
 8001870:	5c89      	ldrb	r1, [r1, r2]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <interpretaComando+0x268>)
 8001874:	54d1      	strb	r1, [r2, r3]
					j++;
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <interpretaComando+0x264>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <interpretaComando+0x264>)
 800187e:	6013      	str	r3, [r2, #0]
					i++;
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <interpretaComando+0x260>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a55      	ldr	r2, [pc, #340]	; (80019dc <interpretaComando+0x260>)
 8001888:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <interpretaComando+0x260>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <interpretaComando+0x258>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	2b20      	cmp	r3, #32
 8001896:	d1e5      	bne.n	8001864 <interpretaComando+0xe8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8001898:	2100      	movs	r1, #0
 800189a:	4852      	ldr	r0, [pc, #328]	; (80019e4 <interpretaComando+0x268>)
 800189c:	f00b f9de 	bl	800cc5c <strtod>
 80018a0:	eeb0 7a40 	vmov.f32	s14, s0
 80018a4:	eef0 7a60 	vmov.f32	s15, s1
 80018a8:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <interpretaComando+0x26c>)
 80018aa:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e007      	b.n	80018c4 <interpretaComando+0x148>
					auxString[k] = 0;
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <interpretaComando+0x268>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	ddf4      	ble.n	80018b4 <interpretaComando+0x138>
				}
				j=0;
 80018ca:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <interpretaComando+0x264>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *)"Px_ok\n", 7, 100);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	2207      	movs	r2, #7
 80018d4:	4945      	ldr	r1, [pc, #276]	; (80019ec <interpretaComando+0x270>)
 80018d6:	4846      	ldr	r0, [pc, #280]	; (80019f0 <interpretaComando+0x274>)
 80018d8:	f009 fb49 	bl	800af6e <HAL_UART_Transmit>
 80018dc:	e0aa      	b.n	8001a34 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'y'){
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <interpretaComando+0x260>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <interpretaComando+0x258>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	2b79      	cmp	r3, #121	; 0x79
 80018e8:	d13d      	bne.n	8001966 <interpretaComando+0x1ea>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018ea:	e012      	b.n	8001912 <interpretaComando+0x196>
					auxString[j] = rx_buffer[i+1];
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <interpretaComando+0x260>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <interpretaComando+0x264>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4937      	ldr	r1, [pc, #220]	; (80019d4 <interpretaComando+0x258>)
 80018f8:	5c89      	ldrb	r1, [r1, r2]
 80018fa:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <interpretaComando+0x268>)
 80018fc:	54d1      	strb	r1, [r2, r3]
					j++;
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <interpretaComando+0x264>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <interpretaComando+0x264>)
 8001906:	6013      	str	r3, [r2, #0]
					i++;
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <interpretaComando+0x260>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <interpretaComando+0x260>)
 8001910:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <interpretaComando+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <interpretaComando+0x258>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b20      	cmp	r3, #32
 800191e:	d1e5      	bne.n	80018ec <interpretaComando+0x170>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001920:	2100      	movs	r1, #0
 8001922:	4830      	ldr	r0, [pc, #192]	; (80019e4 <interpretaComando+0x268>)
 8001924:	f00b f99a 	bl	800cc5c <strtod>
 8001928:	eeb0 7a40 	vmov.f32	s14, s0
 800192c:	eef0 7a60 	vmov.f32	s15, s1
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <interpretaComando+0x26c>)
 8001932:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	e007      	b.n	800194c <interpretaComando+0x1d0>
					auxString[k] = 0;
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <interpretaComando+0x268>)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	4413      	add	r3, r2
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b0a      	cmp	r3, #10
 8001950:	ddf4      	ble.n	800193c <interpretaComando+0x1c0>
				}
				j=0;
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <interpretaComando+0x264>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Py_ok\n", 7, 100);
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	2207      	movs	r2, #7
 800195c:	4925      	ldr	r1, [pc, #148]	; (80019f4 <interpretaComando+0x278>)
 800195e:	4824      	ldr	r0, [pc, #144]	; (80019f0 <interpretaComando+0x274>)
 8001960:	f009 fb05 	bl	800af6e <HAL_UART_Transmit>
 8001964:	e066      	b.n	8001a34 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'z'){
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <interpretaComando+0x260>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <interpretaComando+0x258>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	2b7a      	cmp	r3, #122	; 0x7a
 8001970:	d160      	bne.n	8001a34 <interpretaComando+0x2b8>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001972:	e012      	b.n	800199a <interpretaComando+0x21e>
					auxString[j] = rx_buffer[i+1];
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <interpretaComando+0x260>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <interpretaComando+0x264>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4915      	ldr	r1, [pc, #84]	; (80019d4 <interpretaComando+0x258>)
 8001980:	5c89      	ldrb	r1, [r1, r2]
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <interpretaComando+0x268>)
 8001984:	54d1      	strb	r1, [r2, r3]
					j++;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <interpretaComando+0x264>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <interpretaComando+0x264>)
 800198e:	6013      	str	r3, [r2, #0]
					i++;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <interpretaComando+0x260>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <interpretaComando+0x260>)
 8001998:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <interpretaComando+0x260>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <interpretaComando+0x258>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d006      	beq.n	80019b6 <interpretaComando+0x23a>
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <interpretaComando+0x260>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <interpretaComando+0x258>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1de      	bne.n	8001974 <interpretaComando+0x1f8>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80019b6:	2100      	movs	r1, #0
 80019b8:	480a      	ldr	r0, [pc, #40]	; (80019e4 <interpretaComando+0x268>)
 80019ba:	f00b f94f 	bl	800cc5c <strtod>
 80019be:	eeb0 7a40 	vmov.f32	s14, s0
 80019c2:	eef0 7a60 	vmov.f32	s15, s1
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <interpretaComando+0x26c>)
 80019c8:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	e01a      	b.n	8001a08 <interpretaComando+0x28c>
 80019d2:	bf00      	nop
 80019d4:	200007dc 	.word	0x200007dc
 80019d8:	200006b1 	.word	0x200006b1
 80019dc:	20000264 	.word	0x20000264
 80019e0:	20000268 	.word	0x20000268
 80019e4:	20000258 	.word	0x20000258
 80019e8:	20000718 	.word	0x20000718
 80019ec:	080100d8 	.word	0x080100d8
 80019f0:	20000588 	.word	0x20000588
 80019f4:	080100e0 	.word	0x080100e0
					auxString[k] = 0;
 80019f8:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <interpretaComando+0x2fc>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3301      	adds	r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	ddf4      	ble.n	80019f8 <interpretaComando+0x27c>
				}
				j=0;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <interpretaComando+0x300>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Pz_ok\n", 7, 100);
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	2207      	movs	r2, #7
 8001a18:	4919      	ldr	r1, [pc, #100]	; (8001a80 <interpretaComando+0x304>)
 8001a1a:	481a      	ldr	r0, [pc, #104]	; (8001a84 <interpretaComando+0x308>)
 8001a1c:	f009 faa7 	bl	800af6e <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <interpretaComando+0x30c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <interpretaComando+0x310>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d102      	bne.n	8001a34 <interpretaComando+0x2b8>
				    newline_detected = true;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <interpretaComando+0x314>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <interpretaComando+0x30c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <interpretaComando+0x30c>)
 8001a3c:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <interpretaComando+0x30c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <interpretaComando+0x310>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <interpretaComando+0x2d8>
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <interpretaComando+0x314>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f43f af01 	beq.w	8001856 <interpretaComando+0xda>
		}

		receptionFlag = true;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <interpretaComando+0x318>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
		break;
 8001a5a:	e008      	b.n	8001a6e <interpretaComando+0x2f2>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart2, (uint8_t *)"Resetting...\n", 14, 100);
 8001a5c:	2364      	movs	r3, #100	; 0x64
 8001a5e:	220e      	movs	r2, #14
 8001a60:	490d      	ldr	r1, [pc, #52]	; (8001a98 <interpretaComando+0x31c>)
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <interpretaComando+0x308>)
 8001a64:	f009 fa83 	bl	800af6e <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001a68:	f7ff fe72 	bl	8001750 <__NVIC_SystemReset>

		break;


	default:break;
 8001a6c:	bf00      	nop


	}

}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000258 	.word	0x20000258
 8001a7c:	20000268 	.word	0x20000268
 8001a80:	080100e8 	.word	0x080100e8
 8001a84:	20000588 	.word	0x20000588
 8001a88:	20000264 	.word	0x20000264
 8001a8c:	200007dc 	.word	0x200007dc
 8001a90:	20000256 	.word	0x20000256
 8001a94:	200007fb 	.word	0x200007fb
 8001a98:	080100f0 	.word	0x080100f0
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	b090      	sub	sp, #64	; 0x40
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	eeb0 5a40 	vmov.f32	s10, s0
 8001aac:	eef0 5a60 	vmov.f32	s11, s1
 8001ab0:	eeb0 6a41 	vmov.f32	s12, s2
 8001ab4:	eef0 6a61 	vmov.f32	s13, s3
 8001ab8:	eeb0 7a42 	vmov.f32	s14, s4
 8001abc:	eef0 7a62 	vmov.f32	s15, s5
 8001ac0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001ac4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001ac8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001acc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ad0:	a3f3      	add	r3, pc, #972	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fbdf 	bl	8000298 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	a3ed      	add	r3, pc, #948	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fbd8 	bl	800029c <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001afc:	f7fe fd84 	bl	8000608 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	f7fe fbc4 	bl	800029c <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fe9e 	bl	800085c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	ec43 2b17 	vmov	d7, r2, r3
 8001b28:	ed9f 1bcf 	vldr	d1, [pc, #828]	; 8001e68 <inverseKinematic+0x3c8>
 8001b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b30:	eef0 0a67 	vmov.f32	s1, s15
 8001b34:	f00d f960 	bl	800edf8 <pow>
 8001b38:	ec51 0b10 	vmov	r0, r1, d0
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4be1      	ldr	r3, [pc, #900]	; (8001ec8 <inverseKinematic+0x428>)
 8001b42:	f7fe fbab 	bl	800029c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4bdf      	ldr	r3, [pc, #892]	; (8001ecc <inverseKinematic+0x42c>)
 8001b50:	e9c3 0100 	strd	r0, r1, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001b54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b58:	a3c5      	add	r3, pc, #788	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb9d 	bl	800029c <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001e78 <inverseKinematic+0x3d8>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd4a 	bl	8000608 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	a1c1      	add	r1, pc, #772	; (adr r1, 8001e80 <inverseKinematic+0x3e0>)
 8001b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b7e:	f7fe fb8b 	bl	8000298 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b8e:	a3be      	add	r3, pc, #760	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb82 	bl	800029c <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	f7fe fb7a 	bl	800029c <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb72 	bl	8000298 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f7fe fb6a 	bl	800029c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fe44 	bl	800085c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b17 	vmov	d7, r2, r3
 8001bdc:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8001e68 <inverseKinematic+0x3c8>
 8001be0:	eeb0 0a47 	vmov.f32	s0, s14
 8001be4:	eef0 0a67 	vmov.f32	s1, s15
 8001be8:	f00d f906 	bl	800edf8 <pow>
 8001bec:	ec51 0b10 	vmov	r0, r1, d0
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4bb6      	ldr	r3, [pc, #728]	; (8001ed0 <inverseKinematic+0x430>)
 8001bf6:	f7fe fb51 	bl	800029c <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	4bb4      	ldr	r3, [pc, #720]	; (8001ed4 <inverseKinematic+0x434>)
 8001c04:	e9c3 0100 	strd	r0, r1, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001c08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c0c:	a398      	add	r3, pc, #608	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fb41 	bl	8000298 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	a396      	add	r3, pc, #600	; (adr r3, 8001e78 <inverseKinematic+0x3d8>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fcf0 	bl	8000608 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c34:	a394      	add	r3, pc, #592	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fb2f 	bl	800029c <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	f7fe fb27 	bl	800029c <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb1f 	bl	8000298 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	a38b      	add	r3, pc, #556	; (adr r3, 8001e90 <inverseKinematic+0x3f0>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fb18 	bl	800029c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	a388      	add	r3, pc, #544	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fb0f 	bl	800029c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4614      	mov	r4, r2
 8001c84:	461d      	mov	r5, r3
 8001c86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	f7fe fb05 	bl	800029c <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fddf 	bl	800085c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b17 	vmov	d7, r2, r3
 8001ca6:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001e68 <inverseKinematic+0x3c8>
 8001caa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cae:	eef0 0a67 	vmov.f32	s1, s15
 8001cb2:	f00d f8a1 	bl	800edf8 <pow>
 8001cb6:	ec51 0b10 	vmov	r0, r1, d0
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <inverseKinematic+0x430>)
 8001cc0:	f7fe faec 	bl	800029c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4b82      	ldr	r3, [pc, #520]	; (8001ed8 <inverseKinematic+0x438>)
 8001cce:	e9c3 0100 	strd	r0, r1, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001cd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cd6:	a372      	add	r3, pc, #456	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fadc 	bl	8000298 <__aeabi_dsub>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	a36b      	add	r3, pc, #428	; (adr r3, 8001e98 <inverseKinematic+0x3f8>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fad5 	bl	800029c <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d02:	f7fe fc81 	bl	8000608 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	f7fe fac1 	bl	800029c <__adddf3>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fd9b 	bl	800085c <__aeabi_ddiv>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f7fe fab3 	bl	800029c <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d42:	a357      	add	r3, pc, #348	; (adr r3, 8001ea0 <inverseKinematic+0x400>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe faa6 	bl	8000298 <__aeabi_dsub>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	ec43 2b17 	vmov	d7, r2, r3
 8001d54:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001e68 <inverseKinematic+0x3c8>
 8001d58:	eeb0 0a47 	vmov.f32	s0, s14
 8001d5c:	eef0 0a67 	vmov.f32	s1, s15
 8001d60:	f00d f84a 	bl	800edf8 <pow>
 8001d64:	ec51 0b10 	vmov	r0, r1, d0
 8001d68:	a34f      	add	r3, pc, #316	; (adr r3, 8001ea8 <inverseKinematic+0x408>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fa95 	bl	800029c <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4614      	mov	r4, r2
 8001d78:	461d      	mov	r5, r3
 8001d7a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001d7e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001e68 <inverseKinematic+0x3c8>
 8001d82:	eeb0 0a47 	vmov.f32	s0, s14
 8001d86:	eef0 0a67 	vmov.f32	s1, s15
 8001d8a:	f00d f835 	bl	800edf8 <pow>
 8001d8e:	ec53 2b10 	vmov	r2, r3, d0
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa81 	bl	800029c <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a343      	add	r3, pc, #268	; (adr r3, 8001eb0 <inverseKinematic+0x410>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fa76 	bl	8000298 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001db8:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001e68 <inverseKinematic+0x3c8>
 8001dbc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc0:	eef0 0a67 	vmov.f32	s1, s15
 8001dc4:	f00d f818 	bl	800edf8 <pow>
 8001dc8:	ec53 2b10 	vmov	r2, r3, d0
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fa64 	bl	800029c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	f7fe fa5a 	bl	800029c <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fd34 	bl	800085c <__aeabi_ddiv>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4640      	mov	r0, r8
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	a32b      	add	r3, pc, #172	; (adr r3, 8001eb8 <inverseKinematic+0x418>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fa45 	bl	800029c <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <inverseKinematic+0x43c>)
 8001e1c:	e9c3 0100 	strd	r0, r1, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e24:	a312      	add	r3, pc, #72	; (adr r3, 8001e70 <inverseKinematic+0x3d0>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fa37 	bl	800029c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	a322      	add	r3, pc, #136	; (adr r3, 8001ec0 <inverseKinematic+0x420>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbe4 	bl	8000608 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4614      	mov	r4, r2
 8001e46:	461d      	mov	r5, r3
 8001e48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e4c:	a30e      	add	r3, pc, #56	; (adr r3, 8001e88 <inverseKinematic+0x3e8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fa23 	bl	800029c <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e03d      	b.n	8001ee0 <inverseKinematic+0x440>
 8001e64:	f3af 8000 	nop.w
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	40000000 	.word	0x40000000
 8001e70:	5625749b 	.word	0x5625749b
 8001e74:	3faf09d1 	.word	0x3faf09d1
 8001e78:	e8584caa 	.word	0xe8584caa
 8001e7c:	400bb67a 	.word	0x400bb67a
 8001e80:	24dd2f1d 	.word	0x24dd2f1d
 8001e84:	3fe58106 	.word	0x3fe58106
 8001e88:	1eb851ec 	.word	0x1eb851ec
 8001e8c:	3fa1eb85 	.word	0x3fa1eb85
 8001e90:	9ba5e356 	.word	0x9ba5e356
 8001e94:	3fe020c4 	.word	0x3fe020c4
 8001e98:	24dd2f1b 	.word	0x24dd2f1b
 8001e9c:	3fc58106 	.word	0x3fc58106
 8001ea0:	1eb851ec 	.word	0x1eb851ec
 8001ea4:	3fb1eb85 	.word	0x3fb1eb85
 8001ea8:	f705857e 	.word	0xf705857e
 8001eac:	3f881e03 	.word	0x3f881e03
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fd70a3d 	.word	0x3fd70a3d
 8001eb8:	24dd2f1b 	.word	0x24dd2f1b
 8001ebc:	3fd58106 	.word	0x3fd58106
 8001ec0:	e8584caa 	.word	0xe8584caa
 8001ec4:	c00bb67a 	.word	0xc00bb67a
 8001ec8:	3ff00000 	.word	0x3ff00000
 8001ecc:	20000270 	.word	0x20000270
 8001ed0:	40100000 	.word	0x40100000
 8001ed4:	200002b8 	.word	0x200002b8
 8001ed8:	20000300 	.word	0x20000300
 8001edc:	20000278 	.word	0x20000278
 8001ee0:	f7fe f9dc 	bl	800029c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe f9d4 	bl	8000298 <__aeabi_dsub>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe f9cc 	bl	800029c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	f7fe f9c2 	bl	800029c <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fc9c 	bl	800085c <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	f7fe f9b4 	bl	800029c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4690      	mov	r8, r2
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f40:	a3ed      	add	r3, pc, #948	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	ec43 2b17 	vmov	d7, r2, r3
 8001f52:	ed9f 1be7 	vldr	d1, [pc, #924]	; 80022f0 <inverseKinematic+0x850>
 8001f56:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5a:	eef0 0a67 	vmov.f32	s1, s15
 8001f5e:	f00c ff4b 	bl	800edf8 <pow>
 8001f62:	ec51 0b10 	vmov	r0, r1, d0
 8001f66:	a3fa      	add	r3, pc, #1000	; (adr r3, 8002350 <inverseKinematic+0x8b0>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe f996 	bl	800029c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4614      	mov	r4, r2
 8001f76:	461d      	mov	r5, r3
 8001f78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f7c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002308 <inverseKinematic+0x868>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe f98b 	bl	800029c <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b17 	vmov	d7, r2, r3
 8001f8e:	ed9f 1bd8 	vldr	d1, [pc, #864]	; 80022f0 <inverseKinematic+0x850>
 8001f92:	eeb0 0a47 	vmov.f32	s0, s14
 8001f96:	eef0 0a67 	vmov.f32	s1, s15
 8001f9a:	f00c ff2d 	bl	800edf8 <pow>
 8001f9e:	ec53 2b10 	vmov	r2, r3, d0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe f979 	bl	800029c <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001fb6:	ed9f 1bce 	vldr	d1, [pc, #824]	; 80022f0 <inverseKinematic+0x850>
 8001fba:	eeb0 0a47 	vmov.f32	s0, s14
 8001fbe:	eef0 0a67 	vmov.f32	s1, s15
 8001fc2:	f00c ff19 	bl	800edf8 <pow>
 8001fc6:	ec53 2b10 	vmov	r2, r3, d0
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe f965 	bl	800029c <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	a3d1      	add	r3, pc, #836	; (adr r3, 8002320 <inverseKinematic+0x880>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe f95a 	bl	8000298 <__aeabi_dsub>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f7fe f952 	bl	800029c <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fc2c 	bl	800085c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4640      	mov	r0, r8
 800200a:	4649      	mov	r1, r9
 800200c:	f7fe fafc 	bl	8000608 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	a3c7      	add	r3, pc, #796	; (adr r3, 8002338 <inverseKinematic+0x898>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f93b 	bl	8000298 <__aeabi_dsub>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	4bc7      	ldr	r3, [pc, #796]	; (8002348 <inverseKinematic+0x8a8>)
 800202c:	e9c3 0100 	strd	r0, r1, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002030:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002034:	a3b0      	add	r3, pc, #704	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe f92d 	bl	8000298 <__aeabi_dsub>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	a3ae      	add	r3, pc, #696	; (adr r3, 8002300 <inverseKinematic+0x860>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fadc 	bl	8000608 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800205c:	a3aa      	add	r3, pc, #680	; (adr r3, 8002308 <inverseKinematic+0x868>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe f91b 	bl	800029c <__adddf3>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f7fe f913 	bl	800029c <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4620      	mov	r0, r4
 800207c:	4629      	mov	r1, r5
 800207e:	f7fe f90b 	bl	8000298 <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	a3a1      	add	r3, pc, #644	; (adr r3, 8002310 <inverseKinematic+0x870>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe f904 	bl	800029c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	a39e      	add	r3, pc, #632	; (adr r3, 8002318 <inverseKinematic+0x878>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe f8fb 	bl	800029c <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	f7fe f8f1 	bl	800029c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fbcb 	bl	800085c <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	f7fe f8e3 	bl	800029c <__adddf3>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4690      	mov	r8, r2
 80020dc:	4699      	mov	r9, r3
 80020de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e2:	a385      	add	r3, pc, #532	; (adr r3, 80022f8 <inverseKinematic+0x858>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe f8d6 	bl	8000298 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b17 	vmov	d7, r2, r3
 80020f4:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 80022f0 <inverseKinematic+0x850>
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	f00c fe7a 	bl	800edf8 <pow>
 8002104:	ec55 4b10 	vmov	r4, r5, d0
 8002108:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800210c:	a37e      	add	r3, pc, #504	; (adr r3, 8002308 <inverseKinematic+0x868>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe f8c3 	bl	800029c <__adddf3>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ec43 2b17 	vmov	d7, r2, r3
 800211e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80022f0 <inverseKinematic+0x850>
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	eef0 0a67 	vmov.f32	s1, s15
 800212a:	f00c fe65 	bl	800edf8 <pow>
 800212e:	ec53 2b10 	vmov	r2, r3, d0
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8b1 	bl	800029c <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002146:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80022f0 <inverseKinematic+0x850>
 800214a:	eeb0 0a47 	vmov.f32	s0, s14
 800214e:	eef0 0a67 	vmov.f32	s1, s15
 8002152:	f00c fe51 	bl	800edf8 <pow>
 8002156:	ec53 2b10 	vmov	r2, r3, d0
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f89d 	bl	800029c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	a36d      	add	r3, pc, #436	; (adr r3, 8002320 <inverseKinematic+0x880>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f892 	bl	8000298 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a36a      	add	r3, pc, #424	; (adr r3, 8002328 <inverseKinematic+0x888>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f889 	bl	8000298 <__aeabi_dsub>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	a368      	add	r3, pc, #416	; (adr r3, 8002330 <inverseKinematic+0x890>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe f882 	bl	800029c <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4614      	mov	r4, r2
 800219e:	461d      	mov	r5, r3
 80021a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	f7fe f878 	bl	800029c <__adddf3>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe fb52 	bl	800085c <__aeabi_ddiv>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4640      	mov	r0, r8
 80021be:	4649      	mov	r1, r9
 80021c0:	f7fe fa22 	bl	8000608 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	a35a      	add	r3, pc, #360	; (adr r3, 8002338 <inverseKinematic+0x898>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe f861 	bl	8000298 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <inverseKinematic+0x8ac>)
 80021e0:	e9c3 0100 	strd	r0, r1, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 80021e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021e8:	a355      	add	r3, pc, #340	; (adr r3, 8002340 <inverseKinematic+0x8a0>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f853 	bl	8000298 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ec43 2b17 	vmov	d7, r2, r3
 80021fa:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80022f0 <inverseKinematic+0x850>
 80021fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002202:	eef0 0a67 	vmov.f32	s1, s15
 8002206:	f00c fdf7 	bl	800edf8 <pow>
 800220a:	ec55 4b10 	vmov	r4, r5, d0
 800220e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002212:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80022f0 <inverseKinematic+0x850>
 8002216:	eeb0 0a47 	vmov.f32	s0, s14
 800221a:	eef0 0a67 	vmov.f32	s1, s15
 800221e:	f00c fdeb 	bl	800edf8 <pow>
 8002222:	ec53 2b10 	vmov	r2, r3, d0
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f837 	bl	800029c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	a33a      	add	r3, pc, #232	; (adr r3, 8002320 <inverseKinematic+0x880>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f82c 	bl	8000298 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4614      	mov	r4, r2
 8002246:	461d      	mov	r5, r3
 8002248:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800224c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80022f0 <inverseKinematic+0x850>
 8002250:	eeb0 0a47 	vmov.f32	s0, s14
 8002254:	eef0 0a67 	vmov.f32	s1, s15
 8002258:	f00c fdce 	bl	800edf8 <pow>
 800225c:	ec53 2b10 	vmov	r2, r3, d0
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f81a 	bl	800029c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	a32d      	add	r3, pc, #180	; (adr r3, 8002328 <inverseKinematic+0x888>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	f7fe f80f 	bl	8000298 <__aeabi_dsub>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	a32b      	add	r3, pc, #172	; (adr r3, 8002330 <inverseKinematic+0x890>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f808 	bl	800029c <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4614      	mov	r4, r2
 8002292:	461d      	mov	r5, r3
 8002294:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	f7fd fffe 	bl	800029c <__adddf3>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4620      	mov	r0, r4
 80022a6:	4629      	mov	r1, r5
 80022a8:	f7fe fad8 	bl	800085c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ec43 2b17 	vmov	d7, r2, r3
 80022b4:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80022f0 <inverseKinematic+0x850>
 80022b8:	eeb0 0a47 	vmov.f32	s0, s14
 80022bc:	eef0 0a67 	vmov.f32	s1, s15
 80022c0:	f00c fd9a 	bl	800edf8 <pow>
 80022c4:	ec51 0b10 	vmov	r0, r1, d0
 80022c8:	a319      	add	r3, pc, #100	; (adr r3, 8002330 <inverseKinematic+0x890>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fd ffe3 	bl	8000298 <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	a313      	add	r3, pc, #76	; (adr r3, 8002328 <inverseKinematic+0x888>)
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f7fd ffdc 	bl	800029c <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	e036      	b.n	8002358 <inverseKinematic+0x8b8>
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40000000 	.word	0x40000000
 80022f8:	5625749b 	.word	0x5625749b
 80022fc:	3faf09d1 	.word	0x3faf09d1
 8002300:	e8584caa 	.word	0xe8584caa
 8002304:	400bb67a 	.word	0x400bb67a
 8002308:	1eb851ec 	.word	0x1eb851ec
 800230c:	3fa1eb85 	.word	0x3fa1eb85
 8002310:	9ba5e356 	.word	0x9ba5e356
 8002314:	3fe020c4 	.word	0x3fe020c4
 8002318:	24dd2f1b 	.word	0x24dd2f1b
 800231c:	3fc58106 	.word	0x3fc58106
 8002320:	70a3d70a 	.word	0x70a3d70a
 8002324:	3fd70a3d 	.word	0x3fd70a3d
 8002328:	93d96639 	.word	0x93d96639
 800232c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002330:	47ae147c 	.word	0x47ae147c
 8002334:	3fa47ae1 	.word	0x3fa47ae1
 8002338:	24dd2f1d 	.word	0x24dd2f1d
 800233c:	3fe58106 	.word	0x3fe58106
 8002340:	1eb851ec 	.word	0x1eb851ec
 8002344:	3fb1eb85 	.word	0x3fb1eb85
 8002348:	200002c0 	.word	0x200002c0
 800234c:	20000308 	.word	0x20000308
 8002350:	f705857e 	.word	0xf705857e
 8002354:	3f881e03 	.word	0x3f881e03
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	4bde      	ldr	r3, [pc, #888]	; (80026d8 <inverseKinematic+0xc38>)
 800235e:	e9c3 0100 	strd	r0, r1, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8002362:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002366:	a3ce      	add	r3, pc, #824	; (adr r3, 80026a0 <inverseKinematic+0xc00>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fd ff96 	bl	800029c <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ec43 2b17 	vmov	d7, r2, r3
 8002378:	ed9f 1bcb 	vldr	d1, [pc, #812]	; 80026a8 <inverseKinematic+0xc08>
 800237c:	eeb0 0a47 	vmov.f32	s0, s14
 8002380:	eef0 0a67 	vmov.f32	s1, s15
 8002384:	f00c fd38 	bl	800edf8 <pow>
 8002388:	ec51 0b10 	vmov	r0, r1, d0
 800238c:	a3c8      	add	r3, pc, #800	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fd ff83 	bl	800029c <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023a2:	a3c5      	add	r3, pc, #788	; (adr r3, 80026b8 <inverseKinematic+0xc18>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff78 	bl	800029c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	ec43 2b17 	vmov	d7, r2, r3
 80023b4:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 80026a8 <inverseKinematic+0xc08>
 80023b8:	eeb0 0a47 	vmov.f32	s0, s14
 80023bc:	eef0 0a67 	vmov.f32	s1, s15
 80023c0:	f00c fd1a 	bl	800edf8 <pow>
 80023c4:	ec53 2b10 	vmov	r2, r3, d0
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff66 	bl	800029c <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023dc:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 80026a8 <inverseKinematic+0xc08>
 80023e0:	eeb0 0a47 	vmov.f32	s0, s14
 80023e4:	eef0 0a67 	vmov.f32	s1, s15
 80023e8:	f00c fd06 	bl	800edf8 <pow>
 80023ec:	ec53 2b10 	vmov	r2, r3, d0
 80023f0:	4620      	mov	r0, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7fd ff52 	bl	800029c <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	a3af      	add	r3, pc, #700	; (adr r3, 80026c0 <inverseKinematic+0xc20>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fd ff47 	bl	8000298 <__aeabi_dsub>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	f7fd ff3f 	bl	800029c <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f7fe fa19 	bl	800085c <__aeabi_ddiv>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ec43 2b17 	vmov	d7, r2, r3
 8002432:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 80026a8 <inverseKinematic+0xc08>
 8002436:	eeb0 0a47 	vmov.f32	s0, s14
 800243a:	eef0 0a67 	vmov.f32	s1, s15
 800243e:	f00c fcdb 	bl	800edf8 <pow>
 8002442:	ec51 0b10 	vmov	r0, r1, d0
 8002446:	a39a      	add	r3, pc, #616	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd ff24 	bl	8000298 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <inverseKinematic+0xc3c>)
 800245a:	e9c3 0100 	strd	r0, r1, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 800245e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002462:	a38f      	add	r3, pc, #572	; (adr r3, 80026a0 <inverseKinematic+0xc00>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fd ff16 	bl	8000298 <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	ec43 2b17 	vmov	d7, r2, r3
 8002474:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80026a8 <inverseKinematic+0xc08>
 8002478:	eeb0 0a47 	vmov.f32	s0, s14
 800247c:	eef0 0a67 	vmov.f32	s1, s15
 8002480:	f00c fcba 	bl	800edf8 <pow>
 8002484:	ec55 4b10 	vmov	r4, r5, d0
 8002488:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800248c:	a38a      	add	r3, pc, #552	; (adr r3, 80026b8 <inverseKinematic+0xc18>)
 800248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002492:	f7fd ff03 	bl	800029c <__adddf3>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ec43 2b17 	vmov	d7, r2, r3
 800249e:	ed9f 1b82 	vldr	d1, [pc, #520]	; 80026a8 <inverseKinematic+0xc08>
 80024a2:	eeb0 0a47 	vmov.f32	s0, s14
 80024a6:	eef0 0a67 	vmov.f32	s1, s15
 80024aa:	f00c fca5 	bl	800edf8 <pow>
 80024ae:	ec53 2b10 	vmov	r2, r3, d0
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fef1 	bl	800029c <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	461d      	mov	r5, r3
 80024c2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80024c6:	ed9f 1b78 	vldr	d1, [pc, #480]	; 80026a8 <inverseKinematic+0xc08>
 80024ca:	eeb0 0a47 	vmov.f32	s0, s14
 80024ce:	eef0 0a67 	vmov.f32	s1, s15
 80024d2:	f00c fc91 	bl	800edf8 <pow>
 80024d6:	ec53 2b10 	vmov	r2, r3, d0
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fedd 	bl	800029c <__adddf3>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	a375      	add	r3, pc, #468	; (adr r3, 80026c0 <inverseKinematic+0xc20>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fd fed2 	bl	8000298 <__aeabi_dsub>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	a372      	add	r3, pc, #456	; (adr r3, 80026c8 <inverseKinematic+0xc28>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fec9 	bl	8000298 <__aeabi_dsub>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	a370      	add	r3, pc, #448	; (adr r3, 80026d0 <inverseKinematic+0xc30>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fd fec2 	bl	800029c <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	f7fd feb8 	bl	800029c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fe f992 	bl	800085c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	ec43 2b17 	vmov	d7, r2, r3
 8002540:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80026a8 <inverseKinematic+0xc08>
 8002544:	eeb0 0a47 	vmov.f32	s0, s14
 8002548:	eef0 0a67 	vmov.f32	s1, s15
 800254c:	f00c fc54 	bl	800edf8 <pow>
 8002550:	ec51 0b10 	vmov	r0, r1, d0
 8002554:	a356      	add	r3, pc, #344	; (adr r3, 80026b0 <inverseKinematic+0xc10>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fd fe9d 	bl	8000298 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <inverseKinematic+0xc40>)
 8002568:	e9c3 0100 	strd	r0, r1, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <inverseKinematic+0xc44>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	4692      	mov	sl, r2
 8002574:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002578:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <inverseKinematic+0xc44>)
 800257a:	ed93 7b00 	vldr	d7, [r3]
 800257e:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 80026a8 <inverseKinematic+0xc08>
 8002582:	eeb0 0a47 	vmov.f32	s0, s14
 8002586:	eef0 0a67 	vmov.f32	s1, s15
 800258a:	f00c fc35 	bl	800edf8 <pow>
 800258e:	ec55 4b10 	vmov	r4, r5, d0
 8002592:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <inverseKinematic+0xc48>)
 8002594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <inverseKinematic+0xc4c>)
 800259e:	f7fe f833 	bl	8000608 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <inverseKinematic+0xc38>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f82a 	bl	8000608 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd fe6c 	bl	8000298 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	ec43 2b17 	vmov	d7, r2, r3
 80025c8:	eeb0 0a47 	vmov.f32	s0, s14
 80025cc:	eef0 0a67 	vmov.f32	s1, s15
 80025d0:	f00c fc82 	bl	800eed8 <sqrt>
 80025d4:	ec53 2b10 	vmov	r2, r3, d0
 80025d8:	4650      	mov	r0, sl
 80025da:	4659      	mov	r1, fp
 80025dc:	f7fd fe5c 	bl	8000298 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <inverseKinematic+0xc48>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	f7fd fe53 	bl	800029c <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe f92d 	bl	800085c <__aeabi_ddiv>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	493a      	ldr	r1, [pc, #232]	; (80026f0 <inverseKinematic+0xc50>)
 8002608:	e9c1 2300 	strd	r2, r3, [r1]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <inverseKinematic+0xc44>)
 800260e:	ed93 7b00 	vldr	d7, [r3]
 8002612:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80026a8 <inverseKinematic+0xc08>
 8002616:	eeb0 0a47 	vmov.f32	s0, s14
 800261a:	eef0 0a67 	vmov.f32	s1, s15
 800261e:	f00c fbeb 	bl	800edf8 <pow>
 8002622:	ec55 4b10 	vmov	r4, r5, d0
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <inverseKinematic+0xc48>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <inverseKinematic+0xc4c>)
 8002632:	f7fd ffe9 	bl	8000608 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <inverseKinematic+0xc38>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffe0 	bl	8000608 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fe22 	bl	8000298 <__aeabi_dsub>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	ec43 2b17 	vmov	d7, r2, r3
 800265c:	eeb0 0a47 	vmov.f32	s0, s14
 8002660:	eef0 0a67 	vmov.f32	s1, s15
 8002664:	f00c fc38 	bl	800eed8 <sqrt>
 8002668:	ec51 0b10 	vmov	r0, r1, d0
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <inverseKinematic+0xc44>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd fe11 	bl	8000298 <__aeabi_dsub>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <inverseKinematic+0xc48>)
 8002680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	f7fd fe08 	bl	800029c <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fe f8e2 	bl	800085c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	e02b      	b.n	80026f4 <inverseKinematic+0xc54>
 800269c:	f3af 8000 	nop.w
 80026a0:	5625749b 	.word	0x5625749b
 80026a4:	3faf09d1 	.word	0x3faf09d1
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40000000 	.word	0x40000000
 80026b0:	f705857e 	.word	0xf705857e
 80026b4:	3f881e03 	.word	0x3f881e03
 80026b8:	1eb851ec 	.word	0x1eb851ec
 80026bc:	3fa1eb85 	.word	0x3fa1eb85
 80026c0:	70a3d70a 	.word	0x70a3d70a
 80026c4:	3fd70a3d 	.word	0x3fd70a3d
 80026c8:	93d96639 	.word	0x93d96639
 80026cc:	3f9ce6c0 	.word	0x3f9ce6c0
 80026d0:	47ae147c 	.word	0x47ae147c
 80026d4:	3fa47ae1 	.word	0x3fa47ae1
 80026d8:	20000280 	.word	0x20000280
 80026dc:	200002c8 	.word	0x200002c8
 80026e0:	20000310 	.word	0x20000310
 80026e4:	20000278 	.word	0x20000278
 80026e8:	20000270 	.word	0x20000270
 80026ec:	40100000 	.word	0x40100000
 80026f0:	20000298 	.word	0x20000298
 80026f4:	460b      	mov	r3, r1
 80026f6:	49c6      	ldr	r1, [pc, #792]	; (8002a10 <inverseKinematic+0xf70>)
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80026fc:	4bc5      	ldr	r3, [pc, #788]	; (8002a14 <inverseKinematic+0xf74>)
 80026fe:	ed93 7b00 	vldr	d7, [r3]
 8002702:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 80029f8 <inverseKinematic+0xf58>
 8002706:	eeb0 0a47 	vmov.f32	s0, s14
 800270a:	eef0 0a67 	vmov.f32	s1, s15
 800270e:	f00c fb73 	bl	800edf8 <pow>
 8002712:	ec55 4b10 	vmov	r4, r5, d0
 8002716:	4bc0      	ldr	r3, [pc, #768]	; (8002a18 <inverseKinematic+0xf78>)
 8002718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4bbe      	ldr	r3, [pc, #760]	; (8002a1c <inverseKinematic+0xf7c>)
 8002722:	f7fd ff71 	bl	8000608 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4bbc      	ldr	r3, [pc, #752]	; (8002a20 <inverseKinematic+0xf80>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd ff68 	bl	8000608 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd fdaa 	bl	8000298 <__aeabi_dsub>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	ec43 2b17 	vmov	d7, r2, r3
 800274c:	eeb0 0a47 	vmov.f32	s0, s14
 8002750:	eef0 0a67 	vmov.f32	s1, s15
 8002754:	f00c fbc0 	bl	800eed8 <sqrt>
 8002758:	ec51 0b10 	vmov	r0, r1, d0
 800275c:	4bad      	ldr	r3, [pc, #692]	; (8002a14 <inverseKinematic+0xf74>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd fd99 	bl	8000298 <__aeabi_dsub>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4614      	mov	r4, r2
 800276c:	461d      	mov	r5, r3
 800276e:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <inverseKinematic+0xf78>)
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	f7fd fd90 	bl	800029c <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fe f86a 	bl	800085c <__aeabi_ddiv>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	49a5      	ldr	r1, [pc, #660]	; (8002a24 <inverseKinematic+0xf84>)
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8002792:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <inverseKinematic+0xf74>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	623a      	str	r2, [r7, #32]
 800279a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <inverseKinematic+0xf74>)
 80027a2:	ed93 7b00 	vldr	d7, [r3]
 80027a6:	ed9f 1b94 	vldr	d1, [pc, #592]	; 80029f8 <inverseKinematic+0xf58>
 80027aa:	eeb0 0a47 	vmov.f32	s0, s14
 80027ae:	eef0 0a67 	vmov.f32	s1, s15
 80027b2:	f00c fb21 	bl	800edf8 <pow>
 80027b6:	ec55 4b10 	vmov	r4, r5, d0
 80027ba:	4b97      	ldr	r3, [pc, #604]	; (8002a18 <inverseKinematic+0xf78>)
 80027bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	4b95      	ldr	r3, [pc, #596]	; (8002a1c <inverseKinematic+0xf7c>)
 80027c6:	f7fd ff1f 	bl	8000608 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <inverseKinematic+0xf80>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fd ff16 	bl	8000608 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd58 	bl	8000298 <__aeabi_dsub>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	ec43 2b17 	vmov	d7, r2, r3
 80027f0:	eeb0 0a47 	vmov.f32	s0, s14
 80027f4:	eef0 0a67 	vmov.f32	s1, s15
 80027f8:	f00c fb6e 	bl	800eed8 <sqrt>
 80027fc:	ec53 2b10 	vmov	r2, r3, d0
 8002800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002804:	f7fd fd48 	bl	8000298 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4614      	mov	r4, r2
 800280e:	461d      	mov	r5, r3
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <inverseKinematic+0xf78>)
 8002812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	f7fd fd3f 	bl	800029c <__adddf3>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe f819 	bl	800085c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	497e      	ldr	r1, [pc, #504]	; (8002a28 <inverseKinematic+0xf88>)
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002834:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <inverseKinematic+0xf8c>)
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 80029f8 <inverseKinematic+0xf58>
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f00c fad7 	bl	800edf8 <pow>
 800284a:	ec55 4b10 	vmov	r4, r5, d0
 800284e:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <inverseKinematic+0xf90>)
 8002850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <inverseKinematic+0xf7c>)
 800285a:	f7fd fed5 	bl	8000608 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <inverseKinematic+0xf94>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fecc 	bl	8000608 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4620      	mov	r0, r4
 8002876:	4629      	mov	r1, r5
 8002878:	f7fd fd0e 	bl	8000298 <__aeabi_dsub>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	ec43 2b17 	vmov	d7, r2, r3
 8002884:	eeb0 0a47 	vmov.f32	s0, s14
 8002888:	eef0 0a67 	vmov.f32	s1, s15
 800288c:	f00c fb24 	bl	800eed8 <sqrt>
 8002890:	ec51 0b10 	vmov	r0, r1, d0
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <inverseKinematic+0xf8c>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fcfd 	bl	8000298 <__aeabi_dsub>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	461d      	mov	r5, r3
 80028a6:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <inverseKinematic+0xf90>)
 80028a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	f7fd fcf4 	bl	800029c <__adddf3>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd ffce 	bl	800085c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	495c      	ldr	r1, [pc, #368]	; (8002a38 <inverseKinematic+0xf98>)
 80028c6:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80028ca:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <inverseKinematic+0xf8c>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	61ba      	str	r2, [r7, #24]
 80028d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <inverseKinematic+0xf8c>)
 80028da:	ed93 7b00 	vldr	d7, [r3]
 80028de:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80029f8 <inverseKinematic+0xf58>
 80028e2:	eeb0 0a47 	vmov.f32	s0, s14
 80028e6:	eef0 0a67 	vmov.f32	s1, s15
 80028ea:	f00c fa85 	bl	800edf8 <pow>
 80028ee:	ec55 4b10 	vmov	r4, r5, d0
 80028f2:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <inverseKinematic+0xf90>)
 80028f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <inverseKinematic+0xf7c>)
 80028fe:	f7fd fe83 	bl	8000608 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <inverseKinematic+0xf94>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe7a 	bl	8000608 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fcbc 	bl	8000298 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f00c fad2 	bl	800eed8 <sqrt>
 8002934:	ec53 2b10 	vmov	r2, r3, d0
 8002938:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800293c:	f7fd fcac 	bl	8000298 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <inverseKinematic+0xf90>)
 800294a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	f7fd fca3 	bl	800029c <__adddf3>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4620      	mov	r0, r4
 800295c:	4629      	mov	r1, r5
 800295e:	f7fd ff7d 	bl	800085c <__aeabi_ddiv>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4935      	ldr	r1, [pc, #212]	; (8002a3c <inverseKinematic+0xf9c>)
 8002968:	e9c1 2300 	strd	r2, r3, [r1]

	XJ1_1 = 0;
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <inverseKinematic+0xfa0>)
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 800297a:	4932      	ldr	r1, [pc, #200]	; (8002a44 <inverseKinematic+0xfa4>)
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <inverseKinematic+0xf84>)
 800298a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800298e:	a31c      	add	r3, pc, #112	; (adr r3, 8002a00 <inverseKinematic+0xf60>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fe38 	bl	8000608 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	492a      	ldr	r1, [pc, #168]	; (8002a48 <inverseKinematic+0xfa8>)
 800299e:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_2 = sqrt(3) * YJ2_2;
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <inverseKinematic+0xf88>)
 80029a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a8:	a315      	add	r3, pc, #84	; (adr r3, 8002a00 <inverseKinematic+0xf60>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd fe2b 	bl	8000608 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4925      	ldr	r1, [pc, #148]	; (8002a4c <inverseKinematic+0xfac>)
 80029b8:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_1 = -sqrt(3) * YJ3_1;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <inverseKinematic+0xf98>)
 80029be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c2:	a311      	add	r3, pc, #68	; (adr r3, 8002a08 <inverseKinematic+0xf68>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fe1e 	bl	8000608 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	491f      	ldr	r1, [pc, #124]	; (8002a50 <inverseKinematic+0xfb0>)
 80029d2:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_2 = -sqrt(3) * YJ3_2;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <inverseKinematic+0xf9c>)
 80029d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029dc:	a30a      	add	r3, pc, #40	; (adr r3, 8002a08 <inverseKinematic+0xf68>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe11 	bl	8000608 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	491a      	ldr	r1, [pc, #104]	; (8002a54 <inverseKinematic+0xfb4>)
 80029ec:	e9c1 2300 	strd	r2, r3, [r1]
 80029f0:	e032      	b.n	8002a58 <inverseKinematic+0xfb8>
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	00000000 	.word	0x00000000
 80029fc:	40000000 	.word	0x40000000
 8002a00:	e8584caa 	.word	0xe8584caa
 8002a04:	3ffbb67a 	.word	0x3ffbb67a
 8002a08:	e8584caa 	.word	0xe8584caa
 8002a0c:	bffbb67a 	.word	0xbffbb67a
 8002a10:	200002a0 	.word	0x200002a0
 8002a14:	200002c0 	.word	0x200002c0
 8002a18:	200002b8 	.word	0x200002b8
 8002a1c:	40100000 	.word	0x40100000
 8002a20:	200002c8 	.word	0x200002c8
 8002a24:	200002e0 	.word	0x200002e0
 8002a28:	200002e8 	.word	0x200002e8
 8002a2c:	20000308 	.word	0x20000308
 8002a30:	20000300 	.word	0x20000300
 8002a34:	20000310 	.word	0x20000310
 8002a38:	20000328 	.word	0x20000328
 8002a3c:	20000330 	.word	0x20000330
 8002a40:	20000288 	.word	0x20000288
 8002a44:	20000290 	.word	0x20000290
 8002a48:	200002d0 	.word	0x200002d0
 8002a4c:	200002d8 	.word	0x200002d8
 8002a50:	20000318 	.word	0x20000318
 8002a54:	20000320 	.word	0x20000320

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002a58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a5c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fc19 	bl	8000298 <__aeabi_dsub>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	a3e8      	add	r3, pc, #928	; (adr r3, 8002e10 <inverseKinematic+0x1370>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fc12 	bl	800029c <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002a88:	f7fd fdbe 	bl	8000608 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	461d      	mov	r5, r3
 8002a94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	f7fd fbfe 	bl	800029c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fed8 	bl	800085c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4be2      	ldr	r3, [pc, #904]	; (8002e40 <inverseKinematic+0x13a0>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fda5 	bl	8000608 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002aca:	a3c7      	add	r3, pc, #796	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fbe2 	bl	8000298 <__aeabi_dsub>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	ec43 2b17 	vmov	d7, r2, r3
 8002adc:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 8002df0 <inverseKinematic+0x1350>
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	eef0 0a67 	vmov.f32	s1, s15
 8002ae8:	f00c f986 	bl	800edf8 <pow>
 8002aec:	ec55 4b10 	vmov	r4, r5, d0
 8002af0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002af4:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8002df0 <inverseKinematic+0x1350>
 8002af8:	eeb0 0a47 	vmov.f32	s0, s14
 8002afc:	eef0 0a67 	vmov.f32	s1, s15
 8002b00:	f00c f97a 	bl	800edf8 <pow>
 8002b04:	ec53 2b10 	vmov	r2, r3, d0
 8002b08:	4620      	mov	r0, r4
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	f7fd fbc6 	bl	800029c <__adddf3>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	a3b7      	add	r3, pc, #732	; (adr r3, 8002df8 <inverseKinematic+0x1358>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fbbb 	bl	8000298 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4614      	mov	r4, r2
 8002b28:	461d      	mov	r5, r3
 8002b2a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b2e:	ed9f 1bb0 	vldr	d1, [pc, #704]	; 8002df0 <inverseKinematic+0x1350>
 8002b32:	eeb0 0a47 	vmov.f32	s0, s14
 8002b36:	eef0 0a67 	vmov.f32	s1, s15
 8002b3a:	f00c f95d 	bl	800edf8 <pow>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fba9 	bl	800029c <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	a3ab      	add	r3, pc, #684	; (adr r3, 8002e00 <inverseKinematic+0x1360>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb9e 	bl	8000298 <__aeabi_dsub>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	a3a8      	add	r3, pc, #672	; (adr r3, 8002e08 <inverseKinematic+0x1368>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fb97 	bl	800029c <__adddf3>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f7fd fb8d 	bl	800029c <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4620      	mov	r0, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	f7fd fe67 	bl	800085c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f7fd fb81 	bl	800029c <__adddf3>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	49a9      	ldr	r1, [pc, #676]	; (8002e44 <inverseKinematic+0x13a4>)
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002ba4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ba8:	a38f      	add	r3, pc, #572	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fb73 	bl	8000298 <__aeabi_dsub>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	a395      	add	r3, pc, #596	; (adr r3, 8002e10 <inverseKinematic+0x1370>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fb6c 	bl	800029c <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002bd4:	f7fd fd18 	bl	8000608 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	f7fd fb58 	bl	800029c <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fe32 	bl	800085c <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <inverseKinematic+0x13a8>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fcff 	bl	8000608 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c16:	a374      	add	r3, pc, #464	; (adr r3, 8002de8 <inverseKinematic+0x1348>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fb3c 	bl	8000298 <__aeabi_dsub>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	ec43 2b17 	vmov	d7, r2, r3
 8002c28:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002df0 <inverseKinematic+0x1350>
 8002c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c30:	eef0 0a67 	vmov.f32	s1, s15
 8002c34:	f00c f8e0 	bl	800edf8 <pow>
 8002c38:	ec55 4b10 	vmov	r4, r5, d0
 8002c3c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002c40:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002df0 <inverseKinematic+0x1350>
 8002c44:	eeb0 0a47 	vmov.f32	s0, s14
 8002c48:	eef0 0a67 	vmov.f32	s1, s15
 8002c4c:	f00c f8d4 	bl	800edf8 <pow>
 8002c50:	ec53 2b10 	vmov	r2, r3, d0
 8002c54:	4620      	mov	r0, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	f7fd fb20 	bl	800029c <__adddf3>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	a364      	add	r3, pc, #400	; (adr r3, 8002df8 <inverseKinematic+0x1358>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fb15 	bl	8000298 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4614      	mov	r4, r2
 8002c74:	461d      	mov	r5, r3
 8002c76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c7a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002df0 <inverseKinematic+0x1350>
 8002c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c82:	eef0 0a67 	vmov.f32	s1, s15
 8002c86:	f00c f8b7 	bl	800edf8 <pow>
 8002c8a:	ec53 2b10 	vmov	r2, r3, d0
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f7fd fb03 	bl	800029c <__adddf3>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	a358      	add	r3, pc, #352	; (adr r3, 8002e00 <inverseKinematic+0x1360>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd faf8 	bl	8000298 <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	a355      	add	r3, pc, #340	; (adr r3, 8002e08 <inverseKinematic+0x1368>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd faf1 	bl	800029c <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	461d      	mov	r5, r3
 8002cc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	f7fd fae7 	bl	800029c <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fdc1 	bl	800085c <__aeabi_ddiv>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4640      	mov	r0, r8
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	f7fd fadb 	bl	800029c <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4958      	ldr	r1, [pc, #352]	; (8002e4c <inverseKinematic+0x13ac>)
 8002cec:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002cf0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cf4:	a348      	add	r3, pc, #288	; (adr r3, 8002e18 <inverseKinematic+0x1378>)
 8002cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfa:	f7fd facf 	bl	800029c <__adddf3>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	a346      	add	r3, pc, #280	; (adr r3, 8002e20 <inverseKinematic+0x1380>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc7c 	bl	8000608 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d1c:	a342      	add	r3, pc, #264	; (adr r3, 8002e28 <inverseKinematic+0x1388>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fabb 	bl	800029c <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	f7fd fab3 	bl	800029c <__adddf3>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd faab 	bl	8000298 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	a339      	add	r3, pc, #228	; (adr r3, 8002e30 <inverseKinematic+0x1390>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd faa4 	bl	800029c <__adddf3>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	f7fd fa9a 	bl	800029c <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fd74 	bl	800085c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <inverseKinematic+0x13b0>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc41 	bl	8000608 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4690      	mov	r8, r2
 8002d8c:	4699      	mov	r9, r3
 8002d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d92:	a321      	add	r3, pc, #132	; (adr r3, 8002e18 <inverseKinematic+0x1378>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fa80 	bl	800029c <__adddf3>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	ec43 2b17 	vmov	d7, r2, r3
 8002da4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002df0 <inverseKinematic+0x1350>
 8002da8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dac:	eef0 0a67 	vmov.f32	s1, s15
 8002db0:	f00c f822 	bl	800edf8 <pow>
 8002db4:	ec51 0b10 	vmov	r0, r1, d0
 8002db8:	a31f      	add	r3, pc, #124	; (adr r3, 8002e38 <inverseKinematic+0x1398>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f7fd fa6d 	bl	800029c <__adddf3>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4614      	mov	r4, r2
 8002dc8:	461d      	mov	r5, r3
 8002dca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dce:	a316      	add	r3, pc, #88	; (adr r3, 8002e28 <inverseKinematic+0x1388>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa62 	bl	800029c <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	ec43 2b17 	vmov	d7, r2, r3
 8002de0:	e038      	b.n	8002e54 <inverseKinematic+0x13b4>
 8002de2:	bf00      	nop
 8002de4:	f3af 8000 	nop.w
 8002de8:	1eb851ec 	.word	0x1eb851ec
 8002dec:	3fb1eb85 	.word	0x3fb1eb85
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40000000 	.word	0x40000000
 8002df8:	70a3d70a 	.word	0x70a3d70a
 8002dfc:	3fd70a3d 	.word	0x3fd70a3d
 8002e00:	93d96639 	.word	0x93d96639
 8002e04:	3f9ce6c0 	.word	0x3f9ce6c0
 8002e08:	47ae147c 	.word	0x47ae147c
 8002e0c:	3fa47ae1 	.word	0x3fa47ae1
 8002e10:	24dd2f1b 	.word	0x24dd2f1b
 8002e14:	3fc58106 	.word	0x3fc58106
 8002e18:	5625749b 	.word	0x5625749b
 8002e1c:	3faf09d1 	.word	0x3faf09d1
 8002e20:	e8584caa 	.word	0xe8584caa
 8002e24:	c00bb67a 	.word	0xc00bb67a
 8002e28:	1eb851ec 	.word	0x1eb851ec
 8002e2c:	3fa1eb85 	.word	0x3fa1eb85
 8002e30:	24dd2f1d 	.word	0x24dd2f1d
 8002e34:	3fe58106 	.word	0x3fe58106
 8002e38:	f705857e 	.word	0xf705857e
 8002e3c:	3f881e03 	.word	0x3f881e03
 8002e40:	20000298 	.word	0x20000298
 8002e44:	200002a8 	.word	0x200002a8
 8002e48:	200002a0 	.word	0x200002a0
 8002e4c:	200002b0 	.word	0x200002b0
 8002e50:	200002e0 	.word	0x200002e0
 8002e54:	ed9f 1be0 	vldr	d1, [pc, #896]	; 80031d8 <inverseKinematic+0x1738>
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	f00b ffca 	bl	800edf8 <pow>
 8002e64:	ec53 2b10 	vmov	r2, r3, d0
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f7fd fa16 	bl	800029c <__adddf3>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002e7c:	ed9f 1bd6 	vldr	d1, [pc, #856]	; 80031d8 <inverseKinematic+0x1738>
 8002e80:	eeb0 0a47 	vmov.f32	s0, s14
 8002e84:	eef0 0a67 	vmov.f32	s1, s15
 8002e88:	f00b ffb6 	bl	800edf8 <pow>
 8002e8c:	ec53 2b10 	vmov	r2, r3, d0
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd fa02 	bl	800029c <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	a3d9      	add	r3, pc, #868	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd f9f7 	bl	8000298 <__aeabi_dsub>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	f7fd f9ef 	bl	800029c <__adddf3>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd fcc9 	bl	800085c <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd f9e3 	bl	800029c <__adddf3>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	49d7      	ldr	r1, [pc, #860]	; (8003238 <inverseKinematic+0x1798>)
 8002edc:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002ee0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ee4:	a3be      	add	r3, pc, #760	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd f9d7 	bl	800029c <__adddf3>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	a3bc      	add	r3, pc, #752	; (adr r3, 80031e8 <inverseKinematic+0x1748>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb84 	bl	8000608 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f0c:	a3b8      	add	r3, pc, #736	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f7fd f9c3 	bl	800029c <__adddf3>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	f7fd f9bb 	bl	800029c <__adddf3>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9b3 	bl	8000298 <__aeabi_dsub>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	a3af      	add	r3, pc, #700	; (adr r3, 80031f8 <inverseKinematic+0x1758>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f9ac 	bl	800029c <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	f7fd f9a2 	bl	800029c <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	4629      	mov	r1, r5
 8002f60:	f7fd fc7c 	bl	800085c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4bb3      	ldr	r3, [pc, #716]	; (800323c <inverseKinematic+0x179c>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb49 	bl	8000608 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f82:	a397      	add	r3, pc, #604	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd f988 	bl	800029c <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	ec43 2b17 	vmov	d7, r2, r3
 8002f94:	ed9f 1b90 	vldr	d1, [pc, #576]	; 80031d8 <inverseKinematic+0x1738>
 8002f98:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9c:	eef0 0a67 	vmov.f32	s1, s15
 8002fa0:	f00b ff2a 	bl	800edf8 <pow>
 8002fa4:	ec51 0b10 	vmov	r0, r1, d0
 8002fa8:	a395      	add	r3, pc, #596	; (adr r3, 8003200 <inverseKinematic+0x1760>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd f975 	bl	800029c <__adddf3>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4614      	mov	r4, r2
 8002fb8:	461d      	mov	r5, r3
 8002fba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fbe:	a38c      	add	r3, pc, #560	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd f96a 	bl	800029c <__adddf3>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	ec43 2b17 	vmov	d7, r2, r3
 8002fd0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80031d8 <inverseKinematic+0x1738>
 8002fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd8:	eef0 0a67 	vmov.f32	s1, s15
 8002fdc:	f00b ff0c 	bl	800edf8 <pow>
 8002fe0:	ec53 2b10 	vmov	r2, r3, d0
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7fd f958 	bl	800029c <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002ff8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80031d8 <inverseKinematic+0x1738>
 8002ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8003000:	eef0 0a67 	vmov.f32	s1, s15
 8003004:	f00b fef8 	bl	800edf8 <pow>
 8003008:	ec53 2b10 	vmov	r2, r3, d0
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f944 	bl	800029c <__adddf3>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	a37a      	add	r3, pc, #488	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd f939 	bl	8000298 <__aeabi_dsub>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	461d      	mov	r5, r3
 800302e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	f7fd f931 	bl	800029c <__adddf3>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4620      	mov	r0, r4
 8003040:	4629      	mov	r1, r5
 8003042:	f7fd fc0b 	bl	800085c <__aeabi_ddiv>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd f925 	bl	800029c <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	497a      	ldr	r1, [pc, #488]	; (8003240 <inverseKinematic+0x17a0>)
 8003058:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800305c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003060:	a35f      	add	r3, pc, #380	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd f917 	bl	8000298 <__aeabi_dsub>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	a367      	add	r3, pc, #412	; (adr r3, 8003210 <inverseKinematic+0x1770>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fac6 	bl	8000608 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003088:	a359      	add	r3, pc, #356	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f7fd f905 	bl	800029c <__adddf3>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	f7fd f8fd 	bl	800029c <__adddf3>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f8f5 	bl	8000298 <__aeabi_dsub>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	a358      	add	r3, pc, #352	; (adr r3, 8003218 <inverseKinematic+0x1778>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd f8ee 	bl	800029c <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	a355      	add	r3, pc, #340	; (adr r3, 8003220 <inverseKinematic+0x1780>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd f8e5 	bl	800029c <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4614      	mov	r4, r2
 80030d8:	461d      	mov	r5, r3
 80030da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	f7fd f8db 	bl	800029c <__adddf3>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd fbb5 	bl	800085c <__aeabi_ddiv>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4b52      	ldr	r3, [pc, #328]	; (8003244 <inverseKinematic+0x17a4>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd fa82 	bl	8000608 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4690      	mov	r8, r2
 800310a:	4699      	mov	r9, r3
 800310c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003110:	a333      	add	r3, pc, #204	; (adr r3, 80031e0 <inverseKinematic+0x1740>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd f8bf 	bl	8000298 <__aeabi_dsub>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	ec43 2b17 	vmov	d7, r2, r3
 8003122:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80031d8 <inverseKinematic+0x1738>
 8003126:	eeb0 0a47 	vmov.f32	s0, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	f00b fe63 	bl	800edf8 <pow>
 8003132:	ec55 4b10 	vmov	r4, r5, d0
 8003136:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800313a:	a32d      	add	r3, pc, #180	; (adr r3, 80031f0 <inverseKinematic+0x1750>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd f8ac 	bl	800029c <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	ec43 2b17 	vmov	d7, r2, r3
 800314c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80031d8 <inverseKinematic+0x1738>
 8003150:	eeb0 0a47 	vmov.f32	s0, s14
 8003154:	eef0 0a67 	vmov.f32	s1, s15
 8003158:	f00b fe4e 	bl	800edf8 <pow>
 800315c:	ec53 2b10 	vmov	r2, r3, d0
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd f89a 	bl	800029c <__adddf3>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4614      	mov	r4, r2
 800316e:	461d      	mov	r5, r3
 8003170:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003174:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80031d8 <inverseKinematic+0x1738>
 8003178:	eeb0 0a47 	vmov.f32	s0, s14
 800317c:	eef0 0a67 	vmov.f32	s1, s15
 8003180:	f00b fe3a 	bl	800edf8 <pow>
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd f886 	bl	800029c <__adddf3>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	a31b      	add	r3, pc, #108	; (adr r3, 8003208 <inverseKinematic+0x1768>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f87b 	bl	8000298 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	a31f      	add	r3, pc, #124	; (adr r3, 8003228 <inverseKinematic+0x1788>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f872 	bl	8000298 <__aeabi_dsub>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	a31c      	add	r3, pc, #112	; (adr r3, 8003230 <inverseKinematic+0x1790>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd f86b 	bl	800029c <__adddf3>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
 80031ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	e037      	b.n	8003248 <inverseKinematic+0x17a8>
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40000000 	.word	0x40000000
 80031e0:	5625749b 	.word	0x5625749b
 80031e4:	3faf09d1 	.word	0x3faf09d1
 80031e8:	e8584caa 	.word	0xe8584caa
 80031ec:	c00bb67a 	.word	0xc00bb67a
 80031f0:	1eb851ec 	.word	0x1eb851ec
 80031f4:	3fa1eb85 	.word	0x3fa1eb85
 80031f8:	24dd2f1d 	.word	0x24dd2f1d
 80031fc:	3fe58106 	.word	0x3fe58106
 8003200:	f705857e 	.word	0xf705857e
 8003204:	3f881e03 	.word	0x3f881e03
 8003208:	70a3d70a 	.word	0x70a3d70a
 800320c:	3fd70a3d 	.word	0x3fd70a3d
 8003210:	e8584caa 	.word	0xe8584caa
 8003214:	400bb67a 	.word	0x400bb67a
 8003218:	9ba5e356 	.word	0x9ba5e356
 800321c:	3fe020c4 	.word	0x3fe020c4
 8003220:	24dd2f1b 	.word	0x24dd2f1b
 8003224:	3fc58106 	.word	0x3fc58106
 8003228:	93d96639 	.word	0x93d96639
 800322c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003230:	47ae147c 	.word	0x47ae147c
 8003234:	3fa47ae1 	.word	0x3fa47ae1
 8003238:	200002f0 	.word	0x200002f0
 800323c:	200002e8 	.word	0x200002e8
 8003240:	200002f8 	.word	0x200002f8
 8003244:	20000328 	.word	0x20000328
 8003248:	f7fd f828 	bl	800029c <__adddf3>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fd fb02 	bl	800085c <__aeabi_ddiv>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4640      	mov	r0, r8
 800325e:	4649      	mov	r1, r9
 8003260:	f7fd f81c 	bl	800029c <__adddf3>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	49cf      	ldr	r1, [pc, #828]	; (80035a8 <inverseKinematic+0x1b08>)
 800326a:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800326e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003272:	a3b7      	add	r3, pc, #732	; (adr r3, 8003550 <inverseKinematic+0x1ab0>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd f80e 	bl	8000298 <__aeabi_dsub>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	a3b4      	add	r3, pc, #720	; (adr r3, 8003558 <inverseKinematic+0x1ab8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f9bd 	bl	8000608 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4614      	mov	r4, r2
 8003294:	461d      	mov	r5, r3
 8003296:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800329a:	a3b1      	add	r3, pc, #708	; (adr r3, 8003560 <inverseKinematic+0x1ac0>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f7fc fffc 	bl	800029c <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	f7fc fff4 	bl	800029c <__adddf3>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ffec 	bl	8000298 <__aeabi_dsub>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	a3a7      	add	r3, pc, #668	; (adr r3, 8003568 <inverseKinematic+0x1ac8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fc ffe5 	bl	800029c <__adddf3>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	a3a5      	add	r3, pc, #660	; (adr r3, 8003570 <inverseKinematic+0x1ad0>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fc ffdc 	bl	800029c <__adddf3>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	f7fc ffd2 	bl	800029c <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd faac 	bl	800085c <__aeabi_ddiv>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	4ba7      	ldr	r3, [pc, #668]	; (80035ac <inverseKinematic+0x1b0c>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f979 	bl	8000608 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003322:	a38b      	add	r3, pc, #556	; (adr r3, 8003550 <inverseKinematic+0x1ab0>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fc ffb6 	bl	8000298 <__aeabi_dsub>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	ec43 2b17 	vmov	d7, r2, r3
 8003334:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8003578 <inverseKinematic+0x1ad8>
 8003338:	eeb0 0a47 	vmov.f32	s0, s14
 800333c:	eef0 0a67 	vmov.f32	s1, s15
 8003340:	f00b fd5a 	bl	800edf8 <pow>
 8003344:	ec55 4b10 	vmov	r4, r5, d0
 8003348:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800334c:	a384      	add	r3, pc, #528	; (adr r3, 8003560 <inverseKinematic+0x1ac0>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fc ffa3 	bl	800029c <__adddf3>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	ec43 2b17 	vmov	d7, r2, r3
 800335e:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8003578 <inverseKinematic+0x1ad8>
 8003362:	eeb0 0a47 	vmov.f32	s0, s14
 8003366:	eef0 0a67 	vmov.f32	s1, s15
 800336a:	f00b fd45 	bl	800edf8 <pow>
 800336e:	ec53 2b10 	vmov	r2, r3, d0
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fc ff91 	bl	800029c <__adddf3>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003386:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8003578 <inverseKinematic+0x1ad8>
 800338a:	eeb0 0a47 	vmov.f32	s0, s14
 800338e:	eef0 0a67 	vmov.f32	s1, s15
 8003392:	f00b fd31 	bl	800edf8 <pow>
 8003396:	ec53 2b10 	vmov	r2, r3, d0
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f7fc ff7d 	bl	800029c <__adddf3>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	a375      	add	r3, pc, #468	; (adr r3, 8003580 <inverseKinematic+0x1ae0>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fc ff72 	bl	8000298 <__aeabi_dsub>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	a372      	add	r3, pc, #456	; (adr r3, 8003588 <inverseKinematic+0x1ae8>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fc ff69 	bl	8000298 <__aeabi_dsub>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	a370      	add	r3, pc, #448	; (adr r3, 8003590 <inverseKinematic+0x1af0>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc ff62 	bl	800029c <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4614      	mov	r4, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	f7fc ff58 	bl	800029c <__adddf3>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7fd fa32 	bl	800085c <__aeabi_ddiv>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4640      	mov	r0, r8
 80033fe:	4649      	mov	r1, r9
 8003400:	f7fc ff4c 	bl	800029c <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4969      	ldr	r1, [pc, #420]	; (80035b0 <inverseKinematic+0x1b10>)
 800340a:	e9c1 2300 	strd	r2, r3, [r1]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800340e:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <inverseKinematic+0x1b14>)
 8003410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003414:	a360      	add	r3, pc, #384	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd fa1f 	bl	800085c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	ec43 2b17 	vmov	d7, r2, r3
 8003426:	eeb0 0a47 	vmov.f32	s0, s14
 800342a:	eef0 0a67 	vmov.f32	s1, s15
 800342e:	f00b fcaf 	bl	800ed90 <asin>
 8003432:	ec53 2b10 	vmov	r2, r3, d0
 8003436:	613a      	str	r2, [r7, #16]
 8003438:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <inverseKinematic+0x1b18>)
 8003440:	ed97 7b04 	vldr	d7, [r7, #16]
 8003444:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <inverseKinematic+0x1b18>)
 800344a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <inverseKinematic+0x1b1c>)
 8003454:	f7fd f8d8 	bl	8000608 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	a34f      	add	r3, pc, #316	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f9f9 	bl	800085c <__aeabi_ddiv>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4952      	ldr	r1, [pc, #328]	; (80035b8 <inverseKinematic+0x1b18>)
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <inverseKinematic+0x1b20>)
 8003476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347a:	a347      	add	r3, pc, #284	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f9ec 	bl	800085c <__aeabi_ddiv>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	ec43 2b17 	vmov	d7, r2, r3
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f00b fc7c 	bl	800ed90 <asin>
 8003498:	ec53 2b10 	vmov	r2, r3, d0
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <inverseKinematic+0x1b24>)
 80034a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80034aa:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80034ae:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <inverseKinematic+0x1b24>)
 80034b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <inverseKinematic+0x1b1c>)
 80034ba:	f7fd f8a5 	bl	8000608 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	a336      	add	r3, pc, #216	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f9c6 	bl	800085c <__aeabi_ddiv>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	493b      	ldr	r1, [pc, #236]	; (80035c4 <inverseKinematic+0x1b24>)
 80034d6:	e9c1 2300 	strd	r2, r3, [r1]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <inverseKinematic+0x1b08>)
 80034dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e0:	a32d      	add	r3, pc, #180	; (adr r3, 8003598 <inverseKinematic+0x1af8>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f7fd f9b9 	bl	800085c <__aeabi_ddiv>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	ec43 2b17 	vmov	d7, r2, r3
 80034f2:	eeb0 0a47 	vmov.f32	s0, s14
 80034f6:	eef0 0a67 	vmov.f32	s1, s15
 80034fa:	f00b fc49 	bl	800ed90 <asin>
 80034fe:	ec53 2b10 	vmov	r2, r3, d0
 8003502:	603a      	str	r2, [r7, #0]
 8003504:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <inverseKinematic+0x1b28>)
 800350c:	ed97 7b00 	vldr	d7, [r7]
 8003510:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <inverseKinematic+0x1b28>)
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <inverseKinematic+0x1b1c>)
 8003520:	f7fd f872 	bl	8000608 <__aeabi_dmul>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	a31c      	add	r3, pc, #112	; (adr r3, 80035a0 <inverseKinematic+0x1b00>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f7fd f993 	bl	800085c <__aeabi_ddiv>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4923      	ldr	r1, [pc, #140]	; (80035c8 <inverseKinematic+0x1b28>)
 800353c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003540:	bf00      	nop
 8003542:	3740      	adds	r7, #64	; 0x40
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w
 8003550:	5625749b 	.word	0x5625749b
 8003554:	3faf09d1 	.word	0x3faf09d1
 8003558:	e8584caa 	.word	0xe8584caa
 800355c:	400bb67a 	.word	0x400bb67a
 8003560:	1eb851ec 	.word	0x1eb851ec
 8003564:	3fa1eb85 	.word	0x3fa1eb85
 8003568:	9ba5e356 	.word	0x9ba5e356
 800356c:	3fe020c4 	.word	0x3fe020c4
 8003570:	24dd2f1b 	.word	0x24dd2f1b
 8003574:	3fc58106 	.word	0x3fc58106
 8003578:	00000000 	.word	0x00000000
 800357c:	40000000 	.word	0x40000000
 8003580:	70a3d70a 	.word	0x70a3d70a
 8003584:	3fd70a3d 	.word	0x3fd70a3d
 8003588:	93d96639 	.word	0x93d96639
 800358c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003590:	47ae147c 	.word	0x47ae147c
 8003594:	3fa47ae1 	.word	0x3fa47ae1
 8003598:	9999999a 	.word	0x9999999a
 800359c:	3fc99999 	.word	0x3fc99999
 80035a0:	54442eea 	.word	0x54442eea
 80035a4:	400921fb 	.word	0x400921fb
 80035a8:	20000338 	.word	0x20000338
 80035ac:	20000330 	.word	0x20000330
 80035b0:	20000340 	.word	0x20000340
 80035b4:	200002a8 	.word	0x200002a8
 80035b8:	200005d0 	.word	0x200005d0
 80035bc:	40668000 	.word	0x40668000
 80035c0:	200002f0 	.word	0x200002f0
 80035c4:	20000618 	.word	0x20000618
 80035c8:	20000660 	.word	0x20000660

080035cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035d0:	f004 fdf6 	bl	80081c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035d4:	f000 f818 	bl	8003608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035d8:	f000 fbbe 	bl	8003d58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035dc:	f000 fb92 	bl	8003d04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80035e0:	f000 f87e 	bl	80036e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80035e4:	f000 f91c 	bl	8003820 <MX_TIM2_Init>
  MX_TIM3_Init();
 80035e8:	f000 f966 	bl	80038b8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80035ec:	f000 fa50 	bl	8003a90 <MX_TIM5_Init>
  MX_TIM9_Init();
 80035f0:	f000 fabe 	bl	8003b70 <MX_TIM9_Init>
  MX_TIM10_Init();
 80035f4:	f000 faf6 	bl	8003be4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80035f8:	f000 fb3c 	bl	8003c74 <MX_TIM11_Init>
  MX_TIM4_Init();
 80035fc:	f000 f9d2 	bl	80039a4 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statesMachineLoop();
 8003600:	f000 fff2 	bl	80045e8 <statesMachineLoop>
 8003604:	e7fc      	b.n	8003600 <main+0x34>
	...

08003608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b094      	sub	sp, #80	; 0x50
 800360c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800360e:	f107 0320 	add.w	r3, r7, #32
 8003612:	2230      	movs	r2, #48	; 0x30
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f008 fcf4 	bl	800c004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <SystemClock_Config+0xd0>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <SystemClock_Config+0xd0>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <SystemClock_Config+0xd0>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <SystemClock_Config+0xd4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <SystemClock_Config+0xd4>)
 8003652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b20      	ldr	r3, [pc, #128]	; (80036dc <SystemClock_Config+0xd4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003664:	2303      	movs	r3, #3
 8003666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800366e:	2301      	movs	r3, #1
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003672:	2310      	movs	r3, #16
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003676:	2302      	movs	r3, #2
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800367a:	2300      	movs	r3, #0
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800367e:	2308      	movs	r3, #8
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003686:	2302      	movs	r3, #2
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800368a:	2304      	movs	r3, #4
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800368e:	f107 0320 	add.w	r3, r7, #32
 8003692:	4618      	mov	r0, r3
 8003694:	f005 f9e8 	bl	8008a68 <HAL_RCC_OscConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800369e:	f000 fec9 	bl	8004434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a2:	230f      	movs	r3, #15
 80036a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a6:	2302      	movs	r3, #2
 80036a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	2102      	movs	r1, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f005 fc4a 	bl	8008f58 <HAL_RCC_ClockConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80036ca:	f000 feb3 	bl	8004434 <Error_Handler>
  }
}
 80036ce:	bf00      	nop
 80036d0:	3750      	adds	r7, #80	; 0x50
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000

080036e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b096      	sub	sp, #88	; 0x58
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2220      	movs	r2, #32
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f008 fc73 	bl	800c004 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <MX_TIM1_Init+0x138>)
 8003720:	4a3e      	ldr	r2, [pc, #248]	; (800381c <MX_TIM1_Init+0x13c>)
 8003722:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <MX_TIM1_Init+0x138>)
 8003726:	223f      	movs	r2, #63	; 0x3f
 8003728:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <MX_TIM1_Init+0x138>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <MX_TIM1_Init+0x138>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <MX_TIM1_Init+0x138>)
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <MX_TIM1_Init+0x138>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003742:	4b35      	ldr	r3, [pc, #212]	; (8003818 <MX_TIM1_Init+0x138>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003748:	4833      	ldr	r0, [pc, #204]	; (8003818 <MX_TIM1_Init+0x138>)
 800374a:	f005 ff15 	bl	8009578 <HAL_TIM_Base_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003754:	f000 fe6e 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800375e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003762:	4619      	mov	r1, r3
 8003764:	482c      	ldr	r0, [pc, #176]	; (8003818 <MX_TIM1_Init+0x138>)
 8003766:	f006 fe11 	bl	800a38c <HAL_TIM_ConfigClockSource>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003770:	f000 fe60 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003774:	4828      	ldr	r0, [pc, #160]	; (8003818 <MX_TIM1_Init+0x138>)
 8003776:	f006 f862 	bl	800983e <HAL_TIM_PWM_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003780:	f000 fe58 	bl	8004434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003788:	2300      	movs	r3, #0
 800378a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800378c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003790:	4619      	mov	r1, r3
 8003792:	4821      	ldr	r0, [pc, #132]	; (8003818 <MX_TIM1_Init+0x138>)
 8003794:	f007 faca 	bl	800ad2c <HAL_TIMEx_MasterConfigSynchronization>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800379e:	f000 fe49 	bl	8004434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a2:	2360      	movs	r3, #96	; 0x60
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ae:	2300      	movs	r3, #0
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c2:	2200      	movs	r2, #0
 80037c4:	4619      	mov	r1, r3
 80037c6:	4814      	ldr	r0, [pc, #80]	; (8003818 <MX_TIM1_Init+0x138>)
 80037c8:	f006 fd1e 	bl	800a208 <HAL_TIM_PWM_ConfigChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80037d2:	f000 fe2f 	bl	8004434 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <MX_TIM1_Init+0x138>)
 80037fa:	f007 fb05 	bl	800ae08 <HAL_TIMEx_ConfigBreakDeadTime>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003804:	f000 fe16 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <MX_TIM1_Init+0x138>)
 800380a:	f001 ff19 	bl	8005640 <HAL_TIM_MspPostInit>

}
 800380e:	bf00      	nop
 8003810:	3758      	adds	r7, #88	; 0x58
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000348 	.word	0x20000348
 800381c:	40010000 	.word	0x40010000

08003820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003834:	463b      	mov	r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <MX_TIM2_Init+0x94>)
 800383e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003842:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003846:	2200      	movs	r2, #0
 8003848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <MX_TIM2_Init+0x94>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003852:	f04f 32ff 	mov.w	r2, #4294967295
 8003856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <MX_TIM2_Init+0x94>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003864:	4813      	ldr	r0, [pc, #76]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003866:	f005 fe87 	bl	8009578 <HAL_TIM_Base_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003870:	f000 fde0 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4619      	mov	r1, r3
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <MX_TIM2_Init+0x94>)
 8003882:	f006 fd83 	bl	800a38c <HAL_TIM_ConfigClockSource>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800388c:	f000 fdd2 	bl	8004434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003898:	463b      	mov	r3, r7
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	; (80038b4 <MX_TIM2_Init+0x94>)
 800389e:	f007 fa45 	bl	800ad2c <HAL_TIMEx_MasterConfigSynchronization>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038a8:	f000 fdc4 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000390 	.word	0x20000390

080038b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08e      	sub	sp, #56	; 0x38
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038cc:	f107 0320 	add.w	r3, r7, #32
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <MX_TIM3_Init+0xe4>)
 80038ea:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <MX_TIM3_Init+0xe8>)
 80038ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <MX_TIM3_Init+0xe4>)
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <MX_TIM3_Init+0xe4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80038fa:	4b28      	ldr	r3, [pc, #160]	; (800399c <MX_TIM3_Init+0xe4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <MX_TIM3_Init+0xe4>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <MX_TIM3_Init+0xe4>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800390c:	4823      	ldr	r0, [pc, #140]	; (800399c <MX_TIM3_Init+0xe4>)
 800390e:	f005 fe33 	bl	8009578 <HAL_TIM_Base_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003918:	f000 fd8c 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003926:	4619      	mov	r1, r3
 8003928:	481c      	ldr	r0, [pc, #112]	; (800399c <MX_TIM3_Init+0xe4>)
 800392a:	f006 fd2f 	bl	800a38c <HAL_TIM_ConfigClockSource>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003934:	f000 fd7e 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003938:	4818      	ldr	r0, [pc, #96]	; (800399c <MX_TIM3_Init+0xe4>)
 800393a:	f005 ff80 	bl	800983e <HAL_TIM_PWM_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003944:	f000 fd76 	bl	8004434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003950:	f107 0320 	add.w	r3, r7, #32
 8003954:	4619      	mov	r1, r3
 8003956:	4811      	ldr	r0, [pc, #68]	; (800399c <MX_TIM3_Init+0xe4>)
 8003958:	f007 f9e8 	bl	800ad2c <HAL_TIMEx_MasterConfigSynchronization>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003962:	f000 fd67 	bl	8004434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003966:	2360      	movs	r3, #96	; 0x60
 8003968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	2200      	movs	r2, #0
 800397a:	4619      	mov	r1, r3
 800397c:	4807      	ldr	r0, [pc, #28]	; (800399c <MX_TIM3_Init+0xe4>)
 800397e:	f006 fc43 	bl	800a208 <HAL_TIM_PWM_ConfigChannel>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003988:	f000 fd54 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800398c:	4803      	ldr	r0, [pc, #12]	; (800399c <MX_TIM3_Init+0xe4>)
 800398e:	f001 fe57 	bl	8005640 <HAL_TIM_MspPostInit>

}
 8003992:	bf00      	nop
 8003994:	3738      	adds	r7, #56	; 0x38
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200003d8 	.word	0x200003d8
 80039a0:	40000400 	.word	0x40000400

080039a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	; 0x38
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b8:	f107 0320 	add.w	r3, r7, #32
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039d4:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039d6:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <MX_TIM4_Init+0xe8>)
 80039d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000;
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039e8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80039ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039fa:	4823      	ldr	r0, [pc, #140]	; (8003a88 <MX_TIM4_Init+0xe4>)
 80039fc:	f005 fdbc 	bl	8009578 <HAL_TIM_Base_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003a06:	f000 fd15 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a14:	4619      	mov	r1, r3
 8003a16:	481c      	ldr	r0, [pc, #112]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a18:	f006 fcb8 	bl	800a38c <HAL_TIM_ConfigClockSource>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003a22:	f000 fd07 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a26:	4818      	ldr	r0, [pc, #96]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a28:	f005 ff09 	bl	800983e <HAL_TIM_PWM_Init>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003a32:	f000 fcff 	bl	8004434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a3e:	f107 0320 	add.w	r3, r7, #32
 8003a42:	4619      	mov	r1, r3
 8003a44:	4810      	ldr	r0, [pc, #64]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a46:	f007 f971 	bl	800ad2c <HAL_TIMEx_MasterConfigSynchronization>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003a50:	f000 fcf0 	bl	8004434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a54:	2360      	movs	r3, #96	; 0x60
 8003a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4807      	ldr	r0, [pc, #28]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a6c:	f006 fbcc 	bl	800a208 <HAL_TIM_PWM_ConfigChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003a76:	f000 fcdd 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <MX_TIM4_Init+0xe4>)
 8003a7c:	f001 fde0 	bl	8005640 <HAL_TIM_MspPostInit>

}
 8003a80:	bf00      	nop
 8003a82:	3738      	adds	r7, #56	; 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000420 	.word	0x20000420
 8003a8c:	40000800 	.word	0x40000800

08003a90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a96:	f107 0318 	add.w	r3, r7, #24
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003aae:	463b      	mov	r3, r7
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <MX_TIM5_Init+0xdc>)
 8003abe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ae0:	4821      	ldr	r0, [pc, #132]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003ae2:	f005 fd49 	bl	8009578 <HAL_TIM_Base_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003aec:	f000 fca2 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003af6:	f107 0318 	add.w	r3, r7, #24
 8003afa:	4619      	mov	r1, r3
 8003afc:	481a      	ldr	r0, [pc, #104]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003afe:	f006 fc45 	bl	800a38c <HAL_TIM_ConfigClockSource>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003b08:	f000 fc94 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003b0c:	4816      	ldr	r0, [pc, #88]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b0e:	f006 f803 	bl	8009b18 <HAL_TIM_IC_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003b18:	f000 fc8c 	bl	8004434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480f      	ldr	r0, [pc, #60]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b2c:	f007 f8fe 	bl	800ad2c <HAL_TIMEx_MasterConfigSynchronization>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8003b36:	f000 fc7d 	bl	8004434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_TIM5_Init+0xd8>)
 8003b52:	f006 fabd 	bl	800a0d0 <HAL_TIM_IC_ConfigChannel>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8003b5c:	f000 fc6a 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000468 	.word	0x20000468
 8003b6c:	40000c00 	.word	0x40000c00

08003b70 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b76:	463b      	mov	r3, r7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <MX_TIM9_Init+0x70>)
 8003b86:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64000;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b96:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003b9a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003ba8:	480c      	ldr	r0, [pc, #48]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003baa:	f005 fce5 	bl	8009578 <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003bb4:	f000 fc3e 	bl	8004434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <MX_TIM9_Init+0x6c>)
 8003bc4:	f006 fbe2 	bl	800a38c <HAL_TIM_ConfigClockSource>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003bce:	f000 fc31 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200004b0 	.word	0x200004b0
 8003be0:	40014000 	.word	0x40014000

08003be4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003bea:	463b      	mov	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <MX_TIM10_Init+0x8c>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c1e:	f005 fcab 	bl	8009578 <HAL_TIM_Base_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8003c28:	f000 fc04 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8003c2c:	480f      	ldr	r0, [pc, #60]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c2e:	f005 ff73 	bl	8009b18 <HAL_TIM_IC_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8003c38:	f000 fbfc 	bl	8004434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c40:	2301      	movs	r3, #1
 8003c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4619      	mov	r1, r3
 8003c52:	4806      	ldr	r0, [pc, #24]	; (8003c6c <MX_TIM10_Init+0x88>)
 8003c54:	f006 fa3c 	bl	800a0d0 <HAL_TIM_IC_ConfigChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8003c5e:	f000 fbe9 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200004f8 	.word	0x200004f8
 8003c70:	40014400 	.word	0x40014400

08003c74 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <MX_TIM11_Init+0x8c>)
 8003c8a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca0:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003cac:	4813      	ldr	r0, [pc, #76]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003cae:	f005 fc63 	bl	8009578 <HAL_TIM_Base_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8003cb8:	f000 fbbc 	bl	8004434 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8003cbc:	480f      	ldr	r0, [pc, #60]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003cbe:	f005 ff2b 	bl	8009b18 <HAL_TIM_IC_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8003cc8:	f000 fbb4 	bl	8004434 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003cdc:	463b      	mov	r3, r7
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4806      	ldr	r0, [pc, #24]	; (8003cfc <MX_TIM11_Init+0x88>)
 8003ce4:	f006 f9f4 	bl	800a0d0 <HAL_TIM_IC_ConfigChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8003cee:	f000 fba1 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000540 	.word	0x20000540
 8003d00:	40014800 	.word	0x40014800

08003d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <MX_USART2_UART_Init+0x50>)
 8003d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d3c:	f007 f8ca 	bl	800aed4 <HAL_UART_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d46:	f000 fb75 	bl	8004434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000588 	.word	0x20000588
 8003d54:	40004400 	.word	0x40004400

08003d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	4b6a      	ldr	r3, [pc, #424]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b67      	ldr	r3, [pc, #412]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b63      	ldr	r3, [pc, #396]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a62      	ldr	r2, [pc, #392]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a5b      	ldr	r2, [pc, #364]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a54      	ldr	r2, [pc, #336]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b52      	ldr	r3, [pc, #328]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <MX_GPIO_Init+0x1c4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f240 1163 	movw	r1, #355	; 0x163
 8003e00:	4847      	ldr	r0, [pc, #284]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e02:	f004 fde5 	bl	80089d0 <HAL_GPIO_WritePin>
                          |S_Enable_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4846      	ldr	r0, [pc, #280]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e0c:	f004 fde0 	bl	80089d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4619      	mov	r1, r3
 8003e26:	483e      	ldr	r0, [pc, #248]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e28:	f004 fc36 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_DirPaP3_Pin S_DirPaP2_Pin S_Enable_3_Pin S_Enable_2_Pin
                           S_Enable_1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003e2c:	f240 1363 	movw	r3, #355	; 0x163
 8003e30:	617b      	str	r3, [r7, #20]
                          |S_Enable_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	4836      	ldr	r0, [pc, #216]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003e46:	f004 fc27 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pin : faultDriver3_Pin */
  GPIO_InitStruct.Pin = faultDriver3_Pin;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(faultDriver3_GPIO_Port, &GPIO_InitStruct);
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4832      	ldr	r0, [pc, #200]	; (8003f28 <MX_GPIO_Init+0x1d0>)
 8003e60:	f004 fc1a 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_DirPaP1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin;
 8003e64:	2301      	movs	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_DirPaP1_GPIO_Port, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	482a      	ldr	r0, [pc, #168]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e7c:	f004 fc0c 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pins : faultDriver2_Pin faultDriver1_Pin E_EndStop1_Sup_Pin E_EndStop1_Inf_Pin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
 8003e80:	f24c 0330 	movw	r3, #49200	; 0xc030
 8003e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e90:	f107 0314 	add.w	r3, r7, #20
 8003e94:	4619      	mov	r1, r3
 8003e96:	4823      	ldr	r0, [pc, #140]	; (8003f24 <MX_GPIO_Init+0x1cc>)
 8003e98:	f004 fbfe 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_EndStop3_Sup_Pin E_EndStop2_Sup_Pin E_EndStop3_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop2_Sup_Pin|E_EndStop3_Inf_Pin;
 8003e9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ea2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	481b      	ldr	r0, [pc, #108]	; (8003f20 <MX_GPIO_Init+0x1c8>)
 8003eb4:	f004 fbf0 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_EndStop2_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop2_Inf_Pin;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ebc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_EndStop2_Inf_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4817      	ldr	r0, [pc, #92]	; (8003f2c <MX_GPIO_Init+0x1d4>)
 8003ece:	f004 fbe3 	bl	8008698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	2008      	movs	r0, #8
 8003ed8:	f004 fb07 	bl	80084ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003edc:	2008      	movs	r0, #8
 8003ede:	f004 fb20 	bl	8008522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	200a      	movs	r0, #10
 8003ee8:	f004 faff 	bl	80084ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003eec:	200a      	movs	r0, #10
 8003eee:	f004 fb18 	bl	8008522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	2017      	movs	r0, #23
 8003ef8:	f004 faf7 	bl	80084ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003efc:	2017      	movs	r0, #23
 8003efe:	f004 fb10 	bl	8008522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2102      	movs	r1, #2
 8003f06:	2028      	movs	r0, #40	; 0x28
 8003f08:	f004 faef 	bl	80084ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f0c:	2028      	movs	r0, #40	; 0x28
 8003f0e:	f004 fb08 	bl	8008522 <HAL_NVIC_EnableIRQ>

}
 8003f12:	bf00      	nop
 8003f14:	3728      	adds	r7, #40	; 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020400 	.word	0x40020400
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020c00 	.word	0x40020c00

08003f30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	80fb      	strh	r3, [r7, #6]

	switch( GPIO_Pin){
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f40:	f000 8128 	beq.w	8004194 <HAL_GPIO_EXTI_Callback+0x264>
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f48:	f300 8138 	bgt.w	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	f000 80ca 	beq.w	80040e8 <HAL_GPIO_EXTI_Callback+0x1b8>
 8003f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f58:	f300 8130 	bgt.w	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	f000 8097 	beq.w	8004092 <HAL_GPIO_EXTI_Callback+0x162>
 8003f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f68:	f300 8128 	bgt.w	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f70:	f000 80e5 	beq.w	800413e <HAL_GPIO_EXTI_Callback+0x20e>
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	f300 8120 	bgt.w	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d007      	beq.n	8003f90 <HAL_GPIO_EXTI_Callback+0x60>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	f300 811b 	bgt.w	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d058      	beq.n	800403c <HAL_GPIO_EXTI_Callback+0x10c>
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_GPIO_EXTI_Callback+0xb6>
//			 //manualTrigger = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8003f8e:	e115      	b.n	80041bc <HAL_GPIO_EXTI_Callback+0x28c>
			 Stop_PWM_MOTOR_1;
 8003f90:	2100      	movs	r1, #0
 8003f92:	488d      	ldr	r0, [pc, #564]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 8003f94:	f005 fd5c 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003f98:	2100      	movs	r1, #0
 8003f9a:	488c      	ldr	r0, [pc, #560]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 8003f9c:	f005 fd58 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	488b      	ldr	r0, [pc, #556]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003fa4:	f005 fd54 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003fa8:	488a      	ldr	r0, [pc, #552]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003faa:	f005 fc19 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003fae:	488a      	ldr	r0, [pc, #552]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fb0:	f005 fb8c 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4889      	ldr	r0, [pc, #548]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003fb8:	f005 fe07 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4888      	ldr	r0, [pc, #544]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003fc0:	f005 fe03 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4887      	ldr	r0, [pc, #540]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003fc8:	f005 fdff 	bl	8009bca <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8003fcc:	4b86      	ldr	r3, [pc, #536]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8003fd2:	2364      	movs	r3, #100	; 0x64
 8003fd4:	220d      	movs	r2, #13
 8003fd6:	4985      	ldr	r1, [pc, #532]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003fd8:	4885      	ldr	r0, [pc, #532]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8003fda:	f006 ffc8 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 8003fde:	4b85      	ldr	r3, [pc, #532]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	701a      	strb	r2, [r3, #0]
			 break;
 8003fe4:	e0eb      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4877      	ldr	r0, [pc, #476]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 8003fea:	f005 fd31 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4876      	ldr	r0, [pc, #472]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 8003ff2:	f005 fd2d 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4875      	ldr	r0, [pc, #468]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003ffa:	f005 fd29 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003ffe:	4875      	ldr	r0, [pc, #468]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8004000:	f005 fbee 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004004:	4874      	ldr	r0, [pc, #464]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8004006:	f005 fb61 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800400a:	2100      	movs	r1, #0
 800400c:	4873      	ldr	r0, [pc, #460]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 800400e:	f005 fddc 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004012:	2100      	movs	r1, #0
 8004014:	4872      	ldr	r0, [pc, #456]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8004016:	f005 fdd8 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 800401a:	2100      	movs	r1, #0
 800401c:	4871      	ldr	r0, [pc, #452]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800401e:	f005 fdd4 	bl	8009bca <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 8004022:	4b75      	ldr	r3, [pc, #468]	; (80041f8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8004028:	2364      	movs	r3, #100	; 0x64
 800402a:	220d      	movs	r2, #13
 800402c:	496f      	ldr	r1, [pc, #444]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 800402e:	4870      	ldr	r0, [pc, #448]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8004030:	f006 ff9d 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 8004034:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8004036:	2204      	movs	r2, #4
 8004038:	701a      	strb	r2, [r3, #0]
			 break;
 800403a:	e0c0      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 800403c:	2100      	movs	r1, #0
 800403e:	4862      	ldr	r0, [pc, #392]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 8004040:	f005 fd06 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004044:	2100      	movs	r1, #0
 8004046:	4861      	ldr	r0, [pc, #388]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 8004048:	f005 fd02 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800404c:	2100      	movs	r1, #0
 800404e:	4860      	ldr	r0, [pc, #384]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004050:	f005 fcfe 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004054:	485f      	ldr	r0, [pc, #380]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8004056:	f005 fbc3 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800405a:	485f      	ldr	r0, [pc, #380]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800405c:	f005 fb36 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004060:	2100      	movs	r1, #0
 8004062:	485e      	ldr	r0, [pc, #376]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004064:	f005 fdb1 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004068:	2100      	movs	r1, #0
 800406a:	485d      	ldr	r0, [pc, #372]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800406c:	f005 fdad 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004070:	2100      	movs	r1, #0
 8004072:	485c      	ldr	r0, [pc, #368]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8004074:	f005 fda9 	bl	8009bca <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8004078:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 800407e:	2364      	movs	r3, #100	; 0x64
 8004080:	220d      	movs	r2, #13
 8004082:	495a      	ldr	r1, [pc, #360]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 8004084:	485a      	ldr	r0, [pc, #360]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8004086:	f006 ff72 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 800408a:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800408c:	2204      	movs	r2, #4
 800408e:	701a      	strb	r2, [r3, #0]
			 break;
 8004090:	e095      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8004092:	2100      	movs	r1, #0
 8004094:	484c      	ldr	r0, [pc, #304]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 8004096:	f005 fcdb 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800409a:	2100      	movs	r1, #0
 800409c:	484b      	ldr	r0, [pc, #300]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 800409e:	f005 fcd7 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040a2:	2100      	movs	r1, #0
 80040a4:	484a      	ldr	r0, [pc, #296]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80040a6:	f005 fcd3 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 80040aa:	484a      	ldr	r0, [pc, #296]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80040ac:	f005 fb98 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 80040b0:	4849      	ldr	r0, [pc, #292]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80040b2:	f005 fb0b 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 80040b6:	2100      	movs	r1, #0
 80040b8:	4848      	ldr	r0, [pc, #288]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 80040ba:	f005 fd86 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80040be:	2100      	movs	r1, #0
 80040c0:	4847      	ldr	r0, [pc, #284]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80040c2:	f005 fd82 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80040c6:	2100      	movs	r1, #0
 80040c8:	4846      	ldr	r0, [pc, #280]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80040ca:	f005 fd7e 	bl	8009bca <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 80040d4:	2364      	movs	r3, #100	; 0x64
 80040d6:	220d      	movs	r2, #13
 80040d8:	4944      	ldr	r1, [pc, #272]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 80040da:	4845      	ldr	r0, [pc, #276]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80040dc:	f006 ff47 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 80040e0:	4b44      	ldr	r3, [pc, #272]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80040e2:	2204      	movs	r2, #4
 80040e4:	701a      	strb	r2, [r3, #0]
			 break;
 80040e6:	e06a      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 80040e8:	2100      	movs	r1, #0
 80040ea:	4837      	ldr	r0, [pc, #220]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 80040ec:	f005 fcb0 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80040f0:	2100      	movs	r1, #0
 80040f2:	4836      	ldr	r0, [pc, #216]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 80040f4:	f005 fcac 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040f8:	2100      	movs	r1, #0
 80040fa:	4835      	ldr	r0, [pc, #212]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80040fc:	f005 fca8 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004100:	4834      	ldr	r0, [pc, #208]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8004102:	f005 fb6d 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004106:	4834      	ldr	r0, [pc, #208]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8004108:	f005 fae0 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800410c:	2100      	movs	r1, #0
 800410e:	4833      	ldr	r0, [pc, #204]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004110:	f005 fd5b 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004114:	2100      	movs	r1, #0
 8004116:	4832      	ldr	r0, [pc, #200]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8004118:	f005 fd57 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 800411c:	2100      	movs	r1, #0
 800411e:	4831      	ldr	r0, [pc, #196]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8004120:	f005 fd53 	bl	8009bca <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8004124:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 800412a:	2364      	movs	r3, #100	; 0x64
 800412c:	220d      	movs	r2, #13
 800412e:	492f      	ldr	r1, [pc, #188]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 8004130:	482f      	ldr	r0, [pc, #188]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8004132:	f006 ff1c 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8004138:	2204      	movs	r2, #4
 800413a:	701a      	strb	r2, [r3, #0]
			 break;
 800413c:	e03f      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 800413e:	2100      	movs	r1, #0
 8004140:	4821      	ldr	r0, [pc, #132]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x298>)
 8004142:	f005 fc85 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004146:	2100      	movs	r1, #0
 8004148:	4820      	ldr	r0, [pc, #128]	; (80041cc <HAL_GPIO_EXTI_Callback+0x29c>)
 800414a:	f005 fc81 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800414e:	2100      	movs	r1, #0
 8004150:	481f      	ldr	r0, [pc, #124]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004152:	f005 fc7d 	bl	8009a50 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004156:	481f      	ldr	r0, [pc, #124]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8004158:	f005 fb42 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800415c:	481e      	ldr	r0, [pc, #120]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800415e:	f005 fab5 	bl	80096cc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004162:	2100      	movs	r1, #0
 8004164:	481d      	ldr	r0, [pc, #116]	; (80041dc <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004166:	f005 fd30 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800416a:	2100      	movs	r1, #0
 800416c:	481c      	ldr	r0, [pc, #112]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800416e:	f005 fd2c 	bl	8009bca <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004172:	2100      	movs	r1, #0
 8004174:	481b      	ldr	r0, [pc, #108]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8004176:	f005 fd28 	bl	8009bca <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 800417a:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8004180:	2364      	movs	r3, #100	; 0x64
 8004182:	220d      	movs	r2, #13
 8004184:	4919      	ldr	r1, [pc, #100]	; (80041ec <HAL_GPIO_EXTI_Callback+0x2bc>)
 8004186:	481a      	ldr	r0, [pc, #104]	; (80041f0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8004188:	f006 fef1 	bl	800af6e <HAL_UART_Transmit>
			 state = FAULT;
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800418e:	2204      	movs	r2, #4
 8004190:	701a      	strb	r2, [r3, #0]
			 break;
 8004192:	e014      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 if (!upperESalarm && !lowerESalarm && !faultDrivers){
 8004194:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_GPIO_EXTI_Callback+0x284>
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_GPIO_EXTI_Callback+0x284>
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_GPIO_EXTI_Callback+0x2cc>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <HAL_GPIO_EXTI_Callback+0x284>
				 manualTrigger = false;
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
			 break;
 80041b2:	e004      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
			 }else{manualTrigger = true;}
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
			 break;
 80041ba:	e000      	b.n	80041be <HAL_GPIO_EXTI_Callback+0x28e>
		 default: break;
 80041bc:	bf00      	nop


	}


}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000348 	.word	0x20000348
 80041cc:	200003d8 	.word	0x200003d8
 80041d0:	20000420 	.word	0x20000420
 80041d4:	200004b0 	.word	0x200004b0
 80041d8:	20000390 	.word	0x20000390
 80041dc:	20000468 	.word	0x20000468
 80041e0:	200004f8 	.word	0x200004f8
 80041e4:	20000540 	.word	0x20000540
 80041e8:	200006b6 	.word	0x200006b6
 80041ec:	08010100 	.word	0x08010100
 80041f0:	20000588 	.word	0x20000588
 80041f4:	200006b1 	.word	0x200006b1
 80041f8:	200006b5 	.word	0x200006b5
 80041fc:	200006b8 	.word	0x200006b8
 8004200:	200006b7 	.word	0x200006b7

08004204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a30      	ldr	r2, [pc, #192]	; (80042d4 <HAL_UART_RxCpltCallback+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d14d      	bne.n	80042b2 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8004216:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <HAL_UART_RxCpltCallback+0xd4>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b3a      	cmp	r3, #58	; 0x3a
 8004220:	d006      	beq.n	8004230 <HAL_UART_RxCpltCallback+0x2c>
 8004222:	2b3a      	cmp	r3, #58	; 0x3a
 8004224:	dc36      	bgt.n	8004294 <HAL_UART_RxCpltCallback+0x90>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d009      	beq.n	800423e <HAL_UART_RxCpltCallback+0x3a>
 800422a:	2b0d      	cmp	r3, #13
 800422c:	d01e      	beq.n	800426c <HAL_UART_RxCpltCallback+0x68>
 800422e:	e031      	b.n	8004294 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <HAL_UART_RxCpltCallback+0xdc>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
			break;
 800423c:	e040      	b.n	80042c0 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d037      	beq.n	80042b6 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8004246:	4b25      	ldr	r3, [pc, #148]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004250:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004252:	e030      	b.n	80042b6 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_UART_RxCpltCallback+0xe0>)
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 800426a:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b1e      	cmp	r3, #30
 8004272:	d1ef      	bne.n	8004254 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_UART_RxCpltCallback+0xdc>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11e      	bne.n	80042ba <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_UART_RxCpltCallback+0xe0>)
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8004288:	f7fd fa78 	bl	800177c <interpretaComando>
				cm0 = 0;
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <HAL_UART_RxCpltCallback+0xdc>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]

			}
			break;
 8004292:	e012      	b.n	80042ba <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b1d      	cmp	r3, #29
 800429a:	d810      	bhi.n	80042be <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	b2d1      	uxtb	r1, r2
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <HAL_UART_RxCpltCallback+0xd8>)
 80042a6:	7011      	strb	r1, [r2, #0]
 80042a8:	4619      	mov	r1, r3
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <HAL_UART_RxCpltCallback+0xe0>)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	5453      	strb	r3, [r2, r1]
			}
			break;
 80042b0:	e005      	b.n	80042be <HAL_UART_RxCpltCallback+0xba>
		}
	}
 80042b2:	bf00      	nop
 80042b4:	e004      	b.n	80042c0 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_UART_RxCpltCallback+0xbc>
			break;
 80042be:	bf00      	nop
	HAL_UART_Receive_IT(&huart2, &rx_data, 1); //Receive data (one character only)
 80042c0:	2201      	movs	r2, #1
 80042c2:	4905      	ldr	r1, [pc, #20]	; (80042d8 <HAL_UART_RxCpltCallback+0xd4>)
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <HAL_UART_RxCpltCallback+0xe4>)
 80042c6:	f006 fee4 	bl	800b092 <HAL_UART_Receive_IT>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40004400 	.word	0x40004400
 80042d8:	200007fa 	.word	0x200007fa
 80042dc:	200007d9 	.word	0x200007d9
 80042e0:	200006b0 	.word	0x200006b0
 80042e4:	200007dc 	.word	0x200007dc
 80042e8:	20000588 	.word	0x20000588

080042ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	__NOP();
 80042f4:	bf00      	nop
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10f      	bne.n	8004336 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x94>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	429a      	cmp	r2, r3
 8004320:	d103      	bne.n	800432a <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004324:	2201      	movs	r2, #1
 8004326:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8004328:	e02e      	b.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x94>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	3301      	adds	r3, #1
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004332:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004334:	e028      	b.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM10){
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_TIM_IC_CaptureCallback+0x98>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10f      	bne.n	8004360 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	429a      	cmp	r2, r3
 800434a:	d103      	bne.n	8004354 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800434e:	2201      	movs	r2, #1
 8004350:	765a      	strb	r2, [r3, #25]
}
 8004352:	e019      	b.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	3301      	adds	r3, #1
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800435e:	e013      	b.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM11){
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800436c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	429a      	cmp	r2, r3
 8004374:	d103      	bne.n	800437e <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004378:	2201      	movs	r2, #1
 800437a:	765a      	strb	r2, [r3, #25]
}
 800437c:	e004      	b.n	8004388 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	3301      	adds	r3, #1
 8004384:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004386:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40000c00 	.word	0x40000c00
 8004398:	200005d0 	.word	0x200005d0
 800439c:	40014400 	.word	0x40014400
 80043a0:	20000618 	.word	0x20000618
 80043a4:	40014800 	.word	0x40014800
 80043a8:	20000660 	.word	0x20000660
 80043ac:	00000000 	.word	0x00000000

080043b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

	if (htim == &htim9) {  //Timer that update velocity'curve. It interrups every 10 ms
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d129      	bne.n	8004414 <HAL_TIM_PeriodElapsedCallback+0x64>

		if (!timeFlag) {
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_TIM_PeriodElapsedCallback+0x26>
			timeFlag = true;
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
			TIM2->CNT = 0;	//We start counting from here
 80043ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM2->CNT)) * ((double)(TIM2->PSC + 1) / FCL));
 80043d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f899 	bl	8000514 <__aeabi_ui2d>
 80043e2:	4604      	mov	r4, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	3301      	adds	r3, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc f890 	bl	8000514 <__aeabi_ui2d>
 80043f4:	a30a      	add	r3, pc, #40	; (adr r3, 8004420 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fc fa2f 	bl	800085c <__aeabi_ddiv>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4620      	mov	r0, r4
 8004404:	4629      	mov	r1, r5
 8004406:	f7fc f8ff 	bl	8000608 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004410:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bdb0      	pop	{r4, r5, r7, pc}
 800441c:	f3af 8000 	nop.w
 8004420:	00000000 	.word	0x00000000
 8004424:	418e8480 	.word	0x418e8480
 8004428:	200004b0 	.word	0x200004b0
 800442c:	200007d8 	.word	0x200007d8
 8004430:	200006a8 	.word	0x200006a8

08004434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004438:	b672      	cpsid	i
}
 800443a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800443c:	e7fe      	b.n	800443c <Error_Handler+0x8>
	...

08004440 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8004440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800445e:	f7fc fb59 	bl	8000b14 <__aeabi_dcmpge>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02a      	beq.n	80044be <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004474:	f7fb ff10 	bl	8000298 <__aeabi_dsub>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <configMotor+0x5c>
 8004492:	2201      	movs	r2, #1
 8004494:	2101      	movs	r1, #1
 8004496:	484e      	ldr	r0, [pc, #312]	; (80045d0 <configMotor+0x190>)
 8004498:	f004 fa9a 	bl	80089d0 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d104      	bne.n	80044ac <configMotor+0x6c>
 80044a2:	2201      	movs	r2, #1
 80044a4:	2102      	movs	r1, #2
 80044a6:	484b      	ldr	r0, [pc, #300]	; (80045d4 <configMotor+0x194>)
 80044a8:	f004 fa92 	bl	80089d0 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d12f      	bne.n	8004512 <configMotor+0xd2>
 80044b2:	2201      	movs	r2, #1
 80044b4:	2101      	movs	r1, #1
 80044b6:	4847      	ldr	r0, [pc, #284]	; (80045d4 <configMotor+0x194>)
 80044b8:	f004 fa8a 	bl	80089d0 <HAL_GPIO_WritePin>
 80044bc:	e029      	b.n	8004512 <configMotor+0xd2>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fb fee5 	bl	8000298 <__aeabi_dsub>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <configMotor+0xb2>
 80044e8:	2200      	movs	r2, #0
 80044ea:	2101      	movs	r1, #1
 80044ec:	4838      	ldr	r0, [pc, #224]	; (80045d0 <configMotor+0x190>)
 80044ee:	f004 fa6f 	bl	80089d0 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d104      	bne.n	8004502 <configMotor+0xc2>
 80044f8:	2200      	movs	r2, #0
 80044fa:	2102      	movs	r1, #2
 80044fc:	4835      	ldr	r0, [pc, #212]	; (80045d4 <configMotor+0x194>)
 80044fe:	f004 fa67 	bl	80089d0 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d104      	bne.n	8004512 <configMotor+0xd2>
 8004508:	2200      	movs	r2, #0
 800450a:	2101      	movs	r1, #1
 800450c:	4831      	ldr	r0, [pc, #196]	; (80045d4 <configMotor+0x194>)
 800450e:	f004 fa5f 	bl	80089d0 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8004512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <configMotor+0x198>)
 800451c:	f7fc f874 	bl	8000608 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <configMotor+0x19c>)
 800452e:	f7fc f995 	bl	800085c <__aeabi_ddiv>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	f7fc fb0f 	bl	8000b68 <__aeabi_d2uiz>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb ffd7 	bl	8000514 <__aeabi_ui2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fb fe93 	bl	8000298 <__aeabi_dsub>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fb fe8f 	bl	800029c <__adddf3>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	if (motor->remainder >= 1) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <configMotor+0x1a0>)
 8004594:	f7fc fabe 	bl	8000b14 <__aeabi_dcmpge>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d100      	bne.n	80045a0 <configMotor+0x160>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 800459e:	e011      	b.n	80045c4 <configMotor+0x184>
		motor->remainder -= 1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <configMotor+0x1a0>)
 80045ac:	f7fb fe74 	bl	8000298 <__aeabi_dsub>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		motor->numStep += 1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045ce:	bf00      	nop
 80045d0:	40020400 	.word	0x40020400
 80045d4:	40020800 	.word	0x40020800
 80045d8:	40bf4000 	.word	0x40bf4000
 80045dc:	40768000 	.word	0x40768000
 80045e0:	3ff00000 	.word	0x3ff00000
 80045e4:	00000000 	.word	0x00000000

080045e8 <statesMachineLoop>:
uint8_t message2[]="done\n";

bool receptionFlag=false;


void statesMachineLoop(void){
 80045e8:	b5b0      	push	{r4, r5, r7, lr}
 80045ea:	af00      	add	r7, sp, #0



	switch (state){
 80045ec:	4b82      	ldr	r3, [pc, #520]	; (80047f8 <statesMachineLoop+0x210>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	f200 8671 	bhi.w	80052d8 <statesMachineLoop+0xcf0>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <statesMachineLoop+0x14>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004611 	.word	0x08004611
 8004600:	08004a69 	.word	0x08004a69
 8004604:	080047ab 	.word	0x080047ab
 8004608:	080046b7 	.word	0x080046b7
 800460c:	08004c29 	.word	0x08004c29

	case INIT:

		HAL_UART_Transmit(&huart2,(uint8_t*)"S1\n", 4, 100);
 8004610:	2364      	movs	r3, #100	; 0x64
 8004612:	2204      	movs	r2, #4
 8004614:	4979      	ldr	r1, [pc, #484]	; (80047fc <statesMachineLoop+0x214>)
 8004616:	487a      	ldr	r0, [pc, #488]	; (8004800 <statesMachineLoop+0x218>)
 8004618:	f006 fca9 	bl	800af6e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800461c:	2201      	movs	r2, #1
 800461e:	4979      	ldr	r1, [pc, #484]	; (8004804 <statesMachineLoop+0x21c>)
 8004620:	4877      	ldr	r0, [pc, #476]	; (8004800 <statesMachineLoop+0x218>)
 8004622:	f006 fd36 	bl	800b092 <HAL_UART_Receive_IT>

		HAL_TIM_Base_Start(&htim1);
 8004626:	4878      	ldr	r0, [pc, #480]	; (8004808 <statesMachineLoop+0x220>)
 8004628:	f004 fff6 	bl	8009618 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 800462c:	4877      	ldr	r0, [pc, #476]	; (800480c <statesMachineLoop+0x224>)
 800462e:	f004 fff3 	bl	8009618 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim4);
 8004632:	4877      	ldr	r0, [pc, #476]	; (8004810 <statesMachineLoop+0x228>)
 8004634:	f004 fff0 	bl	8009618 <HAL_TIM_Base_Start>

		//Enable drivers motores (0 es habilitado)
		ENABLE_PIN_RESET_1;
 8004638:	2200      	movs	r2, #0
 800463a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800463e:	4875      	ldr	r0, [pc, #468]	; (8004814 <statesMachineLoop+0x22c>)
 8004640:	f004 f9c6 	bl	80089d0 <HAL_GPIO_WritePin>
		ENABLE_PIN_RESET_2;
 8004644:	2200      	movs	r2, #0
 8004646:	2140      	movs	r1, #64	; 0x40
 8004648:	4872      	ldr	r0, [pc, #456]	; (8004814 <statesMachineLoop+0x22c>)
 800464a:	f004 f9c1 	bl	80089d0 <HAL_GPIO_WritePin>
		ENABLE_PIN_RESET_3;
 800464e:	2200      	movs	r2, #0
 8004650:	2120      	movs	r1, #32
 8004652:	4870      	ldr	r0, [pc, #448]	; (8004814 <statesMachineLoop+0x22c>)
 8004654:	f004 f9bc 	bl	80089d0 <HAL_GPIO_WritePin>

		HAL_Delay(DELAY_ENABLE);
 8004658:	2032      	movs	r0, #50	; 0x32
 800465a:	f003 fe23 	bl	80082a4 <HAL_Delay>

		//Se estable la direccion horario por defecto
		positive_Dir_MOTOR_1;
 800465e:	2200      	movs	r2, #0
 8004660:	2101      	movs	r1, #1
 8004662:	486d      	ldr	r0, [pc, #436]	; (8004818 <statesMachineLoop+0x230>)
 8004664:	f004 f9b4 	bl	80089d0 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_2;
 8004668:	2200      	movs	r2, #0
 800466a:	2102      	movs	r1, #2
 800466c:	4869      	ldr	r0, [pc, #420]	; (8004814 <statesMachineLoop+0x22c>)
 800466e:	f004 f9af 	bl	80089d0 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_3;
 8004672:	2200      	movs	r2, #0
 8004674:	2101      	movs	r1, #1
 8004676:	4867      	ldr	r0, [pc, #412]	; (8004814 <statesMachineLoop+0x22c>)
 8004678:	f004 f9aa 	bl	80089d0 <HAL_GPIO_WritePin>

		motor1.stepReached = false;
 800467c:	4b67      	ldr	r3, [pc, #412]	; (800481c <statesMachineLoop+0x234>)
 800467e:	2200      	movs	r2, #0
 8004680:	765a      	strb	r2, [r3, #25]
		motor2.stepReached = false;
 8004682:	4b67      	ldr	r3, [pc, #412]	; (8004820 <statesMachineLoop+0x238>)
 8004684:	2200      	movs	r2, #0
 8004686:	765a      	strb	r2, [r3, #25]
		motor3.stepReached = false;
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <statesMachineLoop+0x23c>)
 800468a:	2200      	movs	r2, #0
 800468c:	765a      	strb	r2, [r3, #25]


		HAL_UART_Transmit(&huart2, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 800468e:	2364      	movs	r3, #100	; 0x64
 8004690:	2220      	movs	r2, #32
 8004692:	4965      	ldr	r1, [pc, #404]	; (8004828 <statesMachineLoop+0x240>)
 8004694:	485a      	ldr	r0, [pc, #360]	; (8004800 <statesMachineLoop+0x218>)
 8004696:	f006 fc6a 	bl	800af6e <HAL_UART_Transmit>
		HAL_Delay(100);
 800469a:	2064      	movs	r0, #100	; 0x64
 800469c:	f003 fe02 	bl	80082a4 <HAL_Delay>
		HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 4, 100);
 80046a0:	2364      	movs	r3, #100	; 0x64
 80046a2:	2204      	movs	r2, #4
 80046a4:	4961      	ldr	r1, [pc, #388]	; (800482c <statesMachineLoop+0x244>)
 80046a6:	4856      	ldr	r0, [pc, #344]	; (8004800 <statesMachineLoop+0x218>)
 80046a8:	f006 fc61 	bl	800af6e <HAL_UART_Transmit>
		state = READY;
 80046ac:	4b52      	ldr	r3, [pc, #328]	; (80047f8 <statesMachineLoop+0x210>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]

		break;
 80046b2:	f000 be18 	b.w	80052e6 <statesMachineLoop+0xcfe>

	case HOME:

		HAL_UART_Transmit(&huart2,(uint8_t*)"S3\n", 4, 100);
 80046b6:	2364      	movs	r3, #100	; 0x64
 80046b8:	2204      	movs	r2, #4
 80046ba:	495d      	ldr	r1, [pc, #372]	; (8004830 <statesMachineLoop+0x248>)
 80046bc:	4850      	ldr	r0, [pc, #320]	; (8004800 <statesMachineLoop+0x218>)
 80046be:	f006 fc56 	bl	800af6e <HAL_UART_Transmit>
		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 80046c2:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <statesMachineLoop+0x24c>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]

		homing();
 80046c8:	f7fc fc76 	bl	8000fb8 <homing>

        if(homFin){
 80046cc:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <statesMachineLoop+0x250>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8603 	beq.w	80052dc <statesMachineLoop+0xcf4>

        	homFin = false;
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <statesMachineLoop+0x250>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 80046dc:	2006      	movs	r0, #6
 80046de:	f003 ff20 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 80046e2:	2007      	movs	r0, #7
 80046e4:	f003 ff1d 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 80046e8:	2008      	movs	r0, #8
 80046ea:	f003 ff1a 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 80046ee:	2009      	movs	r0, #9
 80046f0:	f003 ff17 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 80046f4:	200a      	movs	r0, #10
 80046f6:	f003 ff14 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 80046fa:	2017      	movs	r0, #23
 80046fc:	f003 ff11 	bl	8008522 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8004700:	2028      	movs	r0, #40	; 0x28
 8004702:	f003 ff0e 	bl	8008522 <HAL_NVIC_EnableIRQ>

        	HAL_Delay(10);
 8004706:	200a      	movs	r0, #10
 8004708:	f003 fdcc 	bl	80082a4 <HAL_Delay>

			Pini.x=0;
 800470c:	494b      	ldr	r1, [pc, #300]	; (800483c <statesMachineLoop+0x254>)
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 800471a:	4948      	ldr	r1, [pc, #288]	; (800483c <statesMachineLoop+0x254>)
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8004728:	4944      	ldr	r1, [pc, #272]	; (800483c <statesMachineLoop+0x254>)
 800472a:	a331      	add	r3, pc, #196	; (adr r3, 80047f0 <statesMachineLoop+0x208>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8004734:	4939      	ldr	r1, [pc, #228]	; (800481c <statesMachineLoop+0x234>)
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8004742:	4937      	ldr	r1, [pc, #220]	; (8004820 <statesMachineLoop+0x238>)
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8004750:	4934      	ldr	r1, [pc, #208]	; (8004824 <statesMachineLoop+0x23c>)
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 800475e:	492f      	ldr	r1, [pc, #188]	; (800481c <statesMachineLoop+0x234>)
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 800476c:	492c      	ldr	r1, [pc, #176]	; (8004820 <statesMachineLoop+0x238>)
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 800477a:	492a      	ldr	r1, [pc, #168]	; (8004824 <statesMachineLoop+0x23c>)
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9c1 2308 	strd	r2, r3, [r1, #32]

			upperESalarm = false;
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <statesMachineLoop+0x258>)
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
			lowerESalarm = false;
 800478e:	4b2d      	ldr	r3, [pc, #180]	; (8004844 <statesMachineLoop+0x25c>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 4, 100);
 8004794:	2364      	movs	r3, #100	; 0x64
 8004796:	2204      	movs	r2, #4
 8004798:	4924      	ldr	r1, [pc, #144]	; (800482c <statesMachineLoop+0x244>)
 800479a:	4819      	ldr	r0, [pc, #100]	; (8004800 <statesMachineLoop+0x218>)
 800479c:	f006 fbe7 	bl	800af6e <HAL_UART_Transmit>
			state = READY;
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <statesMachineLoop+0x210>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]

        }

		break;
 80047a6:	f000 bd99 	b.w	80052dc <statesMachineLoop+0xcf4>

	case WORKING:

		receptionFlag = false;
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <statesMachineLoop+0x24c>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2,(uint8_t*)"S4\n", 4, 100);

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 80047b0:	e0cf      	b.n	8004952 <statesMachineLoop+0x36a>

			if (state==FAULT)break;
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <statesMachineLoop+0x210>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	f000 80db 	beq.w	8004972 <statesMachineLoop+0x38a>

			if (motor1.stepReached) {
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <statesMachineLoop+0x234>)
 80047be:	7e5b      	ldrb	r3, [r3, #25]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <statesMachineLoop+0x1ee>
				Stop_PWM_MOTOR_1;
 80047c4:	2100      	movs	r1, #0
 80047c6:	4810      	ldr	r0, [pc, #64]	; (8004808 <statesMachineLoop+0x220>)
 80047c8:	f005 f942 	bl	8009a50 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 80047cc:	2100      	movs	r1, #0
 80047ce:	481e      	ldr	r0, [pc, #120]	; (8004848 <statesMachineLoop+0x260>)
 80047d0:	f005 f9fb 	bl	8009bca <HAL_TIM_IC_Stop>
 80047d4:	e048      	b.n	8004868 <statesMachineLoop+0x280>
			}else if (motor2.stepReached) {
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <statesMachineLoop+0x238>)
 80047d8:	7e5b      	ldrb	r3, [r3, #25]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d038      	beq.n	8004850 <statesMachineLoop+0x268>
				Stop_PWM_MOTOR_2;
 80047de:	2100      	movs	r1, #0
 80047e0:	480a      	ldr	r0, [pc, #40]	; (800480c <statesMachineLoop+0x224>)
 80047e2:	f005 f935 	bl	8009a50 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_2);
 80047e6:	2104      	movs	r1, #4
 80047e8:	4818      	ldr	r0, [pc, #96]	; (800484c <statesMachineLoop+0x264>)
 80047ea:	f005 f9ee 	bl	8009bca <HAL_TIM_IC_Stop>
 80047ee:	e03b      	b.n	8004868 <statesMachineLoop+0x280>
 80047f0:	c2f837b5 	.word	0xc2f837b5
 80047f4:	bfe0aa64 	.word	0xbfe0aa64
 80047f8:	200006b1 	.word	0x200006b1
 80047fc:	08010104 	.word	0x08010104
 8004800:	20000588 	.word	0x20000588
 8004804:	200007fa 	.word	0x200007fa
 8004808:	20000348 	.word	0x20000348
 800480c:	200003d8 	.word	0x200003d8
 8004810:	20000420 	.word	0x20000420
 8004814:	40020800 	.word	0x40020800
 8004818:	40020400 	.word	0x40020400
 800481c:	200005d0 	.word	0x200005d0
 8004820:	20000618 	.word	0x20000618
 8004824:	20000660 	.word	0x20000660
 8004828:	20000030 	.word	0x20000030
 800482c:	08010108 	.word	0x08010108
 8004830:	0801010c 	.word	0x0801010c
 8004834:	200007fb 	.word	0x200007fb
 8004838:	200006b2 	.word	0x200006b2
 800483c:	20000700 	.word	0x20000700
 8004840:	200006b5 	.word	0x200006b5
 8004844:	200006b6 	.word	0x200006b6
 8004848:	20000468 	.word	0x20000468
 800484c:	200004f8 	.word	0x200004f8
			}else if (motor3.stepReached){
 8004850:	4b6f      	ldr	r3, [pc, #444]	; (8004a10 <statesMachineLoop+0x428>)
 8004852:	7e5b      	ldrb	r3, [r3, #25]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <statesMachineLoop+0x280>
				Stop_PWM_MOTOR_3;
 8004858:	2100      	movs	r1, #0
 800485a:	486e      	ldr	r0, [pc, #440]	; (8004a14 <statesMachineLoop+0x42c>)
 800485c:	f005 f8f8 	bl	8009a50 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_3);
 8004860:	2108      	movs	r1, #8
 8004862:	486d      	ldr	r0, [pc, #436]	; (8004a18 <statesMachineLoop+0x430>)
 8004864:	f005 f9b1 	bl	8009bca <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8004868:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <statesMachineLoop+0x434>)
 800486a:	ed93 7b00 	vldr	d7, [r3]
 800486e:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <statesMachineLoop+0x438>)
 8004870:	ed93 6b08 	vldr	d6, [r3, #32]
 8004874:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <statesMachineLoop+0x438>)
 8004876:	ed93 5b00 	vldr	d5, [r3]
 800487a:	486a      	ldr	r0, [pc, #424]	; (8004a24 <statesMachineLoop+0x43c>)
 800487c:	eeb0 2a45 	vmov.f32	s4, s10
 8004880:	eef0 2a65 	vmov.f32	s5, s11
 8004884:	eeb0 1a46 	vmov.f32	s2, s12
 8004888:	eef0 1a66 	vmov.f32	s3, s13
 800488c:	eeb0 0a47 	vmov.f32	s0, s14
 8004890:	eef0 0a67 	vmov.f32	s1, s15
 8004894:	f001 f928 	bl	8005ae8 <get_Straj>
 8004898:	eeb0 7a40 	vmov.f32	s14, s0
 800489c:	eef0 7a60 	vmov.f32	s15, s1
 80048a0:	4b5f      	ldr	r3, [pc, #380]	; (8004a20 <statesMachineLoop+0x438>)
 80048a2:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <statesMachineLoop+0x434>)
 80048a8:	ed93 7b00 	vldr	d7, [r3]
 80048ac:	4b5e      	ldr	r3, [pc, #376]	; (8004a28 <statesMachineLoop+0x440>)
 80048ae:	ed93 6b08 	vldr	d6, [r3, #32]
 80048b2:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <statesMachineLoop+0x440>)
 80048b4:	ed93 5b00 	vldr	d5, [r3]
 80048b8:	485c      	ldr	r0, [pc, #368]	; (8004a2c <statesMachineLoop+0x444>)
 80048ba:	eeb0 2a45 	vmov.f32	s4, s10
 80048be:	eef0 2a65 	vmov.f32	s5, s11
 80048c2:	eeb0 1a46 	vmov.f32	s2, s12
 80048c6:	eef0 1a66 	vmov.f32	s3, s13
 80048ca:	eeb0 0a47 	vmov.f32	s0, s14
 80048ce:	eef0 0a67 	vmov.f32	s1, s15
 80048d2:	f001 f909 	bl	8005ae8 <get_Straj>
 80048d6:	eeb0 7a40 	vmov.f32	s14, s0
 80048da:	eef0 7a60 	vmov.f32	s15, s1
 80048de:	4b52      	ldr	r3, [pc, #328]	; (8004a28 <statesMachineLoop+0x440>)
 80048e0:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 80048e4:	4b4d      	ldr	r3, [pc, #308]	; (8004a1c <statesMachineLoop+0x434>)
 80048e6:	ed93 7b00 	vldr	d7, [r3]
 80048ea:	4b49      	ldr	r3, [pc, #292]	; (8004a10 <statesMachineLoop+0x428>)
 80048ec:	ed93 6b08 	vldr	d6, [r3, #32]
 80048f0:	4b47      	ldr	r3, [pc, #284]	; (8004a10 <statesMachineLoop+0x428>)
 80048f2:	ed93 5b00 	vldr	d5, [r3]
 80048f6:	484e      	ldr	r0, [pc, #312]	; (8004a30 <statesMachineLoop+0x448>)
 80048f8:	eeb0 2a45 	vmov.f32	s4, s10
 80048fc:	eef0 2a65 	vmov.f32	s5, s11
 8004900:	eeb0 1a46 	vmov.f32	s2, s12
 8004904:	eef0 1a66 	vmov.f32	s3, s13
 8004908:	eeb0 0a47 	vmov.f32	s0, s14
 800490c:	eef0 0a67 	vmov.f32	s1, s15
 8004910:	f001 f8ea 	bl	8005ae8 <get_Straj>
 8004914:	eeb0 7a40 	vmov.f32	s14, s0
 8004918:	eef0 7a60 	vmov.f32	s15, s1
 800491c:	4b3c      	ldr	r3, [pc, #240]	; (8004a10 <statesMachineLoop+0x428>)
 800491e:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8004922:	f003 fa95 	bl	8007e50 <setProfilTimer>


			if(startMotors){
 8004926:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <statesMachineLoop+0x44c>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <statesMachineLoop+0x364>
				startMotors = false;
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <statesMachineLoop+0x44c>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8004934:	2100      	movs	r1, #0
 8004936:	4840      	ldr	r0, [pc, #256]	; (8004a38 <statesMachineLoop+0x450>)
 8004938:	f004 ffda 	bl	80098f0 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 800493c:	2100      	movs	r1, #0
 800493e:	483f      	ldr	r0, [pc, #252]	; (8004a3c <statesMachineLoop+0x454>)
 8004940:	f004 ffd6 	bl	80098f0 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8004944:	2100      	movs	r1, #0
 8004946:	4833      	ldr	r0, [pc, #204]	; (8004a14 <statesMachineLoop+0x42c>)
 8004948:	f004 ffd2 	bl	80098f0 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <statesMachineLoop+0x458>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <statesMachineLoop+0x438>)
 8004954:	7e5b      	ldrb	r3, [r3, #25]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f43f af2b 	beq.w	80047b2 <statesMachineLoop+0x1ca>
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <statesMachineLoop+0x440>)
 800495e:	7e5b      	ldrb	r3, [r3, #25]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f43f af26 	beq.w	80047b2 <statesMachineLoop+0x1ca>
 8004966:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <statesMachineLoop+0x428>)
 8004968:	7e5b      	ldrb	r3, [r3, #25]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f43f af21 	beq.w	80047b2 <statesMachineLoop+0x1ca>
 8004970:	e000      	b.n	8004974 <statesMachineLoop+0x38c>
			if (state==FAULT)break;
 8004972:	bf00      	nop

		}// End while

		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 8004974:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <statesMachineLoop+0x458>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d026      	beq.n	80049ca <statesMachineLoop+0x3e2>

			startMotors = false;
 800497c:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <statesMachineLoop+0x44c>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim5,  TIM_CHANNEL_1);
 8004982:	2100      	movs	r1, #0
 8004984:	482f      	ldr	r0, [pc, #188]	; (8004a44 <statesMachineLoop+0x45c>)
 8004986:	f005 f920 	bl	8009bca <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800498a:	2100      	movs	r1, #0
 800498c:	482e      	ldr	r0, [pc, #184]	; (8004a48 <statesMachineLoop+0x460>)
 800498e:	f005 f91c 	bl	8009bca <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004992:	2100      	movs	r1, #0
 8004994:	4820      	ldr	r0, [pc, #128]	; (8004a18 <statesMachineLoop+0x430>)
 8004996:	f005 f918 	bl	8009bca <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 800499a:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <statesMachineLoop+0x438>)
 800499c:	7e5b      	ldrb	r3, [r3, #25]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <statesMachineLoop+0x3c2>
 80049a2:	2100      	movs	r1, #0
 80049a4:	4824      	ldr	r0, [pc, #144]	; (8004a38 <statesMachineLoop+0x450>)
 80049a6:	f005 f853 	bl	8009a50 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <statesMachineLoop+0x440>)
 80049ac:	7e5b      	ldrb	r3, [r3, #25]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <statesMachineLoop+0x3d2>
 80049b2:	2100      	movs	r1, #0
 80049b4:	4821      	ldr	r0, [pc, #132]	; (8004a3c <statesMachineLoop+0x454>)
 80049b6:	f005 f84b 	bl	8009a50 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <statesMachineLoop+0x428>)
 80049bc:	7e5b      	ldrb	r3, [r3, #25]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <statesMachineLoop+0x3e2>
 80049c2:	2100      	movs	r1, #0
 80049c4:	4813      	ldr	r0, [pc, #76]	; (8004a14 <statesMachineLoop+0x42c>)
 80049c6:	f005 f843 	bl	8009a50 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <statesMachineLoop+0x464>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	491f      	ldr	r1, [pc, #124]	; (8004a50 <statesMachineLoop+0x468>)
 80049d2:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <statesMachineLoop+0x464>)
 80049d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049dc:	491c      	ldr	r1, [pc, #112]	; (8004a50 <statesMachineLoop+0x468>)
 80049de:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 80049e2:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <statesMachineLoop+0x464>)
 80049e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80049e8:	4919      	ldr	r1, [pc, #100]	; (8004a50 <statesMachineLoop+0x468>)
 80049ea:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_UART_Transmit(&huart2, message2, sizeof(message2), 100);
 80049ee:	2364      	movs	r3, #100	; 0x64
 80049f0:	2206      	movs	r2, #6
 80049f2:	4918      	ldr	r1, [pc, #96]	; (8004a54 <statesMachineLoop+0x46c>)
 80049f4:	4818      	ldr	r0, [pc, #96]	; (8004a58 <statesMachineLoop+0x470>)
 80049f6:	f006 faba 	bl	800af6e <HAL_UART_Transmit>

		HAL_TIM_Base_Stop_IT(&htim9);
 80049fa:	4818      	ldr	r0, [pc, #96]	; (8004a5c <statesMachineLoop+0x474>)
 80049fc:	f004 fef0 	bl	80097e0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 8004a00:	4817      	ldr	r0, [pc, #92]	; (8004a60 <statesMachineLoop+0x478>)
 8004a02:	f004 fe63 	bl	80096cc <HAL_TIM_Base_Stop>

		state = READY;
 8004a06:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <statesMachineLoop+0x47c>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]

		break;
 8004a0c:	f000 bc6b 	b.w	80052e6 <statesMachineLoop+0xcfe>
 8004a10:	20000660 	.word	0x20000660
 8004a14:	20000420 	.word	0x20000420
 8004a18:	20000540 	.word	0x20000540
 8004a1c:	200006a8 	.word	0x200006a8
 8004a20:	200005d0 	.word	0x200005d0
 8004a24:	20000730 	.word	0x20000730
 8004a28:	20000618 	.word	0x20000618
 8004a2c:	20000768 	.word	0x20000768
 8004a30:	200007a0 	.word	0x200007a0
 8004a34:	200006b3 	.word	0x200006b3
 8004a38:	20000348 	.word	0x20000348
 8004a3c:	200003d8 	.word	0x200003d8
 8004a40:	200006b4 	.word	0x200006b4
 8004a44:	20000468 	.word	0x20000468
 8004a48:	200004f8 	.word	0x200004f8
 8004a4c:	20000718 	.word	0x20000718
 8004a50:	20000700 	.word	0x20000700
 8004a54:	20000050 	.word	0x20000050
 8004a58:	20000588 	.word	0x20000588
 8004a5c:	200004b0 	.word	0x200004b0
 8004a60:	20000390 	.word	0x20000390
 8004a64:	200006b1 	.word	0x200006b1

	case READY:

		if (receptionFlag){
 8004a68:	4b58      	ldr	r3, [pc, #352]	; (8004bcc <statesMachineLoop+0x5e4>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8437 	beq.w	80052e0 <statesMachineLoop+0xcf8>

			receptionFlag = false;
 8004a72:	4b56      	ldr	r3, [pc, #344]	; (8004bcc <statesMachineLoop+0x5e4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <statesMachineLoop+0x5e8>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4854      	ldr	r0, [pc, #336]	; (8004bd4 <statesMachineLoop+0x5ec>)
 8004a82:	f005 f903 	bl	8009c8c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8004a86:	2100      	movs	r1, #0
 8004a88:	4853      	ldr	r0, [pc, #332]	; (8004bd8 <statesMachineLoop+0x5f0>)
 8004a8a:	f005 f8ff 	bl	8009c8c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4852      	ldr	r0, [pc, #328]	; (8004bdc <statesMachineLoop+0x5f4>)
 8004a92:	f005 f8fb 	bl	8009c8c <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 8004a96:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <statesMachineLoop+0x5f8>)
 8004a98:	ed93 5b00 	vldr	d5, [r3]
 8004a9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004aa0:	ed93 7b04 	vldr	d7, [r3, #16]
 8004aa4:	eeb0 0a45 	vmov.f32	s0, s10
 8004aa8:	eef0 0a65 	vmov.f32	s1, s11
 8004aac:	eeb0 1a46 	vmov.f32	s2, s12
 8004ab0:	eef0 1a66 	vmov.f32	s3, s13
 8004ab4:	eeb0 2a47 	vmov.f32	s4, s14
 8004ab8:	eef0 2a67 	vmov.f32	s5, s15
 8004abc:	f7fc fff0 	bl	8001aa0 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8004ac0:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <statesMachineLoop+0x5fc>)
 8004ac2:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <statesMachineLoop+0x5fc>)
 8004ac8:	ed93 1b00 	vldr	d1, [r3]
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <statesMachineLoop+0x600>)
 8004ace:	ed93 2b00 	vldr	d2, [r3]
 8004ad2:	4b46      	ldr	r3, [pc, #280]	; (8004bec <statesMachineLoop+0x604>)
 8004ad4:	ed93 3b00 	vldr	d3, [r3]
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <statesMachineLoop+0x608>)
 8004ada:	ed93 4b00 	vldr	d4, [r3]
 8004ade:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <statesMachineLoop+0x60c>)
 8004ae0:	ed93 5b00 	vldr	d5, [r3]
 8004ae4:	4b44      	ldr	r3, [pc, #272]	; (8004bf8 <statesMachineLoop+0x610>)
 8004ae6:	ed93 6b00 	vldr	d6, [r3]
 8004aea:	4844      	ldr	r0, [pc, #272]	; (8004bfc <statesMachineLoop+0x614>)
 8004aec:	eeb0 0a47 	vmov.f32	s0, s14
 8004af0:	eef0 0a67 	vmov.f32	s1, s15
 8004af4:	f002 fa10 	bl	8006f18 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8004af8:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <statesMachineLoop+0x618>)
 8004afa:	ed93 7b08 	vldr	d7, [r3, #32]
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <statesMachineLoop+0x618>)
 8004b00:	ed93 1b00 	vldr	d1, [r3]
 8004b04:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <statesMachineLoop+0x600>)
 8004b06:	ed93 2b00 	vldr	d2, [r3]
 8004b0a:	4b38      	ldr	r3, [pc, #224]	; (8004bec <statesMachineLoop+0x604>)
 8004b0c:	ed93 3b00 	vldr	d3, [r3]
 8004b10:	4b37      	ldr	r3, [pc, #220]	; (8004bf0 <statesMachineLoop+0x608>)
 8004b12:	ed93 4b00 	vldr	d4, [r3]
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <statesMachineLoop+0x60c>)
 8004b18:	ed93 5b00 	vldr	d5, [r3]
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <statesMachineLoop+0x610>)
 8004b1e:	ed93 6b00 	vldr	d6, [r3]
 8004b22:	4838      	ldr	r0, [pc, #224]	; (8004c04 <statesMachineLoop+0x61c>)
 8004b24:	eeb0 0a47 	vmov.f32	s0, s14
 8004b28:	eef0 0a67 	vmov.f32	s1, s15
 8004b2c:	f002 f9f4 	bl	8006f18 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <statesMachineLoop+0x620>)
 8004b32:	ed93 7b08 	vldr	d7, [r3, #32]
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <statesMachineLoop+0x620>)
 8004b38:	ed93 1b00 	vldr	d1, [r3]
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <statesMachineLoop+0x600>)
 8004b3e:	ed93 2b00 	vldr	d2, [r3]
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <statesMachineLoop+0x604>)
 8004b44:	ed93 3b00 	vldr	d3, [r3]
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <statesMachineLoop+0x608>)
 8004b4a:	ed93 4b00 	vldr	d4, [r3]
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <statesMachineLoop+0x60c>)
 8004b50:	ed93 5b00 	vldr	d5, [r3]
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <statesMachineLoop+0x610>)
 8004b56:	ed93 6b00 	vldr	d6, [r3]
 8004b5a:	482c      	ldr	r0, [pc, #176]	; (8004c0c <statesMachineLoop+0x624>)
 8004b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b60:	eef0 0a67 	vmov.f32	s1, s15
 8004b64:	f002 f9d8 	bl	8006f18 <update_ScurveTraj>

			configMotor(&motor1,1);
 8004b68:	2101      	movs	r1, #1
 8004b6a:	481e      	ldr	r0, [pc, #120]	; (8004be4 <statesMachineLoop+0x5fc>)
 8004b6c:	f7ff fc68 	bl	8004440 <configMotor>
			configMotor(&motor2,2);
 8004b70:	2102      	movs	r1, #2
 8004b72:	4823      	ldr	r0, [pc, #140]	; (8004c00 <statesMachineLoop+0x618>)
 8004b74:	f7ff fc64 	bl	8004440 <configMotor>
			configMotor(&motor3,3);
 8004b78:	2103      	movs	r1, #3
 8004b7a:	4823      	ldr	r0, [pc, #140]	; (8004c08 <statesMachineLoop+0x620>)
 8004b7c:	f7ff fc60 	bl	8004440 <configMotor>

			timeFlag = false;
 8004b80:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <statesMachineLoop+0x628>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <statesMachineLoop+0x5fc>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <statesMachineLoop+0x618>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8004b92:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <statesMachineLoop+0x620>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <statesMachineLoop+0x5fc>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <statesMachineLoop+0x618>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8004ba4:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <statesMachineLoop+0x620>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start_IT(&htim9);
 8004baa:	481a      	ldr	r0, [pc, #104]	; (8004c14 <statesMachineLoop+0x62c>)
 8004bac:	f004 fdb6 	bl	800971c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8004bb0:	4819      	ldr	r0, [pc, #100]	; (8004c18 <statesMachineLoop+0x630>)
 8004bb2:	f004 fd31 	bl	8009618 <HAL_TIM_Base_Start>

			HAL_UART_Transmit(&huart2,(uint8_t*)"S4\n", 4, 100);
 8004bb6:	2364      	movs	r3, #100	; 0x64
 8004bb8:	2204      	movs	r2, #4
 8004bba:	4918      	ldr	r1, [pc, #96]	; (8004c1c <statesMachineLoop+0x634>)
 8004bbc:	4818      	ldr	r0, [pc, #96]	; (8004c20 <statesMachineLoop+0x638>)
 8004bbe:	f006 f9d6 	bl	800af6e <HAL_UART_Transmit>
			state = WORKING;
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <statesMachineLoop+0x63c>)
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004bc8:	e38a      	b.n	80052e0 <statesMachineLoop+0xcf8>
 8004bca:	bf00      	nop
 8004bcc:	200007fb 	.word	0x200007fb
 8004bd0:	200006b3 	.word	0x200006b3
 8004bd4:	20000468 	.word	0x20000468
 8004bd8:	200004f8 	.word	0x200004f8
 8004bdc:	20000540 	.word	0x20000540
 8004be0:	20000718 	.word	0x20000718
 8004be4:	200005d0 	.word	0x200005d0
 8004be8:	20000018 	.word	0x20000018
 8004bec:	200006f0 	.word	0x200006f0
 8004bf0:	20000010 	.word	0x20000010
 8004bf4:	20000020 	.word	0x20000020
 8004bf8:	20000008 	.word	0x20000008
 8004bfc:	20000730 	.word	0x20000730
 8004c00:	20000618 	.word	0x20000618
 8004c04:	20000768 	.word	0x20000768
 8004c08:	20000660 	.word	0x20000660
 8004c0c:	200007a0 	.word	0x200007a0
 8004c10:	200007d8 	.word	0x200007d8
 8004c14:	200004b0 	.word	0x200004b0
 8004c18:	20000390 	.word	0x20000390
 8004c1c:	08010110 	.word	0x08010110
 8004c20:	20000588 	.word	0x20000588
 8004c24:	200006b1 	.word	0x200006b1

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8004c28:	4bd3      	ldr	r3, [pc, #844]	; (8004f78 <statesMachineLoop+0x990>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fb fc71 	bl	8000514 <__aeabi_ui2d>
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	4bd1      	ldr	r3, [pc, #836]	; (8004f7c <statesMachineLoop+0x994>)
 8004c38:	f7fb fb30 	bl	800029c <__adddf3>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	a1cb      	add	r1, pc, #812	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c46:	f7fb fe09 	bl	800085c <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4614      	mov	r4, r2
 8004c50:	461d      	mov	r5, r3
 8004c52:	4bcb      	ldr	r3, [pc, #812]	; (8004f80 <statesMachineLoop+0x998>)
 8004c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	4bc9      	ldr	r3, [pc, #804]	; (8004f84 <statesMachineLoop+0x99c>)
 8004c5e:	f7fb fcd3 	bl	8000608 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	49c7      	ldr	r1, [pc, #796]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004c6c:	f7fb fdf6 	bl	800085c <__aeabi_ddiv>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb fcc6 	bl	8000608 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	4bbc      	ldr	r3, [pc, #752]	; (8004f7c <statesMachineLoop+0x994>)
 8004c8a:	f7fb fb05 	bl	8000298 <__aeabi_dsub>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	49be      	ldr	r1, [pc, #760]	; (8004f8c <statesMachineLoop+0x9a4>)
 8004c94:	680c      	ldr	r4, [r1, #0]
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7fb ff65 	bl	8000b68 <__aeabi_d2uiz>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ca2:	4bb5      	ldr	r3, [pc, #724]	; (8004f78 <statesMachineLoop+0x990>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fc34 	bl	8000514 <__aeabi_ui2d>
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	4bb2      	ldr	r3, [pc, #712]	; (8004f7c <statesMachineLoop+0x994>)
 8004cb2:	f7fb faf3 	bl	800029c <__adddf3>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	a1ad      	add	r1, pc, #692	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc0:	f7fb fdcc 	bl	800085c <__aeabi_ddiv>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4614      	mov	r4, r2
 8004cca:	461d      	mov	r5, r3
 8004ccc:	4bac      	ldr	r3, [pc, #688]	; (8004f80 <statesMachineLoop+0x998>)
 8004cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	4bab      	ldr	r3, [pc, #684]	; (8004f84 <statesMachineLoop+0x99c>)
 8004cd8:	f7fb fc96 	bl	8000608 <__aeabi_dmul>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	f04f 0000 	mov.w	r0, #0
 8004ce4:	49a8      	ldr	r1, [pc, #672]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004ce6:	f7fb fdb9 	bl	800085c <__aeabi_ddiv>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fc89 	bl	8000608 <__aeabi_dmul>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	4b9e      	ldr	r3, [pc, #632]	; (8004f7c <statesMachineLoop+0x994>)
 8004d04:	f7fb fac8 	bl	8000298 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb ff2a 	bl	8000b68 <__aeabi_d2uiz>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a9d      	ldr	r2, [pc, #628]	; (8004f8c <statesMachineLoop+0x9a4>)
 8004d18:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm_fault));
 8004d1a:	4b97      	ldr	r3, [pc, #604]	; (8004f78 <statesMachineLoop+0x990>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fbf8 	bl	8000514 <__aeabi_ui2d>
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	4b94      	ldr	r3, [pc, #592]	; (8004f7c <statesMachineLoop+0x994>)
 8004d2a:	f7fb fab7 	bl	800029c <__adddf3>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	a18f      	add	r1, pc, #572	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d38:	f7fb fd90 	bl	800085c <__aeabi_ddiv>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4614      	mov	r4, r2
 8004d42:	461d      	mov	r5, r3
 8004d44:	4b8e      	ldr	r3, [pc, #568]	; (8004f80 <statesMachineLoop+0x998>)
 8004d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	4b8d      	ldr	r3, [pc, #564]	; (8004f84 <statesMachineLoop+0x99c>)
 8004d50:	f7fb fc5a 	bl	8000608 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	f04f 0000 	mov.w	r0, #0
 8004d5c:	498a      	ldr	r1, [pc, #552]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004d5e:	f7fb fd7d 	bl	800085c <__aeabi_ddiv>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fc4d 	bl	8000608 <__aeabi_dmul>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	4b80      	ldr	r3, [pc, #512]	; (8004f7c <statesMachineLoop+0x994>)
 8004d7c:	f7fb fa8c 	bl	8000298 <__aeabi_dsub>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4982      	ldr	r1, [pc, #520]	; (8004f90 <statesMachineLoop+0x9a8>)
 8004d86:	680c      	ldr	r4, [r1, #0]
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f7fb feec 	bl	8000b68 <__aeabi_d2uiz>
 8004d90:	4603      	mov	r3, r0
 8004d92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d94:	4b78      	ldr	r3, [pc, #480]	; (8004f78 <statesMachineLoop+0x990>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fbbb 	bl	8000514 <__aeabi_ui2d>
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <statesMachineLoop+0x994>)
 8004da4:	f7fb fa7a 	bl	800029c <__adddf3>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	a170      	add	r1, pc, #448	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db2:	f7fb fd53 	bl	800085c <__aeabi_ddiv>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4614      	mov	r4, r2
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <statesMachineLoop+0x998>)
 8004dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	4b6e      	ldr	r3, [pc, #440]	; (8004f84 <statesMachineLoop+0x99c>)
 8004dca:	f7fb fc1d 	bl	8000608 <__aeabi_dmul>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	496c      	ldr	r1, [pc, #432]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004dd8:	f7fb fd40 	bl	800085c <__aeabi_ddiv>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb fc10 	bl	8000608 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <statesMachineLoop+0x994>)
 8004df6:	f7fb fa4f 	bl	8000298 <__aeabi_dsub>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7fb feb1 	bl	8000b68 <__aeabi_d2uiz>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4a61      	ldr	r2, [pc, #388]	; (8004f90 <statesMachineLoop+0x9a8>)
 8004e0a:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm_fault));
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	; (8004f78 <statesMachineLoop+0x990>)
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fb fb7f 	bl	8000514 <__aeabi_ui2d>
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <statesMachineLoop+0x994>)
 8004e1c:	f7fb fa3e 	bl	800029c <__adddf3>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	a152      	add	r1, pc, #328	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e2a:	f7fb fd17 	bl	800085c <__aeabi_ddiv>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4614      	mov	r4, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	4b52      	ldr	r3, [pc, #328]	; (8004f80 <statesMachineLoop+0x998>)
 8004e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <statesMachineLoop+0x99c>)
 8004e42:	f7fb fbe1 	bl	8000608 <__aeabi_dmul>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	494e      	ldr	r1, [pc, #312]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004e50:	f7fb fd04 	bl	800085c <__aeabi_ddiv>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fbd4 	bl	8000608 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <statesMachineLoop+0x994>)
 8004e6e:	f7fb fa13 	bl	8000298 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4947      	ldr	r1, [pc, #284]	; (8004f94 <statesMachineLoop+0x9ac>)
 8004e78:	680c      	ldr	r4, [r1, #0]
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f7fb fe73 	bl	8000b68 <__aeabi_d2uiz>
 8004e82:	4603      	mov	r3, r0
 8004e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e86:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <statesMachineLoop+0x990>)
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb42 	bl	8000514 <__aeabi_ui2d>
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <statesMachineLoop+0x994>)
 8004e96:	f7fb fa01 	bl	800029c <__adddf3>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	a134      	add	r1, pc, #208	; (adr r1, 8004f70 <statesMachineLoop+0x988>)
 8004ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ea4:	f7fb fcda 	bl	800085c <__aeabi_ddiv>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	461d      	mov	r5, r3
 8004eb0:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <statesMachineLoop+0x998>)
 8004eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <statesMachineLoop+0x99c>)
 8004ebc:	f7fb fba4 	bl	8000608 <__aeabi_dmul>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	492f      	ldr	r1, [pc, #188]	; (8004f88 <statesMachineLoop+0x9a0>)
 8004eca:	f7fb fcc7 	bl	800085c <__aeabi_ddiv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <statesMachineLoop+0x994>)
 8004ee8:	f7fb f9d6 	bl	8000298 <__aeabi_dsub>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f7fb fe38 	bl	8000b68 <__aeabi_d2uiz>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <statesMachineLoop+0x9ac>)
 8004efc:	60d3      	str	r3, [r2, #12]

		TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 8004efe:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <statesMachineLoop+0x990>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fb06 	bl	8000514 <__aeabi_ui2d>
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f10:	f7fb fca4 	bl	800085c <__aeabi_ddiv>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4c17      	ldr	r4, [pc, #92]	; (8004f78 <statesMachineLoop+0x990>)
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fe23 	bl	8000b68 <__aeabi_d2uiz>
 8004f22:	4603      	mov	r3, r0
 8004f24:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8004f26:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <statesMachineLoop+0x9b0>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb faf2 	bl	8000514 <__aeabi_ui2d>
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f38:	f7fb fc90 	bl	800085c <__aeabi_ddiv>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4c15      	ldr	r4, [pc, #84]	; (8004f98 <statesMachineLoop+0x9b0>)
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fb fe0f 	bl	8000b68 <__aeabi_d2uiz>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	6363      	str	r3, [r4, #52]	; 0x34
		TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <statesMachineLoop+0x9b4>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fade 	bl	8000514 <__aeabi_ui2d>
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f60:	f7fb fc7c 	bl	800085c <__aeabi_ddiv>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	e01a      	b.n	8004fa0 <statesMachineLoop+0x9b8>
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w
 8004f70:	00000000 	.word	0x00000000
 8004f74:	418e8480 	.word	0x418e8480
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	3ff00000 	.word	0x3ff00000
 8004f80:	20000028 	.word	0x20000028
 8004f84:	40bf4000 	.word	0x40bf4000
 8004f88:	404e0000 	.word	0x404e0000
 8004f8c:	20000348 	.word	0x20000348
 8004f90:	200003d8 	.word	0x200003d8
 8004f94:	20000420 	.word	0x20000420
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	4cb4      	ldr	r4, [pc, #720]	; (8005274 <statesMachineLoop+0xc8c>)
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fb fddf 	bl	8000b68 <__aeabi_d2uiz>
 8004faa:	4603      	mov	r3, r0
 8004fac:	6363      	str	r3, [r4, #52]	; 0x34

		while((upperESalarm || lowerESalarm) && manualTrigger){
 8004fae:	e152      	b.n	8005256 <statesMachineLoop+0xc6e>


			 if (ES1i_PRESSED){
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	48b1      	ldr	r0, [pc, #708]	; (8005278 <statesMachineLoop+0xc90>)
 8004fb4:	f003 fcf4 	bl	80089a0 <HAL_GPIO_ReadPin>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <statesMachineLoop+0xa12>
				 HAL_Delay(DELAY_FC_SENSOR);
 8004fbe:	201e      	movs	r0, #30
 8004fc0:	f003 f970 	bl	80082a4 <HAL_Delay>
				 if (ES1i_PRESSED){
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	48ac      	ldr	r0, [pc, #688]	; (8005278 <statesMachineLoop+0xc90>)
 8004fc8:	f003 fcea 	bl	80089a0 <HAL_GPIO_ReadPin>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <statesMachineLoop+0xa12>
					 positive_Dir_MOTOR_1;
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	48a8      	ldr	r0, [pc, #672]	; (8005278 <statesMachineLoop+0xc90>)
 8004fd8:	f003 fcfa 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f003 f961 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	48a5      	ldr	r0, [pc, #660]	; (800527c <statesMachineLoop+0xc94>)
 8004fe6:	f004 fc83 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8004fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fee:	f003 f959 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	48a1      	ldr	r0, [pc, #644]	; (800527c <statesMachineLoop+0xc94>)
 8004ff6:	f004 fd2b 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	489e      	ldr	r0, [pc, #632]	; (8005278 <statesMachineLoop+0xc90>)
 8004ffe:	f003 fccf 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11d      	bne.n	8005044 <statesMachineLoop+0xa5c>
				 HAL_Delay(DELAY_FC_SENSOR);
 8005008:	201e      	movs	r0, #30
 800500a:	f003 f94b 	bl	80082a4 <HAL_Delay>
				 if (ES1s_PRESSED){
 800500e:	2110      	movs	r1, #16
 8005010:	4899      	ldr	r0, [pc, #612]	; (8005278 <statesMachineLoop+0xc90>)
 8005012:	f003 fcc5 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <statesMachineLoop+0xa5c>
					 negative_Dir_MOTOR_1;
 800501c:	2201      	movs	r2, #1
 800501e:	2101      	movs	r1, #1
 8005020:	4895      	ldr	r0, [pc, #596]	; (8005278 <statesMachineLoop+0xc90>)
 8005022:	f003 fcd5 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 8005026:	2000      	movs	r0, #0
 8005028:	f003 f93c 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 800502c:	2100      	movs	r1, #0
 800502e:	4893      	ldr	r0, [pc, #588]	; (800527c <statesMachineLoop+0xc94>)
 8005030:	f004 fc5e 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8005034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005038:	f003 f934 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 800503c:	2100      	movs	r1, #0
 800503e:	488f      	ldr	r0, [pc, #572]	; (800527c <statesMachineLoop+0xc94>)
 8005040:	f004 fd06 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2i_PRESSED){
 8005044:	2104      	movs	r1, #4
 8005046:	488e      	ldr	r0, [pc, #568]	; (8005280 <statesMachineLoop+0xc98>)
 8005048:	f003 fcaa 	bl	80089a0 <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d11d      	bne.n	800508e <statesMachineLoop+0xaa6>
				 HAL_Delay(DELAY_FC_SENSOR);
 8005052:	201e      	movs	r0, #30
 8005054:	f003 f926 	bl	80082a4 <HAL_Delay>
				 if (ES2i_PRESSED){
 8005058:	2104      	movs	r1, #4
 800505a:	4889      	ldr	r0, [pc, #548]	; (8005280 <statesMachineLoop+0xc98>)
 800505c:	f003 fca0 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d113      	bne.n	800508e <statesMachineLoop+0xaa6>
					 positive_Dir_MOTOR_2;
 8005066:	2200      	movs	r2, #0
 8005068:	2102      	movs	r1, #2
 800506a:	4886      	ldr	r0, [pc, #536]	; (8005284 <statesMachineLoop+0xc9c>)
 800506c:	f003 fcb0 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 8005070:	2000      	movs	r0, #0
 8005072:	f003 f917 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8005076:	2100      	movs	r1, #0
 8005078:	4883      	ldr	r0, [pc, #524]	; (8005288 <statesMachineLoop+0xca0>)
 800507a:	f004 fc39 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800507e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005082:	f003 f90f 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8005086:	2100      	movs	r1, #0
 8005088:	487f      	ldr	r0, [pc, #508]	; (8005288 <statesMachineLoop+0xca0>)
 800508a:	f004 fce1 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 800508e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005092:	487c      	ldr	r0, [pc, #496]	; (8005284 <statesMachineLoop+0xc9c>)
 8005094:	f003 fc84 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d11e      	bne.n	80050dc <statesMachineLoop+0xaf4>
				 HAL_Delay(DELAY_FC_SENSOR);
 800509e:	201e      	movs	r0, #30
 80050a0:	f003 f900 	bl	80082a4 <HAL_Delay>
				 if (ES2s_PRESSED){
 80050a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050a8:	4876      	ldr	r0, [pc, #472]	; (8005284 <statesMachineLoop+0xc9c>)
 80050aa:	f003 fc79 	bl	80089a0 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d113      	bne.n	80050dc <statesMachineLoop+0xaf4>
					 negative_Dir_MOTOR_2;
 80050b4:	2201      	movs	r2, #1
 80050b6:	2102      	movs	r1, #2
 80050b8:	4872      	ldr	r0, [pc, #456]	; (8005284 <statesMachineLoop+0xc9c>)
 80050ba:	f003 fc89 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80050be:	2000      	movs	r0, #0
 80050c0:	f003 f8f0 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 80050c4:	2100      	movs	r1, #0
 80050c6:	4870      	ldr	r0, [pc, #448]	; (8005288 <statesMachineLoop+0xca0>)
 80050c8:	f004 fc12 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80050cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050d0:	f003 f8e8 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 80050d4:	2100      	movs	r1, #0
 80050d6:	486c      	ldr	r0, [pc, #432]	; (8005288 <statesMachineLoop+0xca0>)
 80050d8:	f004 fcba 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 80050dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050e0:	4868      	ldr	r0, [pc, #416]	; (8005284 <statesMachineLoop+0xc9c>)
 80050e2:	f003 fc5d 	bl	80089a0 <HAL_GPIO_ReadPin>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11e      	bne.n	800512a <statesMachineLoop+0xb42>
				 HAL_Delay(DELAY_FC_SENSOR);
 80050ec:	201e      	movs	r0, #30
 80050ee:	f003 f8d9 	bl	80082a4 <HAL_Delay>
				 if (ES3i_PRESSED){
 80050f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050f6:	4863      	ldr	r0, [pc, #396]	; (8005284 <statesMachineLoop+0xc9c>)
 80050f8:	f003 fc52 	bl	80089a0 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d113      	bne.n	800512a <statesMachineLoop+0xb42>
					 positive_Dir_MOTOR_3;
 8005102:	2200      	movs	r2, #0
 8005104:	2101      	movs	r1, #1
 8005106:	485f      	ldr	r0, [pc, #380]	; (8005284 <statesMachineLoop+0xc9c>)
 8005108:	f003 fc62 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 800510c:	2000      	movs	r0, #0
 800510e:	f003 f8c9 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8005112:	2100      	movs	r1, #0
 8005114:	485d      	ldr	r0, [pc, #372]	; (800528c <statesMachineLoop+0xca4>)
 8005116:	f004 fbeb 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800511a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800511e:	f003 f8c1 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8005122:	2100      	movs	r1, #0
 8005124:	4859      	ldr	r0, [pc, #356]	; (800528c <statesMachineLoop+0xca4>)
 8005126:	f004 fc93 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 800512a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800512e:	4855      	ldr	r0, [pc, #340]	; (8005284 <statesMachineLoop+0xc9c>)
 8005130:	f003 fc36 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11e      	bne.n	8005178 <statesMachineLoop+0xb90>
				 HAL_Delay(DELAY_FC_SENSOR);
 800513a:	201e      	movs	r0, #30
 800513c:	f003 f8b2 	bl	80082a4 <HAL_Delay>
				 if (ES3s_PRESSED){
 8005140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005144:	484f      	ldr	r0, [pc, #316]	; (8005284 <statesMachineLoop+0xc9c>)
 8005146:	f003 fc2b 	bl	80089a0 <HAL_GPIO_ReadPin>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d113      	bne.n	8005178 <statesMachineLoop+0xb90>
					 negative_Dir_MOTOR_3;
 8005150:	2201      	movs	r2, #1
 8005152:	2101      	movs	r1, #1
 8005154:	484b      	ldr	r0, [pc, #300]	; (8005284 <statesMachineLoop+0xc9c>)
 8005156:	f003 fc3b 	bl	80089d0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 800515a:	2000      	movs	r0, #0
 800515c:	f003 f8a2 	bl	80082a4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8005160:	2100      	movs	r1, #0
 8005162:	484a      	ldr	r0, [pc, #296]	; (800528c <statesMachineLoop+0xca4>)
 8005164:	f004 fbc4 	bl	80098f0 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 8005168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800516c:	f003 f89a 	bl	80082a4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8005170:	2100      	movs	r1, #0
 8005172:	4846      	ldr	r0, [pc, #280]	; (800528c <statesMachineLoop+0xca4>)
 8005174:	f004 fc6c 	bl	8009a50 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8005178:	2110      	movs	r1, #16
 800517a:	483f      	ldr	r0, [pc, #252]	; (8005278 <statesMachineLoop+0xc90>)
 800517c:	f003 fc10 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d067      	beq.n	8005256 <statesMachineLoop+0xc6e>
 8005186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800518a:	483e      	ldr	r0, [pc, #248]	; (8005284 <statesMachineLoop+0xc9c>)
 800518c:	f003 fc08 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d05f      	beq.n	8005256 <statesMachineLoop+0xc6e>
 8005196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800519a:	483a      	ldr	r0, [pc, #232]	; (8005284 <statesMachineLoop+0xc9c>)
 800519c:	f003 fc00 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d057      	beq.n	8005256 <statesMachineLoop+0xc6e>
 80051a6:	2120      	movs	r1, #32
 80051a8:	4833      	ldr	r0, [pc, #204]	; (8005278 <statesMachineLoop+0xc90>)
 80051aa:	f003 fbf9 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d050      	beq.n	8005256 <statesMachineLoop+0xc6e>
 80051b4:	2104      	movs	r1, #4
 80051b6:	4832      	ldr	r0, [pc, #200]	; (8005280 <statesMachineLoop+0xc98>)
 80051b8:	f003 fbf2 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d049      	beq.n	8005256 <statesMachineLoop+0xc6e>
 80051c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051c6:	482f      	ldr	r0, [pc, #188]	; (8005284 <statesMachineLoop+0xc9c>)
 80051c8:	f003 fbea 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d041      	beq.n	8005256 <statesMachineLoop+0xc6e>
				 HAL_Delay(DELAY_FC_SENSOR);
 80051d2:	201e      	movs	r0, #30
 80051d4:	f003 f866 	bl	80082a4 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80051d8:	2110      	movs	r1, #16
 80051da:	4827      	ldr	r0, [pc, #156]	; (8005278 <statesMachineLoop+0xc90>)
 80051dc:	f003 fbe0 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d037      	beq.n	8005256 <statesMachineLoop+0xc6e>
 80051e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80051ea:	4826      	ldr	r0, [pc, #152]	; (8005284 <statesMachineLoop+0xc9c>)
 80051ec:	f003 fbd8 	bl	80089a0 <HAL_GPIO_ReadPin>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02f      	beq.n	8005256 <statesMachineLoop+0xc6e>
 80051f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051fa:	4822      	ldr	r0, [pc, #136]	; (8005284 <statesMachineLoop+0xc9c>)
 80051fc:	f003 fbd0 	bl	80089a0 <HAL_GPIO_ReadPin>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d027      	beq.n	8005256 <statesMachineLoop+0xc6e>
 8005206:	2120      	movs	r1, #32
 8005208:	481b      	ldr	r0, [pc, #108]	; (8005278 <statesMachineLoop+0xc90>)
 800520a:	f003 fbc9 	bl	80089a0 <HAL_GPIO_ReadPin>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <statesMachineLoop+0xc6e>
 8005214:	2104      	movs	r1, #4
 8005216:	481a      	ldr	r0, [pc, #104]	; (8005280 <statesMachineLoop+0xc98>)
 8005218:	f003 fbc2 	bl	80089a0 <HAL_GPIO_ReadPin>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d019      	beq.n	8005256 <statesMachineLoop+0xc6e>
 8005222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005226:	4817      	ldr	r0, [pc, #92]	; (8005284 <statesMachineLoop+0xc9c>)
 8005228:	f003 fbba 	bl	80089a0 <HAL_GPIO_ReadPin>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <statesMachineLoop+0xc6e>

					 upperESalarm = false;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <statesMachineLoop+0xca8>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
					 lowerESalarm = false;
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <statesMachineLoop+0xcac>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
					 manualTrigger = false;
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <statesMachineLoop+0xcb0>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 13, 100);
 8005244:	2364      	movs	r3, #100	; 0x64
 8005246:	220d      	movs	r2, #13
 8005248:	4914      	ldr	r1, [pc, #80]	; (800529c <statesMachineLoop+0xcb4>)
 800524a:	4815      	ldr	r0, [pc, #84]	; (80052a0 <statesMachineLoop+0xcb8>)
 800524c:	f005 fe8f 	bl	800af6e <HAL_UART_Transmit>
					 state = READY;
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <statesMachineLoop+0xcbc>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
		while((upperESalarm || lowerESalarm) && manualTrigger){
 8005256:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <statesMachineLoop+0xca8>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <statesMachineLoop+0xc7e>
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <statesMachineLoop+0xcac>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02f      	beq.n	80052c6 <statesMachineLoop+0xcde>
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <statesMachineLoop+0xcb0>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f47f aea0 	bne.w	8004fb0 <statesMachineLoop+0x9c8>
				 }
			 }

		}//End while

		while(faultDrivers && manualTrigger){
 8005270:	e029      	b.n	80052c6 <statesMachineLoop+0xcde>
 8005272:	bf00      	nop
 8005274:	40000800 	.word	0x40000800
 8005278:	40020400 	.word	0x40020400
 800527c:	20000348 	.word	0x20000348
 8005280:	40020c00 	.word	0x40020c00
 8005284:	40020800 	.word	0x40020800
 8005288:	200003d8 	.word	0x200003d8
 800528c:	20000420 	.word	0x20000420
 8005290:	200006b5 	.word	0x200006b5
 8005294:	200006b6 	.word	0x200006b6
 8005298:	200006b7 	.word	0x200006b7
 800529c:	08010108 	.word	0x08010108
 80052a0:	20000588 	.word	0x20000588
 80052a4:	200006b1 	.word	0x200006b1

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <statesMachineLoop+0xd04>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
			manualTrigger = false;
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <statesMachineLoop+0xd08>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 13, 100);
 80052b4:	2364      	movs	r3, #100	; 0x64
 80052b6:	220d      	movs	r2, #13
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <statesMachineLoop+0xd0c>)
 80052ba:	480f      	ldr	r0, [pc, #60]	; (80052f8 <statesMachineLoop+0xd10>)
 80052bc:	f005 fe57 	bl	800af6e <HAL_UART_Transmit>
			state = READY;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <statesMachineLoop+0xd14>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && manualTrigger){
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <statesMachineLoop+0xd04>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <statesMachineLoop+0xcfc>
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <statesMachineLoop+0xd08>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e8      	bne.n	80052a8 <statesMachineLoop+0xcc0>

		}//End while


		break;
 80052d6:	e005      	b.n	80052e4 <statesMachineLoop+0xcfc>


	default:break;
 80052d8:	bf00      	nop
 80052da:	e004      	b.n	80052e6 <statesMachineLoop+0xcfe>
		break;
 80052dc:	bf00      	nop
 80052de:	e002      	b.n	80052e6 <statesMachineLoop+0xcfe>
		break;
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <statesMachineLoop+0xcfe>
		break;
 80052e4:	bf00      	nop
	}
}
 80052e6:	bf00      	nop
 80052e8:	bdb0      	pop	{r4, r5, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200006b8 	.word	0x200006b8
 80052f0:	200006b7 	.word	0x200006b7
 80052f4:	08010108 	.word	0x08010108
 80052f8:	20000588 	.word	0x20000588
 80052fc:	200006b1 	.word	0x200006b1

08005300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_MspInit+0x5c>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <HAL_MspInit+0x5c>)
 8005310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_MspInit+0x5c>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_MspInit+0x5c>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	4a0c      	ldr	r2, [pc, #48]	; (800535c <HAL_MspInit+0x5c>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	6413      	str	r3, [r2, #64]	; 0x40
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_MspInit+0x5c>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800533e:	2005      	movs	r0, #5
 8005340:	f003 f8c8 	bl	80084d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	2001      	movs	r0, #1
 800534a:	f003 f8ce 	bl	80084ea <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800534e:	2001      	movs	r0, #1
 8005350:	f003 f8e7 	bl	8008522 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800

08005360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b098      	sub	sp, #96	; 0x60
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005378:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	611a      	str	r2, [r3, #16]
 8005388:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4aa2      	ldr	r2, [pc, #648]	; (8005618 <HAL_TIM_Base_MspInit+0x2b8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d126      	bne.n	80053e2 <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005394:	2300      	movs	r3, #0
 8005396:	633b      	str	r3, [r7, #48]	; 0x30
 8005398:	4ba0      	ldr	r3, [pc, #640]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	4a9f      	ldr	r2, [pc, #636]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6453      	str	r3, [r2, #68]	; 0x44
 80053a4:	4b9d      	ldr	r3, [pc, #628]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	2018      	movs	r0, #24
 80053b6:	f003 f898 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80053ba:	2018      	movs	r0, #24
 80053bc:	f003 f8b1 	bl	8008522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80053c0:	2200      	movs	r2, #0
 80053c2:	2102      	movs	r1, #2
 80053c4:	2019      	movs	r0, #25
 80053c6:	f003 f890 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80053ca:	2019      	movs	r0, #25
 80053cc:	f003 f8a9 	bl	8008522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2102      	movs	r1, #2
 80053d4:	201a      	movs	r0, #26
 80053d6:	f003 f888 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80053da:	201a      	movs	r0, #26
 80053dc:	f003 f8a1 	bl	8008522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80053e0:	e115      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d10e      	bne.n	800540a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f0:	4b8a      	ldr	r3, [pc, #552]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	4a89      	ldr	r2, [pc, #548]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	6413      	str	r3, [r2, #64]	; 0x40
 80053fc:	4b87      	ldr	r3, [pc, #540]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005408:	e101      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM3)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a84      	ldr	r2, [pc, #528]	; (8005620 <HAL_TIM_Base_MspInit+0x2c0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10e      	bne.n	8005432 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005414:	2300      	movs	r3, #0
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
 8005418:	4b80      	ldr	r3, [pc, #512]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	4a7f      	ldr	r2, [pc, #508]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	6413      	str	r3, [r2, #64]	; 0x40
 8005424:	4b7d      	ldr	r3, [pc, #500]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005430:	e0ed      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7b      	ldr	r2, [pc, #492]	; (8005624 <HAL_TIM_Base_MspInit+0x2c4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d10e      	bne.n	800545a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
 8005440:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4a75      	ldr	r2, [pc, #468]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6413      	str	r3, [r2, #64]	; 0x40
 800544c:	4b73      	ldr	r3, [pc, #460]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005458:	e0d9      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM5)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a72      	ldr	r2, [pc, #456]	; (8005628 <HAL_TIM_Base_MspInit+0x2c8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d134      	bne.n	80054ce <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005464:	2300      	movs	r3, #0
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	4b6c      	ldr	r3, [pc, #432]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	4a6b      	ldr	r2, [pc, #428]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800546e:	f043 0308 	orr.w	r3, r3, #8
 8005472:	6413      	str	r3, [r2, #64]	; 0x40
 8005474:	4b69      	ldr	r3, [pc, #420]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	4b65      	ldr	r3, [pc, #404]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a64      	ldr	r2, [pc, #400]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b62      	ldr	r3, [pc, #392]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 800549c:	2301      	movs	r3, #1
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a8:	2300      	movs	r3, #0
 80054aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80054ac:	2302      	movs	r3, #2
 80054ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 80054b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054b4:	4619      	mov	r1, r3
 80054b6:	485d      	ldr	r0, [pc, #372]	; (800562c <HAL_TIM_Base_MspInit+0x2cc>)
 80054b8:	f003 f8ee 	bl	8008698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80054bc:	2200      	movs	r2, #0
 80054be:	2102      	movs	r1, #2
 80054c0:	2032      	movs	r0, #50	; 0x32
 80054c2:	f003 f812 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80054c6:	2032      	movs	r0, #50	; 0x32
 80054c8:	f003 f82b 	bl	8008522 <HAL_NVIC_EnableIRQ>
}
 80054cc:	e09f      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM9)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a57      	ldr	r2, [pc, #348]	; (8005630 <HAL_TIM_Base_MspInit+0x2d0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d116      	bne.n	8005506 <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	4a4e      	ldr	r2, [pc, #312]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e6:	6453      	str	r3, [r2, #68]	; 0x44
 80054e8:	4b4c      	ldr	r3, [pc, #304]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	2018      	movs	r0, #24
 80054fa:	f002 fff6 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80054fe:	2018      	movs	r0, #24
 8005500:	f003 f80f 	bl	8008522 <HAL_NVIC_EnableIRQ>
}
 8005504:	e083      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM10)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a4a      	ldr	r2, [pc, #296]	; (8005634 <HAL_TIM_Base_MspInit+0x2d4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d135      	bne.n	800557c <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	4a40      	ldr	r2, [pc, #256]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800551a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551e:	6453      	str	r3, [r2, #68]	; 0x44
 8005520:	4b3e      	ldr	r3, [pc, #248]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	4b3a      	ldr	r3, [pc, #232]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	4a39      	ldr	r2, [pc, #228]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 8005536:	f043 0302 	orr.w	r3, r3, #2
 800553a:	6313      	str	r3, [r2, #48]	; 0x30
 800553c:	4b37      	ldr	r3, [pc, #220]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 8005548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554e:	2302      	movs	r3, #2
 8005550:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005552:	2300      	movs	r3, #0
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005556:	2300      	movs	r3, #0
 8005558:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800555a:	2303      	movs	r3, #3
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 800555e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005562:	4619      	mov	r1, r3
 8005564:	4834      	ldr	r0, [pc, #208]	; (8005638 <HAL_TIM_Base_MspInit+0x2d8>)
 8005566:	f003 f897 	bl	8008698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2102      	movs	r1, #2
 800556e:	2019      	movs	r0, #25
 8005570:	f002 ffbb 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005574:	2019      	movs	r0, #25
 8005576:	f002 ffd4 	bl	8008522 <HAL_NVIC_EnableIRQ>
}
 800557a:	e048      	b.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM11)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2e      	ldr	r2, [pc, #184]	; (800563c <HAL_TIM_Base_MspInit+0x2dc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d143      	bne.n	800560e <HAL_TIM_Base_MspInit+0x2ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005586:	2302      	movs	r3, #2
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800558a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005594:	4618      	mov	r0, r3
 8005596:	f003 feff 	bl	8009398 <HAL_RCCEx_PeriphCLKConfig>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_TIM_Base_MspInit+0x244>
      Error_Handler();
 80055a0:	f7fe ff48 	bl	8004434 <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	4b1c      	ldr	r3, [pc, #112]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	4a1b      	ldr	r2, [pc, #108]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b2:	6453      	str	r3, [r2, #68]	; 0x44
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	4b15      	ldr	r3, [pc, #84]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055ca:	f043 0302 	orr.w	r3, r3, #2
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_TIM_Base_MspInit+0x2bc>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 80055dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80055ee:	2303      	movs	r3, #3
 80055f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 80055f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055f6:	4619      	mov	r1, r3
 80055f8:	480f      	ldr	r0, [pc, #60]	; (8005638 <HAL_TIM_Base_MspInit+0x2d8>)
 80055fa:	f003 f84d 	bl	8008698 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 80055fe:	2200      	movs	r2, #0
 8005600:	2102      	movs	r1, #2
 8005602:	201a      	movs	r0, #26
 8005604:	f002 ff71 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005608:	201a      	movs	r0, #26
 800560a:	f002 ff8a 	bl	8008522 <HAL_NVIC_EnableIRQ>
}
 800560e:	bf00      	nop
 8005610:	3760      	adds	r7, #96	; 0x60
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40023800 	.word	0x40023800
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40020000 	.word	0x40020000
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40020400 	.word	0x40020400
 800563c:	40014800 	.word	0x40014800

08005640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005648:	f107 0314 	add.w	r3, r7, #20
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a36      	ldr	r2, [pc, #216]	; (8005738 <HAL_TIM_MspPostInit+0xf8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d11f      	bne.n	80056a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	4a34      	ldr	r2, [pc, #208]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	6313      	str	r3, [r2, #48]	; 0x30
 8005672:	4b32      	ldr	r3, [pc, #200]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = S_PulsePaP1_Pin;
 800567e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005684:	2302      	movs	r3, #2
 8005686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005688:	2300      	movs	r3, #0
 800568a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800568c:	2300      	movs	r3, #0
 800568e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005690:	2301      	movs	r3, #1
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP1_GPIO_Port, &GPIO_InitStruct);
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	4619      	mov	r1, r3
 800569a:	4829      	ldr	r0, [pc, #164]	; (8005740 <HAL_TIM_MspPostInit+0x100>)
 800569c:	f002 fffc 	bl	8008698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80056a0:	e046      	b.n	8005730 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <HAL_TIM_MspPostInit+0x104>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d11e      	bne.n	80056ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6313      	str	r3, [r2, #48]	; 0x30
 80056bc:	4b1f      	ldr	r3, [pc, #124]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsePaP2_Pin;
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056cc:	2302      	movs	r3, #2
 80056ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d4:	2300      	movs	r3, #0
 80056d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056d8:	2302      	movs	r3, #2
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP2_GPIO_Port, &GPIO_InitStruct);
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4619      	mov	r1, r3
 80056e2:	4817      	ldr	r0, [pc, #92]	; (8005740 <HAL_TIM_MspPostInit+0x100>)
 80056e4:	f002 ffd8 	bl	8008698 <HAL_GPIO_Init>
}
 80056e8:	e022      	b.n	8005730 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a16      	ldr	r2, [pc, #88]	; (8005748 <HAL_TIM_MspPostInit+0x108>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d11d      	bne.n	8005730 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a0f      	ldr	r2, [pc, #60]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_TIM_MspPostInit+0xfc>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsePaP3_Pin;
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005714:	2302      	movs	r3, #2
 8005716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571c:	2300      	movs	r3, #0
 800571e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005720:	2302      	movs	r3, #2
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP3_GPIO_Port, &GPIO_InitStruct);
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	4619      	mov	r1, r3
 800572a:	4808      	ldr	r0, [pc, #32]	; (800574c <HAL_TIM_MspPostInit+0x10c>)
 800572c:	f002 ffb4 	bl	8008698 <HAL_GPIO_Init>
}
 8005730:	bf00      	nop
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010000 	.word	0x40010000
 800573c:	40023800 	.word	0x40023800
 8005740:	40020000 	.word	0x40020000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40020400 	.word	0x40020400

08005750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <HAL_UART_MspInit+0x94>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d133      	bne.n	80057da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <HAL_UART_MspInit+0x98>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <HAL_UART_MspInit+0x98>)
 800577c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_UART_MspInit+0x98>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HAL_UART_MspInit+0x98>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <HAL_UART_MspInit+0x98>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6313      	str	r3, [r2, #48]	; 0x30
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_UART_MspInit+0x98>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80057aa:	230c      	movs	r3, #12
 80057ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ae:	2302      	movs	r3, #2
 80057b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b6:	2303      	movs	r3, #3
 80057b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057ba:	2307      	movs	r3, #7
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	4619      	mov	r1, r3
 80057c4:	4809      	ldr	r0, [pc, #36]	; (80057ec <HAL_UART_MspInit+0x9c>)
 80057c6:	f002 ff67 	bl	8008698 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2101      	movs	r1, #1
 80057ce:	2026      	movs	r0, #38	; 0x26
 80057d0:	f002 fe8b 	bl	80084ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057d4:	2026      	movs	r0, #38	; 0x26
 80057d6:	f002 fea4 	bl	8008522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80057da:	bf00      	nop
 80057dc:	3728      	adds	r7, #40	; 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40004400 	.word	0x40004400
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000

080057f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057f4:	e7fe      	b.n	80057f4 <NMI_Handler+0x4>

080057f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057fa:	e7fe      	b.n	80057fa <HardFault_Handler+0x4>

080057fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005800:	e7fe      	b.n	8005800 <MemManage_Handler+0x4>

08005802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005806:	e7fe      	b.n	8005806 <BusFault_Handler+0x4>

08005808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800580c:	e7fe      	b.n	800580c <UsageFault_Handler+0x4>

0800580e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800582a:	b480      	push	{r7}
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800583c:	f002 fd12 	bl	8008264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}

08005844 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005848:	f003 f8f4 	bl	8008a34 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800584c:	bf00      	nop
 800584e:	bd80      	pop	{r7, pc}

08005850 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8005854:	2004      	movs	r0, #4
 8005856:	f003 f8d5 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}

0800585e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8005862:	2010      	movs	r0, #16
 8005864:	f003 f8ce 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005868:	bf00      	nop
 800586a:	bd80      	pop	{r7, pc}

0800586c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8005870:	2020      	movs	r0, #32
 8005872:	f003 f8c7 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8005876:	2080      	movs	r0, #128	; 0x80
 8005878:	f003 f8c4 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}

08005880 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005884:	4803      	ldr	r0, [pc, #12]	; (8005894 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8005886:	f004 fb1b 	bl	8009ec0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800588a:	4803      	ldr	r0, [pc, #12]	; (8005898 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800588c:	f004 fb18 	bl	8009ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000348 	.word	0x20000348
 8005898:	200004b0 	.word	0x200004b0

0800589c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80058a2:	f004 fb0d 	bl	8009ec0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80058a6:	4803      	ldr	r0, [pc, #12]	; (80058b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80058a8:	f004 fb0a 	bl	8009ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000348 	.word	0x20000348
 80058b4:	200004f8 	.word	0x200004f8

080058b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058bc:	4803      	ldr	r0, [pc, #12]	; (80058cc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80058be:	f004 faff 	bl	8009ec0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80058c2:	4803      	ldr	r0, [pc, #12]	; (80058d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80058c4:	f004 fafc 	bl	8009ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80058c8:	bf00      	nop
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000348 	.word	0x20000348
 80058d0:	20000540 	.word	0x20000540

080058d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058d8:	4802      	ldr	r0, [pc, #8]	; (80058e4 <USART2_IRQHandler+0x10>)
 80058da:	f005 fc0b 	bl	800b0f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000588 	.word	0x20000588

080058e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 80058ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80058f0:	f003 f888 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 80058f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058f8:	f003 f884 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 80058fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005900:	f003 f880 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8005904:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005908:	f003 f87c 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 800590c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005910:	f003 f878 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8005914:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005918:	f003 f874 	bl	8008a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800591c:	bf00      	nop
 800591e:	bd80      	pop	{r7, pc}

08005920 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005924:	4802      	ldr	r0, [pc, #8]	; (8005930 <TIM5_IRQHandler+0x10>)
 8005926:	f004 facb 	bl	8009ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000468 	.word	0x20000468

08005934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
	return 1;
 8005938:	2301      	movs	r3, #1
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_kill>:

int _kill(int pid, int sig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800594e:	f006 fb2f 	bl	800bfb0 <__errno>
 8005952:	4603      	mov	r3, r0
 8005954:	2216      	movs	r2, #22
 8005956:	601a      	str	r2, [r3, #0]
	return -1;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_exit>:

void _exit (int status)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800596c:	f04f 31ff 	mov.w	r1, #4294967295
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ffe7 	bl	8005944 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005976:	e7fe      	b.n	8005976 <_exit+0x12>

08005978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e00a      	b.n	80059a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800598a:	f3af 8000 	nop.w
 800598e:	4601      	mov	r1, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	60ba      	str	r2, [r7, #8]
 8005996:	b2ca      	uxtb	r2, r1
 8005998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3301      	adds	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dbf0      	blt.n	800598a <_read+0x12>
	}

return len;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e009      	b.n	80059d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	60ba      	str	r2, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3301      	adds	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	dbf1      	blt.n	80059c4 <_write+0x12>
	}
	return len;
 80059e0:	687b      	ldr	r3, [r7, #4]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <_close>:

int _close(int file)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
	return -1;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a12:	605a      	str	r2, [r3, #4]
	return 0;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <_isatty>:

int _isatty(int file)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
	return 1;
 8005a2a:	2301      	movs	r3, #1
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	return 0;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a5c:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <_sbrk+0x5c>)
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <_sbrk+0x60>)
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <_sbrk+0x64>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <_sbrk+0x64>)
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <_sbrk+0x68>)
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <_sbrk+0x64>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d207      	bcs.n	8005a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a84:	f006 fa94 	bl	800bfb0 <__errno>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	220c      	movs	r2, #12
 8005a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	e009      	b.n	8005aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a94:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <_sbrk+0x64>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <_sbrk+0x64>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <_sbrk+0x64>)
 8005aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20020000 	.word	0x20020000
 8005ab4:	00000400 	.word	0x00000400
 8005ab8:	200007fc 	.word	0x200007fc
 8005abc:	200008a0 	.word	0x200008a0

08005ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <SystemInit+0x20>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	4a05      	ldr	r2, [pc, #20]	; (8005ae0 <SystemInit+0x20>)
 8005acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000ed00 	.word	0xe000ed00
 8005ae4:	00000000 	.word	0x00000000

08005ae8 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8005ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aec:	b0e0      	sub	sp, #384	; 0x180
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
 8005af4:	ed87 1b5c 	vstr	d1, [r7, #368]	; 0x170
 8005af8:	ed87 2b5a 	vstr	d2, [r7, #360]	; 0x168
 8005afc:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164

	Tj1 = params[0];
 8005b00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	498a      	ldr	r1, [pc, #552]	; (8005d34 <get_Straj+0x24c>)
 8005b0a:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8005b0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b16:	4988      	ldr	r1, [pc, #544]	; (8005d38 <get_Straj+0x250>)
 8005b18:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8005b1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b24:	4985      	ldr	r1, [pc, #532]	; (8005d3c <get_Straj+0x254>)
 8005b26:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8005b2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005b32:	4983      	ldr	r1, [pc, #524]	; (8005d40 <get_Straj+0x258>)
 8005b34:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8005b38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b40:	4980      	ldr	r1, [pc, #512]	; (8005d44 <get_Straj+0x25c>)
 8005b42:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8005b46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b4a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005b4e:	497e      	ldr	r1, [pc, #504]	; (8005d48 <get_Straj+0x260>)
 8005b50:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8005b54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005b5c:	497b      	ldr	r1, [pc, #492]	; (8005d4c <get_Straj+0x264>)
 8005b5e:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8005b62:	497b      	ldr	r1, [pc, #492]	; (8005d50 <get_Straj+0x268>)
 8005b64:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005b68:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8005b6c:	4979      	ldr	r1, [pc, #484]	; (8005d54 <get_Straj+0x26c>)
 8005b6e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005b72:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8005b76:	4b77      	ldr	r3, [pc, #476]	; (8005d54 <get_Straj+0x26c>)
 8005b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b7c:	4b74      	ldr	r3, [pc, #464]	; (8005d50 <get_Straj+0x268>)
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	f7fa ffb3 	bl	8000aec <__aeabi_dcmplt>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80fd 	beq.w	8005d88 <get_Straj+0x2a0>

    flagInv = true;
 8005b8e:	4a72      	ldr	r2, [pc, #456]	; (8005d58 <get_Straj+0x270>)
 8005b90:	2301      	movs	r3, #1
 8005b92:	7013      	strb	r3, [r2, #0]

    qi = -qi;
 8005b94:	4b6e      	ldr	r3, [pc, #440]	; (8005d50 <get_Straj+0x268>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	4690      	mov	r8, r2
 8005b9c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005ba0:	4b6b      	ldr	r3, [pc, #428]	; (8005d50 <get_Straj+0x268>)
 8005ba2:	e9c3 8900 	strd	r8, r9, [r3]
    qf = -qf;
 8005ba6:	4b6b      	ldr	r3, [pc, #428]	; (8005d54 <get_Straj+0x26c>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8005bb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005bb8:	4b66      	ldr	r3, [pc, #408]	; (8005d54 <get_Straj+0x26c>)
 8005bba:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005bbe:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8005bc2:	4b66      	ldr	r3, [pc, #408]	; (8005d5c <get_Straj+0x274>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bd0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bd4:	4b61      	ldr	r3, [pc, #388]	; (8005d5c <get_Straj+0x274>)
 8005bd6:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005bda:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 8005bde:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <get_Straj+0x278>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005be8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005bf0:	4b5b      	ldr	r3, [pc, #364]	; (8005d60 <get_Straj+0x278>)
 8005bf2:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005bf6:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 8005bfa:	4b5a      	ldr	r3, [pc, #360]	; (8005d64 <get_Straj+0x27c>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005c0c:	4b56      	ldr	r3, [pc, #344]	; (8005d68 <get_Straj+0x280>)
 8005c0e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005c12:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 8005c16:	4b54      	ldr	r3, [pc, #336]	; (8005d68 <get_Straj+0x280>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8005c20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005c28:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <get_Straj+0x27c>)
 8005c2a:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005c2e:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8005c32:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <get_Straj+0x284>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005c3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005c44:	4b4a      	ldr	r3, [pc, #296]	; (8005d70 <get_Straj+0x288>)
 8005c46:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005c4a:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8005c4e:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <get_Straj+0x288>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8005c58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005c60:	4b42      	ldr	r3, [pc, #264]	; (8005d6c <get_Straj+0x284>)
 8005c62:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8005c66:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8005c6a:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <get_Straj+0x28c>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8005c74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c7c:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <get_Straj+0x290>)
 8005c7e:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8005c82:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8005c86:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <get_Straj+0x290>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005c90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <get_Straj+0x28c>)
 8005c9a:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8005c9e:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8005ca2:	4b35      	ldr	r3, [pc, #212]	; (8005d78 <get_Straj+0x290>)
 8005ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ca8:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <get_Straj+0x24c>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fcab 	bl	8000608 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <get_Straj+0x294>)
 8005cbc:	e9c3 0100 	strd	r0, r1, [r3]
    alimd = -jmax*Tj2;
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <get_Straj+0x290>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005cca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005cd2:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <get_Straj+0x250>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005cdc:	f7fa fc94 	bl	8000608 <__aeabi_dmul>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <get_Straj+0x298>)
 8005cea:	e9c3 0100 	strd	r0, r1, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <get_Straj+0x258>)
 8005cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cf4:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <get_Straj+0x24c>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa facd 	bl	8000298 <__aeabi_dsub>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <get_Straj+0x294>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fc7c 	bl	8000608 <__aeabi_dmul>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <get_Straj+0x274>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fabd 	bl	800029c <__adddf3>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <get_Straj+0x29c>)
 8005d2c:	e9c3 0100 	strd	r0, r1, [r3]
 8005d30:	e091      	b.n	8005e56 <get_Straj+0x36e>
 8005d32:	bf00      	nop
 8005d34:	20000858 	.word	0x20000858
 8005d38:	20000860 	.word	0x20000860
 8005d3c:	20000868 	.word	0x20000868
 8005d40:	20000840 	.word	0x20000840
 8005d44:	20000848 	.word	0x20000848
 8005d48:	20000850 	.word	0x20000850
 8005d4c:	20000838 	.word	0x20000838
 8005d50:	20000878 	.word	0x20000878
 8005d54:	20000880 	.word	0x20000880
 8005d58:	20000818 	.word	0x20000818
 8005d5c:	20000018 	.word	0x20000018
 8005d60:	200006f0 	.word	0x200006f0
 8005d64:	200006e8 	.word	0x200006e8
 8005d68:	20000010 	.word	0x20000010
 8005d6c:	200006f8 	.word	0x200006f8
 8005d70:	20000020 	.word	0x20000020
 8005d74:	200006e0 	.word	0x200006e0
 8005d78:	20000008 	.word	0x20000008
 8005d7c:	20000820 	.word	0x20000820
 8005d80:	20000828 	.word	0x20000828
 8005d84:	20000830 	.word	0x20000830

    }else{
        jmin = -jmax;
 8005d88:	4b99      	ldr	r3, [pc, #612]	; (8005ff0 <get_Straj+0x508>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	4614      	mov	r4, r2
 8005d90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005d94:	4b97      	ldr	r3, [pc, #604]	; (8005ff4 <get_Straj+0x50c>)
 8005d96:	e9c3 4500 	strd	r4, r5, [r3]
        amin = -amax;
 8005d9a:	4b97      	ldr	r3, [pc, #604]	; (8005ff8 <get_Straj+0x510>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	4692      	mov	sl, r2
 8005da2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005da6:	4b95      	ldr	r3, [pc, #596]	; (8005ffc <get_Straj+0x514>)
 8005da8:	e9c3 ab00 	strd	sl, fp, [r3]
        vmin = -vmax;
 8005dac:	4b94      	ldr	r3, [pc, #592]	; (8006000 <get_Straj+0x518>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005db6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dbe:	4b91      	ldr	r3, [pc, #580]	; (8006004 <get_Straj+0x51c>)
 8005dc0:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8005dc4:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8005dc8:	4b89      	ldr	r3, [pc, #548]	; (8005ff0 <get_Straj+0x508>)
 8005dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dce:	4b8e      	ldr	r3, [pc, #568]	; (8006008 <get_Straj+0x520>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fc18 	bl	8000608 <__aeabi_dmul>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	4b8a      	ldr	r3, [pc, #552]	; (800600c <get_Straj+0x524>)
 8005de2:	e9c3 0100 	strd	r0, r1, [r3]
        alimd = -jmax*Tj2;
 8005de6:	4b82      	ldr	r3, [pc, #520]	; (8005ff0 <get_Straj+0x508>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005df0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005df8:	4b85      	ldr	r3, [pc, #532]	; (8006010 <get_Straj+0x528>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005e02:	f7fa fc01 	bl	8000608 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4b81      	ldr	r3, [pc, #516]	; (8006014 <get_Straj+0x52c>)
 8005e10:	e9c3 0100 	strd	r0, r1, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8005e14:	4b80      	ldr	r3, [pc, #512]	; (8006018 <get_Straj+0x530>)
 8005e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	; (8006008 <get_Straj+0x520>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f7fa fa3a 	bl	8000298 <__aeabi_dsub>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4b77      	ldr	r3, [pc, #476]	; (800600c <get_Straj+0x524>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fbe9 	bl	8000608 <__aeabi_dmul>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4b77      	ldr	r3, [pc, #476]	; (800601c <get_Straj+0x534>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa fa2a 	bl	800029c <__adddf3>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4b73      	ldr	r3, [pc, #460]	; (8006020 <get_Straj+0x538>)
 8005e52:	e9c3 0100 	strd	r0, r1, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005e62:	f7fa fe57 	bl	8000b14 <__aeabi_dcmpge>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80e9 	beq.w	8006040 <get_Straj+0x558>
 8005e6e:	4b66      	ldr	r3, [pc, #408]	; (8006008 <get_Straj+0x520>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005e78:	f7fa fe42 	bl	8000b00 <__aeabi_dcmple>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80de 	beq.w	8006040 <get_Straj+0x558>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8005e84:	4b65      	ldr	r3, [pc, #404]	; (800601c <get_Straj+0x534>)
 8005e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e8a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005e8e:	f7fa fbbb 	bl	8000608 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4610      	mov	r0, r2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4b62      	ldr	r3, [pc, #392]	; (8006024 <get_Straj+0x53c>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa f9fc 	bl	800029c <__adddf3>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	461d      	mov	r5, r3
 8005eac:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8005fe0 <get_Straj+0x4f8>
 8005eb0:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005eb4:	f008 ffa0 	bl	800edf8 <pow>
 8005eb8:	ec51 0b10 	vmov	r0, r1, d0
 8005ebc:	4b4c      	ldr	r3, [pc, #304]	; (8005ff0 <get_Straj+0x508>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fba1 	bl	8000608 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	4b55      	ldr	r3, [pc, #340]	; (8006028 <get_Straj+0x540>)
 8005ed4:	f7fa fcc2 	bl	800085c <__aeabi_ddiv>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f9dc 	bl	800029c <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4950      	ldr	r1, [pc, #320]	; (800602c <get_Straj+0x544>)
 8005eea:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+jmax*pow(t,2)/2;
 8005eee:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8005fe8 <get_Straj+0x500>
 8005ef2:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005ef6:	f008 ff7f 	bl	800edf8 <pow>
 8005efa:	ec51 0b10 	vmov	r0, r1, d0
 8005efe:	4b3c      	ldr	r3, [pc, #240]	; (8005ff0 <get_Straj+0x508>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa fb80 	bl	8000608 <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4619      	mov	r1, r3
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f18:	f7fa fca0 	bl	800085c <__aeabi_ddiv>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	4b3d      	ldr	r3, [pc, #244]	; (800601c <get_Straj+0x534>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f7fa f9b7 	bl	800029c <__adddf3>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	493f      	ldr	r1, [pc, #252]	; (8006030 <get_Straj+0x548>)
 8005f34:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*t;
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <get_Straj+0x508>)
 8005f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f3e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005f42:	f7fa fb61 	bl	8000608 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	493a      	ldr	r1, [pc, #232]	; (8006034 <get_Straj+0x54c>)
 8005f4c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <get_Straj+0x508>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	4938      	ldr	r1, [pc, #224]	; (8006038 <get_Straj+0x550>)
 8005f58:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005f5c:	4b37      	ldr	r3, [pc, #220]	; (800603c <get_Straj+0x554>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 87a8 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005f66:	4b31      	ldr	r3, [pc, #196]	; (800602c <get_Straj+0x544>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <get_Straj+0x544>)
 8005f7a:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8005f7e:	ed83 7b00 	vstr	d7, [r3]
 8005f82:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <get_Straj+0x548>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005f8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f94:	4b26      	ldr	r3, [pc, #152]	; (8006030 <get_Straj+0x548>)
 8005f96:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8005f9a:	ed83 7b00 	vstr	d7, [r3]
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <get_Straj+0x54c>)
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8005fa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fb0:	4b20      	ldr	r3, [pc, #128]	; (8006034 <get_Straj+0x54c>)
 8005fb2:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8005fb6:	ed83 7b00 	vstr	d7, [r3]
 8005fba:	4b1f      	ldr	r3, [pc, #124]	; (8006038 <get_Straj+0x550>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8005fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <get_Straj+0x550>)
 8005fce:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8005fd2:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <get_Straj+0x554>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005fdc:	f000 bf6b 	b.w	8006eb6 <get_Straj+0x13ce>
 8005fe0:	00000000 	.word	0x00000000
 8005fe4:	40080000 	.word	0x40080000
 8005fe8:	00000000 	.word	0x00000000
 8005fec:	40000000 	.word	0x40000000
 8005ff0:	20000008 	.word	0x20000008
 8005ff4:	200006e0 	.word	0x200006e0
 8005ff8:	20000020 	.word	0x20000020
 8005ffc:	200006f8 	.word	0x200006f8
 8006000:	20000010 	.word	0x20000010
 8006004:	200006e8 	.word	0x200006e8
 8006008:	20000858 	.word	0x20000858
 800600c:	20000820 	.word	0x20000820
 8006010:	20000860 	.word	0x20000860
 8006014:	20000828 	.word	0x20000828
 8006018:	20000840 	.word	0x20000840
 800601c:	20000018 	.word	0x20000018
 8006020:	20000830 	.word	0x20000830
 8006024:	20000878 	.word	0x20000878
 8006028:	40180000 	.word	0x40180000
 800602c:	200006c0 	.word	0x200006c0
 8006030:	200006c8 	.word	0x200006c8
 8006034:	200006d0 	.word	0x200006d0
 8006038:	200006d8 	.word	0x200006d8
 800603c:	20000818 	.word	0x20000818
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8006040:	4b85      	ldr	r3, [pc, #532]	; (8006258 <get_Straj+0x770>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800604a:	f7fa fd6d 	bl	8000b28 <__aeabi_dcmpgt>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 811b 	beq.w	800628c <get_Straj+0x7a4>
 8006056:	4b81      	ldr	r3, [pc, #516]	; (800625c <get_Straj+0x774>)
 8006058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800605c:	4b7e      	ldr	r3, [pc, #504]	; (8006258 <get_Straj+0x770>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa f919 	bl	8000298 <__aeabi_dsub>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800606e:	f7fa fd47 	bl	8000b00 <__aeabi_dcmple>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8109 	beq.w	800628c <get_Straj+0x7a4>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 800607a:	4b79      	ldr	r3, [pc, #484]	; (8006260 <get_Straj+0x778>)
 800607c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006080:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006084:	f7fa fac0 	bl	8000608 <__aeabi_dmul>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	4b74      	ldr	r3, [pc, #464]	; (8006264 <get_Straj+0x77c>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa f901 	bl	800029c <__adddf3>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4692      	mov	sl, r2
 80060a0:	469b      	mov	fp, r3
 80060a2:	4b71      	ldr	r3, [pc, #452]	; (8006268 <get_Straj+0x780>)
 80060a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	4b6f      	ldr	r3, [pc, #444]	; (800626c <get_Straj+0x784>)
 80060ae:	f7fa fbd5 	bl	800085c <__aeabi_ddiv>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4690      	mov	r8, r2
 80060b8:	4699      	mov	r9, r3
 80060ba:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8006250 <get_Straj+0x768>
 80060be:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 80060c2:	f008 fe99 	bl	800edf8 <pow>
 80060c6:	ec51 0b10 	vmov	r0, r1, d0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	4b68      	ldr	r3, [pc, #416]	; (8006270 <get_Straj+0x788>)
 80060d0:	f7fa fa9a 	bl	8000608 <__aeabi_dmul>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	4b5e      	ldr	r3, [pc, #376]	; (8006258 <get_Straj+0x770>)
 80060de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	4b62      	ldr	r3, [pc, #392]	; (8006270 <get_Straj+0x788>)
 80060e8:	f7fa fa8e 	bl	8000608 <__aeabi_dmul>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80060f8:	f7fa fa86 	bl	8000608 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4620      	mov	r0, r4
 8006102:	4629      	mov	r1, r5
 8006104:	f7fa f8c8 	bl	8000298 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4614      	mov	r4, r2
 800610e:	461d      	mov	r5, r3
 8006110:	4b51      	ldr	r3, [pc, #324]	; (8006258 <get_Straj+0x770>)
 8006112:	ed93 7b00 	vldr	d7, [r3]
 8006116:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8006250 <get_Straj+0x768>
 800611a:	eeb0 0a47 	vmov.f32	s0, s14
 800611e:	eef0 0a67 	vmov.f32	s1, s15
 8006122:	f008 fe69 	bl	800edf8 <pow>
 8006126:	ec53 2b10 	vmov	r2, r3, d0
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa f8b5 	bl	800029c <__adddf3>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa fa65 	bl	8000608 <__aeabi_dmul>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4650      	mov	r0, sl
 8006144:	4659      	mov	r1, fp
 8006146:	f7fa f8a9 	bl	800029c <__adddf3>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4949      	ldr	r1, [pc, #292]	; (8006274 <get_Straj+0x78c>)
 8006150:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+alima*(t-Tj1/2);
 8006154:	4b40      	ldr	r3, [pc, #256]	; (8006258 <get_Straj+0x770>)
 8006156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006162:	f7fa fb7b 	bl	800085c <__aeabi_ddiv>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800616e:	f7fa f893 	bl	8000298 <__aeabi_dsub>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4610      	mov	r0, r2
 8006178:	4619      	mov	r1, r3
 800617a:	4b3b      	ldr	r3, [pc, #236]	; (8006268 <get_Straj+0x780>)
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f7fa fa42 	bl	8000608 <__aeabi_dmul>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	4b34      	ldr	r3, [pc, #208]	; (8006260 <get_Straj+0x778>)
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f7fa f883 	bl	800029c <__adddf3>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4937      	ldr	r1, [pc, #220]	; (8006278 <get_Straj+0x790>)
 800619c:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*Tj1;
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <get_Straj+0x794>)
 80061a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061a6:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <get_Straj+0x770>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fa fa2c 	bl	8000608 <__aeabi_dmul>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4932      	ldr	r1, [pc, #200]	; (8006280 <get_Straj+0x798>)
 80061b6:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 80061ba:	4932      	ldr	r1, [pc, #200]	; (8006284 <get_Straj+0x79c>)
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 80061c8:	4b2f      	ldr	r3, [pc, #188]	; (8006288 <get_Straj+0x7a0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8672 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <get_Straj+0x78c>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80061dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80061e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061e4:	4b23      	ldr	r3, [pc, #140]	; (8006274 <get_Straj+0x78c>)
 80061e6:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80061ea:	ed83 7b00 	vstr	d7, [r3]
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <get_Straj+0x790>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80061f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006200:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <get_Straj+0x790>)
 8006202:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8006206:	ed83 7b00 	vstr	d7, [r3]
 800620a:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <get_Straj+0x798>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8006214:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <get_Straj+0x798>)
 800621e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8006222:	ed83 7b00 	vstr	d7, [r3]
 8006226:	4b17      	ldr	r3, [pc, #92]	; (8006284 <get_Straj+0x79c>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <get_Straj+0x79c>)
 800623a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800623e:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <get_Straj+0x7a0>)
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006248:	f000 be35 	b.w	8006eb6 <get_Straj+0x13ce>
 800624c:	f3af 8000 	nop.w
 8006250:	00000000 	.word	0x00000000
 8006254:	40000000 	.word	0x40000000
 8006258:	20000858 	.word	0x20000858
 800625c:	20000840 	.word	0x20000840
 8006260:	20000018 	.word	0x20000018
 8006264:	20000878 	.word	0x20000878
 8006268:	20000820 	.word	0x20000820
 800626c:	40180000 	.word	0x40180000
 8006270:	40080000 	.word	0x40080000
 8006274:	200006c0 	.word	0x200006c0
 8006278:	200006c8 	.word	0x200006c8
 800627c:	20000008 	.word	0x20000008
 8006280:	200006d0 	.word	0x200006d0
 8006284:	200006d8 	.word	0x200006d8
 8006288:	20000818 	.word	0x20000818
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 800628c:	4b94      	ldr	r3, [pc, #592]	; (80064e0 <get_Straj+0x9f8>)
 800628e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006292:	4b94      	ldr	r3, [pc, #592]	; (80064e4 <get_Straj+0x9fc>)
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7f9 fffe 	bl	8000298 <__aeabi_dsub>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80062a4:	f7fa fc40 	bl	8000b28 <__aeabi_dcmpgt>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8130 	beq.w	8006510 <get_Straj+0xa28>
 80062b0:	4b8b      	ldr	r3, [pc, #556]	; (80064e0 <get_Straj+0x9f8>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80062ba:	f7fa fc21 	bl	8000b00 <__aeabi_dcmple>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8125 	beq.w	8006510 <get_Straj+0xa28>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 80062c6:	4b88      	ldr	r3, [pc, #544]	; (80064e8 <get_Straj+0xa00>)
 80062c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062cc:	4b87      	ldr	r3, [pc, #540]	; (80064ec <get_Straj+0xa04>)
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f7f9 ffe3 	bl	800029c <__adddf3>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	4b80      	ldr	r3, [pc, #512]	; (80064e0 <get_Straj+0x9f8>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7fa f990 	bl	8000608 <__aeabi_dmul>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062f8:	f7fa fab0 	bl	800085c <__aeabi_ddiv>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	4b7a      	ldr	r3, [pc, #488]	; (80064f0 <get_Straj+0xa08>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ffc7 	bl	800029c <__adddf3>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4614      	mov	r4, r2
 8006314:	461d      	mov	r5, r3
 8006316:	4b72      	ldr	r3, [pc, #456]	; (80064e0 <get_Straj+0x9f8>)
 8006318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800631c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006320:	f7f9 ffba 	bl	8000298 <__aeabi_dsub>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4610      	mov	r0, r2
 800632a:	4619      	mov	r1, r3
 800632c:	4b6e      	ldr	r3, [pc, #440]	; (80064e8 <get_Straj+0xa00>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7fa f969 	bl	8000608 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4620      	mov	r0, r4
 800633c:	4629      	mov	r1, r5
 800633e:	f7f9 ffab 	bl	8000298 <__aeabi_dsub>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4614      	mov	r4, r2
 8006348:	461d      	mov	r5, r3
 800634a:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <get_Straj+0x9f8>)
 800634c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006350:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006354:	f7f9 ffa0 	bl	8000298 <__aeabi_dsub>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	ec43 2b17 	vmov	d7, r2, r3
 8006360:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80064d0 <get_Straj+0x9e8>
 8006364:	eeb0 0a47 	vmov.f32	s0, s14
 8006368:	eef0 0a67 	vmov.f32	s1, s15
 800636c:	f008 fd44 	bl	800edf8 <pow>
 8006370:	ec51 0b10 	vmov	r0, r1, d0
 8006374:	4b5f      	ldr	r3, [pc, #380]	; (80064f4 <get_Straj+0xa0c>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7fa f945 	bl	8000608 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	4b5b      	ldr	r3, [pc, #364]	; (80064f8 <get_Straj+0xa10>)
 800638c:	f7fa fa66 	bl	800085c <__aeabi_ddiv>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 ff7e 	bl	8000298 <__aeabi_dsub>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4956      	ldr	r1, [pc, #344]	; (80064fc <get_Straj+0xa14>)
 80063a2:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <get_Straj+0x9f8>)
 80063a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ac:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80063b0:	f7f9 ff72 	bl	8000298 <__aeabi_dsub>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	ec43 2b17 	vmov	d7, r2, r3
 80063bc:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80064d8 <get_Straj+0x9f0>
 80063c0:	eeb0 0a47 	vmov.f32	s0, s14
 80063c4:	eef0 0a67 	vmov.f32	s1, s15
 80063c8:	f008 fd16 	bl	800edf8 <pow>
 80063cc:	ec51 0b10 	vmov	r0, r1, d0
 80063d0:	4b48      	ldr	r3, [pc, #288]	; (80064f4 <get_Straj+0xa0c>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7fa f917 	bl	8000608 <__aeabi_dmul>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ea:	f7fa fa37 	bl	800085c <__aeabi_ddiv>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4b3c      	ldr	r3, [pc, #240]	; (80064e8 <get_Straj+0xa00>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 ff4e 	bl	800029c <__adddf3>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	493e      	ldr	r1, [pc, #248]	; (8006500 <get_Straj+0xa18>)
 8006406:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmin*(Ta-t);
 800640a:	4b3a      	ldr	r3, [pc, #232]	; (80064f4 <get_Straj+0xa0c>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8006414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800641c:	4b30      	ldr	r3, [pc, #192]	; (80064e0 <get_Straj+0x9f8>)
 800641e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006422:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006426:	f7f9 ff37 	bl	8000298 <__aeabi_dsub>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006432:	f7fa f8e9 	bl	8000608 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4932      	ldr	r1, [pc, #200]	; (8006504 <get_Straj+0xa1c>)
 800643c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmin;
 8006440:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <get_Straj+0xa0c>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	4930      	ldr	r1, [pc, #192]	; (8006508 <get_Straj+0xa20>)
 8006448:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800644c:	4b2f      	ldr	r3, [pc, #188]	; (800650c <get_Straj+0xa24>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8530 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006456:	4b29      	ldr	r3, [pc, #164]	; (80064fc <get_Straj+0xa14>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006468:	4b24      	ldr	r3, [pc, #144]	; (80064fc <get_Straj+0xa14>)
 800646a:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 800646e:	ed83 7b00 	vstr	d7, [r3]
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <get_Straj+0xa18>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800647c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <get_Straj+0xa18>)
 8006486:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800648a:	ed83 7b00 	vstr	d7, [r3]
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <get_Straj+0xa1c>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8006498:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800649c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <get_Straj+0xa1c>)
 80064a2:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80064a6:	ed83 7b00 	vstr	d7, [r3]
 80064aa:	4b17      	ldr	r3, [pc, #92]	; (8006508 <get_Straj+0xa20>)
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80064b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064bc:	4b12      	ldr	r3, [pc, #72]	; (8006508 <get_Straj+0xa20>)
 80064be:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 80064c2:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80064c6:	4b11      	ldr	r3, [pc, #68]	; (800650c <get_Straj+0xa24>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80064cc:	f000 bcf3 	b.w	8006eb6 <get_Straj+0x13ce>
 80064d0:	00000000 	.word	0x00000000
 80064d4:	40080000 	.word	0x40080000
 80064d8:	00000000 	.word	0x00000000
 80064dc:	40000000 	.word	0x40000000
 80064e0:	20000840 	.word	0x20000840
 80064e4:	20000858 	.word	0x20000858
 80064e8:	20000830 	.word	0x20000830
 80064ec:	20000018 	.word	0x20000018
 80064f0:	20000878 	.word	0x20000878
 80064f4:	200006e0 	.word	0x200006e0
 80064f8:	40180000 	.word	0x40180000
 80064fc:	200006c0 	.word	0x200006c0
 8006500:	200006c8 	.word	0x200006c8
 8006504:	200006d0 	.word	0x200006d0
 8006508:	200006d8 	.word	0x200006d8
 800650c:	20000818 	.word	0x20000818
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8006510:	4b59      	ldr	r3, [pc, #356]	; (8006678 <get_Straj+0xb90>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800651a:	f7fa fb05 	bl	8000b28 <__aeabi_dcmpgt>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80bd 	beq.w	80066a0 <get_Straj+0xbb8>
 8006526:	4b54      	ldr	r3, [pc, #336]	; (8006678 <get_Straj+0xb90>)
 8006528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <get_Straj+0xb94>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7f9 feb3 	bl	800029c <__adddf3>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800653e:	f7fa fadf 	bl	8000b00 <__aeabi_dcmple>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80ab 	beq.w	80066a0 <get_Straj+0xbb8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <get_Straj+0xb98>)
 800654c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006550:	4b4c      	ldr	r3, [pc, #304]	; (8006684 <get_Straj+0xb9c>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7f9 fea1 	bl	800029c <__adddf3>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	4b45      	ldr	r3, [pc, #276]	; (8006678 <get_Straj+0xb90>)
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7fa f84e 	bl	8000608 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800657c:	f7fa f96e 	bl	800085c <__aeabi_ddiv>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <get_Straj+0xba0>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7f9 fe85 	bl	800029c <__adddf3>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4614      	mov	r4, r2
 8006598:	461d      	mov	r5, r3
 800659a:	4b37      	ldr	r3, [pc, #220]	; (8006678 <get_Straj+0xb90>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80065a4:	f7f9 fe78 	bl	8000298 <__aeabi_dsub>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	4b33      	ldr	r3, [pc, #204]	; (8006680 <get_Straj+0xb98>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f827 	bl	8000608 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7f9 fe6b 	bl	800029c <__adddf3>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4930      	ldr	r1, [pc, #192]	; (800668c <get_Straj+0xba4>)
 80065cc:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim;
 80065d0:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <get_Straj+0xb98>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	492e      	ldr	r1, [pc, #184]	; (8006690 <get_Straj+0xba8>)
 80065d8:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 80065dc:	492d      	ldr	r1, [pc, #180]	; (8006694 <get_Straj+0xbac>)
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 80065ea:	492b      	ldr	r1, [pc, #172]	; (8006698 <get_Straj+0xbb0>)
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80065f8:	4b28      	ldr	r3, [pc, #160]	; (800669c <get_Straj+0xbb4>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 845a 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006602:	4b22      	ldr	r3, [pc, #136]	; (800668c <get_Straj+0xba4>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800660c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <get_Straj+0xba4>)
 8006616:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800661a:	ed83 7b00 	vstr	d7, [r3]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <get_Straj+0xba8>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006628:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800662c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <get_Straj+0xba8>)
 8006632:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8006636:	ed83 7b00 	vstr	d7, [r3]
 800663a:	4b16      	ldr	r3, [pc, #88]	; (8006694 <get_Straj+0xbac>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006644:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <get_Straj+0xbac>)
 800664e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8006652:	ed83 7b00 	vstr	d7, [r3]
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <get_Straj+0xbb0>)
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	67ba      	str	r2, [r7, #120]	; 0x78
 800665e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <get_Straj+0xbb0>)
 8006666:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800666a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <get_Straj+0xbb4>)
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006674:	f000 bc1f 	b.w	8006eb6 <get_Straj+0x13ce>
 8006678:	20000840 	.word	0x20000840
 800667c:	20000850 	.word	0x20000850
 8006680:	20000830 	.word	0x20000830
 8006684:	20000018 	.word	0x20000018
 8006688:	20000878 	.word	0x20000878
 800668c:	200006c0 	.word	0x200006c0
 8006690:	200006c8 	.word	0x200006c8
 8006694:	200006d0 	.word	0x200006d0
 8006698:	200006d8 	.word	0x200006d8
 800669c:	20000818 	.word	0x20000818
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 80066a0:	4ba9      	ldr	r3, [pc, #676]	; (8006948 <get_Straj+0xe60>)
 80066a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066a6:	4ba9      	ldr	r3, [pc, #676]	; (800694c <get_Straj+0xe64>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7f9 fdf4 	bl	8000298 <__aeabi_dsub>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80066b8:	f7fa fa2c 	bl	8000b14 <__aeabi_dcmpge>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 815e 	beq.w	8006980 <get_Straj+0xe98>
 80066c4:	4ba0      	ldr	r3, [pc, #640]	; (8006948 <get_Straj+0xe60>)
 80066c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ca:	4ba0      	ldr	r3, [pc, #640]	; (800694c <get_Straj+0xe64>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fde2 	bl	8000298 <__aeabi_dsub>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4610      	mov	r0, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	4b9c      	ldr	r3, [pc, #624]	; (8006950 <get_Straj+0xe68>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fddb 	bl	800029c <__adddf3>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80066ee:	f7fa fa07 	bl	8000b00 <__aeabi_dcmple>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8143 	beq.w	8006980 <get_Straj+0xe98>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 80066fa:	4b96      	ldr	r3, [pc, #600]	; (8006954 <get_Straj+0xe6c>)
 80066fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006700:	4b95      	ldr	r3, [pc, #596]	; (8006958 <get_Straj+0xe70>)
 8006702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006706:	4b95      	ldr	r3, [pc, #596]	; (800695c <get_Straj+0xe74>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 fdc6 	bl	800029c <__adddf3>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	4b8c      	ldr	r3, [pc, #560]	; (800694c <get_Straj+0xe64>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7f9 ff73 	bl	8000608 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006732:	f7fa f893 	bl	800085c <__aeabi_ddiv>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4620      	mov	r0, r4
 800673c:	4629      	mov	r1, r5
 800673e:	f7f9 fdab 	bl	8000298 <__aeabi_dsub>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4614      	mov	r4, r2
 8006748:	461d      	mov	r5, r3
 800674a:	4b7f      	ldr	r3, [pc, #508]	; (8006948 <get_Straj+0xe60>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006754:	f7f9 fda0 	bl	8000298 <__aeabi_dsub>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	4b7a      	ldr	r3, [pc, #488]	; (800694c <get_Straj+0xe64>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd99 	bl	800029c <__adddf3>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	4b79      	ldr	r3, [pc, #484]	; (8006958 <get_Straj+0xe70>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 ff46 	bl	8000608 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f7f9 fd8a 	bl	800029c <__adddf3>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	4b6d      	ldr	r3, [pc, #436]	; (8006948 <get_Straj+0xe60>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800679a:	f7f9 fd7d 	bl	8000298 <__aeabi_dsub>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	4b69      	ldr	r3, [pc, #420]	; (800694c <get_Straj+0xe64>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 fd76 	bl	800029c <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	ec43 2b17 	vmov	d7, r2, r3
 80067b8:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8006938 <get_Straj+0xe50>
 80067bc:	eeb0 0a47 	vmov.f32	s0, s14
 80067c0:	eef0 0a67 	vmov.f32	s1, s15
 80067c4:	f008 fb18 	bl	800edf8 <pow>
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	4b63      	ldr	r3, [pc, #396]	; (8006960 <get_Straj+0xe78>)
 80067d2:	f7fa f843 	bl	800085c <__aeabi_ddiv>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	4b61      	ldr	r3, [pc, #388]	; (8006964 <get_Straj+0xe7c>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 ff10 	bl	8000608 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7f9 fd52 	bl	8000298 <__aeabi_dsub>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	495b      	ldr	r1, [pc, #364]	; (8006968 <get_Straj+0xe80>)
 80067fa:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 80067fe:	4b56      	ldr	r3, [pc, #344]	; (8006958 <get_Straj+0xe70>)
 8006800:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006804:	4b50      	ldr	r3, [pc, #320]	; (8006948 <get_Straj+0xe60>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800680e:	f7f9 fd43 	bl	8000298 <__aeabi_dsub>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	4b4c      	ldr	r3, [pc, #304]	; (800694c <get_Straj+0xe64>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fd3c 	bl	800029c <__adddf3>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	ec43 2b17 	vmov	d7, r2, r3
 800682c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8006940 <get_Straj+0xe58>
 8006830:	eeb0 0a47 	vmov.f32	s0, s14
 8006834:	eef0 0a67 	vmov.f32	s1, s15
 8006838:	f008 fade 	bl	800edf8 <pow>
 800683c:	ec51 0b10 	vmov	r0, r1, d0
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006848:	f7fa f808 	bl	800085c <__aeabi_ddiv>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	4b43      	ldr	r3, [pc, #268]	; (8006964 <get_Straj+0xe7c>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fed5 	bl	8000608 <__aeabi_dmul>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	f7f9 fd17 	bl	8000298 <__aeabi_dsub>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	493f      	ldr	r1, [pc, #252]	; (800696c <get_Straj+0xe84>)
 8006870:	e9c1 2300 	strd	r2, r3, [r1]
        qdd=-jmax*(t-T+Td);
 8006874:	4b3b      	ldr	r3, [pc, #236]	; (8006964 <get_Straj+0xe7c>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	673a      	str	r2, [r7, #112]	; 0x70
 800687c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006880:	677b      	str	r3, [r7, #116]	; 0x74
 8006882:	4b31      	ldr	r3, [pc, #196]	; (8006948 <get_Straj+0xe60>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800688c:	f7f9 fd04 	bl	8000298 <__aeabi_dsub>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	4b2c      	ldr	r3, [pc, #176]	; (800694c <get_Straj+0xe64>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f7f9 fcfd 	bl	800029c <__adddf3>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80068aa:	f7f9 fead 	bl	8000608 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	492f      	ldr	r1, [pc, #188]	; (8006970 <get_Straj+0xe88>)
 80068b4:	e9c1 2300 	strd	r2, r3, [r1]
        qddd=jmin;
 80068b8:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <get_Straj+0xe8c>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	492e      	ldr	r1, [pc, #184]	; (8006978 <get_Straj+0xe90>)
 80068c0:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80068c4:	4b2d      	ldr	r3, [pc, #180]	; (800697c <get_Straj+0xe94>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 82f4 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80068ce:	4b26      	ldr	r3, [pc, #152]	; (8006968 <get_Straj+0xe80>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	66ba      	str	r2, [r7, #104]	; 0x68
 80068d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80068da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068dc:	4b22      	ldr	r3, [pc, #136]	; (8006968 <get_Straj+0xe80>)
 80068de:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80068e2:	ed83 7b00 	vstr	d7, [r3]
 80068e6:	4b21      	ldr	r3, [pc, #132]	; (800696c <get_Straj+0xe84>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	663a      	str	r2, [r7, #96]	; 0x60
 80068ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80068f2:	667b      	str	r3, [r7, #100]	; 0x64
 80068f4:	4b1d      	ldr	r3, [pc, #116]	; (800696c <get_Straj+0xe84>)
 80068f6:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80068fa:	ed83 7b00 	vstr	d7, [r3]
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <get_Straj+0xe88>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	65ba      	str	r2, [r7, #88]	; 0x58
 8006906:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <get_Straj+0xe88>)
 800690e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006912:	ed83 7b00 	vstr	d7, [r3]
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <get_Straj+0xe90>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	653a      	str	r2, [r7, #80]	; 0x50
 800691e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006922:	657b      	str	r3, [r7, #84]	; 0x54
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <get_Straj+0xe90>)
 8006926:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800692a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <get_Straj+0xe94>)
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006934:	e2bf      	b.n	8006eb6 <get_Straj+0x13ce>
 8006936:	bf00      	nop
 8006938:	00000000 	.word	0x00000000
 800693c:	40080000 	.word	0x40080000
 8006940:	00000000 	.word	0x00000000
 8006944:	40000000 	.word	0x40000000
 8006948:	20000838 	.word	0x20000838
 800694c:	20000848 	.word	0x20000848
 8006950:	20000860 	.word	0x20000860
 8006954:	20000880 	.word	0x20000880
 8006958:	20000830 	.word	0x20000830
 800695c:	200006f0 	.word	0x200006f0
 8006960:	40180000 	.word	0x40180000
 8006964:	20000008 	.word	0x20000008
 8006968:	200006c0 	.word	0x200006c0
 800696c:	200006c8 	.word	0x200006c8
 8006970:	200006d0 	.word	0x200006d0
 8006974:	200006e0 	.word	0x200006e0
 8006978:	200006d8 	.word	0x200006d8
 800697c:	20000818 	.word	0x20000818
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8006980:	4bbb      	ldr	r3, [pc, #748]	; (8006c70 <get_Straj+0x1188>)
 8006982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006986:	4bbb      	ldr	r3, [pc, #748]	; (8006c74 <get_Straj+0x118c>)
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fc84 	bl	8000298 <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4610      	mov	r0, r2
 8006996:	4619      	mov	r1, r3
 8006998:	4bb7      	ldr	r3, [pc, #732]	; (8006c78 <get_Straj+0x1190>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 fc7d 	bl	800029c <__adddf3>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80069aa:	f7fa f8bd 	bl	8000b28 <__aeabi_dcmpgt>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8190 	beq.w	8006cd6 <get_Straj+0x11ee>
 80069b6:	4bae      	ldr	r3, [pc, #696]	; (8006c70 <get_Straj+0x1188>)
 80069b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069bc:	4bae      	ldr	r3, [pc, #696]	; (8006c78 <get_Straj+0x1190>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 fc69 	bl	8000298 <__aeabi_dsub>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80069ce:	f7fa f897 	bl	8000b00 <__aeabi_dcmple>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 817e 	beq.w	8006cd6 <get_Straj+0x11ee>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 80069da:	4ba8      	ldr	r3, [pc, #672]	; (8006c7c <get_Straj+0x1194>)
 80069dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069e0:	4ba7      	ldr	r3, [pc, #668]	; (8006c80 <get_Straj+0x1198>)
 80069e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069e6:	4ba7      	ldr	r3, [pc, #668]	; (8006c84 <get_Straj+0x119c>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4610      	mov	r0, r2
 80069f6:	4619      	mov	r1, r3
 80069f8:	4b9e      	ldr	r3, [pc, #632]	; (8006c74 <get_Straj+0x118c>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fe03 	bl	8000608 <__aeabi_dmul>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4610      	mov	r0, r2
 8006a08:	4619      	mov	r1, r3
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a12:	f7f9 ff23 	bl	800085c <__aeabi_ddiv>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fc3b 	bl	8000298 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4614      	mov	r4, r2
 8006a28:	461d      	mov	r5, r3
 8006a2a:	4b91      	ldr	r3, [pc, #580]	; (8006c70 <get_Straj+0x1188>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006a34:	f7f9 fc30 	bl	8000298 <__aeabi_dsub>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4b8c      	ldr	r3, [pc, #560]	; (8006c74 <get_Straj+0x118c>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fc29 	bl	800029c <__adddf3>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	4b8b      	ldr	r3, [pc, #556]	; (8006c80 <get_Straj+0x1198>)
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f7f9 fdd6 	bl	8000608 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4620      	mov	r0, r4
 8006a62:	4629      	mov	r1, r5
 8006a64:	f7f9 fc1a 	bl	800029c <__adddf3>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8006a70:	4b85      	ldr	r3, [pc, #532]	; (8006c88 <get_Straj+0x11a0>)
 8006a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	4b84      	ldr	r3, [pc, #528]	; (8006c8c <get_Straj+0x11a4>)
 8006a7c:	f7f9 feee 	bl	800085c <__aeabi_ddiv>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4692      	mov	sl, r2
 8006a86:	469b      	mov	fp, r3
 8006a88:	4b79      	ldr	r3, [pc, #484]	; (8006c70 <get_Straj+0x1188>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006a92:	f7f9 fc01 	bl	8000298 <__aeabi_dsub>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4b75      	ldr	r3, [pc, #468]	; (8006c74 <get_Straj+0x118c>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fbfa 	bl	800029c <__adddf3>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	ec43 2b17 	vmov	d7, r2, r3
 8006ab0:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8006c68 <get_Straj+0x1180>
 8006ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8006ab8:	eef0 0a67 	vmov.f32	s1, s15
 8006abc:	f008 f99c 	bl	800edf8 <pow>
 8006ac0:	ec51 0b10 	vmov	r0, r1, d0
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	4b71      	ldr	r3, [pc, #452]	; (8006c90 <get_Straj+0x11a8>)
 8006aca:	f7f9 fd9d 	bl	8000608 <__aeabi_dmul>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	4b68      	ldr	r3, [pc, #416]	; (8006c78 <get_Straj+0x1190>)
 8006ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	4b6b      	ldr	r3, [pc, #428]	; (8006c90 <get_Straj+0x11a8>)
 8006ae2:	f7f9 fd91 	bl	8000608 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4614      	mov	r4, r2
 8006aec:	461d      	mov	r5, r3
 8006aee:	4b60      	ldr	r3, [pc, #384]	; (8006c70 <get_Straj+0x1188>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006af8:	f7f9 fbce 	bl	8000298 <__aeabi_dsub>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4610      	mov	r0, r2
 8006b02:	4619      	mov	r1, r3
 8006b04:	4b5b      	ldr	r3, [pc, #364]	; (8006c74 <get_Straj+0x118c>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fbc7 	bl	800029c <__adddf3>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 fd77 	bl	8000608 <__aeabi_dmul>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	f7f9 fbb9 	bl	8000298 <__aeabi_dsub>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	4b52      	ldr	r3, [pc, #328]	; (8006c78 <get_Straj+0x1190>)
 8006b30:	ed93 7b00 	vldr	d7, [r3]
 8006b34:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8006c68 <get_Straj+0x1180>
 8006b38:	eeb0 0a47 	vmov.f32	s0, s14
 8006b3c:	eef0 0a67 	vmov.f32	s1, s15
 8006b40:	f008 f95a 	bl	800edf8 <pow>
 8006b44:	ec53 2b10 	vmov	r2, r3, d0
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fba6 	bl	800029c <__adddf3>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4650      	mov	r0, sl
 8006b56:	4659      	mov	r1, fp
 8006b58:	f7f9 fd56 	bl	8000608 <__aeabi_dmul>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006b64:	f7f9 fb9a 	bl	800029c <__adddf3>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4949      	ldr	r1, [pc, #292]	; (8006c94 <get_Straj+0x11ac>)
 8006b6e:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8006b72:	4b3f      	ldr	r3, [pc, #252]	; (8006c70 <get_Straj+0x1188>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	4b3a      	ldr	r3, [pc, #232]	; (8006c74 <get_Straj+0x118c>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb85 	bl	800029c <__adddf3>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4614      	mov	r4, r2
 8006b98:	461d      	mov	r5, r3
 8006b9a:	4b37      	ldr	r3, [pc, #220]	; (8006c78 <get_Straj+0x1190>)
 8006b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ba8:	f7f9 fe58 	bl	800085c <__aeabi_ddiv>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb70 	bl	8000298 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <get_Straj+0x11a0>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd1f 	bl	8000608 <__aeabi_dmul>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <get_Straj+0x1198>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fb60 	bl	800029c <__adddf3>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	492d      	ldr	r1, [pc, #180]	; (8006c98 <get_Straj+0x11b0>)
 8006be2:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*Tj2;
 8006be6:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <get_Straj+0x11b4>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <get_Straj+0x1190>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bfe:	f7f9 fd03 	bl	8000608 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4926      	ldr	r1, [pc, #152]	; (8006ca0 <get_Straj+0x11b8>)
 8006c08:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006c0c:	4925      	ldr	r1, [pc, #148]	; (8006ca4 <get_Straj+0x11bc>)
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006c1a:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <get_Straj+0x11c0>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 8149 	beq.w	8006eb6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006c24:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <get_Straj+0x11ac>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	643a      	str	r2, [r7, #64]	; 0x40
 8006c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	647b      	str	r3, [r7, #68]	; 0x44
 8006c32:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <get_Straj+0x11ac>)
 8006c34:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006c38:	ed83 7b00 	vstr	d7, [r3]
 8006c3c:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <get_Straj+0x11b0>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	63ba      	str	r2, [r7, #56]	; 0x38
 8006c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4a:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <get_Straj+0x11b0>)
 8006c4c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006c50:	ed83 7b00 	vstr	d7, [r3]
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <get_Straj+0x11b8>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
 8006c62:	e023      	b.n	8006cac <get_Straj+0x11c4>
 8006c64:	f3af 8000 	nop.w
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	40000000 	.word	0x40000000
 8006c70:	20000838 	.word	0x20000838
 8006c74:	20000848 	.word	0x20000848
 8006c78:	20000860 	.word	0x20000860
 8006c7c:	20000880 	.word	0x20000880
 8006c80:	20000830 	.word	0x20000830
 8006c84:	200006f0 	.word	0x200006f0
 8006c88:	20000828 	.word	0x20000828
 8006c8c:	40180000 	.word	0x40180000
 8006c90:	40080000 	.word	0x40080000
 8006c94:	200006c0 	.word	0x200006c0
 8006c98:	200006c8 	.word	0x200006c8
 8006c9c:	20000008 	.word	0x20000008
 8006ca0:	200006d0 	.word	0x200006d0
 8006ca4:	200006d8 	.word	0x200006d8
 8006ca8:	20000818 	.word	0x20000818
 8006cac:	4b8e      	ldr	r3, [pc, #568]	; (8006ee8 <get_Straj+0x1400>)
 8006cae:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006cb2:	ed83 7b00 	vstr	d7, [r3]
 8006cb6:	4b8d      	ldr	r3, [pc, #564]	; (8006eec <get_Straj+0x1404>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc4:	4b89      	ldr	r3, [pc, #548]	; (8006eec <get_Straj+0x1404>)
 8006cc6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006cca:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006cce:	4b88      	ldr	r3, [pc, #544]	; (8006ef0 <get_Straj+0x1408>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006cd4:	e0ef      	b.n	8006eb6 <get_Straj+0x13ce>
        }

    } else if (t>T-Tj2 && t<=T){
 8006cd6:	4b87      	ldr	r3, [pc, #540]	; (8006ef4 <get_Straj+0x140c>)
 8006cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cdc:	4b86      	ldr	r3, [pc, #536]	; (8006ef8 <get_Straj+0x1410>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fad9 	bl	8000298 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006cee:	f7f9 ff1b 	bl	8000b28 <__aeabi_dcmpgt>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80de 	beq.w	8006eb6 <get_Straj+0x13ce>
 8006cfa:	4b7e      	ldr	r3, [pc, #504]	; (8006ef4 <get_Straj+0x140c>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006d04:	f7f9 fefc 	bl	8000b00 <__aeabi_dcmple>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80d3 	beq.w	8006eb6 <get_Straj+0x13ce>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8006d10:	4b7a      	ldr	r3, [pc, #488]	; (8006efc <get_Straj+0x1414>)
 8006d12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006d16:	4b77      	ldr	r3, [pc, #476]	; (8006ef4 <get_Straj+0x140c>)
 8006d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d1c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d20:	f7f9 faba 	bl	8000298 <__aeabi_dsub>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4b74      	ldr	r3, [pc, #464]	; (8006f00 <get_Straj+0x1418>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fc69 	bl	8000608 <__aeabi_dmul>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 faab 	bl	8000298 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4614      	mov	r4, r2
 8006d48:	461d      	mov	r5, r3
 8006d4a:	4b6a      	ldr	r3, [pc, #424]	; (8006ef4 <get_Straj+0x140c>)
 8006d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d50:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d54:	f7f9 faa0 	bl	8000298 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	ec43 2b17 	vmov	d7, r2, r3
 8006d60:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8006ed8 <get_Straj+0x13f0>
 8006d64:	eeb0 0a47 	vmov.f32	s0, s14
 8006d68:	eef0 0a67 	vmov.f32	s1, s15
 8006d6c:	f008 f844 	bl	800edf8 <pow>
 8006d70:	ec51 0b10 	vmov	r0, r1, d0
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	4b62      	ldr	r3, [pc, #392]	; (8006f04 <get_Straj+0x141c>)
 8006d7a:	f7f9 fd6f 	bl	800085c <__aeabi_ddiv>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4610      	mov	r0, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	4b60      	ldr	r3, [pc, #384]	; (8006f08 <get_Straj+0x1420>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fc3c 	bl	8000608 <__aeabi_dmul>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fa7e 	bl	8000298 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	495a      	ldr	r1, [pc, #360]	; (8006f0c <get_Straj+0x1424>)
 8006da2:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vf+jmax*(pow(T-t,2))/2;
 8006da6:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <get_Straj+0x140c>)
 8006da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dac:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006db0:	f7f9 fa72 	bl	8000298 <__aeabi_dsub>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	ec43 2b17 	vmov	d7, r2, r3
 8006dbc:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8006ee0 <get_Straj+0x13f8>
 8006dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8006dc4:	eef0 0a67 	vmov.f32	s1, s15
 8006dc8:	f008 f816 	bl	800edf8 <pow>
 8006dcc:	ec51 0b10 	vmov	r0, r1, d0
 8006dd0:	4b4d      	ldr	r3, [pc, #308]	; (8006f08 <get_Straj+0x1420>)
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f7f9 fc17 	bl	8000608 <__aeabi_dmul>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dea:	f7f9 fd37 	bl	800085c <__aeabi_ddiv>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	4b42      	ldr	r3, [pc, #264]	; (8006f00 <get_Straj+0x1418>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa4e 	bl	800029c <__adddf3>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4942      	ldr	r1, [pc, #264]	; (8006f10 <get_Straj+0x1428>)
 8006e06:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*(T-t);
 8006e0a:	4b3f      	ldr	r3, [pc, #252]	; (8006f08 <get_Straj+0x1420>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	623a      	str	r2, [r7, #32]
 8006e12:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
 8006e18:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <get_Straj+0x140c>)
 8006e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e1e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006e22:	f7f9 fa39 	bl	8000298 <__aeabi_dsub>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006e2e:	f7f9 fbeb 	bl	8000608 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	492c      	ldr	r1, [pc, #176]	; (8006ee8 <get_Straj+0x1400>)
 8006e38:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8006e3c:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <get_Straj+0x1420>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	492a      	ldr	r1, [pc, #168]	; (8006eec <get_Straj+0x1404>)
 8006e44:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006e48:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <get_Straj+0x1408>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d032      	beq.n	8006eb6 <get_Straj+0x13ce>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006e50:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <get_Straj+0x1424>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	61ba      	str	r2, [r7, #24]
 8006e58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	4b2b      	ldr	r3, [pc, #172]	; (8006f0c <get_Straj+0x1424>)
 8006e60:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e64:	ed83 7b00 	vstr	d7, [r3]
 8006e68:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <get_Straj+0x1428>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	613a      	str	r2, [r7, #16]
 8006e70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	4b26      	ldr	r3, [pc, #152]	; (8006f10 <get_Straj+0x1428>)
 8006e78:	ed97 7b04 	vldr	d7, [r7, #16]
 8006e7c:	ed83 7b00 	vstr	d7, [r3]
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <get_Straj+0x1400>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	60ba      	str	r2, [r7, #8]
 8006e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <get_Straj+0x1400>)
 8006e90:	ed97 7b02 	vldr	d7, [r7, #8]
 8006e94:	ed83 7b00 	vstr	d7, [r3]
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <get_Straj+0x1404>)
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	603a      	str	r2, [r7, #0]
 8006ea0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <get_Straj+0x1404>)
 8006ea8:	ed97 7b00 	vldr	d7, [r7]
 8006eac:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <get_Straj+0x1408>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <get_Straj+0x1428>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8006ec4:	eef0 0a67 	vmov.f32	s1, s15
 8006ec8:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed2:	bf00      	nop
 8006ed4:	f3af 8000 	nop.w
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	40080000 	.word	0x40080000
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	40000000 	.word	0x40000000
 8006ee8:	200006d0 	.word	0x200006d0
 8006eec:	200006d8 	.word	0x200006d8
 8006ef0:	20000818 	.word	0x20000818
 8006ef4:	20000838 	.word	0x20000838
 8006ef8:	20000860 	.word	0x20000860
 8006efc:	20000880 	.word	0x20000880
 8006f00:	200006f0 	.word	0x200006f0
 8006f04:	40180000 	.word	0x40180000
 8006f08:	20000008 	.word	0x20000008
 8006f0c:	200006c0 	.word	0x200006c0
 8006f10:	200006c8 	.word	0x200006c8
 8006f14:	00000000 	.word	0x00000000

08006f18 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8006f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f1c:	b0a6      	sub	sp, #152	; 0x98
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
 8006f24:	ed87 1b20 	vstr	d1, [r7, #128]	; 0x80
 8006f28:	ed87 2b1e 	vstr	d2, [r7, #120]	; 0x78
 8006f2c:	ed87 3b1c 	vstr	d3, [r7, #112]	; 0x70
 8006f30:	ed87 4b1a 	vstr	d4, [r7, #104]	; 0x68
 8006f34:	ed87 5b18 	vstr	d5, [r7, #96]	; 0x60
 8006f38:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 8006f3c:	6578      	str	r0, [r7, #84]	; 0x54

	jmin = -jmax;
 8006f3e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f42:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006f46:	4bae      	ldr	r3, [pc, #696]	; (8007200 <update_ScurveTraj+0x2e8>)
 8006f48:	e9c3 4500 	strd	r4, r5, [r3]
	amin = -amax;
 8006f4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f50:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006f54:	4bab      	ldr	r3, [pc, #684]	; (8007204 <update_ScurveTraj+0x2ec>)
 8006f56:	e9c3 1200 	strd	r1, r2, [r3]
	vmin = -vmax;
 8006f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f66:	4ba8      	ldr	r3, [pc, #672]	; (8007208 <update_ScurveTraj+0x2f0>)
 8006f68:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006f6c:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8006f70:	49a6      	ldr	r1, [pc, #664]	; (800720c <update_ScurveTraj+0x2f4>)
 8006f72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006f76:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8006f7a:	49a5      	ldr	r1, [pc, #660]	; (8007210 <update_ScurveTraj+0x2f8>)
 8006f7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006f80:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8006f84:	4ba2      	ldr	r3, [pc, #648]	; (8007210 <update_ScurveTraj+0x2f8>)
 8006f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f8a:	4ba0      	ldr	r3, [pc, #640]	; (800720c <update_ScurveTraj+0x2f4>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f7f9 fdac 	bl	8000aec <__aeabi_dcmplt>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d061      	beq.n	800705e <update_ScurveTraj+0x146>

		flagInv = true;
 8006f9a:	4a9e      	ldr	r2, [pc, #632]	; (8007214 <update_ScurveTraj+0x2fc>)
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	7013      	strb	r3, [r2, #0]

		qi = -qi;
 8006fa0:	4b9a      	ldr	r3, [pc, #616]	; (800720c <update_ScurveTraj+0x2f4>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	4690      	mov	r8, r2
 8006fa8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006fac:	4b97      	ldr	r3, [pc, #604]	; (800720c <update_ScurveTraj+0x2f4>)
 8006fae:	e9c3 8900 	strd	r8, r9, [r3]
		qf = -qf;
 8006fb2:	4b97      	ldr	r3, [pc, #604]	; (8007210 <update_ScurveTraj+0x2f8>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	4692      	mov	sl, r2
 8006fba:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8006fbe:	4b94      	ldr	r3, [pc, #592]	; (8007210 <update_ScurveTraj+0x2f8>)
 8006fc0:	e9c3 ab00 	strd	sl, fp, [r3]
		vi = -vi;
 8006fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8006fd4:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
		vf = -vf;
 8006fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fe2:	607b      	str	r3, [r7, #4]
 8006fe4:	ed97 7b00 	vldr	d7, [r7]
 8006fe8:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70

		vmax = -vmin;
 8006fec:	4b86      	ldr	r3, [pc, #536]	; (8007208 <update_ScurveTraj+0x2f0>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	66b9      	str	r1, [r7, #104]	; 0x68
 8006ff6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
		vmin = -vmax;
 8006ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007006:	647b      	str	r3, [r7, #68]	; 0x44
 8007008:	4b7f      	ldr	r3, [pc, #508]	; (8007208 <update_ScurveTraj+0x2f0>)
 800700a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800700e:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8007012:	4b7c      	ldr	r3, [pc, #496]	; (8007204 <update_ScurveTraj+0x2ec>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	4611      	mov	r1, r2
 800701a:	6639      	str	r1, [r7, #96]	; 0x60
 800701c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007020:	667b      	str	r3, [r7, #100]	; 0x64
		amin = -amax;
 8007022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38
 8007026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800702e:	4b75      	ldr	r3, [pc, #468]	; (8007204 <update_ScurveTraj+0x2ec>)
 8007030:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8007034:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8007038:	4b71      	ldr	r3, [pc, #452]	; (8007200 <update_ScurveTraj+0x2e8>)
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	4611      	mov	r1, r2
 8007040:	65b9      	str	r1, [r7, #88]	; 0x58
 8007042:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007046:	65fb      	str	r3, [r7, #92]	; 0x5c
		jmin = -jmax;
 8007048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800704a:	633b      	str	r3, [r7, #48]	; 0x30
 800704c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
 8007054:	4b6a      	ldr	r3, [pc, #424]	; (8007200 <update_ScurveTraj+0x2e8>)
 8007056:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800705a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800705e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007062:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007066:	f7f9 f917 	bl	8000298 <__aeabi_dsub>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800707a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800707e:	f7f9 fbed 	bl	800085c <__aeabi_ddiv>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	ec43 2b17 	vmov	d7, r2, r3
 800708a:	eeb0 0a47 	vmov.f32	s0, s14
 800708e:	eef0 0a67 	vmov.f32	s1, s15
 8007092:	f007 ff21 	bl	800eed8 <sqrt>
 8007096:	ec55 4b10 	vmov	r4, r5, d0
 800709a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800709e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070a2:	f7f9 fbdb 	bl	800085c <__aeabi_ddiv>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 fd1d 	bl	8000aec <__aeabi_dcmplt>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01e      	beq.n	80070f6 <update_ScurveTraj+0x1de>
 80070b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80070bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80070c0:	f7f9 f8ea 	bl	8000298 <__aeabi_dsub>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	623a      	str	r2, [r7, #32]
 80070ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
 80070d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80070d8:	f7f9 fbc0 	bl	800085c <__aeabi_ddiv>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	ec43 2b17 	vmov	d7, r2, r3
 80070e4:	eeb0 0a47 	vmov.f32	s0, s14
 80070e8:	eef0 0a67 	vmov.f32	s1, s15
 80070ec:	f007 fef4 	bl	800eed8 <sqrt>
 80070f0:	ec53 2b10 	vmov	r2, r3, d0
 80070f4:	e007      	b.n	8007106 <update_ScurveTraj+0x1ee>
 80070f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070fe:	f7f9 fbad 	bl	800085c <__aeabi_ddiv>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4610      	mov	r0, r2
 8007108:	4619      	mov	r1, r3
 800710a:	f7f9 fd4d 	bl	8000ba8 <__aeabi_d2f>
 800710e:	4603      	mov	r3, r0
 8007110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


	if (Tjaux<amax/jmax){
 8007114:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007118:	4618      	mov	r0, r3
 800711a:	f7f9 fa1d 	bl	8000558 <__aeabi_f2d>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007126:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800712a:	f7f9 fb97 	bl	800085c <__aeabi_ddiv>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	f7f9 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <update_ScurveTraj+0x23e>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8007140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007144:	4618      	mov	r0, r3
 8007146:	f7f9 fa07 	bl	8000558 <__aeabi_f2d>
 800714a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800714e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007152:	f7f9 fb83 	bl	800085c <__aeabi_ddiv>
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8007156:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800715a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800715e:	f7f9 f89b 	bl	8000298 <__aeabi_dsub>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800716e:	f7f9 fa4b 	bl	8000608 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4614      	mov	r4, r2
 8007178:	461d      	mov	r5, r3
 800717a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80071f8 <update_ScurveTraj+0x2e0>
 800717e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007182:	f007 fe39 	bl	800edf8 <pow>
 8007186:	ec53 2b10 	vmov	r2, r3, d0
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 fcad 	bl	8000aec <__aeabi_dcmplt>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d043      	beq.n	8007220 <update_ScurveTraj+0x308>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8007198:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800719c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071a0:	f7f9 f87a 	bl	8000298 <__aeabi_dsub>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	61ba      	str	r2, [r7, #24]
 80071aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071b8:	f7f9 fb50 	bl	800085c <__aeabi_ddiv>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	ec43 2b17 	vmov	d7, r2, r3
 80071c4:	eeb0 0a47 	vmov.f32	s0, s14
 80071c8:	eef0 0a67 	vmov.f32	s1, s15
 80071cc:	f007 fe84 	bl	800eed8 <sqrt>
 80071d0:	eeb0 7a40 	vmov.f32	s14, s0
 80071d4:	eef0 7a60 	vmov.f32	s15, s1
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <update_ScurveTraj+0x300>)
 80071da:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 80071de:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <update_ScurveTraj+0x300>)
 80071e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	f7f9 f858 	bl	800029c <__adddf3>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	490a      	ldr	r1, [pc, #40]	; (800721c <update_ScurveTraj+0x304>)
 80071f2:	e9c1 2300 	strd	r2, r3, [r1]
 80071f6:	e03a      	b.n	800726e <update_ScurveTraj+0x356>
 80071f8:	00000000 	.word	0x00000000
 80071fc:	40000000 	.word	0x40000000
 8007200:	200006e0 	.word	0x200006e0
 8007204:	200006f8 	.word	0x200006f8
 8007208:	200006e8 	.word	0x200006e8
 800720c:	20000878 	.word	0x20000878
 8007210:	20000880 	.word	0x20000880
 8007214:	20000818 	.word	0x20000818
 8007218:	20000858 	.word	0x20000858
 800721c:	20000840 	.word	0x20000840
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8007220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007224:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007228:	f7f9 fb18 	bl	800085c <__aeabi_ddiv>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4939      	ldr	r1, [pc, #228]	; (8007318 <update_ScurveTraj+0x400>)
 8007232:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=Tj1+(vmax-vi)/amax;
 8007236:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800723a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800723e:	f7f9 f82b 	bl	8000298 <__aeabi_dsub>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4610      	mov	r0, r2
 8007248:	4619      	mov	r1, r3
 800724a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800724e:	f7f9 fb05 	bl	800085c <__aeabi_ddiv>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <update_ScurveTraj+0x400>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 f81c 	bl	800029c <__adddf3>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	492c      	ldr	r1, [pc, #176]	; (800731c <update_ScurveTraj+0x404>)
 800726a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 800726e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007276:	f7f9 f80f 	bl	8000298 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4610      	mov	r0, r2
 8007280:	4619      	mov	r1, r3
 8007282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007286:	f7f9 f9bf 	bl	8000608 <__aeabi_dmul>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4614      	mov	r4, r2
 8007290:	461d      	mov	r5, r3
 8007292:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007310 <update_ScurveTraj+0x3f8>
 8007296:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800729a:	f007 fdad 	bl	800edf8 <pow>
 800729e:	ec53 2b10 	vmov	r2, r3, d0
 80072a2:	4620      	mov	r0, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f9 fc21 	bl	8000aec <__aeabi_dcmplt>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d03b      	beq.n	8007328 <update_ScurveTraj+0x410>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80072b0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80072b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072b8:	f7f8 ffee 	bl	8000298 <__aeabi_dsub>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	613a      	str	r2, [r7, #16]
 80072c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072d0:	f7f9 fac4 	bl	800085c <__aeabi_ddiv>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	ec43 2b17 	vmov	d7, r2, r3
 80072dc:	eeb0 0a47 	vmov.f32	s0, s14
 80072e0:	eef0 0a67 	vmov.f32	s1, s15
 80072e4:	f007 fdf8 	bl	800eed8 <sqrt>
 80072e8:	eeb0 7a40 	vmov.f32	s14, s0
 80072ec:	eef0 7a60 	vmov.f32	s15, s1
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <update_ScurveTraj+0x408>)
 80072f2:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 80072f6:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <update_ScurveTraj+0x408>)
 80072f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	f7f8 ffcc 	bl	800029c <__adddf3>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4906      	ldr	r1, [pc, #24]	; (8007324 <update_ScurveTraj+0x40c>)
 800730a:	e9c1 2300 	strd	r2, r3, [r1]
 800730e:	e032      	b.n	8007376 <update_ScurveTraj+0x45e>
 8007310:	00000000 	.word	0x00000000
 8007314:	40000000 	.word	0x40000000
 8007318:	20000858 	.word	0x20000858
 800731c:	20000840 	.word	0x20000840
 8007320:	20000860 	.word	0x20000860
 8007324:	20000848 	.word	0x20000848
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8007328:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800732c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007330:	f7f9 fa94 	bl	800085c <__aeabi_ddiv>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	49cb      	ldr	r1, [pc, #812]	; (8007668 <update_ScurveTraj+0x750>)
 800733a:	e9c1 2300 	strd	r2, r3, [r1]
		Td=Tj2+(vmax-vf)/amax;
 800733e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007346:	f7f8 ffa7 	bl	8000298 <__aeabi_dsub>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4610      	mov	r0, r2
 8007350:	4619      	mov	r1, r3
 8007352:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007356:	f7f9 fa81 	bl	800085c <__aeabi_ddiv>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	4bc1      	ldr	r3, [pc, #772]	; (8007668 <update_ScurveTraj+0x750>)
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	f7f8 ff98 	bl	800029c <__adddf3>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	49be      	ldr	r1, [pc, #760]	; (800766c <update_ScurveTraj+0x754>)
 8007372:	e9c1 2300 	strd	r2, r3, [r1]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 8007376:	4bbe      	ldr	r3, [pc, #760]	; (8007670 <update_ScurveTraj+0x758>)
 8007378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800737c:	4bbd      	ldr	r3, [pc, #756]	; (8007674 <update_ScurveTraj+0x75c>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f8 ff89 	bl	8000298 <__aeabi_dsub>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007392:	f7f9 fa63 	bl	800085c <__aeabi_ddiv>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4614      	mov	r4, r2
 800739c:	461d      	mov	r5, r3
 800739e:	4bb6      	ldr	r3, [pc, #728]	; (8007678 <update_ScurveTraj+0x760>)
 80073a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073ac:	f7f9 fa56 	bl	800085c <__aeabi_ddiv>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4690      	mov	r8, r2
 80073b6:	4699      	mov	r9, r3
 80073b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80073bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80073c0:	f7f9 fa4c 	bl	800085c <__aeabi_ddiv>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4610      	mov	r0, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	4baa      	ldr	r3, [pc, #680]	; (800767c <update_ScurveTraj+0x764>)
 80073d2:	f7f8 ff63 	bl	800029c <__adddf3>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f913 	bl	8000608 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f8 ff55 	bl	8000298 <__aeabi_dsub>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4614      	mov	r4, r2
 80073f4:	461d      	mov	r5, r3
 80073f6:	4b9d      	ldr	r3, [pc, #628]	; (800766c <update_ScurveTraj+0x754>)
 80073f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007404:	f7f9 fa2a 	bl	800085c <__aeabi_ddiv>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4690      	mov	r8, r2
 800740e:	4699      	mov	r9, r3
 8007410:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007414:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007418:	f7f9 fa20 	bl	800085c <__aeabi_ddiv>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	4b94      	ldr	r3, [pc, #592]	; (800767c <update_ScurveTraj+0x764>)
 800742a:	f7f8 ff37 	bl	800029c <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4640      	mov	r0, r8
 8007434:	4649      	mov	r1, r9
 8007436:	f7f9 f8e7 	bl	8000608 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f8 ff29 	bl	8000298 <__aeabi_dsub>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	498d      	ldr	r1, [pc, #564]	; (8007680 <update_ScurveTraj+0x768>)
 800744c:	e9c1 2300 	strd	r2, r3, [r1]

	if (Tv>0){
 8007450:	4b8b      	ldr	r3, [pc, #556]	; (8007680 <update_ScurveTraj+0x768>)
 8007452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	f7f9 fb63 	bl	8000b28 <__aeabi_dcmpgt>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 849f 	bne.w	8007da8 <update_ScurveTraj+0xe90>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800746a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800746e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007472:	f7f9 f9f3 	bl	800085c <__aeabi_ddiv>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4982      	ldr	r1, [pc, #520]	; (8007684 <update_ScurveTraj+0x76c>)
 800747c:	e9c1 2300 	strd	r2, r3, [r1]
		Tj2=Tj1;
 8007480:	4b80      	ldr	r3, [pc, #512]	; (8007684 <update_ScurveTraj+0x76c>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	4978      	ldr	r1, [pc, #480]	; (8007668 <update_ScurveTraj+0x750>)
 8007488:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 800748c:	4b7d      	ldr	r3, [pc, #500]	; (8007684 <update_ScurveTraj+0x76c>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	497d      	ldr	r1, [pc, #500]	; (8007688 <update_ScurveTraj+0x770>)
 8007494:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8007498:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8007658 <update_ScurveTraj+0x740>
 800749c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80074a0:	f007 fcaa 	bl	800edf8 <pow>
 80074a4:	ec55 4b10 	vmov	r4, r5, d0
 80074a8:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8007660 <update_ScurveTraj+0x748>
 80074ac:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80074b0:	f007 fca2 	bl	800edf8 <pow>
 80074b4:	ec53 2b10 	vmov	r2, r3, d0
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f9 f9ce 	bl	800085c <__aeabi_ddiv>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4614      	mov	r4, r2
 80074c6:	461d      	mov	r5, r3
 80074c8:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8007660 <update_ScurveTraj+0x748>
 80074cc:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80074d0:	f007 fc92 	bl	800edf8 <pow>
 80074d4:	ec59 8b10 	vmov	r8, r9, d0
 80074d8:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8007660 <update_ScurveTraj+0x748>
 80074dc:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80074e0:	f007 fc8a 	bl	800edf8 <pow>
 80074e4:	ec53 2b10 	vmov	r2, r3, d0
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f8 fed6 	bl	800029c <__adddf3>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	f7f8 fece 	bl	800029c <__adddf3>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f8 fec8 	bl	800029c <__adddf3>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	4b56      	ldr	r3, [pc, #344]	; (8007670 <update_ScurveTraj+0x758>)
 8007516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800751a:	4b56      	ldr	r3, [pc, #344]	; (8007674 <update_ScurveTraj+0x75c>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 feba 	bl	8000298 <__aeabi_dsub>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4610      	mov	r0, r2
 800752a:	4619      	mov	r1, r3
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	4b56      	ldr	r3, [pc, #344]	; (800768c <update_ScurveTraj+0x774>)
 8007532:	f7f9 f869 	bl	8000608 <__aeabi_dmul>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4690      	mov	r8, r2
 800753c:	4699      	mov	r9, r3
 800753e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007542:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007546:	f7f9 f989 	bl	800085c <__aeabi_ddiv>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4610      	mov	r0, r2
 8007550:	4619      	mov	r1, r3
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	f7f8 fea1 	bl	800029c <__adddf3>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4692      	mov	sl, r2
 8007560:	469b      	mov	fp, r3
 8007562:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007566:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800756a:	f7f8 fe97 	bl	800029c <__adddf3>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4650      	mov	r0, sl
 8007574:	4659      	mov	r1, fp
 8007576:	f7f9 f847 	bl	8000608 <__aeabi_dmul>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f8 fe89 	bl	8000298 <__aeabi_dsub>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007592:	f7f9 f839 	bl	8000608 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f7f8 fe7d 	bl	800029c <__adddf3>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	493a      	ldr	r1, [pc, #232]	; (8007690 <update_ScurveTraj+0x778>)
 80075a8:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80075ac:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8007660 <update_ScurveTraj+0x748>
 80075b0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80075b4:	f007 fc20 	bl	800edf8 <pow>
 80075b8:	ec51 0b10 	vmov	r0, r1, d0
 80075bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075c0:	f7f9 f94c 	bl	800085c <__aeabi_ddiv>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	461d      	mov	r5, r3
 80075cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	f7f8 fe62 	bl	800029c <__adddf3>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f8 fe5a 	bl	8000298 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <update_ScurveTraj+0x778>)
 80075ee:	ed93 7b00 	vldr	d7, [r3]
 80075f2:	eeb0 0a47 	vmov.f32	s0, s14
 80075f6:	eef0 0a67 	vmov.f32	s1, s15
 80075fa:	f007 fc6d 	bl	800eed8 <sqrt>
 80075fe:	ec53 2b10 	vmov	r2, r3, d0
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f8 fe49 	bl	800029c <__adddf3>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4614      	mov	r4, r2
 8007610:	461d      	mov	r5, r3
 8007612:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	f7f8 fe3f 	bl	800029c <__adddf3>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f9 f919 	bl	800085c <__aeabi_ddiv>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4912      	ldr	r1, [pc, #72]	; (8007678 <update_ScurveTraj+0x760>)
 8007630:	e9c1 2300 	strd	r2, r3, [r1]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007634:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8007660 <update_ScurveTraj+0x748>
 8007638:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800763c:	f007 fbdc 	bl	800edf8 <pow>
 8007640:	ec51 0b10 	vmov	r0, r1, d0
 8007644:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007648:	f7f9 f908 	bl	800085c <__aeabi_ddiv>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4614      	mov	r4, r2
 8007652:	461d      	mov	r5, r3
 8007654:	e01e      	b.n	8007694 <update_ScurveTraj+0x77c>
 8007656:	bf00      	nop
 8007658:	00000000 	.word	0x00000000
 800765c:	40100000 	.word	0x40100000
 8007660:	00000000 	.word	0x00000000
 8007664:	40000000 	.word	0x40000000
 8007668:	20000860 	.word	0x20000860
 800766c:	20000848 	.word	0x20000848
 8007670:	20000880 	.word	0x20000880
 8007674:	20000878 	.word	0x20000878
 8007678:	20000840 	.word	0x20000840
 800767c:	3ff00000 	.word	0x3ff00000
 8007680:	20000850 	.word	0x20000850
 8007684:	20000858 	.word	0x20000858
 8007688:	20000868 	.word	0x20000868
 800768c:	40100000 	.word	0x40100000
 8007690:	20000870 	.word	0x20000870
 8007694:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	f7f8 fdfe 	bl	800029c <__adddf3>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 fdf6 	bl	8000298 <__aeabi_dsub>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	461d      	mov	r5, r3
 80076b4:	4b29      	ldr	r3, [pc, #164]	; (800775c <update_ScurveTraj+0x844>)
 80076b6:	ed93 7b00 	vldr	d7, [r3]
 80076ba:	eeb0 0a47 	vmov.f32	s0, s14
 80076be:	eef0 0a67 	vmov.f32	s1, s15
 80076c2:	f007 fc09 	bl	800eed8 <sqrt>
 80076c6:	ec53 2b10 	vmov	r2, r3, d0
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7f8 fde5 	bl	800029c <__adddf3>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	461d      	mov	r5, r3
 80076da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	f7f8 fddb 	bl	800029c <__adddf3>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f9 f8b5 	bl	800085c <__aeabi_ddiv>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	491a      	ldr	r1, [pc, #104]	; (8007760 <update_ScurveTraj+0x848>)
 80076f8:	e9c1 2300 	strd	r2, r3, [r1]
		Tv=0;
 80076fc:	4919      	ldr	r1, [pc, #100]	; (8007764 <update_ScurveTraj+0x84c>)
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 800770a:	4b17      	ldr	r3, [pc, #92]	; (8007768 <update_ScurveTraj+0x850>)
 800770c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	f7f8 fdc2 	bl	800029c <__adddf3>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <update_ScurveTraj+0x854>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f9 f9ff 	bl	8000b28 <__aeabi_dcmpgt>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 8301 	bne.w	8007d34 <update_ScurveTraj+0xe1c>
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <update_ScurveTraj+0x850>)
 8007734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	f7f8 fdae 	bl	800029c <__adddf3>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	4b05      	ldr	r3, [pc, #20]	; (8007760 <update_ScurveTraj+0x848>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f9 f9eb 	bl	8000b28 <__aeabi_dcmpgt>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8327 	beq.w	8007da8 <update_ScurveTraj+0xe90>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 800775a:	e2eb      	b.n	8007d34 <update_ScurveTraj+0xe1c>
 800775c:	20000870 	.word	0x20000870
 8007760:	20000848 	.word	0x20000848
 8007764:	20000850 	.word	0x20000850
 8007768:	20000868 	.word	0x20000868
 800776c:	20000840 	.word	0x20000840

				amax=amax*0.99;
 8007770:	a3e3      	add	r3, pc, #908	; (adr r3, 8007b00 <update_ScurveTraj+0xbe8>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800777a:	f7f8 ff45 	bl	8000608 <__aeabi_dmul>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				Tj=amax/jmax;
 8007786:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800778a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800778e:	f7f9 f865 	bl	800085c <__aeabi_ddiv>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	49d2      	ldr	r1, [pc, #840]	; (8007ae0 <update_ScurveTraj+0xbc8>)
 8007798:	e9c1 2300 	strd	r2, r3, [r1]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 800779c:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 8007ad0 <update_ScurveTraj+0xbb8>
 80077a0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80077a4:	f007 fb28 	bl	800edf8 <pow>
 80077a8:	ec55 4b10 	vmov	r4, r5, d0
 80077ac:	ed9f 1bca 	vldr	d1, [pc, #808]	; 8007ad8 <update_ScurveTraj+0xbc0>
 80077b0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80077b4:	f007 fb20 	bl	800edf8 <pow>
 80077b8:	ec53 2b10 	vmov	r2, r3, d0
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f9 f84c 	bl	800085c <__aeabi_ddiv>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	461d      	mov	r5, r3
 80077cc:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8007ad8 <update_ScurveTraj+0xbc0>
 80077d0:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80077d4:	f007 fb10 	bl	800edf8 <pow>
 80077d8:	ec59 8b10 	vmov	r8, r9, d0
 80077dc:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8007ad8 <update_ScurveTraj+0xbc0>
 80077e0:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80077e4:	f007 fb08 	bl	800edf8 <pow>
 80077e8:	ec53 2b10 	vmov	r2, r3, d0
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd54 	bl	800029c <__adddf3>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	f7f8 fd4c 	bl	800029c <__adddf3>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4620      	mov	r0, r4
 800780a:	4629      	mov	r1, r5
 800780c:	f7f8 fd46 	bl	800029c <__adddf3>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	4bb2      	ldr	r3, [pc, #712]	; (8007ae4 <update_ScurveTraj+0xbcc>)
 800781a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800781e:	4bb2      	ldr	r3, [pc, #712]	; (8007ae8 <update_ScurveTraj+0xbd0>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fd38 	bl	8000298 <__aeabi_dsub>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	4bad      	ldr	r3, [pc, #692]	; (8007aec <update_ScurveTraj+0xbd4>)
 8007836:	f7f8 fee7 	bl	8000608 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	4690      	mov	r8, r2
 8007840:	4699      	mov	r9, r3
 8007842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007846:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800784a:	f7f9 f807 	bl	800085c <__aeabi_ddiv>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	f7f8 fd1f 	bl	800029c <__adddf3>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4692      	mov	sl, r2
 8007864:	469b      	mov	fp, r3
 8007866:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800786a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800786e:	f7f8 fd15 	bl	800029c <__adddf3>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4650      	mov	r0, sl
 8007878:	4659      	mov	r1, fp
 800787a:	f7f8 fec5 	bl	8000608 <__aeabi_dmul>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 fd07 	bl	8000298 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4610      	mov	r0, r2
 8007890:	4619      	mov	r1, r3
 8007892:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007896:	f7f8 feb7 	bl	8000608 <__aeabi_dmul>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f8 fcfb 	bl	800029c <__adddf3>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4991      	ldr	r1, [pc, #580]	; (8007af0 <update_ScurveTraj+0xbd8>)
 80078ac:	e9c1 2300 	strd	r2, r3, [r1]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80078b0:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8007ad8 <update_ScurveTraj+0xbc0>
 80078b4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80078b8:	f007 fa9e 	bl	800edf8 <pow>
 80078bc:	ec51 0b10 	vmov	r0, r1, d0
 80078c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078c4:	f7f8 ffca 	bl	800085c <__aeabi_ddiv>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	f7f8 fce0 	bl	800029c <__adddf3>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4620      	mov	r0, r4
 80078e2:	4629      	mov	r1, r5
 80078e4:	f7f8 fcd8 	bl	8000298 <__aeabi_dsub>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	461d      	mov	r5, r3
 80078f0:	4b7f      	ldr	r3, [pc, #508]	; (8007af0 <update_ScurveTraj+0xbd8>)
 80078f2:	ed93 7b00 	vldr	d7, [r3]
 80078f6:	eeb0 0a47 	vmov.f32	s0, s14
 80078fa:	eef0 0a67 	vmov.f32	s1, s15
 80078fe:	f007 faeb 	bl	800eed8 <sqrt>
 8007902:	ec53 2b10 	vmov	r2, r3, d0
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fcc7 	bl	800029c <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4614      	mov	r4, r2
 8007914:	461d      	mov	r5, r3
 8007916:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	f7f8 fcbd 	bl	800029c <__adddf3>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 ff97 	bl	800085c <__aeabi_ddiv>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4970      	ldr	r1, [pc, #448]	; (8007af4 <update_ScurveTraj+0xbdc>)
 8007934:	e9c1 2300 	strd	r2, r3, [r1]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007938:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007ad8 <update_ScurveTraj+0xbc0>
 800793c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007940:	f007 fa5a 	bl	800edf8 <pow>
 8007944:	ec51 0b10 	vmov	r0, r1, d0
 8007948:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800794c:	f7f8 ff86 	bl	800085c <__aeabi_ddiv>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4614      	mov	r4, r2
 8007956:	461d      	mov	r5, r3
 8007958:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	f7f8 fc9c 	bl	800029c <__adddf3>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fc94 	bl	8000298 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4614      	mov	r4, r2
 8007976:	461d      	mov	r5, r3
 8007978:	4b5d      	ldr	r3, [pc, #372]	; (8007af0 <update_ScurveTraj+0xbd8>)
 800797a:	ed93 7b00 	vldr	d7, [r3]
 800797e:	eeb0 0a47 	vmov.f32	s0, s14
 8007982:	eef0 0a67 	vmov.f32	s1, s15
 8007986:	f007 faa7 	bl	800eed8 <sqrt>
 800798a:	ec53 2b10 	vmov	r2, r3, d0
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 fc83 	bl	800029c <__adddf3>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4614      	mov	r4, r2
 800799c:	461d      	mov	r5, r3
 800799e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	f7f8 fc79 	bl	800029c <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4620      	mov	r0, r4
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 ff53 	bl	800085c <__aeabi_ddiv>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	494f      	ldr	r1, [pc, #316]	; (8007af8 <update_ScurveTraj+0xbe0>)
 80079bc:	e9c1 2300 	strd	r2, r3, [r1]

				//print(f'{i}',amax)


				if (Ta<0){
 80079c0:	4b4c      	ldr	r3, [pc, #304]	; (8007af4 <update_ScurveTraj+0xbdc>)
 80079c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	f04f 0300 	mov.w	r3, #0
 80079ce:	f7f9 f88d 	bl	8000aec <__aeabi_dcmplt>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80df 	beq.w	8007b98 <update_ScurveTraj+0xc80>
					Ta=0;
 80079da:	4946      	ldr	r1, [pc, #280]	; (8007af4 <update_ScurveTraj+0xbdc>)
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 80079e8:	4944      	ldr	r1, [pc, #272]	; (8007afc <update_ScurveTraj+0xbe4>)
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 80079f6:	4b3b      	ldr	r3, [pc, #236]	; (8007ae4 <update_ScurveTraj+0xbcc>)
 80079f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079fc:	4b3a      	ldr	r3, [pc, #232]	; (8007ae8 <update_ScurveTraj+0xbd0>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fc49 	bl	8000298 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	461d      	mov	r5, r3
 8007a0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007a12:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a16:	f7f8 fc41 	bl	800029c <__adddf3>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 ff1b 	bl	800085c <__aeabi_ddiv>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	f7f8 fc33 	bl	800029c <__adddf3>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	492f      	ldr	r1, [pc, #188]	; (8007af8 <update_ScurveTraj+0xbe0>)
 8007a3c:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007a40:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <update_ScurveTraj+0xbcc>)
 8007a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a46:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <update_ScurveTraj+0xbd0>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fc24 	bl	8000298 <__aeabi_dsub>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4610      	mov	r0, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a5c:	f7f8 fdd4 	bl	8000608 <__aeabi_dmul>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <update_ScurveTraj+0xbcc>)
 8007a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <update_ScurveTraj+0xbd0>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7f8 fc10 	bl	8000298 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	ec43 2b17 	vmov	d7, r2, r3
 8007a80:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8007ad8 <update_ScurveTraj+0xbc0>
 8007a84:	eeb0 0a47 	vmov.f32	s0, s14
 8007a88:	eef0 0a67 	vmov.f32	s1, s15
 8007a8c:	f007 f9b4 	bl	800edf8 <pow>
 8007a90:	ec51 0b10 	vmov	r0, r1, d0
 8007a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a98:	f7f8 fdb6 	bl	8000608 <__aeabi_dmul>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	4699      	mov	r9, r3
 8007aa4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007aa8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007aac:	f7f8 fbf6 	bl	800029c <__adddf3>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	ec43 2b17 	vmov	d7, r2, r3
 8007ab8:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8007ad8 <update_ScurveTraj+0xbc0>
 8007abc:	eeb0 0a47 	vmov.f32	s0, s14
 8007ac0:	eef0 0a67 	vmov.f32	s1, s15
 8007ac4:	f007 f998 	bl	800edf8 <pow>
 8007ac8:	ec5b ab10 	vmov	sl, fp, d0
 8007acc:	e01c      	b.n	8007b08 <update_ScurveTraj+0xbf0>
 8007ace:	bf00      	nop
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	40100000 	.word	0x40100000
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	40000000 	.word	0x40000000
 8007ae0:	20000868 	.word	0x20000868
 8007ae4:	20000880 	.word	0x20000880
 8007ae8:	20000878 	.word	0x20000878
 8007aec:	40100000 	.word	0x40100000
 8007af0:	20000870 	.word	0x20000870
 8007af4:	20000840 	.word	0x20000840
 8007af8:	20000848 	.word	0x20000848
 8007afc:	20000858 	.word	0x20000858
 8007b00:	7ae147ae 	.word	0x7ae147ae
 8007b04:	3fefae14 	.word	0x3fefae14
 8007b08:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007b10:	f7f8 fbc2 	bl	8000298 <__aeabi_dsub>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	f7f8 fd74 	bl	8000608 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 fbb8 	bl	800029c <__adddf3>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b38:	f7f8 fd66 	bl	8000608 <__aeabi_dmul>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	ec43 2b17 	vmov	d7, r2, r3
 8007b44:	eeb0 0a47 	vmov.f32	s0, s14
 8007b48:	eef0 0a67 	vmov.f32	s1, s15
 8007b4c:	f007 f9c4 	bl	800eed8 <sqrt>
 8007b50:	ec53 2b10 	vmov	r2, r3, d0
 8007b54:	4620      	mov	r0, r4
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7f8 fb9e 	bl	8000298 <__aeabi_dsub>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	461d      	mov	r5, r3
 8007b64:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007b6c:	f7f8 fb96 	bl	800029c <__adddf3>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b7c:	f7f8 fd44 	bl	8000608 <__aeabi_dmul>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fe68 	bl	800085c <__aeabi_ddiv>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	49a5      	ldr	r1, [pc, #660]	; (8007e28 <update_ScurveTraj+0xf10>)
 8007b92:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007b96:	e107      	b.n	8007da8 <update_ScurveTraj+0xe90>
				}
				if (Td<0){
 8007b98:	4ba4      	ldr	r3, [pc, #656]	; (8007e2c <update_ScurveTraj+0xf14>)
 8007b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	f7f8 ffa1 	bl	8000aec <__aeabi_dcmplt>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d100      	bne.n	8007bb2 <update_ScurveTraj+0xc9a>
 8007bb0:	e0c0      	b.n	8007d34 <update_ScurveTraj+0xe1c>
					Td=0;
 8007bb2:	499e      	ldr	r1, [pc, #632]	; (8007e2c <update_ScurveTraj+0xf14>)
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8007bc0:	4b9b      	ldr	r3, [pc, #620]	; (8007e30 <update_ScurveTraj+0xf18>)
 8007bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bc6:	4b9b      	ldr	r3, [pc, #620]	; (8007e34 <update_ScurveTraj+0xf1c>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fb64 	bl	8000298 <__aeabi_dsub>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007bdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007be0:	f7f8 fb5c 	bl	800029c <__adddf3>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fe36 	bl	800085c <__aeabi_ddiv>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	f7f8 fb4e 	bl	800029c <__adddf3>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	498c      	ldr	r1, [pc, #560]	; (8007e38 <update_ScurveTraj+0xf20>)
 8007c06:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007c0a:	4b89      	ldr	r3, [pc, #548]	; (8007e30 <update_ScurveTraj+0xf18>)
 8007c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c10:	4b88      	ldr	r3, [pc, #544]	; (8007e34 <update_ScurveTraj+0xf1c>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fb3f 	bl	8000298 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c26:	f7f8 fcef 	bl	8000608 <__aeabi_dmul>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461d      	mov	r5, r3
 8007c32:	4b7f      	ldr	r3, [pc, #508]	; (8007e30 <update_ScurveTraj+0xf18>)
 8007c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c38:	4b7e      	ldr	r3, [pc, #504]	; (8007e34 <update_ScurveTraj+0xf1c>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fb2b 	bl	8000298 <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	ec43 2b17 	vmov	d7, r2, r3
 8007c4a:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8007e20 <update_ScurveTraj+0xf08>
 8007c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8007c52:	eef0 0a67 	vmov.f32	s1, s15
 8007c56:	f007 f8cf 	bl	800edf8 <pow>
 8007c5a:	ec51 0b10 	vmov	r0, r1, d0
 8007c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4690      	mov	r8, r2
 8007c6c:	4699      	mov	r9, r3
 8007c6e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007c72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007c76:	f7f8 fb11 	bl	800029c <__adddf3>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	ec43 2b17 	vmov	d7, r2, r3
 8007c82:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007e20 <update_ScurveTraj+0xf08>
 8007c86:	eeb0 0a47 	vmov.f32	s0, s14
 8007c8a:	eef0 0a67 	vmov.f32	s1, s15
 8007c8e:	f007 f8b3 	bl	800edf8 <pow>
 8007c92:	ec5b ab10 	vmov	sl, fp, d0
 8007c96:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007c9a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007c9e:	f7f8 fafb 	bl	8000298 <__aeabi_dsub>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4650      	mov	r0, sl
 8007ca8:	4659      	mov	r1, fp
 8007caa:	f7f8 fcad 	bl	8000608 <__aeabi_dmul>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f7f8 faef 	bl	8000298 <__aeabi_dsub>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cc6:	f7f8 fc9f 	bl	8000608 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	ec43 2b17 	vmov	d7, r2, r3
 8007cd2:	eeb0 0a47 	vmov.f32	s0, s14
 8007cd6:	eef0 0a67 	vmov.f32	s1, s15
 8007cda:	f007 f8fd 	bl	800eed8 <sqrt>
 8007cde:	ec53 2b10 	vmov	r2, r3, d0
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fad7 	bl	8000298 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4614      	mov	r4, r2
 8007cf0:	461d      	mov	r5, r3
 8007cf2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007cf6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cfa:	f7f8 facf 	bl	800029c <__adddf3>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4610      	mov	r0, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d0a:	f7f8 fc7d 	bl	8000608 <__aeabi_dmul>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fda1 	bl	800085c <__aeabi_ddiv>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4947      	ldr	r1, [pc, #284]	; (8007e3c <update_ScurveTraj+0xf24>)
 8007d20:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=0;
 8007d24:	4940      	ldr	r1, [pc, #256]	; (8007e28 <update_ScurveTraj+0xf10>)
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007d32:	e039      	b.n	8007da8 <update_ScurveTraj+0xe90>
			while (!(Ta>2*Tj && Td>2*Tj)){
 8007d34:	4b42      	ldr	r3, [pc, #264]	; (8007e40 <update_ScurveTraj+0xf28>)
 8007d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	f7f8 faad 	bl	800029c <__adddf3>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4610      	mov	r0, r2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4b3b      	ldr	r3, [pc, #236]	; (8007e38 <update_ScurveTraj+0xf20>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	2401      	movs	r4, #1
 8007d52:	f7f8 fecb 	bl	8000aec <__aeabi_dcmplt>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <update_ScurveTraj+0xe48>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	461c      	mov	r4, r3
 8007d60:	b2e3      	uxtb	r3, r4
 8007d62:	f083 0301 	eor.w	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f47f ad01 	bne.w	8007770 <update_ScurveTraj+0x858>
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <update_ScurveTraj+0xf28>)
 8007d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	f7f8 fa90 	bl	800029c <__adddf3>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	4b29      	ldr	r3, [pc, #164]	; (8007e2c <update_ScurveTraj+0xf14>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	2401      	movs	r4, #1
 8007d8c:	f7f8 feae 	bl	8000aec <__aeabi_dcmplt>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <update_ScurveTraj+0xe82>
 8007d96:	2300      	movs	r3, #0
 8007d98:	461c      	mov	r4, r3
 8007d9a:	b2e3      	uxtb	r3, r4
 8007d9c:	f083 0301 	eor.w	r3, r3, #1
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f47f ace4 	bne.w	8007770 <update_ScurveTraj+0x858>
				}
			}
		}
	}

	*(params)=Tj1;
 8007da8:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <update_ScurveTraj+0xf24>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007db0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8007db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db6:	f103 0108 	add.w	r1, r3, #8
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <update_ScurveTraj+0xf10>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc6:	f103 0110 	add.w	r1, r3, #16
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <update_ScurveTraj+0xf28>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8007dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dd6:	f103 0118 	add.w	r1, r3, #24
 8007dda:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <update_ScurveTraj+0xf20>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8007de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de6:	f103 0120 	add.w	r1, r3, #32
 8007dea:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <update_ScurveTraj+0xf14>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8007df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <update_ScurveTraj+0xf2c>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8007e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e0a:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <update_ScurveTraj+0xf30>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	e9c1 2300 	strd	r2, r3, [r1]

}
 8007e14:	bf00      	nop
 8007e16:	3798      	adds	r7, #152	; 0x98
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e1e:	bf00      	nop
 8007e20:	00000000 	.word	0x00000000
 8007e24:	40000000 	.word	0x40000000
 8007e28:	20000860 	.word	0x20000860
 8007e2c:	20000848 	.word	0x20000848
 8007e30:	20000880 	.word	0x20000880
 8007e34:	20000878 	.word	0x20000878
 8007e38:	20000840 	.word	0x20000840
 8007e3c:	20000858 	.word	0x20000858
 8007e40:	20000868 	.word	0x20000868
 8007e44:	20000850 	.word	0x20000850
 8007e48:	20000838 	.word	0x20000838
 8007e4c:	00000000 	.word	0x00000000

08007e50 <setProfilTimer>:


void setProfilTimer(void){
 8007e50:	b5b0      	push	{r4, r5, r7, lr}
 8007e52:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8007e54:	4bb8      	ldr	r3, [pc, #736]	; (8008138 <setProfilTimer+0x2e8>)
 8007e56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007e5a:	a3b3      	add	r3, pc, #716	; (adr r3, 8008128 <setProfilTimer+0x2d8>)
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f7f8 fbd2 	bl	8000608 <__aeabi_dmul>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	49b3      	ldr	r1, [pc, #716]	; (8008138 <setProfilTimer+0x2e8>)
 8007e6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8007e6e:	4bb3      	ldr	r3, [pc, #716]	; (800813c <setProfilTimer+0x2ec>)
 8007e70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007e74:	a3ac      	add	r3, pc, #688	; (adr r3, 8008128 <setProfilTimer+0x2d8>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 fbc5 	bl	8000608 <__aeabi_dmul>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	49ae      	ldr	r1, [pc, #696]	; (800813c <setProfilTimer+0x2ec>)
 8007e84:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8007e88:	4bad      	ldr	r3, [pc, #692]	; (8008140 <setProfilTimer+0x2f0>)
 8007e8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008128 <setProfilTimer+0x2d8>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	49a8      	ldr	r1, [pc, #672]	; (8008140 <setProfilTimer+0x2f0>)
 8007e9e:	e9c1 2304 	strd	r2, r3, [r1, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8007ea2:	4ba8      	ldr	r3, [pc, #672]	; (8008144 <setProfilTimer+0x2f4>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f8 fb34 	bl	8000514 <__aeabi_ui2d>
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	4ba5      	ldr	r3, [pc, #660]	; (8008148 <setProfilTimer+0x2f8>)
 8007eb2:	f7f8 f9f3 	bl	800029c <__adddf3>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	a19d      	add	r1, pc, #628	; (adr r1, 8008130 <setProfilTimer+0x2e0>)
 8007ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec0:	f7f8 fccc 	bl	800085c <__aeabi_ddiv>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	461d      	mov	r5, r3
 8007ecc:	4b9a      	ldr	r3, [pc, #616]	; (8008138 <setProfilTimer+0x2e8>)
 8007ece:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	4b9d      	ldr	r3, [pc, #628]	; (800814c <setProfilTimer+0x2fc>)
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	f04f 0000 	mov.w	r0, #0
 8007ee4:	499a      	ldr	r1, [pc, #616]	; (8008150 <setProfilTimer+0x300>)
 8007ee6:	f7f8 fcb9 	bl	800085c <__aeabi_ddiv>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4610      	mov	r0, r2
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	4b91      	ldr	r3, [pc, #580]	; (8008148 <setProfilTimer+0x2f8>)
 8007f04:	f7f8 f9c8 	bl	8000298 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f7f8 fe2a 	bl	8000b68 <__aeabi_d2uiz>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7f8 fafc 	bl	8000514 <__aeabi_ui2d>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	498c      	ldr	r1, [pc, #560]	; (8008154 <setProfilTimer+0x304>)
 8007f22:	e9c1 2300 	strd	r2, r3, [r1]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8007f26:	4b87      	ldr	r3, [pc, #540]	; (8008144 <setProfilTimer+0x2f4>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 faf2 	bl	8000514 <__aeabi_ui2d>
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	4b84      	ldr	r3, [pc, #528]	; (8008148 <setProfilTimer+0x2f8>)
 8007f36:	f7f8 f9b1 	bl	800029c <__adddf3>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	a17c      	add	r1, pc, #496	; (adr r1, 8008130 <setProfilTimer+0x2e0>)
 8007f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f44:	f7f8 fc8a 	bl	800085c <__aeabi_ddiv>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	461d      	mov	r5, r3
 8007f50:	4b7a      	ldr	r3, [pc, #488]	; (800813c <setProfilTimer+0x2ec>)
 8007f52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	4b7c      	ldr	r3, [pc, #496]	; (800814c <setProfilTimer+0x2fc>)
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	4979      	ldr	r1, [pc, #484]	; (8008150 <setProfilTimer+0x300>)
 8007f6a:	f7f8 fc77 	bl	800085c <__aeabi_ddiv>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fb47 	bl	8000608 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	4b70      	ldr	r3, [pc, #448]	; (8008148 <setProfilTimer+0x2f8>)
 8007f88:	f7f8 f986 	bl	8000298 <__aeabi_dsub>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f7f8 fde8 	bl	8000b68 <__aeabi_d2uiz>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 faba 	bl	8000514 <__aeabi_ui2d>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	496b      	ldr	r1, [pc, #428]	; (8008154 <setProfilTimer+0x304>)
 8007fa6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    period[2] = COUNTERPERIOD(motor3.rpm);
 8007faa:	4b66      	ldr	r3, [pc, #408]	; (8008144 <setProfilTimer+0x2f4>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f8 fab0 	bl	8000514 <__aeabi_ui2d>
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	4b63      	ldr	r3, [pc, #396]	; (8008148 <setProfilTimer+0x2f8>)
 8007fba:	f7f8 f96f 	bl	800029c <__adddf3>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	a15b      	add	r1, pc, #364	; (adr r1, 8008130 <setProfilTimer+0x2e0>)
 8007fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc8:	f7f8 fc48 	bl	800085c <__aeabi_ddiv>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	461d      	mov	r5, r3
 8007fd4:	4b5a      	ldr	r3, [pc, #360]	; (8008140 <setProfilTimer+0x2f0>)
 8007fd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	4b5b      	ldr	r3, [pc, #364]	; (800814c <setProfilTimer+0x2fc>)
 8007fe0:	f7f8 fb12 	bl	8000608 <__aeabi_dmul>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	f04f 0000 	mov.w	r0, #0
 8007fec:	4958      	ldr	r1, [pc, #352]	; (8008150 <setProfilTimer+0x300>)
 8007fee:	f7f8 fc35 	bl	800085c <__aeabi_ddiv>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 fb05 	bl	8000608 <__aeabi_dmul>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4610      	mov	r0, r2
 8008004:	4619      	mov	r1, r3
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	4b4f      	ldr	r3, [pc, #316]	; (8008148 <setProfilTimer+0x2f8>)
 800800c:	f7f8 f944 	bl	8000298 <__aeabi_dsub>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4610      	mov	r0, r2
 8008016:	4619      	mov	r1, r3
 8008018:	f7f8 fda6 	bl	8000b68 <__aeabi_d2uiz>
 800801c:	4603      	mov	r3, r0
 800801e:	4618      	mov	r0, r3
 8008020:	f7f8 fa78 	bl	8000514 <__aeabi_ui2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	494a      	ldr	r1, [pc, #296]	; (8008154 <setProfilTimer+0x304>)
 800802a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	*/

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim1,period[0]);
 800802e:	4b49      	ldr	r3, [pc, #292]	; (8008154 <setProfilTimer+0x304>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	4948      	ldr	r1, [pc, #288]	; (8008158 <setProfilTimer+0x308>)
 8008036:	680c      	ldr	r4, [r1, #0]
 8008038:	4610      	mov	r0, r2
 800803a:	4619      	mov	r1, r3
 800803c:	f7f8 fd94 	bl	8000b68 <__aeabi_d2uiz>
 8008040:	4603      	mov	r3, r0
 8008042:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008044:	4b43      	ldr	r3, [pc, #268]	; (8008154 <setProfilTimer+0x304>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	f7f8 fd8b 	bl	8000b68 <__aeabi_d2uiz>
 8008052:	4603      	mov	r3, r0
 8008054:	4a40      	ldr	r2, [pc, #256]	; (8008158 <setProfilTimer+0x308>)
 8008056:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,period[1]);
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <setProfilTimer+0x304>)
 800805a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800805e:	493f      	ldr	r1, [pc, #252]	; (800815c <setProfilTimer+0x30c>)
 8008060:	680c      	ldr	r4, [r1, #0]
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	f7f8 fd7f 	bl	8000b68 <__aeabi_d2uiz>
 800806a:	4603      	mov	r3, r0
 800806c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800806e:	4b39      	ldr	r3, [pc, #228]	; (8008154 <setProfilTimer+0x304>)
 8008070:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008074:	4610      	mov	r0, r2
 8008076:	4619      	mov	r1, r3
 8008078:	f7f8 fd76 	bl	8000b68 <__aeabi_d2uiz>
 800807c:	4603      	mov	r3, r0
 800807e:	4a37      	ldr	r2, [pc, #220]	; (800815c <setProfilTimer+0x30c>)
 8008080:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,period[2]);
 8008082:	4b34      	ldr	r3, [pc, #208]	; (8008154 <setProfilTimer+0x304>)
 8008084:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008088:	4935      	ldr	r1, [pc, #212]	; (8008160 <setProfilTimer+0x310>)
 800808a:	680c      	ldr	r4, [r1, #0]
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	f7f8 fd6a 	bl	8000b68 <__aeabi_d2uiz>
 8008094:	4603      	mov	r3, r0
 8008096:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008098:	4b2e      	ldr	r3, [pc, #184]	; (8008154 <setProfilTimer+0x304>)
 800809a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800809e:	4610      	mov	r0, r2
 80080a0:	4619      	mov	r1, r3
 80080a2:	f7f8 fd61 	bl	8000b68 <__aeabi_d2uiz>
 80080a6:	4603      	mov	r3, r0
 80080a8:	4a2d      	ldr	r2, [pc, #180]	; (8008160 <setProfilTimer+0x310>)
 80080aa:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 80080ac:	4b25      	ldr	r3, [pc, #148]	; (8008144 <setProfilTimer+0x2f4>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f8 fa2f 	bl	8000514 <__aeabi_ui2d>
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080be:	f7f8 fbcd 	bl	800085c <__aeabi_ddiv>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4c1f      	ldr	r4, [pc, #124]	; (8008144 <setProfilTimer+0x2f4>)
 80080c8:	4610      	mov	r0, r2
 80080ca:	4619      	mov	r1, r3
 80080cc:	f7f8 fd4c 	bl	8000b68 <__aeabi_d2uiz>
 80080d0:	4603      	mov	r3, r0
 80080d2:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 80080d4:	4b23      	ldr	r3, [pc, #140]	; (8008164 <setProfilTimer+0x314>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f8 fa1b 	bl	8000514 <__aeabi_ui2d>
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080e6:	f7f8 fbb9 	bl	800085c <__aeabi_ddiv>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4c1d      	ldr	r4, [pc, #116]	; (8008164 <setProfilTimer+0x314>)
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f7f8 fd38 	bl	8000b68 <__aeabi_d2uiz>
 80080f8:	4603      	mov	r3, r0
 80080fa:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 80080fc:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <setProfilTimer+0x318>)
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	4618      	mov	r0, r3
 8008102:	f7f8 fa07 	bl	8000514 <__aeabi_ui2d>
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800810e:	f7f8 fba5 	bl	800085c <__aeabi_ddiv>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4c14      	ldr	r4, [pc, #80]	; (8008168 <setProfilTimer+0x318>)
 8008118:	4610      	mov	r0, r2
 800811a:	4619      	mov	r1, r3
 800811c:	f7f8 fd24 	bl	8000b68 <__aeabi_d2uiz>
 8008120:	4603      	mov	r3, r0
 8008122:	6363      	str	r3, [r4, #52]	; 0x34


}
 8008124:	bf00      	nop
 8008126:	bdb0      	pop	{r4, r5, r7, pc}
 8008128:	66ed2a99 	.word	0x66ed2a99
 800812c:	4023193d 	.word	0x4023193d
 8008130:	00000000 	.word	0x00000000
 8008134:	418e8480 	.word	0x418e8480
 8008138:	200005d0 	.word	0x200005d0
 800813c:	20000618 	.word	0x20000618
 8008140:	20000660 	.word	0x20000660
 8008144:	40010000 	.word	0x40010000
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	40bf4000 	.word	0x40bf4000
 8008150:	404e0000 	.word	0x404e0000
 8008154:	20000800 	.word	0x20000800
 8008158:	20000348 	.word	0x20000348
 800815c:	200003d8 	.word	0x200003d8
 8008160:	20000420 	.word	0x20000420
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800

0800816c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800816c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008170:	480d      	ldr	r0, [pc, #52]	; (80081a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008172:	490e      	ldr	r1, [pc, #56]	; (80081ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008174:	4a0e      	ldr	r2, [pc, #56]	; (80081b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008178:	e002      	b.n	8008180 <LoopCopyDataInit>

0800817a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800817a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800817c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800817e:	3304      	adds	r3, #4

08008180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008184:	d3f9      	bcc.n	800817a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008186:	4a0b      	ldr	r2, [pc, #44]	; (80081b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008188:	4c0b      	ldr	r4, [pc, #44]	; (80081b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800818a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800818c:	e001      	b.n	8008192 <LoopFillZerobss>

0800818e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800818e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008190:	3204      	adds	r2, #4

08008192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008194:	d3fb      	bcc.n	800818e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008196:	f7fd fc93 	bl	8005ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800819a:	f003 ff0f 	bl	800bfbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800819e:	f7fb fa15 	bl	80035cc <main>
  bx  lr    
 80081a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80081a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80081a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081ac:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80081b0:	080105a0 	.word	0x080105a0
  ldr r2, =_sbss
 80081b4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80081b8:	2000089c 	.word	0x2000089c

080081bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081bc:	e7fe      	b.n	80081bc <ADC_IRQHandler>
	...

080081c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80081c4:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <HAL_Init+0x40>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a0d      	ldr	r2, [pc, #52]	; (8008200 <HAL_Init+0x40>)
 80081ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <HAL_Init+0x40>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a0a      	ldr	r2, [pc, #40]	; (8008200 <HAL_Init+0x40>)
 80081d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_Init+0x40>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a07      	ldr	r2, [pc, #28]	; (8008200 <HAL_Init+0x40>)
 80081e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081e8:	2003      	movs	r0, #3
 80081ea:	f000 f973 	bl	80084d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081ee:	2000      	movs	r0, #0
 80081f0:	f000 f808 	bl	8008204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081f4:	f7fd f884 	bl	8005300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40023c00 	.word	0x40023c00

08008204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <HAL_InitTick+0x54>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b12      	ldr	r3, [pc, #72]	; (800825c <HAL_InitTick+0x58>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	4619      	mov	r1, r3
 8008216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800821a:	fbb3 f3f1 	udiv	r3, r3, r1
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	4618      	mov	r0, r3
 8008224:	f000 f999 	bl	800855a <HAL_SYSTICK_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e00e      	b.n	8008250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d80a      	bhi.n	800824e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008238:	2200      	movs	r2, #0
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	f000 f953 	bl	80084ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008244:	4a06      	ldr	r2, [pc, #24]	; (8008260 <HAL_InitTick+0x5c>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e000      	b.n	8008250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000058 	.word	0x20000058
 800825c:	20000060 	.word	0x20000060
 8008260:	2000005c 	.word	0x2000005c

08008264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <HAL_IncTick+0x20>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	4b06      	ldr	r3, [pc, #24]	; (8008288 <HAL_IncTick+0x24>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4413      	add	r3, r2
 8008274:	4a04      	ldr	r2, [pc, #16]	; (8008288 <HAL_IncTick+0x24>)
 8008276:	6013      	str	r3, [r2, #0]
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000060 	.word	0x20000060
 8008288:	20000888 	.word	0x20000888

0800828c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return uwTick;
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <HAL_GetTick+0x14>)
 8008292:	681b      	ldr	r3, [r3, #0]
}
 8008294:	4618      	mov	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000888 	.word	0x20000888

080082a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082ac:	f7ff ffee 	bl	800828c <HAL_GetTick>
 80082b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d005      	beq.n	80082ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082be:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_Delay+0x44>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80082ca:	bf00      	nop
 80082cc:	f7ff ffde 	bl	800828c <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d8f7      	bhi.n	80082cc <HAL_Delay+0x28>
  {
  }
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000060 	.word	0x20000060

080082ec <__NVIC_SetPriorityGrouping>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082fc:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <__NVIC_SetPriorityGrouping+0x44>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008308:	4013      	ands	r3, r2
 800830a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800831e:	4a04      	ldr	r2, [pc, #16]	; (8008330 <__NVIC_SetPriorityGrouping+0x44>)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	60d3      	str	r3, [r2, #12]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	e000ed00 	.word	0xe000ed00

08008334 <__NVIC_GetPriorityGrouping>:
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <__NVIC_GetPriorityGrouping+0x18>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	0a1b      	lsrs	r3, r3, #8
 800833e:	f003 0307 	and.w	r3, r3, #7
}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	e000ed00 	.word	0xe000ed00

08008350 <__NVIC_EnableIRQ>:
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800835a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835e:	2b00      	cmp	r3, #0
 8008360:	db0b      	blt.n	800837a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	f003 021f 	and.w	r2, r3, #31
 8008368:	4907      	ldr	r1, [pc, #28]	; (8008388 <__NVIC_EnableIRQ+0x38>)
 800836a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	2001      	movs	r0, #1
 8008372:	fa00 f202 	lsl.w	r2, r0, r2
 8008376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	e000e100 	.word	0xe000e100

0800838c <__NVIC_DisableIRQ>:
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db12      	blt.n	80083c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	f003 021f 	and.w	r2, r3, #31
 80083a4:	490a      	ldr	r1, [pc, #40]	; (80083d0 <__NVIC_DisableIRQ+0x44>)
 80083a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2001      	movs	r0, #1
 80083ae:	fa00 f202 	lsl.w	r2, r0, r2
 80083b2:	3320      	adds	r3, #32
 80083b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083b8:	f3bf 8f4f 	dsb	sy
}
 80083bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083be:	f3bf 8f6f 	isb	sy
}
 80083c2:	bf00      	nop
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	e000e100 	.word	0xe000e100

080083d4 <__NVIC_SetPriority>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db0a      	blt.n	80083fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	490c      	ldr	r1, [pc, #48]	; (8008420 <__NVIC_SetPriority+0x4c>)
 80083ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083f2:	0112      	lsls	r2, r2, #4
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	440b      	add	r3, r1
 80083f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083fc:	e00a      	b.n	8008414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	4908      	ldr	r1, [pc, #32]	; (8008424 <__NVIC_SetPriority+0x50>)
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	3b04      	subs	r3, #4
 800840c:	0112      	lsls	r2, r2, #4
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	440b      	add	r3, r1
 8008412:	761a      	strb	r2, [r3, #24]
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	e000e100 	.word	0xe000e100
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <NVIC_EncodePriority>:
{
 8008428:	b480      	push	{r7}
 800842a:	b089      	sub	sp, #36	; 0x24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f1c3 0307 	rsb	r3, r3, #7
 8008442:	2b04      	cmp	r3, #4
 8008444:	bf28      	it	cs
 8008446:	2304      	movcs	r3, #4
 8008448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	3304      	adds	r3, #4
 800844e:	2b06      	cmp	r3, #6
 8008450:	d902      	bls.n	8008458 <NVIC_EncodePriority+0x30>
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	3b03      	subs	r3, #3
 8008456:	e000      	b.n	800845a <NVIC_EncodePriority+0x32>
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800845c:	f04f 32ff 	mov.w	r2, #4294967295
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	43da      	mvns	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	401a      	ands	r2, r3
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008470:	f04f 31ff 	mov.w	r1, #4294967295
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	fa01 f303 	lsl.w	r3, r1, r3
 800847a:	43d9      	mvns	r1, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008480:	4313      	orrs	r3, r2
}
 8008482:	4618      	mov	r0, r3
 8008484:	3724      	adds	r7, #36	; 0x24
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3b01      	subs	r3, #1
 800849c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084a0:	d301      	bcc.n	80084a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084a2:	2301      	movs	r3, #1
 80084a4:	e00f      	b.n	80084c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084a6:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <SysTick_Config+0x40>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084ae:	210f      	movs	r1, #15
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	f7ff ff8e 	bl	80083d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <SysTick_Config+0x40>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084be:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <SysTick_Config+0x40>)
 80084c0:	2207      	movs	r2, #7
 80084c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	e000e010 	.word	0xe000e010

080084d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ff05 	bl	80082ec <__NVIC_SetPriorityGrouping>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	4603      	mov	r3, r0
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084fc:	f7ff ff1a 	bl	8008334 <__NVIC_GetPriorityGrouping>
 8008500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	6978      	ldr	r0, [r7, #20]
 8008508:	f7ff ff8e 	bl	8008428 <NVIC_EncodePriority>
 800850c:	4602      	mov	r2, r0
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff ff5d 	bl	80083d4 <__NVIC_SetPriority>
}
 800851a:	bf00      	nop
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	4603      	mov	r3, r0
 800852a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800852c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff ff0d 	bl	8008350 <__NVIC_EnableIRQ>
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	4603      	mov	r3, r0
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff1d 	bl	800838c <__NVIC_DisableIRQ>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff ff94 	bl	8008490 <SysTick_Config>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008580:	f7ff fe84 	bl	800828c <HAL_GetTick>
 8008584:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d008      	beq.n	80085a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2280      	movs	r2, #128	; 0x80
 8008596:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e052      	b.n	800864a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0216 	bic.w	r2, r2, #22
 80085b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d103      	bne.n	80085d4 <HAL_DMA_Abort+0x62>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0208 	bic.w	r2, r2, #8
 80085e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0201 	bic.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085f4:	e013      	b.n	800861e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085f6:	f7ff fe49 	bl	800828c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b05      	cmp	r3, #5
 8008602:	d90c      	bls.n	800861e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2203      	movs	r2, #3
 800860e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e015      	b.n	800864a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e4      	bne.n	80085f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008630:	223f      	movs	r2, #63	; 0x3f
 8008632:	409a      	lsls	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d004      	beq.n	8008670 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2280      	movs	r2, #128	; 0x80
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e00c      	b.n	800868a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2205      	movs	r2, #5
 8008674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0201 	bic.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e159      	b.n	8008968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086b4:	2201      	movs	r2, #1
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4013      	ands	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	f040 8148 	bne.w	8008962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d005      	beq.n	80086ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d130      	bne.n	800874c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	2203      	movs	r2, #3
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	43db      	mvns	r3, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4013      	ands	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4313      	orrs	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008720:	2201      	movs	r2, #1
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	43db      	mvns	r3, r3
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	4013      	ands	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	091b      	lsrs	r3, r3, #4
 8008736:	f003 0201 	and.w	r2, r3, #1
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4313      	orrs	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d017      	beq.n	8008788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	2203      	movs	r2, #3
 8008764:	fa02 f303 	lsl.w	r3, r2, r3
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4313      	orrs	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d123      	bne.n	80087dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	08da      	lsrs	r2, r3, #3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3208      	adds	r2, #8
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	220f      	movs	r2, #15
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	43db      	mvns	r3, r3
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	4013      	ands	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	08da      	lsrs	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3208      	adds	r2, #8
 80087d6:	69b9      	ldr	r1, [r7, #24]
 80087d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	2203      	movs	r2, #3
 80087e8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	4013      	ands	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f003 0203 	and.w	r2, r3, #3
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a2 	beq.w	8008962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	4b57      	ldr	r3, [pc, #348]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008826:	4a56      	ldr	r2, [pc, #344]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800882c:	6453      	str	r3, [r2, #68]	; 0x44
 800882e:	4b54      	ldr	r3, [pc, #336]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800883a:	4a52      	ldr	r2, [pc, #328]	; (8008984 <HAL_GPIO_Init+0x2ec>)
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	3302      	adds	r3, #2
 8008842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	220f      	movs	r2, #15
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	43db      	mvns	r3, r3
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	4013      	ands	r3, r2
 800885c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a49      	ldr	r2, [pc, #292]	; (8008988 <HAL_GPIO_Init+0x2f0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d019      	beq.n	800889a <HAL_GPIO_Init+0x202>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a48      	ldr	r2, [pc, #288]	; (800898c <HAL_GPIO_Init+0x2f4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_GPIO_Init+0x1fe>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a47      	ldr	r2, [pc, #284]	; (8008990 <HAL_GPIO_Init+0x2f8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00d      	beq.n	8008892 <HAL_GPIO_Init+0x1fa>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a46      	ldr	r2, [pc, #280]	; (8008994 <HAL_GPIO_Init+0x2fc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <HAL_GPIO_Init+0x1f6>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a45      	ldr	r2, [pc, #276]	; (8008998 <HAL_GPIO_Init+0x300>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d101      	bne.n	800888a <HAL_GPIO_Init+0x1f2>
 8008886:	2304      	movs	r3, #4
 8008888:	e008      	b.n	800889c <HAL_GPIO_Init+0x204>
 800888a:	2307      	movs	r3, #7
 800888c:	e006      	b.n	800889c <HAL_GPIO_Init+0x204>
 800888e:	2303      	movs	r3, #3
 8008890:	e004      	b.n	800889c <HAL_GPIO_Init+0x204>
 8008892:	2302      	movs	r3, #2
 8008894:	e002      	b.n	800889c <HAL_GPIO_Init+0x204>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <HAL_GPIO_Init+0x204>
 800889a:	2300      	movs	r3, #0
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	f002 0203 	and.w	r2, r2, #3
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	4093      	lsls	r3, r2
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ac:	4935      	ldr	r1, [pc, #212]	; (8008984 <HAL_GPIO_Init+0x2ec>)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	089b      	lsrs	r3, r3, #2
 80088b2:	3302      	adds	r3, #2
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ba:	4b38      	ldr	r3, [pc, #224]	; (800899c <HAL_GPIO_Init+0x304>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4013      	ands	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088de:	4a2f      	ldr	r2, [pc, #188]	; (800899c <HAL_GPIO_Init+0x304>)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088e4:	4b2d      	ldr	r3, [pc, #180]	; (800899c <HAL_GPIO_Init+0x304>)
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	4013      	ands	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008908:	4a24      	ldr	r2, [pc, #144]	; (800899c <HAL_GPIO_Init+0x304>)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <HAL_GPIO_Init+0x304>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	43db      	mvns	r3, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4013      	ands	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_GPIO_Init+0x304>)
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_GPIO_Init+0x304>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	43db      	mvns	r3, r3
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	4013      	ands	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800895c:	4a0f      	ldr	r2, [pc, #60]	; (800899c <HAL_GPIO_Init+0x304>)
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	3301      	adds	r3, #1
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	f67f aea2 	bls.w	80086b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3724      	adds	r7, #36	; 0x24
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800
 8008984:	40013800 	.word	0x40013800
 8008988:	40020000 	.word	0x40020000
 800898c:	40020400 	.word	0x40020400
 8008990:	40020800 	.word	0x40020800
 8008994:	40020c00 	.word	0x40020c00
 8008998:	40021000 	.word	0x40021000
 800899c:	40013c00 	.word	0x40013c00

080089a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
 80089bc:	e001      	b.n	80089c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	807b      	strh	r3, [r7, #2]
 80089dc:	4613      	mov	r3, r2
 80089de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089e0:	787b      	ldrb	r3, [r7, #1]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089e6:	887a      	ldrh	r2, [r7, #2]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80089ec:	e003      	b.n	80089f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80089ee:	887b      	ldrh	r3, [r7, #2]
 80089f0:	041a      	lsls	r2, r3, #16
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	619a      	str	r2, [r3, #24]
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a10:	695a      	ldr	r2, [r3, #20]
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	4013      	ands	r3, r2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a1a:	4a05      	ldr	r2, [pc, #20]	; (8008a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fb fa84 	bl	8003f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40013c00 	.word	0x40013c00

08008a34 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008a44:	f000 f808 	bl	8008a58 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a4e:	615a      	str	r2, [r3, #20]
  }
}
 8008a50:	bf00      	nop
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40013c00 	.word	0x40013c00

08008a58 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008a5c:	bf00      	nop
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e267      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d075      	beq.n	8008b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a86:	4b88      	ldr	r3, [pc, #544]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d00c      	beq.n	8008aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a92:	4b85      	ldr	r3, [pc, #532]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d112      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a9e:	4b82      	ldr	r3, [pc, #520]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aaa:	d10b      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aac:	4b7e      	ldr	r3, [pc, #504]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05b      	beq.n	8008b70 <HAL_RCC_OscConfig+0x108>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d157      	bne.n	8008b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e242      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008acc:	d106      	bne.n	8008adc <HAL_RCC_OscConfig+0x74>
 8008ace:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a75      	ldr	r2, [pc, #468]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e01d      	b.n	8008b18 <HAL_RCC_OscConfig+0xb0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ae4:	d10c      	bne.n	8008b00 <HAL_RCC_OscConfig+0x98>
 8008ae6:	4b70      	ldr	r3, [pc, #448]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a6f      	ldr	r2, [pc, #444]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	4b6d      	ldr	r3, [pc, #436]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a6c      	ldr	r2, [pc, #432]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e00b      	b.n	8008b18 <HAL_RCC_OscConfig+0xb0>
 8008b00:	4b69      	ldr	r3, [pc, #420]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a68      	ldr	r2, [pc, #416]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	4b66      	ldr	r3, [pc, #408]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a65      	ldr	r2, [pc, #404]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d013      	beq.n	8008b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7ff fbb4 	bl	800828c <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b28:	f7ff fbb0 	bl	800828c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	; 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e207      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3a:	4b5b      	ldr	r3, [pc, #364]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCC_OscConfig+0xc0>
 8008b46:	e014      	b.n	8008b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b48:	f7ff fba0 	bl	800828c <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b50:	f7ff fb9c 	bl	800828c <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	; 0x64
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e1f3      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b62:	4b51      	ldr	r3, [pc, #324]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0xe8>
 8008b6e:	e000      	b.n	8008b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d063      	beq.n	8008c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b7e:	4b4a      	ldr	r3, [pc, #296]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d11c      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b96:	4b44      	ldr	r3, [pc, #272]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d116      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba2:	4b41      	ldr	r3, [pc, #260]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_RCC_OscConfig+0x152>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e1c7      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bba:	4b3b      	ldr	r3, [pc, #236]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	4937      	ldr	r1, [pc, #220]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bce:	e03a      	b.n	8008c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d020      	beq.n	8008c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd8:	4b34      	ldr	r3, [pc, #208]	; (8008cac <HAL_RCC_OscConfig+0x244>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bde:	f7ff fb55 	bl	800828c <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008be6:	f7ff fb51 	bl	800828c <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e1a8      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf8:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c04:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4925      	ldr	r1, [pc, #148]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	e015      	b.n	8008c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <HAL_RCC_OscConfig+0x244>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c20:	f7ff fb34 	bl	800828c <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c28:	f7ff fb30 	bl	800828c <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e187      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d036      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <HAL_RCC_OscConfig+0x248>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c60:	f7ff fb14 	bl	800828c <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c68:	f7ff fb10 	bl	800828c <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e167      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0x200>
 8008c86:	e01b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_OscConfig+0x248>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c8e:	f7ff fafd 	bl	800828c <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c94:	e00e      	b.n	8008cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c96:	f7ff faf9 	bl	800828c <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d907      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e150      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	42470000 	.word	0x42470000
 8008cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb4:	4b88      	ldr	r3, [pc, #544]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ea      	bne.n	8008c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8097 	beq.w	8008dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd2:	4b81      	ldr	r3, [pc, #516]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10f      	bne.n	8008cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	4b7d      	ldr	r3, [pc, #500]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	4a7c      	ldr	r2, [pc, #496]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cec:	6413      	str	r3, [r2, #64]	; 0x40
 8008cee:	4b7a      	ldr	r3, [pc, #488]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cfe:	4b77      	ldr	r3, [pc, #476]	; (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d118      	bne.n	8008d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d0a:	4b74      	ldr	r3, [pc, #464]	; (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a73      	ldr	r2, [pc, #460]	; (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d16:	f7ff fab9 	bl	800828c <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d1e:	f7ff fab5 	bl	800828c <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e10c      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	4b6a      	ldr	r3, [pc, #424]	; (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d106      	bne.n	8008d52 <HAL_RCC_OscConfig+0x2ea>
 8008d44:	4b64      	ldr	r3, [pc, #400]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	4a63      	ldr	r2, [pc, #396]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d50:	e01c      	b.n	8008d8c <HAL_RCC_OscConfig+0x324>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d10c      	bne.n	8008d74 <HAL_RCC_OscConfig+0x30c>
 8008d5a:	4b5f      	ldr	r3, [pc, #380]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	4a5e      	ldr	r2, [pc, #376]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d60:	f043 0304 	orr.w	r3, r3, #4
 8008d64:	6713      	str	r3, [r2, #112]	; 0x70
 8008d66:	4b5c      	ldr	r3, [pc, #368]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	4a5b      	ldr	r2, [pc, #364]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d6c:	f043 0301 	orr.w	r3, r3, #1
 8008d70:	6713      	str	r3, [r2, #112]	; 0x70
 8008d72:	e00b      	b.n	8008d8c <HAL_RCC_OscConfig+0x324>
 8008d74:	4b58      	ldr	r3, [pc, #352]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	4a57      	ldr	r2, [pc, #348]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d80:	4b55      	ldr	r3, [pc, #340]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	4a54      	ldr	r2, [pc, #336]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d86:	f023 0304 	bic.w	r3, r3, #4
 8008d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d015      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d94:	f7ff fa7a 	bl	800828c <HAL_GetTick>
 8008d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9a:	e00a      	b.n	8008db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d9c:	f7ff fa76 	bl	800828c <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e0cb      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db2:	4b49      	ldr	r3, [pc, #292]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0ee      	beq.n	8008d9c <HAL_RCC_OscConfig+0x334>
 8008dbe:	e014      	b.n	8008dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dc0:	f7ff fa64 	bl	800828c <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dc8:	f7ff fa60 	bl	800828c <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e0b5      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dde:	4b3e      	ldr	r3, [pc, #248]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1ee      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df0:	4b39      	ldr	r3, [pc, #228]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	4a38      	ldr	r2, [pc, #224]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80a1 	beq.w	8008f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e06:	4b34      	ldr	r3, [pc, #208]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d05c      	beq.n	8008ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d141      	bne.n	8008e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e1a:	4b31      	ldr	r3, [pc, #196]	; (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e20:	f7ff fa34 	bl	800828c <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e28:	f7ff fa30 	bl	800828c <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e087      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e3a:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	019b      	lsls	r3, r3, #6
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	491b      	ldr	r1, [pc, #108]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e76:	f7ff fa09 	bl	800828c <HAL_GetTick>
 8008e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e7e:	f7ff fa05 	bl	800828c <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e05c      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0f0      	beq.n	8008e7e <HAL_RCC_OscConfig+0x416>
 8008e9c:	e054      	b.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9e:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea4:	f7ff f9f2 	bl	800828c <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eac:	f7ff f9ee 	bl	800828c <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e045      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x444>
 8008eca:	e03d      	b.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e038      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40007000 	.word	0x40007000
 8008ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <HAL_RCC_OscConfig+0x4ec>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d028      	beq.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d121      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d11a      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d111      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d107      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d001      	beq.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800

08008f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0cc      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b68      	ldr	r3, [pc, #416]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d90c      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b65      	ldr	r3, [pc, #404]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	4b63      	ldr	r3, [pc, #396]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0b8      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d020      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fac:	4b59      	ldr	r3, [pc, #356]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	4a58      	ldr	r2, [pc, #352]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fc4:	4b53      	ldr	r3, [pc, #332]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	4a52      	ldr	r2, [pc, #328]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd0:	4b50      	ldr	r3, [pc, #320]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	494d      	ldr	r1, [pc, #308]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d044      	beq.n	8009078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d107      	bne.n	8009006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff6:	4b47      	ldr	r3, [pc, #284]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d119      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e07f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d003      	beq.n	8009016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009012:	2b03      	cmp	r3, #3
 8009014:	d107      	bne.n	8009026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009016:	4b3f      	ldr	r3, [pc, #252]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e06f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009026:	4b3b      	ldr	r3, [pc, #236]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e067      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009036:	4b37      	ldr	r3, [pc, #220]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f023 0203 	bic.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4934      	ldr	r1, [pc, #208]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	4313      	orrs	r3, r2
 8009046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009048:	f7ff f920 	bl	800828c <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7ff f91c 	bl	800828c <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	; 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e04f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009066:	4b2b      	ldr	r3, [pc, #172]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 020c 	and.w	r2, r3, #12
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d1eb      	bne.n	8009050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009078:	4b25      	ldr	r3, [pc, #148]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d20c      	bcs.n	80090a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009086:	4b22      	ldr	r3, [pc, #136]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d001      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e032      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090ac:	4b19      	ldr	r3, [pc, #100]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4916      	ldr	r1, [pc, #88]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	490e      	ldr	r1, [pc, #56]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80090de:	f000 f821 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	490a      	ldr	r1, [pc, #40]	; (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 80090f0:	5ccb      	ldrb	r3, [r1, r3]
 80090f2:	fa22 f303 	lsr.w	r3, r2, r3
 80090f6:	4a09      	ldr	r2, [pc, #36]	; (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <HAL_RCC_ClockConfig+0x1c8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff f880 	bl	8008204 <HAL_InitTick>

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40023c00 	.word	0x40023c00
 8009114:	40023800 	.word	0x40023800
 8009118:	08010114 	.word	0x08010114
 800911c:	20000058 	.word	0x20000058
 8009120:	2000005c 	.word	0x2000005c

08009124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009128:	b094      	sub	sp, #80	; 0x50
 800912a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	647b      	str	r3, [r7, #68]	; 0x44
 8009130:	2300      	movs	r3, #0
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009134:	2300      	movs	r3, #0
 8009136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800913c:	4b79      	ldr	r3, [pc, #484]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 030c 	and.w	r3, r3, #12
 8009144:	2b08      	cmp	r3, #8
 8009146:	d00d      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x40>
 8009148:	2b08      	cmp	r3, #8
 800914a:	f200 80e1 	bhi.w	8009310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x34>
 8009152:	2b04      	cmp	r3, #4
 8009154:	d003      	beq.n	800915e <HAL_RCC_GetSysClockFreq+0x3a>
 8009156:	e0db      	b.n	8009310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009158:	4b73      	ldr	r3, [pc, #460]	; (8009328 <HAL_RCC_GetSysClockFreq+0x204>)
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800915c:	e0db      	b.n	8009316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800915e:	4b73      	ldr	r3, [pc, #460]	; (800932c <HAL_RCC_GetSysClockFreq+0x208>)
 8009160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009162:	e0d8      	b.n	8009316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009164:	4b6f      	ldr	r3, [pc, #444]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800916c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800916e:	4b6d      	ldr	r3, [pc, #436]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d063      	beq.n	8009242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800917a:	4b6a      	ldr	r3, [pc, #424]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	099b      	lsrs	r3, r3, #6
 8009180:	2200      	movs	r2, #0
 8009182:	63bb      	str	r3, [r7, #56]	; 0x38
 8009184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918c:	633b      	str	r3, [r7, #48]	; 0x30
 800918e:	2300      	movs	r3, #0
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
 8009192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009196:	4622      	mov	r2, r4
 8009198:	462b      	mov	r3, r5
 800919a:	f04f 0000 	mov.w	r0, #0
 800919e:	f04f 0100 	mov.w	r1, #0
 80091a2:	0159      	lsls	r1, r3, #5
 80091a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091a8:	0150      	lsls	r0, r2, #5
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4621      	mov	r1, r4
 80091b0:	1a51      	subs	r1, r2, r1
 80091b2:	6139      	str	r1, [r7, #16]
 80091b4:	4629      	mov	r1, r5
 80091b6:	eb63 0301 	sbc.w	r3, r3, r1
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091c8:	4659      	mov	r1, fp
 80091ca:	018b      	lsls	r3, r1, #6
 80091cc:	4651      	mov	r1, sl
 80091ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091d2:	4651      	mov	r1, sl
 80091d4:	018a      	lsls	r2, r1, #6
 80091d6:	4651      	mov	r1, sl
 80091d8:	ebb2 0801 	subs.w	r8, r2, r1
 80091dc:	4659      	mov	r1, fp
 80091de:	eb63 0901 	sbc.w	r9, r3, r1
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091f6:	4690      	mov	r8, r2
 80091f8:	4699      	mov	r9, r3
 80091fa:	4623      	mov	r3, r4
 80091fc:	eb18 0303 	adds.w	r3, r8, r3
 8009200:	60bb      	str	r3, [r7, #8]
 8009202:	462b      	mov	r3, r5
 8009204:	eb49 0303 	adc.w	r3, r9, r3
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009216:	4629      	mov	r1, r5
 8009218:	024b      	lsls	r3, r1, #9
 800921a:	4621      	mov	r1, r4
 800921c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009220:	4621      	mov	r1, r4
 8009222:	024a      	lsls	r2, r1, #9
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
 8009228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922a:	2200      	movs	r2, #0
 800922c:	62bb      	str	r3, [r7, #40]	; 0x28
 800922e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009234:	f7f7 fd08 	bl	8000c48 <__aeabi_uldivmod>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4613      	mov	r3, r2
 800923e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009240:	e058      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009242:	4b38      	ldr	r3, [pc, #224]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	099b      	lsrs	r3, r3, #6
 8009248:	2200      	movs	r2, #0
 800924a:	4618      	mov	r0, r3
 800924c:	4611      	mov	r1, r2
 800924e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009252:	623b      	str	r3, [r7, #32]
 8009254:	2300      	movs	r3, #0
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
 8009258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800925c:	4642      	mov	r2, r8
 800925e:	464b      	mov	r3, r9
 8009260:	f04f 0000 	mov.w	r0, #0
 8009264:	f04f 0100 	mov.w	r1, #0
 8009268:	0159      	lsls	r1, r3, #5
 800926a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800926e:	0150      	lsls	r0, r2, #5
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4641      	mov	r1, r8
 8009276:	ebb2 0a01 	subs.w	sl, r2, r1
 800927a:	4649      	mov	r1, r9
 800927c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	f04f 0300 	mov.w	r3, #0
 8009288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800928c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009294:	ebb2 040a 	subs.w	r4, r2, sl
 8009298:	eb63 050b 	sbc.w	r5, r3, fp
 800929c:	f04f 0200 	mov.w	r2, #0
 80092a0:	f04f 0300 	mov.w	r3, #0
 80092a4:	00eb      	lsls	r3, r5, #3
 80092a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092aa:	00e2      	lsls	r2, r4, #3
 80092ac:	4614      	mov	r4, r2
 80092ae:	461d      	mov	r5, r3
 80092b0:	4643      	mov	r3, r8
 80092b2:	18e3      	adds	r3, r4, r3
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	464b      	mov	r3, r9
 80092b8:	eb45 0303 	adc.w	r3, r5, r3
 80092bc:	607b      	str	r3, [r7, #4]
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092ca:	4629      	mov	r1, r5
 80092cc:	028b      	lsls	r3, r1, #10
 80092ce:	4621      	mov	r1, r4
 80092d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092d4:	4621      	mov	r1, r4
 80092d6:	028a      	lsls	r2, r1, #10
 80092d8:	4610      	mov	r0, r2
 80092da:	4619      	mov	r1, r3
 80092dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092de:	2200      	movs	r2, #0
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	61fa      	str	r2, [r7, #28]
 80092e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092e8:	f7f7 fcae 	bl	8000c48 <__aeabi_uldivmod>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4613      	mov	r3, r2
 80092f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <HAL_RCC_GetSysClockFreq+0x200>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	0c1b      	lsrs	r3, r3, #16
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	3301      	adds	r3, #1
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009308:	fbb2 f3f3 	udiv	r3, r2, r3
 800930c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800930e:	e002      	b.n	8009316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009310:	4b05      	ldr	r3, [pc, #20]	; (8009328 <HAL_RCC_GetSysClockFreq+0x204>)
 8009312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009318:	4618      	mov	r0, r3
 800931a:	3750      	adds	r7, #80	; 0x50
 800931c:	46bd      	mov	sp, r7
 800931e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009322:	bf00      	nop
 8009324:	40023800 	.word	0x40023800
 8009328:	00f42400 	.word	0x00f42400
 800932c:	007a1200 	.word	0x007a1200

08009330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009334:	4b03      	ldr	r3, [pc, #12]	; (8009344 <HAL_RCC_GetHCLKFreq+0x14>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000058 	.word	0x20000058

08009348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800934c:	f7ff fff0 	bl	8009330 <HAL_RCC_GetHCLKFreq>
 8009350:	4602      	mov	r2, r0
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	0a9b      	lsrs	r3, r3, #10
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	4903      	ldr	r1, [pc, #12]	; (800936c <HAL_RCC_GetPCLK1Freq+0x24>)
 800935e:	5ccb      	ldrb	r3, [r1, r3]
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009364:	4618      	mov	r0, r3
 8009366:	bd80      	pop	{r7, pc}
 8009368:	40023800 	.word	0x40023800
 800936c:	08010124 	.word	0x08010124

08009370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009374:	f7ff ffdc 	bl	8009330 <HAL_RCC_GetHCLKFreq>
 8009378:	4602      	mov	r2, r0
 800937a:	4b05      	ldr	r3, [pc, #20]	; (8009390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	0b5b      	lsrs	r3, r3, #13
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	4903      	ldr	r1, [pc, #12]	; (8009394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009386:	5ccb      	ldrb	r3, [r1, r3]
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800938c:	4618      	mov	r0, r3
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40023800 	.word	0x40023800
 8009394:	08010124 	.word	0x08010124

08009398 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d038      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093c0:	4b68      	ldr	r3, [pc, #416]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093c6:	f7fe ff61 	bl	800828c <HAL_GetTick>
 80093ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093cc:	e008      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80093ce:	f7fe ff5d 	bl	800828c <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d901      	bls.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e0bd      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093e0:	4b61      	ldr	r3, [pc, #388]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f0      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	019b      	lsls	r3, r3, #6
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	071b      	lsls	r3, r3, #28
 80093fe:	495a      	ldr	r1, [pc, #360]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009400:	4313      	orrs	r3, r2
 8009402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009406:	4b57      	ldr	r3, [pc, #348]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009408:	2201      	movs	r2, #1
 800940a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800940c:	f7fe ff3e 	bl	800828c <HAL_GetTick>
 8009410:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009412:	e008      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009414:	f7fe ff3a 	bl	800828c <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d901      	bls.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e09a      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009426:	4b50      	ldr	r3, [pc, #320]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 8083 	beq.w	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	4b48      	ldr	r3, [pc, #288]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	4a47      	ldr	r2, [pc, #284]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800944a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800944e:	6413      	str	r3, [r2, #64]	; 0x40
 8009450:	4b45      	ldr	r3, [pc, #276]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800945c:	4b43      	ldr	r3, [pc, #268]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a42      	ldr	r2, [pc, #264]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009466:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009468:	f7fe ff10 	bl	800828c <HAL_GetTick>
 800946c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800946e:	e008      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009470:	f7fe ff0c 	bl	800828c <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d901      	bls.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e06c      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009482:	4b3a      	ldr	r3, [pc, #232]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0f0      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800948e:	4b36      	ldr	r3, [pc, #216]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009496:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d02f      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d028      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ac:	4b2e      	ldr	r3, [pc, #184]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094b6:	4b2e      	ldr	r3, [pc, #184]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094b8:	2201      	movs	r2, #1
 80094ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094bc:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094c2:	4a29      	ldr	r2, [pc, #164]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094c8:	4b27      	ldr	r3, [pc, #156]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d114      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80094d4:	f7fe feda 	bl	800828c <HAL_GetTick>
 80094d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094da:	e00a      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094dc:	f7fe fed6 	bl	800828c <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e034      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094f2:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0ee      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800950a:	d10d      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800950c:	4b16      	ldr	r3, [pc, #88]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800951c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009520:	4911      	ldr	r1, [pc, #68]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009522:	4313      	orrs	r3, r2
 8009524:	608b      	str	r3, [r1, #8]
 8009526:	e005      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009528:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	4a0e      	ldr	r2, [pc, #56]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800952e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009532:	6093      	str	r3, [r2, #8]
 8009534:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009536:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009540:	4909      	ldr	r1, [pc, #36]	; (8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009542:	4313      	orrs	r3, r2
 8009544:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	7d1a      	ldrb	r2, [r3, #20]
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009558:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	42470068 	.word	0x42470068
 8009568:	40023800 	.word	0x40023800
 800956c:	40007000 	.word	0x40007000
 8009570:	42470e40 	.word	0x42470e40
 8009574:	424711e0 	.word	0x424711e0

08009578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e041      	b.n	800960e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fb fede 	bl	8005360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f000 ffce 	bl	800a558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b01      	cmp	r3, #1
 800962a:	d001      	beq.n	8009630 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e03c      	b.n	80096aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1e      	ldr	r2, [pc, #120]	; (80096b8 <HAL_TIM_Base_Start+0xa0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d018      	beq.n	8009674 <HAL_TIM_Base_Start+0x5c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d013      	beq.n	8009674 <HAL_TIM_Base_Start+0x5c>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1a      	ldr	r2, [pc, #104]	; (80096bc <HAL_TIM_Base_Start+0xa4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00e      	beq.n	8009674 <HAL_TIM_Base_Start+0x5c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a19      	ldr	r2, [pc, #100]	; (80096c0 <HAL_TIM_Base_Start+0xa8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d009      	beq.n	8009674 <HAL_TIM_Base_Start+0x5c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a17      	ldr	r2, [pc, #92]	; (80096c4 <HAL_TIM_Base_Start+0xac>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d004      	beq.n	8009674 <HAL_TIM_Base_Start+0x5c>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a16      	ldr	r2, [pc, #88]	; (80096c8 <HAL_TIM_Base_Start+0xb0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d111      	bne.n	8009698 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b06      	cmp	r3, #6
 8009684:	d010      	beq.n	80096a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f042 0201 	orr.w	r2, r2, #1
 8009694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009696:	e007      	b.n	80096a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40014000 	.word	0x40014000

080096cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6a1a      	ldr	r2, [r3, #32]
 80096da:	f241 1311 	movw	r3, #4369	; 0x1111
 80096de:	4013      	ands	r3, r2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10f      	bne.n	8009704 <HAL_TIM_Base_Stop+0x38>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a1a      	ldr	r2, [r3, #32]
 80096ea:	f240 4344 	movw	r3, #1092	; 0x444
 80096ee:	4013      	ands	r3, r2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d107      	bne.n	8009704 <HAL_TIM_Base_Stop+0x38>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 0201 	bic.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b01      	cmp	r3, #1
 800972e:	d001      	beq.n	8009734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e044      	b.n	80097be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1e      	ldr	r2, [pc, #120]	; (80097cc <HAL_TIM_Base_Start_IT+0xb0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x6c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800975e:	d013      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x6c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x6c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x6c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x6c>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a16      	ldr	r2, [pc, #88]	; (80097dc <HAL_TIM_Base_Start_IT+0xc0>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d111      	bne.n	80097ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b06      	cmp	r3, #6
 8009798:	d010      	beq.n	80097bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097aa:	e007      	b.n	80097bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0201 	orr.w	r2, r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40000400 	.word	0x40000400
 80097d4:	40000800 	.word	0x40000800
 80097d8:	40000c00 	.word	0x40000c00
 80097dc:	40014000 	.word	0x40014000

080097e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0201 	bic.w	r2, r2, #1
 80097f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10f      	bne.n	8009828 <HAL_TIM_Base_Stop_IT+0x48>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6a1a      	ldr	r2, [r3, #32]
 800980e:	f240 4344 	movw	r3, #1092	; 0x444
 8009812:	4013      	ands	r3, r2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d107      	bne.n	8009828 <HAL_TIM_Base_Stop_IT+0x48>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 0201 	bic.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e041      	b.n	80098d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f839 	bl	80098dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3304      	adds	r3, #4
 800987a:	4619      	mov	r1, r3
 800987c:	4610      	mov	r0, r2
 800987e:	f000 fe6b 	bl	800a558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <HAL_TIM_PWM_Start+0x24>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b01      	cmp	r3, #1
 800990a:	bf14      	ite	ne
 800990c:	2301      	movne	r3, #1
 800990e:	2300      	moveq	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	e022      	b.n	800995a <HAL_TIM_PWM_Start+0x6a>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b04      	cmp	r3, #4
 8009918:	d109      	bne.n	800992e <HAL_TIM_PWM_Start+0x3e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b01      	cmp	r3, #1
 8009924:	bf14      	ite	ne
 8009926:	2301      	movne	r3, #1
 8009928:	2300      	moveq	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	e015      	b.n	800995a <HAL_TIM_PWM_Start+0x6a>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b08      	cmp	r3, #8
 8009932:	d109      	bne.n	8009948 <HAL_TIM_PWM_Start+0x58>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e008      	b.n	800995a <HAL_TIM_PWM_Start+0x6a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	bf14      	ite	ne
 8009954:	2301      	movne	r3, #1
 8009956:	2300      	moveq	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e068      	b.n	8009a34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <HAL_TIM_PWM_Start+0x82>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2202      	movs	r2, #2
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009970:	e013      	b.n	800999a <HAL_TIM_PWM_Start+0xaa>
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b04      	cmp	r3, #4
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0x92>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009980:	e00b      	b.n	800999a <HAL_TIM_PWM_Start+0xaa>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b08      	cmp	r3, #8
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Start+0xa2>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009990:	e003      	b.n	800999a <HAL_TIM_PWM_Start+0xaa>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2201      	movs	r2, #1
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 f99c 	bl	800ace0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a23      	ldr	r2, [pc, #140]	; (8009a3c <HAL_TIM_PWM_Start+0x14c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d107      	bne.n	80099c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a1d      	ldr	r2, [pc, #116]	; (8009a3c <HAL_TIM_PWM_Start+0x14c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d018      	beq.n	80099fe <HAL_TIM_PWM_Start+0x10e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d4:	d013      	beq.n	80099fe <HAL_TIM_PWM_Start+0x10e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a19      	ldr	r2, [pc, #100]	; (8009a40 <HAL_TIM_PWM_Start+0x150>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00e      	beq.n	80099fe <HAL_TIM_PWM_Start+0x10e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a17      	ldr	r2, [pc, #92]	; (8009a44 <HAL_TIM_PWM_Start+0x154>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d009      	beq.n	80099fe <HAL_TIM_PWM_Start+0x10e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <HAL_TIM_PWM_Start+0x158>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d004      	beq.n	80099fe <HAL_TIM_PWM_Start+0x10e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a14      	ldr	r2, [pc, #80]	; (8009a4c <HAL_TIM_PWM_Start+0x15c>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d111      	bne.n	8009a22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b06      	cmp	r3, #6
 8009a0e:	d010      	beq.n	8009a32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0201 	orr.w	r2, r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a20:	e007      	b.n	8009a32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f042 0201 	orr.w	r2, r2, #1
 8009a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40000400 	.word	0x40000400
 8009a44:	40000800 	.word	0x40000800
 8009a48:	40000c00 	.word	0x40000c00
 8009a4c:	40014000 	.word	0x40014000

08009a50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 f93c 	bl	800ace0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a29      	ldr	r2, [pc, #164]	; (8009b14 <HAL_TIM_PWM_Stop+0xc4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d117      	bne.n	8009aa2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a1a      	ldr	r2, [r3, #32]
 8009a78:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10f      	bne.n	8009aa2 <HAL_TIM_PWM_Stop+0x52>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6a1a      	ldr	r2, [r3, #32]
 8009a88:	f240 4344 	movw	r3, #1092	; 0x444
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d107      	bne.n	8009aa2 <HAL_TIM_PWM_Stop+0x52>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aac:	4013      	ands	r3, r2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10f      	bne.n	8009ad2 <HAL_TIM_PWM_Stop+0x82>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6a1a      	ldr	r2, [r3, #32]
 8009ab8:	f240 4344 	movw	r3, #1092	; 0x444
 8009abc:	4013      	ands	r3, r2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d107      	bne.n	8009ad2 <HAL_TIM_PWM_Stop+0x82>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0201 	bic.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d104      	bne.n	8009ae2 <HAL_TIM_PWM_Stop+0x92>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae0:	e013      	b.n	8009b0a <HAL_TIM_PWM_Stop+0xba>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d104      	bne.n	8009af2 <HAL_TIM_PWM_Stop+0xa2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009af0:	e00b      	b.n	8009b0a <HAL_TIM_PWM_Stop+0xba>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_PWM_Stop+0xb2>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b00:	e003      	b.n	8009b0a <HAL_TIM_PWM_Stop+0xba>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	40010000 	.word	0x40010000

08009b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e041      	b.n	8009bae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f839 	bl	8009bb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f000 fcfe 	bl	800a558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 f87f 	bl	800ace0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a1a      	ldr	r2, [r3, #32]
 8009be8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bec:	4013      	ands	r3, r2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10f      	bne.n	8009c12 <HAL_TIM_IC_Stop+0x48>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a1a      	ldr	r2, [r3, #32]
 8009bf8:	f240 4344 	movw	r3, #1092	; 0x444
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <HAL_TIM_IC_Stop+0x48>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d104      	bne.n	8009c22 <HAL_TIM_IC_Stop+0x58>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c20:	e013      	b.n	8009c4a <HAL_TIM_IC_Stop+0x80>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d104      	bne.n	8009c32 <HAL_TIM_IC_Stop+0x68>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c30:	e00b      	b.n	8009c4a <HAL_TIM_IC_Stop+0x80>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d104      	bne.n	8009c42 <HAL_TIM_IC_Stop+0x78>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c40:	e003      	b.n	8009c4a <HAL_TIM_IC_Stop+0x80>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <HAL_TIM_IC_Stop+0x90>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c58:	e013      	b.n	8009c82 <HAL_TIM_IC_Stop+0xb8>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d104      	bne.n	8009c6a <HAL_TIM_IC_Stop+0xa0>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c68:	e00b      	b.n	8009c82 <HAL_TIM_IC_Stop+0xb8>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	d104      	bne.n	8009c7a <HAL_TIM_IC_Stop+0xb0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c78:	e003      	b.n	8009c82 <HAL_TIM_IC_Stop+0xb8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <HAL_TIM_IC_Start_IT+0x1e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	e013      	b.n	8009cd2 <HAL_TIM_IC_Start_IT+0x46>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d104      	bne.n	8009cba <HAL_TIM_IC_Start_IT+0x2e>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	e00b      	b.n	8009cd2 <HAL_TIM_IC_Start_IT+0x46>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d104      	bne.n	8009cca <HAL_TIM_IC_Start_IT+0x3e>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	e003      	b.n	8009cd2 <HAL_TIM_IC_Start_IT+0x46>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <HAL_TIM_IC_Start_IT+0x58>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	e013      	b.n	8009d0c <HAL_TIM_IC_Start_IT+0x80>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d104      	bne.n	8009cf4 <HAL_TIM_IC_Start_IT+0x68>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	e00b      	b.n	8009d0c <HAL_TIM_IC_Start_IT+0x80>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d104      	bne.n	8009d04 <HAL_TIM_IC_Start_IT+0x78>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	e003      	b.n	8009d0c <HAL_TIM_IC_Start_IT+0x80>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d102      	bne.n	8009d1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d14:	7b7b      	ldrb	r3, [r7, #13]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e0c2      	b.n	8009ea4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_IC_Start_IT+0xa2>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d2c:	e013      	b.n	8009d56 <HAL_TIM_IC_Start_IT+0xca>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d104      	bne.n	8009d3e <HAL_TIM_IC_Start_IT+0xb2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d3c:	e00b      	b.n	8009d56 <HAL_TIM_IC_Start_IT+0xca>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d104      	bne.n	8009d4e <HAL_TIM_IC_Start_IT+0xc2>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d4c:	e003      	b.n	8009d56 <HAL_TIM_IC_Start_IT+0xca>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2202      	movs	r2, #2
 8009d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <HAL_TIM_IC_Start_IT+0xda>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d64:	e013      	b.n	8009d8e <HAL_TIM_IC_Start_IT+0x102>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	d104      	bne.n	8009d76 <HAL_TIM_IC_Start_IT+0xea>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d74:	e00b      	b.n	8009d8e <HAL_TIM_IC_Start_IT+0x102>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d104      	bne.n	8009d86 <HAL_TIM_IC_Start_IT+0xfa>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d84:	e003      	b.n	8009d8e <HAL_TIM_IC_Start_IT+0x102>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b0c      	cmp	r3, #12
 8009d92:	d841      	bhi.n	8009e18 <HAL_TIM_IC_Start_IT+0x18c>
 8009d94:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <HAL_TIM_IC_Start_IT+0x110>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009dd1 	.word	0x08009dd1
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e19 	.word	0x08009e19
 8009da8:	08009e19 	.word	0x08009e19
 8009dac:	08009de3 	.word	0x08009de3
 8009db0:	08009e19 	.word	0x08009e19
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009e19 	.word	0x08009e19
 8009dbc:	08009df5 	.word	0x08009df5
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e19 	.word	0x08009e19
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009e07 	.word	0x08009e07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0202 	orr.w	r2, r2, #2
 8009dde:	60da      	str	r2, [r3, #12]
      break;
 8009de0:	e01d      	b.n	8009e1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f042 0204 	orr.w	r2, r2, #4
 8009df0:	60da      	str	r2, [r3, #12]
      break;
 8009df2:	e014      	b.n	8009e1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68da      	ldr	r2, [r3, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0208 	orr.w	r2, r2, #8
 8009e02:	60da      	str	r2, [r3, #12]
      break;
 8009e04:	e00b      	b.n	8009e1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f042 0210 	orr.w	r2, r2, #16
 8009e14:	60da      	str	r2, [r3, #12]
      break;
 8009e16:	e002      	b.n	8009e1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d13e      	bne.n	8009ea2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 ff57 	bl	800ace0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1d      	ldr	r2, [pc, #116]	; (8009eac <HAL_TIM_IC_Start_IT+0x220>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d018      	beq.n	8009e6e <HAL_TIM_IC_Start_IT+0x1e2>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e44:	d013      	beq.n	8009e6e <HAL_TIM_IC_Start_IT+0x1e2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a19      	ldr	r2, [pc, #100]	; (8009eb0 <HAL_TIM_IC_Start_IT+0x224>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00e      	beq.n	8009e6e <HAL_TIM_IC_Start_IT+0x1e2>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <HAL_TIM_IC_Start_IT+0x228>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d009      	beq.n	8009e6e <HAL_TIM_IC_Start_IT+0x1e2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a16      	ldr	r2, [pc, #88]	; (8009eb8 <HAL_TIM_IC_Start_IT+0x22c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d004      	beq.n	8009e6e <HAL_TIM_IC_Start_IT+0x1e2>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <HAL_TIM_IC_Start_IT+0x230>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d111      	bne.n	8009e92 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b06      	cmp	r3, #6
 8009e7e:	d010      	beq.n	8009ea2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e90:	e007      	b.n	8009ea2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f042 0201 	orr.w	r2, r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40000400 	.word	0x40000400
 8009eb4:	40000800 	.word	0x40000800
 8009eb8:	40000c00 	.word	0x40000c00
 8009ebc:	40014000 	.word	0x40014000

08009ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 0302 	and.w	r3, r3, #2
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d122      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d11b      	bne.n	8009f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f06f 0202 	mvn.w	r2, #2
 8009eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7fa f9fe 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 8009f08:	e005      	b.n	8009f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fb05 	bl	800a51a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb0c 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d122      	bne.n	8009f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d11b      	bne.n	8009f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f06f 0204 	mvn.w	r2, #4
 8009f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2202      	movs	r2, #2
 8009f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fa f9d4 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 8009f5c:	e005      	b.n	8009f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fadb 	bl	800a51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fae2 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0308 	and.w	r3, r3, #8
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	d122      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f003 0308 	and.w	r3, r3, #8
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d11b      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f06f 0208 	mvn.w	r2, #8
 8009f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2204      	movs	r2, #4
 8009f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f003 0303 	and.w	r3, r3, #3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fa f9aa 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 8009fb0:	e005      	b.n	8009fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fab1 	bl	800a51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fab8 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	d122      	bne.n	800a018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b10      	cmp	r3, #16
 8009fde:	d11b      	bne.n	800a018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f06f 0210 	mvn.w	r2, #16
 8009fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2208      	movs	r2, #8
 8009fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fa f980 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 800a004:	e005      	b.n	800a012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa87 	bl	800a51a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fa8e 	bl	800a52e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10e      	bne.n	800a044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b01      	cmp	r3, #1
 800a032:	d107      	bne.n	800a044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f06f 0201 	mvn.w	r2, #1
 800a03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fa f9b6 	bl	80043b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04e:	2b80      	cmp	r3, #128	; 0x80
 800a050:	d10e      	bne.n	800a070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a05c:	2b80      	cmp	r3, #128	; 0x80
 800a05e:	d107      	bne.n	800a070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 ff28 	bl	800aec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07a:	2b40      	cmp	r3, #64	; 0x40
 800a07c:	d10e      	bne.n	800a09c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a088:	2b40      	cmp	r3, #64	; 0x40
 800a08a:	d107      	bne.n	800a09c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa53 	bl	800a542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d10e      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b20      	cmp	r3, #32
 800a0b6:	d107      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0220 	mvn.w	r2, #32
 800a0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fef2 	bl	800aeac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_TIM_IC_ConfigChannel+0x1e>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e088      	b.n	800a200 <HAL_TIM_IC_ConfigChannel+0x130>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f000 fc30 	bl	800a970 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	699a      	ldr	r2, [r3, #24]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 020c 	bic.w	r2, r2, #12
 800a11e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6999      	ldr	r1, [r3, #24]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	619a      	str	r2, [r3, #24]
 800a132:	e060      	b.n	800a1f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b04      	cmp	r3, #4
 800a138:	d11c      	bne.n	800a174 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6819      	ldr	r1, [r3, #0]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f000 fca8 	bl	800aa9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	699a      	ldr	r2, [r3, #24]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a15c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6999      	ldr	r1, [r3, #24]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	021a      	lsls	r2, r3, #8
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	619a      	str	r2, [r3, #24]
 800a172:	e040      	b.n	800a1f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b08      	cmp	r3, #8
 800a178:	d11b      	bne.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6819      	ldr	r1, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f000 fcf5 	bl	800ab78 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69da      	ldr	r2, [r3, #28]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 020c 	bic.w	r2, r2, #12
 800a19c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69d9      	ldr	r1, [r3, #28]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	61da      	str	r2, [r3, #28]
 800a1b0:	e021      	b.n	800a1f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	d11c      	bne.n	800a1f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	6819      	ldr	r1, [r3, #0]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f000 fd12 	bl	800abf0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	69da      	ldr	r2, [r3, #28]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a1da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	69d9      	ldr	r1, [r3, #28]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	021a      	lsls	r2, r3, #8
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	61da      	str	r2, [r3, #28]
 800a1f0:	e001      	b.n	800a1f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a222:	2302      	movs	r3, #2
 800a224:	e0ae      	b.n	800a384 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b0c      	cmp	r3, #12
 800a232:	f200 809f 	bhi.w	800a374 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a236:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a271 	.word	0x0800a271
 800a240:	0800a375 	.word	0x0800a375
 800a244:	0800a375 	.word	0x0800a375
 800a248:	0800a375 	.word	0x0800a375
 800a24c:	0800a2b1 	.word	0x0800a2b1
 800a250:	0800a375 	.word	0x0800a375
 800a254:	0800a375 	.word	0x0800a375
 800a258:	0800a375 	.word	0x0800a375
 800a25c:	0800a2f3 	.word	0x0800a2f3
 800a260:	0800a375 	.word	0x0800a375
 800a264:	0800a375 	.word	0x0800a375
 800a268:	0800a375 	.word	0x0800a375
 800a26c:	0800a333 	.word	0x0800a333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f9ee 	bl	800a658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699a      	ldr	r2, [r3, #24]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f042 0208 	orr.w	r2, r2, #8
 800a28a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0204 	bic.w	r2, r2, #4
 800a29a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6999      	ldr	r1, [r3, #24]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	691a      	ldr	r2, [r3, #16]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	619a      	str	r2, [r3, #24]
      break;
 800a2ae:	e064      	b.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 fa34 	bl	800a724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699a      	ldr	r2, [r3, #24]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6999      	ldr	r1, [r3, #24]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	021a      	lsls	r2, r3, #8
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	619a      	str	r2, [r3, #24]
      break;
 800a2f0:	e043      	b.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fa7f 	bl	800a7fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69da      	ldr	r2, [r3, #28]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0208 	orr.w	r2, r2, #8
 800a30c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0204 	bic.w	r2, r2, #4
 800a31c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	69d9      	ldr	r1, [r3, #28]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	61da      	str	r2, [r3, #28]
      break;
 800a330:	e023      	b.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fac9 	bl	800a8d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	69da      	ldr	r2, [r3, #28]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a34c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69da      	ldr	r2, [r3, #28]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a35c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69d9      	ldr	r1, [r3, #28]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	021a      	lsls	r2, r3, #8
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	61da      	str	r2, [r3, #28]
      break;
 800a372:	e002      	b.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
      break;
 800a378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_ConfigClockSource+0x1c>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e0b4      	b.n	800a512 <HAL_TIM_ConfigClockSource+0x186>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e0:	d03e      	beq.n	800a460 <HAL_TIM_ConfigClockSource+0xd4>
 800a3e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e6:	f200 8087 	bhi.w	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ee:	f000 8086 	beq.w	800a4fe <HAL_TIM_ConfigClockSource+0x172>
 800a3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f6:	d87f      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f8:	2b70      	cmp	r3, #112	; 0x70
 800a3fa:	d01a      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0xa6>
 800a3fc:	2b70      	cmp	r3, #112	; 0x70
 800a3fe:	d87b      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a400:	2b60      	cmp	r3, #96	; 0x60
 800a402:	d050      	beq.n	800a4a6 <HAL_TIM_ConfigClockSource+0x11a>
 800a404:	2b60      	cmp	r3, #96	; 0x60
 800a406:	d877      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a408:	2b50      	cmp	r3, #80	; 0x50
 800a40a:	d03c      	beq.n	800a486 <HAL_TIM_ConfigClockSource+0xfa>
 800a40c:	2b50      	cmp	r3, #80	; 0x50
 800a40e:	d873      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d058      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x13a>
 800a414:	2b40      	cmp	r3, #64	; 0x40
 800a416:	d86f      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a418:	2b30      	cmp	r3, #48	; 0x30
 800a41a:	d064      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a41c:	2b30      	cmp	r3, #48	; 0x30
 800a41e:	d86b      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a420:	2b20      	cmp	r3, #32
 800a422:	d060      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a424:	2b20      	cmp	r3, #32
 800a426:	d867      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d05c      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d05a      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x15a>
 800a430:	e062      	b.n	800a4f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6899      	ldr	r1, [r3, #8]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f000 fc2d 	bl	800aca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	609a      	str	r2, [r3, #8]
      break;
 800a45e:	e04f      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6818      	ldr	r0, [r3, #0]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	6899      	ldr	r1, [r3, #8]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f000 fc16 	bl	800aca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a482:	609a      	str	r2, [r3, #8]
      break;
 800a484:	e03c      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	6859      	ldr	r1, [r3, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	461a      	mov	r2, r3
 800a494:	f000 fad4 	bl	800aa40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2150      	movs	r1, #80	; 0x50
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fbe3 	bl	800ac6a <TIM_ITRx_SetConfig>
      break;
 800a4a4:	e02c      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	6859      	ldr	r1, [r3, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f000 fb30 	bl	800ab18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2160      	movs	r1, #96	; 0x60
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fbd3 	bl	800ac6a <TIM_ITRx_SetConfig>
      break;
 800a4c4:	e01c      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	6859      	ldr	r1, [r3, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 fab4 	bl	800aa40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2140      	movs	r1, #64	; 0x40
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fbc3 	bl	800ac6a <TIM_ITRx_SetConfig>
      break;
 800a4e4:	e00c      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	f000 fbba 	bl	800ac6a <TIM_ITRx_SetConfig>
      break;
 800a4f6:	e003      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e000      	b.n	800a500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a510:	7bfb      	ldrb	r3, [r7, #15]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a522:	bf00      	nop
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a34      	ldr	r2, [pc, #208]	; (800a63c <TIM_Base_SetConfig+0xe4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00f      	beq.n	800a590 <TIM_Base_SetConfig+0x38>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a576:	d00b      	beq.n	800a590 <TIM_Base_SetConfig+0x38>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a31      	ldr	r2, [pc, #196]	; (800a640 <TIM_Base_SetConfig+0xe8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d007      	beq.n	800a590 <TIM_Base_SetConfig+0x38>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a30      	ldr	r2, [pc, #192]	; (800a644 <TIM_Base_SetConfig+0xec>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d003      	beq.n	800a590 <TIM_Base_SetConfig+0x38>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a2f      	ldr	r2, [pc, #188]	; (800a648 <TIM_Base_SetConfig+0xf0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d108      	bne.n	800a5a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a25      	ldr	r2, [pc, #148]	; (800a63c <TIM_Base_SetConfig+0xe4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d01b      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b0:	d017      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a22      	ldr	r2, [pc, #136]	; (800a640 <TIM_Base_SetConfig+0xe8>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a21      	ldr	r2, [pc, #132]	; (800a644 <TIM_Base_SetConfig+0xec>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00f      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a20      	ldr	r2, [pc, #128]	; (800a648 <TIM_Base_SetConfig+0xf0>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00b      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a1f      	ldr	r2, [pc, #124]	; (800a64c <TIM_Base_SetConfig+0xf4>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a1e      	ldr	r2, [pc, #120]	; (800a650 <TIM_Base_SetConfig+0xf8>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_Base_SetConfig+0x8a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a1d      	ldr	r2, [pc, #116]	; (800a654 <TIM_Base_SetConfig+0xfc>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d108      	bne.n	800a5f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a08      	ldr	r2, [pc, #32]	; (800a63c <TIM_Base_SetConfig+0xe4>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d103      	bne.n	800a628 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	615a      	str	r2, [r3, #20]
}
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40010000 	.word	0x40010000
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40014000 	.word	0x40014000
 800a650:	40014400 	.word	0x40014400
 800a654:	40014800 	.word	0x40014800

0800a658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f023 0201 	bic.w	r2, r3, #1
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f023 0303 	bic.w	r3, r3, #3
 800a68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f023 0302 	bic.w	r3, r3, #2
 800a6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a1c      	ldr	r2, [pc, #112]	; (800a720 <TIM_OC1_SetConfig+0xc8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d10c      	bne.n	800a6ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f023 0308 	bic.w	r3, r3, #8
 800a6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f023 0304 	bic.w	r3, r3, #4
 800a6cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a13      	ldr	r2, [pc, #76]	; (800a720 <TIM_OC1_SetConfig+0xc8>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d111      	bne.n	800a6fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	621a      	str	r2, [r3, #32]
}
 800a714:	bf00      	nop
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	40010000 	.word	0x40010000

0800a724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	f023 0210 	bic.w	r2, r3, #16
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f023 0320 	bic.w	r3, r3, #32
 800a76e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a1e      	ldr	r2, [pc, #120]	; (800a7f8 <TIM_OC2_SetConfig+0xd4>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d10d      	bne.n	800a7a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <TIM_OC2_SetConfig+0xd4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d113      	bne.n	800a7d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	621a      	str	r2, [r3, #32]
}
 800a7ea:	bf00      	nop
 800a7ec:	371c      	adds	r7, #28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	40010000 	.word	0x40010000

0800a7fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0303 	bic.w	r3, r3, #3
 800a832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	4313      	orrs	r3, r2
 800a850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1d      	ldr	r2, [pc, #116]	; (800a8cc <TIM_OC3_SetConfig+0xd0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d10d      	bne.n	800a876 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a14      	ldr	r2, [pc, #80]	; (800a8cc <TIM_OC3_SetConfig+0xd0>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d113      	bne.n	800a8a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a88c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	621a      	str	r2, [r3, #32]
}
 800a8c0:	bf00      	nop
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	40010000 	.word	0x40010000

0800a8d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	031b      	lsls	r3, r3, #12
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a10      	ldr	r2, [pc, #64]	; (800a96c <TIM_OC4_SetConfig+0x9c>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d109      	bne.n	800a944 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	019b      	lsls	r3, r3, #6
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4313      	orrs	r3, r2
 800a942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	621a      	str	r2, [r3, #32]
}
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000

0800a970 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f023 0201 	bic.w	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4a24      	ldr	r2, [pc, #144]	; (800aa2c <TIM_TI1_SetConfig+0xbc>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d013      	beq.n	800a9c6 <TIM_TI1_SetConfig+0x56>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a4:	d00f      	beq.n	800a9c6 <TIM_TI1_SetConfig+0x56>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4a21      	ldr	r2, [pc, #132]	; (800aa30 <TIM_TI1_SetConfig+0xc0>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d00b      	beq.n	800a9c6 <TIM_TI1_SetConfig+0x56>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4a20      	ldr	r2, [pc, #128]	; (800aa34 <TIM_TI1_SetConfig+0xc4>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d007      	beq.n	800a9c6 <TIM_TI1_SetConfig+0x56>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	; (800aa38 <TIM_TI1_SetConfig+0xc8>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d003      	beq.n	800a9c6 <TIM_TI1_SetConfig+0x56>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4a1e      	ldr	r2, [pc, #120]	; (800aa3c <TIM_TI1_SetConfig+0xcc>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d101      	bne.n	800a9ca <TIM_TI1_SetConfig+0x5a>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <TIM_TI1_SetConfig+0x5c>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0303 	bic.w	r3, r3, #3
 800a9d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	e003      	b.n	800a9ea <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f043 0301 	orr.w	r3, r3, #1
 800a9e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f023 030a 	bic.w	r3, r3, #10
 800aa04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f003 030a 	and.w	r3, r3, #10
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	40010000 	.word	0x40010000
 800aa30:	40000400 	.word	0x40000400
 800aa34:	40000800 	.word	0x40000800
 800aa38:	40000c00 	.word	0x40000c00
 800aa3c:	40014000 	.word	0x40014000

0800aa40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f023 0201 	bic.w	r2, r3, #1
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f023 030a 	bic.w	r3, r3, #10
 800aa7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	f023 0210 	bic.w	r2, r3, #16
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	021b      	lsls	r3, r3, #8
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aadc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	031b      	lsls	r3, r3, #12
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	621a      	str	r2, [r3, #32]
}
 800ab0c:	bf00      	nop
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f023 0210 	bic.w	r2, r3, #16
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	031b      	lsls	r3, r3, #12
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	621a      	str	r2, [r3, #32]
}
 800ab6c:	bf00      	nop
 800ab6e:	371c      	adds	r7, #28
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6a1b      	ldr	r3, [r3, #32]
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	011b      	lsls	r3, r3, #4
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800abc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	621a      	str	r2, [r3, #32]
}
 800abe4:	bf00      	nop
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	021b      	lsls	r3, r3, #8
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	031b      	lsls	r3, r3, #12
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	031b      	lsls	r3, r3, #12
 800ac48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	621a      	str	r2, [r3, #32]
}
 800ac5e:	bf00      	nop
 800ac60:	371c      	adds	r7, #28
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f043 0307 	orr.w	r3, r3, #7
 800ac8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	609a      	str	r2, [r3, #8]
}
 800ac94:	bf00      	nop
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
 800acac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	021a      	lsls	r2, r3, #8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	431a      	orrs	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	609a      	str	r2, [r3, #8]
}
 800acd4:	bf00      	nop
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 031f 	and.w	r3, r3, #31
 800acf2:	2201      	movs	r2, #1
 800acf4:	fa02 f303 	lsl.w	r3, r2, r3
 800acf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6a1a      	ldr	r2, [r3, #32]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	43db      	mvns	r3, r3
 800ad02:	401a      	ands	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6a1a      	ldr	r2, [r3, #32]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	fa01 f303 	lsl.w	r3, r1, r3
 800ad18:	431a      	orrs	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	621a      	str	r2, [r3, #32]
}
 800ad1e:	bf00      	nop
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
	...

0800ad2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad40:	2302      	movs	r3, #2
 800ad42:	e050      	b.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1c      	ldr	r2, [pc, #112]	; (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d018      	beq.n	800adba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad90:	d013      	beq.n	800adba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a18      	ldr	r2, [pc, #96]	; (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d00e      	beq.n	800adba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a16      	ldr	r2, [pc, #88]	; (800adfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d009      	beq.n	800adba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a15      	ldr	r2, [pc, #84]	; (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d004      	beq.n	800adba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a13      	ldr	r2, [pc, #76]	; (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d10c      	bne.n	800add4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4313      	orrs	r3, r2
 800adca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40000400 	.word	0x40000400
 800adfc:	40000800 	.word	0x40000800
 800ae00:	40000c00 	.word	0x40000c00
 800ae04:	40014000 	.word	0x40014000

0800ae08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e03d      	b.n	800aea0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aec8:	bf00      	nop
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e03f      	b.n	800af66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7fa fc28 	bl	8005750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2224      	movs	r2, #36	; 0x24
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68da      	ldr	r2, [r3, #12]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fdd5 	bl	800bac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	691a      	ldr	r2, [r3, #16]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2220      	movs	r2, #32
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b08a      	sub	sp, #40	; 0x28
 800af72:	af02      	add	r7, sp, #8
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	603b      	str	r3, [r7, #0]
 800af7a:	4613      	mov	r3, r2
 800af7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d17c      	bne.n	800b088 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <HAL_UART_Transmit+0x2c>
 800af94:	88fb      	ldrh	r3, [r7, #6]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e075      	b.n	800b08a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d101      	bne.n	800afac <HAL_UART_Transmit+0x3e>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e06e      	b.n	800b08a <HAL_UART_Transmit+0x11c>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afc2:	f7fd f963 	bl	800828c <HAL_GetTick>
 800afc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	88fa      	ldrh	r2, [r7, #6]
 800afcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	88fa      	ldrh	r2, [r7, #6]
 800afd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afdc:	d108      	bne.n	800aff0 <HAL_UART_Transmit+0x82>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d104      	bne.n	800aff0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800afe6:	2300      	movs	r3, #0
 800afe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	61bb      	str	r3, [r7, #24]
 800afee:	e003      	b.n	800aff8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b000:	e02a      	b.n	800b058 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2200      	movs	r2, #0
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 fb15 	bl	800b63c <UART_WaitOnFlagUntilTimeout>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e036      	b.n	800b08a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10b      	bne.n	800b03a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	3302      	adds	r3, #2
 800b036:	61bb      	str	r3, [r7, #24]
 800b038:	e007      	b.n	800b04a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	3301      	adds	r3, #1
 800b048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b04e:	b29b      	uxth	r3, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	b29a      	uxth	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1cf      	bne.n	800b002 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2200      	movs	r2, #0
 800b06a:	2140      	movs	r1, #64	; 0x40
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fae5 	bl	800b63c <UART_WaitOnFlagUntilTimeout>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e006      	b.n	800b08a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2220      	movs	r2, #32
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	e000      	b.n	800b08a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b088:	2302      	movs	r3, #2
  }
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d11d      	bne.n	800b0e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <HAL_UART_Receive_IT+0x26>
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e016      	b.n	800b0ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_UART_Receive_IT+0x38>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e00f      	b.n	800b0ea <HAL_UART_Receive_IT+0x58>
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 fb1a 	bl	800b718 <UART_Start_Receive_IT>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	e000      	b.n	800b0ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b0e8:	2302      	movs	r3, #2
  }
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b0ba      	sub	sp, #232	; 0xe8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b120:	2300      	movs	r3, #0
 800b122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10f      	bne.n	800b15a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13e:	f003 0320 	and.w	r3, r3, #32
 800b142:	2b00      	cmp	r3, #0
 800b144:	d009      	beq.n	800b15a <HAL_UART_IRQHandler+0x66>
 800b146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fbfd 	bl	800b952 <UART_Receive_IT>
      return;
 800b158:	e256      	b.n	800b608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b15a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 80de 	beq.w	800b320 <HAL_UART_IRQHandler+0x22c>
 800b164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 80d1 	beq.w	800b320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00b      	beq.n	800b1a2 <HAL_UART_IRQHandler+0xae>
 800b18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	f043 0201 	orr.w	r2, r3, #1
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a6:	f003 0304 	and.w	r3, r3, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <HAL_UART_IRQHandler+0xd2>
 800b1ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d005      	beq.n	800b1c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	f043 0202 	orr.w	r2, r3, #2
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00b      	beq.n	800b1ea <HAL_UART_IRQHandler+0xf6>
 800b1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	f043 0204 	orr.w	r2, r3, #4
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d011      	beq.n	800b21a <HAL_UART_IRQHandler+0x126>
 800b1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d105      	bne.n	800b20e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	f043 0208 	orr.w	r2, r3, #8
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 81ed 	beq.w	800b5fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b228:	f003 0320 	and.w	r3, r3, #32
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d008      	beq.n	800b242 <HAL_UART_IRQHandler+0x14e>
 800b230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b234:	f003 0320 	and.w	r3, r3, #32
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fb88 	bl	800b952 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24c:	2b40      	cmp	r3, #64	; 0x40
 800b24e:	bf0c      	ite	eq
 800b250:	2301      	moveq	r3, #1
 800b252:	2300      	movne	r3, #0
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d103      	bne.n	800b26e <HAL_UART_IRQHandler+0x17a>
 800b266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d04f      	beq.n	800b30e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fa90 	bl	800b794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b40      	cmp	r3, #64	; 0x40
 800b280:	d141      	bne.n	800b306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3314      	adds	r3, #20
 800b288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3314      	adds	r3, #20
 800b2aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1d9      	bne.n	800b282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d013      	beq.n	800b2fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	4a7d      	ldr	r2, [pc, #500]	; (800b4d0 <HAL_UART_IRQHandler+0x3dc>)
 800b2dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fd f9b5 	bl	8008652 <HAL_DMA_Abort_IT>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d016      	beq.n	800b31c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fc:	e00e      	b.n	800b31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f986 	bl	800b610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b304:	e00a      	b.n	800b31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f982 	bl	800b610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30c:	e006      	b.n	800b31c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f97e 	bl	800b610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b31a:	e170      	b.n	800b5fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31c:	bf00      	nop
    return;
 800b31e:	e16e      	b.n	800b5fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b324:	2b01      	cmp	r3, #1
 800b326:	f040 814a 	bne.w	800b5be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32e:	f003 0310 	and.w	r3, r3, #16
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 8143 	beq.w	800b5be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b33c:	f003 0310 	and.w	r3, r3, #16
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 813c 	beq.w	800b5be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b346:	2300      	movs	r3, #0
 800b348:	60bb      	str	r3, [r7, #8]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	60bb      	str	r3, [r7, #8]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	60bb      	str	r3, [r7, #8]
 800b35a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b366:	2b40      	cmp	r3, #64	; 0x40
 800b368:	f040 80b4 	bne.w	800b4d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8140 	beq.w	800b602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b38a:	429a      	cmp	r2, r3
 800b38c:	f080 8139 	bcs.w	800b602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a2:	f000 8088 	beq.w	800b4b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	330c      	adds	r3, #12
 800b3ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b3d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b3d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1d9      	bne.n	800b3a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b404:	f023 0301 	bic.w	r3, r3, #1
 800b408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3314      	adds	r3, #20
 800b412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b41a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e1      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3314      	adds	r3, #20
 800b434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3314      	adds	r3, #20
 800b44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b452:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b45a:	e841 2300 	strex	r3, r2, [r1]
 800b45e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e3      	bne.n	800b42e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	330c      	adds	r3, #12
 800b47a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47e:	e853 3f00 	ldrex	r3, [r3]
 800b482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b486:	f023 0310 	bic.w	r3, r3, #16
 800b48a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	330c      	adds	r3, #12
 800b494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b498:	65ba      	str	r2, [r7, #88]	; 0x58
 800b49a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b49e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e3      	bne.n	800b474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fd f85e 	bl	8008572 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f8ac 	bl	800b624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b4cc:	e099      	b.n	800b602 <HAL_UART_IRQHandler+0x50e>
 800b4ce:	bf00      	nop
 800b4d0:	0800b85b 	.word	0x0800b85b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 808b 	beq.w	800b606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b4f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8086 	beq.w	800b606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	330c      	adds	r3, #12
 800b500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	330c      	adds	r3, #12
 800b51a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b51e:	647a      	str	r2, [r7, #68]	; 0x44
 800b520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e3      	bne.n	800b4fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3314      	adds	r3, #20
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3314      	adds	r3, #20
 800b552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b556:	633a      	str	r2, [r7, #48]	; 0x30
 800b558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e3      	bne.n	800b532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2220      	movs	r2, #32
 800b56e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	60fb      	str	r3, [r7, #12]
   return(result);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0310 	bic.w	r3, r3, #16
 800b58e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	330c      	adds	r3, #12
 800b598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b59c:	61fa      	str	r2, [r7, #28]
 800b59e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	69b9      	ldr	r1, [r7, #24]
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e3      	bne.n	800b578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f834 	bl	800b624 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5bc:	e023      	b.n	800b606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d009      	beq.n	800b5de <HAL_UART_IRQHandler+0x4ea>
 800b5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f953 	bl	800b882 <UART_Transmit_IT>
    return;
 800b5dc:	e014      	b.n	800b608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00e      	beq.n	800b608 <HAL_UART_IRQHandler+0x514>
 800b5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f993 	bl	800b922 <UART_EndTransmit_IT>
    return;
 800b5fc:	e004      	b.n	800b608 <HAL_UART_IRQHandler+0x514>
    return;
 800b5fe:	bf00      	nop
 800b600:	e002      	b.n	800b608 <HAL_UART_IRQHandler+0x514>
      return;
 800b602:	bf00      	nop
 800b604:	e000      	b.n	800b608 <HAL_UART_IRQHandler+0x514>
      return;
 800b606:	bf00      	nop
  }
}
 800b608:	37e8      	adds	r7, #232	; 0xe8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop

0800b610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b090      	sub	sp, #64	; 0x40
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64c:	e050      	b.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b654:	d04c      	beq.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <UART_WaitOnFlagUntilTimeout+0x30>
 800b65c:	f7fc fe16 	bl	800828c <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b668:	429a      	cmp	r2, r3
 800b66a:	d241      	bcs.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	330c      	adds	r3, #12
 800b672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	e853 3f00 	ldrex	r3, [r3]
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	330c      	adds	r3, #12
 800b68a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b68c:	637a      	str	r2, [r7, #52]	; 0x34
 800b68e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b694:	e841 2300 	strex	r3, r2, [r1]
 800b698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1e5      	bne.n	800b66c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	e853 3f00 	ldrex	r3, [r3]
 800b6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f023 0301 	bic.w	r3, r3, #1
 800b6b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3314      	adds	r3, #20
 800b6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c0:	623a      	str	r2, [r7, #32]
 800b6c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c4:	69f9      	ldr	r1, [r7, #28]
 800b6c6:	6a3a      	ldr	r2, [r7, #32]
 800b6c8:	e841 2300 	strex	r3, r2, [r1]
 800b6cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e5      	bne.n	800b6a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e00f      	b.n	800b710 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	461a      	mov	r2, r3
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d09f      	beq.n	800b64e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3740      	adds	r7, #64	; 0x40
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	88fa      	ldrh	r2, [r7, #6]
 800b730:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	88fa      	ldrh	r2, [r7, #6]
 800b736:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2222      	movs	r2, #34	; 0x22
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d007      	beq.n	800b766 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b764:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695a      	ldr	r2, [r3, #20]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f042 0201 	orr.w	r2, r2, #1
 800b774:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0220 	orr.w	r2, r2, #32
 800b784:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b095      	sub	sp, #84	; 0x54
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	330c      	adds	r3, #12
 800b7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7bc:	643a      	str	r2, [r7, #64]	; 0x40
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e5      	bne.n	800b79c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3314      	adds	r3, #20
 800b7d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	f023 0301 	bic.w	r3, r3, #1
 800b7e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3314      	adds	r3, #20
 800b7ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f8:	e841 2300 	strex	r3, r2, [r1]
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e5      	bne.n	800b7d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d119      	bne.n	800b840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	330c      	adds	r3, #12
 800b812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f023 0310 	bic.w	r3, r3, #16
 800b822:	647b      	str	r3, [r7, #68]	; 0x44
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	330c      	adds	r3, #12
 800b82a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b82c:	61ba      	str	r2, [r7, #24]
 800b82e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6979      	ldr	r1, [r7, #20]
 800b832:	69ba      	ldr	r2, [r7, #24]
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	613b      	str	r3, [r7, #16]
   return(result);
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e5      	bne.n	800b80c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2220      	movs	r2, #32
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b84e:	bf00      	nop
 800b850:	3754      	adds	r7, #84	; 0x54
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff fecb 	bl	800b610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b882:	b480      	push	{r7}
 800b884:	b085      	sub	sp, #20
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b21      	cmp	r3, #33	; 0x21
 800b894:	d13e      	bne.n	800b914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89e:	d114      	bne.n	800b8ca <UART_Transmit_IT+0x48>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d110      	bne.n	800b8ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	1c9a      	adds	r2, r3, #2
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	621a      	str	r2, [r3, #32]
 800b8c8:	e008      	b.n	800b8dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	1c59      	adds	r1, r3, #1
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	6211      	str	r1, [r2, #32]
 800b8d4:	781a      	ldrb	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10f      	bne.n	800b910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68da      	ldr	r2, [r3, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68da      	ldr	r2, [r3, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b90e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	e000      	b.n	800b916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b914:	2302      	movs	r3, #2
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b938:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2220      	movs	r2, #32
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7f8 fcd2 	bl	80042ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b08c      	sub	sp, #48	; 0x30
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b22      	cmp	r3, #34	; 0x22
 800b964:	f040 80ab 	bne.w	800babe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b970:	d117      	bne.n	800b9a2 <UART_Receive_IT+0x50>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d113      	bne.n	800b9a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b990:	b29a      	uxth	r2, r3
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	1c9a      	adds	r2, r3, #2
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	629a      	str	r2, [r3, #40]	; 0x28
 800b9a0:	e026      	b.n	800b9f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b4:	d007      	beq.n	800b9c6 <UART_Receive_IT+0x74>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <UART_Receive_IT+0x82>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d0:	701a      	strb	r2, [r3, #0]
 800b9d2:	e008      	b.n	800b9e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d15a      	bne.n	800baba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68da      	ldr	r2, [r3, #12]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f022 0220 	bic.w	r2, r2, #32
 800ba12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68da      	ldr	r2, [r3, #12]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	695a      	ldr	r2, [r3, #20]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 0201 	bic.w	r2, r2, #1
 800ba32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d135      	bne.n	800bab0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	330c      	adds	r3, #12
 800ba50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f023 0310 	bic.w	r3, r3, #16
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba6a:	623a      	str	r2, [r7, #32]
 800ba6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6e:	69f9      	ldr	r1, [r7, #28]
 800ba70:	6a3a      	ldr	r2, [r7, #32]
 800ba72:	e841 2300 	strex	r3, r2, [r1]
 800ba76:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1e5      	bne.n	800ba4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0310 	and.w	r3, r3, #16
 800ba88:	2b10      	cmp	r3, #16
 800ba8a:	d10a      	bne.n	800baa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff fdbb 	bl	800b624 <HAL_UARTEx_RxEventCallback>
 800baae:	e002      	b.n	800bab6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7f8 fba7 	bl	8004204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	e002      	b.n	800bac0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	e000      	b.n	800bac0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800babe:	2302      	movs	r3, #2
  }
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3730      	adds	r7, #48	; 0x30
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bacc:	b0c0      	sub	sp, #256	; 0x100
 800bace:	af00      	add	r7, sp, #0
 800bad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae4:	68d9      	ldr	r1, [r3, #12]
 800bae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	ea40 0301 	orr.w	r3, r0, r1
 800baf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800baf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	431a      	orrs	r2, r3
 800bb00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb20:	f021 010c 	bic.w	r1, r1, #12
 800bb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb42:	6999      	ldr	r1, [r3, #24]
 800bb44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	ea40 0301 	orr.w	r3, r0, r1
 800bb4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b8f      	ldr	r3, [pc, #572]	; (800bd94 <UART_SetConfig+0x2cc>)
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d005      	beq.n	800bb68 <UART_SetConfig+0xa0>
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	4b8d      	ldr	r3, [pc, #564]	; (800bd98 <UART_SetConfig+0x2d0>)
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d104      	bne.n	800bb72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb68:	f7fd fc02 	bl	8009370 <HAL_RCC_GetPCLK2Freq>
 800bb6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb70:	e003      	b.n	800bb7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb72:	f7fd fbe9 	bl	8009348 <HAL_RCC_GetPCLK1Freq>
 800bb76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb84:	f040 810c 	bne.w	800bda0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	1891      	adds	r1, r2, r2
 800bba0:	65b9      	str	r1, [r7, #88]	; 0x58
 800bba2:	415b      	adcs	r3, r3
 800bba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bbaa:	4621      	mov	r1, r4
 800bbac:	eb12 0801 	adds.w	r8, r2, r1
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	eb43 0901 	adc.w	r9, r3, r1
 800bbb6:	f04f 0200 	mov.w	r2, #0
 800bbba:	f04f 0300 	mov.w	r3, #0
 800bbbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bbc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bbc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbca:	4690      	mov	r8, r2
 800bbcc:	4699      	mov	r9, r3
 800bbce:	4623      	mov	r3, r4
 800bbd0:	eb18 0303 	adds.w	r3, r8, r3
 800bbd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbd8:	462b      	mov	r3, r5
 800bbda:	eb49 0303 	adc.w	r3, r9, r3
 800bbde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	18db      	adds	r3, r3, r3
 800bbfa:	653b      	str	r3, [r7, #80]	; 0x50
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	eb42 0303 	adc.w	r3, r2, r3
 800bc02:	657b      	str	r3, [r7, #84]	; 0x54
 800bc04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc0c:	f7f5 f81c 	bl	8000c48 <__aeabi_uldivmod>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4b61      	ldr	r3, [pc, #388]	; (800bd9c <UART_SetConfig+0x2d4>)
 800bc16:	fba3 2302 	umull	r2, r3, r3, r2
 800bc1a:	095b      	lsrs	r3, r3, #5
 800bc1c:	011c      	lsls	r4, r3, #4
 800bc1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	1891      	adds	r1, r2, r2
 800bc36:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc38:	415b      	adcs	r3, r3
 800bc3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc40:	4641      	mov	r1, r8
 800bc42:	eb12 0a01 	adds.w	sl, r2, r1
 800bc46:	4649      	mov	r1, r9
 800bc48:	eb43 0b01 	adc.w	fp, r3, r1
 800bc4c:	f04f 0200 	mov.w	r2, #0
 800bc50:	f04f 0300 	mov.w	r3, #0
 800bc54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc60:	4692      	mov	sl, r2
 800bc62:	469b      	mov	fp, r3
 800bc64:	4643      	mov	r3, r8
 800bc66:	eb1a 0303 	adds.w	r3, sl, r3
 800bc6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc6e:	464b      	mov	r3, r9
 800bc70:	eb4b 0303 	adc.w	r3, fp, r3
 800bc74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	18db      	adds	r3, r3, r3
 800bc90:	643b      	str	r3, [r7, #64]	; 0x40
 800bc92:	4613      	mov	r3, r2
 800bc94:	eb42 0303 	adc.w	r3, r2, r3
 800bc98:	647b      	str	r3, [r7, #68]	; 0x44
 800bc9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bca2:	f7f4 ffd1 	bl	8000c48 <__aeabi_uldivmod>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4611      	mov	r1, r2
 800bcac:	4b3b      	ldr	r3, [pc, #236]	; (800bd9c <UART_SetConfig+0x2d4>)
 800bcae:	fba3 2301 	umull	r2, r3, r3, r1
 800bcb2:	095b      	lsrs	r3, r3, #5
 800bcb4:	2264      	movs	r2, #100	; 0x64
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
 800bcba:	1acb      	subs	r3, r1, r3
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bcc2:	4b36      	ldr	r3, [pc, #216]	; (800bd9c <UART_SetConfig+0x2d4>)
 800bcc4:	fba3 2302 	umull	r2, r3, r3, r2
 800bcc8:	095b      	lsrs	r3, r3, #5
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bcd0:	441c      	add	r4, r3
 800bcd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bce4:	4642      	mov	r2, r8
 800bce6:	464b      	mov	r3, r9
 800bce8:	1891      	adds	r1, r2, r2
 800bcea:	63b9      	str	r1, [r7, #56]	; 0x38
 800bcec:	415b      	adcs	r3, r3
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bcf4:	4641      	mov	r1, r8
 800bcf6:	1851      	adds	r1, r2, r1
 800bcf8:	6339      	str	r1, [r7, #48]	; 0x30
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	414b      	adcs	r3, r1
 800bcfe:	637b      	str	r3, [r7, #52]	; 0x34
 800bd00:	f04f 0200 	mov.w	r2, #0
 800bd04:	f04f 0300 	mov.w	r3, #0
 800bd08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd0c:	4659      	mov	r1, fp
 800bd0e:	00cb      	lsls	r3, r1, #3
 800bd10:	4651      	mov	r1, sl
 800bd12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd16:	4651      	mov	r1, sl
 800bd18:	00ca      	lsls	r2, r1, #3
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	4642      	mov	r2, r8
 800bd22:	189b      	adds	r3, r3, r2
 800bd24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd28:	464b      	mov	r3, r9
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	eb42 0303 	adc.w	r3, r2, r3
 800bd30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd48:	460b      	mov	r3, r1
 800bd4a:	18db      	adds	r3, r3, r3
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd4e:	4613      	mov	r3, r2
 800bd50:	eb42 0303 	adc.w	r3, r2, r3
 800bd54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd5e:	f7f4 ff73 	bl	8000c48 <__aeabi_uldivmod>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <UART_SetConfig+0x2d4>)
 800bd68:	fba3 1302 	umull	r1, r3, r3, r2
 800bd6c:	095b      	lsrs	r3, r3, #5
 800bd6e:	2164      	movs	r1, #100	; 0x64
 800bd70:	fb01 f303 	mul.w	r3, r1, r3
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	3332      	adds	r3, #50	; 0x32
 800bd7a:	4a08      	ldr	r2, [pc, #32]	; (800bd9c <UART_SetConfig+0x2d4>)
 800bd7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd80:	095b      	lsrs	r3, r3, #5
 800bd82:	f003 0207 	and.w	r2, r3, #7
 800bd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4422      	add	r2, r4
 800bd8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd90:	e105      	b.n	800bf9e <UART_SetConfig+0x4d6>
 800bd92:	bf00      	nop
 800bd94:	40011000 	.word	0x40011000
 800bd98:	40011400 	.word	0x40011400
 800bd9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bda0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bda4:	2200      	movs	r2, #0
 800bda6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bdae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	464b      	mov	r3, r9
 800bdb6:	1891      	adds	r1, r2, r2
 800bdb8:	6239      	str	r1, [r7, #32]
 800bdba:	415b      	adcs	r3, r3
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	1854      	adds	r4, r2, r1
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	eb43 0501 	adc.w	r5, r3, r1
 800bdcc:	f04f 0200 	mov.w	r2, #0
 800bdd0:	f04f 0300 	mov.w	r3, #0
 800bdd4:	00eb      	lsls	r3, r5, #3
 800bdd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdda:	00e2      	lsls	r2, r4, #3
 800bddc:	4614      	mov	r4, r2
 800bdde:	461d      	mov	r5, r3
 800bde0:	4643      	mov	r3, r8
 800bde2:	18e3      	adds	r3, r4, r3
 800bde4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bde8:	464b      	mov	r3, r9
 800bdea:	eb45 0303 	adc.w	r3, r5, r3
 800bdee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be0e:	4629      	mov	r1, r5
 800be10:	008b      	lsls	r3, r1, #2
 800be12:	4621      	mov	r1, r4
 800be14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be18:	4621      	mov	r1, r4
 800be1a:	008a      	lsls	r2, r1, #2
 800be1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be20:	f7f4 ff12 	bl	8000c48 <__aeabi_uldivmod>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4b60      	ldr	r3, [pc, #384]	; (800bfac <UART_SetConfig+0x4e4>)
 800be2a:	fba3 2302 	umull	r2, r3, r3, r2
 800be2e:	095b      	lsrs	r3, r3, #5
 800be30:	011c      	lsls	r4, r3, #4
 800be32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be36:	2200      	movs	r2, #0
 800be38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	1891      	adds	r1, r2, r2
 800be4a:	61b9      	str	r1, [r7, #24]
 800be4c:	415b      	adcs	r3, r3
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be54:	4641      	mov	r1, r8
 800be56:	1851      	adds	r1, r2, r1
 800be58:	6139      	str	r1, [r7, #16]
 800be5a:	4649      	mov	r1, r9
 800be5c:	414b      	adcs	r3, r1
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	f04f 0300 	mov.w	r3, #0
 800be68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be6c:	4659      	mov	r1, fp
 800be6e:	00cb      	lsls	r3, r1, #3
 800be70:	4651      	mov	r1, sl
 800be72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be76:	4651      	mov	r1, sl
 800be78:	00ca      	lsls	r2, r1, #3
 800be7a:	4610      	mov	r0, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	4603      	mov	r3, r0
 800be80:	4642      	mov	r2, r8
 800be82:	189b      	adds	r3, r3, r2
 800be84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be88:	464b      	mov	r3, r9
 800be8a:	460a      	mov	r2, r1
 800be8c:	eb42 0303 	adc.w	r3, r2, r3
 800be90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800beac:	4649      	mov	r1, r9
 800beae:	008b      	lsls	r3, r1, #2
 800beb0:	4641      	mov	r1, r8
 800beb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800beb6:	4641      	mov	r1, r8
 800beb8:	008a      	lsls	r2, r1, #2
 800beba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bebe:	f7f4 fec3 	bl	8000c48 <__aeabi_uldivmod>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4b39      	ldr	r3, [pc, #228]	; (800bfac <UART_SetConfig+0x4e4>)
 800bec8:	fba3 1302 	umull	r1, r3, r3, r2
 800becc:	095b      	lsrs	r3, r3, #5
 800bece:	2164      	movs	r1, #100	; 0x64
 800bed0:	fb01 f303 	mul.w	r3, r1, r3
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	011b      	lsls	r3, r3, #4
 800bed8:	3332      	adds	r3, #50	; 0x32
 800beda:	4a34      	ldr	r2, [pc, #208]	; (800bfac <UART_SetConfig+0x4e4>)
 800bedc:	fba2 2303 	umull	r2, r3, r2, r3
 800bee0:	095b      	lsrs	r3, r3, #5
 800bee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bee6:	441c      	add	r4, r3
 800bee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beec:	2200      	movs	r2, #0
 800beee:	673b      	str	r3, [r7, #112]	; 0x70
 800bef0:	677a      	str	r2, [r7, #116]	; 0x74
 800bef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bef6:	4642      	mov	r2, r8
 800bef8:	464b      	mov	r3, r9
 800befa:	1891      	adds	r1, r2, r2
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	415b      	adcs	r3, r3
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf06:	4641      	mov	r1, r8
 800bf08:	1851      	adds	r1, r2, r1
 800bf0a:	6039      	str	r1, [r7, #0]
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	414b      	adcs	r3, r1
 800bf10:	607b      	str	r3, [r7, #4]
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf1e:	4659      	mov	r1, fp
 800bf20:	00cb      	lsls	r3, r1, #3
 800bf22:	4651      	mov	r1, sl
 800bf24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf28:	4651      	mov	r1, sl
 800bf2a:	00ca      	lsls	r2, r1, #3
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	4642      	mov	r2, r8
 800bf34:	189b      	adds	r3, r3, r2
 800bf36:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf38:	464b      	mov	r3, r9
 800bf3a:	460a      	mov	r2, r1
 800bf3c:	eb42 0303 	adc.w	r3, r2, r3
 800bf40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	663b      	str	r3, [r7, #96]	; 0x60
 800bf4c:	667a      	str	r2, [r7, #100]	; 0x64
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	f04f 0300 	mov.w	r3, #0
 800bf56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	008b      	lsls	r3, r1, #2
 800bf5e:	4641      	mov	r1, r8
 800bf60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf64:	4641      	mov	r1, r8
 800bf66:	008a      	lsls	r2, r1, #2
 800bf68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf6c:	f7f4 fe6c 	bl	8000c48 <__aeabi_uldivmod>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <UART_SetConfig+0x4e4>)
 800bf76:	fba3 1302 	umull	r1, r3, r3, r2
 800bf7a:	095b      	lsrs	r3, r3, #5
 800bf7c:	2164      	movs	r1, #100	; 0x64
 800bf7e:	fb01 f303 	mul.w	r3, r1, r3
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	3332      	adds	r3, #50	; 0x32
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <UART_SetConfig+0x4e4>)
 800bf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	f003 020f 	and.w	r2, r3, #15
 800bf94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4422      	add	r2, r4
 800bf9c:	609a      	str	r2, [r3, #8]
}
 800bf9e:	bf00      	nop
 800bfa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfaa:	bf00      	nop
 800bfac:	51eb851f 	.word	0x51eb851f

0800bfb0 <__errno>:
 800bfb0:	4b01      	ldr	r3, [pc, #4]	; (800bfb8 <__errno+0x8>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	20000064 	.word	0x20000064

0800bfbc <__libc_init_array>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	4d0d      	ldr	r5, [pc, #52]	; (800bff4 <__libc_init_array+0x38>)
 800bfc0:	4c0d      	ldr	r4, [pc, #52]	; (800bff8 <__libc_init_array+0x3c>)
 800bfc2:	1b64      	subs	r4, r4, r5
 800bfc4:	10a4      	asrs	r4, r4, #2
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	42a6      	cmp	r6, r4
 800bfca:	d109      	bne.n	800bfe0 <__libc_init_array+0x24>
 800bfcc:	4d0b      	ldr	r5, [pc, #44]	; (800bffc <__libc_init_array+0x40>)
 800bfce:	4c0c      	ldr	r4, [pc, #48]	; (800c000 <__libc_init_array+0x44>)
 800bfd0:	f004 f86c 	bl	80100ac <_init>
 800bfd4:	1b64      	subs	r4, r4, r5
 800bfd6:	10a4      	asrs	r4, r4, #2
 800bfd8:	2600      	movs	r6, #0
 800bfda:	42a6      	cmp	r6, r4
 800bfdc:	d105      	bne.n	800bfea <__libc_init_array+0x2e>
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe4:	4798      	blx	r3
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	e7ee      	b.n	800bfc8 <__libc_init_array+0xc>
 800bfea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfee:	4798      	blx	r3
 800bff0:	3601      	adds	r6, #1
 800bff2:	e7f2      	b.n	800bfda <__libc_init_array+0x1e>
 800bff4:	08010598 	.word	0x08010598
 800bff8:	08010598 	.word	0x08010598
 800bffc:	08010598 	.word	0x08010598
 800c000:	0801059c 	.word	0x0801059c

0800c004 <memset>:
 800c004:	4402      	add	r2, r0
 800c006:	4603      	mov	r3, r0
 800c008:	4293      	cmp	r3, r2
 800c00a:	d100      	bne.n	800c00e <memset+0xa>
 800c00c:	4770      	bx	lr
 800c00e:	f803 1b01 	strb.w	r1, [r3], #1
 800c012:	e7f9      	b.n	800c008 <memset+0x4>

0800c014 <sulp>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	ec45 4b10 	vmov	d0, r4, r5
 800c01e:	4616      	mov	r6, r2
 800c020:	f001 fd2a 	bl	800da78 <__ulp>
 800c024:	ec51 0b10 	vmov	r0, r1, d0
 800c028:	b17e      	cbz	r6, 800c04a <sulp+0x36>
 800c02a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c02e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd09      	ble.n	800c04a <sulp+0x36>
 800c036:	051b      	lsls	r3, r3, #20
 800c038:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c03c:	2400      	movs	r4, #0
 800c03e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c042:	4622      	mov	r2, r4
 800c044:	462b      	mov	r3, r5
 800c046:	f7f4 fadf 	bl	8000608 <__aeabi_dmul>
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	0000      	movs	r0, r0
	...

0800c050 <_strtod_l>:
 800c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c054:	ed2d 8b02 	vpush	{d8}
 800c058:	b09d      	sub	sp, #116	; 0x74
 800c05a:	461f      	mov	r7, r3
 800c05c:	2300      	movs	r3, #0
 800c05e:	9318      	str	r3, [sp, #96]	; 0x60
 800c060:	4ba2      	ldr	r3, [pc, #648]	; (800c2ec <_strtod_l+0x29c>)
 800c062:	9213      	str	r2, [sp, #76]	; 0x4c
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	9305      	str	r3, [sp, #20]
 800c068:	4604      	mov	r4, r0
 800c06a:	4618      	mov	r0, r3
 800c06c:	4688      	mov	r8, r1
 800c06e:	f7f4 f8b7 	bl	80001e0 <strlen>
 800c072:	f04f 0a00 	mov.w	sl, #0
 800c076:	4605      	mov	r5, r0
 800c078:	f04f 0b00 	mov.w	fp, #0
 800c07c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c082:	781a      	ldrb	r2, [r3, #0]
 800c084:	2a2b      	cmp	r2, #43	; 0x2b
 800c086:	d04e      	beq.n	800c126 <_strtod_l+0xd6>
 800c088:	d83b      	bhi.n	800c102 <_strtod_l+0xb2>
 800c08a:	2a0d      	cmp	r2, #13
 800c08c:	d834      	bhi.n	800c0f8 <_strtod_l+0xa8>
 800c08e:	2a08      	cmp	r2, #8
 800c090:	d834      	bhi.n	800c0fc <_strtod_l+0xac>
 800c092:	2a00      	cmp	r2, #0
 800c094:	d03e      	beq.n	800c114 <_strtod_l+0xc4>
 800c096:	2300      	movs	r3, #0
 800c098:	930a      	str	r3, [sp, #40]	; 0x28
 800c09a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c09c:	7833      	ldrb	r3, [r6, #0]
 800c09e:	2b30      	cmp	r3, #48	; 0x30
 800c0a0:	f040 80b0 	bne.w	800c204 <_strtod_l+0x1b4>
 800c0a4:	7873      	ldrb	r3, [r6, #1]
 800c0a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c0aa:	2b58      	cmp	r3, #88	; 0x58
 800c0ac:	d168      	bne.n	800c180 <_strtod_l+0x130>
 800c0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	ab18      	add	r3, sp, #96	; 0x60
 800c0b4:	9702      	str	r7, [sp, #8]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4a8d      	ldr	r2, [pc, #564]	; (800c2f0 <_strtod_l+0x2a0>)
 800c0ba:	ab19      	add	r3, sp, #100	; 0x64
 800c0bc:	a917      	add	r1, sp, #92	; 0x5c
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 fe40 	bl	800cd44 <__gethex>
 800c0c4:	f010 0707 	ands.w	r7, r0, #7
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	d005      	beq.n	800c0d8 <_strtod_l+0x88>
 800c0cc:	2f06      	cmp	r7, #6
 800c0ce:	d12c      	bne.n	800c12a <_strtod_l+0xda>
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c0d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f040 8590 	bne.w	800cc00 <_strtod_l+0xbb0>
 800c0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e2:	b1eb      	cbz	r3, 800c120 <_strtod_l+0xd0>
 800c0e4:	4652      	mov	r2, sl
 800c0e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c0ea:	ec43 2b10 	vmov	d0, r2, r3
 800c0ee:	b01d      	add	sp, #116	; 0x74
 800c0f0:	ecbd 8b02 	vpop	{d8}
 800c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f8:	2a20      	cmp	r2, #32
 800c0fa:	d1cc      	bne.n	800c096 <_strtod_l+0x46>
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800c100:	e7be      	b.n	800c080 <_strtod_l+0x30>
 800c102:	2a2d      	cmp	r2, #45	; 0x2d
 800c104:	d1c7      	bne.n	800c096 <_strtod_l+0x46>
 800c106:	2201      	movs	r2, #1
 800c108:	920a      	str	r2, [sp, #40]	; 0x28
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1c2      	bne.n	800c09a <_strtod_l+0x4a>
 800c114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c116:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f040 856e 	bne.w	800cbfc <_strtod_l+0xbac>
 800c120:	4652      	mov	r2, sl
 800c122:	465b      	mov	r3, fp
 800c124:	e7e1      	b.n	800c0ea <_strtod_l+0x9a>
 800c126:	2200      	movs	r2, #0
 800c128:	e7ee      	b.n	800c108 <_strtod_l+0xb8>
 800c12a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c12c:	b13a      	cbz	r2, 800c13e <_strtod_l+0xee>
 800c12e:	2135      	movs	r1, #53	; 0x35
 800c130:	a81a      	add	r0, sp, #104	; 0x68
 800c132:	f001 fdac 	bl	800dc8e <__copybits>
 800c136:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c138:	4620      	mov	r0, r4
 800c13a:	f001 f96b 	bl	800d414 <_Bfree>
 800c13e:	3f01      	subs	r7, #1
 800c140:	2f04      	cmp	r7, #4
 800c142:	d806      	bhi.n	800c152 <_strtod_l+0x102>
 800c144:	e8df f007 	tbb	[pc, r7]
 800c148:	1714030a 	.word	0x1714030a
 800c14c:	0a          	.byte	0x0a
 800c14d:	00          	.byte	0x00
 800c14e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c152:	0728      	lsls	r0, r5, #28
 800c154:	d5c0      	bpl.n	800c0d8 <_strtod_l+0x88>
 800c156:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c15a:	e7bd      	b.n	800c0d8 <_strtod_l+0x88>
 800c15c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c160:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c166:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c16a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c16e:	e7f0      	b.n	800c152 <_strtod_l+0x102>
 800c170:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c2f4 <_strtod_l+0x2a4>
 800c174:	e7ed      	b.n	800c152 <_strtod_l+0x102>
 800c176:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c17a:	f04f 3aff 	mov.w	sl, #4294967295
 800c17e:	e7e8      	b.n	800c152 <_strtod_l+0x102>
 800c180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	9217      	str	r2, [sp, #92]	; 0x5c
 800c186:	785b      	ldrb	r3, [r3, #1]
 800c188:	2b30      	cmp	r3, #48	; 0x30
 800c18a:	d0f9      	beq.n	800c180 <_strtod_l+0x130>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0a3      	beq.n	800c0d8 <_strtod_l+0x88>
 800c190:	2301      	movs	r3, #1
 800c192:	f04f 0900 	mov.w	r9, #0
 800c196:	9304      	str	r3, [sp, #16]
 800c198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c19a:	9308      	str	r3, [sp, #32]
 800c19c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c1a0:	464f      	mov	r7, r9
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c1a6:	7806      	ldrb	r6, [r0, #0]
 800c1a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c1ac:	b2d9      	uxtb	r1, r3
 800c1ae:	2909      	cmp	r1, #9
 800c1b0:	d92a      	bls.n	800c208 <_strtod_l+0x1b8>
 800c1b2:	9905      	ldr	r1, [sp, #20]
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	f001 fe73 	bl	800dea0 <strncmp>
 800c1ba:	b398      	cbz	r0, 800c224 <_strtod_l+0x1d4>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	4632      	mov	r2, r6
 800c1c0:	463d      	mov	r5, r7
 800c1c2:	9005      	str	r0, [sp, #20]
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2a65      	cmp	r2, #101	; 0x65
 800c1c8:	d001      	beq.n	800c1ce <_strtod_l+0x17e>
 800c1ca:	2a45      	cmp	r2, #69	; 0x45
 800c1cc:	d118      	bne.n	800c200 <_strtod_l+0x1b0>
 800c1ce:	b91d      	cbnz	r5, 800c1d8 <_strtod_l+0x188>
 800c1d0:	9a04      	ldr	r2, [sp, #16]
 800c1d2:	4302      	orrs	r2, r0
 800c1d4:	d09e      	beq.n	800c114 <_strtod_l+0xc4>
 800c1d6:	2500      	movs	r5, #0
 800c1d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c1dc:	f108 0201 	add.w	r2, r8, #1
 800c1e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c1e6:	2a2b      	cmp	r2, #43	; 0x2b
 800c1e8:	d075      	beq.n	800c2d6 <_strtod_l+0x286>
 800c1ea:	2a2d      	cmp	r2, #45	; 0x2d
 800c1ec:	d07b      	beq.n	800c2e6 <_strtod_l+0x296>
 800c1ee:	f04f 0c00 	mov.w	ip, #0
 800c1f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c1f6:	2909      	cmp	r1, #9
 800c1f8:	f240 8082 	bls.w	800c300 <_strtod_l+0x2b0>
 800c1fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c200:	2600      	movs	r6, #0
 800c202:	e09d      	b.n	800c340 <_strtod_l+0x2f0>
 800c204:	2300      	movs	r3, #0
 800c206:	e7c4      	b.n	800c192 <_strtod_l+0x142>
 800c208:	2f08      	cmp	r7, #8
 800c20a:	bfd8      	it	le
 800c20c:	9907      	ldrle	r1, [sp, #28]
 800c20e:	f100 0001 	add.w	r0, r0, #1
 800c212:	bfda      	itte	le
 800c214:	fb02 3301 	mlale	r3, r2, r1, r3
 800c218:	9307      	strle	r3, [sp, #28]
 800c21a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c21e:	3701      	adds	r7, #1
 800c220:	9017      	str	r0, [sp, #92]	; 0x5c
 800c222:	e7bf      	b.n	800c1a4 <_strtod_l+0x154>
 800c224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c226:	195a      	adds	r2, r3, r5
 800c228:	9217      	str	r2, [sp, #92]	; 0x5c
 800c22a:	5d5a      	ldrb	r2, [r3, r5]
 800c22c:	2f00      	cmp	r7, #0
 800c22e:	d037      	beq.n	800c2a0 <_strtod_l+0x250>
 800c230:	9005      	str	r0, [sp, #20]
 800c232:	463d      	mov	r5, r7
 800c234:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c238:	2b09      	cmp	r3, #9
 800c23a:	d912      	bls.n	800c262 <_strtod_l+0x212>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e7c2      	b.n	800c1c6 <_strtod_l+0x176>
 800c240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	9217      	str	r2, [sp, #92]	; 0x5c
 800c246:	785a      	ldrb	r2, [r3, #1]
 800c248:	3001      	adds	r0, #1
 800c24a:	2a30      	cmp	r2, #48	; 0x30
 800c24c:	d0f8      	beq.n	800c240 <_strtod_l+0x1f0>
 800c24e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c252:	2b08      	cmp	r3, #8
 800c254:	f200 84d9 	bhi.w	800cc0a <_strtod_l+0xbba>
 800c258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c25a:	9005      	str	r0, [sp, #20]
 800c25c:	2000      	movs	r0, #0
 800c25e:	9308      	str	r3, [sp, #32]
 800c260:	4605      	mov	r5, r0
 800c262:	3a30      	subs	r2, #48	; 0x30
 800c264:	f100 0301 	add.w	r3, r0, #1
 800c268:	d014      	beq.n	800c294 <_strtod_l+0x244>
 800c26a:	9905      	ldr	r1, [sp, #20]
 800c26c:	4419      	add	r1, r3
 800c26e:	9105      	str	r1, [sp, #20]
 800c270:	462b      	mov	r3, r5
 800c272:	eb00 0e05 	add.w	lr, r0, r5
 800c276:	210a      	movs	r1, #10
 800c278:	4573      	cmp	r3, lr
 800c27a:	d113      	bne.n	800c2a4 <_strtod_l+0x254>
 800c27c:	182b      	adds	r3, r5, r0
 800c27e:	2b08      	cmp	r3, #8
 800c280:	f105 0501 	add.w	r5, r5, #1
 800c284:	4405      	add	r5, r0
 800c286:	dc1c      	bgt.n	800c2c2 <_strtod_l+0x272>
 800c288:	9907      	ldr	r1, [sp, #28]
 800c28a:	230a      	movs	r3, #10
 800c28c:	fb03 2301 	mla	r3, r3, r1, r2
 800c290:	9307      	str	r3, [sp, #28]
 800c292:	2300      	movs	r3, #0
 800c294:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c296:	1c51      	adds	r1, r2, #1
 800c298:	9117      	str	r1, [sp, #92]	; 0x5c
 800c29a:	7852      	ldrb	r2, [r2, #1]
 800c29c:	4618      	mov	r0, r3
 800c29e:	e7c9      	b.n	800c234 <_strtod_l+0x1e4>
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	e7d2      	b.n	800c24a <_strtod_l+0x1fa>
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	dc04      	bgt.n	800c2b2 <_strtod_l+0x262>
 800c2a8:	9e07      	ldr	r6, [sp, #28]
 800c2aa:	434e      	muls	r6, r1
 800c2ac:	9607      	str	r6, [sp, #28]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	e7e2      	b.n	800c278 <_strtod_l+0x228>
 800c2b2:	f103 0c01 	add.w	ip, r3, #1
 800c2b6:	f1bc 0f10 	cmp.w	ip, #16
 800c2ba:	bfd8      	it	le
 800c2bc:	fb01 f909 	mulle.w	r9, r1, r9
 800c2c0:	e7f5      	b.n	800c2ae <_strtod_l+0x25e>
 800c2c2:	2d10      	cmp	r5, #16
 800c2c4:	bfdc      	itt	le
 800c2c6:	230a      	movle	r3, #10
 800c2c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c2cc:	e7e1      	b.n	800c292 <_strtod_l+0x242>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9305      	str	r3, [sp, #20]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e77c      	b.n	800c1d0 <_strtod_l+0x180>
 800c2d6:	f04f 0c00 	mov.w	ip, #0
 800c2da:	f108 0202 	add.w	r2, r8, #2
 800c2de:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c2e4:	e785      	b.n	800c1f2 <_strtod_l+0x1a2>
 800c2e6:	f04f 0c01 	mov.w	ip, #1
 800c2ea:	e7f6      	b.n	800c2da <_strtod_l+0x28a>
 800c2ec:	08010208 	.word	0x08010208
 800c2f0:	0801013c 	.word	0x0801013c
 800c2f4:	7ff00000 	.word	0x7ff00000
 800c2f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2fa:	1c51      	adds	r1, r2, #1
 800c2fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c2fe:	7852      	ldrb	r2, [r2, #1]
 800c300:	2a30      	cmp	r2, #48	; 0x30
 800c302:	d0f9      	beq.n	800c2f8 <_strtod_l+0x2a8>
 800c304:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c308:	2908      	cmp	r1, #8
 800c30a:	f63f af79 	bhi.w	800c200 <_strtod_l+0x1b0>
 800c30e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c314:	9206      	str	r2, [sp, #24]
 800c316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c318:	1c51      	adds	r1, r2, #1
 800c31a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c31c:	7852      	ldrb	r2, [r2, #1]
 800c31e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c322:	2e09      	cmp	r6, #9
 800c324:	d937      	bls.n	800c396 <_strtod_l+0x346>
 800c326:	9e06      	ldr	r6, [sp, #24]
 800c328:	1b89      	subs	r1, r1, r6
 800c32a:	2908      	cmp	r1, #8
 800c32c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c330:	dc02      	bgt.n	800c338 <_strtod_l+0x2e8>
 800c332:	4576      	cmp	r6, lr
 800c334:	bfa8      	it	ge
 800c336:	4676      	movge	r6, lr
 800c338:	f1bc 0f00 	cmp.w	ip, #0
 800c33c:	d000      	beq.n	800c340 <_strtod_l+0x2f0>
 800c33e:	4276      	negs	r6, r6
 800c340:	2d00      	cmp	r5, #0
 800c342:	d14d      	bne.n	800c3e0 <_strtod_l+0x390>
 800c344:	9904      	ldr	r1, [sp, #16]
 800c346:	4301      	orrs	r1, r0
 800c348:	f47f aec6 	bne.w	800c0d8 <_strtod_l+0x88>
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f47f aee1 	bne.w	800c114 <_strtod_l+0xc4>
 800c352:	2a69      	cmp	r2, #105	; 0x69
 800c354:	d027      	beq.n	800c3a6 <_strtod_l+0x356>
 800c356:	dc24      	bgt.n	800c3a2 <_strtod_l+0x352>
 800c358:	2a49      	cmp	r2, #73	; 0x49
 800c35a:	d024      	beq.n	800c3a6 <_strtod_l+0x356>
 800c35c:	2a4e      	cmp	r2, #78	; 0x4e
 800c35e:	f47f aed9 	bne.w	800c114 <_strtod_l+0xc4>
 800c362:	499f      	ldr	r1, [pc, #636]	; (800c5e0 <_strtod_l+0x590>)
 800c364:	a817      	add	r0, sp, #92	; 0x5c
 800c366:	f000 ff45 	bl	800d1f4 <__match>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	f43f aed2 	beq.w	800c114 <_strtod_l+0xc4>
 800c370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b28      	cmp	r3, #40	; 0x28
 800c376:	d12d      	bne.n	800c3d4 <_strtod_l+0x384>
 800c378:	499a      	ldr	r1, [pc, #616]	; (800c5e4 <_strtod_l+0x594>)
 800c37a:	aa1a      	add	r2, sp, #104	; 0x68
 800c37c:	a817      	add	r0, sp, #92	; 0x5c
 800c37e:	f000 ff4d 	bl	800d21c <__hexnan>
 800c382:	2805      	cmp	r0, #5
 800c384:	d126      	bne.n	800c3d4 <_strtod_l+0x384>
 800c386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c388:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c38c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c390:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c394:	e6a0      	b.n	800c0d8 <_strtod_l+0x88>
 800c396:	210a      	movs	r1, #10
 800c398:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c39c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c3a0:	e7b9      	b.n	800c316 <_strtod_l+0x2c6>
 800c3a2:	2a6e      	cmp	r2, #110	; 0x6e
 800c3a4:	e7db      	b.n	800c35e <_strtod_l+0x30e>
 800c3a6:	4990      	ldr	r1, [pc, #576]	; (800c5e8 <_strtod_l+0x598>)
 800c3a8:	a817      	add	r0, sp, #92	; 0x5c
 800c3aa:	f000 ff23 	bl	800d1f4 <__match>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f43f aeb0 	beq.w	800c114 <_strtod_l+0xc4>
 800c3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3b6:	498d      	ldr	r1, [pc, #564]	; (800c5ec <_strtod_l+0x59c>)
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	a817      	add	r0, sp, #92	; 0x5c
 800c3bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3be:	f000 ff19 	bl	800d1f4 <__match>
 800c3c2:	b910      	cbnz	r0, 800c3ca <_strtod_l+0x37a>
 800c3c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c5fc <_strtod_l+0x5ac>
 800c3ce:	f04f 0a00 	mov.w	sl, #0
 800c3d2:	e681      	b.n	800c0d8 <_strtod_l+0x88>
 800c3d4:	4886      	ldr	r0, [pc, #536]	; (800c5f0 <_strtod_l+0x5a0>)
 800c3d6:	f001 fd4b 	bl	800de70 <nan>
 800c3da:	ec5b ab10 	vmov	sl, fp, d0
 800c3de:	e67b      	b.n	800c0d8 <_strtod_l+0x88>
 800c3e0:	9b05      	ldr	r3, [sp, #20]
 800c3e2:	9807      	ldr	r0, [sp, #28]
 800c3e4:	1af3      	subs	r3, r6, r3
 800c3e6:	2f00      	cmp	r7, #0
 800c3e8:	bf08      	it	eq
 800c3ea:	462f      	moveq	r7, r5
 800c3ec:	2d10      	cmp	r5, #16
 800c3ee:	9306      	str	r3, [sp, #24]
 800c3f0:	46a8      	mov	r8, r5
 800c3f2:	bfa8      	it	ge
 800c3f4:	f04f 0810 	movge.w	r8, #16
 800c3f8:	f7f4 f88c 	bl	8000514 <__aeabi_ui2d>
 800c3fc:	2d09      	cmp	r5, #9
 800c3fe:	4682      	mov	sl, r0
 800c400:	468b      	mov	fp, r1
 800c402:	dd13      	ble.n	800c42c <_strtod_l+0x3dc>
 800c404:	4b7b      	ldr	r3, [pc, #492]	; (800c5f4 <_strtod_l+0x5a4>)
 800c406:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c40a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c40e:	f7f4 f8fb 	bl	8000608 <__aeabi_dmul>
 800c412:	4682      	mov	sl, r0
 800c414:	4648      	mov	r0, r9
 800c416:	468b      	mov	fp, r1
 800c418:	f7f4 f87c 	bl	8000514 <__aeabi_ui2d>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f3 ff3a 	bl	800029c <__adddf3>
 800c428:	4682      	mov	sl, r0
 800c42a:	468b      	mov	fp, r1
 800c42c:	2d0f      	cmp	r5, #15
 800c42e:	dc38      	bgt.n	800c4a2 <_strtod_l+0x452>
 800c430:	9b06      	ldr	r3, [sp, #24]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f43f ae50 	beq.w	800c0d8 <_strtod_l+0x88>
 800c438:	dd24      	ble.n	800c484 <_strtod_l+0x434>
 800c43a:	2b16      	cmp	r3, #22
 800c43c:	dc0b      	bgt.n	800c456 <_strtod_l+0x406>
 800c43e:	496d      	ldr	r1, [pc, #436]	; (800c5f4 <_strtod_l+0x5a4>)
 800c440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c448:	4652      	mov	r2, sl
 800c44a:	465b      	mov	r3, fp
 800c44c:	f7f4 f8dc 	bl	8000608 <__aeabi_dmul>
 800c450:	4682      	mov	sl, r0
 800c452:	468b      	mov	fp, r1
 800c454:	e640      	b.n	800c0d8 <_strtod_l+0x88>
 800c456:	9a06      	ldr	r2, [sp, #24]
 800c458:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c45c:	4293      	cmp	r3, r2
 800c45e:	db20      	blt.n	800c4a2 <_strtod_l+0x452>
 800c460:	4c64      	ldr	r4, [pc, #400]	; (800c5f4 <_strtod_l+0x5a4>)
 800c462:	f1c5 050f 	rsb	r5, r5, #15
 800c466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c46a:	4652      	mov	r2, sl
 800c46c:	465b      	mov	r3, fp
 800c46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c472:	f7f4 f8c9 	bl	8000608 <__aeabi_dmul>
 800c476:	9b06      	ldr	r3, [sp, #24]
 800c478:	1b5d      	subs	r5, r3, r5
 800c47a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c47e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c482:	e7e3      	b.n	800c44c <_strtod_l+0x3fc>
 800c484:	9b06      	ldr	r3, [sp, #24]
 800c486:	3316      	adds	r3, #22
 800c488:	db0b      	blt.n	800c4a2 <_strtod_l+0x452>
 800c48a:	9b05      	ldr	r3, [sp, #20]
 800c48c:	1b9e      	subs	r6, r3, r6
 800c48e:	4b59      	ldr	r3, [pc, #356]	; (800c5f4 <_strtod_l+0x5a4>)
 800c490:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c494:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c498:	4650      	mov	r0, sl
 800c49a:	4659      	mov	r1, fp
 800c49c:	f7f4 f9de 	bl	800085c <__aeabi_ddiv>
 800c4a0:	e7d6      	b.n	800c450 <_strtod_l+0x400>
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	eba5 0808 	sub.w	r8, r5, r8
 800c4a8:	4498      	add	r8, r3
 800c4aa:	f1b8 0f00 	cmp.w	r8, #0
 800c4ae:	dd74      	ble.n	800c59a <_strtod_l+0x54a>
 800c4b0:	f018 030f 	ands.w	r3, r8, #15
 800c4b4:	d00a      	beq.n	800c4cc <_strtod_l+0x47c>
 800c4b6:	494f      	ldr	r1, [pc, #316]	; (800c5f4 <_strtod_l+0x5a4>)
 800c4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4bc:	4652      	mov	r2, sl
 800c4be:	465b      	mov	r3, fp
 800c4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c4:	f7f4 f8a0 	bl	8000608 <__aeabi_dmul>
 800c4c8:	4682      	mov	sl, r0
 800c4ca:	468b      	mov	fp, r1
 800c4cc:	f038 080f 	bics.w	r8, r8, #15
 800c4d0:	d04f      	beq.n	800c572 <_strtod_l+0x522>
 800c4d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c4d6:	dd22      	ble.n	800c51e <_strtod_l+0x4ce>
 800c4d8:	2500      	movs	r5, #0
 800c4da:	462e      	mov	r6, r5
 800c4dc:	9507      	str	r5, [sp, #28]
 800c4de:	9505      	str	r5, [sp, #20]
 800c4e0:	2322      	movs	r3, #34	; 0x22
 800c4e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c5fc <_strtod_l+0x5ac>
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	f04f 0a00 	mov.w	sl, #0
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f43f adf2 	beq.w	800c0d8 <_strtod_l+0x88>
 800c4f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 ff8c 	bl	800d414 <_Bfree>
 800c4fc:	9905      	ldr	r1, [sp, #20]
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 ff88 	bl	800d414 <_Bfree>
 800c504:	4631      	mov	r1, r6
 800c506:	4620      	mov	r0, r4
 800c508:	f000 ff84 	bl	800d414 <_Bfree>
 800c50c:	9907      	ldr	r1, [sp, #28]
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 ff80 	bl	800d414 <_Bfree>
 800c514:	4629      	mov	r1, r5
 800c516:	4620      	mov	r0, r4
 800c518:	f000 ff7c 	bl	800d414 <_Bfree>
 800c51c:	e5dc      	b.n	800c0d8 <_strtod_l+0x88>
 800c51e:	4b36      	ldr	r3, [pc, #216]	; (800c5f8 <_strtod_l+0x5a8>)
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	2300      	movs	r3, #0
 800c524:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c528:	4650      	mov	r0, sl
 800c52a:	4659      	mov	r1, fp
 800c52c:	4699      	mov	r9, r3
 800c52e:	f1b8 0f01 	cmp.w	r8, #1
 800c532:	dc21      	bgt.n	800c578 <_strtod_l+0x528>
 800c534:	b10b      	cbz	r3, 800c53a <_strtod_l+0x4ea>
 800c536:	4682      	mov	sl, r0
 800c538:	468b      	mov	fp, r1
 800c53a:	4b2f      	ldr	r3, [pc, #188]	; (800c5f8 <_strtod_l+0x5a8>)
 800c53c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c540:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c544:	4652      	mov	r2, sl
 800c546:	465b      	mov	r3, fp
 800c548:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c54c:	f7f4 f85c 	bl	8000608 <__aeabi_dmul>
 800c550:	4b2a      	ldr	r3, [pc, #168]	; (800c5fc <_strtod_l+0x5ac>)
 800c552:	460a      	mov	r2, r1
 800c554:	400b      	ands	r3, r1
 800c556:	492a      	ldr	r1, [pc, #168]	; (800c600 <_strtod_l+0x5b0>)
 800c558:	428b      	cmp	r3, r1
 800c55a:	4682      	mov	sl, r0
 800c55c:	d8bc      	bhi.n	800c4d8 <_strtod_l+0x488>
 800c55e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c562:	428b      	cmp	r3, r1
 800c564:	bf86      	itte	hi
 800c566:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c604 <_strtod_l+0x5b4>
 800c56a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c56e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c572:	2300      	movs	r3, #0
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	e084      	b.n	800c682 <_strtod_l+0x632>
 800c578:	f018 0f01 	tst.w	r8, #1
 800c57c:	d005      	beq.n	800c58a <_strtod_l+0x53a>
 800c57e:	9b04      	ldr	r3, [sp, #16]
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f4 f840 	bl	8000608 <__aeabi_dmul>
 800c588:	2301      	movs	r3, #1
 800c58a:	9a04      	ldr	r2, [sp, #16]
 800c58c:	3208      	adds	r2, #8
 800c58e:	f109 0901 	add.w	r9, r9, #1
 800c592:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c596:	9204      	str	r2, [sp, #16]
 800c598:	e7c9      	b.n	800c52e <_strtod_l+0x4de>
 800c59a:	d0ea      	beq.n	800c572 <_strtod_l+0x522>
 800c59c:	f1c8 0800 	rsb	r8, r8, #0
 800c5a0:	f018 020f 	ands.w	r2, r8, #15
 800c5a4:	d00a      	beq.n	800c5bc <_strtod_l+0x56c>
 800c5a6:	4b13      	ldr	r3, [pc, #76]	; (800c5f4 <_strtod_l+0x5a4>)
 800c5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f4 f952 	bl	800085c <__aeabi_ddiv>
 800c5b8:	4682      	mov	sl, r0
 800c5ba:	468b      	mov	fp, r1
 800c5bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c5c0:	d0d7      	beq.n	800c572 <_strtod_l+0x522>
 800c5c2:	f1b8 0f1f 	cmp.w	r8, #31
 800c5c6:	dd1f      	ble.n	800c608 <_strtod_l+0x5b8>
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	462e      	mov	r6, r5
 800c5cc:	9507      	str	r5, [sp, #28]
 800c5ce:	9505      	str	r5, [sp, #20]
 800c5d0:	2322      	movs	r3, #34	; 0x22
 800c5d2:	f04f 0a00 	mov.w	sl, #0
 800c5d6:	f04f 0b00 	mov.w	fp, #0
 800c5da:	6023      	str	r3, [r4, #0]
 800c5dc:	e786      	b.n	800c4ec <_strtod_l+0x49c>
 800c5de:	bf00      	nop
 800c5e0:	08010139 	.word	0x08010139
 800c5e4:	08010150 	.word	0x08010150
 800c5e8:	08010130 	.word	0x08010130
 800c5ec:	08010133 	.word	0x08010133
 800c5f0:	080103c7 	.word	0x080103c7
 800c5f4:	080102b8 	.word	0x080102b8
 800c5f8:	08010290 	.word	0x08010290
 800c5fc:	7ff00000 	.word	0x7ff00000
 800c600:	7ca00000 	.word	0x7ca00000
 800c604:	7fefffff 	.word	0x7fefffff
 800c608:	f018 0310 	ands.w	r3, r8, #16
 800c60c:	bf18      	it	ne
 800c60e:	236a      	movne	r3, #106	; 0x6a
 800c610:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c9c0 <_strtod_l+0x970>
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	4650      	mov	r0, sl
 800c618:	4659      	mov	r1, fp
 800c61a:	2300      	movs	r3, #0
 800c61c:	f018 0f01 	tst.w	r8, #1
 800c620:	d004      	beq.n	800c62c <_strtod_l+0x5dc>
 800c622:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c626:	f7f3 ffef 	bl	8000608 <__aeabi_dmul>
 800c62a:	2301      	movs	r3, #1
 800c62c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c630:	f109 0908 	add.w	r9, r9, #8
 800c634:	d1f2      	bne.n	800c61c <_strtod_l+0x5cc>
 800c636:	b10b      	cbz	r3, 800c63c <_strtod_l+0x5ec>
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	9b04      	ldr	r3, [sp, #16]
 800c63e:	b1c3      	cbz	r3, 800c672 <_strtod_l+0x622>
 800c640:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c644:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c648:	2b00      	cmp	r3, #0
 800c64a:	4659      	mov	r1, fp
 800c64c:	dd11      	ble.n	800c672 <_strtod_l+0x622>
 800c64e:	2b1f      	cmp	r3, #31
 800c650:	f340 8124 	ble.w	800c89c <_strtod_l+0x84c>
 800c654:	2b34      	cmp	r3, #52	; 0x34
 800c656:	bfde      	ittt	le
 800c658:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c65c:	f04f 33ff 	movle.w	r3, #4294967295
 800c660:	fa03 f202 	lslle.w	r2, r3, r2
 800c664:	f04f 0a00 	mov.w	sl, #0
 800c668:	bfcc      	ite	gt
 800c66a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c66e:	ea02 0b01 	andle.w	fp, r2, r1
 800c672:	2200      	movs	r2, #0
 800c674:	2300      	movs	r3, #0
 800c676:	4650      	mov	r0, sl
 800c678:	4659      	mov	r1, fp
 800c67a:	f7f4 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c67e:	2800      	cmp	r0, #0
 800c680:	d1a2      	bne.n	800c5c8 <_strtod_l+0x578>
 800c682:	9b07      	ldr	r3, [sp, #28]
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	9908      	ldr	r1, [sp, #32]
 800c688:	462b      	mov	r3, r5
 800c68a:	463a      	mov	r2, r7
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 ff29 	bl	800d4e4 <__s2b>
 800c692:	9007      	str	r0, [sp, #28]
 800c694:	2800      	cmp	r0, #0
 800c696:	f43f af1f 	beq.w	800c4d8 <_strtod_l+0x488>
 800c69a:	9b05      	ldr	r3, [sp, #20]
 800c69c:	1b9e      	subs	r6, r3, r6
 800c69e:	9b06      	ldr	r3, [sp, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bfb4      	ite	lt
 800c6a4:	4633      	movlt	r3, r6
 800c6a6:	2300      	movge	r3, #0
 800c6a8:	930c      	str	r3, [sp, #48]	; 0x30
 800c6aa:	9b06      	ldr	r3, [sp, #24]
 800c6ac:	2500      	movs	r5, #0
 800c6ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c6b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c6b4:	462e      	mov	r6, r5
 800c6b6:	9b07      	ldr	r3, [sp, #28]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	6859      	ldr	r1, [r3, #4]
 800c6bc:	f000 fe6a 	bl	800d394 <_Balloc>
 800c6c0:	9005      	str	r0, [sp, #20]
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f43f af0c 	beq.w	800c4e0 <_strtod_l+0x490>
 800c6c8:	9b07      	ldr	r3, [sp, #28]
 800c6ca:	691a      	ldr	r2, [r3, #16]
 800c6cc:	3202      	adds	r2, #2
 800c6ce:	f103 010c 	add.w	r1, r3, #12
 800c6d2:	0092      	lsls	r2, r2, #2
 800c6d4:	300c      	adds	r0, #12
 800c6d6:	f000 fe4f 	bl	800d378 <memcpy>
 800c6da:	ec4b ab10 	vmov	d0, sl, fp
 800c6de:	aa1a      	add	r2, sp, #104	; 0x68
 800c6e0:	a919      	add	r1, sp, #100	; 0x64
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f001 fa44 	bl	800db70 <__d2b>
 800c6e8:	ec4b ab18 	vmov	d8, sl, fp
 800c6ec:	9018      	str	r0, [sp, #96]	; 0x60
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f aef6 	beq.w	800c4e0 <_strtod_l+0x490>
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 ff8e 	bl	800d618 <__i2b>
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f43f aeee 	beq.w	800c4e0 <_strtod_l+0x490>
 800c704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c706:	9904      	ldr	r1, [sp, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfab      	itete	ge
 800c70c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c70e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c710:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c712:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c716:	bfac      	ite	ge
 800c718:	eb03 0902 	addge.w	r9, r3, r2
 800c71c:	1ad7      	sublt	r7, r2, r3
 800c71e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c720:	eba3 0801 	sub.w	r8, r3, r1
 800c724:	4490      	add	r8, r2
 800c726:	4ba1      	ldr	r3, [pc, #644]	; (800c9ac <_strtod_l+0x95c>)
 800c728:	f108 38ff 	add.w	r8, r8, #4294967295
 800c72c:	4598      	cmp	r8, r3
 800c72e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c732:	f280 80c7 	bge.w	800c8c4 <_strtod_l+0x874>
 800c736:	eba3 0308 	sub.w	r3, r3, r8
 800c73a:	2b1f      	cmp	r3, #31
 800c73c:	eba2 0203 	sub.w	r2, r2, r3
 800c740:	f04f 0101 	mov.w	r1, #1
 800c744:	f300 80b1 	bgt.w	800c8aa <_strtod_l+0x85a>
 800c748:	fa01 f303 	lsl.w	r3, r1, r3
 800c74c:	930d      	str	r3, [sp, #52]	; 0x34
 800c74e:	2300      	movs	r3, #0
 800c750:	9308      	str	r3, [sp, #32]
 800c752:	eb09 0802 	add.w	r8, r9, r2
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	45c1      	cmp	r9, r8
 800c75a:	4417      	add	r7, r2
 800c75c:	441f      	add	r7, r3
 800c75e:	464b      	mov	r3, r9
 800c760:	bfa8      	it	ge
 800c762:	4643      	movge	r3, r8
 800c764:	42bb      	cmp	r3, r7
 800c766:	bfa8      	it	ge
 800c768:	463b      	movge	r3, r7
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bfc2      	ittt	gt
 800c76e:	eba8 0803 	subgt.w	r8, r8, r3
 800c772:	1aff      	subgt	r7, r7, r3
 800c774:	eba9 0903 	subgt.w	r9, r9, r3
 800c778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dd17      	ble.n	800c7ae <_strtod_l+0x75e>
 800c77e:	4631      	mov	r1, r6
 800c780:	461a      	mov	r2, r3
 800c782:	4620      	mov	r0, r4
 800c784:	f001 f808 	bl	800d798 <__pow5mult>
 800c788:	4606      	mov	r6, r0
 800c78a:	2800      	cmp	r0, #0
 800c78c:	f43f aea8 	beq.w	800c4e0 <_strtod_l+0x490>
 800c790:	4601      	mov	r1, r0
 800c792:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c794:	4620      	mov	r0, r4
 800c796:	f000 ff55 	bl	800d644 <__multiply>
 800c79a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f43f ae9f 	beq.w	800c4e0 <_strtod_l+0x490>
 800c7a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f000 fe35 	bl	800d414 <_Bfree>
 800c7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ac:	9318      	str	r3, [sp, #96]	; 0x60
 800c7ae:	f1b8 0f00 	cmp.w	r8, #0
 800c7b2:	f300 808c 	bgt.w	800c8ce <_strtod_l+0x87e>
 800c7b6:	9b06      	ldr	r3, [sp, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dd08      	ble.n	800c7ce <_strtod_l+0x77e>
 800c7bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7be:	9905      	ldr	r1, [sp, #20]
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 ffe9 	bl	800d798 <__pow5mult>
 800c7c6:	9005      	str	r0, [sp, #20]
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	f43f ae89 	beq.w	800c4e0 <_strtod_l+0x490>
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	dd08      	ble.n	800c7e4 <_strtod_l+0x794>
 800c7d2:	9905      	ldr	r1, [sp, #20]
 800c7d4:	463a      	mov	r2, r7
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f001 f838 	bl	800d84c <__lshift>
 800c7dc:	9005      	str	r0, [sp, #20]
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f43f ae7e 	beq.w	800c4e0 <_strtod_l+0x490>
 800c7e4:	f1b9 0f00 	cmp.w	r9, #0
 800c7e8:	dd08      	ble.n	800c7fc <_strtod_l+0x7ac>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	464a      	mov	r2, r9
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f001 f82c 	bl	800d84c <__lshift>
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f43f ae72 	beq.w	800c4e0 <_strtod_l+0x490>
 800c7fc:	9a05      	ldr	r2, [sp, #20]
 800c7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c800:	4620      	mov	r0, r4
 800c802:	f001 f8af 	bl	800d964 <__mdiff>
 800c806:	4605      	mov	r5, r0
 800c808:	2800      	cmp	r0, #0
 800c80a:	f43f ae69 	beq.w	800c4e0 <_strtod_l+0x490>
 800c80e:	68c3      	ldr	r3, [r0, #12]
 800c810:	930b      	str	r3, [sp, #44]	; 0x2c
 800c812:	2300      	movs	r3, #0
 800c814:	60c3      	str	r3, [r0, #12]
 800c816:	4631      	mov	r1, r6
 800c818:	f001 f888 	bl	800d92c <__mcmp>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	da60      	bge.n	800c8e2 <_strtod_l+0x892>
 800c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c822:	ea53 030a 	orrs.w	r3, r3, sl
 800c826:	f040 8082 	bne.w	800c92e <_strtod_l+0x8de>
 800c82a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d17d      	bne.n	800c92e <_strtod_l+0x8de>
 800c832:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c836:	0d1b      	lsrs	r3, r3, #20
 800c838:	051b      	lsls	r3, r3, #20
 800c83a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c83e:	d976      	bls.n	800c92e <_strtod_l+0x8de>
 800c840:	696b      	ldr	r3, [r5, #20]
 800c842:	b913      	cbnz	r3, 800c84a <_strtod_l+0x7fa>
 800c844:	692b      	ldr	r3, [r5, #16]
 800c846:	2b01      	cmp	r3, #1
 800c848:	dd71      	ble.n	800c92e <_strtod_l+0x8de>
 800c84a:	4629      	mov	r1, r5
 800c84c:	2201      	movs	r2, #1
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 fffc 	bl	800d84c <__lshift>
 800c854:	4631      	mov	r1, r6
 800c856:	4605      	mov	r5, r0
 800c858:	f001 f868 	bl	800d92c <__mcmp>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	dd66      	ble.n	800c92e <_strtod_l+0x8de>
 800c860:	9904      	ldr	r1, [sp, #16]
 800c862:	4a53      	ldr	r2, [pc, #332]	; (800c9b0 <_strtod_l+0x960>)
 800c864:	465b      	mov	r3, fp
 800c866:	2900      	cmp	r1, #0
 800c868:	f000 8081 	beq.w	800c96e <_strtod_l+0x91e>
 800c86c:	ea02 010b 	and.w	r1, r2, fp
 800c870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c874:	dc7b      	bgt.n	800c96e <_strtod_l+0x91e>
 800c876:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c87a:	f77f aea9 	ble.w	800c5d0 <_strtod_l+0x580>
 800c87e:	4b4d      	ldr	r3, [pc, #308]	; (800c9b4 <_strtod_l+0x964>)
 800c880:	4650      	mov	r0, sl
 800c882:	4659      	mov	r1, fp
 800c884:	2200      	movs	r2, #0
 800c886:	f7f3 febf 	bl	8000608 <__aeabi_dmul>
 800c88a:	460b      	mov	r3, r1
 800c88c:	4303      	orrs	r3, r0
 800c88e:	bf08      	it	eq
 800c890:	2322      	moveq	r3, #34	; 0x22
 800c892:	4682      	mov	sl, r0
 800c894:	468b      	mov	fp, r1
 800c896:	bf08      	it	eq
 800c898:	6023      	streq	r3, [r4, #0]
 800c89a:	e62b      	b.n	800c4f4 <_strtod_l+0x4a4>
 800c89c:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	ea03 0a0a 	and.w	sl, r3, sl
 800c8a8:	e6e3      	b.n	800c672 <_strtod_l+0x622>
 800c8aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c8ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c8b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c8b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c8ba:	fa01 f308 	lsl.w	r3, r1, r8
 800c8be:	9308      	str	r3, [sp, #32]
 800c8c0:	910d      	str	r1, [sp, #52]	; 0x34
 800c8c2:	e746      	b.n	800c752 <_strtod_l+0x702>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9308      	str	r3, [sp, #32]
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	930d      	str	r3, [sp, #52]	; 0x34
 800c8cc:	e741      	b.n	800c752 <_strtod_l+0x702>
 800c8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f000 ffba 	bl	800d84c <__lshift>
 800c8d8:	9018      	str	r0, [sp, #96]	; 0x60
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	f47f af6b 	bne.w	800c7b6 <_strtod_l+0x766>
 800c8e0:	e5fe      	b.n	800c4e0 <_strtod_l+0x490>
 800c8e2:	465f      	mov	r7, fp
 800c8e4:	d16e      	bne.n	800c9c4 <_strtod_l+0x974>
 800c8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ec:	b342      	cbz	r2, 800c940 <_strtod_l+0x8f0>
 800c8ee:	4a32      	ldr	r2, [pc, #200]	; (800c9b8 <_strtod_l+0x968>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d128      	bne.n	800c946 <_strtod_l+0x8f6>
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	4651      	mov	r1, sl
 800c8f8:	b1eb      	cbz	r3, 800c936 <_strtod_l+0x8e6>
 800c8fa:	4b2d      	ldr	r3, [pc, #180]	; (800c9b0 <_strtod_l+0x960>)
 800c8fc:	403b      	ands	r3, r7
 800c8fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c902:	f04f 32ff 	mov.w	r2, #4294967295
 800c906:	d819      	bhi.n	800c93c <_strtod_l+0x8ec>
 800c908:	0d1b      	lsrs	r3, r3, #20
 800c90a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c90e:	fa02 f303 	lsl.w	r3, r2, r3
 800c912:	4299      	cmp	r1, r3
 800c914:	d117      	bne.n	800c946 <_strtod_l+0x8f6>
 800c916:	4b29      	ldr	r3, [pc, #164]	; (800c9bc <_strtod_l+0x96c>)
 800c918:	429f      	cmp	r7, r3
 800c91a:	d102      	bne.n	800c922 <_strtod_l+0x8d2>
 800c91c:	3101      	adds	r1, #1
 800c91e:	f43f addf 	beq.w	800c4e0 <_strtod_l+0x490>
 800c922:	4b23      	ldr	r3, [pc, #140]	; (800c9b0 <_strtod_l+0x960>)
 800c924:	403b      	ands	r3, r7
 800c926:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c92a:	f04f 0a00 	mov.w	sl, #0
 800c92e:	9b04      	ldr	r3, [sp, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1a4      	bne.n	800c87e <_strtod_l+0x82e>
 800c934:	e5de      	b.n	800c4f4 <_strtod_l+0x4a4>
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	e7ea      	b.n	800c912 <_strtod_l+0x8c2>
 800c93c:	4613      	mov	r3, r2
 800c93e:	e7e8      	b.n	800c912 <_strtod_l+0x8c2>
 800c940:	ea53 030a 	orrs.w	r3, r3, sl
 800c944:	d08c      	beq.n	800c860 <_strtod_l+0x810>
 800c946:	9b08      	ldr	r3, [sp, #32]
 800c948:	b1db      	cbz	r3, 800c982 <_strtod_l+0x932>
 800c94a:	423b      	tst	r3, r7
 800c94c:	d0ef      	beq.n	800c92e <_strtod_l+0x8de>
 800c94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c950:	9a04      	ldr	r2, [sp, #16]
 800c952:	4650      	mov	r0, sl
 800c954:	4659      	mov	r1, fp
 800c956:	b1c3      	cbz	r3, 800c98a <_strtod_l+0x93a>
 800c958:	f7ff fb5c 	bl	800c014 <sulp>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	ec51 0b18 	vmov	r0, r1, d8
 800c964:	f7f3 fc9a 	bl	800029c <__adddf3>
 800c968:	4682      	mov	sl, r0
 800c96a:	468b      	mov	fp, r1
 800c96c:	e7df      	b.n	800c92e <_strtod_l+0x8de>
 800c96e:	4013      	ands	r3, r2
 800c970:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c974:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c978:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c97c:	f04f 3aff 	mov.w	sl, #4294967295
 800c980:	e7d5      	b.n	800c92e <_strtod_l+0x8de>
 800c982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c984:	ea13 0f0a 	tst.w	r3, sl
 800c988:	e7e0      	b.n	800c94c <_strtod_l+0x8fc>
 800c98a:	f7ff fb43 	bl	800c014 <sulp>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	ec51 0b18 	vmov	r0, r1, d8
 800c996:	f7f3 fc7f 	bl	8000298 <__aeabi_dsub>
 800c99a:	2200      	movs	r2, #0
 800c99c:	2300      	movs	r3, #0
 800c99e:	4682      	mov	sl, r0
 800c9a0:	468b      	mov	fp, r1
 800c9a2:	f7f4 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d0c1      	beq.n	800c92e <_strtod_l+0x8de>
 800c9aa:	e611      	b.n	800c5d0 <_strtod_l+0x580>
 800c9ac:	fffffc02 	.word	0xfffffc02
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	39500000 	.word	0x39500000
 800c9b8:	000fffff 	.word	0x000fffff
 800c9bc:	7fefffff 	.word	0x7fefffff
 800c9c0:	08010168 	.word	0x08010168
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f001 f92e 	bl	800dc28 <__ratio>
 800c9cc:	ec59 8b10 	vmov	r8, r9, d0
 800c9d0:	ee10 0a10 	vmov	r0, s0
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9da:	4649      	mov	r1, r9
 800c9dc:	f7f4 f890 	bl	8000b00 <__aeabi_dcmple>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d07a      	beq.n	800cada <_strtod_l+0xa8a>
 800c9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d04a      	beq.n	800ca80 <_strtod_l+0xa30>
 800c9ea:	4b95      	ldr	r3, [pc, #596]	; (800cc40 <_strtod_l+0xbf0>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cc40 <_strtod_l+0xbf0>
 800c9f6:	f04f 0800 	mov.w	r8, #0
 800c9fa:	4b92      	ldr	r3, [pc, #584]	; (800cc44 <_strtod_l+0xbf4>)
 800c9fc:	403b      	ands	r3, r7
 800c9fe:	930d      	str	r3, [sp, #52]	; 0x34
 800ca00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca02:	4b91      	ldr	r3, [pc, #580]	; (800cc48 <_strtod_l+0xbf8>)
 800ca04:	429a      	cmp	r2, r3
 800ca06:	f040 80b0 	bne.w	800cb6a <_strtod_l+0xb1a>
 800ca0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ca12:	ec4b ab10 	vmov	d0, sl, fp
 800ca16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca1a:	f001 f82d 	bl	800da78 <__ulp>
 800ca1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca22:	ec53 2b10 	vmov	r2, r3, d0
 800ca26:	f7f3 fdef 	bl	8000608 <__aeabi_dmul>
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	f7f3 fc35 	bl	800029c <__adddf3>
 800ca32:	460b      	mov	r3, r1
 800ca34:	4983      	ldr	r1, [pc, #524]	; (800cc44 <_strtod_l+0xbf4>)
 800ca36:	4a85      	ldr	r2, [pc, #532]	; (800cc4c <_strtod_l+0xbfc>)
 800ca38:	4019      	ands	r1, r3
 800ca3a:	4291      	cmp	r1, r2
 800ca3c:	4682      	mov	sl, r0
 800ca3e:	d960      	bls.n	800cb02 <_strtod_l+0xab2>
 800ca40:	ee18 3a90 	vmov	r3, s17
 800ca44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d104      	bne.n	800ca56 <_strtod_l+0xa06>
 800ca4c:	ee18 3a10 	vmov	r3, s16
 800ca50:	3301      	adds	r3, #1
 800ca52:	f43f ad45 	beq.w	800c4e0 <_strtod_l+0x490>
 800ca56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cc58 <_strtod_l+0xc08>
 800ca5a:	f04f 3aff 	mov.w	sl, #4294967295
 800ca5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fcd7 	bl	800d414 <_Bfree>
 800ca66:	9905      	ldr	r1, [sp, #20]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 fcd3 	bl	800d414 <_Bfree>
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fccf 	bl	800d414 <_Bfree>
 800ca76:	4629      	mov	r1, r5
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 fccb 	bl	800d414 <_Bfree>
 800ca7e:	e61a      	b.n	800c6b6 <_strtod_l+0x666>
 800ca80:	f1ba 0f00 	cmp.w	sl, #0
 800ca84:	d11b      	bne.n	800cabe <_strtod_l+0xa6e>
 800ca86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca8a:	b9f3      	cbnz	r3, 800caca <_strtod_l+0xa7a>
 800ca8c:	4b6c      	ldr	r3, [pc, #432]	; (800cc40 <_strtod_l+0xbf0>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4640      	mov	r0, r8
 800ca92:	4649      	mov	r1, r9
 800ca94:	f7f4 f82a 	bl	8000aec <__aeabi_dcmplt>
 800ca98:	b9d0      	cbnz	r0, 800cad0 <_strtod_l+0xa80>
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	4b6c      	ldr	r3, [pc, #432]	; (800cc50 <_strtod_l+0xc00>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	f7f3 fdb1 	bl	8000608 <__aeabi_dmul>
 800caa6:	4680      	mov	r8, r0
 800caa8:	4689      	mov	r9, r1
 800caaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800caae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cab2:	9315      	str	r3, [sp, #84]	; 0x54
 800cab4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cab8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cabc:	e79d      	b.n	800c9fa <_strtod_l+0x9aa>
 800cabe:	f1ba 0f01 	cmp.w	sl, #1
 800cac2:	d102      	bne.n	800caca <_strtod_l+0xa7a>
 800cac4:	2f00      	cmp	r7, #0
 800cac6:	f43f ad83 	beq.w	800c5d0 <_strtod_l+0x580>
 800caca:	4b62      	ldr	r3, [pc, #392]	; (800cc54 <_strtod_l+0xc04>)
 800cacc:	2200      	movs	r2, #0
 800cace:	e78e      	b.n	800c9ee <_strtod_l+0x99e>
 800cad0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cc50 <_strtod_l+0xc00>
 800cad4:	f04f 0800 	mov.w	r8, #0
 800cad8:	e7e7      	b.n	800caaa <_strtod_l+0xa5a>
 800cada:	4b5d      	ldr	r3, [pc, #372]	; (800cc50 <_strtod_l+0xc00>)
 800cadc:	4640      	mov	r0, r8
 800cade:	4649      	mov	r1, r9
 800cae0:	2200      	movs	r2, #0
 800cae2:	f7f3 fd91 	bl	8000608 <__aeabi_dmul>
 800cae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cae8:	4680      	mov	r8, r0
 800caea:	4689      	mov	r9, r1
 800caec:	b933      	cbnz	r3, 800cafc <_strtod_l+0xaac>
 800caee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caf2:	900e      	str	r0, [sp, #56]	; 0x38
 800caf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800caf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cafa:	e7dd      	b.n	800cab8 <_strtod_l+0xa68>
 800cafc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cb00:	e7f9      	b.n	800caf6 <_strtod_l+0xaa6>
 800cb02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cb06:	9b04      	ldr	r3, [sp, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1a8      	bne.n	800ca5e <_strtod_l+0xa0e>
 800cb0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb12:	0d1b      	lsrs	r3, r3, #20
 800cb14:	051b      	lsls	r3, r3, #20
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d1a1      	bne.n	800ca5e <_strtod_l+0xa0e>
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	f7f4 f8ab 	bl	8000c78 <__aeabi_d2lz>
 800cb22:	f7f3 fd43 	bl	80005ac <__aeabi_l2d>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fbb3 	bl	8000298 <__aeabi_dsub>
 800cb32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb38:	ea43 030a 	orr.w	r3, r3, sl
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	4680      	mov	r8, r0
 800cb40:	4689      	mov	r9, r1
 800cb42:	d055      	beq.n	800cbf0 <_strtod_l+0xba0>
 800cb44:	a336      	add	r3, pc, #216	; (adr r3, 800cc20 <_strtod_l+0xbd0>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 ffcf 	bl	8000aec <__aeabi_dcmplt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f47f acd0 	bne.w	800c4f4 <_strtod_l+0x4a4>
 800cb54:	a334      	add	r3, pc, #208	; (adr r3, 800cc28 <_strtod_l+0xbd8>)
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	4640      	mov	r0, r8
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	f7f3 ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f43f af7b 	beq.w	800ca5e <_strtod_l+0xa0e>
 800cb68:	e4c4      	b.n	800c4f4 <_strtod_l+0x4a4>
 800cb6a:	9b04      	ldr	r3, [sp, #16]
 800cb6c:	b333      	cbz	r3, 800cbbc <_strtod_l+0xb6c>
 800cb6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb74:	d822      	bhi.n	800cbbc <_strtod_l+0xb6c>
 800cb76:	a32e      	add	r3, pc, #184	; (adr r3, 800cc30 <_strtod_l+0xbe0>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	4649      	mov	r1, r9
 800cb80:	f7f3 ffbe 	bl	8000b00 <__aeabi_dcmple>
 800cb84:	b1a0      	cbz	r0, 800cbb0 <_strtod_l+0xb60>
 800cb86:	4649      	mov	r1, r9
 800cb88:	4640      	mov	r0, r8
 800cb8a:	f7f3 ffed 	bl	8000b68 <__aeabi_d2uiz>
 800cb8e:	2801      	cmp	r0, #1
 800cb90:	bf38      	it	cc
 800cb92:	2001      	movcc	r0, #1
 800cb94:	f7f3 fcbe 	bl	8000514 <__aeabi_ui2d>
 800cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	bb23      	cbnz	r3, 800cbea <_strtod_l+0xb9a>
 800cba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cba4:	9010      	str	r0, [sp, #64]	; 0x40
 800cba6:	9311      	str	r3, [sp, #68]	; 0x44
 800cba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	9309      	str	r3, [sp, #36]	; 0x24
 800cbbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbc0:	eeb0 0a48 	vmov.f32	s0, s16
 800cbc4:	eef0 0a68 	vmov.f32	s1, s17
 800cbc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cbcc:	f000 ff54 	bl	800da78 <__ulp>
 800cbd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbd4:	ec53 2b10 	vmov	r2, r3, d0
 800cbd8:	f7f3 fd16 	bl	8000608 <__aeabi_dmul>
 800cbdc:	ec53 2b18 	vmov	r2, r3, d8
 800cbe0:	f7f3 fb5c 	bl	800029c <__adddf3>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	468b      	mov	fp, r1
 800cbe8:	e78d      	b.n	800cb06 <_strtod_l+0xab6>
 800cbea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cbee:	e7db      	b.n	800cba8 <_strtod_l+0xb58>
 800cbf0:	a311      	add	r3, pc, #68	; (adr r3, 800cc38 <_strtod_l+0xbe8>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 ff79 	bl	8000aec <__aeabi_dcmplt>
 800cbfa:	e7b2      	b.n	800cb62 <_strtod_l+0xb12>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	930a      	str	r3, [sp, #40]	; 0x28
 800cc00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	f7ff ba6b 	b.w	800c0e0 <_strtod_l+0x90>
 800cc0a:	2a65      	cmp	r2, #101	; 0x65
 800cc0c:	f43f ab5f 	beq.w	800c2ce <_strtod_l+0x27e>
 800cc10:	2a45      	cmp	r2, #69	; 0x45
 800cc12:	f43f ab5c 	beq.w	800c2ce <_strtod_l+0x27e>
 800cc16:	2301      	movs	r3, #1
 800cc18:	f7ff bb94 	b.w	800c344 <_strtod_l+0x2f4>
 800cc1c:	f3af 8000 	nop.w
 800cc20:	94a03595 	.word	0x94a03595
 800cc24:	3fdfffff 	.word	0x3fdfffff
 800cc28:	35afe535 	.word	0x35afe535
 800cc2c:	3fe00000 	.word	0x3fe00000
 800cc30:	ffc00000 	.word	0xffc00000
 800cc34:	41dfffff 	.word	0x41dfffff
 800cc38:	94a03595 	.word	0x94a03595
 800cc3c:	3fcfffff 	.word	0x3fcfffff
 800cc40:	3ff00000 	.word	0x3ff00000
 800cc44:	7ff00000 	.word	0x7ff00000
 800cc48:	7fe00000 	.word	0x7fe00000
 800cc4c:	7c9fffff 	.word	0x7c9fffff
 800cc50:	3fe00000 	.word	0x3fe00000
 800cc54:	bff00000 	.word	0xbff00000
 800cc58:	7fefffff 	.word	0x7fefffff

0800cc5c <strtod>:
 800cc5c:	460a      	mov	r2, r1
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4802      	ldr	r0, [pc, #8]	; (800cc6c <strtod+0x10>)
 800cc62:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <strtod+0x14>)
 800cc64:	6800      	ldr	r0, [r0, #0]
 800cc66:	f7ff b9f3 	b.w	800c050 <_strtod_l>
 800cc6a:	bf00      	nop
 800cc6c:	20000064 	.word	0x20000064
 800cc70:	200000cc 	.word	0x200000cc

0800cc74 <rshift>:
 800cc74:	6903      	ldr	r3, [r0, #16]
 800cc76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc82:	f100 0414 	add.w	r4, r0, #20
 800cc86:	dd45      	ble.n	800cd14 <rshift+0xa0>
 800cc88:	f011 011f 	ands.w	r1, r1, #31
 800cc8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc94:	d10c      	bne.n	800ccb0 <rshift+0x3c>
 800cc96:	f100 0710 	add.w	r7, r0, #16
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	42b1      	cmp	r1, r6
 800cc9e:	d334      	bcc.n	800cd0a <rshift+0x96>
 800cca0:	1a9b      	subs	r3, r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	1eea      	subs	r2, r5, #3
 800cca6:	4296      	cmp	r6, r2
 800cca8:	bf38      	it	cc
 800ccaa:	2300      	movcc	r3, #0
 800ccac:	4423      	add	r3, r4
 800ccae:	e015      	b.n	800ccdc <rshift+0x68>
 800ccb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccb4:	f1c1 0820 	rsb	r8, r1, #32
 800ccb8:	40cf      	lsrs	r7, r1
 800ccba:	f105 0e04 	add.w	lr, r5, #4
 800ccbe:	46a1      	mov	r9, r4
 800ccc0:	4576      	cmp	r6, lr
 800ccc2:	46f4      	mov	ip, lr
 800ccc4:	d815      	bhi.n	800ccf2 <rshift+0x7e>
 800ccc6:	1a9a      	subs	r2, r3, r2
 800ccc8:	0092      	lsls	r2, r2, #2
 800ccca:	3a04      	subs	r2, #4
 800cccc:	3501      	adds	r5, #1
 800ccce:	42ae      	cmp	r6, r5
 800ccd0:	bf38      	it	cc
 800ccd2:	2200      	movcc	r2, #0
 800ccd4:	18a3      	adds	r3, r4, r2
 800ccd6:	50a7      	str	r7, [r4, r2]
 800ccd8:	b107      	cbz	r7, 800ccdc <rshift+0x68>
 800ccda:	3304      	adds	r3, #4
 800ccdc:	1b1a      	subs	r2, r3, r4
 800ccde:	42a3      	cmp	r3, r4
 800cce0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cce4:	bf08      	it	eq
 800cce6:	2300      	moveq	r3, #0
 800cce8:	6102      	str	r2, [r0, #16]
 800ccea:	bf08      	it	eq
 800ccec:	6143      	streq	r3, [r0, #20]
 800ccee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf2:	f8dc c000 	ldr.w	ip, [ip]
 800ccf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ccfa:	ea4c 0707 	orr.w	r7, ip, r7
 800ccfe:	f849 7b04 	str.w	r7, [r9], #4
 800cd02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd06:	40cf      	lsrs	r7, r1
 800cd08:	e7da      	b.n	800ccc0 <rshift+0x4c>
 800cd0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd12:	e7c3      	b.n	800cc9c <rshift+0x28>
 800cd14:	4623      	mov	r3, r4
 800cd16:	e7e1      	b.n	800ccdc <rshift+0x68>

0800cd18 <__hexdig_fun>:
 800cd18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd1c:	2b09      	cmp	r3, #9
 800cd1e:	d802      	bhi.n	800cd26 <__hexdig_fun+0xe>
 800cd20:	3820      	subs	r0, #32
 800cd22:	b2c0      	uxtb	r0, r0
 800cd24:	4770      	bx	lr
 800cd26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd2a:	2b05      	cmp	r3, #5
 800cd2c:	d801      	bhi.n	800cd32 <__hexdig_fun+0x1a>
 800cd2e:	3847      	subs	r0, #71	; 0x47
 800cd30:	e7f7      	b.n	800cd22 <__hexdig_fun+0xa>
 800cd32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd36:	2b05      	cmp	r3, #5
 800cd38:	d801      	bhi.n	800cd3e <__hexdig_fun+0x26>
 800cd3a:	3827      	subs	r0, #39	; 0x27
 800cd3c:	e7f1      	b.n	800cd22 <__hexdig_fun+0xa>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	4770      	bx	lr
	...

0800cd44 <__gethex>:
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	ed2d 8b02 	vpush	{d8}
 800cd4c:	b089      	sub	sp, #36	; 0x24
 800cd4e:	ee08 0a10 	vmov	s16, r0
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	4bb4      	ldr	r3, [pc, #720]	; (800d028 <__gethex+0x2e4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	468b      	mov	fp, r1
 800cd5e:	4690      	mov	r8, r2
 800cd60:	f7f3 fa3e 	bl	80001e0 <strlen>
 800cd64:	9b01      	ldr	r3, [sp, #4]
 800cd66:	f8db 2000 	ldr.w	r2, [fp]
 800cd6a:	4403      	add	r3, r0
 800cd6c:	4682      	mov	sl, r0
 800cd6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	1c93      	adds	r3, r2, #2
 800cd76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd7e:	32fe      	adds	r2, #254	; 0xfe
 800cd80:	18d1      	adds	r1, r2, r3
 800cd82:	461f      	mov	r7, r3
 800cd84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd88:	9100      	str	r1, [sp, #0]
 800cd8a:	2830      	cmp	r0, #48	; 0x30
 800cd8c:	d0f8      	beq.n	800cd80 <__gethex+0x3c>
 800cd8e:	f7ff ffc3 	bl	800cd18 <__hexdig_fun>
 800cd92:	4604      	mov	r4, r0
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d13a      	bne.n	800ce0e <__gethex+0xca>
 800cd98:	9901      	ldr	r1, [sp, #4]
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f001 f87f 	bl	800dea0 <strncmp>
 800cda2:	4605      	mov	r5, r0
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d168      	bne.n	800ce7a <__gethex+0x136>
 800cda8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cdac:	eb07 060a 	add.w	r6, r7, sl
 800cdb0:	f7ff ffb2 	bl	800cd18 <__hexdig_fun>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d062      	beq.n	800ce7e <__gethex+0x13a>
 800cdb8:	4633      	mov	r3, r6
 800cdba:	7818      	ldrb	r0, [r3, #0]
 800cdbc:	2830      	cmp	r0, #48	; 0x30
 800cdbe:	461f      	mov	r7, r3
 800cdc0:	f103 0301 	add.w	r3, r3, #1
 800cdc4:	d0f9      	beq.n	800cdba <__gethex+0x76>
 800cdc6:	f7ff ffa7 	bl	800cd18 <__hexdig_fun>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	fab0 f480 	clz	r4, r0
 800cdd0:	0964      	lsrs	r4, r4, #5
 800cdd2:	4635      	mov	r5, r6
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	463a      	mov	r2, r7
 800cdd8:	4616      	mov	r6, r2
 800cdda:	3201      	adds	r2, #1
 800cddc:	7830      	ldrb	r0, [r6, #0]
 800cdde:	f7ff ff9b 	bl	800cd18 <__hexdig_fun>
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d1f8      	bne.n	800cdd8 <__gethex+0x94>
 800cde6:	9901      	ldr	r1, [sp, #4]
 800cde8:	4652      	mov	r2, sl
 800cdea:	4630      	mov	r0, r6
 800cdec:	f001 f858 	bl	800dea0 <strncmp>
 800cdf0:	b980      	cbnz	r0, 800ce14 <__gethex+0xd0>
 800cdf2:	b94d      	cbnz	r5, 800ce08 <__gethex+0xc4>
 800cdf4:	eb06 050a 	add.w	r5, r6, sl
 800cdf8:	462a      	mov	r2, r5
 800cdfa:	4616      	mov	r6, r2
 800cdfc:	3201      	adds	r2, #1
 800cdfe:	7830      	ldrb	r0, [r6, #0]
 800ce00:	f7ff ff8a 	bl	800cd18 <__hexdig_fun>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d1f8      	bne.n	800cdfa <__gethex+0xb6>
 800ce08:	1bad      	subs	r5, r5, r6
 800ce0a:	00ad      	lsls	r5, r5, #2
 800ce0c:	e004      	b.n	800ce18 <__gethex+0xd4>
 800ce0e:	2400      	movs	r4, #0
 800ce10:	4625      	mov	r5, r4
 800ce12:	e7e0      	b.n	800cdd6 <__gethex+0x92>
 800ce14:	2d00      	cmp	r5, #0
 800ce16:	d1f7      	bne.n	800ce08 <__gethex+0xc4>
 800ce18:	7833      	ldrb	r3, [r6, #0]
 800ce1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce1e:	2b50      	cmp	r3, #80	; 0x50
 800ce20:	d13b      	bne.n	800ce9a <__gethex+0x156>
 800ce22:	7873      	ldrb	r3, [r6, #1]
 800ce24:	2b2b      	cmp	r3, #43	; 0x2b
 800ce26:	d02c      	beq.n	800ce82 <__gethex+0x13e>
 800ce28:	2b2d      	cmp	r3, #45	; 0x2d
 800ce2a:	d02e      	beq.n	800ce8a <__gethex+0x146>
 800ce2c:	1c71      	adds	r1, r6, #1
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	7808      	ldrb	r0, [r1, #0]
 800ce34:	f7ff ff70 	bl	800cd18 <__hexdig_fun>
 800ce38:	1e43      	subs	r3, r0, #1
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b18      	cmp	r3, #24
 800ce3e:	d82c      	bhi.n	800ce9a <__gethex+0x156>
 800ce40:	f1a0 0210 	sub.w	r2, r0, #16
 800ce44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce48:	f7ff ff66 	bl	800cd18 <__hexdig_fun>
 800ce4c:	1e43      	subs	r3, r0, #1
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b18      	cmp	r3, #24
 800ce52:	d91d      	bls.n	800ce90 <__gethex+0x14c>
 800ce54:	f1b9 0f00 	cmp.w	r9, #0
 800ce58:	d000      	beq.n	800ce5c <__gethex+0x118>
 800ce5a:	4252      	negs	r2, r2
 800ce5c:	4415      	add	r5, r2
 800ce5e:	f8cb 1000 	str.w	r1, [fp]
 800ce62:	b1e4      	cbz	r4, 800ce9e <__gethex+0x15a>
 800ce64:	9b00      	ldr	r3, [sp, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	bf14      	ite	ne
 800ce6a:	2700      	movne	r7, #0
 800ce6c:	2706      	moveq	r7, #6
 800ce6e:	4638      	mov	r0, r7
 800ce70:	b009      	add	sp, #36	; 0x24
 800ce72:	ecbd 8b02 	vpop	{d8}
 800ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7a:	463e      	mov	r6, r7
 800ce7c:	4625      	mov	r5, r4
 800ce7e:	2401      	movs	r4, #1
 800ce80:	e7ca      	b.n	800ce18 <__gethex+0xd4>
 800ce82:	f04f 0900 	mov.w	r9, #0
 800ce86:	1cb1      	adds	r1, r6, #2
 800ce88:	e7d3      	b.n	800ce32 <__gethex+0xee>
 800ce8a:	f04f 0901 	mov.w	r9, #1
 800ce8e:	e7fa      	b.n	800ce86 <__gethex+0x142>
 800ce90:	230a      	movs	r3, #10
 800ce92:	fb03 0202 	mla	r2, r3, r2, r0
 800ce96:	3a10      	subs	r2, #16
 800ce98:	e7d4      	b.n	800ce44 <__gethex+0x100>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	e7df      	b.n	800ce5e <__gethex+0x11a>
 800ce9e:	1bf3      	subs	r3, r6, r7
 800cea0:	3b01      	subs	r3, #1
 800cea2:	4621      	mov	r1, r4
 800cea4:	2b07      	cmp	r3, #7
 800cea6:	dc0b      	bgt.n	800cec0 <__gethex+0x17c>
 800cea8:	ee18 0a10 	vmov	r0, s16
 800ceac:	f000 fa72 	bl	800d394 <_Balloc>
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	b940      	cbnz	r0, 800cec6 <__gethex+0x182>
 800ceb4:	4b5d      	ldr	r3, [pc, #372]	; (800d02c <__gethex+0x2e8>)
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	21de      	movs	r1, #222	; 0xde
 800ceba:	485d      	ldr	r0, [pc, #372]	; (800d030 <__gethex+0x2ec>)
 800cebc:	f001 f812 	bl	800dee4 <__assert_func>
 800cec0:	3101      	adds	r1, #1
 800cec2:	105b      	asrs	r3, r3, #1
 800cec4:	e7ee      	b.n	800cea4 <__gethex+0x160>
 800cec6:	f100 0914 	add.w	r9, r0, #20
 800ceca:	f04f 0b00 	mov.w	fp, #0
 800cece:	f1ca 0301 	rsb	r3, sl, #1
 800ced2:	f8cd 9008 	str.w	r9, [sp, #8]
 800ced6:	f8cd b000 	str.w	fp, [sp]
 800ceda:	9306      	str	r3, [sp, #24]
 800cedc:	42b7      	cmp	r7, r6
 800cede:	d340      	bcc.n	800cf62 <__gethex+0x21e>
 800cee0:	9802      	ldr	r0, [sp, #8]
 800cee2:	9b00      	ldr	r3, [sp, #0]
 800cee4:	f840 3b04 	str.w	r3, [r0], #4
 800cee8:	eba0 0009 	sub.w	r0, r0, r9
 800ceec:	1080      	asrs	r0, r0, #2
 800ceee:	0146      	lsls	r6, r0, #5
 800cef0:	6120      	str	r0, [r4, #16]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 fb40 	bl	800d578 <__hi0bits>
 800cef8:	1a30      	subs	r0, r6, r0
 800cefa:	f8d8 6000 	ldr.w	r6, [r8]
 800cefe:	42b0      	cmp	r0, r6
 800cf00:	dd63      	ble.n	800cfca <__gethex+0x286>
 800cf02:	1b87      	subs	r7, r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 fee4 	bl	800dcd4 <__any_on>
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	b1a8      	cbz	r0, 800cf3c <__gethex+0x1f8>
 800cf10:	1e7b      	subs	r3, r7, #1
 800cf12:	1159      	asrs	r1, r3, #5
 800cf14:	f003 021f 	and.w	r2, r3, #31
 800cf18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cf1c:	f04f 0a01 	mov.w	sl, #1
 800cf20:	fa0a f202 	lsl.w	r2, sl, r2
 800cf24:	420a      	tst	r2, r1
 800cf26:	d009      	beq.n	800cf3c <__gethex+0x1f8>
 800cf28:	4553      	cmp	r3, sl
 800cf2a:	dd05      	ble.n	800cf38 <__gethex+0x1f4>
 800cf2c:	1eb9      	subs	r1, r7, #2
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f000 fed0 	bl	800dcd4 <__any_on>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d145      	bne.n	800cfc4 <__gethex+0x280>
 800cf38:	f04f 0a02 	mov.w	sl, #2
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f7ff fe98 	bl	800cc74 <rshift>
 800cf44:	443d      	add	r5, r7
 800cf46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf4a:	42ab      	cmp	r3, r5
 800cf4c:	da4c      	bge.n	800cfe8 <__gethex+0x2a4>
 800cf4e:	ee18 0a10 	vmov	r0, s16
 800cf52:	4621      	mov	r1, r4
 800cf54:	f000 fa5e 	bl	800d414 <_Bfree>
 800cf58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	27a3      	movs	r7, #163	; 0xa3
 800cf60:	e785      	b.n	800ce6e <__gethex+0x12a>
 800cf62:	1e73      	subs	r3, r6, #1
 800cf64:	9a05      	ldr	r2, [sp, #20]
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d019      	beq.n	800cfa4 <__gethex+0x260>
 800cf70:	f1bb 0f20 	cmp.w	fp, #32
 800cf74:	d107      	bne.n	800cf86 <__gethex+0x242>
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	9a00      	ldr	r2, [sp, #0]
 800cf7a:	f843 2b04 	str.w	r2, [r3], #4
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	2300      	movs	r3, #0
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	469b      	mov	fp, r3
 800cf86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf8a:	f7ff fec5 	bl	800cd18 <__hexdig_fun>
 800cf8e:	9b00      	ldr	r3, [sp, #0]
 800cf90:	f000 000f 	and.w	r0, r0, #15
 800cf94:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf98:	4303      	orrs	r3, r0
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	f10b 0b04 	add.w	fp, fp, #4
 800cfa0:	9b03      	ldr	r3, [sp, #12]
 800cfa2:	e00d      	b.n	800cfc0 <__gethex+0x27c>
 800cfa4:	9b03      	ldr	r3, [sp, #12]
 800cfa6:	9a06      	ldr	r2, [sp, #24]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	42bb      	cmp	r3, r7
 800cfac:	d3e0      	bcc.n	800cf70 <__gethex+0x22c>
 800cfae:	4618      	mov	r0, r3
 800cfb0:	9901      	ldr	r1, [sp, #4]
 800cfb2:	9307      	str	r3, [sp, #28]
 800cfb4:	4652      	mov	r2, sl
 800cfb6:	f000 ff73 	bl	800dea0 <strncmp>
 800cfba:	9b07      	ldr	r3, [sp, #28]
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d1d7      	bne.n	800cf70 <__gethex+0x22c>
 800cfc0:	461e      	mov	r6, r3
 800cfc2:	e78b      	b.n	800cedc <__gethex+0x198>
 800cfc4:	f04f 0a03 	mov.w	sl, #3
 800cfc8:	e7b8      	b.n	800cf3c <__gethex+0x1f8>
 800cfca:	da0a      	bge.n	800cfe2 <__gethex+0x29e>
 800cfcc:	1a37      	subs	r7, r6, r0
 800cfce:	4621      	mov	r1, r4
 800cfd0:	ee18 0a10 	vmov	r0, s16
 800cfd4:	463a      	mov	r2, r7
 800cfd6:	f000 fc39 	bl	800d84c <__lshift>
 800cfda:	1bed      	subs	r5, r5, r7
 800cfdc:	4604      	mov	r4, r0
 800cfde:	f100 0914 	add.w	r9, r0, #20
 800cfe2:	f04f 0a00 	mov.w	sl, #0
 800cfe6:	e7ae      	b.n	800cf46 <__gethex+0x202>
 800cfe8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cfec:	42a8      	cmp	r0, r5
 800cfee:	dd72      	ble.n	800d0d6 <__gethex+0x392>
 800cff0:	1b45      	subs	r5, r0, r5
 800cff2:	42ae      	cmp	r6, r5
 800cff4:	dc36      	bgt.n	800d064 <__gethex+0x320>
 800cff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d02a      	beq.n	800d054 <__gethex+0x310>
 800cffe:	2b03      	cmp	r3, #3
 800d000:	d02c      	beq.n	800d05c <__gethex+0x318>
 800d002:	2b01      	cmp	r3, #1
 800d004:	d11c      	bne.n	800d040 <__gethex+0x2fc>
 800d006:	42ae      	cmp	r6, r5
 800d008:	d11a      	bne.n	800d040 <__gethex+0x2fc>
 800d00a:	2e01      	cmp	r6, #1
 800d00c:	d112      	bne.n	800d034 <__gethex+0x2f0>
 800d00e:	9a04      	ldr	r2, [sp, #16]
 800d010:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	2301      	movs	r3, #1
 800d018:	6123      	str	r3, [r4, #16]
 800d01a:	f8c9 3000 	str.w	r3, [r9]
 800d01e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d020:	2762      	movs	r7, #98	; 0x62
 800d022:	601c      	str	r4, [r3, #0]
 800d024:	e723      	b.n	800ce6e <__gethex+0x12a>
 800d026:	bf00      	nop
 800d028:	08010208 	.word	0x08010208
 800d02c:	08010190 	.word	0x08010190
 800d030:	080101a1 	.word	0x080101a1
 800d034:	1e71      	subs	r1, r6, #1
 800d036:	4620      	mov	r0, r4
 800d038:	f000 fe4c 	bl	800dcd4 <__any_on>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d1e6      	bne.n	800d00e <__gethex+0x2ca>
 800d040:	ee18 0a10 	vmov	r0, s16
 800d044:	4621      	mov	r1, r4
 800d046:	f000 f9e5 	bl	800d414 <_Bfree>
 800d04a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d04c:	2300      	movs	r3, #0
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	2750      	movs	r7, #80	; 0x50
 800d052:	e70c      	b.n	800ce6e <__gethex+0x12a>
 800d054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f2      	bne.n	800d040 <__gethex+0x2fc>
 800d05a:	e7d8      	b.n	800d00e <__gethex+0x2ca>
 800d05c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1d5      	bne.n	800d00e <__gethex+0x2ca>
 800d062:	e7ed      	b.n	800d040 <__gethex+0x2fc>
 800d064:	1e6f      	subs	r7, r5, #1
 800d066:	f1ba 0f00 	cmp.w	sl, #0
 800d06a:	d131      	bne.n	800d0d0 <__gethex+0x38c>
 800d06c:	b127      	cbz	r7, 800d078 <__gethex+0x334>
 800d06e:	4639      	mov	r1, r7
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fe2f 	bl	800dcd4 <__any_on>
 800d076:	4682      	mov	sl, r0
 800d078:	117b      	asrs	r3, r7, #5
 800d07a:	2101      	movs	r1, #1
 800d07c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d080:	f007 071f 	and.w	r7, r7, #31
 800d084:	fa01 f707 	lsl.w	r7, r1, r7
 800d088:	421f      	tst	r7, r3
 800d08a:	4629      	mov	r1, r5
 800d08c:	4620      	mov	r0, r4
 800d08e:	bf18      	it	ne
 800d090:	f04a 0a02 	orrne.w	sl, sl, #2
 800d094:	1b76      	subs	r6, r6, r5
 800d096:	f7ff fded 	bl	800cc74 <rshift>
 800d09a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d09e:	2702      	movs	r7, #2
 800d0a0:	f1ba 0f00 	cmp.w	sl, #0
 800d0a4:	d048      	beq.n	800d138 <__gethex+0x3f4>
 800d0a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0aa:	2b02      	cmp	r3, #2
 800d0ac:	d015      	beq.n	800d0da <__gethex+0x396>
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d017      	beq.n	800d0e2 <__gethex+0x39e>
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d109      	bne.n	800d0ca <__gethex+0x386>
 800d0b6:	f01a 0f02 	tst.w	sl, #2
 800d0ba:	d006      	beq.n	800d0ca <__gethex+0x386>
 800d0bc:	f8d9 0000 	ldr.w	r0, [r9]
 800d0c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d0c4:	f01a 0f01 	tst.w	sl, #1
 800d0c8:	d10e      	bne.n	800d0e8 <__gethex+0x3a4>
 800d0ca:	f047 0710 	orr.w	r7, r7, #16
 800d0ce:	e033      	b.n	800d138 <__gethex+0x3f4>
 800d0d0:	f04f 0a01 	mov.w	sl, #1
 800d0d4:	e7d0      	b.n	800d078 <__gethex+0x334>
 800d0d6:	2701      	movs	r7, #1
 800d0d8:	e7e2      	b.n	800d0a0 <__gethex+0x35c>
 800d0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0dc:	f1c3 0301 	rsb	r3, r3, #1
 800d0e0:	9315      	str	r3, [sp, #84]	; 0x54
 800d0e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0f0      	beq.n	800d0ca <__gethex+0x386>
 800d0e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0ec:	f104 0314 	add.w	r3, r4, #20
 800d0f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d0f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0f8:	f04f 0c00 	mov.w	ip, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d102:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d106:	d01c      	beq.n	800d142 <__gethex+0x3fe>
 800d108:	3201      	adds	r2, #1
 800d10a:	6002      	str	r2, [r0, #0]
 800d10c:	2f02      	cmp	r7, #2
 800d10e:	f104 0314 	add.w	r3, r4, #20
 800d112:	d13f      	bne.n	800d194 <__gethex+0x450>
 800d114:	f8d8 2000 	ldr.w	r2, [r8]
 800d118:	3a01      	subs	r2, #1
 800d11a:	42b2      	cmp	r2, r6
 800d11c:	d10a      	bne.n	800d134 <__gethex+0x3f0>
 800d11e:	1171      	asrs	r1, r6, #5
 800d120:	2201      	movs	r2, #1
 800d122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d126:	f006 061f 	and.w	r6, r6, #31
 800d12a:	fa02 f606 	lsl.w	r6, r2, r6
 800d12e:	421e      	tst	r6, r3
 800d130:	bf18      	it	ne
 800d132:	4617      	movne	r7, r2
 800d134:	f047 0720 	orr.w	r7, r7, #32
 800d138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d13a:	601c      	str	r4, [r3, #0]
 800d13c:	9b04      	ldr	r3, [sp, #16]
 800d13e:	601d      	str	r5, [r3, #0]
 800d140:	e695      	b.n	800ce6e <__gethex+0x12a>
 800d142:	4299      	cmp	r1, r3
 800d144:	f843 cc04 	str.w	ip, [r3, #-4]
 800d148:	d8d8      	bhi.n	800d0fc <__gethex+0x3b8>
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	459b      	cmp	fp, r3
 800d14e:	db19      	blt.n	800d184 <__gethex+0x440>
 800d150:	6861      	ldr	r1, [r4, #4]
 800d152:	ee18 0a10 	vmov	r0, s16
 800d156:	3101      	adds	r1, #1
 800d158:	f000 f91c 	bl	800d394 <_Balloc>
 800d15c:	4681      	mov	r9, r0
 800d15e:	b918      	cbnz	r0, 800d168 <__gethex+0x424>
 800d160:	4b1a      	ldr	r3, [pc, #104]	; (800d1cc <__gethex+0x488>)
 800d162:	4602      	mov	r2, r0
 800d164:	2184      	movs	r1, #132	; 0x84
 800d166:	e6a8      	b.n	800ceba <__gethex+0x176>
 800d168:	6922      	ldr	r2, [r4, #16]
 800d16a:	3202      	adds	r2, #2
 800d16c:	f104 010c 	add.w	r1, r4, #12
 800d170:	0092      	lsls	r2, r2, #2
 800d172:	300c      	adds	r0, #12
 800d174:	f000 f900 	bl	800d378 <memcpy>
 800d178:	4621      	mov	r1, r4
 800d17a:	ee18 0a10 	vmov	r0, s16
 800d17e:	f000 f949 	bl	800d414 <_Bfree>
 800d182:	464c      	mov	r4, r9
 800d184:	6923      	ldr	r3, [r4, #16]
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d18c:	6122      	str	r2, [r4, #16]
 800d18e:	2201      	movs	r2, #1
 800d190:	615a      	str	r2, [r3, #20]
 800d192:	e7bb      	b.n	800d10c <__gethex+0x3c8>
 800d194:	6922      	ldr	r2, [r4, #16]
 800d196:	455a      	cmp	r2, fp
 800d198:	dd0b      	ble.n	800d1b2 <__gethex+0x46e>
 800d19a:	2101      	movs	r1, #1
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7ff fd69 	bl	800cc74 <rshift>
 800d1a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1a6:	3501      	adds	r5, #1
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	f6ff aed0 	blt.w	800cf4e <__gethex+0x20a>
 800d1ae:	2701      	movs	r7, #1
 800d1b0:	e7c0      	b.n	800d134 <__gethex+0x3f0>
 800d1b2:	f016 061f 	ands.w	r6, r6, #31
 800d1b6:	d0fa      	beq.n	800d1ae <__gethex+0x46a>
 800d1b8:	4453      	add	r3, sl
 800d1ba:	f1c6 0620 	rsb	r6, r6, #32
 800d1be:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d1c2:	f000 f9d9 	bl	800d578 <__hi0bits>
 800d1c6:	42b0      	cmp	r0, r6
 800d1c8:	dbe7      	blt.n	800d19a <__gethex+0x456>
 800d1ca:	e7f0      	b.n	800d1ae <__gethex+0x46a>
 800d1cc:	08010190 	.word	0x08010190

0800d1d0 <L_shift>:
 800d1d0:	f1c2 0208 	rsb	r2, r2, #8
 800d1d4:	0092      	lsls	r2, r2, #2
 800d1d6:	b570      	push	{r4, r5, r6, lr}
 800d1d8:	f1c2 0620 	rsb	r6, r2, #32
 800d1dc:	6843      	ldr	r3, [r0, #4]
 800d1de:	6804      	ldr	r4, [r0, #0]
 800d1e0:	fa03 f506 	lsl.w	r5, r3, r6
 800d1e4:	432c      	orrs	r4, r5
 800d1e6:	40d3      	lsrs	r3, r2
 800d1e8:	6004      	str	r4, [r0, #0]
 800d1ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1ee:	4288      	cmp	r0, r1
 800d1f0:	d3f4      	bcc.n	800d1dc <L_shift+0xc>
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}

0800d1f4 <__match>:
 800d1f4:	b530      	push	{r4, r5, lr}
 800d1f6:	6803      	ldr	r3, [r0, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fe:	b914      	cbnz	r4, 800d206 <__match+0x12>
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	2001      	movs	r0, #1
 800d204:	bd30      	pop	{r4, r5, pc}
 800d206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d20e:	2d19      	cmp	r5, #25
 800d210:	bf98      	it	ls
 800d212:	3220      	addls	r2, #32
 800d214:	42a2      	cmp	r2, r4
 800d216:	d0f0      	beq.n	800d1fa <__match+0x6>
 800d218:	2000      	movs	r0, #0
 800d21a:	e7f3      	b.n	800d204 <__match+0x10>

0800d21c <__hexnan>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	680b      	ldr	r3, [r1, #0]
 800d222:	115e      	asrs	r6, r3, #5
 800d224:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d228:	f013 031f 	ands.w	r3, r3, #31
 800d22c:	b087      	sub	sp, #28
 800d22e:	bf18      	it	ne
 800d230:	3604      	addne	r6, #4
 800d232:	2500      	movs	r5, #0
 800d234:	1f37      	subs	r7, r6, #4
 800d236:	4690      	mov	r8, r2
 800d238:	6802      	ldr	r2, [r0, #0]
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	4682      	mov	sl, r0
 800d23e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d242:	46b9      	mov	r9, r7
 800d244:	463c      	mov	r4, r7
 800d246:	9502      	str	r5, [sp, #8]
 800d248:	46ab      	mov	fp, r5
 800d24a:	7851      	ldrb	r1, [r2, #1]
 800d24c:	1c53      	adds	r3, r2, #1
 800d24e:	9303      	str	r3, [sp, #12]
 800d250:	b341      	cbz	r1, 800d2a4 <__hexnan+0x88>
 800d252:	4608      	mov	r0, r1
 800d254:	9205      	str	r2, [sp, #20]
 800d256:	9104      	str	r1, [sp, #16]
 800d258:	f7ff fd5e 	bl	800cd18 <__hexdig_fun>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	d14f      	bne.n	800d300 <__hexnan+0xe4>
 800d260:	9904      	ldr	r1, [sp, #16]
 800d262:	9a05      	ldr	r2, [sp, #20]
 800d264:	2920      	cmp	r1, #32
 800d266:	d818      	bhi.n	800d29a <__hexnan+0x7e>
 800d268:	9b02      	ldr	r3, [sp, #8]
 800d26a:	459b      	cmp	fp, r3
 800d26c:	dd13      	ble.n	800d296 <__hexnan+0x7a>
 800d26e:	454c      	cmp	r4, r9
 800d270:	d206      	bcs.n	800d280 <__hexnan+0x64>
 800d272:	2d07      	cmp	r5, #7
 800d274:	dc04      	bgt.n	800d280 <__hexnan+0x64>
 800d276:	462a      	mov	r2, r5
 800d278:	4649      	mov	r1, r9
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7ff ffa8 	bl	800d1d0 <L_shift>
 800d280:	4544      	cmp	r4, r8
 800d282:	d950      	bls.n	800d326 <__hexnan+0x10a>
 800d284:	2300      	movs	r3, #0
 800d286:	f1a4 0904 	sub.w	r9, r4, #4
 800d28a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d28e:	f8cd b008 	str.w	fp, [sp, #8]
 800d292:	464c      	mov	r4, r9
 800d294:	461d      	mov	r5, r3
 800d296:	9a03      	ldr	r2, [sp, #12]
 800d298:	e7d7      	b.n	800d24a <__hexnan+0x2e>
 800d29a:	2929      	cmp	r1, #41	; 0x29
 800d29c:	d156      	bne.n	800d34c <__hexnan+0x130>
 800d29e:	3202      	adds	r2, #2
 800d2a0:	f8ca 2000 	str.w	r2, [sl]
 800d2a4:	f1bb 0f00 	cmp.w	fp, #0
 800d2a8:	d050      	beq.n	800d34c <__hexnan+0x130>
 800d2aa:	454c      	cmp	r4, r9
 800d2ac:	d206      	bcs.n	800d2bc <__hexnan+0xa0>
 800d2ae:	2d07      	cmp	r5, #7
 800d2b0:	dc04      	bgt.n	800d2bc <__hexnan+0xa0>
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4649      	mov	r1, r9
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f7ff ff8a 	bl	800d1d0 <L_shift>
 800d2bc:	4544      	cmp	r4, r8
 800d2be:	d934      	bls.n	800d32a <__hexnan+0x10e>
 800d2c0:	f1a8 0204 	sub.w	r2, r8, #4
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2ce:	429f      	cmp	r7, r3
 800d2d0:	d2f9      	bcs.n	800d2c6 <__hexnan+0xaa>
 800d2d2:	1b3b      	subs	r3, r7, r4
 800d2d4:	f023 0303 	bic.w	r3, r3, #3
 800d2d8:	3304      	adds	r3, #4
 800d2da:	3401      	adds	r4, #1
 800d2dc:	3e03      	subs	r6, #3
 800d2de:	42b4      	cmp	r4, r6
 800d2e0:	bf88      	it	hi
 800d2e2:	2304      	movhi	r3, #4
 800d2e4:	4443      	add	r3, r8
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f843 2b04 	str.w	r2, [r3], #4
 800d2ec:	429f      	cmp	r7, r3
 800d2ee:	d2fb      	bcs.n	800d2e8 <__hexnan+0xcc>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	b91b      	cbnz	r3, 800d2fc <__hexnan+0xe0>
 800d2f4:	4547      	cmp	r7, r8
 800d2f6:	d127      	bne.n	800d348 <__hexnan+0x12c>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	2005      	movs	r0, #5
 800d2fe:	e026      	b.n	800d34e <__hexnan+0x132>
 800d300:	3501      	adds	r5, #1
 800d302:	2d08      	cmp	r5, #8
 800d304:	f10b 0b01 	add.w	fp, fp, #1
 800d308:	dd06      	ble.n	800d318 <__hexnan+0xfc>
 800d30a:	4544      	cmp	r4, r8
 800d30c:	d9c3      	bls.n	800d296 <__hexnan+0x7a>
 800d30e:	2300      	movs	r3, #0
 800d310:	f844 3c04 	str.w	r3, [r4, #-4]
 800d314:	2501      	movs	r5, #1
 800d316:	3c04      	subs	r4, #4
 800d318:	6822      	ldr	r2, [r4, #0]
 800d31a:	f000 000f 	and.w	r0, r0, #15
 800d31e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d322:	6022      	str	r2, [r4, #0]
 800d324:	e7b7      	b.n	800d296 <__hexnan+0x7a>
 800d326:	2508      	movs	r5, #8
 800d328:	e7b5      	b.n	800d296 <__hexnan+0x7a>
 800d32a:	9b01      	ldr	r3, [sp, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0df      	beq.n	800d2f0 <__hexnan+0xd4>
 800d330:	f04f 32ff 	mov.w	r2, #4294967295
 800d334:	f1c3 0320 	rsb	r3, r3, #32
 800d338:	fa22 f303 	lsr.w	r3, r2, r3
 800d33c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d340:	401a      	ands	r2, r3
 800d342:	f846 2c04 	str.w	r2, [r6, #-4]
 800d346:	e7d3      	b.n	800d2f0 <__hexnan+0xd4>
 800d348:	3f04      	subs	r7, #4
 800d34a:	e7d1      	b.n	800d2f0 <__hexnan+0xd4>
 800d34c:	2004      	movs	r0, #4
 800d34e:	b007      	add	sp, #28
 800d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d354 <__ascii_mbtowc>:
 800d354:	b082      	sub	sp, #8
 800d356:	b901      	cbnz	r1, 800d35a <__ascii_mbtowc+0x6>
 800d358:	a901      	add	r1, sp, #4
 800d35a:	b142      	cbz	r2, 800d36e <__ascii_mbtowc+0x1a>
 800d35c:	b14b      	cbz	r3, 800d372 <__ascii_mbtowc+0x1e>
 800d35e:	7813      	ldrb	r3, [r2, #0]
 800d360:	600b      	str	r3, [r1, #0]
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	1e10      	subs	r0, r2, #0
 800d366:	bf18      	it	ne
 800d368:	2001      	movne	r0, #1
 800d36a:	b002      	add	sp, #8
 800d36c:	4770      	bx	lr
 800d36e:	4610      	mov	r0, r2
 800d370:	e7fb      	b.n	800d36a <__ascii_mbtowc+0x16>
 800d372:	f06f 0001 	mvn.w	r0, #1
 800d376:	e7f8      	b.n	800d36a <__ascii_mbtowc+0x16>

0800d378 <memcpy>:
 800d378:	440a      	add	r2, r1
 800d37a:	4291      	cmp	r1, r2
 800d37c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d380:	d100      	bne.n	800d384 <memcpy+0xc>
 800d382:	4770      	bx	lr
 800d384:	b510      	push	{r4, lr}
 800d386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d38e:	4291      	cmp	r1, r2
 800d390:	d1f9      	bne.n	800d386 <memcpy+0xe>
 800d392:	bd10      	pop	{r4, pc}

0800d394 <_Balloc>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d398:	4604      	mov	r4, r0
 800d39a:	460d      	mov	r5, r1
 800d39c:	b976      	cbnz	r6, 800d3bc <_Balloc+0x28>
 800d39e:	2010      	movs	r0, #16
 800d3a0:	f000 fdd0 	bl	800df44 <malloc>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	6260      	str	r0, [r4, #36]	; 0x24
 800d3a8:	b920      	cbnz	r0, 800d3b4 <_Balloc+0x20>
 800d3aa:	4b18      	ldr	r3, [pc, #96]	; (800d40c <_Balloc+0x78>)
 800d3ac:	4818      	ldr	r0, [pc, #96]	; (800d410 <_Balloc+0x7c>)
 800d3ae:	2166      	movs	r1, #102	; 0x66
 800d3b0:	f000 fd98 	bl	800dee4 <__assert_func>
 800d3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b8:	6006      	str	r6, [r0, #0]
 800d3ba:	60c6      	str	r6, [r0, #12]
 800d3bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3be:	68f3      	ldr	r3, [r6, #12]
 800d3c0:	b183      	cbz	r3, 800d3e4 <_Balloc+0x50>
 800d3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3ca:	b9b8      	cbnz	r0, 800d3fc <_Balloc+0x68>
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	fa01 f605 	lsl.w	r6, r1, r5
 800d3d2:	1d72      	adds	r2, r6, #5
 800d3d4:	0092      	lsls	r2, r2, #2
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f000 fc9d 	bl	800dd16 <_calloc_r>
 800d3dc:	b160      	cbz	r0, 800d3f8 <_Balloc+0x64>
 800d3de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3e2:	e00e      	b.n	800d402 <_Balloc+0x6e>
 800d3e4:	2221      	movs	r2, #33	; 0x21
 800d3e6:	2104      	movs	r1, #4
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fc94 	bl	800dd16 <_calloc_r>
 800d3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f0:	60f0      	str	r0, [r6, #12]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e4      	bne.n	800d3c2 <_Balloc+0x2e>
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}
 800d3fc:	6802      	ldr	r2, [r0, #0]
 800d3fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d402:	2300      	movs	r3, #0
 800d404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d408:	e7f7      	b.n	800d3fa <_Balloc+0x66>
 800d40a:	bf00      	nop
 800d40c:	0801021c 	.word	0x0801021c
 800d410:	08010233 	.word	0x08010233

0800d414 <_Bfree>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d418:	4605      	mov	r5, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	b976      	cbnz	r6, 800d43c <_Bfree+0x28>
 800d41e:	2010      	movs	r0, #16
 800d420:	f000 fd90 	bl	800df44 <malloc>
 800d424:	4602      	mov	r2, r0
 800d426:	6268      	str	r0, [r5, #36]	; 0x24
 800d428:	b920      	cbnz	r0, 800d434 <_Bfree+0x20>
 800d42a:	4b09      	ldr	r3, [pc, #36]	; (800d450 <_Bfree+0x3c>)
 800d42c:	4809      	ldr	r0, [pc, #36]	; (800d454 <_Bfree+0x40>)
 800d42e:	218a      	movs	r1, #138	; 0x8a
 800d430:	f000 fd58 	bl	800dee4 <__assert_func>
 800d434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d438:	6006      	str	r6, [r0, #0]
 800d43a:	60c6      	str	r6, [r0, #12]
 800d43c:	b13c      	cbz	r4, 800d44e <_Bfree+0x3a>
 800d43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d440:	6862      	ldr	r2, [r4, #4]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d448:	6021      	str	r1, [r4, #0]
 800d44a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d44e:	bd70      	pop	{r4, r5, r6, pc}
 800d450:	0801021c 	.word	0x0801021c
 800d454:	08010233 	.word	0x08010233

0800d458 <__multadd>:
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	690d      	ldr	r5, [r1, #16]
 800d45e:	4607      	mov	r7, r0
 800d460:	460c      	mov	r4, r1
 800d462:	461e      	mov	r6, r3
 800d464:	f101 0c14 	add.w	ip, r1, #20
 800d468:	2000      	movs	r0, #0
 800d46a:	f8dc 3000 	ldr.w	r3, [ip]
 800d46e:	b299      	uxth	r1, r3
 800d470:	fb02 6101 	mla	r1, r2, r1, r6
 800d474:	0c1e      	lsrs	r6, r3, #16
 800d476:	0c0b      	lsrs	r3, r1, #16
 800d478:	fb02 3306 	mla	r3, r2, r6, r3
 800d47c:	b289      	uxth	r1, r1
 800d47e:	3001      	adds	r0, #1
 800d480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d484:	4285      	cmp	r5, r0
 800d486:	f84c 1b04 	str.w	r1, [ip], #4
 800d48a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d48e:	dcec      	bgt.n	800d46a <__multadd+0x12>
 800d490:	b30e      	cbz	r6, 800d4d6 <__multadd+0x7e>
 800d492:	68a3      	ldr	r3, [r4, #8]
 800d494:	42ab      	cmp	r3, r5
 800d496:	dc19      	bgt.n	800d4cc <__multadd+0x74>
 800d498:	6861      	ldr	r1, [r4, #4]
 800d49a:	4638      	mov	r0, r7
 800d49c:	3101      	adds	r1, #1
 800d49e:	f7ff ff79 	bl	800d394 <_Balloc>
 800d4a2:	4680      	mov	r8, r0
 800d4a4:	b928      	cbnz	r0, 800d4b2 <__multadd+0x5a>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	4b0c      	ldr	r3, [pc, #48]	; (800d4dc <__multadd+0x84>)
 800d4aa:	480d      	ldr	r0, [pc, #52]	; (800d4e0 <__multadd+0x88>)
 800d4ac:	21b5      	movs	r1, #181	; 0xb5
 800d4ae:	f000 fd19 	bl	800dee4 <__assert_func>
 800d4b2:	6922      	ldr	r2, [r4, #16]
 800d4b4:	3202      	adds	r2, #2
 800d4b6:	f104 010c 	add.w	r1, r4, #12
 800d4ba:	0092      	lsls	r2, r2, #2
 800d4bc:	300c      	adds	r0, #12
 800d4be:	f7ff ff5b 	bl	800d378 <memcpy>
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7ff ffa5 	bl	800d414 <_Bfree>
 800d4ca:	4644      	mov	r4, r8
 800d4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4d0:	3501      	adds	r5, #1
 800d4d2:	615e      	str	r6, [r3, #20]
 800d4d4:	6125      	str	r5, [r4, #16]
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	08010190 	.word	0x08010190
 800d4e0:	08010233 	.word	0x08010233

0800d4e4 <__s2b>:
 800d4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	460c      	mov	r4, r1
 800d4ea:	4615      	mov	r5, r2
 800d4ec:	461f      	mov	r7, r3
 800d4ee:	2209      	movs	r2, #9
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	db09      	blt.n	800d514 <__s2b+0x30>
 800d500:	4630      	mov	r0, r6
 800d502:	f7ff ff47 	bl	800d394 <_Balloc>
 800d506:	b940      	cbnz	r0, 800d51a <__s2b+0x36>
 800d508:	4602      	mov	r2, r0
 800d50a:	4b19      	ldr	r3, [pc, #100]	; (800d570 <__s2b+0x8c>)
 800d50c:	4819      	ldr	r0, [pc, #100]	; (800d574 <__s2b+0x90>)
 800d50e:	21ce      	movs	r1, #206	; 0xce
 800d510:	f000 fce8 	bl	800dee4 <__assert_func>
 800d514:	0052      	lsls	r2, r2, #1
 800d516:	3101      	adds	r1, #1
 800d518:	e7f0      	b.n	800d4fc <__s2b+0x18>
 800d51a:	9b08      	ldr	r3, [sp, #32]
 800d51c:	6143      	str	r3, [r0, #20]
 800d51e:	2d09      	cmp	r5, #9
 800d520:	f04f 0301 	mov.w	r3, #1
 800d524:	6103      	str	r3, [r0, #16]
 800d526:	dd16      	ble.n	800d556 <__s2b+0x72>
 800d528:	f104 0909 	add.w	r9, r4, #9
 800d52c:	46c8      	mov	r8, r9
 800d52e:	442c      	add	r4, r5
 800d530:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d534:	4601      	mov	r1, r0
 800d536:	3b30      	subs	r3, #48	; 0x30
 800d538:	220a      	movs	r2, #10
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff ff8c 	bl	800d458 <__multadd>
 800d540:	45a0      	cmp	r8, r4
 800d542:	d1f5      	bne.n	800d530 <__s2b+0x4c>
 800d544:	f1a5 0408 	sub.w	r4, r5, #8
 800d548:	444c      	add	r4, r9
 800d54a:	1b2d      	subs	r5, r5, r4
 800d54c:	1963      	adds	r3, r4, r5
 800d54e:	42bb      	cmp	r3, r7
 800d550:	db04      	blt.n	800d55c <__s2b+0x78>
 800d552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d556:	340a      	adds	r4, #10
 800d558:	2509      	movs	r5, #9
 800d55a:	e7f6      	b.n	800d54a <__s2b+0x66>
 800d55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d560:	4601      	mov	r1, r0
 800d562:	3b30      	subs	r3, #48	; 0x30
 800d564:	220a      	movs	r2, #10
 800d566:	4630      	mov	r0, r6
 800d568:	f7ff ff76 	bl	800d458 <__multadd>
 800d56c:	e7ee      	b.n	800d54c <__s2b+0x68>
 800d56e:	bf00      	nop
 800d570:	08010190 	.word	0x08010190
 800d574:	08010233 	.word	0x08010233

0800d578 <__hi0bits>:
 800d578:	0c03      	lsrs	r3, r0, #16
 800d57a:	041b      	lsls	r3, r3, #16
 800d57c:	b9d3      	cbnz	r3, 800d5b4 <__hi0bits+0x3c>
 800d57e:	0400      	lsls	r0, r0, #16
 800d580:	2310      	movs	r3, #16
 800d582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d586:	bf04      	itt	eq
 800d588:	0200      	lsleq	r0, r0, #8
 800d58a:	3308      	addeq	r3, #8
 800d58c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d590:	bf04      	itt	eq
 800d592:	0100      	lsleq	r0, r0, #4
 800d594:	3304      	addeq	r3, #4
 800d596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d59a:	bf04      	itt	eq
 800d59c:	0080      	lsleq	r0, r0, #2
 800d59e:	3302      	addeq	r3, #2
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	db05      	blt.n	800d5b0 <__hi0bits+0x38>
 800d5a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5a8:	f103 0301 	add.w	r3, r3, #1
 800d5ac:	bf08      	it	eq
 800d5ae:	2320      	moveq	r3, #32
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	4770      	bx	lr
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e7e4      	b.n	800d582 <__hi0bits+0xa>

0800d5b8 <__lo0bits>:
 800d5b8:	6803      	ldr	r3, [r0, #0]
 800d5ba:	f013 0207 	ands.w	r2, r3, #7
 800d5be:	4601      	mov	r1, r0
 800d5c0:	d00b      	beq.n	800d5da <__lo0bits+0x22>
 800d5c2:	07da      	lsls	r2, r3, #31
 800d5c4:	d423      	bmi.n	800d60e <__lo0bits+0x56>
 800d5c6:	0798      	lsls	r0, r3, #30
 800d5c8:	bf49      	itett	mi
 800d5ca:	085b      	lsrmi	r3, r3, #1
 800d5cc:	089b      	lsrpl	r3, r3, #2
 800d5ce:	2001      	movmi	r0, #1
 800d5d0:	600b      	strmi	r3, [r1, #0]
 800d5d2:	bf5c      	itt	pl
 800d5d4:	600b      	strpl	r3, [r1, #0]
 800d5d6:	2002      	movpl	r0, #2
 800d5d8:	4770      	bx	lr
 800d5da:	b298      	uxth	r0, r3
 800d5dc:	b9a8      	cbnz	r0, 800d60a <__lo0bits+0x52>
 800d5de:	0c1b      	lsrs	r3, r3, #16
 800d5e0:	2010      	movs	r0, #16
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	b90a      	cbnz	r2, 800d5ea <__lo0bits+0x32>
 800d5e6:	3008      	adds	r0, #8
 800d5e8:	0a1b      	lsrs	r3, r3, #8
 800d5ea:	071a      	lsls	r2, r3, #28
 800d5ec:	bf04      	itt	eq
 800d5ee:	091b      	lsreq	r3, r3, #4
 800d5f0:	3004      	addeq	r0, #4
 800d5f2:	079a      	lsls	r2, r3, #30
 800d5f4:	bf04      	itt	eq
 800d5f6:	089b      	lsreq	r3, r3, #2
 800d5f8:	3002      	addeq	r0, #2
 800d5fa:	07da      	lsls	r2, r3, #31
 800d5fc:	d403      	bmi.n	800d606 <__lo0bits+0x4e>
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	f100 0001 	add.w	r0, r0, #1
 800d604:	d005      	beq.n	800d612 <__lo0bits+0x5a>
 800d606:	600b      	str	r3, [r1, #0]
 800d608:	4770      	bx	lr
 800d60a:	4610      	mov	r0, r2
 800d60c:	e7e9      	b.n	800d5e2 <__lo0bits+0x2a>
 800d60e:	2000      	movs	r0, #0
 800d610:	4770      	bx	lr
 800d612:	2020      	movs	r0, #32
 800d614:	4770      	bx	lr
	...

0800d618 <__i2b>:
 800d618:	b510      	push	{r4, lr}
 800d61a:	460c      	mov	r4, r1
 800d61c:	2101      	movs	r1, #1
 800d61e:	f7ff feb9 	bl	800d394 <_Balloc>
 800d622:	4602      	mov	r2, r0
 800d624:	b928      	cbnz	r0, 800d632 <__i2b+0x1a>
 800d626:	4b05      	ldr	r3, [pc, #20]	; (800d63c <__i2b+0x24>)
 800d628:	4805      	ldr	r0, [pc, #20]	; (800d640 <__i2b+0x28>)
 800d62a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d62e:	f000 fc59 	bl	800dee4 <__assert_func>
 800d632:	2301      	movs	r3, #1
 800d634:	6144      	str	r4, [r0, #20]
 800d636:	6103      	str	r3, [r0, #16]
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	bf00      	nop
 800d63c:	08010190 	.word	0x08010190
 800d640:	08010233 	.word	0x08010233

0800d644 <__multiply>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	4691      	mov	r9, r2
 800d64a:	690a      	ldr	r2, [r1, #16]
 800d64c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d650:	429a      	cmp	r2, r3
 800d652:	bfb8      	it	lt
 800d654:	460b      	movlt	r3, r1
 800d656:	460c      	mov	r4, r1
 800d658:	bfbc      	itt	lt
 800d65a:	464c      	movlt	r4, r9
 800d65c:	4699      	movlt	r9, r3
 800d65e:	6927      	ldr	r7, [r4, #16]
 800d660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d664:	68a3      	ldr	r3, [r4, #8]
 800d666:	6861      	ldr	r1, [r4, #4]
 800d668:	eb07 060a 	add.w	r6, r7, sl
 800d66c:	42b3      	cmp	r3, r6
 800d66e:	b085      	sub	sp, #20
 800d670:	bfb8      	it	lt
 800d672:	3101      	addlt	r1, #1
 800d674:	f7ff fe8e 	bl	800d394 <_Balloc>
 800d678:	b930      	cbnz	r0, 800d688 <__multiply+0x44>
 800d67a:	4602      	mov	r2, r0
 800d67c:	4b44      	ldr	r3, [pc, #272]	; (800d790 <__multiply+0x14c>)
 800d67e:	4845      	ldr	r0, [pc, #276]	; (800d794 <__multiply+0x150>)
 800d680:	f240 115d 	movw	r1, #349	; 0x15d
 800d684:	f000 fc2e 	bl	800dee4 <__assert_func>
 800d688:	f100 0514 	add.w	r5, r0, #20
 800d68c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d690:	462b      	mov	r3, r5
 800d692:	2200      	movs	r2, #0
 800d694:	4543      	cmp	r3, r8
 800d696:	d321      	bcc.n	800d6dc <__multiply+0x98>
 800d698:	f104 0314 	add.w	r3, r4, #20
 800d69c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6a0:	f109 0314 	add.w	r3, r9, #20
 800d6a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6a8:	9202      	str	r2, [sp, #8]
 800d6aa:	1b3a      	subs	r2, r7, r4
 800d6ac:	3a15      	subs	r2, #21
 800d6ae:	f022 0203 	bic.w	r2, r2, #3
 800d6b2:	3204      	adds	r2, #4
 800d6b4:	f104 0115 	add.w	r1, r4, #21
 800d6b8:	428f      	cmp	r7, r1
 800d6ba:	bf38      	it	cc
 800d6bc:	2204      	movcc	r2, #4
 800d6be:	9201      	str	r2, [sp, #4]
 800d6c0:	9a02      	ldr	r2, [sp, #8]
 800d6c2:	9303      	str	r3, [sp, #12]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d80c      	bhi.n	800d6e2 <__multiply+0x9e>
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	dd03      	ble.n	800d6d4 <__multiply+0x90>
 800d6cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d05a      	beq.n	800d78a <__multiply+0x146>
 800d6d4:	6106      	str	r6, [r0, #16]
 800d6d6:	b005      	add	sp, #20
 800d6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6dc:	f843 2b04 	str.w	r2, [r3], #4
 800d6e0:	e7d8      	b.n	800d694 <__multiply+0x50>
 800d6e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6e6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ea:	d024      	beq.n	800d736 <__multiply+0xf2>
 800d6ec:	f104 0e14 	add.w	lr, r4, #20
 800d6f0:	46a9      	mov	r9, r5
 800d6f2:	f04f 0c00 	mov.w	ip, #0
 800d6f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6fa:	f8d9 1000 	ldr.w	r1, [r9]
 800d6fe:	fa1f fb82 	uxth.w	fp, r2
 800d702:	b289      	uxth	r1, r1
 800d704:	fb0a 110b 	mla	r1, sl, fp, r1
 800d708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d70c:	f8d9 2000 	ldr.w	r2, [r9]
 800d710:	4461      	add	r1, ip
 800d712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d716:	fb0a c20b 	mla	r2, sl, fp, ip
 800d71a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d71e:	b289      	uxth	r1, r1
 800d720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d724:	4577      	cmp	r7, lr
 800d726:	f849 1b04 	str.w	r1, [r9], #4
 800d72a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d72e:	d8e2      	bhi.n	800d6f6 <__multiply+0xb2>
 800d730:	9a01      	ldr	r2, [sp, #4]
 800d732:	f845 c002 	str.w	ip, [r5, r2]
 800d736:	9a03      	ldr	r2, [sp, #12]
 800d738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d73c:	3304      	adds	r3, #4
 800d73e:	f1b9 0f00 	cmp.w	r9, #0
 800d742:	d020      	beq.n	800d786 <__multiply+0x142>
 800d744:	6829      	ldr	r1, [r5, #0]
 800d746:	f104 0c14 	add.w	ip, r4, #20
 800d74a:	46ae      	mov	lr, r5
 800d74c:	f04f 0a00 	mov.w	sl, #0
 800d750:	f8bc b000 	ldrh.w	fp, [ip]
 800d754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d758:	fb09 220b 	mla	r2, r9, fp, r2
 800d75c:	4492      	add	sl, r2
 800d75e:	b289      	uxth	r1, r1
 800d760:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d764:	f84e 1b04 	str.w	r1, [lr], #4
 800d768:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d76c:	f8be 1000 	ldrh.w	r1, [lr]
 800d770:	0c12      	lsrs	r2, r2, #16
 800d772:	fb09 1102 	mla	r1, r9, r2, r1
 800d776:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d77a:	4567      	cmp	r7, ip
 800d77c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d780:	d8e6      	bhi.n	800d750 <__multiply+0x10c>
 800d782:	9a01      	ldr	r2, [sp, #4]
 800d784:	50a9      	str	r1, [r5, r2]
 800d786:	3504      	adds	r5, #4
 800d788:	e79a      	b.n	800d6c0 <__multiply+0x7c>
 800d78a:	3e01      	subs	r6, #1
 800d78c:	e79c      	b.n	800d6c8 <__multiply+0x84>
 800d78e:	bf00      	nop
 800d790:	08010190 	.word	0x08010190
 800d794:	08010233 	.word	0x08010233

0800d798 <__pow5mult>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	4615      	mov	r5, r2
 800d79e:	f012 0203 	ands.w	r2, r2, #3
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	d007      	beq.n	800d7b8 <__pow5mult+0x20>
 800d7a8:	4c25      	ldr	r4, [pc, #148]	; (800d840 <__pow5mult+0xa8>)
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7b2:	f7ff fe51 	bl	800d458 <__multadd>
 800d7b6:	4607      	mov	r7, r0
 800d7b8:	10ad      	asrs	r5, r5, #2
 800d7ba:	d03d      	beq.n	800d838 <__pow5mult+0xa0>
 800d7bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7be:	b97c      	cbnz	r4, 800d7e0 <__pow5mult+0x48>
 800d7c0:	2010      	movs	r0, #16
 800d7c2:	f000 fbbf 	bl	800df44 <malloc>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	6270      	str	r0, [r6, #36]	; 0x24
 800d7ca:	b928      	cbnz	r0, 800d7d8 <__pow5mult+0x40>
 800d7cc:	4b1d      	ldr	r3, [pc, #116]	; (800d844 <__pow5mult+0xac>)
 800d7ce:	481e      	ldr	r0, [pc, #120]	; (800d848 <__pow5mult+0xb0>)
 800d7d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7d4:	f000 fb86 	bl	800dee4 <__assert_func>
 800d7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7dc:	6004      	str	r4, [r0, #0]
 800d7de:	60c4      	str	r4, [r0, #12]
 800d7e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7e8:	b94c      	cbnz	r4, 800d7fe <__pow5mult+0x66>
 800d7ea:	f240 2171 	movw	r1, #625	; 0x271
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff12 	bl	800d618 <__i2b>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	6003      	str	r3, [r0, #0]
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	07eb      	lsls	r3, r5, #31
 800d804:	d50a      	bpl.n	800d81c <__pow5mult+0x84>
 800d806:	4639      	mov	r1, r7
 800d808:	4622      	mov	r2, r4
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff1a 	bl	800d644 <__multiply>
 800d810:	4639      	mov	r1, r7
 800d812:	4680      	mov	r8, r0
 800d814:	4630      	mov	r0, r6
 800d816:	f7ff fdfd 	bl	800d414 <_Bfree>
 800d81a:	4647      	mov	r7, r8
 800d81c:	106d      	asrs	r5, r5, #1
 800d81e:	d00b      	beq.n	800d838 <__pow5mult+0xa0>
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	b938      	cbnz	r0, 800d834 <__pow5mult+0x9c>
 800d824:	4622      	mov	r2, r4
 800d826:	4621      	mov	r1, r4
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff ff0b 	bl	800d644 <__multiply>
 800d82e:	6020      	str	r0, [r4, #0]
 800d830:	f8c0 9000 	str.w	r9, [r0]
 800d834:	4604      	mov	r4, r0
 800d836:	e7e4      	b.n	800d802 <__pow5mult+0x6a>
 800d838:	4638      	mov	r0, r7
 800d83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d83e:	bf00      	nop
 800d840:	08010380 	.word	0x08010380
 800d844:	0801021c 	.word	0x0801021c
 800d848:	08010233 	.word	0x08010233

0800d84c <__lshift>:
 800d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d850:	460c      	mov	r4, r1
 800d852:	6849      	ldr	r1, [r1, #4]
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d85a:	68a3      	ldr	r3, [r4, #8]
 800d85c:	4607      	mov	r7, r0
 800d85e:	4691      	mov	r9, r2
 800d860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d864:	f108 0601 	add.w	r6, r8, #1
 800d868:	42b3      	cmp	r3, r6
 800d86a:	db0b      	blt.n	800d884 <__lshift+0x38>
 800d86c:	4638      	mov	r0, r7
 800d86e:	f7ff fd91 	bl	800d394 <_Balloc>
 800d872:	4605      	mov	r5, r0
 800d874:	b948      	cbnz	r0, 800d88a <__lshift+0x3e>
 800d876:	4602      	mov	r2, r0
 800d878:	4b2a      	ldr	r3, [pc, #168]	; (800d924 <__lshift+0xd8>)
 800d87a:	482b      	ldr	r0, [pc, #172]	; (800d928 <__lshift+0xdc>)
 800d87c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d880:	f000 fb30 	bl	800dee4 <__assert_func>
 800d884:	3101      	adds	r1, #1
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	e7ee      	b.n	800d868 <__lshift+0x1c>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f100 0114 	add.w	r1, r0, #20
 800d890:	f100 0210 	add.w	r2, r0, #16
 800d894:	4618      	mov	r0, r3
 800d896:	4553      	cmp	r3, sl
 800d898:	db37      	blt.n	800d90a <__lshift+0xbe>
 800d89a:	6920      	ldr	r0, [r4, #16]
 800d89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8a0:	f104 0314 	add.w	r3, r4, #20
 800d8a4:	f019 091f 	ands.w	r9, r9, #31
 800d8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8b0:	d02f      	beq.n	800d912 <__lshift+0xc6>
 800d8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8b6:	468a      	mov	sl, r1
 800d8b8:	f04f 0c00 	mov.w	ip, #0
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	fa02 f209 	lsl.w	r2, r2, r9
 800d8c2:	ea42 020c 	orr.w	r2, r2, ip
 800d8c6:	f84a 2b04 	str.w	r2, [sl], #4
 800d8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ce:	4298      	cmp	r0, r3
 800d8d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d8d4:	d8f2      	bhi.n	800d8bc <__lshift+0x70>
 800d8d6:	1b03      	subs	r3, r0, r4
 800d8d8:	3b15      	subs	r3, #21
 800d8da:	f023 0303 	bic.w	r3, r3, #3
 800d8de:	3304      	adds	r3, #4
 800d8e0:	f104 0215 	add.w	r2, r4, #21
 800d8e4:	4290      	cmp	r0, r2
 800d8e6:	bf38      	it	cc
 800d8e8:	2304      	movcc	r3, #4
 800d8ea:	f841 c003 	str.w	ip, [r1, r3]
 800d8ee:	f1bc 0f00 	cmp.w	ip, #0
 800d8f2:	d001      	beq.n	800d8f8 <__lshift+0xac>
 800d8f4:	f108 0602 	add.w	r6, r8, #2
 800d8f8:	3e01      	subs	r6, #1
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	612e      	str	r6, [r5, #16]
 800d8fe:	4621      	mov	r1, r4
 800d900:	f7ff fd88 	bl	800d414 <_Bfree>
 800d904:	4628      	mov	r0, r5
 800d906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d90e:	3301      	adds	r3, #1
 800d910:	e7c1      	b.n	800d896 <__lshift+0x4a>
 800d912:	3904      	subs	r1, #4
 800d914:	f853 2b04 	ldr.w	r2, [r3], #4
 800d918:	f841 2f04 	str.w	r2, [r1, #4]!
 800d91c:	4298      	cmp	r0, r3
 800d91e:	d8f9      	bhi.n	800d914 <__lshift+0xc8>
 800d920:	e7ea      	b.n	800d8f8 <__lshift+0xac>
 800d922:	bf00      	nop
 800d924:	08010190 	.word	0x08010190
 800d928:	08010233 	.word	0x08010233

0800d92c <__mcmp>:
 800d92c:	b530      	push	{r4, r5, lr}
 800d92e:	6902      	ldr	r2, [r0, #16]
 800d930:	690c      	ldr	r4, [r1, #16]
 800d932:	1b12      	subs	r2, r2, r4
 800d934:	d10e      	bne.n	800d954 <__mcmp+0x28>
 800d936:	f100 0314 	add.w	r3, r0, #20
 800d93a:	3114      	adds	r1, #20
 800d93c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d94c:	42a5      	cmp	r5, r4
 800d94e:	d003      	beq.n	800d958 <__mcmp+0x2c>
 800d950:	d305      	bcc.n	800d95e <__mcmp+0x32>
 800d952:	2201      	movs	r2, #1
 800d954:	4610      	mov	r0, r2
 800d956:	bd30      	pop	{r4, r5, pc}
 800d958:	4283      	cmp	r3, r0
 800d95a:	d3f3      	bcc.n	800d944 <__mcmp+0x18>
 800d95c:	e7fa      	b.n	800d954 <__mcmp+0x28>
 800d95e:	f04f 32ff 	mov.w	r2, #4294967295
 800d962:	e7f7      	b.n	800d954 <__mcmp+0x28>

0800d964 <__mdiff>:
 800d964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	460c      	mov	r4, r1
 800d96a:	4606      	mov	r6, r0
 800d96c:	4611      	mov	r1, r2
 800d96e:	4620      	mov	r0, r4
 800d970:	4690      	mov	r8, r2
 800d972:	f7ff ffdb 	bl	800d92c <__mcmp>
 800d976:	1e05      	subs	r5, r0, #0
 800d978:	d110      	bne.n	800d99c <__mdiff+0x38>
 800d97a:	4629      	mov	r1, r5
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff fd09 	bl	800d394 <_Balloc>
 800d982:	b930      	cbnz	r0, 800d992 <__mdiff+0x2e>
 800d984:	4b3a      	ldr	r3, [pc, #232]	; (800da70 <__mdiff+0x10c>)
 800d986:	4602      	mov	r2, r0
 800d988:	f240 2132 	movw	r1, #562	; 0x232
 800d98c:	4839      	ldr	r0, [pc, #228]	; (800da74 <__mdiff+0x110>)
 800d98e:	f000 faa9 	bl	800dee4 <__assert_func>
 800d992:	2301      	movs	r3, #1
 800d994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99c:	bfa4      	itt	ge
 800d99e:	4643      	movge	r3, r8
 800d9a0:	46a0      	movge	r8, r4
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d9a8:	bfa6      	itte	ge
 800d9aa:	461c      	movge	r4, r3
 800d9ac:	2500      	movge	r5, #0
 800d9ae:	2501      	movlt	r5, #1
 800d9b0:	f7ff fcf0 	bl	800d394 <_Balloc>
 800d9b4:	b920      	cbnz	r0, 800d9c0 <__mdiff+0x5c>
 800d9b6:	4b2e      	ldr	r3, [pc, #184]	; (800da70 <__mdiff+0x10c>)
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9be:	e7e5      	b.n	800d98c <__mdiff+0x28>
 800d9c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9c4:	6926      	ldr	r6, [r4, #16]
 800d9c6:	60c5      	str	r5, [r0, #12]
 800d9c8:	f104 0914 	add.w	r9, r4, #20
 800d9cc:	f108 0514 	add.w	r5, r8, #20
 800d9d0:	f100 0e14 	add.w	lr, r0, #20
 800d9d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9dc:	f108 0210 	add.w	r2, r8, #16
 800d9e0:	46f2      	mov	sl, lr
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9ec:	fa1f f883 	uxth.w	r8, r3
 800d9f0:	fa11 f18b 	uxtah	r1, r1, fp
 800d9f4:	0c1b      	lsrs	r3, r3, #16
 800d9f6:	eba1 0808 	sub.w	r8, r1, r8
 800d9fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da02:	fa1f f888 	uxth.w	r8, r8
 800da06:	1419      	asrs	r1, r3, #16
 800da08:	454e      	cmp	r6, r9
 800da0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da0e:	f84a 3b04 	str.w	r3, [sl], #4
 800da12:	d8e7      	bhi.n	800d9e4 <__mdiff+0x80>
 800da14:	1b33      	subs	r3, r6, r4
 800da16:	3b15      	subs	r3, #21
 800da18:	f023 0303 	bic.w	r3, r3, #3
 800da1c:	3304      	adds	r3, #4
 800da1e:	3415      	adds	r4, #21
 800da20:	42a6      	cmp	r6, r4
 800da22:	bf38      	it	cc
 800da24:	2304      	movcc	r3, #4
 800da26:	441d      	add	r5, r3
 800da28:	4473      	add	r3, lr
 800da2a:	469e      	mov	lr, r3
 800da2c:	462e      	mov	r6, r5
 800da2e:	4566      	cmp	r6, ip
 800da30:	d30e      	bcc.n	800da50 <__mdiff+0xec>
 800da32:	f10c 0203 	add.w	r2, ip, #3
 800da36:	1b52      	subs	r2, r2, r5
 800da38:	f022 0203 	bic.w	r2, r2, #3
 800da3c:	3d03      	subs	r5, #3
 800da3e:	45ac      	cmp	ip, r5
 800da40:	bf38      	it	cc
 800da42:	2200      	movcc	r2, #0
 800da44:	441a      	add	r2, r3
 800da46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da4a:	b17b      	cbz	r3, 800da6c <__mdiff+0x108>
 800da4c:	6107      	str	r7, [r0, #16]
 800da4e:	e7a3      	b.n	800d998 <__mdiff+0x34>
 800da50:	f856 8b04 	ldr.w	r8, [r6], #4
 800da54:	fa11 f288 	uxtah	r2, r1, r8
 800da58:	1414      	asrs	r4, r2, #16
 800da5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da5e:	b292      	uxth	r2, r2
 800da60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da64:	f84e 2b04 	str.w	r2, [lr], #4
 800da68:	1421      	asrs	r1, r4, #16
 800da6a:	e7e0      	b.n	800da2e <__mdiff+0xca>
 800da6c:	3f01      	subs	r7, #1
 800da6e:	e7ea      	b.n	800da46 <__mdiff+0xe2>
 800da70:	08010190 	.word	0x08010190
 800da74:	08010233 	.word	0x08010233

0800da78 <__ulp>:
 800da78:	b082      	sub	sp, #8
 800da7a:	ed8d 0b00 	vstr	d0, [sp]
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	4912      	ldr	r1, [pc, #72]	; (800dacc <__ulp+0x54>)
 800da82:	4019      	ands	r1, r3
 800da84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800da88:	2900      	cmp	r1, #0
 800da8a:	dd05      	ble.n	800da98 <__ulp+0x20>
 800da8c:	2200      	movs	r2, #0
 800da8e:	460b      	mov	r3, r1
 800da90:	ec43 2b10 	vmov	d0, r2, r3
 800da94:	b002      	add	sp, #8
 800da96:	4770      	bx	lr
 800da98:	4249      	negs	r1, r1
 800da9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800da9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	f04f 0300 	mov.w	r3, #0
 800daaa:	da04      	bge.n	800dab6 <__ulp+0x3e>
 800daac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dab0:	fa41 f300 	asr.w	r3, r1, r0
 800dab4:	e7ec      	b.n	800da90 <__ulp+0x18>
 800dab6:	f1a0 0114 	sub.w	r1, r0, #20
 800daba:	291e      	cmp	r1, #30
 800dabc:	bfda      	itte	le
 800dabe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dac2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dac6:	2101      	movgt	r1, #1
 800dac8:	460a      	mov	r2, r1
 800daca:	e7e1      	b.n	800da90 <__ulp+0x18>
 800dacc:	7ff00000 	.word	0x7ff00000

0800dad0 <__b2d>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	6905      	ldr	r5, [r0, #16]
 800dad4:	f100 0714 	add.w	r7, r0, #20
 800dad8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dadc:	1f2e      	subs	r6, r5, #4
 800dade:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dae2:	4620      	mov	r0, r4
 800dae4:	f7ff fd48 	bl	800d578 <__hi0bits>
 800dae8:	f1c0 0320 	rsb	r3, r0, #32
 800daec:	280a      	cmp	r0, #10
 800daee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800db6c <__b2d+0x9c>
 800daf2:	600b      	str	r3, [r1, #0]
 800daf4:	dc14      	bgt.n	800db20 <__b2d+0x50>
 800daf6:	f1c0 0e0b 	rsb	lr, r0, #11
 800dafa:	fa24 f10e 	lsr.w	r1, r4, lr
 800dafe:	42b7      	cmp	r7, r6
 800db00:	ea41 030c 	orr.w	r3, r1, ip
 800db04:	bf34      	ite	cc
 800db06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db0a:	2100      	movcs	r1, #0
 800db0c:	3015      	adds	r0, #21
 800db0e:	fa04 f000 	lsl.w	r0, r4, r0
 800db12:	fa21 f10e 	lsr.w	r1, r1, lr
 800db16:	ea40 0201 	orr.w	r2, r0, r1
 800db1a:	ec43 2b10 	vmov	d0, r2, r3
 800db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db20:	42b7      	cmp	r7, r6
 800db22:	bf3a      	itte	cc
 800db24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db28:	f1a5 0608 	subcc.w	r6, r5, #8
 800db2c:	2100      	movcs	r1, #0
 800db2e:	380b      	subs	r0, #11
 800db30:	d017      	beq.n	800db62 <__b2d+0x92>
 800db32:	f1c0 0c20 	rsb	ip, r0, #32
 800db36:	fa04 f500 	lsl.w	r5, r4, r0
 800db3a:	42be      	cmp	r6, r7
 800db3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800db40:	ea45 0504 	orr.w	r5, r5, r4
 800db44:	bf8c      	ite	hi
 800db46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800db4a:	2400      	movls	r4, #0
 800db4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800db50:	fa01 f000 	lsl.w	r0, r1, r0
 800db54:	fa24 f40c 	lsr.w	r4, r4, ip
 800db58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db5c:	ea40 0204 	orr.w	r2, r0, r4
 800db60:	e7db      	b.n	800db1a <__b2d+0x4a>
 800db62:	ea44 030c 	orr.w	r3, r4, ip
 800db66:	460a      	mov	r2, r1
 800db68:	e7d7      	b.n	800db1a <__b2d+0x4a>
 800db6a:	bf00      	nop
 800db6c:	3ff00000 	.word	0x3ff00000

0800db70 <__d2b>:
 800db70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db74:	4689      	mov	r9, r1
 800db76:	2101      	movs	r1, #1
 800db78:	ec57 6b10 	vmov	r6, r7, d0
 800db7c:	4690      	mov	r8, r2
 800db7e:	f7ff fc09 	bl	800d394 <_Balloc>
 800db82:	4604      	mov	r4, r0
 800db84:	b930      	cbnz	r0, 800db94 <__d2b+0x24>
 800db86:	4602      	mov	r2, r0
 800db88:	4b25      	ldr	r3, [pc, #148]	; (800dc20 <__d2b+0xb0>)
 800db8a:	4826      	ldr	r0, [pc, #152]	; (800dc24 <__d2b+0xb4>)
 800db8c:	f240 310a 	movw	r1, #778	; 0x30a
 800db90:	f000 f9a8 	bl	800dee4 <__assert_func>
 800db94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db9c:	bb35      	cbnz	r5, 800dbec <__d2b+0x7c>
 800db9e:	2e00      	cmp	r6, #0
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	d028      	beq.n	800dbf6 <__d2b+0x86>
 800dba4:	4668      	mov	r0, sp
 800dba6:	9600      	str	r6, [sp, #0]
 800dba8:	f7ff fd06 	bl	800d5b8 <__lo0bits>
 800dbac:	9900      	ldr	r1, [sp, #0]
 800dbae:	b300      	cbz	r0, 800dbf2 <__d2b+0x82>
 800dbb0:	9a01      	ldr	r2, [sp, #4]
 800dbb2:	f1c0 0320 	rsb	r3, r0, #32
 800dbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbba:	430b      	orrs	r3, r1
 800dbbc:	40c2      	lsrs	r2, r0
 800dbbe:	6163      	str	r3, [r4, #20]
 800dbc0:	9201      	str	r2, [sp, #4]
 800dbc2:	9b01      	ldr	r3, [sp, #4]
 800dbc4:	61a3      	str	r3, [r4, #24]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	bf14      	ite	ne
 800dbca:	2202      	movne	r2, #2
 800dbcc:	2201      	moveq	r2, #1
 800dbce:	6122      	str	r2, [r4, #16]
 800dbd0:	b1d5      	cbz	r5, 800dc08 <__d2b+0x98>
 800dbd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dbd6:	4405      	add	r5, r0
 800dbd8:	f8c9 5000 	str.w	r5, [r9]
 800dbdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbe0:	f8c8 0000 	str.w	r0, [r8]
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	b003      	add	sp, #12
 800dbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbf0:	e7d5      	b.n	800db9e <__d2b+0x2e>
 800dbf2:	6161      	str	r1, [r4, #20]
 800dbf4:	e7e5      	b.n	800dbc2 <__d2b+0x52>
 800dbf6:	a801      	add	r0, sp, #4
 800dbf8:	f7ff fcde 	bl	800d5b8 <__lo0bits>
 800dbfc:	9b01      	ldr	r3, [sp, #4]
 800dbfe:	6163      	str	r3, [r4, #20]
 800dc00:	2201      	movs	r2, #1
 800dc02:	6122      	str	r2, [r4, #16]
 800dc04:	3020      	adds	r0, #32
 800dc06:	e7e3      	b.n	800dbd0 <__d2b+0x60>
 800dc08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc10:	f8c9 0000 	str.w	r0, [r9]
 800dc14:	6918      	ldr	r0, [r3, #16]
 800dc16:	f7ff fcaf 	bl	800d578 <__hi0bits>
 800dc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc1e:	e7df      	b.n	800dbe0 <__d2b+0x70>
 800dc20:	08010190 	.word	0x08010190
 800dc24:	08010233 	.word	0x08010233

0800dc28 <__ratio>:
 800dc28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	4688      	mov	r8, r1
 800dc2e:	4669      	mov	r1, sp
 800dc30:	4681      	mov	r9, r0
 800dc32:	f7ff ff4d 	bl	800dad0 <__b2d>
 800dc36:	a901      	add	r1, sp, #4
 800dc38:	4640      	mov	r0, r8
 800dc3a:	ec55 4b10 	vmov	r4, r5, d0
 800dc3e:	f7ff ff47 	bl	800dad0 <__b2d>
 800dc42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dc4a:	eba3 0c02 	sub.w	ip, r3, r2
 800dc4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc52:	1a9b      	subs	r3, r3, r2
 800dc54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dc58:	ec51 0b10 	vmov	r0, r1, d0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bfd6      	itet	le
 800dc60:	460a      	movle	r2, r1
 800dc62:	462a      	movgt	r2, r5
 800dc64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc68:	468b      	mov	fp, r1
 800dc6a:	462f      	mov	r7, r5
 800dc6c:	bfd4      	ite	le
 800dc6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc76:	4620      	mov	r0, r4
 800dc78:	ee10 2a10 	vmov	r2, s0
 800dc7c:	465b      	mov	r3, fp
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 fdec 	bl	800085c <__aeabi_ddiv>
 800dc84:	ec41 0b10 	vmov	d0, r0, r1
 800dc88:	b003      	add	sp, #12
 800dc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc8e <__copybits>:
 800dc8e:	3901      	subs	r1, #1
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	1149      	asrs	r1, r1, #5
 800dc94:	6914      	ldr	r4, [r2, #16]
 800dc96:	3101      	adds	r1, #1
 800dc98:	f102 0314 	add.w	r3, r2, #20
 800dc9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dca4:	1f05      	subs	r5, r0, #4
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	d30c      	bcc.n	800dcc4 <__copybits+0x36>
 800dcaa:	1aa3      	subs	r3, r4, r2
 800dcac:	3b11      	subs	r3, #17
 800dcae:	f023 0303 	bic.w	r3, r3, #3
 800dcb2:	3211      	adds	r2, #17
 800dcb4:	42a2      	cmp	r2, r4
 800dcb6:	bf88      	it	hi
 800dcb8:	2300      	movhi	r3, #0
 800dcba:	4418      	add	r0, r3
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4288      	cmp	r0, r1
 800dcc0:	d305      	bcc.n	800dcce <__copybits+0x40>
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	f853 6b04 	ldr.w	r6, [r3], #4
 800dcc8:	f845 6f04 	str.w	r6, [r5, #4]!
 800dccc:	e7eb      	b.n	800dca6 <__copybits+0x18>
 800dcce:	f840 3b04 	str.w	r3, [r0], #4
 800dcd2:	e7f4      	b.n	800dcbe <__copybits+0x30>

0800dcd4 <__any_on>:
 800dcd4:	f100 0214 	add.w	r2, r0, #20
 800dcd8:	6900      	ldr	r0, [r0, #16]
 800dcda:	114b      	asrs	r3, r1, #5
 800dcdc:	4298      	cmp	r0, r3
 800dcde:	b510      	push	{r4, lr}
 800dce0:	db11      	blt.n	800dd06 <__any_on+0x32>
 800dce2:	dd0a      	ble.n	800dcfa <__any_on+0x26>
 800dce4:	f011 011f 	ands.w	r1, r1, #31
 800dce8:	d007      	beq.n	800dcfa <__any_on+0x26>
 800dcea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcee:	fa24 f001 	lsr.w	r0, r4, r1
 800dcf2:	fa00 f101 	lsl.w	r1, r0, r1
 800dcf6:	428c      	cmp	r4, r1
 800dcf8:	d10b      	bne.n	800dd12 <__any_on+0x3e>
 800dcfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d803      	bhi.n	800dd0a <__any_on+0x36>
 800dd02:	2000      	movs	r0, #0
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	4603      	mov	r3, r0
 800dd08:	e7f7      	b.n	800dcfa <__any_on+0x26>
 800dd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd0e:	2900      	cmp	r1, #0
 800dd10:	d0f5      	beq.n	800dcfe <__any_on+0x2a>
 800dd12:	2001      	movs	r0, #1
 800dd14:	e7f6      	b.n	800dd04 <__any_on+0x30>

0800dd16 <_calloc_r>:
 800dd16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd18:	fba1 2402 	umull	r2, r4, r1, r2
 800dd1c:	b94c      	cbnz	r4, 800dd32 <_calloc_r+0x1c>
 800dd1e:	4611      	mov	r1, r2
 800dd20:	9201      	str	r2, [sp, #4]
 800dd22:	f000 f82f 	bl	800dd84 <_malloc_r>
 800dd26:	9a01      	ldr	r2, [sp, #4]
 800dd28:	4605      	mov	r5, r0
 800dd2a:	b930      	cbnz	r0, 800dd3a <_calloc_r+0x24>
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	b003      	add	sp, #12
 800dd30:	bd30      	pop	{r4, r5, pc}
 800dd32:	220c      	movs	r2, #12
 800dd34:	6002      	str	r2, [r0, #0]
 800dd36:	2500      	movs	r5, #0
 800dd38:	e7f8      	b.n	800dd2c <_calloc_r+0x16>
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	f7fe f962 	bl	800c004 <memset>
 800dd40:	e7f4      	b.n	800dd2c <_calloc_r+0x16>
	...

0800dd44 <sbrk_aligned>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	4e0e      	ldr	r6, [pc, #56]	; (800dd80 <sbrk_aligned+0x3c>)
 800dd48:	460c      	mov	r4, r1
 800dd4a:	6831      	ldr	r1, [r6, #0]
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	b911      	cbnz	r1, 800dd56 <sbrk_aligned+0x12>
 800dd50:	f000 f896 	bl	800de80 <_sbrk_r>
 800dd54:	6030      	str	r0, [r6, #0]
 800dd56:	4621      	mov	r1, r4
 800dd58:	4628      	mov	r0, r5
 800dd5a:	f000 f891 	bl	800de80 <_sbrk_r>
 800dd5e:	1c43      	adds	r3, r0, #1
 800dd60:	d00a      	beq.n	800dd78 <sbrk_aligned+0x34>
 800dd62:	1cc4      	adds	r4, r0, #3
 800dd64:	f024 0403 	bic.w	r4, r4, #3
 800dd68:	42a0      	cmp	r0, r4
 800dd6a:	d007      	beq.n	800dd7c <sbrk_aligned+0x38>
 800dd6c:	1a21      	subs	r1, r4, r0
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f000 f886 	bl	800de80 <_sbrk_r>
 800dd74:	3001      	adds	r0, #1
 800dd76:	d101      	bne.n	800dd7c <sbrk_aligned+0x38>
 800dd78:	f04f 34ff 	mov.w	r4, #4294967295
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	20000890 	.word	0x20000890

0800dd84 <_malloc_r>:
 800dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd88:	1ccd      	adds	r5, r1, #3
 800dd8a:	f025 0503 	bic.w	r5, r5, #3
 800dd8e:	3508      	adds	r5, #8
 800dd90:	2d0c      	cmp	r5, #12
 800dd92:	bf38      	it	cc
 800dd94:	250c      	movcc	r5, #12
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	4607      	mov	r7, r0
 800dd9a:	db01      	blt.n	800dda0 <_malloc_r+0x1c>
 800dd9c:	42a9      	cmp	r1, r5
 800dd9e:	d905      	bls.n	800ddac <_malloc_r+0x28>
 800dda0:	230c      	movs	r3, #12
 800dda2:	603b      	str	r3, [r7, #0]
 800dda4:	2600      	movs	r6, #0
 800dda6:	4630      	mov	r0, r6
 800dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddac:	4e2e      	ldr	r6, [pc, #184]	; (800de68 <_malloc_r+0xe4>)
 800ddae:	f000 f8d1 	bl	800df54 <__malloc_lock>
 800ddb2:	6833      	ldr	r3, [r6, #0]
 800ddb4:	461c      	mov	r4, r3
 800ddb6:	bb34      	cbnz	r4, 800de06 <_malloc_r+0x82>
 800ddb8:	4629      	mov	r1, r5
 800ddba:	4638      	mov	r0, r7
 800ddbc:	f7ff ffc2 	bl	800dd44 <sbrk_aligned>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	d14d      	bne.n	800de62 <_malloc_r+0xde>
 800ddc6:	6834      	ldr	r4, [r6, #0]
 800ddc8:	4626      	mov	r6, r4
 800ddca:	2e00      	cmp	r6, #0
 800ddcc:	d140      	bne.n	800de50 <_malloc_r+0xcc>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	eb04 0803 	add.w	r8, r4, r3
 800ddd8:	f000 f852 	bl	800de80 <_sbrk_r>
 800dddc:	4580      	cmp	r8, r0
 800ddde:	d13a      	bne.n	800de56 <_malloc_r+0xd2>
 800dde0:	6821      	ldr	r1, [r4, #0]
 800dde2:	3503      	adds	r5, #3
 800dde4:	1a6d      	subs	r5, r5, r1
 800dde6:	f025 0503 	bic.w	r5, r5, #3
 800ddea:	3508      	adds	r5, #8
 800ddec:	2d0c      	cmp	r5, #12
 800ddee:	bf38      	it	cc
 800ddf0:	250c      	movcc	r5, #12
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f7ff ffa5 	bl	800dd44 <sbrk_aligned>
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	d02b      	beq.n	800de56 <_malloc_r+0xd2>
 800ddfe:	6823      	ldr	r3, [r4, #0]
 800de00:	442b      	add	r3, r5
 800de02:	6023      	str	r3, [r4, #0]
 800de04:	e00e      	b.n	800de24 <_malloc_r+0xa0>
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	1b52      	subs	r2, r2, r5
 800de0a:	d41e      	bmi.n	800de4a <_malloc_r+0xc6>
 800de0c:	2a0b      	cmp	r2, #11
 800de0e:	d916      	bls.n	800de3e <_malloc_r+0xba>
 800de10:	1961      	adds	r1, r4, r5
 800de12:	42a3      	cmp	r3, r4
 800de14:	6025      	str	r5, [r4, #0]
 800de16:	bf18      	it	ne
 800de18:	6059      	strne	r1, [r3, #4]
 800de1a:	6863      	ldr	r3, [r4, #4]
 800de1c:	bf08      	it	eq
 800de1e:	6031      	streq	r1, [r6, #0]
 800de20:	5162      	str	r2, [r4, r5]
 800de22:	604b      	str	r3, [r1, #4]
 800de24:	4638      	mov	r0, r7
 800de26:	f104 060b 	add.w	r6, r4, #11
 800de2a:	f000 f899 	bl	800df60 <__malloc_unlock>
 800de2e:	f026 0607 	bic.w	r6, r6, #7
 800de32:	1d23      	adds	r3, r4, #4
 800de34:	1af2      	subs	r2, r6, r3
 800de36:	d0b6      	beq.n	800dda6 <_malloc_r+0x22>
 800de38:	1b9b      	subs	r3, r3, r6
 800de3a:	50a3      	str	r3, [r4, r2]
 800de3c:	e7b3      	b.n	800dda6 <_malloc_r+0x22>
 800de3e:	6862      	ldr	r2, [r4, #4]
 800de40:	42a3      	cmp	r3, r4
 800de42:	bf0c      	ite	eq
 800de44:	6032      	streq	r2, [r6, #0]
 800de46:	605a      	strne	r2, [r3, #4]
 800de48:	e7ec      	b.n	800de24 <_malloc_r+0xa0>
 800de4a:	4623      	mov	r3, r4
 800de4c:	6864      	ldr	r4, [r4, #4]
 800de4e:	e7b2      	b.n	800ddb6 <_malloc_r+0x32>
 800de50:	4634      	mov	r4, r6
 800de52:	6876      	ldr	r6, [r6, #4]
 800de54:	e7b9      	b.n	800ddca <_malloc_r+0x46>
 800de56:	230c      	movs	r3, #12
 800de58:	603b      	str	r3, [r7, #0]
 800de5a:	4638      	mov	r0, r7
 800de5c:	f000 f880 	bl	800df60 <__malloc_unlock>
 800de60:	e7a1      	b.n	800dda6 <_malloc_r+0x22>
 800de62:	6025      	str	r5, [r4, #0]
 800de64:	e7de      	b.n	800de24 <_malloc_r+0xa0>
 800de66:	bf00      	nop
 800de68:	2000088c 	.word	0x2000088c
 800de6c:	00000000 	.word	0x00000000

0800de70 <nan>:
 800de70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de78 <nan+0x8>
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	00000000 	.word	0x00000000
 800de7c:	7ff80000 	.word	0x7ff80000

0800de80 <_sbrk_r>:
 800de80:	b538      	push	{r3, r4, r5, lr}
 800de82:	4d06      	ldr	r5, [pc, #24]	; (800de9c <_sbrk_r+0x1c>)
 800de84:	2300      	movs	r3, #0
 800de86:	4604      	mov	r4, r0
 800de88:	4608      	mov	r0, r1
 800de8a:	602b      	str	r3, [r5, #0]
 800de8c:	f7f7 fde2 	bl	8005a54 <_sbrk>
 800de90:	1c43      	adds	r3, r0, #1
 800de92:	d102      	bne.n	800de9a <_sbrk_r+0x1a>
 800de94:	682b      	ldr	r3, [r5, #0]
 800de96:	b103      	cbz	r3, 800de9a <_sbrk_r+0x1a>
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	20000894 	.word	0x20000894

0800dea0 <strncmp>:
 800dea0:	b510      	push	{r4, lr}
 800dea2:	b17a      	cbz	r2, 800dec4 <strncmp+0x24>
 800dea4:	4603      	mov	r3, r0
 800dea6:	3901      	subs	r1, #1
 800dea8:	1884      	adds	r4, r0, r2
 800deaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800deae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800deb2:	4290      	cmp	r0, r2
 800deb4:	d101      	bne.n	800deba <strncmp+0x1a>
 800deb6:	42a3      	cmp	r3, r4
 800deb8:	d101      	bne.n	800debe <strncmp+0x1e>
 800deba:	1a80      	subs	r0, r0, r2
 800debc:	bd10      	pop	{r4, pc}
 800debe:	2800      	cmp	r0, #0
 800dec0:	d1f3      	bne.n	800deaa <strncmp+0xa>
 800dec2:	e7fa      	b.n	800deba <strncmp+0x1a>
 800dec4:	4610      	mov	r0, r2
 800dec6:	e7f9      	b.n	800debc <strncmp+0x1c>

0800dec8 <__ascii_wctomb>:
 800dec8:	b149      	cbz	r1, 800dede <__ascii_wctomb+0x16>
 800deca:	2aff      	cmp	r2, #255	; 0xff
 800decc:	bf85      	ittet	hi
 800dece:	238a      	movhi	r3, #138	; 0x8a
 800ded0:	6003      	strhi	r3, [r0, #0]
 800ded2:	700a      	strbls	r2, [r1, #0]
 800ded4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ded8:	bf98      	it	ls
 800deda:	2001      	movls	r0, #1
 800dedc:	4770      	bx	lr
 800dede:	4608      	mov	r0, r1
 800dee0:	4770      	bx	lr
	...

0800dee4 <__assert_func>:
 800dee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dee6:	4614      	mov	r4, r2
 800dee8:	461a      	mov	r2, r3
 800deea:	4b09      	ldr	r3, [pc, #36]	; (800df10 <__assert_func+0x2c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4605      	mov	r5, r0
 800def0:	68d8      	ldr	r0, [r3, #12]
 800def2:	b14c      	cbz	r4, 800df08 <__assert_func+0x24>
 800def4:	4b07      	ldr	r3, [pc, #28]	; (800df14 <__assert_func+0x30>)
 800def6:	9100      	str	r1, [sp, #0]
 800def8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800defc:	4906      	ldr	r1, [pc, #24]	; (800df18 <__assert_func+0x34>)
 800defe:	462b      	mov	r3, r5
 800df00:	f000 f80e 	bl	800df20 <fiprintf>
 800df04:	f000 fc2c 	bl	800e760 <abort>
 800df08:	4b04      	ldr	r3, [pc, #16]	; (800df1c <__assert_func+0x38>)
 800df0a:	461c      	mov	r4, r3
 800df0c:	e7f3      	b.n	800def6 <__assert_func+0x12>
 800df0e:	bf00      	nop
 800df10:	20000064 	.word	0x20000064
 800df14:	0801038c 	.word	0x0801038c
 800df18:	08010399 	.word	0x08010399
 800df1c:	080103c7 	.word	0x080103c7

0800df20 <fiprintf>:
 800df20:	b40e      	push	{r1, r2, r3}
 800df22:	b503      	push	{r0, r1, lr}
 800df24:	4601      	mov	r1, r0
 800df26:	ab03      	add	r3, sp, #12
 800df28:	4805      	ldr	r0, [pc, #20]	; (800df40 <fiprintf+0x20>)
 800df2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df2e:	6800      	ldr	r0, [r0, #0]
 800df30:	9301      	str	r3, [sp, #4]
 800df32:	f000 f891 	bl	800e058 <_vfiprintf_r>
 800df36:	b002      	add	sp, #8
 800df38:	f85d eb04 	ldr.w	lr, [sp], #4
 800df3c:	b003      	add	sp, #12
 800df3e:	4770      	bx	lr
 800df40:	20000064 	.word	0x20000064

0800df44 <malloc>:
 800df44:	4b02      	ldr	r3, [pc, #8]	; (800df50 <malloc+0xc>)
 800df46:	4601      	mov	r1, r0
 800df48:	6818      	ldr	r0, [r3, #0]
 800df4a:	f7ff bf1b 	b.w	800dd84 <_malloc_r>
 800df4e:	bf00      	nop
 800df50:	20000064 	.word	0x20000064

0800df54 <__malloc_lock>:
 800df54:	4801      	ldr	r0, [pc, #4]	; (800df5c <__malloc_lock+0x8>)
 800df56:	f000 bdc3 	b.w	800eae0 <__retarget_lock_acquire_recursive>
 800df5a:	bf00      	nop
 800df5c:	20000898 	.word	0x20000898

0800df60 <__malloc_unlock>:
 800df60:	4801      	ldr	r0, [pc, #4]	; (800df68 <__malloc_unlock+0x8>)
 800df62:	f000 bdbe 	b.w	800eae2 <__retarget_lock_release_recursive>
 800df66:	bf00      	nop
 800df68:	20000898 	.word	0x20000898

0800df6c <_free_r>:
 800df6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6e:	2900      	cmp	r1, #0
 800df70:	d044      	beq.n	800dffc <_free_r+0x90>
 800df72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df76:	9001      	str	r0, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f1a1 0404 	sub.w	r4, r1, #4
 800df7e:	bfb8      	it	lt
 800df80:	18e4      	addlt	r4, r4, r3
 800df82:	f7ff ffe7 	bl	800df54 <__malloc_lock>
 800df86:	4a1e      	ldr	r2, [pc, #120]	; (800e000 <_free_r+0x94>)
 800df88:	9801      	ldr	r0, [sp, #4]
 800df8a:	6813      	ldr	r3, [r2, #0]
 800df8c:	b933      	cbnz	r3, 800df9c <_free_r+0x30>
 800df8e:	6063      	str	r3, [r4, #4]
 800df90:	6014      	str	r4, [r2, #0]
 800df92:	b003      	add	sp, #12
 800df94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df98:	f7ff bfe2 	b.w	800df60 <__malloc_unlock>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d908      	bls.n	800dfb2 <_free_r+0x46>
 800dfa0:	6825      	ldr	r5, [r4, #0]
 800dfa2:	1961      	adds	r1, r4, r5
 800dfa4:	428b      	cmp	r3, r1
 800dfa6:	bf01      	itttt	eq
 800dfa8:	6819      	ldreq	r1, [r3, #0]
 800dfaa:	685b      	ldreq	r3, [r3, #4]
 800dfac:	1949      	addeq	r1, r1, r5
 800dfae:	6021      	streq	r1, [r4, #0]
 800dfb0:	e7ed      	b.n	800df8e <_free_r+0x22>
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	b10b      	cbz	r3, 800dfbc <_free_r+0x50>
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	d9fa      	bls.n	800dfb2 <_free_r+0x46>
 800dfbc:	6811      	ldr	r1, [r2, #0]
 800dfbe:	1855      	adds	r5, r2, r1
 800dfc0:	42a5      	cmp	r5, r4
 800dfc2:	d10b      	bne.n	800dfdc <_free_r+0x70>
 800dfc4:	6824      	ldr	r4, [r4, #0]
 800dfc6:	4421      	add	r1, r4
 800dfc8:	1854      	adds	r4, r2, r1
 800dfca:	42a3      	cmp	r3, r4
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	d1e0      	bne.n	800df92 <_free_r+0x26>
 800dfd0:	681c      	ldr	r4, [r3, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	6053      	str	r3, [r2, #4]
 800dfd6:	4421      	add	r1, r4
 800dfd8:	6011      	str	r1, [r2, #0]
 800dfda:	e7da      	b.n	800df92 <_free_r+0x26>
 800dfdc:	d902      	bls.n	800dfe4 <_free_r+0x78>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	6003      	str	r3, [r0, #0]
 800dfe2:	e7d6      	b.n	800df92 <_free_r+0x26>
 800dfe4:	6825      	ldr	r5, [r4, #0]
 800dfe6:	1961      	adds	r1, r4, r5
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	bf04      	itt	eq
 800dfec:	6819      	ldreq	r1, [r3, #0]
 800dfee:	685b      	ldreq	r3, [r3, #4]
 800dff0:	6063      	str	r3, [r4, #4]
 800dff2:	bf04      	itt	eq
 800dff4:	1949      	addeq	r1, r1, r5
 800dff6:	6021      	streq	r1, [r4, #0]
 800dff8:	6054      	str	r4, [r2, #4]
 800dffa:	e7ca      	b.n	800df92 <_free_r+0x26>
 800dffc:	b003      	add	sp, #12
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	2000088c 	.word	0x2000088c

0800e004 <__sfputc_r>:
 800e004:	6893      	ldr	r3, [r2, #8]
 800e006:	3b01      	subs	r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	b410      	push	{r4}
 800e00c:	6093      	str	r3, [r2, #8]
 800e00e:	da08      	bge.n	800e022 <__sfputc_r+0x1e>
 800e010:	6994      	ldr	r4, [r2, #24]
 800e012:	42a3      	cmp	r3, r4
 800e014:	db01      	blt.n	800e01a <__sfputc_r+0x16>
 800e016:	290a      	cmp	r1, #10
 800e018:	d103      	bne.n	800e022 <__sfputc_r+0x1e>
 800e01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e01e:	f000 badf 	b.w	800e5e0 <__swbuf_r>
 800e022:	6813      	ldr	r3, [r2, #0]
 800e024:	1c58      	adds	r0, r3, #1
 800e026:	6010      	str	r0, [r2, #0]
 800e028:	7019      	strb	r1, [r3, #0]
 800e02a:	4608      	mov	r0, r1
 800e02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <__sfputs_r>:
 800e032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
 800e038:	4614      	mov	r4, r2
 800e03a:	18d5      	adds	r5, r2, r3
 800e03c:	42ac      	cmp	r4, r5
 800e03e:	d101      	bne.n	800e044 <__sfputs_r+0x12>
 800e040:	2000      	movs	r0, #0
 800e042:	e007      	b.n	800e054 <__sfputs_r+0x22>
 800e044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e048:	463a      	mov	r2, r7
 800e04a:	4630      	mov	r0, r6
 800e04c:	f7ff ffda 	bl	800e004 <__sfputc_r>
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	d1f3      	bne.n	800e03c <__sfputs_r+0xa>
 800e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e058 <_vfiprintf_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	460d      	mov	r5, r1
 800e05e:	b09d      	sub	sp, #116	; 0x74
 800e060:	4614      	mov	r4, r2
 800e062:	4698      	mov	r8, r3
 800e064:	4606      	mov	r6, r0
 800e066:	b118      	cbz	r0, 800e070 <_vfiprintf_r+0x18>
 800e068:	6983      	ldr	r3, [r0, #24]
 800e06a:	b90b      	cbnz	r3, 800e070 <_vfiprintf_r+0x18>
 800e06c:	f000 fc9a 	bl	800e9a4 <__sinit>
 800e070:	4b89      	ldr	r3, [pc, #548]	; (800e298 <_vfiprintf_r+0x240>)
 800e072:	429d      	cmp	r5, r3
 800e074:	d11b      	bne.n	800e0ae <_vfiprintf_r+0x56>
 800e076:	6875      	ldr	r5, [r6, #4]
 800e078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e07a:	07d9      	lsls	r1, r3, #31
 800e07c:	d405      	bmi.n	800e08a <_vfiprintf_r+0x32>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	059a      	lsls	r2, r3, #22
 800e082:	d402      	bmi.n	800e08a <_vfiprintf_r+0x32>
 800e084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e086:	f000 fd2b 	bl	800eae0 <__retarget_lock_acquire_recursive>
 800e08a:	89ab      	ldrh	r3, [r5, #12]
 800e08c:	071b      	lsls	r3, r3, #28
 800e08e:	d501      	bpl.n	800e094 <_vfiprintf_r+0x3c>
 800e090:	692b      	ldr	r3, [r5, #16]
 800e092:	b9eb      	cbnz	r3, 800e0d0 <_vfiprintf_r+0x78>
 800e094:	4629      	mov	r1, r5
 800e096:	4630      	mov	r0, r6
 800e098:	f000 faf4 	bl	800e684 <__swsetup_r>
 800e09c:	b1c0      	cbz	r0, 800e0d0 <_vfiprintf_r+0x78>
 800e09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a0:	07dc      	lsls	r4, r3, #31
 800e0a2:	d50e      	bpl.n	800e0c2 <_vfiprintf_r+0x6a>
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	b01d      	add	sp, #116	; 0x74
 800e0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ae:	4b7b      	ldr	r3, [pc, #492]	; (800e29c <_vfiprintf_r+0x244>)
 800e0b0:	429d      	cmp	r5, r3
 800e0b2:	d101      	bne.n	800e0b8 <_vfiprintf_r+0x60>
 800e0b4:	68b5      	ldr	r5, [r6, #8]
 800e0b6:	e7df      	b.n	800e078 <_vfiprintf_r+0x20>
 800e0b8:	4b79      	ldr	r3, [pc, #484]	; (800e2a0 <_vfiprintf_r+0x248>)
 800e0ba:	429d      	cmp	r5, r3
 800e0bc:	bf08      	it	eq
 800e0be:	68f5      	ldreq	r5, [r6, #12]
 800e0c0:	e7da      	b.n	800e078 <_vfiprintf_r+0x20>
 800e0c2:	89ab      	ldrh	r3, [r5, #12]
 800e0c4:	0598      	lsls	r0, r3, #22
 800e0c6:	d4ed      	bmi.n	800e0a4 <_vfiprintf_r+0x4c>
 800e0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ca:	f000 fd0a 	bl	800eae2 <__retarget_lock_release_recursive>
 800e0ce:	e7e9      	b.n	800e0a4 <_vfiprintf_r+0x4c>
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d4:	2320      	movs	r3, #32
 800e0d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0da:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0de:	2330      	movs	r3, #48	; 0x30
 800e0e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e2a4 <_vfiprintf_r+0x24c>
 800e0e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0e8:	f04f 0901 	mov.w	r9, #1
 800e0ec:	4623      	mov	r3, r4
 800e0ee:	469a      	mov	sl, r3
 800e0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f4:	b10a      	cbz	r2, 800e0fa <_vfiprintf_r+0xa2>
 800e0f6:	2a25      	cmp	r2, #37	; 0x25
 800e0f8:	d1f9      	bne.n	800e0ee <_vfiprintf_r+0x96>
 800e0fa:	ebba 0b04 	subs.w	fp, sl, r4
 800e0fe:	d00b      	beq.n	800e118 <_vfiprintf_r+0xc0>
 800e100:	465b      	mov	r3, fp
 800e102:	4622      	mov	r2, r4
 800e104:	4629      	mov	r1, r5
 800e106:	4630      	mov	r0, r6
 800e108:	f7ff ff93 	bl	800e032 <__sfputs_r>
 800e10c:	3001      	adds	r0, #1
 800e10e:	f000 80aa 	beq.w	800e266 <_vfiprintf_r+0x20e>
 800e112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e114:	445a      	add	r2, fp
 800e116:	9209      	str	r2, [sp, #36]	; 0x24
 800e118:	f89a 3000 	ldrb.w	r3, [sl]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 80a2 	beq.w	800e266 <_vfiprintf_r+0x20e>
 800e122:	2300      	movs	r3, #0
 800e124:	f04f 32ff 	mov.w	r2, #4294967295
 800e128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e12c:	f10a 0a01 	add.w	sl, sl, #1
 800e130:	9304      	str	r3, [sp, #16]
 800e132:	9307      	str	r3, [sp, #28]
 800e134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e138:	931a      	str	r3, [sp, #104]	; 0x68
 800e13a:	4654      	mov	r4, sl
 800e13c:	2205      	movs	r2, #5
 800e13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e142:	4858      	ldr	r0, [pc, #352]	; (800e2a4 <_vfiprintf_r+0x24c>)
 800e144:	f7f2 f854 	bl	80001f0 <memchr>
 800e148:	9a04      	ldr	r2, [sp, #16]
 800e14a:	b9d8      	cbnz	r0, 800e184 <_vfiprintf_r+0x12c>
 800e14c:	06d1      	lsls	r1, r2, #27
 800e14e:	bf44      	itt	mi
 800e150:	2320      	movmi	r3, #32
 800e152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e156:	0713      	lsls	r3, r2, #28
 800e158:	bf44      	itt	mi
 800e15a:	232b      	movmi	r3, #43	; 0x2b
 800e15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e160:	f89a 3000 	ldrb.w	r3, [sl]
 800e164:	2b2a      	cmp	r3, #42	; 0x2a
 800e166:	d015      	beq.n	800e194 <_vfiprintf_r+0x13c>
 800e168:	9a07      	ldr	r2, [sp, #28]
 800e16a:	4654      	mov	r4, sl
 800e16c:	2000      	movs	r0, #0
 800e16e:	f04f 0c0a 	mov.w	ip, #10
 800e172:	4621      	mov	r1, r4
 800e174:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e178:	3b30      	subs	r3, #48	; 0x30
 800e17a:	2b09      	cmp	r3, #9
 800e17c:	d94e      	bls.n	800e21c <_vfiprintf_r+0x1c4>
 800e17e:	b1b0      	cbz	r0, 800e1ae <_vfiprintf_r+0x156>
 800e180:	9207      	str	r2, [sp, #28]
 800e182:	e014      	b.n	800e1ae <_vfiprintf_r+0x156>
 800e184:	eba0 0308 	sub.w	r3, r0, r8
 800e188:	fa09 f303 	lsl.w	r3, r9, r3
 800e18c:	4313      	orrs	r3, r2
 800e18e:	9304      	str	r3, [sp, #16]
 800e190:	46a2      	mov	sl, r4
 800e192:	e7d2      	b.n	800e13a <_vfiprintf_r+0xe2>
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	1d19      	adds	r1, r3, #4
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	9103      	str	r1, [sp, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	bfbb      	ittet	lt
 800e1a0:	425b      	neglt	r3, r3
 800e1a2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1a6:	9307      	strge	r3, [sp, #28]
 800e1a8:	9307      	strlt	r3, [sp, #28]
 800e1aa:	bfb8      	it	lt
 800e1ac:	9204      	strlt	r2, [sp, #16]
 800e1ae:	7823      	ldrb	r3, [r4, #0]
 800e1b0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1b2:	d10c      	bne.n	800e1ce <_vfiprintf_r+0x176>
 800e1b4:	7863      	ldrb	r3, [r4, #1]
 800e1b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1b8:	d135      	bne.n	800e226 <_vfiprintf_r+0x1ce>
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	1d1a      	adds	r2, r3, #4
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	9203      	str	r2, [sp, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bfb8      	it	lt
 800e1c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1ca:	3402      	adds	r4, #2
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2b4 <_vfiprintf_r+0x25c>
 800e1d2:	7821      	ldrb	r1, [r4, #0]
 800e1d4:	2203      	movs	r2, #3
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	f7f2 f80a 	bl	80001f0 <memchr>
 800e1dc:	b140      	cbz	r0, 800e1f0 <_vfiprintf_r+0x198>
 800e1de:	2340      	movs	r3, #64	; 0x40
 800e1e0:	eba0 000a 	sub.w	r0, r0, sl
 800e1e4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1e8:	9b04      	ldr	r3, [sp, #16]
 800e1ea:	4303      	orrs	r3, r0
 800e1ec:	3401      	adds	r4, #1
 800e1ee:	9304      	str	r3, [sp, #16]
 800e1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f4:	482c      	ldr	r0, [pc, #176]	; (800e2a8 <_vfiprintf_r+0x250>)
 800e1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1fa:	2206      	movs	r2, #6
 800e1fc:	f7f1 fff8 	bl	80001f0 <memchr>
 800e200:	2800      	cmp	r0, #0
 800e202:	d03f      	beq.n	800e284 <_vfiprintf_r+0x22c>
 800e204:	4b29      	ldr	r3, [pc, #164]	; (800e2ac <_vfiprintf_r+0x254>)
 800e206:	bb1b      	cbnz	r3, 800e250 <_vfiprintf_r+0x1f8>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	3307      	adds	r3, #7
 800e20c:	f023 0307 	bic.w	r3, r3, #7
 800e210:	3308      	adds	r3, #8
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e216:	443b      	add	r3, r7
 800e218:	9309      	str	r3, [sp, #36]	; 0x24
 800e21a:	e767      	b.n	800e0ec <_vfiprintf_r+0x94>
 800e21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e220:	460c      	mov	r4, r1
 800e222:	2001      	movs	r0, #1
 800e224:	e7a5      	b.n	800e172 <_vfiprintf_r+0x11a>
 800e226:	2300      	movs	r3, #0
 800e228:	3401      	adds	r4, #1
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	4619      	mov	r1, r3
 800e22e:	f04f 0c0a 	mov.w	ip, #10
 800e232:	4620      	mov	r0, r4
 800e234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e238:	3a30      	subs	r2, #48	; 0x30
 800e23a:	2a09      	cmp	r2, #9
 800e23c:	d903      	bls.n	800e246 <_vfiprintf_r+0x1ee>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0c5      	beq.n	800e1ce <_vfiprintf_r+0x176>
 800e242:	9105      	str	r1, [sp, #20]
 800e244:	e7c3      	b.n	800e1ce <_vfiprintf_r+0x176>
 800e246:	fb0c 2101 	mla	r1, ip, r1, r2
 800e24a:	4604      	mov	r4, r0
 800e24c:	2301      	movs	r3, #1
 800e24e:	e7f0      	b.n	800e232 <_vfiprintf_r+0x1da>
 800e250:	ab03      	add	r3, sp, #12
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	462a      	mov	r2, r5
 800e256:	4b16      	ldr	r3, [pc, #88]	; (800e2b0 <_vfiprintf_r+0x258>)
 800e258:	a904      	add	r1, sp, #16
 800e25a:	4630      	mov	r0, r6
 800e25c:	f3af 8000 	nop.w
 800e260:	4607      	mov	r7, r0
 800e262:	1c78      	adds	r0, r7, #1
 800e264:	d1d6      	bne.n	800e214 <_vfiprintf_r+0x1bc>
 800e266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e268:	07d9      	lsls	r1, r3, #31
 800e26a:	d405      	bmi.n	800e278 <_vfiprintf_r+0x220>
 800e26c:	89ab      	ldrh	r3, [r5, #12]
 800e26e:	059a      	lsls	r2, r3, #22
 800e270:	d402      	bmi.n	800e278 <_vfiprintf_r+0x220>
 800e272:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e274:	f000 fc35 	bl	800eae2 <__retarget_lock_release_recursive>
 800e278:	89ab      	ldrh	r3, [r5, #12]
 800e27a:	065b      	lsls	r3, r3, #25
 800e27c:	f53f af12 	bmi.w	800e0a4 <_vfiprintf_r+0x4c>
 800e280:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e282:	e711      	b.n	800e0a8 <_vfiprintf_r+0x50>
 800e284:	ab03      	add	r3, sp, #12
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	462a      	mov	r2, r5
 800e28a:	4b09      	ldr	r3, [pc, #36]	; (800e2b0 <_vfiprintf_r+0x258>)
 800e28c:	a904      	add	r1, sp, #16
 800e28e:	4630      	mov	r0, r6
 800e290:	f000 f880 	bl	800e394 <_printf_i>
 800e294:	e7e4      	b.n	800e260 <_vfiprintf_r+0x208>
 800e296:	bf00      	nop
 800e298:	0801051c 	.word	0x0801051c
 800e29c:	0801053c 	.word	0x0801053c
 800e2a0:	080104fc 	.word	0x080104fc
 800e2a4:	080104c9 	.word	0x080104c9
 800e2a8:	080104d3 	.word	0x080104d3
 800e2ac:	00000000 	.word	0x00000000
 800e2b0:	0800e033 	.word	0x0800e033
 800e2b4:	080104cf 	.word	0x080104cf

0800e2b8 <_printf_common>:
 800e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2bc:	4616      	mov	r6, r2
 800e2be:	4699      	mov	r9, r3
 800e2c0:	688a      	ldr	r2, [r1, #8]
 800e2c2:	690b      	ldr	r3, [r1, #16]
 800e2c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	bfb8      	it	lt
 800e2cc:	4613      	movlt	r3, r2
 800e2ce:	6033      	str	r3, [r6, #0]
 800e2d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2d4:	4607      	mov	r7, r0
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	b10a      	cbz	r2, 800e2de <_printf_common+0x26>
 800e2da:	3301      	adds	r3, #1
 800e2dc:	6033      	str	r3, [r6, #0]
 800e2de:	6823      	ldr	r3, [r4, #0]
 800e2e0:	0699      	lsls	r1, r3, #26
 800e2e2:	bf42      	ittt	mi
 800e2e4:	6833      	ldrmi	r3, [r6, #0]
 800e2e6:	3302      	addmi	r3, #2
 800e2e8:	6033      	strmi	r3, [r6, #0]
 800e2ea:	6825      	ldr	r5, [r4, #0]
 800e2ec:	f015 0506 	ands.w	r5, r5, #6
 800e2f0:	d106      	bne.n	800e300 <_printf_common+0x48>
 800e2f2:	f104 0a19 	add.w	sl, r4, #25
 800e2f6:	68e3      	ldr	r3, [r4, #12]
 800e2f8:	6832      	ldr	r2, [r6, #0]
 800e2fa:	1a9b      	subs	r3, r3, r2
 800e2fc:	42ab      	cmp	r3, r5
 800e2fe:	dc26      	bgt.n	800e34e <_printf_common+0x96>
 800e300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e304:	1e13      	subs	r3, r2, #0
 800e306:	6822      	ldr	r2, [r4, #0]
 800e308:	bf18      	it	ne
 800e30a:	2301      	movne	r3, #1
 800e30c:	0692      	lsls	r2, r2, #26
 800e30e:	d42b      	bmi.n	800e368 <_printf_common+0xb0>
 800e310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e314:	4649      	mov	r1, r9
 800e316:	4638      	mov	r0, r7
 800e318:	47c0      	blx	r8
 800e31a:	3001      	adds	r0, #1
 800e31c:	d01e      	beq.n	800e35c <_printf_common+0xa4>
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	68e5      	ldr	r5, [r4, #12]
 800e322:	6832      	ldr	r2, [r6, #0]
 800e324:	f003 0306 	and.w	r3, r3, #6
 800e328:	2b04      	cmp	r3, #4
 800e32a:	bf08      	it	eq
 800e32c:	1aad      	subeq	r5, r5, r2
 800e32e:	68a3      	ldr	r3, [r4, #8]
 800e330:	6922      	ldr	r2, [r4, #16]
 800e332:	bf0c      	ite	eq
 800e334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e338:	2500      	movne	r5, #0
 800e33a:	4293      	cmp	r3, r2
 800e33c:	bfc4      	itt	gt
 800e33e:	1a9b      	subgt	r3, r3, r2
 800e340:	18ed      	addgt	r5, r5, r3
 800e342:	2600      	movs	r6, #0
 800e344:	341a      	adds	r4, #26
 800e346:	42b5      	cmp	r5, r6
 800e348:	d11a      	bne.n	800e380 <_printf_common+0xc8>
 800e34a:	2000      	movs	r0, #0
 800e34c:	e008      	b.n	800e360 <_printf_common+0xa8>
 800e34e:	2301      	movs	r3, #1
 800e350:	4652      	mov	r2, sl
 800e352:	4649      	mov	r1, r9
 800e354:	4638      	mov	r0, r7
 800e356:	47c0      	blx	r8
 800e358:	3001      	adds	r0, #1
 800e35a:	d103      	bne.n	800e364 <_printf_common+0xac>
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295
 800e360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e364:	3501      	adds	r5, #1
 800e366:	e7c6      	b.n	800e2f6 <_printf_common+0x3e>
 800e368:	18e1      	adds	r1, r4, r3
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	2030      	movs	r0, #48	; 0x30
 800e36e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e372:	4422      	add	r2, r4
 800e374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e37c:	3302      	adds	r3, #2
 800e37e:	e7c7      	b.n	800e310 <_printf_common+0x58>
 800e380:	2301      	movs	r3, #1
 800e382:	4622      	mov	r2, r4
 800e384:	4649      	mov	r1, r9
 800e386:	4638      	mov	r0, r7
 800e388:	47c0      	blx	r8
 800e38a:	3001      	adds	r0, #1
 800e38c:	d0e6      	beq.n	800e35c <_printf_common+0xa4>
 800e38e:	3601      	adds	r6, #1
 800e390:	e7d9      	b.n	800e346 <_printf_common+0x8e>
	...

0800e394 <_printf_i>:
 800e394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e398:	7e0f      	ldrb	r7, [r1, #24]
 800e39a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e39c:	2f78      	cmp	r7, #120	; 0x78
 800e39e:	4691      	mov	r9, r2
 800e3a0:	4680      	mov	r8, r0
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	469a      	mov	sl, r3
 800e3a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3aa:	d807      	bhi.n	800e3bc <_printf_i+0x28>
 800e3ac:	2f62      	cmp	r7, #98	; 0x62
 800e3ae:	d80a      	bhi.n	800e3c6 <_printf_i+0x32>
 800e3b0:	2f00      	cmp	r7, #0
 800e3b2:	f000 80d8 	beq.w	800e566 <_printf_i+0x1d2>
 800e3b6:	2f58      	cmp	r7, #88	; 0x58
 800e3b8:	f000 80a3 	beq.w	800e502 <_printf_i+0x16e>
 800e3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3c4:	e03a      	b.n	800e43c <_printf_i+0xa8>
 800e3c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3ca:	2b15      	cmp	r3, #21
 800e3cc:	d8f6      	bhi.n	800e3bc <_printf_i+0x28>
 800e3ce:	a101      	add	r1, pc, #4	; (adr r1, 800e3d4 <_printf_i+0x40>)
 800e3d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3d4:	0800e42d 	.word	0x0800e42d
 800e3d8:	0800e441 	.word	0x0800e441
 800e3dc:	0800e3bd 	.word	0x0800e3bd
 800e3e0:	0800e3bd 	.word	0x0800e3bd
 800e3e4:	0800e3bd 	.word	0x0800e3bd
 800e3e8:	0800e3bd 	.word	0x0800e3bd
 800e3ec:	0800e441 	.word	0x0800e441
 800e3f0:	0800e3bd 	.word	0x0800e3bd
 800e3f4:	0800e3bd 	.word	0x0800e3bd
 800e3f8:	0800e3bd 	.word	0x0800e3bd
 800e3fc:	0800e3bd 	.word	0x0800e3bd
 800e400:	0800e54d 	.word	0x0800e54d
 800e404:	0800e471 	.word	0x0800e471
 800e408:	0800e52f 	.word	0x0800e52f
 800e40c:	0800e3bd 	.word	0x0800e3bd
 800e410:	0800e3bd 	.word	0x0800e3bd
 800e414:	0800e56f 	.word	0x0800e56f
 800e418:	0800e3bd 	.word	0x0800e3bd
 800e41c:	0800e471 	.word	0x0800e471
 800e420:	0800e3bd 	.word	0x0800e3bd
 800e424:	0800e3bd 	.word	0x0800e3bd
 800e428:	0800e537 	.word	0x0800e537
 800e42c:	682b      	ldr	r3, [r5, #0]
 800e42e:	1d1a      	adds	r2, r3, #4
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	602a      	str	r2, [r5, #0]
 800e434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e43c:	2301      	movs	r3, #1
 800e43e:	e0a3      	b.n	800e588 <_printf_i+0x1f4>
 800e440:	6820      	ldr	r0, [r4, #0]
 800e442:	6829      	ldr	r1, [r5, #0]
 800e444:	0606      	lsls	r6, r0, #24
 800e446:	f101 0304 	add.w	r3, r1, #4
 800e44a:	d50a      	bpl.n	800e462 <_printf_i+0xce>
 800e44c:	680e      	ldr	r6, [r1, #0]
 800e44e:	602b      	str	r3, [r5, #0]
 800e450:	2e00      	cmp	r6, #0
 800e452:	da03      	bge.n	800e45c <_printf_i+0xc8>
 800e454:	232d      	movs	r3, #45	; 0x2d
 800e456:	4276      	negs	r6, r6
 800e458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e45c:	485e      	ldr	r0, [pc, #376]	; (800e5d8 <_printf_i+0x244>)
 800e45e:	230a      	movs	r3, #10
 800e460:	e019      	b.n	800e496 <_printf_i+0x102>
 800e462:	680e      	ldr	r6, [r1, #0]
 800e464:	602b      	str	r3, [r5, #0]
 800e466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e46a:	bf18      	it	ne
 800e46c:	b236      	sxthne	r6, r6
 800e46e:	e7ef      	b.n	800e450 <_printf_i+0xbc>
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	6820      	ldr	r0, [r4, #0]
 800e474:	1d19      	adds	r1, r3, #4
 800e476:	6029      	str	r1, [r5, #0]
 800e478:	0601      	lsls	r1, r0, #24
 800e47a:	d501      	bpl.n	800e480 <_printf_i+0xec>
 800e47c:	681e      	ldr	r6, [r3, #0]
 800e47e:	e002      	b.n	800e486 <_printf_i+0xf2>
 800e480:	0646      	lsls	r6, r0, #25
 800e482:	d5fb      	bpl.n	800e47c <_printf_i+0xe8>
 800e484:	881e      	ldrh	r6, [r3, #0]
 800e486:	4854      	ldr	r0, [pc, #336]	; (800e5d8 <_printf_i+0x244>)
 800e488:	2f6f      	cmp	r7, #111	; 0x6f
 800e48a:	bf0c      	ite	eq
 800e48c:	2308      	moveq	r3, #8
 800e48e:	230a      	movne	r3, #10
 800e490:	2100      	movs	r1, #0
 800e492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e496:	6865      	ldr	r5, [r4, #4]
 800e498:	60a5      	str	r5, [r4, #8]
 800e49a:	2d00      	cmp	r5, #0
 800e49c:	bfa2      	ittt	ge
 800e49e:	6821      	ldrge	r1, [r4, #0]
 800e4a0:	f021 0104 	bicge.w	r1, r1, #4
 800e4a4:	6021      	strge	r1, [r4, #0]
 800e4a6:	b90e      	cbnz	r6, 800e4ac <_printf_i+0x118>
 800e4a8:	2d00      	cmp	r5, #0
 800e4aa:	d04d      	beq.n	800e548 <_printf_i+0x1b4>
 800e4ac:	4615      	mov	r5, r2
 800e4ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4b2:	fb03 6711 	mls	r7, r3, r1, r6
 800e4b6:	5dc7      	ldrb	r7, [r0, r7]
 800e4b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4bc:	4637      	mov	r7, r6
 800e4be:	42bb      	cmp	r3, r7
 800e4c0:	460e      	mov	r6, r1
 800e4c2:	d9f4      	bls.n	800e4ae <_printf_i+0x11a>
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d10b      	bne.n	800e4e0 <_printf_i+0x14c>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	07de      	lsls	r6, r3, #31
 800e4cc:	d508      	bpl.n	800e4e0 <_printf_i+0x14c>
 800e4ce:	6923      	ldr	r3, [r4, #16]
 800e4d0:	6861      	ldr	r1, [r4, #4]
 800e4d2:	4299      	cmp	r1, r3
 800e4d4:	bfde      	ittt	le
 800e4d6:	2330      	movle	r3, #48	; 0x30
 800e4d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4e0:	1b52      	subs	r2, r2, r5
 800e4e2:	6122      	str	r2, [r4, #16]
 800e4e4:	f8cd a000 	str.w	sl, [sp]
 800e4e8:	464b      	mov	r3, r9
 800e4ea:	aa03      	add	r2, sp, #12
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	f7ff fee2 	bl	800e2b8 <_printf_common>
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d14c      	bne.n	800e592 <_printf_i+0x1fe>
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	b004      	add	sp, #16
 800e4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e502:	4835      	ldr	r0, [pc, #212]	; (800e5d8 <_printf_i+0x244>)
 800e504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e508:	6829      	ldr	r1, [r5, #0]
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e510:	6029      	str	r1, [r5, #0]
 800e512:	061d      	lsls	r5, r3, #24
 800e514:	d514      	bpl.n	800e540 <_printf_i+0x1ac>
 800e516:	07df      	lsls	r7, r3, #31
 800e518:	bf44      	itt	mi
 800e51a:	f043 0320 	orrmi.w	r3, r3, #32
 800e51e:	6023      	strmi	r3, [r4, #0]
 800e520:	b91e      	cbnz	r6, 800e52a <_printf_i+0x196>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	f023 0320 	bic.w	r3, r3, #32
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	2310      	movs	r3, #16
 800e52c:	e7b0      	b.n	800e490 <_printf_i+0xfc>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	f043 0320 	orr.w	r3, r3, #32
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	2378      	movs	r3, #120	; 0x78
 800e538:	4828      	ldr	r0, [pc, #160]	; (800e5dc <_printf_i+0x248>)
 800e53a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e53e:	e7e3      	b.n	800e508 <_printf_i+0x174>
 800e540:	0659      	lsls	r1, r3, #25
 800e542:	bf48      	it	mi
 800e544:	b2b6      	uxthmi	r6, r6
 800e546:	e7e6      	b.n	800e516 <_printf_i+0x182>
 800e548:	4615      	mov	r5, r2
 800e54a:	e7bb      	b.n	800e4c4 <_printf_i+0x130>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	6826      	ldr	r6, [r4, #0]
 800e550:	6961      	ldr	r1, [r4, #20]
 800e552:	1d18      	adds	r0, r3, #4
 800e554:	6028      	str	r0, [r5, #0]
 800e556:	0635      	lsls	r5, r6, #24
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	d501      	bpl.n	800e560 <_printf_i+0x1cc>
 800e55c:	6019      	str	r1, [r3, #0]
 800e55e:	e002      	b.n	800e566 <_printf_i+0x1d2>
 800e560:	0670      	lsls	r0, r6, #25
 800e562:	d5fb      	bpl.n	800e55c <_printf_i+0x1c8>
 800e564:	8019      	strh	r1, [r3, #0]
 800e566:	2300      	movs	r3, #0
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	4615      	mov	r5, r2
 800e56c:	e7ba      	b.n	800e4e4 <_printf_i+0x150>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	1d1a      	adds	r2, r3, #4
 800e572:	602a      	str	r2, [r5, #0]
 800e574:	681d      	ldr	r5, [r3, #0]
 800e576:	6862      	ldr	r2, [r4, #4]
 800e578:	2100      	movs	r1, #0
 800e57a:	4628      	mov	r0, r5
 800e57c:	f7f1 fe38 	bl	80001f0 <memchr>
 800e580:	b108      	cbz	r0, 800e586 <_printf_i+0x1f2>
 800e582:	1b40      	subs	r0, r0, r5
 800e584:	6060      	str	r0, [r4, #4]
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	2300      	movs	r3, #0
 800e58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e590:	e7a8      	b.n	800e4e4 <_printf_i+0x150>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	462a      	mov	r2, r5
 800e596:	4649      	mov	r1, r9
 800e598:	4640      	mov	r0, r8
 800e59a:	47d0      	blx	sl
 800e59c:	3001      	adds	r0, #1
 800e59e:	d0ab      	beq.n	800e4f8 <_printf_i+0x164>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	079b      	lsls	r3, r3, #30
 800e5a4:	d413      	bmi.n	800e5ce <_printf_i+0x23a>
 800e5a6:	68e0      	ldr	r0, [r4, #12]
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	4298      	cmp	r0, r3
 800e5ac:	bfb8      	it	lt
 800e5ae:	4618      	movlt	r0, r3
 800e5b0:	e7a4      	b.n	800e4fc <_printf_i+0x168>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	47d0      	blx	sl
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d09b      	beq.n	800e4f8 <_printf_i+0x164>
 800e5c0:	3501      	adds	r5, #1
 800e5c2:	68e3      	ldr	r3, [r4, #12]
 800e5c4:	9903      	ldr	r1, [sp, #12]
 800e5c6:	1a5b      	subs	r3, r3, r1
 800e5c8:	42ab      	cmp	r3, r5
 800e5ca:	dcf2      	bgt.n	800e5b2 <_printf_i+0x21e>
 800e5cc:	e7eb      	b.n	800e5a6 <_printf_i+0x212>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	f104 0619 	add.w	r6, r4, #25
 800e5d4:	e7f5      	b.n	800e5c2 <_printf_i+0x22e>
 800e5d6:	bf00      	nop
 800e5d8:	080104da 	.word	0x080104da
 800e5dc:	080104eb 	.word	0x080104eb

0800e5e0 <__swbuf_r>:
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	460e      	mov	r6, r1
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	4605      	mov	r5, r0
 800e5e8:	b118      	cbz	r0, 800e5f2 <__swbuf_r+0x12>
 800e5ea:	6983      	ldr	r3, [r0, #24]
 800e5ec:	b90b      	cbnz	r3, 800e5f2 <__swbuf_r+0x12>
 800e5ee:	f000 f9d9 	bl	800e9a4 <__sinit>
 800e5f2:	4b21      	ldr	r3, [pc, #132]	; (800e678 <__swbuf_r+0x98>)
 800e5f4:	429c      	cmp	r4, r3
 800e5f6:	d12b      	bne.n	800e650 <__swbuf_r+0x70>
 800e5f8:	686c      	ldr	r4, [r5, #4]
 800e5fa:	69a3      	ldr	r3, [r4, #24]
 800e5fc:	60a3      	str	r3, [r4, #8]
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	071a      	lsls	r2, r3, #28
 800e602:	d52f      	bpl.n	800e664 <__swbuf_r+0x84>
 800e604:	6923      	ldr	r3, [r4, #16]
 800e606:	b36b      	cbz	r3, 800e664 <__swbuf_r+0x84>
 800e608:	6923      	ldr	r3, [r4, #16]
 800e60a:	6820      	ldr	r0, [r4, #0]
 800e60c:	1ac0      	subs	r0, r0, r3
 800e60e:	6963      	ldr	r3, [r4, #20]
 800e610:	b2f6      	uxtb	r6, r6
 800e612:	4283      	cmp	r3, r0
 800e614:	4637      	mov	r7, r6
 800e616:	dc04      	bgt.n	800e622 <__swbuf_r+0x42>
 800e618:	4621      	mov	r1, r4
 800e61a:	4628      	mov	r0, r5
 800e61c:	f000 f92e 	bl	800e87c <_fflush_r>
 800e620:	bb30      	cbnz	r0, 800e670 <__swbuf_r+0x90>
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	3b01      	subs	r3, #1
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	6022      	str	r2, [r4, #0]
 800e62e:	701e      	strb	r6, [r3, #0]
 800e630:	6963      	ldr	r3, [r4, #20]
 800e632:	3001      	adds	r0, #1
 800e634:	4283      	cmp	r3, r0
 800e636:	d004      	beq.n	800e642 <__swbuf_r+0x62>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	07db      	lsls	r3, r3, #31
 800e63c:	d506      	bpl.n	800e64c <__swbuf_r+0x6c>
 800e63e:	2e0a      	cmp	r6, #10
 800e640:	d104      	bne.n	800e64c <__swbuf_r+0x6c>
 800e642:	4621      	mov	r1, r4
 800e644:	4628      	mov	r0, r5
 800e646:	f000 f919 	bl	800e87c <_fflush_r>
 800e64a:	b988      	cbnz	r0, 800e670 <__swbuf_r+0x90>
 800e64c:	4638      	mov	r0, r7
 800e64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e650:	4b0a      	ldr	r3, [pc, #40]	; (800e67c <__swbuf_r+0x9c>)
 800e652:	429c      	cmp	r4, r3
 800e654:	d101      	bne.n	800e65a <__swbuf_r+0x7a>
 800e656:	68ac      	ldr	r4, [r5, #8]
 800e658:	e7cf      	b.n	800e5fa <__swbuf_r+0x1a>
 800e65a:	4b09      	ldr	r3, [pc, #36]	; (800e680 <__swbuf_r+0xa0>)
 800e65c:	429c      	cmp	r4, r3
 800e65e:	bf08      	it	eq
 800e660:	68ec      	ldreq	r4, [r5, #12]
 800e662:	e7ca      	b.n	800e5fa <__swbuf_r+0x1a>
 800e664:	4621      	mov	r1, r4
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f80c 	bl	800e684 <__swsetup_r>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d0cb      	beq.n	800e608 <__swbuf_r+0x28>
 800e670:	f04f 37ff 	mov.w	r7, #4294967295
 800e674:	e7ea      	b.n	800e64c <__swbuf_r+0x6c>
 800e676:	bf00      	nop
 800e678:	0801051c 	.word	0x0801051c
 800e67c:	0801053c 	.word	0x0801053c
 800e680:	080104fc 	.word	0x080104fc

0800e684 <__swsetup_r>:
 800e684:	4b32      	ldr	r3, [pc, #200]	; (800e750 <__swsetup_r+0xcc>)
 800e686:	b570      	push	{r4, r5, r6, lr}
 800e688:	681d      	ldr	r5, [r3, #0]
 800e68a:	4606      	mov	r6, r0
 800e68c:	460c      	mov	r4, r1
 800e68e:	b125      	cbz	r5, 800e69a <__swsetup_r+0x16>
 800e690:	69ab      	ldr	r3, [r5, #24]
 800e692:	b913      	cbnz	r3, 800e69a <__swsetup_r+0x16>
 800e694:	4628      	mov	r0, r5
 800e696:	f000 f985 	bl	800e9a4 <__sinit>
 800e69a:	4b2e      	ldr	r3, [pc, #184]	; (800e754 <__swsetup_r+0xd0>)
 800e69c:	429c      	cmp	r4, r3
 800e69e:	d10f      	bne.n	800e6c0 <__swsetup_r+0x3c>
 800e6a0:	686c      	ldr	r4, [r5, #4]
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a8:	0719      	lsls	r1, r3, #28
 800e6aa:	d42c      	bmi.n	800e706 <__swsetup_r+0x82>
 800e6ac:	06dd      	lsls	r5, r3, #27
 800e6ae:	d411      	bmi.n	800e6d4 <__swsetup_r+0x50>
 800e6b0:	2309      	movs	r3, #9
 800e6b2:	6033      	str	r3, [r6, #0]
 800e6b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6b8:	81a3      	strh	r3, [r4, #12]
 800e6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e6be:	e03e      	b.n	800e73e <__swsetup_r+0xba>
 800e6c0:	4b25      	ldr	r3, [pc, #148]	; (800e758 <__swsetup_r+0xd4>)
 800e6c2:	429c      	cmp	r4, r3
 800e6c4:	d101      	bne.n	800e6ca <__swsetup_r+0x46>
 800e6c6:	68ac      	ldr	r4, [r5, #8]
 800e6c8:	e7eb      	b.n	800e6a2 <__swsetup_r+0x1e>
 800e6ca:	4b24      	ldr	r3, [pc, #144]	; (800e75c <__swsetup_r+0xd8>)
 800e6cc:	429c      	cmp	r4, r3
 800e6ce:	bf08      	it	eq
 800e6d0:	68ec      	ldreq	r4, [r5, #12]
 800e6d2:	e7e6      	b.n	800e6a2 <__swsetup_r+0x1e>
 800e6d4:	0758      	lsls	r0, r3, #29
 800e6d6:	d512      	bpl.n	800e6fe <__swsetup_r+0x7a>
 800e6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6da:	b141      	cbz	r1, 800e6ee <__swsetup_r+0x6a>
 800e6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6e0:	4299      	cmp	r1, r3
 800e6e2:	d002      	beq.n	800e6ea <__swsetup_r+0x66>
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	f7ff fc41 	bl	800df6c <_free_r>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	6363      	str	r3, [r4, #52]	; 0x34
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6f4:	81a3      	strh	r3, [r4, #12]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	6063      	str	r3, [r4, #4]
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	f043 0308 	orr.w	r3, r3, #8
 800e704:	81a3      	strh	r3, [r4, #12]
 800e706:	6923      	ldr	r3, [r4, #16]
 800e708:	b94b      	cbnz	r3, 800e71e <__swsetup_r+0x9a>
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e714:	d003      	beq.n	800e71e <__swsetup_r+0x9a>
 800e716:	4621      	mov	r1, r4
 800e718:	4630      	mov	r0, r6
 800e71a:	f000 fa09 	bl	800eb30 <__smakebuf_r>
 800e71e:	89a0      	ldrh	r0, [r4, #12]
 800e720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e724:	f010 0301 	ands.w	r3, r0, #1
 800e728:	d00a      	beq.n	800e740 <__swsetup_r+0xbc>
 800e72a:	2300      	movs	r3, #0
 800e72c:	60a3      	str	r3, [r4, #8]
 800e72e:	6963      	ldr	r3, [r4, #20]
 800e730:	425b      	negs	r3, r3
 800e732:	61a3      	str	r3, [r4, #24]
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	b943      	cbnz	r3, 800e74a <__swsetup_r+0xc6>
 800e738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e73c:	d1ba      	bne.n	800e6b4 <__swsetup_r+0x30>
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	0781      	lsls	r1, r0, #30
 800e742:	bf58      	it	pl
 800e744:	6963      	ldrpl	r3, [r4, #20]
 800e746:	60a3      	str	r3, [r4, #8]
 800e748:	e7f4      	b.n	800e734 <__swsetup_r+0xb0>
 800e74a:	2000      	movs	r0, #0
 800e74c:	e7f7      	b.n	800e73e <__swsetup_r+0xba>
 800e74e:	bf00      	nop
 800e750:	20000064 	.word	0x20000064
 800e754:	0801051c 	.word	0x0801051c
 800e758:	0801053c 	.word	0x0801053c
 800e75c:	080104fc 	.word	0x080104fc

0800e760 <abort>:
 800e760:	b508      	push	{r3, lr}
 800e762:	2006      	movs	r0, #6
 800e764:	f000 fa4c 	bl	800ec00 <raise>
 800e768:	2001      	movs	r0, #1
 800e76a:	f7f7 f8fb 	bl	8005964 <_exit>
	...

0800e770 <__sflush_r>:
 800e770:	898a      	ldrh	r2, [r1, #12]
 800e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e776:	4605      	mov	r5, r0
 800e778:	0710      	lsls	r0, r2, #28
 800e77a:	460c      	mov	r4, r1
 800e77c:	d458      	bmi.n	800e830 <__sflush_r+0xc0>
 800e77e:	684b      	ldr	r3, [r1, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	dc05      	bgt.n	800e790 <__sflush_r+0x20>
 800e784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e786:	2b00      	cmp	r3, #0
 800e788:	dc02      	bgt.n	800e790 <__sflush_r+0x20>
 800e78a:	2000      	movs	r0, #0
 800e78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e792:	2e00      	cmp	r6, #0
 800e794:	d0f9      	beq.n	800e78a <__sflush_r+0x1a>
 800e796:	2300      	movs	r3, #0
 800e798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e79c:	682f      	ldr	r7, [r5, #0]
 800e79e:	602b      	str	r3, [r5, #0]
 800e7a0:	d032      	beq.n	800e808 <__sflush_r+0x98>
 800e7a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	075a      	lsls	r2, r3, #29
 800e7a8:	d505      	bpl.n	800e7b6 <__sflush_r+0x46>
 800e7aa:	6863      	ldr	r3, [r4, #4]
 800e7ac:	1ac0      	subs	r0, r0, r3
 800e7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7b0:	b10b      	cbz	r3, 800e7b6 <__sflush_r+0x46>
 800e7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7b4:	1ac0      	subs	r0, r0, r3
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7bc:	6a21      	ldr	r1, [r4, #32]
 800e7be:	4628      	mov	r0, r5
 800e7c0:	47b0      	blx	r6
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	d106      	bne.n	800e7d6 <__sflush_r+0x66>
 800e7c8:	6829      	ldr	r1, [r5, #0]
 800e7ca:	291d      	cmp	r1, #29
 800e7cc:	d82c      	bhi.n	800e828 <__sflush_r+0xb8>
 800e7ce:	4a2a      	ldr	r2, [pc, #168]	; (800e878 <__sflush_r+0x108>)
 800e7d0:	40ca      	lsrs	r2, r1
 800e7d2:	07d6      	lsls	r6, r2, #31
 800e7d4:	d528      	bpl.n	800e828 <__sflush_r+0xb8>
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	6062      	str	r2, [r4, #4]
 800e7da:	04d9      	lsls	r1, r3, #19
 800e7dc:	6922      	ldr	r2, [r4, #16]
 800e7de:	6022      	str	r2, [r4, #0]
 800e7e0:	d504      	bpl.n	800e7ec <__sflush_r+0x7c>
 800e7e2:	1c42      	adds	r2, r0, #1
 800e7e4:	d101      	bne.n	800e7ea <__sflush_r+0x7a>
 800e7e6:	682b      	ldr	r3, [r5, #0]
 800e7e8:	b903      	cbnz	r3, 800e7ec <__sflush_r+0x7c>
 800e7ea:	6560      	str	r0, [r4, #84]	; 0x54
 800e7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7ee:	602f      	str	r7, [r5, #0]
 800e7f0:	2900      	cmp	r1, #0
 800e7f2:	d0ca      	beq.n	800e78a <__sflush_r+0x1a>
 800e7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7f8:	4299      	cmp	r1, r3
 800e7fa:	d002      	beq.n	800e802 <__sflush_r+0x92>
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f7ff fbb5 	bl	800df6c <_free_r>
 800e802:	2000      	movs	r0, #0
 800e804:	6360      	str	r0, [r4, #52]	; 0x34
 800e806:	e7c1      	b.n	800e78c <__sflush_r+0x1c>
 800e808:	6a21      	ldr	r1, [r4, #32]
 800e80a:	2301      	movs	r3, #1
 800e80c:	4628      	mov	r0, r5
 800e80e:	47b0      	blx	r6
 800e810:	1c41      	adds	r1, r0, #1
 800e812:	d1c7      	bne.n	800e7a4 <__sflush_r+0x34>
 800e814:	682b      	ldr	r3, [r5, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d0c4      	beq.n	800e7a4 <__sflush_r+0x34>
 800e81a:	2b1d      	cmp	r3, #29
 800e81c:	d001      	beq.n	800e822 <__sflush_r+0xb2>
 800e81e:	2b16      	cmp	r3, #22
 800e820:	d101      	bne.n	800e826 <__sflush_r+0xb6>
 800e822:	602f      	str	r7, [r5, #0]
 800e824:	e7b1      	b.n	800e78a <__sflush_r+0x1a>
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e82c:	81a3      	strh	r3, [r4, #12]
 800e82e:	e7ad      	b.n	800e78c <__sflush_r+0x1c>
 800e830:	690f      	ldr	r7, [r1, #16]
 800e832:	2f00      	cmp	r7, #0
 800e834:	d0a9      	beq.n	800e78a <__sflush_r+0x1a>
 800e836:	0793      	lsls	r3, r2, #30
 800e838:	680e      	ldr	r6, [r1, #0]
 800e83a:	bf08      	it	eq
 800e83c:	694b      	ldreq	r3, [r1, #20]
 800e83e:	600f      	str	r7, [r1, #0]
 800e840:	bf18      	it	ne
 800e842:	2300      	movne	r3, #0
 800e844:	eba6 0807 	sub.w	r8, r6, r7
 800e848:	608b      	str	r3, [r1, #8]
 800e84a:	f1b8 0f00 	cmp.w	r8, #0
 800e84e:	dd9c      	ble.n	800e78a <__sflush_r+0x1a>
 800e850:	6a21      	ldr	r1, [r4, #32]
 800e852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e854:	4643      	mov	r3, r8
 800e856:	463a      	mov	r2, r7
 800e858:	4628      	mov	r0, r5
 800e85a:	47b0      	blx	r6
 800e85c:	2800      	cmp	r0, #0
 800e85e:	dc06      	bgt.n	800e86e <__sflush_r+0xfe>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	f04f 30ff 	mov.w	r0, #4294967295
 800e86c:	e78e      	b.n	800e78c <__sflush_r+0x1c>
 800e86e:	4407      	add	r7, r0
 800e870:	eba8 0800 	sub.w	r8, r8, r0
 800e874:	e7e9      	b.n	800e84a <__sflush_r+0xda>
 800e876:	bf00      	nop
 800e878:	20400001 	.word	0x20400001

0800e87c <_fflush_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	690b      	ldr	r3, [r1, #16]
 800e880:	4605      	mov	r5, r0
 800e882:	460c      	mov	r4, r1
 800e884:	b913      	cbnz	r3, 800e88c <_fflush_r+0x10>
 800e886:	2500      	movs	r5, #0
 800e888:	4628      	mov	r0, r5
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	b118      	cbz	r0, 800e896 <_fflush_r+0x1a>
 800e88e:	6983      	ldr	r3, [r0, #24]
 800e890:	b90b      	cbnz	r3, 800e896 <_fflush_r+0x1a>
 800e892:	f000 f887 	bl	800e9a4 <__sinit>
 800e896:	4b14      	ldr	r3, [pc, #80]	; (800e8e8 <_fflush_r+0x6c>)
 800e898:	429c      	cmp	r4, r3
 800e89a:	d11b      	bne.n	800e8d4 <_fflush_r+0x58>
 800e89c:	686c      	ldr	r4, [r5, #4]
 800e89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d0ef      	beq.n	800e886 <_fflush_r+0xa>
 800e8a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8a8:	07d0      	lsls	r0, r2, #31
 800e8aa:	d404      	bmi.n	800e8b6 <_fflush_r+0x3a>
 800e8ac:	0599      	lsls	r1, r3, #22
 800e8ae:	d402      	bmi.n	800e8b6 <_fflush_r+0x3a>
 800e8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8b2:	f000 f915 	bl	800eae0 <__retarget_lock_acquire_recursive>
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	f7ff ff59 	bl	800e770 <__sflush_r>
 800e8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8c0:	07da      	lsls	r2, r3, #31
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	d4e0      	bmi.n	800e888 <_fflush_r+0xc>
 800e8c6:	89a3      	ldrh	r3, [r4, #12]
 800e8c8:	059b      	lsls	r3, r3, #22
 800e8ca:	d4dd      	bmi.n	800e888 <_fflush_r+0xc>
 800e8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8ce:	f000 f908 	bl	800eae2 <__retarget_lock_release_recursive>
 800e8d2:	e7d9      	b.n	800e888 <_fflush_r+0xc>
 800e8d4:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <_fflush_r+0x70>)
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	d101      	bne.n	800e8de <_fflush_r+0x62>
 800e8da:	68ac      	ldr	r4, [r5, #8]
 800e8dc:	e7df      	b.n	800e89e <_fflush_r+0x22>
 800e8de:	4b04      	ldr	r3, [pc, #16]	; (800e8f0 <_fflush_r+0x74>)
 800e8e0:	429c      	cmp	r4, r3
 800e8e2:	bf08      	it	eq
 800e8e4:	68ec      	ldreq	r4, [r5, #12]
 800e8e6:	e7da      	b.n	800e89e <_fflush_r+0x22>
 800e8e8:	0801051c 	.word	0x0801051c
 800e8ec:	0801053c 	.word	0x0801053c
 800e8f0:	080104fc 	.word	0x080104fc

0800e8f4 <std>:
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	e9c0 3300 	strd	r3, r3, [r0]
 800e8fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e902:	6083      	str	r3, [r0, #8]
 800e904:	8181      	strh	r1, [r0, #12]
 800e906:	6643      	str	r3, [r0, #100]	; 0x64
 800e908:	81c2      	strh	r2, [r0, #14]
 800e90a:	6183      	str	r3, [r0, #24]
 800e90c:	4619      	mov	r1, r3
 800e90e:	2208      	movs	r2, #8
 800e910:	305c      	adds	r0, #92	; 0x5c
 800e912:	f7fd fb77 	bl	800c004 <memset>
 800e916:	4b05      	ldr	r3, [pc, #20]	; (800e92c <std+0x38>)
 800e918:	6263      	str	r3, [r4, #36]	; 0x24
 800e91a:	4b05      	ldr	r3, [pc, #20]	; (800e930 <std+0x3c>)
 800e91c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e91e:	4b05      	ldr	r3, [pc, #20]	; (800e934 <std+0x40>)
 800e920:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e922:	4b05      	ldr	r3, [pc, #20]	; (800e938 <std+0x44>)
 800e924:	6224      	str	r4, [r4, #32]
 800e926:	6323      	str	r3, [r4, #48]	; 0x30
 800e928:	bd10      	pop	{r4, pc}
 800e92a:	bf00      	nop
 800e92c:	0800ec39 	.word	0x0800ec39
 800e930:	0800ec5b 	.word	0x0800ec5b
 800e934:	0800ec93 	.word	0x0800ec93
 800e938:	0800ecb7 	.word	0x0800ecb7

0800e93c <_cleanup_r>:
 800e93c:	4901      	ldr	r1, [pc, #4]	; (800e944 <_cleanup_r+0x8>)
 800e93e:	f000 b8af 	b.w	800eaa0 <_fwalk_reent>
 800e942:	bf00      	nop
 800e944:	0800e87d 	.word	0x0800e87d

0800e948 <__sfmoreglue>:
 800e948:	b570      	push	{r4, r5, r6, lr}
 800e94a:	2268      	movs	r2, #104	; 0x68
 800e94c:	1e4d      	subs	r5, r1, #1
 800e94e:	4355      	muls	r5, r2
 800e950:	460e      	mov	r6, r1
 800e952:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e956:	f7ff fa15 	bl	800dd84 <_malloc_r>
 800e95a:	4604      	mov	r4, r0
 800e95c:	b140      	cbz	r0, 800e970 <__sfmoreglue+0x28>
 800e95e:	2100      	movs	r1, #0
 800e960:	e9c0 1600 	strd	r1, r6, [r0]
 800e964:	300c      	adds	r0, #12
 800e966:	60a0      	str	r0, [r4, #8]
 800e968:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e96c:	f7fd fb4a 	bl	800c004 <memset>
 800e970:	4620      	mov	r0, r4
 800e972:	bd70      	pop	{r4, r5, r6, pc}

0800e974 <__sfp_lock_acquire>:
 800e974:	4801      	ldr	r0, [pc, #4]	; (800e97c <__sfp_lock_acquire+0x8>)
 800e976:	f000 b8b3 	b.w	800eae0 <__retarget_lock_acquire_recursive>
 800e97a:	bf00      	nop
 800e97c:	20000899 	.word	0x20000899

0800e980 <__sfp_lock_release>:
 800e980:	4801      	ldr	r0, [pc, #4]	; (800e988 <__sfp_lock_release+0x8>)
 800e982:	f000 b8ae 	b.w	800eae2 <__retarget_lock_release_recursive>
 800e986:	bf00      	nop
 800e988:	20000899 	.word	0x20000899

0800e98c <__sinit_lock_acquire>:
 800e98c:	4801      	ldr	r0, [pc, #4]	; (800e994 <__sinit_lock_acquire+0x8>)
 800e98e:	f000 b8a7 	b.w	800eae0 <__retarget_lock_acquire_recursive>
 800e992:	bf00      	nop
 800e994:	2000089a 	.word	0x2000089a

0800e998 <__sinit_lock_release>:
 800e998:	4801      	ldr	r0, [pc, #4]	; (800e9a0 <__sinit_lock_release+0x8>)
 800e99a:	f000 b8a2 	b.w	800eae2 <__retarget_lock_release_recursive>
 800e99e:	bf00      	nop
 800e9a0:	2000089a 	.word	0x2000089a

0800e9a4 <__sinit>:
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	f7ff fff0 	bl	800e98c <__sinit_lock_acquire>
 800e9ac:	69a3      	ldr	r3, [r4, #24]
 800e9ae:	b11b      	cbz	r3, 800e9b8 <__sinit+0x14>
 800e9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9b4:	f7ff bff0 	b.w	800e998 <__sinit_lock_release>
 800e9b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9bc:	6523      	str	r3, [r4, #80]	; 0x50
 800e9be:	4b13      	ldr	r3, [pc, #76]	; (800ea0c <__sinit+0x68>)
 800e9c0:	4a13      	ldr	r2, [pc, #76]	; (800ea10 <__sinit+0x6c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9c6:	42a3      	cmp	r3, r4
 800e9c8:	bf04      	itt	eq
 800e9ca:	2301      	moveq	r3, #1
 800e9cc:	61a3      	streq	r3, [r4, #24]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 f820 	bl	800ea14 <__sfp>
 800e9d4:	6060      	str	r0, [r4, #4]
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 f81c 	bl	800ea14 <__sfp>
 800e9dc:	60a0      	str	r0, [r4, #8]
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f000 f818 	bl	800ea14 <__sfp>
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	60e0      	str	r0, [r4, #12]
 800e9e8:	2104      	movs	r1, #4
 800e9ea:	6860      	ldr	r0, [r4, #4]
 800e9ec:	f7ff ff82 	bl	800e8f4 <std>
 800e9f0:	68a0      	ldr	r0, [r4, #8]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	2109      	movs	r1, #9
 800e9f6:	f7ff ff7d 	bl	800e8f4 <std>
 800e9fa:	68e0      	ldr	r0, [r4, #12]
 800e9fc:	2202      	movs	r2, #2
 800e9fe:	2112      	movs	r1, #18
 800ea00:	f7ff ff78 	bl	800e8f4 <std>
 800ea04:	2301      	movs	r3, #1
 800ea06:	61a3      	str	r3, [r4, #24]
 800ea08:	e7d2      	b.n	800e9b0 <__sinit+0xc>
 800ea0a:	bf00      	nop
 800ea0c:	0801012c 	.word	0x0801012c
 800ea10:	0800e93d 	.word	0x0800e93d

0800ea14 <__sfp>:
 800ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea16:	4607      	mov	r7, r0
 800ea18:	f7ff ffac 	bl	800e974 <__sfp_lock_acquire>
 800ea1c:	4b1e      	ldr	r3, [pc, #120]	; (800ea98 <__sfp+0x84>)
 800ea1e:	681e      	ldr	r6, [r3, #0]
 800ea20:	69b3      	ldr	r3, [r6, #24]
 800ea22:	b913      	cbnz	r3, 800ea2a <__sfp+0x16>
 800ea24:	4630      	mov	r0, r6
 800ea26:	f7ff ffbd 	bl	800e9a4 <__sinit>
 800ea2a:	3648      	adds	r6, #72	; 0x48
 800ea2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	d503      	bpl.n	800ea3c <__sfp+0x28>
 800ea34:	6833      	ldr	r3, [r6, #0]
 800ea36:	b30b      	cbz	r3, 800ea7c <__sfp+0x68>
 800ea38:	6836      	ldr	r6, [r6, #0]
 800ea3a:	e7f7      	b.n	800ea2c <__sfp+0x18>
 800ea3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea40:	b9d5      	cbnz	r5, 800ea78 <__sfp+0x64>
 800ea42:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <__sfp+0x88>)
 800ea44:	60e3      	str	r3, [r4, #12]
 800ea46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea4a:	6665      	str	r5, [r4, #100]	; 0x64
 800ea4c:	f000 f847 	bl	800eade <__retarget_lock_init_recursive>
 800ea50:	f7ff ff96 	bl	800e980 <__sfp_lock_release>
 800ea54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea5c:	6025      	str	r5, [r4, #0]
 800ea5e:	61a5      	str	r5, [r4, #24]
 800ea60:	2208      	movs	r2, #8
 800ea62:	4629      	mov	r1, r5
 800ea64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea68:	f7fd facc 	bl	800c004 <memset>
 800ea6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea74:	4620      	mov	r0, r4
 800ea76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea78:	3468      	adds	r4, #104	; 0x68
 800ea7a:	e7d9      	b.n	800ea30 <__sfp+0x1c>
 800ea7c:	2104      	movs	r1, #4
 800ea7e:	4638      	mov	r0, r7
 800ea80:	f7ff ff62 	bl	800e948 <__sfmoreglue>
 800ea84:	4604      	mov	r4, r0
 800ea86:	6030      	str	r0, [r6, #0]
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d1d5      	bne.n	800ea38 <__sfp+0x24>
 800ea8c:	f7ff ff78 	bl	800e980 <__sfp_lock_release>
 800ea90:	230c      	movs	r3, #12
 800ea92:	603b      	str	r3, [r7, #0]
 800ea94:	e7ee      	b.n	800ea74 <__sfp+0x60>
 800ea96:	bf00      	nop
 800ea98:	0801012c 	.word	0x0801012c
 800ea9c:	ffff0001 	.word	0xffff0001

0800eaa0 <_fwalk_reent>:
 800eaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa4:	4606      	mov	r6, r0
 800eaa6:	4688      	mov	r8, r1
 800eaa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eaac:	2700      	movs	r7, #0
 800eaae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eab2:	f1b9 0901 	subs.w	r9, r9, #1
 800eab6:	d505      	bpl.n	800eac4 <_fwalk_reent+0x24>
 800eab8:	6824      	ldr	r4, [r4, #0]
 800eaba:	2c00      	cmp	r4, #0
 800eabc:	d1f7      	bne.n	800eaae <_fwalk_reent+0xe>
 800eabe:	4638      	mov	r0, r7
 800eac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac4:	89ab      	ldrh	r3, [r5, #12]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d907      	bls.n	800eada <_fwalk_reent+0x3a>
 800eaca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eace:	3301      	adds	r3, #1
 800ead0:	d003      	beq.n	800eada <_fwalk_reent+0x3a>
 800ead2:	4629      	mov	r1, r5
 800ead4:	4630      	mov	r0, r6
 800ead6:	47c0      	blx	r8
 800ead8:	4307      	orrs	r7, r0
 800eada:	3568      	adds	r5, #104	; 0x68
 800eadc:	e7e9      	b.n	800eab2 <_fwalk_reent+0x12>

0800eade <__retarget_lock_init_recursive>:
 800eade:	4770      	bx	lr

0800eae0 <__retarget_lock_acquire_recursive>:
 800eae0:	4770      	bx	lr

0800eae2 <__retarget_lock_release_recursive>:
 800eae2:	4770      	bx	lr

0800eae4 <__swhatbuf_r>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	460e      	mov	r6, r1
 800eae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaec:	2900      	cmp	r1, #0
 800eaee:	b096      	sub	sp, #88	; 0x58
 800eaf0:	4614      	mov	r4, r2
 800eaf2:	461d      	mov	r5, r3
 800eaf4:	da08      	bge.n	800eb08 <__swhatbuf_r+0x24>
 800eaf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	602a      	str	r2, [r5, #0]
 800eafe:	061a      	lsls	r2, r3, #24
 800eb00:	d410      	bmi.n	800eb24 <__swhatbuf_r+0x40>
 800eb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb06:	e00e      	b.n	800eb26 <__swhatbuf_r+0x42>
 800eb08:	466a      	mov	r2, sp
 800eb0a:	f000 f8fb 	bl	800ed04 <_fstat_r>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	dbf1      	blt.n	800eaf6 <__swhatbuf_r+0x12>
 800eb12:	9a01      	ldr	r2, [sp, #4]
 800eb14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb1c:	425a      	negs	r2, r3
 800eb1e:	415a      	adcs	r2, r3
 800eb20:	602a      	str	r2, [r5, #0]
 800eb22:	e7ee      	b.n	800eb02 <__swhatbuf_r+0x1e>
 800eb24:	2340      	movs	r3, #64	; 0x40
 800eb26:	2000      	movs	r0, #0
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	b016      	add	sp, #88	; 0x58
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb30 <__smakebuf_r>:
 800eb30:	898b      	ldrh	r3, [r1, #12]
 800eb32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb34:	079d      	lsls	r5, r3, #30
 800eb36:	4606      	mov	r6, r0
 800eb38:	460c      	mov	r4, r1
 800eb3a:	d507      	bpl.n	800eb4c <__smakebuf_r+0x1c>
 800eb3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	6123      	str	r3, [r4, #16]
 800eb44:	2301      	movs	r3, #1
 800eb46:	6163      	str	r3, [r4, #20]
 800eb48:	b002      	add	sp, #8
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	ab01      	add	r3, sp, #4
 800eb4e:	466a      	mov	r2, sp
 800eb50:	f7ff ffc8 	bl	800eae4 <__swhatbuf_r>
 800eb54:	9900      	ldr	r1, [sp, #0]
 800eb56:	4605      	mov	r5, r0
 800eb58:	4630      	mov	r0, r6
 800eb5a:	f7ff f913 	bl	800dd84 <_malloc_r>
 800eb5e:	b948      	cbnz	r0, 800eb74 <__smakebuf_r+0x44>
 800eb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb64:	059a      	lsls	r2, r3, #22
 800eb66:	d4ef      	bmi.n	800eb48 <__smakebuf_r+0x18>
 800eb68:	f023 0303 	bic.w	r3, r3, #3
 800eb6c:	f043 0302 	orr.w	r3, r3, #2
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	e7e3      	b.n	800eb3c <__smakebuf_r+0xc>
 800eb74:	4b0d      	ldr	r3, [pc, #52]	; (800ebac <__smakebuf_r+0x7c>)
 800eb76:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	6020      	str	r0, [r4, #0]
 800eb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb80:	81a3      	strh	r3, [r4, #12]
 800eb82:	9b00      	ldr	r3, [sp, #0]
 800eb84:	6163      	str	r3, [r4, #20]
 800eb86:	9b01      	ldr	r3, [sp, #4]
 800eb88:	6120      	str	r0, [r4, #16]
 800eb8a:	b15b      	cbz	r3, 800eba4 <__smakebuf_r+0x74>
 800eb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb90:	4630      	mov	r0, r6
 800eb92:	f000 f8c9 	bl	800ed28 <_isatty_r>
 800eb96:	b128      	cbz	r0, 800eba4 <__smakebuf_r+0x74>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	f023 0303 	bic.w	r3, r3, #3
 800eb9e:	f043 0301 	orr.w	r3, r3, #1
 800eba2:	81a3      	strh	r3, [r4, #12]
 800eba4:	89a0      	ldrh	r0, [r4, #12]
 800eba6:	4305      	orrs	r5, r0
 800eba8:	81a5      	strh	r5, [r4, #12]
 800ebaa:	e7cd      	b.n	800eb48 <__smakebuf_r+0x18>
 800ebac:	0800e93d 	.word	0x0800e93d

0800ebb0 <_raise_r>:
 800ebb0:	291f      	cmp	r1, #31
 800ebb2:	b538      	push	{r3, r4, r5, lr}
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	460d      	mov	r5, r1
 800ebb8:	d904      	bls.n	800ebc4 <_raise_r+0x14>
 800ebba:	2316      	movs	r3, #22
 800ebbc:	6003      	str	r3, [r0, #0]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebc6:	b112      	cbz	r2, 800ebce <_raise_r+0x1e>
 800ebc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebcc:	b94b      	cbnz	r3, 800ebe2 <_raise_r+0x32>
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 f830 	bl	800ec34 <_getpid_r>
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	4601      	mov	r1, r0
 800ebd8:	4620      	mov	r0, r4
 800ebda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebde:	f000 b817 	b.w	800ec10 <_kill_r>
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d00a      	beq.n	800ebfc <_raise_r+0x4c>
 800ebe6:	1c59      	adds	r1, r3, #1
 800ebe8:	d103      	bne.n	800ebf2 <_raise_r+0x42>
 800ebea:	2316      	movs	r3, #22
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	2001      	movs	r0, #1
 800ebf0:	e7e7      	b.n	800ebc2 <_raise_r+0x12>
 800ebf2:	2400      	movs	r4, #0
 800ebf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	4798      	blx	r3
 800ebfc:	2000      	movs	r0, #0
 800ebfe:	e7e0      	b.n	800ebc2 <_raise_r+0x12>

0800ec00 <raise>:
 800ec00:	4b02      	ldr	r3, [pc, #8]	; (800ec0c <raise+0xc>)
 800ec02:	4601      	mov	r1, r0
 800ec04:	6818      	ldr	r0, [r3, #0]
 800ec06:	f7ff bfd3 	b.w	800ebb0 <_raise_r>
 800ec0a:	bf00      	nop
 800ec0c:	20000064 	.word	0x20000064

0800ec10 <_kill_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	; (800ec30 <_kill_r+0x20>)
 800ec14:	2300      	movs	r3, #0
 800ec16:	4604      	mov	r4, r0
 800ec18:	4608      	mov	r0, r1
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f7f6 fe91 	bl	8005944 <_kill>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	d102      	bne.n	800ec2c <_kill_r+0x1c>
 800ec26:	682b      	ldr	r3, [r5, #0]
 800ec28:	b103      	cbz	r3, 800ec2c <_kill_r+0x1c>
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	bf00      	nop
 800ec30:	20000894 	.word	0x20000894

0800ec34 <_getpid_r>:
 800ec34:	f7f6 be7e 	b.w	8005934 <_getpid>

0800ec38 <__sread>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec40:	f000 f894 	bl	800ed6c <_read_r>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	bfab      	itete	ge
 800ec48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec4c:	181b      	addge	r3, r3, r0
 800ec4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec52:	bfac      	ite	ge
 800ec54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec56:	81a3      	strhlt	r3, [r4, #12]
 800ec58:	bd10      	pop	{r4, pc}

0800ec5a <__swrite>:
 800ec5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5e:	461f      	mov	r7, r3
 800ec60:	898b      	ldrh	r3, [r1, #12]
 800ec62:	05db      	lsls	r3, r3, #23
 800ec64:	4605      	mov	r5, r0
 800ec66:	460c      	mov	r4, r1
 800ec68:	4616      	mov	r6, r2
 800ec6a:	d505      	bpl.n	800ec78 <__swrite+0x1e>
 800ec6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec70:	2302      	movs	r3, #2
 800ec72:	2200      	movs	r2, #0
 800ec74:	f000 f868 	bl	800ed48 <_lseek_r>
 800ec78:	89a3      	ldrh	r3, [r4, #12]
 800ec7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec82:	81a3      	strh	r3, [r4, #12]
 800ec84:	4632      	mov	r2, r6
 800ec86:	463b      	mov	r3, r7
 800ec88:	4628      	mov	r0, r5
 800ec8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8e:	f000 b817 	b.w	800ecc0 <_write_r>

0800ec92 <__sseek>:
 800ec92:	b510      	push	{r4, lr}
 800ec94:	460c      	mov	r4, r1
 800ec96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec9a:	f000 f855 	bl	800ed48 <_lseek_r>
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	bf15      	itete	ne
 800eca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecae:	81a3      	strheq	r3, [r4, #12]
 800ecb0:	bf18      	it	ne
 800ecb2:	81a3      	strhne	r3, [r4, #12]
 800ecb4:	bd10      	pop	{r4, pc}

0800ecb6 <__sclose>:
 800ecb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecba:	f000 b813 	b.w	800ece4 <_close_r>
	...

0800ecc0 <_write_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4d07      	ldr	r5, [pc, #28]	; (800ece0 <_write_r+0x20>)
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	4608      	mov	r0, r1
 800ecc8:	4611      	mov	r1, r2
 800ecca:	2200      	movs	r2, #0
 800eccc:	602a      	str	r2, [r5, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	f7f6 fe6f 	bl	80059b2 <_write>
 800ecd4:	1c43      	adds	r3, r0, #1
 800ecd6:	d102      	bne.n	800ecde <_write_r+0x1e>
 800ecd8:	682b      	ldr	r3, [r5, #0]
 800ecda:	b103      	cbz	r3, 800ecde <_write_r+0x1e>
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	bd38      	pop	{r3, r4, r5, pc}
 800ece0:	20000894 	.word	0x20000894

0800ece4 <_close_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4d06      	ldr	r5, [pc, #24]	; (800ed00 <_close_r+0x1c>)
 800ece8:	2300      	movs	r3, #0
 800ecea:	4604      	mov	r4, r0
 800ecec:	4608      	mov	r0, r1
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	f7f6 fe7b 	bl	80059ea <_close>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_close_r+0x1a>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	b103      	cbz	r3, 800ecfe <_close_r+0x1a>
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	20000894 	.word	0x20000894

0800ed04 <_fstat_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4d07      	ldr	r5, [pc, #28]	; (800ed24 <_fstat_r+0x20>)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	4611      	mov	r1, r2
 800ed10:	602b      	str	r3, [r5, #0]
 800ed12:	f7f6 fe76 	bl	8005a02 <_fstat>
 800ed16:	1c43      	adds	r3, r0, #1
 800ed18:	d102      	bne.n	800ed20 <_fstat_r+0x1c>
 800ed1a:	682b      	ldr	r3, [r5, #0]
 800ed1c:	b103      	cbz	r3, 800ed20 <_fstat_r+0x1c>
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	bd38      	pop	{r3, r4, r5, pc}
 800ed22:	bf00      	nop
 800ed24:	20000894 	.word	0x20000894

0800ed28 <_isatty_r>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	4d06      	ldr	r5, [pc, #24]	; (800ed44 <_isatty_r+0x1c>)
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	4604      	mov	r4, r0
 800ed30:	4608      	mov	r0, r1
 800ed32:	602b      	str	r3, [r5, #0]
 800ed34:	f7f6 fe75 	bl	8005a22 <_isatty>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_isatty_r+0x1a>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_isatty_r+0x1a>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	20000894 	.word	0x20000894

0800ed48 <_lseek_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4d07      	ldr	r5, [pc, #28]	; (800ed68 <_lseek_r+0x20>)
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	4608      	mov	r0, r1
 800ed50:	4611      	mov	r1, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	602a      	str	r2, [r5, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	f7f6 fe6e 	bl	8005a38 <_lseek>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_lseek_r+0x1e>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_lseek_r+0x1e>
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	20000894 	.word	0x20000894

0800ed6c <_read_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d07      	ldr	r5, [pc, #28]	; (800ed8c <_read_r+0x20>)
 800ed70:	4604      	mov	r4, r0
 800ed72:	4608      	mov	r0, r1
 800ed74:	4611      	mov	r1, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	602a      	str	r2, [r5, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f7f6 fdfc 	bl	8005978 <_read>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_read_r+0x1e>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_read_r+0x1e>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	20000894 	.word	0x20000894

0800ed90 <asin>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	ed2d 8b02 	vpush	{d8}
 800ed96:	ec55 4b10 	vmov	r4, r5, d0
 800ed9a:	f000 f8c9 	bl	800ef30 <__ieee754_asin>
 800ed9e:	4622      	mov	r2, r4
 800eda0:	462b      	mov	r3, r5
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	eeb0 8a40 	vmov.f32	s16, s0
 800edaa:	eef0 8a60 	vmov.f32	s17, s1
 800edae:	f7f1 fec5 	bl	8000b3c <__aeabi_dcmpun>
 800edb2:	b9a8      	cbnz	r0, 800ede0 <asin+0x50>
 800edb4:	ec45 4b10 	vmov	d0, r4, r5
 800edb8:	f001 f8de 	bl	800ff78 <fabs>
 800edbc:	4b0c      	ldr	r3, [pc, #48]	; (800edf0 <asin+0x60>)
 800edbe:	ec51 0b10 	vmov	r0, r1, d0
 800edc2:	2200      	movs	r2, #0
 800edc4:	f7f1 feb0 	bl	8000b28 <__aeabi_dcmpgt>
 800edc8:	b150      	cbz	r0, 800ede0 <asin+0x50>
 800edca:	f7fd f8f1 	bl	800bfb0 <__errno>
 800edce:	ecbd 8b02 	vpop	{d8}
 800edd2:	2321      	movs	r3, #33	; 0x21
 800edd4:	6003      	str	r3, [r0, #0]
 800edd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edda:	4806      	ldr	r0, [pc, #24]	; (800edf4 <asin+0x64>)
 800eddc:	f7ff b848 	b.w	800de70 <nan>
 800ede0:	eeb0 0a48 	vmov.f32	s0, s16
 800ede4:	eef0 0a68 	vmov.f32	s1, s17
 800ede8:	ecbd 8b02 	vpop	{d8}
 800edec:	bd38      	pop	{r3, r4, r5, pc}
 800edee:	bf00      	nop
 800edf0:	3ff00000 	.word	0x3ff00000
 800edf4:	080103c7 	.word	0x080103c7

0800edf8 <pow>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	ed2d 8b02 	vpush	{d8}
 800edfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ee02:	eef0 8a60 	vmov.f32	s17, s1
 800ee06:	ec55 4b11 	vmov	r4, r5, d1
 800ee0a:	f000 faa5 	bl	800f358 <__ieee754_pow>
 800ee0e:	4622      	mov	r2, r4
 800ee10:	462b      	mov	r3, r5
 800ee12:	4620      	mov	r0, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	ec57 6b10 	vmov	r6, r7, d0
 800ee1a:	f7f1 fe8f 	bl	8000b3c <__aeabi_dcmpun>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d13b      	bne.n	800ee9a <pow+0xa2>
 800ee22:	ec51 0b18 	vmov	r0, r1, d8
 800ee26:	2200      	movs	r2, #0
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f7f1 fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee2e:	b1b8      	cbz	r0, 800ee60 <pow+0x68>
 800ee30:	2200      	movs	r2, #0
 800ee32:	2300      	movs	r3, #0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d146      	bne.n	800eece <pow+0xd6>
 800ee40:	ec45 4b10 	vmov	d0, r4, r5
 800ee44:	f001 f8a1 	bl	800ff8a <finite>
 800ee48:	b338      	cbz	r0, 800ee9a <pow+0xa2>
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fe4b 	bl	8000aec <__aeabi_dcmplt>
 800ee56:	b300      	cbz	r0, 800ee9a <pow+0xa2>
 800ee58:	f7fd f8aa 	bl	800bfb0 <__errno>
 800ee5c:	2322      	movs	r3, #34	; 0x22
 800ee5e:	e01b      	b.n	800ee98 <pow+0xa0>
 800ee60:	ec47 6b10 	vmov	d0, r6, r7
 800ee64:	f001 f891 	bl	800ff8a <finite>
 800ee68:	b9e0      	cbnz	r0, 800eea4 <pow+0xac>
 800ee6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee6e:	eef0 0a68 	vmov.f32	s1, s17
 800ee72:	f001 f88a 	bl	800ff8a <finite>
 800ee76:	b1a8      	cbz	r0, 800eea4 <pow+0xac>
 800ee78:	ec45 4b10 	vmov	d0, r4, r5
 800ee7c:	f001 f885 	bl	800ff8a <finite>
 800ee80:	b180      	cbz	r0, 800eea4 <pow+0xac>
 800ee82:	4632      	mov	r2, r6
 800ee84:	463b      	mov	r3, r7
 800ee86:	4630      	mov	r0, r6
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f7f1 fe57 	bl	8000b3c <__aeabi_dcmpun>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d0e2      	beq.n	800ee58 <pow+0x60>
 800ee92:	f7fd f88d 	bl	800bfb0 <__errno>
 800ee96:	2321      	movs	r3, #33	; 0x21
 800ee98:	6003      	str	r3, [r0, #0]
 800ee9a:	ecbd 8b02 	vpop	{d8}
 800ee9e:	ec47 6b10 	vmov	d0, r6, r7
 800eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea4:	2200      	movs	r2, #0
 800eea6:	2300      	movs	r3, #0
 800eea8:	4630      	mov	r0, r6
 800eeaa:	4639      	mov	r1, r7
 800eeac:	f7f1 fe14 	bl	8000ad8 <__aeabi_dcmpeq>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0f2      	beq.n	800ee9a <pow+0xa2>
 800eeb4:	eeb0 0a48 	vmov.f32	s0, s16
 800eeb8:	eef0 0a68 	vmov.f32	s1, s17
 800eebc:	f001 f865 	bl	800ff8a <finite>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d0ea      	beq.n	800ee9a <pow+0xa2>
 800eec4:	ec45 4b10 	vmov	d0, r4, r5
 800eec8:	f001 f85f 	bl	800ff8a <finite>
 800eecc:	e7c3      	b.n	800ee56 <pow+0x5e>
 800eece:	4f01      	ldr	r7, [pc, #4]	; (800eed4 <pow+0xdc>)
 800eed0:	2600      	movs	r6, #0
 800eed2:	e7e2      	b.n	800ee9a <pow+0xa2>
 800eed4:	3ff00000 	.word	0x3ff00000

0800eed8 <sqrt>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	ed2d 8b02 	vpush	{d8}
 800eede:	ec55 4b10 	vmov	r4, r5, d0
 800eee2:	f000 ff67 	bl	800fdb4 <__ieee754_sqrt>
 800eee6:	4622      	mov	r2, r4
 800eee8:	462b      	mov	r3, r5
 800eeea:	4620      	mov	r0, r4
 800eeec:	4629      	mov	r1, r5
 800eeee:	eeb0 8a40 	vmov.f32	s16, s0
 800eef2:	eef0 8a60 	vmov.f32	s17, s1
 800eef6:	f7f1 fe21 	bl	8000b3c <__aeabi_dcmpun>
 800eefa:	b990      	cbnz	r0, 800ef22 <sqrt+0x4a>
 800eefc:	2200      	movs	r2, #0
 800eefe:	2300      	movs	r3, #0
 800ef00:	4620      	mov	r0, r4
 800ef02:	4629      	mov	r1, r5
 800ef04:	f7f1 fdf2 	bl	8000aec <__aeabi_dcmplt>
 800ef08:	b158      	cbz	r0, 800ef22 <sqrt+0x4a>
 800ef0a:	f7fd f851 	bl	800bfb0 <__errno>
 800ef0e:	2321      	movs	r3, #33	; 0x21
 800ef10:	6003      	str	r3, [r0, #0]
 800ef12:	2200      	movs	r2, #0
 800ef14:	2300      	movs	r3, #0
 800ef16:	4610      	mov	r0, r2
 800ef18:	4619      	mov	r1, r3
 800ef1a:	f7f1 fc9f 	bl	800085c <__aeabi_ddiv>
 800ef1e:	ec41 0b18 	vmov	d8, r0, r1
 800ef22:	eeb0 0a48 	vmov.f32	s0, s16
 800ef26:	eef0 0a68 	vmov.f32	s1, s17
 800ef2a:	ecbd 8b02 	vpop	{d8}
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}

0800ef30 <__ieee754_asin>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	ed2d 8b04 	vpush	{d8-d9}
 800ef38:	ec55 4b10 	vmov	r4, r5, d0
 800ef3c:	4bcc      	ldr	r3, [pc, #816]	; (800f270 <__ieee754_asin+0x340>)
 800ef3e:	b083      	sub	sp, #12
 800ef40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ef44:	4598      	cmp	r8, r3
 800ef46:	9501      	str	r5, [sp, #4]
 800ef48:	dd35      	ble.n	800efb6 <__ieee754_asin+0x86>
 800ef4a:	ee10 3a10 	vmov	r3, s0
 800ef4e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800ef52:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800ef56:	ea58 0303 	orrs.w	r3, r8, r3
 800ef5a:	d117      	bne.n	800ef8c <__ieee754_asin+0x5c>
 800ef5c:	a3aa      	add	r3, pc, #680	; (adr r3, 800f208 <__ieee754_asin+0x2d8>)
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	ee10 0a10 	vmov	r0, s0
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 fb4e 	bl	8000608 <__aeabi_dmul>
 800ef6c:	a3a8      	add	r3, pc, #672	; (adr r3, 800f210 <__ieee754_asin+0x2e0>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 fb45 	bl	8000608 <__aeabi_dmul>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 f989 	bl	800029c <__adddf3>
 800ef8a:	e00b      	b.n	800efa4 <__ieee754_asin+0x74>
 800ef8c:	ee10 2a10 	vmov	r2, s0
 800ef90:	462b      	mov	r3, r5
 800ef92:	ee10 0a10 	vmov	r0, s0
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 f97e 	bl	8000298 <__aeabi_dsub>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	f7f1 fc5c 	bl	800085c <__aeabi_ddiv>
 800efa4:	4604      	mov	r4, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	ec45 4b10 	vmov	d0, r4, r5
 800efac:	b003      	add	sp, #12
 800efae:	ecbd 8b04 	vpop	{d8-d9}
 800efb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb6:	4baf      	ldr	r3, [pc, #700]	; (800f274 <__ieee754_asin+0x344>)
 800efb8:	4598      	cmp	r8, r3
 800efba:	dc11      	bgt.n	800efe0 <__ieee754_asin+0xb0>
 800efbc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800efc0:	f280 80ae 	bge.w	800f120 <__ieee754_asin+0x1f0>
 800efc4:	a394      	add	r3, pc, #592	; (adr r3, 800f218 <__ieee754_asin+0x2e8>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	ee10 0a10 	vmov	r0, s0
 800efce:	4629      	mov	r1, r5
 800efd0:	f7f1 f964 	bl	800029c <__adddf3>
 800efd4:	4ba8      	ldr	r3, [pc, #672]	; (800f278 <__ieee754_asin+0x348>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	f7f1 fda6 	bl	8000b28 <__aeabi_dcmpgt>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d1e3      	bne.n	800efa8 <__ieee754_asin+0x78>
 800efe0:	ec45 4b10 	vmov	d0, r4, r5
 800efe4:	f000 ffc8 	bl	800ff78 <fabs>
 800efe8:	49a3      	ldr	r1, [pc, #652]	; (800f278 <__ieee754_asin+0x348>)
 800efea:	ec53 2b10 	vmov	r2, r3, d0
 800efee:	2000      	movs	r0, #0
 800eff0:	f7f1 f952 	bl	8000298 <__aeabi_dsub>
 800eff4:	4ba1      	ldr	r3, [pc, #644]	; (800f27c <__ieee754_asin+0x34c>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	f7f1 fb06 	bl	8000608 <__aeabi_dmul>
 800effc:	a388      	add	r3, pc, #544	; (adr r3, 800f220 <__ieee754_asin+0x2f0>)
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	4604      	mov	r4, r0
 800f004:	460d      	mov	r5, r1
 800f006:	f7f1 faff 	bl	8000608 <__aeabi_dmul>
 800f00a:	a387      	add	r3, pc, #540	; (adr r3, 800f228 <__ieee754_asin+0x2f8>)
 800f00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f010:	f7f1 f944 	bl	800029c <__adddf3>
 800f014:	4622      	mov	r2, r4
 800f016:	462b      	mov	r3, r5
 800f018:	f7f1 faf6 	bl	8000608 <__aeabi_dmul>
 800f01c:	a384      	add	r3, pc, #528	; (adr r3, 800f230 <__ieee754_asin+0x300>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f7f1 f939 	bl	8000298 <__aeabi_dsub>
 800f026:	4622      	mov	r2, r4
 800f028:	462b      	mov	r3, r5
 800f02a:	f7f1 faed 	bl	8000608 <__aeabi_dmul>
 800f02e:	a382      	add	r3, pc, #520	; (adr r3, 800f238 <__ieee754_asin+0x308>)
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	f7f1 f932 	bl	800029c <__adddf3>
 800f038:	4622      	mov	r2, r4
 800f03a:	462b      	mov	r3, r5
 800f03c:	f7f1 fae4 	bl	8000608 <__aeabi_dmul>
 800f040:	a37f      	add	r3, pc, #508	; (adr r3, 800f240 <__ieee754_asin+0x310>)
 800f042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f046:	f7f1 f927 	bl	8000298 <__aeabi_dsub>
 800f04a:	4622      	mov	r2, r4
 800f04c:	462b      	mov	r3, r5
 800f04e:	f7f1 fadb 	bl	8000608 <__aeabi_dmul>
 800f052:	a37d      	add	r3, pc, #500	; (adr r3, 800f248 <__ieee754_asin+0x318>)
 800f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f058:	f7f1 f920 	bl	800029c <__adddf3>
 800f05c:	4622      	mov	r2, r4
 800f05e:	462b      	mov	r3, r5
 800f060:	f7f1 fad2 	bl	8000608 <__aeabi_dmul>
 800f064:	a37a      	add	r3, pc, #488	; (adr r3, 800f250 <__ieee754_asin+0x320>)
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	ec41 0b18 	vmov	d8, r0, r1
 800f06e:	4620      	mov	r0, r4
 800f070:	4629      	mov	r1, r5
 800f072:	f7f1 fac9 	bl	8000608 <__aeabi_dmul>
 800f076:	a378      	add	r3, pc, #480	; (adr r3, 800f258 <__ieee754_asin+0x328>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f7f1 f90c 	bl	8000298 <__aeabi_dsub>
 800f080:	4622      	mov	r2, r4
 800f082:	462b      	mov	r3, r5
 800f084:	f7f1 fac0 	bl	8000608 <__aeabi_dmul>
 800f088:	a375      	add	r3, pc, #468	; (adr r3, 800f260 <__ieee754_asin+0x330>)
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f7f1 f905 	bl	800029c <__adddf3>
 800f092:	4622      	mov	r2, r4
 800f094:	462b      	mov	r3, r5
 800f096:	f7f1 fab7 	bl	8000608 <__aeabi_dmul>
 800f09a:	a373      	add	r3, pc, #460	; (adr r3, 800f268 <__ieee754_asin+0x338>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	f7f1 f8fa 	bl	8000298 <__aeabi_dsub>
 800f0a4:	4622      	mov	r2, r4
 800f0a6:	462b      	mov	r3, r5
 800f0a8:	f7f1 faae 	bl	8000608 <__aeabi_dmul>
 800f0ac:	4b72      	ldr	r3, [pc, #456]	; (800f278 <__ieee754_asin+0x348>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f7f1 f8f4 	bl	800029c <__adddf3>
 800f0b4:	ec45 4b10 	vmov	d0, r4, r5
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	460f      	mov	r7, r1
 800f0bc:	f000 fe7a 	bl	800fdb4 <__ieee754_sqrt>
 800f0c0:	4b6f      	ldr	r3, [pc, #444]	; (800f280 <__ieee754_asin+0x350>)
 800f0c2:	4598      	cmp	r8, r3
 800f0c4:	ec5b ab10 	vmov	sl, fp, d0
 800f0c8:	f340 80dc 	ble.w	800f284 <__ieee754_asin+0x354>
 800f0cc:	4632      	mov	r2, r6
 800f0ce:	463b      	mov	r3, r7
 800f0d0:	ec51 0b18 	vmov	r0, r1, d8
 800f0d4:	f7f1 fbc2 	bl	800085c <__aeabi_ddiv>
 800f0d8:	4652      	mov	r2, sl
 800f0da:	465b      	mov	r3, fp
 800f0dc:	f7f1 fa94 	bl	8000608 <__aeabi_dmul>
 800f0e0:	4652      	mov	r2, sl
 800f0e2:	465b      	mov	r3, fp
 800f0e4:	f7f1 f8da 	bl	800029c <__adddf3>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	f7f1 f8d6 	bl	800029c <__adddf3>
 800f0f0:	a347      	add	r3, pc, #284	; (adr r3, 800f210 <__ieee754_asin+0x2e0>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 f8cf 	bl	8000298 <__aeabi_dsub>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	a142      	add	r1, pc, #264	; (adr r1, 800f208 <__ieee754_asin+0x2d8>)
 800f100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f104:	f7f1 f8c8 	bl	8000298 <__aeabi_dsub>
 800f108:	9b01      	ldr	r3, [sp, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	bfdc      	itt	le
 800f10e:	4602      	movle	r2, r0
 800f110:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800f114:	4604      	mov	r4, r0
 800f116:	460d      	mov	r5, r1
 800f118:	bfdc      	itt	le
 800f11a:	4614      	movle	r4, r2
 800f11c:	461d      	movle	r5, r3
 800f11e:	e743      	b.n	800efa8 <__ieee754_asin+0x78>
 800f120:	ee10 2a10 	vmov	r2, s0
 800f124:	ee10 0a10 	vmov	r0, s0
 800f128:	462b      	mov	r3, r5
 800f12a:	4629      	mov	r1, r5
 800f12c:	f7f1 fa6c 	bl	8000608 <__aeabi_dmul>
 800f130:	a33b      	add	r3, pc, #236	; (adr r3, 800f220 <__ieee754_asin+0x2f0>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	4606      	mov	r6, r0
 800f138:	460f      	mov	r7, r1
 800f13a:	f7f1 fa65 	bl	8000608 <__aeabi_dmul>
 800f13e:	a33a      	add	r3, pc, #232	; (adr r3, 800f228 <__ieee754_asin+0x2f8>)
 800f140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f144:	f7f1 f8aa 	bl	800029c <__adddf3>
 800f148:	4632      	mov	r2, r6
 800f14a:	463b      	mov	r3, r7
 800f14c:	f7f1 fa5c 	bl	8000608 <__aeabi_dmul>
 800f150:	a337      	add	r3, pc, #220	; (adr r3, 800f230 <__ieee754_asin+0x300>)
 800f152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f156:	f7f1 f89f 	bl	8000298 <__aeabi_dsub>
 800f15a:	4632      	mov	r2, r6
 800f15c:	463b      	mov	r3, r7
 800f15e:	f7f1 fa53 	bl	8000608 <__aeabi_dmul>
 800f162:	a335      	add	r3, pc, #212	; (adr r3, 800f238 <__ieee754_asin+0x308>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f7f1 f898 	bl	800029c <__adddf3>
 800f16c:	4632      	mov	r2, r6
 800f16e:	463b      	mov	r3, r7
 800f170:	f7f1 fa4a 	bl	8000608 <__aeabi_dmul>
 800f174:	a332      	add	r3, pc, #200	; (adr r3, 800f240 <__ieee754_asin+0x310>)
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	f7f1 f88d 	bl	8000298 <__aeabi_dsub>
 800f17e:	4632      	mov	r2, r6
 800f180:	463b      	mov	r3, r7
 800f182:	f7f1 fa41 	bl	8000608 <__aeabi_dmul>
 800f186:	a330      	add	r3, pc, #192	; (adr r3, 800f248 <__ieee754_asin+0x318>)
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f7f1 f886 	bl	800029c <__adddf3>
 800f190:	4632      	mov	r2, r6
 800f192:	463b      	mov	r3, r7
 800f194:	f7f1 fa38 	bl	8000608 <__aeabi_dmul>
 800f198:	a32d      	add	r3, pc, #180	; (adr r3, 800f250 <__ieee754_asin+0x320>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	4680      	mov	r8, r0
 800f1a0:	4689      	mov	r9, r1
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	4639      	mov	r1, r7
 800f1a6:	f7f1 fa2f 	bl	8000608 <__aeabi_dmul>
 800f1aa:	a32b      	add	r3, pc, #172	; (adr r3, 800f258 <__ieee754_asin+0x328>)
 800f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b0:	f7f1 f872 	bl	8000298 <__aeabi_dsub>
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	f7f1 fa26 	bl	8000608 <__aeabi_dmul>
 800f1bc:	a328      	add	r3, pc, #160	; (adr r3, 800f260 <__ieee754_asin+0x330>)
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	f7f1 f86b 	bl	800029c <__adddf3>
 800f1c6:	4632      	mov	r2, r6
 800f1c8:	463b      	mov	r3, r7
 800f1ca:	f7f1 fa1d 	bl	8000608 <__aeabi_dmul>
 800f1ce:	a326      	add	r3, pc, #152	; (adr r3, 800f268 <__ieee754_asin+0x338>)
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	f7f1 f860 	bl	8000298 <__aeabi_dsub>
 800f1d8:	4632      	mov	r2, r6
 800f1da:	463b      	mov	r3, r7
 800f1dc:	f7f1 fa14 	bl	8000608 <__aeabi_dmul>
 800f1e0:	4b25      	ldr	r3, [pc, #148]	; (800f278 <__ieee754_asin+0x348>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f7f1 f85a 	bl	800029c <__adddf3>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	f7f1 fb34 	bl	800085c <__aeabi_ddiv>
 800f1f4:	4622      	mov	r2, r4
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	f7f1 fa06 	bl	8000608 <__aeabi_dmul>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	4620      	mov	r0, r4
 800f202:	4629      	mov	r1, r5
 800f204:	e6bf      	b.n	800ef86 <__ieee754_asin+0x56>
 800f206:	bf00      	nop
 800f208:	54442d18 	.word	0x54442d18
 800f20c:	3ff921fb 	.word	0x3ff921fb
 800f210:	33145c07 	.word	0x33145c07
 800f214:	3c91a626 	.word	0x3c91a626
 800f218:	8800759c 	.word	0x8800759c
 800f21c:	7e37e43c 	.word	0x7e37e43c
 800f220:	0dfdf709 	.word	0x0dfdf709
 800f224:	3f023de1 	.word	0x3f023de1
 800f228:	7501b288 	.word	0x7501b288
 800f22c:	3f49efe0 	.word	0x3f49efe0
 800f230:	b5688f3b 	.word	0xb5688f3b
 800f234:	3fa48228 	.word	0x3fa48228
 800f238:	0e884455 	.word	0x0e884455
 800f23c:	3fc9c155 	.word	0x3fc9c155
 800f240:	03eb6f7d 	.word	0x03eb6f7d
 800f244:	3fd4d612 	.word	0x3fd4d612
 800f248:	55555555 	.word	0x55555555
 800f24c:	3fc55555 	.word	0x3fc55555
 800f250:	b12e9282 	.word	0xb12e9282
 800f254:	3fb3b8c5 	.word	0x3fb3b8c5
 800f258:	1b8d0159 	.word	0x1b8d0159
 800f25c:	3fe6066c 	.word	0x3fe6066c
 800f260:	9c598ac8 	.word	0x9c598ac8
 800f264:	40002ae5 	.word	0x40002ae5
 800f268:	1c8a2d4b 	.word	0x1c8a2d4b
 800f26c:	40033a27 	.word	0x40033a27
 800f270:	3fefffff 	.word	0x3fefffff
 800f274:	3fdfffff 	.word	0x3fdfffff
 800f278:	3ff00000 	.word	0x3ff00000
 800f27c:	3fe00000 	.word	0x3fe00000
 800f280:	3fef3332 	.word	0x3fef3332
 800f284:	ee10 2a10 	vmov	r2, s0
 800f288:	ee10 0a10 	vmov	r0, s0
 800f28c:	465b      	mov	r3, fp
 800f28e:	4659      	mov	r1, fp
 800f290:	f7f1 f804 	bl	800029c <__adddf3>
 800f294:	4632      	mov	r2, r6
 800f296:	463b      	mov	r3, r7
 800f298:	ec41 0b19 	vmov	d9, r0, r1
 800f29c:	ec51 0b18 	vmov	r0, r1, d8
 800f2a0:	f7f1 fadc 	bl	800085c <__aeabi_ddiv>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	ec51 0b19 	vmov	r0, r1, d9
 800f2ac:	f7f1 f9ac 	bl	8000608 <__aeabi_dmul>
 800f2b0:	f04f 0800 	mov.w	r8, #0
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	460f      	mov	r7, r1
 800f2b8:	4642      	mov	r2, r8
 800f2ba:	465b      	mov	r3, fp
 800f2bc:	4640      	mov	r0, r8
 800f2be:	4659      	mov	r1, fp
 800f2c0:	f7f1 f9a2 	bl	8000608 <__aeabi_dmul>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	f7f0 ffe4 	bl	8000298 <__aeabi_dsub>
 800f2d0:	4642      	mov	r2, r8
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	465b      	mov	r3, fp
 800f2d8:	4650      	mov	r0, sl
 800f2da:	4659      	mov	r1, fp
 800f2dc:	f7f0 ffde 	bl	800029c <__adddf3>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7f1 fab8 	bl	800085c <__aeabi_ddiv>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	f7f0 ffd4 	bl	800029c <__adddf3>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	a113      	add	r1, pc, #76	; (adr r1, 800f348 <__ieee754_asin+0x418>)
 800f2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2fe:	f7f0 ffcb 	bl	8000298 <__aeabi_dsub>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4630      	mov	r0, r6
 800f308:	4639      	mov	r1, r7
 800f30a:	f7f0 ffc5 	bl	8000298 <__aeabi_dsub>
 800f30e:	4642      	mov	r2, r8
 800f310:	4604      	mov	r4, r0
 800f312:	460d      	mov	r5, r1
 800f314:	465b      	mov	r3, fp
 800f316:	4640      	mov	r0, r8
 800f318:	4659      	mov	r1, fp
 800f31a:	f7f0 ffbf 	bl	800029c <__adddf3>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	a10b      	add	r1, pc, #44	; (adr r1, 800f350 <__ieee754_asin+0x420>)
 800f324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f328:	f7f0 ffb6 	bl	8000298 <__aeabi_dsub>
 800f32c:	4602      	mov	r2, r0
 800f32e:	460b      	mov	r3, r1
 800f330:	4620      	mov	r0, r4
 800f332:	4629      	mov	r1, r5
 800f334:	f7f0 ffb0 	bl	8000298 <__aeabi_dsub>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	a104      	add	r1, pc, #16	; (adr r1, 800f350 <__ieee754_asin+0x420>)
 800f33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f342:	e6df      	b.n	800f104 <__ieee754_asin+0x1d4>
 800f344:	f3af 8000 	nop.w
 800f348:	33145c07 	.word	0x33145c07
 800f34c:	3c91a626 	.word	0x3c91a626
 800f350:	54442d18 	.word	0x54442d18
 800f354:	3fe921fb 	.word	0x3fe921fb

0800f358 <__ieee754_pow>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	ed2d 8b06 	vpush	{d8-d10}
 800f360:	b089      	sub	sp, #36	; 0x24
 800f362:	ed8d 1b00 	vstr	d1, [sp]
 800f366:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f36a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f36e:	ea58 0102 	orrs.w	r1, r8, r2
 800f372:	ec57 6b10 	vmov	r6, r7, d0
 800f376:	d115      	bne.n	800f3a4 <__ieee754_pow+0x4c>
 800f378:	19b3      	adds	r3, r6, r6
 800f37a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f37e:	4152      	adcs	r2, r2
 800f380:	4299      	cmp	r1, r3
 800f382:	4b89      	ldr	r3, [pc, #548]	; (800f5a8 <__ieee754_pow+0x250>)
 800f384:	4193      	sbcs	r3, r2
 800f386:	f080 84d2 	bcs.w	800fd2e <__ieee754_pow+0x9d6>
 800f38a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f38e:	4630      	mov	r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	f7f0 ff83 	bl	800029c <__adddf3>
 800f396:	ec41 0b10 	vmov	d0, r0, r1
 800f39a:	b009      	add	sp, #36	; 0x24
 800f39c:	ecbd 8b06 	vpop	{d8-d10}
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	4b81      	ldr	r3, [pc, #516]	; (800f5ac <__ieee754_pow+0x254>)
 800f3a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f3aa:	429c      	cmp	r4, r3
 800f3ac:	ee10 aa10 	vmov	sl, s0
 800f3b0:	463d      	mov	r5, r7
 800f3b2:	dc06      	bgt.n	800f3c2 <__ieee754_pow+0x6a>
 800f3b4:	d101      	bne.n	800f3ba <__ieee754_pow+0x62>
 800f3b6:	2e00      	cmp	r6, #0
 800f3b8:	d1e7      	bne.n	800f38a <__ieee754_pow+0x32>
 800f3ba:	4598      	cmp	r8, r3
 800f3bc:	dc01      	bgt.n	800f3c2 <__ieee754_pow+0x6a>
 800f3be:	d10f      	bne.n	800f3e0 <__ieee754_pow+0x88>
 800f3c0:	b172      	cbz	r2, 800f3e0 <__ieee754_pow+0x88>
 800f3c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f3c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f3ca:	ea55 050a 	orrs.w	r5, r5, sl
 800f3ce:	d1dc      	bne.n	800f38a <__ieee754_pow+0x32>
 800f3d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f3d4:	18db      	adds	r3, r3, r3
 800f3d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f3da:	4152      	adcs	r2, r2
 800f3dc:	429d      	cmp	r5, r3
 800f3de:	e7d0      	b.n	800f382 <__ieee754_pow+0x2a>
 800f3e0:	2d00      	cmp	r5, #0
 800f3e2:	da3b      	bge.n	800f45c <__ieee754_pow+0x104>
 800f3e4:	4b72      	ldr	r3, [pc, #456]	; (800f5b0 <__ieee754_pow+0x258>)
 800f3e6:	4598      	cmp	r8, r3
 800f3e8:	dc51      	bgt.n	800f48e <__ieee754_pow+0x136>
 800f3ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f3ee:	4598      	cmp	r8, r3
 800f3f0:	f340 84ac 	ble.w	800fd4c <__ieee754_pow+0x9f4>
 800f3f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f3f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f3fc:	2b14      	cmp	r3, #20
 800f3fe:	dd0f      	ble.n	800f420 <__ieee754_pow+0xc8>
 800f400:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f404:	fa22 f103 	lsr.w	r1, r2, r3
 800f408:	fa01 f303 	lsl.w	r3, r1, r3
 800f40c:	4293      	cmp	r3, r2
 800f40e:	f040 849d 	bne.w	800fd4c <__ieee754_pow+0x9f4>
 800f412:	f001 0101 	and.w	r1, r1, #1
 800f416:	f1c1 0302 	rsb	r3, r1, #2
 800f41a:	9304      	str	r3, [sp, #16]
 800f41c:	b182      	cbz	r2, 800f440 <__ieee754_pow+0xe8>
 800f41e:	e05f      	b.n	800f4e0 <__ieee754_pow+0x188>
 800f420:	2a00      	cmp	r2, #0
 800f422:	d15b      	bne.n	800f4dc <__ieee754_pow+0x184>
 800f424:	f1c3 0314 	rsb	r3, r3, #20
 800f428:	fa48 f103 	asr.w	r1, r8, r3
 800f42c:	fa01 f303 	lsl.w	r3, r1, r3
 800f430:	4543      	cmp	r3, r8
 800f432:	f040 8488 	bne.w	800fd46 <__ieee754_pow+0x9ee>
 800f436:	f001 0101 	and.w	r1, r1, #1
 800f43a:	f1c1 0302 	rsb	r3, r1, #2
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	4b5c      	ldr	r3, [pc, #368]	; (800f5b4 <__ieee754_pow+0x25c>)
 800f442:	4598      	cmp	r8, r3
 800f444:	d132      	bne.n	800f4ac <__ieee754_pow+0x154>
 800f446:	f1b9 0f00 	cmp.w	r9, #0
 800f44a:	f280 8478 	bge.w	800fd3e <__ieee754_pow+0x9e6>
 800f44e:	4959      	ldr	r1, [pc, #356]	; (800f5b4 <__ieee754_pow+0x25c>)
 800f450:	4632      	mov	r2, r6
 800f452:	463b      	mov	r3, r7
 800f454:	2000      	movs	r0, #0
 800f456:	f7f1 fa01 	bl	800085c <__aeabi_ddiv>
 800f45a:	e79c      	b.n	800f396 <__ieee754_pow+0x3e>
 800f45c:	2300      	movs	r3, #0
 800f45e:	9304      	str	r3, [sp, #16]
 800f460:	2a00      	cmp	r2, #0
 800f462:	d13d      	bne.n	800f4e0 <__ieee754_pow+0x188>
 800f464:	4b51      	ldr	r3, [pc, #324]	; (800f5ac <__ieee754_pow+0x254>)
 800f466:	4598      	cmp	r8, r3
 800f468:	d1ea      	bne.n	800f440 <__ieee754_pow+0xe8>
 800f46a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f46e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f472:	ea53 030a 	orrs.w	r3, r3, sl
 800f476:	f000 845a 	beq.w	800fd2e <__ieee754_pow+0x9d6>
 800f47a:	4b4f      	ldr	r3, [pc, #316]	; (800f5b8 <__ieee754_pow+0x260>)
 800f47c:	429c      	cmp	r4, r3
 800f47e:	dd08      	ble.n	800f492 <__ieee754_pow+0x13a>
 800f480:	f1b9 0f00 	cmp.w	r9, #0
 800f484:	f2c0 8457 	blt.w	800fd36 <__ieee754_pow+0x9de>
 800f488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f48c:	e783      	b.n	800f396 <__ieee754_pow+0x3e>
 800f48e:	2302      	movs	r3, #2
 800f490:	e7e5      	b.n	800f45e <__ieee754_pow+0x106>
 800f492:	f1b9 0f00 	cmp.w	r9, #0
 800f496:	f04f 0000 	mov.w	r0, #0
 800f49a:	f04f 0100 	mov.w	r1, #0
 800f49e:	f6bf af7a 	bge.w	800f396 <__ieee754_pow+0x3e>
 800f4a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f4a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4aa:	e774      	b.n	800f396 <__ieee754_pow+0x3e>
 800f4ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f4b0:	d106      	bne.n	800f4c0 <__ieee754_pow+0x168>
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	463b      	mov	r3, r7
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	4639      	mov	r1, r7
 800f4ba:	f7f1 f8a5 	bl	8000608 <__aeabi_dmul>
 800f4be:	e76a      	b.n	800f396 <__ieee754_pow+0x3e>
 800f4c0:	4b3e      	ldr	r3, [pc, #248]	; (800f5bc <__ieee754_pow+0x264>)
 800f4c2:	4599      	cmp	r9, r3
 800f4c4:	d10c      	bne.n	800f4e0 <__ieee754_pow+0x188>
 800f4c6:	2d00      	cmp	r5, #0
 800f4c8:	db0a      	blt.n	800f4e0 <__ieee754_pow+0x188>
 800f4ca:	ec47 6b10 	vmov	d0, r6, r7
 800f4ce:	b009      	add	sp, #36	; 0x24
 800f4d0:	ecbd 8b06 	vpop	{d8-d10}
 800f4d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d8:	f000 bc6c 	b.w	800fdb4 <__ieee754_sqrt>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	ec47 6b10 	vmov	d0, r6, r7
 800f4e4:	f000 fd48 	bl	800ff78 <fabs>
 800f4e8:	ec51 0b10 	vmov	r0, r1, d0
 800f4ec:	f1ba 0f00 	cmp.w	sl, #0
 800f4f0:	d129      	bne.n	800f546 <__ieee754_pow+0x1ee>
 800f4f2:	b124      	cbz	r4, 800f4fe <__ieee754_pow+0x1a6>
 800f4f4:	4b2f      	ldr	r3, [pc, #188]	; (800f5b4 <__ieee754_pow+0x25c>)
 800f4f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d123      	bne.n	800f546 <__ieee754_pow+0x1ee>
 800f4fe:	f1b9 0f00 	cmp.w	r9, #0
 800f502:	da05      	bge.n	800f510 <__ieee754_pow+0x1b8>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	2000      	movs	r0, #0
 800f50a:	492a      	ldr	r1, [pc, #168]	; (800f5b4 <__ieee754_pow+0x25c>)
 800f50c:	f7f1 f9a6 	bl	800085c <__aeabi_ddiv>
 800f510:	2d00      	cmp	r5, #0
 800f512:	f6bf af40 	bge.w	800f396 <__ieee754_pow+0x3e>
 800f516:	9b04      	ldr	r3, [sp, #16]
 800f518:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f51c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f520:	4323      	orrs	r3, r4
 800f522:	d108      	bne.n	800f536 <__ieee754_pow+0x1de>
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4610      	mov	r0, r2
 800f52a:	4619      	mov	r1, r3
 800f52c:	f7f0 feb4 	bl	8000298 <__aeabi_dsub>
 800f530:	4602      	mov	r2, r0
 800f532:	460b      	mov	r3, r1
 800f534:	e78f      	b.n	800f456 <__ieee754_pow+0xfe>
 800f536:	9b04      	ldr	r3, [sp, #16]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	f47f af2c 	bne.w	800f396 <__ieee754_pow+0x3e>
 800f53e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f542:	4619      	mov	r1, r3
 800f544:	e727      	b.n	800f396 <__ieee754_pow+0x3e>
 800f546:	0feb      	lsrs	r3, r5, #31
 800f548:	3b01      	subs	r3, #1
 800f54a:	9306      	str	r3, [sp, #24]
 800f54c:	9a06      	ldr	r2, [sp, #24]
 800f54e:	9b04      	ldr	r3, [sp, #16]
 800f550:	4313      	orrs	r3, r2
 800f552:	d102      	bne.n	800f55a <__ieee754_pow+0x202>
 800f554:	4632      	mov	r2, r6
 800f556:	463b      	mov	r3, r7
 800f558:	e7e6      	b.n	800f528 <__ieee754_pow+0x1d0>
 800f55a:	4b19      	ldr	r3, [pc, #100]	; (800f5c0 <__ieee754_pow+0x268>)
 800f55c:	4598      	cmp	r8, r3
 800f55e:	f340 80fb 	ble.w	800f758 <__ieee754_pow+0x400>
 800f562:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f566:	4598      	cmp	r8, r3
 800f568:	4b13      	ldr	r3, [pc, #76]	; (800f5b8 <__ieee754_pow+0x260>)
 800f56a:	dd0c      	ble.n	800f586 <__ieee754_pow+0x22e>
 800f56c:	429c      	cmp	r4, r3
 800f56e:	dc0f      	bgt.n	800f590 <__ieee754_pow+0x238>
 800f570:	f1b9 0f00 	cmp.w	r9, #0
 800f574:	da0f      	bge.n	800f596 <__ieee754_pow+0x23e>
 800f576:	2000      	movs	r0, #0
 800f578:	b009      	add	sp, #36	; 0x24
 800f57a:	ecbd 8b06 	vpop	{d8-d10}
 800f57e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f582:	f000 bcf0 	b.w	800ff66 <__math_oflow>
 800f586:	429c      	cmp	r4, r3
 800f588:	dbf2      	blt.n	800f570 <__ieee754_pow+0x218>
 800f58a:	4b0a      	ldr	r3, [pc, #40]	; (800f5b4 <__ieee754_pow+0x25c>)
 800f58c:	429c      	cmp	r4, r3
 800f58e:	dd19      	ble.n	800f5c4 <__ieee754_pow+0x26c>
 800f590:	f1b9 0f00 	cmp.w	r9, #0
 800f594:	dcef      	bgt.n	800f576 <__ieee754_pow+0x21e>
 800f596:	2000      	movs	r0, #0
 800f598:	b009      	add	sp, #36	; 0x24
 800f59a:	ecbd 8b06 	vpop	{d8-d10}
 800f59e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a2:	f000 bcd7 	b.w	800ff54 <__math_uflow>
 800f5a6:	bf00      	nop
 800f5a8:	fff00000 	.word	0xfff00000
 800f5ac:	7ff00000 	.word	0x7ff00000
 800f5b0:	433fffff 	.word	0x433fffff
 800f5b4:	3ff00000 	.word	0x3ff00000
 800f5b8:	3fefffff 	.word	0x3fefffff
 800f5bc:	3fe00000 	.word	0x3fe00000
 800f5c0:	41e00000 	.word	0x41e00000
 800f5c4:	4b60      	ldr	r3, [pc, #384]	; (800f748 <__ieee754_pow+0x3f0>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f7f0 fe66 	bl	8000298 <__aeabi_dsub>
 800f5cc:	a354      	add	r3, pc, #336	; (adr r3, 800f720 <__ieee754_pow+0x3c8>)
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	460d      	mov	r5, r1
 800f5d6:	f7f1 f817 	bl	8000608 <__aeabi_dmul>
 800f5da:	a353      	add	r3, pc, #332	; (adr r3, 800f728 <__ieee754_pow+0x3d0>)
 800f5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e0:	4606      	mov	r6, r0
 800f5e2:	460f      	mov	r7, r1
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	f7f1 f80e 	bl	8000608 <__aeabi_dmul>
 800f5ec:	4b57      	ldr	r3, [pc, #348]	; (800f74c <__ieee754_pow+0x3f4>)
 800f5ee:	4682      	mov	sl, r0
 800f5f0:	468b      	mov	fp, r1
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	4629      	mov	r1, r5
 800f5f8:	f7f1 f806 	bl	8000608 <__aeabi_dmul>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	a14b      	add	r1, pc, #300	; (adr r1, 800f730 <__ieee754_pow+0x3d8>)
 800f602:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f606:	f7f0 fe47 	bl	8000298 <__aeabi_dsub>
 800f60a:	4622      	mov	r2, r4
 800f60c:	462b      	mov	r3, r5
 800f60e:	f7f0 fffb 	bl	8000608 <__aeabi_dmul>
 800f612:	4602      	mov	r2, r0
 800f614:	460b      	mov	r3, r1
 800f616:	2000      	movs	r0, #0
 800f618:	494d      	ldr	r1, [pc, #308]	; (800f750 <__ieee754_pow+0x3f8>)
 800f61a:	f7f0 fe3d 	bl	8000298 <__aeabi_dsub>
 800f61e:	4622      	mov	r2, r4
 800f620:	4680      	mov	r8, r0
 800f622:	4689      	mov	r9, r1
 800f624:	462b      	mov	r3, r5
 800f626:	4620      	mov	r0, r4
 800f628:	4629      	mov	r1, r5
 800f62a:	f7f0 ffed 	bl	8000608 <__aeabi_dmul>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	4640      	mov	r0, r8
 800f634:	4649      	mov	r1, r9
 800f636:	f7f0 ffe7 	bl	8000608 <__aeabi_dmul>
 800f63a:	a33f      	add	r3, pc, #252	; (adr r3, 800f738 <__ieee754_pow+0x3e0>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	f7f0 ffe2 	bl	8000608 <__aeabi_dmul>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f0 fe24 	bl	8000298 <__aeabi_dsub>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	4680      	mov	r8, r0
 800f656:	4689      	mov	r9, r1
 800f658:	4630      	mov	r0, r6
 800f65a:	4639      	mov	r1, r7
 800f65c:	f7f0 fe1e 	bl	800029c <__adddf3>
 800f660:	2000      	movs	r0, #0
 800f662:	4632      	mov	r2, r6
 800f664:	463b      	mov	r3, r7
 800f666:	4604      	mov	r4, r0
 800f668:	460d      	mov	r5, r1
 800f66a:	f7f0 fe15 	bl	8000298 <__aeabi_dsub>
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	4640      	mov	r0, r8
 800f674:	4649      	mov	r1, r9
 800f676:	f7f0 fe0f 	bl	8000298 <__aeabi_dsub>
 800f67a:	9b04      	ldr	r3, [sp, #16]
 800f67c:	9a06      	ldr	r2, [sp, #24]
 800f67e:	3b01      	subs	r3, #1
 800f680:	4313      	orrs	r3, r2
 800f682:	4682      	mov	sl, r0
 800f684:	468b      	mov	fp, r1
 800f686:	f040 81e7 	bne.w	800fa58 <__ieee754_pow+0x700>
 800f68a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f740 <__ieee754_pow+0x3e8>
 800f68e:	eeb0 8a47 	vmov.f32	s16, s14
 800f692:	eef0 8a67 	vmov.f32	s17, s15
 800f696:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f69a:	2600      	movs	r6, #0
 800f69c:	4632      	mov	r2, r6
 800f69e:	463b      	mov	r3, r7
 800f6a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6a4:	f7f0 fdf8 	bl	8000298 <__aeabi_dsub>
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	462b      	mov	r3, r5
 800f6ac:	f7f0 ffac 	bl	8000608 <__aeabi_dmul>
 800f6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b4:	4680      	mov	r8, r0
 800f6b6:	4689      	mov	r9, r1
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	4659      	mov	r1, fp
 800f6bc:	f7f0 ffa4 	bl	8000608 <__aeabi_dmul>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4640      	mov	r0, r8
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	f7f0 fde8 	bl	800029c <__adddf3>
 800f6cc:	4632      	mov	r2, r6
 800f6ce:	463b      	mov	r3, r7
 800f6d0:	4680      	mov	r8, r0
 800f6d2:	4689      	mov	r9, r1
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	f7f0 ff96 	bl	8000608 <__aeabi_dmul>
 800f6dc:	460b      	mov	r3, r1
 800f6de:	4604      	mov	r4, r0
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	4649      	mov	r1, r9
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f7f0 fdd8 	bl	800029c <__adddf3>
 800f6ec:	4b19      	ldr	r3, [pc, #100]	; (800f754 <__ieee754_pow+0x3fc>)
 800f6ee:	4299      	cmp	r1, r3
 800f6f0:	ec45 4b19 	vmov	d9, r4, r5
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460f      	mov	r7, r1
 800f6f8:	468b      	mov	fp, r1
 800f6fa:	f340 82f1 	ble.w	800fce0 <__ieee754_pow+0x988>
 800f6fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f702:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f706:	4303      	orrs	r3, r0
 800f708:	f000 81e4 	beq.w	800fad4 <__ieee754_pow+0x77c>
 800f70c:	ec51 0b18 	vmov	r0, r1, d8
 800f710:	2200      	movs	r2, #0
 800f712:	2300      	movs	r3, #0
 800f714:	f7f1 f9ea 	bl	8000aec <__aeabi_dcmplt>
 800f718:	3800      	subs	r0, #0
 800f71a:	bf18      	it	ne
 800f71c:	2001      	movne	r0, #1
 800f71e:	e72b      	b.n	800f578 <__ieee754_pow+0x220>
 800f720:	60000000 	.word	0x60000000
 800f724:	3ff71547 	.word	0x3ff71547
 800f728:	f85ddf44 	.word	0xf85ddf44
 800f72c:	3e54ae0b 	.word	0x3e54ae0b
 800f730:	55555555 	.word	0x55555555
 800f734:	3fd55555 	.word	0x3fd55555
 800f738:	652b82fe 	.word	0x652b82fe
 800f73c:	3ff71547 	.word	0x3ff71547
 800f740:	00000000 	.word	0x00000000
 800f744:	bff00000 	.word	0xbff00000
 800f748:	3ff00000 	.word	0x3ff00000
 800f74c:	3fd00000 	.word	0x3fd00000
 800f750:	3fe00000 	.word	0x3fe00000
 800f754:	408fffff 	.word	0x408fffff
 800f758:	4bd5      	ldr	r3, [pc, #852]	; (800fab0 <__ieee754_pow+0x758>)
 800f75a:	402b      	ands	r3, r5
 800f75c:	2200      	movs	r2, #0
 800f75e:	b92b      	cbnz	r3, 800f76c <__ieee754_pow+0x414>
 800f760:	4bd4      	ldr	r3, [pc, #848]	; (800fab4 <__ieee754_pow+0x75c>)
 800f762:	f7f0 ff51 	bl	8000608 <__aeabi_dmul>
 800f766:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f76a:	460c      	mov	r4, r1
 800f76c:	1523      	asrs	r3, r4, #20
 800f76e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f772:	4413      	add	r3, r2
 800f774:	9305      	str	r3, [sp, #20]
 800f776:	4bd0      	ldr	r3, [pc, #832]	; (800fab8 <__ieee754_pow+0x760>)
 800f778:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f77c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f780:	429c      	cmp	r4, r3
 800f782:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f786:	dd08      	ble.n	800f79a <__ieee754_pow+0x442>
 800f788:	4bcc      	ldr	r3, [pc, #816]	; (800fabc <__ieee754_pow+0x764>)
 800f78a:	429c      	cmp	r4, r3
 800f78c:	f340 8162 	ble.w	800fa54 <__ieee754_pow+0x6fc>
 800f790:	9b05      	ldr	r3, [sp, #20]
 800f792:	3301      	adds	r3, #1
 800f794:	9305      	str	r3, [sp, #20]
 800f796:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f79a:	2400      	movs	r4, #0
 800f79c:	00e3      	lsls	r3, r4, #3
 800f79e:	9307      	str	r3, [sp, #28]
 800f7a0:	4bc7      	ldr	r3, [pc, #796]	; (800fac0 <__ieee754_pow+0x768>)
 800f7a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7a6:	ed93 7b00 	vldr	d7, [r3]
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	ec53 2b17 	vmov	r2, r3, d7
 800f7b0:	eeb0 9a47 	vmov.f32	s18, s14
 800f7b4:	eef0 9a67 	vmov.f32	s19, s15
 800f7b8:	4682      	mov	sl, r0
 800f7ba:	f7f0 fd6d 	bl	8000298 <__aeabi_dsub>
 800f7be:	4652      	mov	r2, sl
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	460f      	mov	r7, r1
 800f7c4:	462b      	mov	r3, r5
 800f7c6:	ec51 0b19 	vmov	r0, r1, d9
 800f7ca:	f7f0 fd67 	bl	800029c <__adddf3>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	49bb      	ldr	r1, [pc, #748]	; (800fac4 <__ieee754_pow+0x76c>)
 800f7d6:	f7f1 f841 	bl	800085c <__aeabi_ddiv>
 800f7da:	ec41 0b1a 	vmov	d10, r0, r1
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	4639      	mov	r1, r7
 800f7e6:	f7f0 ff0f 	bl	8000608 <__aeabi_dmul>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f7f6:	46ab      	mov	fp, r5
 800f7f8:	106d      	asrs	r5, r5, #1
 800f7fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f7fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f802:	ec41 0b18 	vmov	d8, r0, r1
 800f806:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f80a:	2200      	movs	r2, #0
 800f80c:	4640      	mov	r0, r8
 800f80e:	4649      	mov	r1, r9
 800f810:	4614      	mov	r4, r2
 800f812:	461d      	mov	r5, r3
 800f814:	f7f0 fef8 	bl	8000608 <__aeabi_dmul>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4630      	mov	r0, r6
 800f81e:	4639      	mov	r1, r7
 800f820:	f7f0 fd3a 	bl	8000298 <__aeabi_dsub>
 800f824:	ec53 2b19 	vmov	r2, r3, d9
 800f828:	4606      	mov	r6, r0
 800f82a:	460f      	mov	r7, r1
 800f82c:	4620      	mov	r0, r4
 800f82e:	4629      	mov	r1, r5
 800f830:	f7f0 fd32 	bl	8000298 <__aeabi_dsub>
 800f834:	4602      	mov	r2, r0
 800f836:	460b      	mov	r3, r1
 800f838:	4650      	mov	r0, sl
 800f83a:	4659      	mov	r1, fp
 800f83c:	f7f0 fd2c 	bl	8000298 <__aeabi_dsub>
 800f840:	4642      	mov	r2, r8
 800f842:	464b      	mov	r3, r9
 800f844:	f7f0 fee0 	bl	8000608 <__aeabi_dmul>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f0 fd22 	bl	8000298 <__aeabi_dsub>
 800f854:	ec53 2b1a 	vmov	r2, r3, d10
 800f858:	f7f0 fed6 	bl	8000608 <__aeabi_dmul>
 800f85c:	ec53 2b18 	vmov	r2, r3, d8
 800f860:	ec41 0b19 	vmov	d9, r0, r1
 800f864:	ec51 0b18 	vmov	r0, r1, d8
 800f868:	f7f0 fece 	bl	8000608 <__aeabi_dmul>
 800f86c:	a37c      	add	r3, pc, #496	; (adr r3, 800fa60 <__ieee754_pow+0x708>)
 800f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f872:	4604      	mov	r4, r0
 800f874:	460d      	mov	r5, r1
 800f876:	f7f0 fec7 	bl	8000608 <__aeabi_dmul>
 800f87a:	a37b      	add	r3, pc, #492	; (adr r3, 800fa68 <__ieee754_pow+0x710>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	f7f0 fd0c 	bl	800029c <__adddf3>
 800f884:	4622      	mov	r2, r4
 800f886:	462b      	mov	r3, r5
 800f888:	f7f0 febe 	bl	8000608 <__aeabi_dmul>
 800f88c:	a378      	add	r3, pc, #480	; (adr r3, 800fa70 <__ieee754_pow+0x718>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 fd03 	bl	800029c <__adddf3>
 800f896:	4622      	mov	r2, r4
 800f898:	462b      	mov	r3, r5
 800f89a:	f7f0 feb5 	bl	8000608 <__aeabi_dmul>
 800f89e:	a376      	add	r3, pc, #472	; (adr r3, 800fa78 <__ieee754_pow+0x720>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f7f0 fcfa 	bl	800029c <__adddf3>
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	462b      	mov	r3, r5
 800f8ac:	f7f0 feac 	bl	8000608 <__aeabi_dmul>
 800f8b0:	a373      	add	r3, pc, #460	; (adr r3, 800fa80 <__ieee754_pow+0x728>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f7f0 fcf1 	bl	800029c <__adddf3>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	f7f0 fea3 	bl	8000608 <__aeabi_dmul>
 800f8c2:	a371      	add	r3, pc, #452	; (adr r3, 800fa88 <__ieee754_pow+0x730>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f7f0 fce8 	bl	800029c <__adddf3>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fe96 	bl	8000608 <__aeabi_dmul>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	f7f0 fe90 	bl	8000608 <__aeabi_dmul>
 800f8e8:	4642      	mov	r2, r8
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	460d      	mov	r5, r1
 800f8ee:	464b      	mov	r3, r9
 800f8f0:	ec51 0b18 	vmov	r0, r1, d8
 800f8f4:	f7f0 fcd2 	bl	800029c <__adddf3>
 800f8f8:	ec53 2b19 	vmov	r2, r3, d9
 800f8fc:	f7f0 fe84 	bl	8000608 <__aeabi_dmul>
 800f900:	4622      	mov	r2, r4
 800f902:	462b      	mov	r3, r5
 800f904:	f7f0 fcca 	bl	800029c <__adddf3>
 800f908:	4642      	mov	r2, r8
 800f90a:	4682      	mov	sl, r0
 800f90c:	468b      	mov	fp, r1
 800f90e:	464b      	mov	r3, r9
 800f910:	4640      	mov	r0, r8
 800f912:	4649      	mov	r1, r9
 800f914:	f7f0 fe78 	bl	8000608 <__aeabi_dmul>
 800f918:	4b6b      	ldr	r3, [pc, #428]	; (800fac8 <__ieee754_pow+0x770>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	4606      	mov	r6, r0
 800f91e:	460f      	mov	r7, r1
 800f920:	f7f0 fcbc 	bl	800029c <__adddf3>
 800f924:	4652      	mov	r2, sl
 800f926:	465b      	mov	r3, fp
 800f928:	f7f0 fcb8 	bl	800029c <__adddf3>
 800f92c:	2000      	movs	r0, #0
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	4602      	mov	r2, r0
 800f934:	460b      	mov	r3, r1
 800f936:	4640      	mov	r0, r8
 800f938:	4649      	mov	r1, r9
 800f93a:	f7f0 fe65 	bl	8000608 <__aeabi_dmul>
 800f93e:	4b62      	ldr	r3, [pc, #392]	; (800fac8 <__ieee754_pow+0x770>)
 800f940:	4680      	mov	r8, r0
 800f942:	4689      	mov	r9, r1
 800f944:	2200      	movs	r2, #0
 800f946:	4620      	mov	r0, r4
 800f948:	4629      	mov	r1, r5
 800f94a:	f7f0 fca5 	bl	8000298 <__aeabi_dsub>
 800f94e:	4632      	mov	r2, r6
 800f950:	463b      	mov	r3, r7
 800f952:	f7f0 fca1 	bl	8000298 <__aeabi_dsub>
 800f956:	4602      	mov	r2, r0
 800f958:	460b      	mov	r3, r1
 800f95a:	4650      	mov	r0, sl
 800f95c:	4659      	mov	r1, fp
 800f95e:	f7f0 fc9b 	bl	8000298 <__aeabi_dsub>
 800f962:	ec53 2b18 	vmov	r2, r3, d8
 800f966:	f7f0 fe4f 	bl	8000608 <__aeabi_dmul>
 800f96a:	4622      	mov	r2, r4
 800f96c:	4606      	mov	r6, r0
 800f96e:	460f      	mov	r7, r1
 800f970:	462b      	mov	r3, r5
 800f972:	ec51 0b19 	vmov	r0, r1, d9
 800f976:	f7f0 fe47 	bl	8000608 <__aeabi_dmul>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	4630      	mov	r0, r6
 800f980:	4639      	mov	r1, r7
 800f982:	f7f0 fc8b 	bl	800029c <__adddf3>
 800f986:	4606      	mov	r6, r0
 800f988:	460f      	mov	r7, r1
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	4640      	mov	r0, r8
 800f990:	4649      	mov	r1, r9
 800f992:	f7f0 fc83 	bl	800029c <__adddf3>
 800f996:	a33e      	add	r3, pc, #248	; (adr r3, 800fa90 <__ieee754_pow+0x738>)
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	2000      	movs	r0, #0
 800f99e:	4604      	mov	r4, r0
 800f9a0:	460d      	mov	r5, r1
 800f9a2:	f7f0 fe31 	bl	8000608 <__aeabi_dmul>
 800f9a6:	4642      	mov	r2, r8
 800f9a8:	ec41 0b18 	vmov	d8, r0, r1
 800f9ac:	464b      	mov	r3, r9
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	f7f0 fc71 	bl	8000298 <__aeabi_dsub>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	4639      	mov	r1, r7
 800f9be:	f7f0 fc6b 	bl	8000298 <__aeabi_dsub>
 800f9c2:	a335      	add	r3, pc, #212	; (adr r3, 800fa98 <__ieee754_pow+0x740>)
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	f7f0 fe1e 	bl	8000608 <__aeabi_dmul>
 800f9cc:	a334      	add	r3, pc, #208	; (adr r3, 800faa0 <__ieee754_pow+0x748>)
 800f9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460f      	mov	r7, r1
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	4629      	mov	r1, r5
 800f9da:	f7f0 fe15 	bl	8000608 <__aeabi_dmul>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f0 fc59 	bl	800029c <__adddf3>
 800f9ea:	9a07      	ldr	r2, [sp, #28]
 800f9ec:	4b37      	ldr	r3, [pc, #220]	; (800facc <__ieee754_pow+0x774>)
 800f9ee:	4413      	add	r3, r2
 800f9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f4:	f7f0 fc52 	bl	800029c <__adddf3>
 800f9f8:	4682      	mov	sl, r0
 800f9fa:	9805      	ldr	r0, [sp, #20]
 800f9fc:	468b      	mov	fp, r1
 800f9fe:	f7f0 fd99 	bl	8000534 <__aeabi_i2d>
 800fa02:	9a07      	ldr	r2, [sp, #28]
 800fa04:	4b32      	ldr	r3, [pc, #200]	; (800fad0 <__ieee754_pow+0x778>)
 800fa06:	4413      	add	r3, r2
 800fa08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	460f      	mov	r7, r1
 800fa10:	4652      	mov	r2, sl
 800fa12:	465b      	mov	r3, fp
 800fa14:	ec51 0b18 	vmov	r0, r1, d8
 800fa18:	f7f0 fc40 	bl	800029c <__adddf3>
 800fa1c:	4642      	mov	r2, r8
 800fa1e:	464b      	mov	r3, r9
 800fa20:	f7f0 fc3c 	bl	800029c <__adddf3>
 800fa24:	4632      	mov	r2, r6
 800fa26:	463b      	mov	r3, r7
 800fa28:	f7f0 fc38 	bl	800029c <__adddf3>
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	4632      	mov	r2, r6
 800fa30:	463b      	mov	r3, r7
 800fa32:	4604      	mov	r4, r0
 800fa34:	460d      	mov	r5, r1
 800fa36:	f7f0 fc2f 	bl	8000298 <__aeabi_dsub>
 800fa3a:	4642      	mov	r2, r8
 800fa3c:	464b      	mov	r3, r9
 800fa3e:	f7f0 fc2b 	bl	8000298 <__aeabi_dsub>
 800fa42:	ec53 2b18 	vmov	r2, r3, d8
 800fa46:	f7f0 fc27 	bl	8000298 <__aeabi_dsub>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4650      	mov	r0, sl
 800fa50:	4659      	mov	r1, fp
 800fa52:	e610      	b.n	800f676 <__ieee754_pow+0x31e>
 800fa54:	2401      	movs	r4, #1
 800fa56:	e6a1      	b.n	800f79c <__ieee754_pow+0x444>
 800fa58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800faa8 <__ieee754_pow+0x750>
 800fa5c:	e617      	b.n	800f68e <__ieee754_pow+0x336>
 800fa5e:	bf00      	nop
 800fa60:	4a454eef 	.word	0x4a454eef
 800fa64:	3fca7e28 	.word	0x3fca7e28
 800fa68:	93c9db65 	.word	0x93c9db65
 800fa6c:	3fcd864a 	.word	0x3fcd864a
 800fa70:	a91d4101 	.word	0xa91d4101
 800fa74:	3fd17460 	.word	0x3fd17460
 800fa78:	518f264d 	.word	0x518f264d
 800fa7c:	3fd55555 	.word	0x3fd55555
 800fa80:	db6fabff 	.word	0xdb6fabff
 800fa84:	3fdb6db6 	.word	0x3fdb6db6
 800fa88:	33333303 	.word	0x33333303
 800fa8c:	3fe33333 	.word	0x3fe33333
 800fa90:	e0000000 	.word	0xe0000000
 800fa94:	3feec709 	.word	0x3feec709
 800fa98:	dc3a03fd 	.word	0xdc3a03fd
 800fa9c:	3feec709 	.word	0x3feec709
 800faa0:	145b01f5 	.word	0x145b01f5
 800faa4:	be3e2fe0 	.word	0xbe3e2fe0
 800faa8:	00000000 	.word	0x00000000
 800faac:	3ff00000 	.word	0x3ff00000
 800fab0:	7ff00000 	.word	0x7ff00000
 800fab4:	43400000 	.word	0x43400000
 800fab8:	0003988e 	.word	0x0003988e
 800fabc:	000bb679 	.word	0x000bb679
 800fac0:	08010560 	.word	0x08010560
 800fac4:	3ff00000 	.word	0x3ff00000
 800fac8:	40080000 	.word	0x40080000
 800facc:	08010580 	.word	0x08010580
 800fad0:	08010570 	.word	0x08010570
 800fad4:	a3b5      	add	r3, pc, #724	; (adr r3, 800fdac <__ieee754_pow+0xa54>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	4640      	mov	r0, r8
 800fadc:	4649      	mov	r1, r9
 800fade:	f7f0 fbdd 	bl	800029c <__adddf3>
 800fae2:	4622      	mov	r2, r4
 800fae4:	ec41 0b1a 	vmov	d10, r0, r1
 800fae8:	462b      	mov	r3, r5
 800faea:	4630      	mov	r0, r6
 800faec:	4639      	mov	r1, r7
 800faee:	f7f0 fbd3 	bl	8000298 <__aeabi_dsub>
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	ec51 0b1a 	vmov	r0, r1, d10
 800fafa:	f7f1 f815 	bl	8000b28 <__aeabi_dcmpgt>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	f47f ae04 	bne.w	800f70c <__ieee754_pow+0x3b4>
 800fb04:	4aa4      	ldr	r2, [pc, #656]	; (800fd98 <__ieee754_pow+0xa40>)
 800fb06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	f340 8108 	ble.w	800fd20 <__ieee754_pow+0x9c8>
 800fb10:	151b      	asrs	r3, r3, #20
 800fb12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fb16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fb1a:	fa4a f303 	asr.w	r3, sl, r3
 800fb1e:	445b      	add	r3, fp
 800fb20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fb24:	4e9d      	ldr	r6, [pc, #628]	; (800fd9c <__ieee754_pow+0xa44>)
 800fb26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fb2a:	4116      	asrs	r6, r2
 800fb2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fb30:	2000      	movs	r0, #0
 800fb32:	ea23 0106 	bic.w	r1, r3, r6
 800fb36:	f1c2 0214 	rsb	r2, r2, #20
 800fb3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fb3e:	fa4a fa02 	asr.w	sl, sl, r2
 800fb42:	f1bb 0f00 	cmp.w	fp, #0
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	bfb8      	it	lt
 800fb50:	f1ca 0a00 	rsblt	sl, sl, #0
 800fb54:	f7f0 fba0 	bl	8000298 <__aeabi_dsub>
 800fb58:	ec41 0b19 	vmov	d9, r0, r1
 800fb5c:	4642      	mov	r2, r8
 800fb5e:	464b      	mov	r3, r9
 800fb60:	ec51 0b19 	vmov	r0, r1, d9
 800fb64:	f7f0 fb9a 	bl	800029c <__adddf3>
 800fb68:	a37b      	add	r3, pc, #492	; (adr r3, 800fd58 <__ieee754_pow+0xa00>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	2000      	movs	r0, #0
 800fb70:	4604      	mov	r4, r0
 800fb72:	460d      	mov	r5, r1
 800fb74:	f7f0 fd48 	bl	8000608 <__aeabi_dmul>
 800fb78:	ec53 2b19 	vmov	r2, r3, d9
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	460f      	mov	r7, r1
 800fb80:	4620      	mov	r0, r4
 800fb82:	4629      	mov	r1, r5
 800fb84:	f7f0 fb88 	bl	8000298 <__aeabi_dsub>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	4649      	mov	r1, r9
 800fb90:	f7f0 fb82 	bl	8000298 <__aeabi_dsub>
 800fb94:	a372      	add	r3, pc, #456	; (adr r3, 800fd60 <__ieee754_pow+0xa08>)
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	f7f0 fd35 	bl	8000608 <__aeabi_dmul>
 800fb9e:	a372      	add	r3, pc, #456	; (adr r3, 800fd68 <__ieee754_pow+0xa10>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	4680      	mov	r8, r0
 800fba6:	4689      	mov	r9, r1
 800fba8:	4620      	mov	r0, r4
 800fbaa:	4629      	mov	r1, r5
 800fbac:	f7f0 fd2c 	bl	8000608 <__aeabi_dmul>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	f7f0 fb70 	bl	800029c <__adddf3>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	460d      	mov	r5, r1
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	f7f0 fb68 	bl	800029c <__adddf3>
 800fbcc:	4632      	mov	r2, r6
 800fbce:	463b      	mov	r3, r7
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	4689      	mov	r9, r1
 800fbd4:	f7f0 fb60 	bl	8000298 <__aeabi_dsub>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	460b      	mov	r3, r1
 800fbdc:	4620      	mov	r0, r4
 800fbde:	4629      	mov	r1, r5
 800fbe0:	f7f0 fb5a 	bl	8000298 <__aeabi_dsub>
 800fbe4:	4642      	mov	r2, r8
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	460f      	mov	r7, r1
 800fbea:	464b      	mov	r3, r9
 800fbec:	4640      	mov	r0, r8
 800fbee:	4649      	mov	r1, r9
 800fbf0:	f7f0 fd0a 	bl	8000608 <__aeabi_dmul>
 800fbf4:	a35e      	add	r3, pc, #376	; (adr r3, 800fd70 <__ieee754_pow+0xa18>)
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	460d      	mov	r5, r1
 800fbfe:	f7f0 fd03 	bl	8000608 <__aeabi_dmul>
 800fc02:	a35d      	add	r3, pc, #372	; (adr r3, 800fd78 <__ieee754_pow+0xa20>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fb46 	bl	8000298 <__aeabi_dsub>
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	462b      	mov	r3, r5
 800fc10:	f7f0 fcfa 	bl	8000608 <__aeabi_dmul>
 800fc14:	a35a      	add	r3, pc, #360	; (adr r3, 800fd80 <__ieee754_pow+0xa28>)
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	f7f0 fb3f 	bl	800029c <__adddf3>
 800fc1e:	4622      	mov	r2, r4
 800fc20:	462b      	mov	r3, r5
 800fc22:	f7f0 fcf1 	bl	8000608 <__aeabi_dmul>
 800fc26:	a358      	add	r3, pc, #352	; (adr r3, 800fd88 <__ieee754_pow+0xa30>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fb34 	bl	8000298 <__aeabi_dsub>
 800fc30:	4622      	mov	r2, r4
 800fc32:	462b      	mov	r3, r5
 800fc34:	f7f0 fce8 	bl	8000608 <__aeabi_dmul>
 800fc38:	a355      	add	r3, pc, #340	; (adr r3, 800fd90 <__ieee754_pow+0xa38>)
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	f7f0 fb2d 	bl	800029c <__adddf3>
 800fc42:	4622      	mov	r2, r4
 800fc44:	462b      	mov	r3, r5
 800fc46:	f7f0 fcdf 	bl	8000608 <__aeabi_dmul>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4640      	mov	r0, r8
 800fc50:	4649      	mov	r1, r9
 800fc52:	f7f0 fb21 	bl	8000298 <__aeabi_dsub>
 800fc56:	4604      	mov	r4, r0
 800fc58:	460d      	mov	r5, r1
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4640      	mov	r0, r8
 800fc60:	4649      	mov	r1, r9
 800fc62:	f7f0 fcd1 	bl	8000608 <__aeabi_dmul>
 800fc66:	2200      	movs	r2, #0
 800fc68:	ec41 0b19 	vmov	d9, r0, r1
 800fc6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc70:	4620      	mov	r0, r4
 800fc72:	4629      	mov	r1, r5
 800fc74:	f7f0 fb10 	bl	8000298 <__aeabi_dsub>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	ec51 0b19 	vmov	r0, r1, d9
 800fc80:	f7f0 fdec 	bl	800085c <__aeabi_ddiv>
 800fc84:	4632      	mov	r2, r6
 800fc86:	4604      	mov	r4, r0
 800fc88:	460d      	mov	r5, r1
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	4649      	mov	r1, r9
 800fc90:	f7f0 fcba 	bl	8000608 <__aeabi_dmul>
 800fc94:	4632      	mov	r2, r6
 800fc96:	463b      	mov	r3, r7
 800fc98:	f7f0 fb00 	bl	800029c <__adddf3>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	4620      	mov	r0, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	f7f0 faf8 	bl	8000298 <__aeabi_dsub>
 800fca8:	4642      	mov	r2, r8
 800fcaa:	464b      	mov	r3, r9
 800fcac:	f7f0 faf4 	bl	8000298 <__aeabi_dsub>
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	493a      	ldr	r1, [pc, #232]	; (800fda0 <__ieee754_pow+0xa48>)
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	f7f0 faee 	bl	8000298 <__aeabi_dsub>
 800fcbc:	ec41 0b10 	vmov	d0, r0, r1
 800fcc0:	ee10 3a90 	vmov	r3, s1
 800fcc4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fcc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fccc:	da2b      	bge.n	800fd26 <__ieee754_pow+0x9ce>
 800fcce:	4650      	mov	r0, sl
 800fcd0:	f000 f966 	bl	800ffa0 <scalbn>
 800fcd4:	ec51 0b10 	vmov	r0, r1, d0
 800fcd8:	ec53 2b18 	vmov	r2, r3, d8
 800fcdc:	f7ff bbed 	b.w	800f4ba <__ieee754_pow+0x162>
 800fce0:	4b30      	ldr	r3, [pc, #192]	; (800fda4 <__ieee754_pow+0xa4c>)
 800fce2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fce6:	429e      	cmp	r6, r3
 800fce8:	f77f af0c 	ble.w	800fb04 <__ieee754_pow+0x7ac>
 800fcec:	4b2e      	ldr	r3, [pc, #184]	; (800fda8 <__ieee754_pow+0xa50>)
 800fcee:	440b      	add	r3, r1
 800fcf0:	4303      	orrs	r3, r0
 800fcf2:	d009      	beq.n	800fd08 <__ieee754_pow+0x9b0>
 800fcf4:	ec51 0b18 	vmov	r0, r1, d8
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	f7f0 fef6 	bl	8000aec <__aeabi_dcmplt>
 800fd00:	3800      	subs	r0, #0
 800fd02:	bf18      	it	ne
 800fd04:	2001      	movne	r0, #1
 800fd06:	e447      	b.n	800f598 <__ieee754_pow+0x240>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f7f0 fac4 	bl	8000298 <__aeabi_dsub>
 800fd10:	4642      	mov	r2, r8
 800fd12:	464b      	mov	r3, r9
 800fd14:	f7f0 fefe 	bl	8000b14 <__aeabi_dcmpge>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	f43f aef3 	beq.w	800fb04 <__ieee754_pow+0x7ac>
 800fd1e:	e7e9      	b.n	800fcf4 <__ieee754_pow+0x99c>
 800fd20:	f04f 0a00 	mov.w	sl, #0
 800fd24:	e71a      	b.n	800fb5c <__ieee754_pow+0x804>
 800fd26:	ec51 0b10 	vmov	r0, r1, d0
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	e7d4      	b.n	800fcd8 <__ieee754_pow+0x980>
 800fd2e:	491c      	ldr	r1, [pc, #112]	; (800fda0 <__ieee754_pow+0xa48>)
 800fd30:	2000      	movs	r0, #0
 800fd32:	f7ff bb30 	b.w	800f396 <__ieee754_pow+0x3e>
 800fd36:	2000      	movs	r0, #0
 800fd38:	2100      	movs	r1, #0
 800fd3a:	f7ff bb2c 	b.w	800f396 <__ieee754_pow+0x3e>
 800fd3e:	4630      	mov	r0, r6
 800fd40:	4639      	mov	r1, r7
 800fd42:	f7ff bb28 	b.w	800f396 <__ieee754_pow+0x3e>
 800fd46:	9204      	str	r2, [sp, #16]
 800fd48:	f7ff bb7a 	b.w	800f440 <__ieee754_pow+0xe8>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f7ff bb64 	b.w	800f41a <__ieee754_pow+0xc2>
 800fd52:	bf00      	nop
 800fd54:	f3af 8000 	nop.w
 800fd58:	00000000 	.word	0x00000000
 800fd5c:	3fe62e43 	.word	0x3fe62e43
 800fd60:	fefa39ef 	.word	0xfefa39ef
 800fd64:	3fe62e42 	.word	0x3fe62e42
 800fd68:	0ca86c39 	.word	0x0ca86c39
 800fd6c:	be205c61 	.word	0xbe205c61
 800fd70:	72bea4d0 	.word	0x72bea4d0
 800fd74:	3e663769 	.word	0x3e663769
 800fd78:	c5d26bf1 	.word	0xc5d26bf1
 800fd7c:	3ebbbd41 	.word	0x3ebbbd41
 800fd80:	af25de2c 	.word	0xaf25de2c
 800fd84:	3f11566a 	.word	0x3f11566a
 800fd88:	16bebd93 	.word	0x16bebd93
 800fd8c:	3f66c16c 	.word	0x3f66c16c
 800fd90:	5555553e 	.word	0x5555553e
 800fd94:	3fc55555 	.word	0x3fc55555
 800fd98:	3fe00000 	.word	0x3fe00000
 800fd9c:	000fffff 	.word	0x000fffff
 800fda0:	3ff00000 	.word	0x3ff00000
 800fda4:	4090cbff 	.word	0x4090cbff
 800fda8:	3f6f3400 	.word	0x3f6f3400
 800fdac:	652b82fe 	.word	0x652b82fe
 800fdb0:	3c971547 	.word	0x3c971547

0800fdb4 <__ieee754_sqrt>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	ec55 4b10 	vmov	r4, r5, d0
 800fdbc:	4e55      	ldr	r6, [pc, #340]	; (800ff14 <__ieee754_sqrt+0x160>)
 800fdbe:	43ae      	bics	r6, r5
 800fdc0:	ee10 0a10 	vmov	r0, s0
 800fdc4:	ee10 3a10 	vmov	r3, s0
 800fdc8:	462a      	mov	r2, r5
 800fdca:	4629      	mov	r1, r5
 800fdcc:	d110      	bne.n	800fdf0 <__ieee754_sqrt+0x3c>
 800fdce:	ee10 2a10 	vmov	r2, s0
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	f7f0 fc18 	bl	8000608 <__aeabi_dmul>
 800fdd8:	4602      	mov	r2, r0
 800fdda:	460b      	mov	r3, r1
 800fddc:	4620      	mov	r0, r4
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 fa5c 	bl	800029c <__adddf3>
 800fde4:	4604      	mov	r4, r0
 800fde6:	460d      	mov	r5, r1
 800fde8:	ec45 4b10 	vmov	d0, r4, r5
 800fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf0:	2d00      	cmp	r5, #0
 800fdf2:	dc10      	bgt.n	800fe16 <__ieee754_sqrt+0x62>
 800fdf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fdf8:	4330      	orrs	r0, r6
 800fdfa:	d0f5      	beq.n	800fde8 <__ieee754_sqrt+0x34>
 800fdfc:	b15d      	cbz	r5, 800fe16 <__ieee754_sqrt+0x62>
 800fdfe:	ee10 2a10 	vmov	r2, s0
 800fe02:	462b      	mov	r3, r5
 800fe04:	ee10 0a10 	vmov	r0, s0
 800fe08:	f7f0 fa46 	bl	8000298 <__aeabi_dsub>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	f7f0 fd24 	bl	800085c <__aeabi_ddiv>
 800fe14:	e7e6      	b.n	800fde4 <__ieee754_sqrt+0x30>
 800fe16:	1512      	asrs	r2, r2, #20
 800fe18:	d074      	beq.n	800ff04 <__ieee754_sqrt+0x150>
 800fe1a:	07d4      	lsls	r4, r2, #31
 800fe1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fe20:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fe24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fe28:	bf5e      	ittt	pl
 800fe2a:	0fda      	lsrpl	r2, r3, #31
 800fe2c:	005b      	lslpl	r3, r3, #1
 800fe2e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fe32:	2400      	movs	r4, #0
 800fe34:	0fda      	lsrs	r2, r3, #31
 800fe36:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fe3a:	107f      	asrs	r7, r7, #1
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	2516      	movs	r5, #22
 800fe40:	4620      	mov	r0, r4
 800fe42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe46:	1886      	adds	r6, r0, r2
 800fe48:	428e      	cmp	r6, r1
 800fe4a:	bfde      	ittt	le
 800fe4c:	1b89      	suble	r1, r1, r6
 800fe4e:	18b0      	addle	r0, r6, r2
 800fe50:	18a4      	addle	r4, r4, r2
 800fe52:	0049      	lsls	r1, r1, #1
 800fe54:	3d01      	subs	r5, #1
 800fe56:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fe5a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fe5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe62:	d1f0      	bne.n	800fe46 <__ieee754_sqrt+0x92>
 800fe64:	462a      	mov	r2, r5
 800fe66:	f04f 0e20 	mov.w	lr, #32
 800fe6a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fe6e:	4281      	cmp	r1, r0
 800fe70:	eb06 0c05 	add.w	ip, r6, r5
 800fe74:	dc02      	bgt.n	800fe7c <__ieee754_sqrt+0xc8>
 800fe76:	d113      	bne.n	800fea0 <__ieee754_sqrt+0xec>
 800fe78:	459c      	cmp	ip, r3
 800fe7a:	d811      	bhi.n	800fea0 <__ieee754_sqrt+0xec>
 800fe7c:	f1bc 0f00 	cmp.w	ip, #0
 800fe80:	eb0c 0506 	add.w	r5, ip, r6
 800fe84:	da43      	bge.n	800ff0e <__ieee754_sqrt+0x15a>
 800fe86:	2d00      	cmp	r5, #0
 800fe88:	db41      	blt.n	800ff0e <__ieee754_sqrt+0x15a>
 800fe8a:	f100 0801 	add.w	r8, r0, #1
 800fe8e:	1a09      	subs	r1, r1, r0
 800fe90:	459c      	cmp	ip, r3
 800fe92:	bf88      	it	hi
 800fe94:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fe98:	eba3 030c 	sub.w	r3, r3, ip
 800fe9c:	4432      	add	r2, r6
 800fe9e:	4640      	mov	r0, r8
 800fea0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fea4:	f1be 0e01 	subs.w	lr, lr, #1
 800fea8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800feac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800feb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800feb4:	d1db      	bne.n	800fe6e <__ieee754_sqrt+0xba>
 800feb6:	430b      	orrs	r3, r1
 800feb8:	d006      	beq.n	800fec8 <__ieee754_sqrt+0x114>
 800feba:	1c50      	adds	r0, r2, #1
 800febc:	bf13      	iteet	ne
 800febe:	3201      	addne	r2, #1
 800fec0:	3401      	addeq	r4, #1
 800fec2:	4672      	moveq	r2, lr
 800fec4:	f022 0201 	bicne.w	r2, r2, #1
 800fec8:	1063      	asrs	r3, r4, #1
 800feca:	0852      	lsrs	r2, r2, #1
 800fecc:	07e1      	lsls	r1, r4, #31
 800fece:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fed2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fed6:	bf48      	it	mi
 800fed8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fedc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fee0:	4614      	mov	r4, r2
 800fee2:	e781      	b.n	800fde8 <__ieee754_sqrt+0x34>
 800fee4:	0ad9      	lsrs	r1, r3, #11
 800fee6:	3815      	subs	r0, #21
 800fee8:	055b      	lsls	r3, r3, #21
 800feea:	2900      	cmp	r1, #0
 800feec:	d0fa      	beq.n	800fee4 <__ieee754_sqrt+0x130>
 800feee:	02cd      	lsls	r5, r1, #11
 800fef0:	d50a      	bpl.n	800ff08 <__ieee754_sqrt+0x154>
 800fef2:	f1c2 0420 	rsb	r4, r2, #32
 800fef6:	fa23 f404 	lsr.w	r4, r3, r4
 800fefa:	1e55      	subs	r5, r2, #1
 800fefc:	4093      	lsls	r3, r2
 800fefe:	4321      	orrs	r1, r4
 800ff00:	1b42      	subs	r2, r0, r5
 800ff02:	e78a      	b.n	800fe1a <__ieee754_sqrt+0x66>
 800ff04:	4610      	mov	r0, r2
 800ff06:	e7f0      	b.n	800feea <__ieee754_sqrt+0x136>
 800ff08:	0049      	lsls	r1, r1, #1
 800ff0a:	3201      	adds	r2, #1
 800ff0c:	e7ef      	b.n	800feee <__ieee754_sqrt+0x13a>
 800ff0e:	4680      	mov	r8, r0
 800ff10:	e7bd      	b.n	800fe8e <__ieee754_sqrt+0xda>
 800ff12:	bf00      	nop
 800ff14:	7ff00000 	.word	0x7ff00000

0800ff18 <with_errno>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	460d      	mov	r5, r1
 800ff1e:	4616      	mov	r6, r2
 800ff20:	f7fc f846 	bl	800bfb0 <__errno>
 800ff24:	4629      	mov	r1, r5
 800ff26:	6006      	str	r6, [r0, #0]
 800ff28:	4620      	mov	r0, r4
 800ff2a:	bd70      	pop	{r4, r5, r6, pc}

0800ff2c <xflow>:
 800ff2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff2e:	4614      	mov	r4, r2
 800ff30:	461d      	mov	r5, r3
 800ff32:	b108      	cbz	r0, 800ff38 <xflow+0xc>
 800ff34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff38:	e9cd 2300 	strd	r2, r3, [sp]
 800ff3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff40:	4620      	mov	r0, r4
 800ff42:	4629      	mov	r1, r5
 800ff44:	f7f0 fb60 	bl	8000608 <__aeabi_dmul>
 800ff48:	2222      	movs	r2, #34	; 0x22
 800ff4a:	b003      	add	sp, #12
 800ff4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff50:	f7ff bfe2 	b.w	800ff18 <with_errno>

0800ff54 <__math_uflow>:
 800ff54:	b508      	push	{r3, lr}
 800ff56:	2200      	movs	r2, #0
 800ff58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ff5c:	f7ff ffe6 	bl	800ff2c <xflow>
 800ff60:	ec41 0b10 	vmov	d0, r0, r1
 800ff64:	bd08      	pop	{r3, pc}

0800ff66 <__math_oflow>:
 800ff66:	b508      	push	{r3, lr}
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ff6e:	f7ff ffdd 	bl	800ff2c <xflow>
 800ff72:	ec41 0b10 	vmov	d0, r0, r1
 800ff76:	bd08      	pop	{r3, pc}

0800ff78 <fabs>:
 800ff78:	ec51 0b10 	vmov	r0, r1, d0
 800ff7c:	ee10 2a10 	vmov	r2, s0
 800ff80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff84:	ec43 2b10 	vmov	d0, r2, r3
 800ff88:	4770      	bx	lr

0800ff8a <finite>:
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	ed8d 0b00 	vstr	d0, [sp]
 800ff90:	9801      	ldr	r0, [sp, #4]
 800ff92:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff9a:	0fc0      	lsrs	r0, r0, #31
 800ff9c:	b002      	add	sp, #8
 800ff9e:	4770      	bx	lr

0800ffa0 <scalbn>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	ec55 4b10 	vmov	r4, r5, d0
 800ffa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ffaa:	4606      	mov	r6, r0
 800ffac:	462b      	mov	r3, r5
 800ffae:	b99a      	cbnz	r2, 800ffd8 <scalbn+0x38>
 800ffb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ffb4:	4323      	orrs	r3, r4
 800ffb6:	d036      	beq.n	8010026 <scalbn+0x86>
 800ffb8:	4b39      	ldr	r3, [pc, #228]	; (80100a0 <scalbn+0x100>)
 800ffba:	4629      	mov	r1, r5
 800ffbc:	ee10 0a10 	vmov	r0, s0
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f7f0 fb21 	bl	8000608 <__aeabi_dmul>
 800ffc6:	4b37      	ldr	r3, [pc, #220]	; (80100a4 <scalbn+0x104>)
 800ffc8:	429e      	cmp	r6, r3
 800ffca:	4604      	mov	r4, r0
 800ffcc:	460d      	mov	r5, r1
 800ffce:	da10      	bge.n	800fff2 <scalbn+0x52>
 800ffd0:	a32b      	add	r3, pc, #172	; (adr r3, 8010080 <scalbn+0xe0>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	e03a      	b.n	801004e <scalbn+0xae>
 800ffd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ffdc:	428a      	cmp	r2, r1
 800ffde:	d10c      	bne.n	800fffa <scalbn+0x5a>
 800ffe0:	ee10 2a10 	vmov	r2, s0
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	4629      	mov	r1, r5
 800ffe8:	f7f0 f958 	bl	800029c <__adddf3>
 800ffec:	4604      	mov	r4, r0
 800ffee:	460d      	mov	r5, r1
 800fff0:	e019      	b.n	8010026 <scalbn+0x86>
 800fff2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fff6:	460b      	mov	r3, r1
 800fff8:	3a36      	subs	r2, #54	; 0x36
 800fffa:	4432      	add	r2, r6
 800fffc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010000:	428a      	cmp	r2, r1
 8010002:	dd08      	ble.n	8010016 <scalbn+0x76>
 8010004:	2d00      	cmp	r5, #0
 8010006:	a120      	add	r1, pc, #128	; (adr r1, 8010088 <scalbn+0xe8>)
 8010008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801000c:	da1c      	bge.n	8010048 <scalbn+0xa8>
 801000e:	a120      	add	r1, pc, #128	; (adr r1, 8010090 <scalbn+0xf0>)
 8010010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010014:	e018      	b.n	8010048 <scalbn+0xa8>
 8010016:	2a00      	cmp	r2, #0
 8010018:	dd08      	ble.n	801002c <scalbn+0x8c>
 801001a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801001e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010022:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010026:	ec45 4b10 	vmov	d0, r4, r5
 801002a:	bd70      	pop	{r4, r5, r6, pc}
 801002c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010030:	da19      	bge.n	8010066 <scalbn+0xc6>
 8010032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010036:	429e      	cmp	r6, r3
 8010038:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801003c:	dd0a      	ble.n	8010054 <scalbn+0xb4>
 801003e:	a112      	add	r1, pc, #72	; (adr r1, 8010088 <scalbn+0xe8>)
 8010040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1e2      	bne.n	801000e <scalbn+0x6e>
 8010048:	a30f      	add	r3, pc, #60	; (adr r3, 8010088 <scalbn+0xe8>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	f7f0 fadb 	bl	8000608 <__aeabi_dmul>
 8010052:	e7cb      	b.n	800ffec <scalbn+0x4c>
 8010054:	a10a      	add	r1, pc, #40	; (adr r1, 8010080 <scalbn+0xe0>)
 8010056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d0b8      	beq.n	800ffd0 <scalbn+0x30>
 801005e:	a10e      	add	r1, pc, #56	; (adr r1, 8010098 <scalbn+0xf8>)
 8010060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010064:	e7b4      	b.n	800ffd0 <scalbn+0x30>
 8010066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801006a:	3236      	adds	r2, #54	; 0x36
 801006c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010070:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010074:	4620      	mov	r0, r4
 8010076:	4b0c      	ldr	r3, [pc, #48]	; (80100a8 <scalbn+0x108>)
 8010078:	2200      	movs	r2, #0
 801007a:	e7e8      	b.n	801004e <scalbn+0xae>
 801007c:	f3af 8000 	nop.w
 8010080:	c2f8f359 	.word	0xc2f8f359
 8010084:	01a56e1f 	.word	0x01a56e1f
 8010088:	8800759c 	.word	0x8800759c
 801008c:	7e37e43c 	.word	0x7e37e43c
 8010090:	8800759c 	.word	0x8800759c
 8010094:	fe37e43c 	.word	0xfe37e43c
 8010098:	c2f8f359 	.word	0xc2f8f359
 801009c:	81a56e1f 	.word	0x81a56e1f
 80100a0:	43500000 	.word	0x43500000
 80100a4:	ffff3cb0 	.word	0xffff3cb0
 80100a8:	3c900000 	.word	0x3c900000

080100ac <_init>:
 80100ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ae:	bf00      	nop
 80100b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100b2:	bc08      	pop	{r3}
 80100b4:	469e      	mov	lr, r3
 80100b6:	4770      	bx	lr

080100b8 <_fini>:
 80100b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ba:	bf00      	nop
 80100bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100be:	bc08      	pop	{r3}
 80100c0:	469e      	mov	lr, r3
 80100c2:	4770      	bx	lr
