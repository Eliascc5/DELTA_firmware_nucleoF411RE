
delta_f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08010730  08010730  00020730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c38  08010c38  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08010c38  08010c38  00020c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c40  08010c40  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c40  08010c40  00020c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c44  08010c44  00020c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08010c48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  20000258  08010ea0  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  08010ea0  000308e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b09  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca1  00000000  00000000  00043d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00046a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00047970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824e  00000000  00000000  00048770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014272  00000000  00000000  000609be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091afb  00000000  00000000  00074c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010672b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  0010677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010714 	.word	0x08010714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	08010714 	.word	0x08010714

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9aa 	b.w	8000fb4 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468e      	mov	lr, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14d      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf2:	428a      	cmp	r2, r1
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	d969      	bls.n	8000dcc <__udivmoddi4+0xe8>
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b152      	cbz	r2, 8000d14 <__udivmoddi4+0x30>
 8000cfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000d02:	f1c2 0120 	rsb	r1, r2, #32
 8000d06:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d12:	4094      	lsls	r4, r2
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	0c21      	lsrs	r1, r4, #16
 8000d1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d1e:	fa1f f78c 	uxth.w	r7, ip
 8000d22:	fb08 e316 	mls	r3, r8, r6, lr
 8000d26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2a:	fb06 f107 	mul.w	r1, r6, r7
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 811f 	bcs.w	8000f7c <__udivmoddi4+0x298>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 811c 	bls.w	8000f7c <__udivmoddi4+0x298>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x92>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 810a 	bcs.w	8000f80 <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8107 	bls.w	8000f80 <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	1be4      	subs	r4, r4, r7
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa4>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xc2>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80ef 	beq.w	8000f76 <__udivmoddi4+0x292>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x160>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80f9 	bhi.w	8000faa <__udivmoddi4+0x2c6>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa4>
 8000dc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xec>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 8092 	bne.w	8000efe <__udivmoddi4+0x21a>
 8000dda:	eba1 010c 	sub.w	r1, r1, ip
 8000dde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	2601      	movs	r6, #1
 8000de8:	0c20      	lsrs	r0, r4, #16
 8000dea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dee:	fb07 1113 	mls	r1, r7, r3, r1
 8000df2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df6:	fb0e f003 	mul.w	r0, lr, r3
 8000dfa:	4288      	cmp	r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x12c>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x12a>
 8000e08:	4288      	cmp	r0, r1
 8000e0a:	f200 80cb 	bhi.w	8000fa4 <__udivmoddi4+0x2c0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1110 	mls	r1, r7, r0, r1
 8000e1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e20:	fb0e fe00 	mul.w	lr, lr, r0
 8000e24:	45a6      	cmp	lr, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x156>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e30:	d202      	bcs.n	8000e38 <__udivmoddi4+0x154>
 8000e32:	45a6      	cmp	lr, r4
 8000e34:	f200 80bb 	bhi.w	8000fae <__udivmoddi4+0x2ca>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x9a>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e52:	fa20 f407 	lsr.w	r4, r0, r7
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	431c      	orrs	r4, r3
 8000e5c:	40f9      	lsrs	r1, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	fa00 f306 	lsl.w	r3, r0, r6
 8000e66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6a:	0c20      	lsrs	r0, r4, #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fb09 1118 	mls	r1, r9, r8, r1
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e82:	d90b      	bls.n	8000e9c <__udivmoddi4+0x1b8>
 8000e84:	eb1c 0101 	adds.w	r1, ip, r1
 8000e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8c:	f080 8088 	bcs.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e90:	4288      	cmp	r0, r1
 8000e92:	f240 8085 	bls.w	8000fa0 <__udivmoddi4+0x2bc>
 8000e96:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	1a09      	subs	r1, r1, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ea8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb0:	458e      	cmp	lr, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1e2>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ebc:	d26c      	bcs.n	8000f98 <__udivmoddi4+0x2b4>
 8000ebe:	458e      	cmp	lr, r1
 8000ec0:	d96a      	bls.n	8000f98 <__udivmoddi4+0x2b4>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	42a1      	cmp	r1, r4
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	46a6      	mov	lr, r4
 8000ed8:	d356      	bcc.n	8000f88 <__udivmoddi4+0x2a4>
 8000eda:	d053      	beq.n	8000f84 <__udivmoddi4+0x2a0>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x212>
 8000ede:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ee6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eea:	fa22 f306 	lsr.w	r3, r2, r6
 8000eee:	40f1      	lsrs	r1, r6
 8000ef0:	431f      	orrs	r7, r3
 8000ef2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	f1c2 0320 	rsb	r3, r2, #32
 8000f02:	40d8      	lsrs	r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f14:	fa1f fe8c 	uxth.w	lr, ip
 8000f18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f20:	0c0b      	lsrs	r3, r1, #16
 8000f22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f26:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2a:	429e      	cmp	r6, r3
 8000f2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x260>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3a:	d22f      	bcs.n	8000f9c <__udivmoddi4+0x2b8>
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	d92d      	bls.n	8000f9c <__udivmoddi4+0x2b8>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1b9b      	subs	r3, r3, r6
 8000f46:	b289      	uxth	r1, r1
 8000f48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f54:	fb06 f30e 	mul.w	r3, r6, lr
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x28a>
 8000f5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f64:	d216      	bcs.n	8000f94 <__udivmoddi4+0x2b0>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d914      	bls.n	8000f94 <__udivmoddi4+0x2b0>
 8000f6a:	3e02      	subs	r6, #2
 8000f6c:	4461      	add	r1, ip
 8000f6e:	1ac9      	subs	r1, r1, r3
 8000f70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f74:	e738      	b.n	8000de8 <__udivmoddi4+0x104>
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e705      	b.n	8000d88 <__udivmoddi4+0xa4>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e3      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6f8      	b.n	8000d76 <__udivmoddi4+0x92>
 8000f84:	454b      	cmp	r3, r9
 8000f86:	d2a9      	bcs.n	8000edc <__udivmoddi4+0x1f8>
 8000f88:	ebb9 0802 	subs.w	r8, r9, r2
 8000f8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7a3      	b.n	8000edc <__udivmoddi4+0x1f8>
 8000f94:	4646      	mov	r6, r8
 8000f96:	e7ea      	b.n	8000f6e <__udivmoddi4+0x28a>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	e794      	b.n	8000ec6 <__udivmoddi4+0x1e2>
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	e7d1      	b.n	8000f44 <__udivmoddi4+0x260>
 8000fa0:	46d0      	mov	r8, sl
 8000fa2:	e77b      	b.n	8000e9c <__udivmoddi4+0x1b8>
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e732      	b.n	8000e10 <__udivmoddi4+0x12c>
 8000faa:	4630      	mov	r0, r6
 8000fac:	e709      	b.n	8000dc2 <__udivmoddi4+0xde>
 8000fae:	4464      	add	r4, ip
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	e742      	b.n	8000e3a <__udivmoddi4+0x156>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	homAprox = true;
 8000fbc:	4bd4      	ldr	r3, [pc, #848]	; (8001310 <homing+0x358>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000fc2:	4bd4      	ldr	r3, [pc, #848]	; (8001314 <homing+0x35c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000fc8:	4bd3      	ldr	r3, [pc, #844]	; (8001318 <homing+0x360>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000fce:	4bd3      	ldr	r3, [pc, #844]	; (800131c <homing+0x364>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000fd4:	4bd2      	ldr	r3, [pc, #840]	; (8001320 <homing+0x368>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2101      	movs	r1, #1
 8000fde:	48d1      	ldr	r0, [pc, #836]	; (8001324 <homing+0x36c>)
 8000fe0:	f007 fd16 	bl	8008a10 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	48cf      	ldr	r0, [pc, #828]	; (8001328 <homing+0x370>)
 8000fea:	f007 fd11 	bl	8008a10 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	48cd      	ldr	r0, [pc, #820]	; (8001328 <homing+0x370>)
 8000ff4:	f007 fd0c 	bl	8008a10 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000ff8:	2006      	movs	r0, #6
 8000ffa:	f007 fac0 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000ffe:	2007      	movs	r0, #7
 8001000:	f007 fabd 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001004:	2008      	movs	r0, #8
 8001006:	f007 faba 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 800100a:	2009      	movs	r0, #9
 800100c:	f007 fab7 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001010:	200a      	movs	r0, #10
 8001012:	f007 fab4 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001016:	2017      	movs	r0, #23
 8001018:	f007 fab1 	bl	800857e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f007 faae 	bl	800857e <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8001022:	2100      	movs	r1, #0
 8001024:	48c1      	ldr	r0, [pc, #772]	; (800132c <homing+0x374>)
 8001026:	f008 fd33 	bl	8009a90 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 800102a:	2100      	movs	r1, #0
 800102c:	48c0      	ldr	r0, [pc, #768]	; (8001330 <homing+0x378>)
 800102e:	f008 fd2f 	bl	8009a90 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8001032:	2100      	movs	r1, #0
 8001034:	48bf      	ldr	r0, [pc, #764]	; (8001334 <homing+0x37c>)
 8001036:	f008 fd2b 	bl	8009a90 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm));
 800103a:	4bbf      	ldr	r3, [pc, #764]	; (8001338 <homing+0x380>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa68 	bl	8000514 <__aeabi_ui2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4bbc      	ldr	r3, [pc, #752]	; (800133c <homing+0x384>)
 800104a:	f7ff f927 	bl	800029c <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	a1ad      	add	r1, pc, #692	; (adr r1, 8001308 <homing+0x350>)
 8001054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	4bb6      	ldr	r3, [pc, #728]	; (8001340 <homing+0x388>)
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <homing+0x38c>)
 8001070:	f7ff faca 	bl	8000608 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	f04f 0000 	mov.w	r0, #0
 800107c:	49b2      	ldr	r1, [pc, #712]	; (8001348 <homing+0x390>)
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4ba8      	ldr	r3, [pc, #672]	; (800133c <homing+0x384>)
 800109c:	f7ff f8fc 	bl	8000298 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	49a1      	ldr	r1, [pc, #644]	; (800132c <homing+0x374>)
 80010a6:	680c      	ldr	r4, [r1, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd5c 	bl	8000b68 <__aeabi_d2uiz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010b4:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <homing+0x380>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa2b 	bl	8000514 <__aeabi_ui2d>
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b9e      	ldr	r3, [pc, #632]	; (800133c <homing+0x384>)
 80010c4:	f7ff f8ea 	bl	800029c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	a18e      	add	r1, pc, #568	; (adr r1, 8001308 <homing+0x350>)
 80010ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d2:	f7ff fbc3 	bl	800085c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	4b98      	ldr	r3, [pc, #608]	; (8001340 <homing+0x388>)
 80010e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <homing+0x38c>)
 80010ea:	f7ff fa8d 	bl	8000608 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4994      	ldr	r1, [pc, #592]	; (8001348 <homing+0x390>)
 80010f8:	f7ff fbb0 	bl	800085c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b89      	ldr	r3, [pc, #548]	; (800133c <homing+0x384>)
 8001116:	f7ff f8bf 	bl	8000298 <__aeabi_dsub>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fd21 	bl	8000b68 <__aeabi_d2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	4a80      	ldr	r2, [pc, #512]	; (800132c <homing+0x374>)
 800112a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm));
 800112c:	4b82      	ldr	r3, [pc, #520]	; (8001338 <homing+0x380>)
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9ef 	bl	8000514 <__aeabi_ui2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <homing+0x384>)
 800113c:	f7ff f8ae 	bl	800029c <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	a170      	add	r1, pc, #448	; (adr r1, 8001308 <homing+0x350>)
 8001146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800114a:	f7ff fb87 	bl	800085c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	4b7a      	ldr	r3, [pc, #488]	; (8001340 <homing+0x388>)
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b78      	ldr	r3, [pc, #480]	; (8001344 <homing+0x38c>)
 8001162:	f7ff fa51 	bl	8000608 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4976      	ldr	r1, [pc, #472]	; (8001348 <homing+0x390>)
 8001170:	f7ff fb74 	bl	800085c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa44 	bl	8000608 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b6b      	ldr	r3, [pc, #428]	; (800133c <homing+0x384>)
 800118e:	f7ff f883 	bl	8000298 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4966      	ldr	r1, [pc, #408]	; (8001330 <homing+0x378>)
 8001198:	680c      	ldr	r4, [r1, #0]
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fce3 	bl	8000b68 <__aeabi_d2uiz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011a6:	4b64      	ldr	r3, [pc, #400]	; (8001338 <homing+0x380>)
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9b2 	bl	8000514 <__aeabi_ui2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <homing+0x384>)
 80011b6:	f7ff f871 	bl	800029c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	a152      	add	r1, pc, #328	; (adr r1, 8001308 <homing+0x350>)
 80011c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011c4:	f7ff fb4a 	bl	800085c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <homing+0x388>)
 80011d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <homing+0x38c>)
 80011dc:	f7ff fa14 	bl	8000608 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4957      	ldr	r1, [pc, #348]	; (8001348 <homing+0x390>)
 80011ea:	f7ff fb37 	bl	800085c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f7ff fa07 	bl	8000608 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <homing+0x384>)
 8001208:	f7ff f846 	bl	8000298 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fca8 	bl	8000b68 <__aeabi_d2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	4a45      	ldr	r2, [pc, #276]	; (8001330 <homing+0x378>)
 800121c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm));
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <homing+0x380>)
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_ui2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <homing+0x384>)
 800122e:	f7ff f835 	bl	800029c <__adddf3>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	a134      	add	r1, pc, #208	; (adr r1, 8001308 <homing+0x350>)
 8001238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <homing+0x388>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <homing+0x38c>)
 8001254:	f7ff f9d8 	bl	8000608 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4939      	ldr	r1, [pc, #228]	; (8001348 <homing+0x390>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b2f      	ldr	r3, [pc, #188]	; (800133c <homing+0x384>)
 8001280:	f7ff f80a 	bl	8000298 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	492a      	ldr	r1, [pc, #168]	; (8001334 <homing+0x37c>)
 800128a:	680c      	ldr	r4, [r1, #0]
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc6a 	bl	8000b68 <__aeabi_d2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <homing+0x380>)
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f939 	bl	8000514 <__aeabi_ui2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <homing+0x384>)
 80012a8:	f7fe fff8 	bl	800029c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	a115      	add	r1, pc, #84	; (adr r1, 8001308 <homing+0x350>)
 80012b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b6:	f7ff fad1 	bl	800085c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <homing+0x388>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <homing+0x38c>)
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <homing+0x390>)
 80012dc:	f7ff fabe 	bl	800085c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <homing+0x384>)
 80012fa:	f7fe ffcd 	bl	8000298 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	e024      	b.n	800134c <homing+0x394>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	418e8480 	.word	0x418e8480
 8001310:	20000274 	.word	0x20000274
 8001314:	20000275 	.word	0x20000275
 8001318:	200005f0 	.word	0x200005f0
 800131c:	20000638 	.word	0x20000638
 8001320:	20000680 	.word	0x20000680
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	20000368 	.word	0x20000368
 8001330:	200003f8 	.word	0x200003f8
 8001334:	20000440 	.word	0x20000440
 8001338:	40010000 	.word	0x40010000
 800133c:	3ff00000 	.word	0x3ff00000
 8001340:	20000000 	.word	0x20000000
 8001344:	40bf4000 	.word	0x40bf4000
 8001348:	404e0000 	.word	0x404e0000
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc09 	bl	8000b68 <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	4ab0      	ldr	r2, [pc, #704]	; (800161c <homing+0x664>)
 800135a:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 800135c:	4bb0      	ldr	r3, [pc, #704]	; (8001620 <homing+0x668>)
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d7 	bl	8000514 <__aeabi_ui2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f7ff fa75 	bl	800085c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4caa      	ldr	r4, [pc, #680]	; (8001620 <homing+0x668>)
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbf4 	bl	8000b68 <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8001384:	4ba7      	ldr	r3, [pc, #668]	; (8001624 <homing+0x66c>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8c3 	bl	8000514 <__aeabi_ui2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001396:	f7ff fa61 	bl	800085c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4ca1      	ldr	r4, [pc, #644]	; (8001624 <homing+0x66c>)
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fbe0 	bl	8000b68 <__aeabi_d2uiz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 80013ac:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <homing+0x670>)
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013be:	f7ff fa4d 	bl	800085c <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4c98      	ldr	r4, [pc, #608]	; (8001628 <homing+0x670>)
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fbcc 	bl	8000b68 <__aeabi_d2uiz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	6363      	str	r3, [r4, #52]	; 0x34


    while(homAprox){
 80013d4:	e04b      	b.n	800146e <homing+0x4b6>

        Start_PWM_MOTOR_1;
 80013d6:	2100      	movs	r1, #0
 80013d8:	4894      	ldr	r0, [pc, #592]	; (800162c <homing+0x674>)
 80013da:	f008 faa9 	bl	8009930 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 80013de:	2100      	movs	r1, #0
 80013e0:	4893      	ldr	r0, [pc, #588]	; (8001630 <homing+0x678>)
 80013e2:	f008 faa5 	bl	8009930 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 80013e6:	2100      	movs	r1, #0
 80013e8:	488c      	ldr	r0, [pc, #560]	; (800161c <homing+0x664>)
 80013ea:	f008 faa1 	bl	8009930 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 80013ee:	2110      	movs	r1, #16
 80013f0:	4890      	ldr	r0, [pc, #576]	; (8001634 <homing+0x67c>)
 80013f2:	f007 faf5 	bl	80089e0 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00f      	beq.n	800141c <homing+0x464>
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	488d      	ldr	r0, [pc, #564]	; (8001638 <homing+0x680>)
 8001402:	f007 faed 	bl	80089e0 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <homing+0x464>
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4889      	ldr	r0, [pc, #548]	; (8001638 <homing+0x680>)
 8001412:	f007 fae5 	bl	80089e0 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d128      	bne.n	800146e <homing+0x4b6>
            HAL_Delay(30);
 800141c:	201e      	movs	r0, #30
 800141e:	f006 ff61 	bl	80082e4 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001422:	2110      	movs	r1, #16
 8001424:	4883      	ldr	r0, [pc, #524]	; (8001634 <homing+0x67c>)
 8001426:	f007 fadb 	bl	80089e0 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <homing+0x498>
 8001430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001434:	4880      	ldr	r0, [pc, #512]	; (8001638 <homing+0x680>)
 8001436:	f007 fad3 	bl	80089e0 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <homing+0x498>
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	487c      	ldr	r0, [pc, #496]	; (8001638 <homing+0x680>)
 8001446:	f007 facb 	bl	80089e0 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10e      	bne.n	800146e <homing+0x4b6>

                Stop_PWM_MOTOR_1;
 8001450:	2100      	movs	r1, #0
 8001452:	4876      	ldr	r0, [pc, #472]	; (800162c <homing+0x674>)
 8001454:	f008 fb1c 	bl	8009a90 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001458:	2100      	movs	r1, #0
 800145a:	4875      	ldr	r0, [pc, #468]	; (8001630 <homing+0x678>)
 800145c:	f008 fb18 	bl	8009a90 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001460:	2100      	movs	r1, #0
 8001462:	486e      	ldr	r0, [pc, #440]	; (800161c <homing+0x664>)
 8001464:	f008 fb14 	bl	8009a90 <HAL_TIM_PWM_Stop>

                homAprox = false;
 8001468:	4b74      	ldr	r3, [pc, #464]	; (800163c <homing+0x684>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 800146e:	4b73      	ldr	r3, [pc, #460]	; (800163c <homing+0x684>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1af      	bne.n	80013d6 <homing+0x41e>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 8001476:	e14b      	b.n	8001710 <homing+0x758>

        if (ES1s_PRESSED && !motor1.hom) {
 8001478:	2110      	movs	r1, #16
 800147a:	486e      	ldr	r0, [pc, #440]	; (8001634 <homing+0x67c>)
 800147c:	f007 fab0 	bl	80089e0 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d156      	bne.n	8001534 <homing+0x57c>
 8001486:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <homing+0x688>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d152      	bne.n	8001534 <homing+0x57c>

            Stop_PWM_MOTOR_2;
 800148e:	2100      	movs	r1, #0
 8001490:	4867      	ldr	r0, [pc, #412]	; (8001630 <homing+0x678>)
 8001492:	f008 fafd 	bl	8009a90 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001496:	2100      	movs	r1, #0
 8001498:	4860      	ldr	r0, [pc, #384]	; (800161c <homing+0x664>)
 800149a:	f008 faf9 	bl	8009a90 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 800149e:	201e      	movs	r0, #30
 80014a0:	f006 ff20 	bl	80082e4 <HAL_Delay>

            while(ES1s_PRESSED){
 80014a4:	e00f      	b.n	80014c6 <homing+0x50e>

                negative_Dir_MOTOR_1;
 80014a6:	2201      	movs	r2, #1
 80014a8:	2101      	movs	r1, #1
 80014aa:	4862      	ldr	r0, [pc, #392]	; (8001634 <homing+0x67c>)
 80014ac:	f007 fab0 	bl	8008a10 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80014b0:	2000      	movs	r0, #0
 80014b2:	f006 ff17 	bl	80082e4 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80014b6:	2100      	movs	r1, #0
 80014b8:	485c      	ldr	r0, [pc, #368]	; (800162c <homing+0x674>)
 80014ba:	f008 fa39 	bl	8009930 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80014be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c2:	f006 ff0f 	bl	80082e4 <HAL_Delay>
            while(ES1s_PRESSED){
 80014c6:	2110      	movs	r1, #16
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <homing+0x67c>)
 80014ca:	f007 fa89 	bl	80089e0 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e8      	beq.n	80014a6 <homing+0x4ee>

            }

            Stop_PWM_MOTOR_1;
 80014d4:	2100      	movs	r1, #0
 80014d6:	4855      	ldr	r0, [pc, #340]	; (800162c <homing+0x674>)
 80014d8:	f008 fada 	bl	8009a90 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <homing+0x688>)
 80014de:	2201      	movs	r2, #1
 80014e0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F1\n", 4, 100);
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	2204      	movs	r2, #4
 80014e6:	4957      	ldr	r1, [pc, #348]	; (8001644 <homing+0x68c>)
 80014e8:	4857      	ldr	r0, [pc, #348]	; (8001648 <homing+0x690>)
 80014ea:	f009 fd60 	bl	800afae <HAL_UART_Transmit>
            HAL_Delay(30);
 80014ee:	201e      	movs	r0, #30
 80014f0:	f006 fef8 	bl	80082e4 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	484f      	ldr	r0, [pc, #316]	; (8001638 <homing+0x680>)
 80014fa:	f007 fa71 	bl	80089e0 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <homing+0x55c>
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <homing+0x694>)
 8001506:	7e1b      	ldrb	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <homing+0x55c>
 800150c:	2100      	movs	r1, #0
 800150e:	4848      	ldr	r0, [pc, #288]	; (8001630 <homing+0x678>)
 8001510:	f008 fa0e 	bl	8009930 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001518:	4847      	ldr	r0, [pc, #284]	; (8001638 <homing+0x680>)
 800151a:	f007 fa61 	bl	80089e0 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <homing+0x57c>
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <homing+0x698>)
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <homing+0x57c>
 800152c:	2100      	movs	r1, #0
 800152e:	483b      	ldr	r0, [pc, #236]	; (800161c <homing+0x664>)
 8001530:	f008 f9fe 	bl	8009930 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	483f      	ldr	r0, [pc, #252]	; (8001638 <homing+0x680>)
 800153a:	f007 fa51 	bl	80089e0 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d156      	bne.n	80015f2 <homing+0x63a>
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <homing+0x694>)
 8001546:	7e1b      	ldrb	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d152      	bne.n	80015f2 <homing+0x63a>

            Stop_PWM_MOTOR_1;
 800154c:	2100      	movs	r1, #0
 800154e:	4837      	ldr	r0, [pc, #220]	; (800162c <homing+0x674>)
 8001550:	f008 fa9e 	bl	8009a90 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001554:	2100      	movs	r1, #0
 8001556:	4831      	ldr	r0, [pc, #196]	; (800161c <homing+0x664>)
 8001558:	f008 fa9a 	bl	8009a90 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800155c:	201e      	movs	r0, #30
 800155e:	f006 fec1 	bl	80082e4 <HAL_Delay>

            while(ES2s_PRESSED){
 8001562:	e00f      	b.n	8001584 <homing+0x5cc>

                negative_Dir_MOTOR_2;
 8001564:	2201      	movs	r2, #1
 8001566:	2102      	movs	r1, #2
 8001568:	4833      	ldr	r0, [pc, #204]	; (8001638 <homing+0x680>)
 800156a:	f007 fa51 	bl	8008a10 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 800156e:	2000      	movs	r0, #0
 8001570:	f006 feb8 	bl	80082e4 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001574:	2100      	movs	r1, #0
 8001576:	482e      	ldr	r0, [pc, #184]	; (8001630 <homing+0x678>)
 8001578:	f008 f9da 	bl	8009930 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800157c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001580:	f006 feb0 	bl	80082e4 <HAL_Delay>
            while(ES2s_PRESSED){
 8001584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001588:	482b      	ldr	r0, [pc, #172]	; (8001638 <homing+0x680>)
 800158a:	f007 fa29 	bl	80089e0 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e7      	beq.n	8001564 <homing+0x5ac>

            }

            Stop_PWM_MOTOR_2;
 8001594:	2100      	movs	r1, #0
 8001596:	4826      	ldr	r0, [pc, #152]	; (8001630 <homing+0x678>)
 8001598:	f008 fa7a 	bl	8009a90 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <homing+0x694>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F2\n", 4, 100);
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2204      	movs	r2, #4
 80015a6:	492b      	ldr	r1, [pc, #172]	; (8001654 <homing+0x69c>)
 80015a8:	4827      	ldr	r0, [pc, #156]	; (8001648 <homing+0x690>)
 80015aa:	f009 fd00 	bl	800afae <HAL_UART_Transmit>
            HAL_Delay(30);
 80015ae:	201e      	movs	r0, #30
 80015b0:	f006 fe98 	bl	80082e4 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80015b4:	2110      	movs	r1, #16
 80015b6:	481f      	ldr	r0, [pc, #124]	; (8001634 <homing+0x67c>)
 80015b8:	f007 fa12 	bl	80089e0 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <homing+0x61a>
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <homing+0x688>)
 80015c4:	7e1b      	ldrb	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <homing+0x61a>
 80015ca:	2100      	movs	r1, #0
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <homing+0x674>)
 80015ce:	f008 f9af 	bl	8009930 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <homing+0x680>)
 80015d8:	f007 fa02 	bl	80089e0 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <homing+0x63a>
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <homing+0x698>)
 80015e4:	7e1b      	ldrb	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <homing+0x63a>
 80015ea:	2100      	movs	r1, #0
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <homing+0x664>)
 80015ee:	f008 f99f 	bl	8009930 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <homing+0x680>)
 80015f8:	f007 f9f2 	bl	80089e0 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d171      	bne.n	80016e6 <homing+0x72e>

            Stop_PWM_MOTOR_1;
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <homing+0x674>)
 8001606:	f008 fa43 	bl	8009a90 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <homing+0x678>)
 800160e:	f008 fa3f 	bl	8009a90 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001612:	201e      	movs	r0, #30
 8001614:	f006 fe66 	bl	80082e4 <HAL_Delay>

            while(ES3s_PRESSED){
 8001618:	e02e      	b.n	8001678 <homing+0x6c0>
 800161a:	bf00      	nop
 800161c:	20000440 	.word	0x20000440
 8001620:	40010000 	.word	0x40010000
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800
 800162c:	20000368 	.word	0x20000368
 8001630:	200003f8 	.word	0x200003f8
 8001634:	40020400 	.word	0x40020400
 8001638:	40020800 	.word	0x40020800
 800163c:	20000274 	.word	0x20000274
 8001640:	200005f0 	.word	0x200005f0
 8001644:	08010730 	.word	0x08010730
 8001648:	200005a8 	.word	0x200005a8
 800164c:	20000638 	.word	0x20000638
 8001650:	20000680 	.word	0x20000680
 8001654:	08010734 	.word	0x08010734

                negative_Dir_MOTOR_3;
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4830      	ldr	r0, [pc, #192]	; (8001720 <homing+0x768>)
 800165e:	f007 f9d7 	bl	8008a10 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001662:	2000      	movs	r0, #0
 8001664:	f006 fe3e 	bl	80082e4 <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001668:	2100      	movs	r1, #0
 800166a:	482e      	ldr	r0, [pc, #184]	; (8001724 <homing+0x76c>)
 800166c:	f008 f960 	bl	8009930 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001674:	f006 fe36 	bl	80082e4 <HAL_Delay>
            while(ES3s_PRESSED){
 8001678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167c:	4828      	ldr	r0, [pc, #160]	; (8001720 <homing+0x768>)
 800167e:	f007 f9af 	bl	80089e0 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0e7      	beq.n	8001658 <homing+0x6a0>
            }

            Stop_PWM_MOTOR_3;
 8001688:	2100      	movs	r1, #0
 800168a:	4826      	ldr	r0, [pc, #152]	; (8001724 <homing+0x76c>)
 800168c:	f008 fa00 	bl	8009a90 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <homing+0x770>)
 8001692:	2201      	movs	r2, #1
 8001694:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F3\n", 4, 100);
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	2204      	movs	r2, #4
 800169a:	4924      	ldr	r1, [pc, #144]	; (800172c <homing+0x774>)
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <homing+0x778>)
 800169e:	f009 fc86 	bl	800afae <HAL_UART_Transmit>
			HAL_Delay(30);
 80016a2:	201e      	movs	r0, #30
 80016a4:	f006 fe1e 	bl	80082e4 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80016a8:	2110      	movs	r1, #16
 80016aa:	4822      	ldr	r0, [pc, #136]	; (8001734 <homing+0x77c>)
 80016ac:	f007 f998 	bl	80089e0 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <homing+0x70e>
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <homing+0x780>)
 80016b8:	7e1b      	ldrb	r3, [r3, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <homing+0x70e>
 80016be:	2100      	movs	r1, #0
 80016c0:	481e      	ldr	r0, [pc, #120]	; (800173c <homing+0x784>)
 80016c2:	f008 f935 	bl	8009930 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4815      	ldr	r0, [pc, #84]	; (8001720 <homing+0x768>)
 80016cc:	f007 f988 	bl	80089e0 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <homing+0x72e>
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <homing+0x788>)
 80016d8:	7e1b      	ldrb	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <homing+0x72e>
 80016de:	2100      	movs	r1, #0
 80016e0:	4818      	ldr	r0, [pc, #96]	; (8001744 <homing+0x78c>)
 80016e2:	f008 f925 	bl	8009930 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <homing+0x780>)
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <homing+0x758>
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <homing+0x788>)
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <homing+0x758>
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <homing+0x770>)
 80016f8:	7e1b      	ldrb	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <homing+0x758>
        	homFin=true;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <homing+0x790>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2,(uint8_t *)"FH\n", 4, 100);
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	2204      	movs	r2, #4
 8001708:	4910      	ldr	r1, [pc, #64]	; (800174c <homing+0x794>)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <homing+0x778>)
 800170c:	f009 fc4f 	bl	800afae <HAL_UART_Transmit>
    while (!homFin){
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <homing+0x790>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f43f aeaf 	beq.w	8001478 <homing+0x4c0>
        }
       }


    }
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	40020800 	.word	0x40020800
 8001724:	20000440 	.word	0x20000440
 8001728:	20000680 	.word	0x20000680
 800172c:	08010738 	.word	0x08010738
 8001730:	200005a8 	.word	0x200005a8
 8001734:	40020400 	.word	0x40020400
 8001738:	200005f0 	.word	0x200005f0
 800173c:	20000368 	.word	0x20000368
 8001740:	20000638 	.word	0x20000638
 8001744:	200003f8 	.word	0x200003f8
 8001748:	200006d9 	.word	0x200006d9
 800174c:	0801073c 	.word	0x0801073c

08001750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001754:	f3bf 8f4f 	dsb	sy
}
 8001758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SystemReset+0x24>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001762:	4904      	ldr	r1, [pc, #16]	; (8001774 <__NVIC_SystemReset+0x24>)
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_SystemReset+0x28>)
 8001766:	4313      	orrs	r3, r2
 8001768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800176a:	f3bf 8f4f 	dsb	sy
}
 800176e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <__NVIC_SystemReset+0x20>
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	05fa0004 	.word	0x05fa0004

0800177c <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001782:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <interpretaComando+0x268>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3b44      	subs	r3, #68	; 0x44
 8001788:	2b2e      	cmp	r3, #46	; 0x2e
 800178a:	f200 817e 	bhi.w	8001a8a <interpretaComando+0x30e>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <interpretaComando+0x18>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	08001a7d 	.word	0x08001a7d
 8001798:	08001a8b 	.word	0x08001a8b
 800179c:	08001a8b 	.word	0x08001a8b
 80017a0:	08001a8b 	.word	0x08001a8b
 80017a4:	08001851 	.word	0x08001851
 80017a8:	08001a8b 	.word	0x08001a8b
 80017ac:	08001a8b 	.word	0x08001a8b
 80017b0:	08001a8b 	.word	0x08001a8b
 80017b4:	08001a8b 	.word	0x08001a8b
 80017b8:	08001a8b 	.word	0x08001a8b
 80017bc:	08001a8b 	.word	0x08001a8b
 80017c0:	08001a8b 	.word	0x08001a8b
 80017c4:	08001859 	.word	0x08001859
 80017c8:	08001a8b 	.word	0x08001a8b
 80017cc:	08001a6d 	.word	0x08001a6d
 80017d0:	08001a8b 	.word	0x08001a8b
 80017d4:	08001a8b 	.word	0x08001a8b
 80017d8:	08001a8b 	.word	0x08001a8b
 80017dc:	08001a8b 	.word	0x08001a8b
 80017e0:	08001a8b 	.word	0x08001a8b
 80017e4:	08001a8b 	.word	0x08001a8b
 80017e8:	08001a8b 	.word	0x08001a8b
 80017ec:	08001a8b 	.word	0x08001a8b
 80017f0:	08001a8b 	.word	0x08001a8b
 80017f4:	08001a8b 	.word	0x08001a8b
 80017f8:	08001a8b 	.word	0x08001a8b
 80017fc:	08001a8b 	.word	0x08001a8b
 8001800:	08001a8b 	.word	0x08001a8b
 8001804:	08001a8b 	.word	0x08001a8b
 8001808:	08001a8b 	.word	0x08001a8b
 800180c:	08001a8b 	.word	0x08001a8b
 8001810:	08001a8b 	.word	0x08001a8b
 8001814:	08001a7d 	.word	0x08001a7d
 8001818:	08001a8b 	.word	0x08001a8b
 800181c:	08001a8b 	.word	0x08001a8b
 8001820:	08001a8b 	.word	0x08001a8b
 8001824:	08001851 	.word	0x08001851
 8001828:	08001a8b 	.word	0x08001a8b
 800182c:	08001a8b 	.word	0x08001a8b
 8001830:	08001a8b 	.word	0x08001a8b
 8001834:	08001a8b 	.word	0x08001a8b
 8001838:	08001a8b 	.word	0x08001a8b
 800183c:	08001a8b 	.word	0x08001a8b
 8001840:	08001a8b 	.word	0x08001a8b
 8001844:	08001859 	.word	0x08001859
 8001848:	08001a8b 	.word	0x08001a8b
 800184c:	08001a6d 	.word	0x08001a6d


	case 'H':
	case 'h':
		state = HOME;
 8001850:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <interpretaComando+0x26c>)
 8001852:	2203      	movs	r2, #3
 8001854:	701a      	strb	r2, [r3, #0]
	break;
 8001856:	e119      	b.n	8001a8c <interpretaComando+0x310>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <interpretaComando+0x270>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
		j = 0;
 800185e:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <interpretaComando+0x274>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001864:	e0f3      	b.n	8001a4e <interpretaComando+0x2d2>
			if(rx_buffer[i] == 'x'){
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <interpretaComando+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5e      	ldr	r2, [pc, #376]	; (80019e4 <interpretaComando+0x268>)
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	2b78      	cmp	r3, #120	; 0x78
 8001870:	d13d      	bne.n	80018ee <interpretaComando+0x172>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001872:	e012      	b.n	800189a <interpretaComando+0x11e>
					auxString[j] = rx_buffer[i+1];
 8001874:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <interpretaComando+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <interpretaComando+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4959      	ldr	r1, [pc, #356]	; (80019e4 <interpretaComando+0x268>)
 8001880:	5c89      	ldrb	r1, [r1, r2]
 8001882:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <interpretaComando+0x278>)
 8001884:	54d1      	strb	r1, [r2, r3]
					j++;
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <interpretaComando+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <interpretaComando+0x274>)
 800188e:	6013      	str	r3, [r2, #0]
					i++;
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <interpretaComando+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <interpretaComando+0x270>)
 8001898:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <interpretaComando+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <interpretaComando+0x268>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d1e5      	bne.n	8001874 <interpretaComando+0xf8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80018a8:	2100      	movs	r1, #0
 80018aa:	4852      	ldr	r0, [pc, #328]	; (80019f4 <interpretaComando+0x278>)
 80018ac:	f00c f836 	bl	800d91c <strtod>
 80018b0:	eeb0 7a40 	vmov.f32	s14, s0
 80018b4:	eef0 7a60 	vmov.f32	s15, s1
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <interpretaComando+0x27c>)
 80018ba:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e007      	b.n	80018d4 <interpretaComando+0x158>
					auxString[k] = 0;
 80018c4:	4a4b      	ldr	r2, [pc, #300]	; (80019f4 <interpretaComando+0x278>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b0a      	cmp	r3, #10
 80018d8:	ddf4      	ble.n	80018c4 <interpretaComando+0x148>
				}
				j=0;
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <interpretaComando+0x274>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *)"Px_ok\n", 7, 100);
 80018e0:	2364      	movs	r3, #100	; 0x64
 80018e2:	2207      	movs	r2, #7
 80018e4:	4945      	ldr	r1, [pc, #276]	; (80019fc <interpretaComando+0x280>)
 80018e6:	4846      	ldr	r0, [pc, #280]	; (8001a00 <interpretaComando+0x284>)
 80018e8:	f009 fb61 	bl	800afae <HAL_UART_Transmit>
 80018ec:	e0aa      	b.n	8001a44 <interpretaComando+0x2c8>
			}
			else if(rx_buffer[i] == 'y'){
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <interpretaComando+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a3c      	ldr	r2, [pc, #240]	; (80019e4 <interpretaComando+0x268>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	2b79      	cmp	r3, #121	; 0x79
 80018f8:	d13d      	bne.n	8001976 <interpretaComando+0x1fa>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018fa:	e012      	b.n	8001922 <interpretaComando+0x1a6>
					auxString[j] = rx_buffer[i+1];
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <interpretaComando+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <interpretaComando+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4937      	ldr	r1, [pc, #220]	; (80019e4 <interpretaComando+0x268>)
 8001908:	5c89      	ldrb	r1, [r1, r2]
 800190a:	4a3a      	ldr	r2, [pc, #232]	; (80019f4 <interpretaComando+0x278>)
 800190c:	54d1      	strb	r1, [r2, r3]
					j++;
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <interpretaComando+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	4a36      	ldr	r2, [pc, #216]	; (80019f0 <interpretaComando+0x274>)
 8001916:	6013      	str	r3, [r2, #0]
					i++;
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <interpretaComando+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a33      	ldr	r2, [pc, #204]	; (80019ec <interpretaComando+0x270>)
 8001920:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <interpretaComando+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <interpretaComando+0x268>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d1e5      	bne.n	80018fc <interpretaComando+0x180>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001930:	2100      	movs	r1, #0
 8001932:	4830      	ldr	r0, [pc, #192]	; (80019f4 <interpretaComando+0x278>)
 8001934:	f00b fff2 	bl	800d91c <strtod>
 8001938:	eeb0 7a40 	vmov.f32	s14, s0
 800193c:	eef0 7a60 	vmov.f32	s15, s1
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <interpretaComando+0x27c>)
 8001942:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	e007      	b.n	800195c <interpretaComando+0x1e0>
					auxString[k] = 0;
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <interpretaComando+0x278>)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4413      	add	r3, r2
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3301      	adds	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b0a      	cmp	r3, #10
 8001960:	ddf4      	ble.n	800194c <interpretaComando+0x1d0>
				}
				j=0;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <interpretaComando+0x274>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Py_ok\n", 7, 100);
 8001968:	2364      	movs	r3, #100	; 0x64
 800196a:	2207      	movs	r2, #7
 800196c:	4925      	ldr	r1, [pc, #148]	; (8001a04 <interpretaComando+0x288>)
 800196e:	4824      	ldr	r0, [pc, #144]	; (8001a00 <interpretaComando+0x284>)
 8001970:	f009 fb1d 	bl	800afae <HAL_UART_Transmit>
 8001974:	e066      	b.n	8001a44 <interpretaComando+0x2c8>
			}
			else if(rx_buffer[i] == 'z'){
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <interpretaComando+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <interpretaComando+0x268>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	2b7a      	cmp	r3, #122	; 0x7a
 8001980:	d160      	bne.n	8001a44 <interpretaComando+0x2c8>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001982:	e012      	b.n	80019aa <interpretaComando+0x22e>
					auxString[j] = rx_buffer[i+1];
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <interpretaComando+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <interpretaComando+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4915      	ldr	r1, [pc, #84]	; (80019e4 <interpretaComando+0x268>)
 8001990:	5c89      	ldrb	r1, [r1, r2]
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <interpretaComando+0x278>)
 8001994:	54d1      	strb	r1, [r2, r3]
					j++;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <interpretaComando+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <interpretaComando+0x274>)
 800199e:	6013      	str	r3, [r2, #0]
					i++;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <interpretaComando+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <interpretaComando+0x270>)
 80019a8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <interpretaComando+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <interpretaComando+0x268>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d006      	beq.n	80019c6 <interpretaComando+0x24a>
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <interpretaComando+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <interpretaComando+0x268>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1de      	bne.n	8001984 <interpretaComando+0x208>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80019c6:	2100      	movs	r1, #0
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <interpretaComando+0x278>)
 80019ca:	f00b ffa7 	bl	800d91c <strtod>
 80019ce:	eeb0 7a40 	vmov.f32	s14, s0
 80019d2:	eef0 7a60 	vmov.f32	s15, s1
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <interpretaComando+0x27c>)
 80019d8:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e01a      	b.n	8001a18 <interpretaComando+0x29c>
 80019e2:	bf00      	nop
 80019e4:	200007fc 	.word	0x200007fc
 80019e8:	200006d8 	.word	0x200006d8
 80019ec:	20000284 	.word	0x20000284
 80019f0:	20000288 	.word	0x20000288
 80019f4:	20000278 	.word	0x20000278
 80019f8:	20000738 	.word	0x20000738
 80019fc:	08010740 	.word	0x08010740
 8001a00:	200005a8 	.word	0x200005a8
 8001a04:	08010748 	.word	0x08010748
					auxString[k] = 0;
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <interpretaComando+0x318>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	ddf4      	ble.n	8001a08 <interpretaComando+0x28c>
				}
				j=0;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <interpretaComando+0x31c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Pz_ok\n", 7, 100);
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	2207      	movs	r2, #7
 8001a28:	491c      	ldr	r1, [pc, #112]	; (8001a9c <interpretaComando+0x320>)
 8001a2a:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <interpretaComando+0x324>)
 8001a2c:	f009 fabf 	bl	800afae <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <interpretaComando+0x328>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <interpretaComando+0x32c>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d102      	bne.n	8001a44 <interpretaComando+0x2c8>
				    newline_detected = true;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <interpretaComando+0x330>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <interpretaComando+0x328>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <interpretaComando+0x328>)
 8001a4c:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <interpretaComando+0x328>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <interpretaComando+0x32c>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <interpretaComando+0x2e8>
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <interpretaComando+0x330>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f43f af01 	beq.w	8001866 <interpretaComando+0xea>
		}

		receptionFlag = true;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <interpretaComando+0x334>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
		break;
 8001a6a:	e00f      	b.n	8001a8c <interpretaComando+0x310>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart2, (uint8_t *)"Resetting...\n", 14, 100);
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	220e      	movs	r2, #14
 8001a70:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <interpretaComando+0x338>)
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <interpretaComando+0x324>)
 8001a74:	f009 fa9b 	bl	800afae <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001a78:	f7ff fe6a 	bl	8001750 <__NVIC_SystemReset>

		break;

	case 'd':
	case 'D':
		readFile = true;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <interpretaComando+0x33c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
		state = DEMO;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <interpretaComando+0x340>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	701a      	strb	r2, [r3, #0]
		break;
 8001a88:	e000      	b.n	8001a8c <interpretaComando+0x310>

	default:break;
 8001a8a:	bf00      	nop


	}

}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000278 	.word	0x20000278
 8001a98:	20000288 	.word	0x20000288
 8001a9c:	08010750 	.word	0x08010750
 8001aa0:	200005a8 	.word	0x200005a8
 8001aa4:	20000284 	.word	0x20000284
 8001aa8:	200007fc 	.word	0x200007fc
 8001aac:	20000276 	.word	0x20000276
 8001ab0:	2000081b 	.word	0x2000081b
 8001ab4:	08010758 	.word	0x08010758
 8001ab8:	2000081c 	.word	0x2000081c
 8001abc:	200006d8 	.word	0x200006d8

08001ac0 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b090      	sub	sp, #64	; 0x40
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	eeb0 5a40 	vmov.f32	s10, s0
 8001acc:	eef0 5a60 	vmov.f32	s11, s1
 8001ad0:	eeb0 6a41 	vmov.f32	s12, s2
 8001ad4:	eef0 6a61 	vmov.f32	s13, s3
 8001ad8:	eeb0 7a42 	vmov.f32	s14, s4
 8001adc:	eef0 7a62 	vmov.f32	s15, s5
 8001ae0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001ae4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001ae8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001aec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001af0:	a3f3      	add	r3, pc, #972	; (adr r3, 8001ec0 <inverseKinematic+0x400>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fbcf 	bl	8000298 <__aeabi_dsub>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	a3ed      	add	r3, pc, #948	; (adr r3, 8001eb8 <inverseKinematic+0x3f8>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fbc8 	bl	800029c <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b1c:	f7fe fd74 	bl	8000608 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	f7fe fbb4 	bl	800029c <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fe8e 	bl	800085c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b17 	vmov	d7, r2, r3
 8001b48:	ed9f 1bcf 	vldr	d1, [pc, #828]	; 8001e88 <inverseKinematic+0x3c8>
 8001b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b50:	eef0 0a67 	vmov.f32	s1, s15
 8001b54:	f00d fc84 	bl	800f460 <pow>
 8001b58:	ec51 0b10 	vmov	r0, r1, d0
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4be1      	ldr	r3, [pc, #900]	; (8001ee8 <inverseKinematic+0x428>)
 8001b62:	f7fe fb9b 	bl	800029c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4bdf      	ldr	r3, [pc, #892]	; (8001eec <inverseKinematic+0x42c>)
 8001b70:	e9c3 0100 	strd	r0, r1, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001b74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b78:	a3c5      	add	r3, pc, #788	; (adr r3, 8001e90 <inverseKinematic+0x3d0>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fb8d 	bl	800029c <__adddf3>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001e98 <inverseKinematic+0x3d8>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fd3a 	bl	8000608 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	a1c1      	add	r1, pc, #772	; (adr r1, 8001ea0 <inverseKinematic+0x3e0>)
 8001b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9e:	f7fe fb7b 	bl	8000298 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bae:	a3be      	add	r3, pc, #760	; (adr r3, 8001ea8 <inverseKinematic+0x3e8>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fb72 	bl	800029c <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f7fe fb6a 	bl	800029c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb62 	bl	8000298 <__aeabi_dsub>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	f7fe fb5a 	bl	800029c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fe34 	bl	800085c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	ec43 2b17 	vmov	d7, r2, r3
 8001bfc:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8001e88 <inverseKinematic+0x3c8>
 8001c00:	eeb0 0a47 	vmov.f32	s0, s14
 8001c04:	eef0 0a67 	vmov.f32	s1, s15
 8001c08:	f00d fc2a 	bl	800f460 <pow>
 8001c0c:	ec51 0b10 	vmov	r0, r1, d0
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4bb6      	ldr	r3, [pc, #728]	; (8001ef0 <inverseKinematic+0x430>)
 8001c16:	f7fe fb41 	bl	800029c <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4bb4      	ldr	r3, [pc, #720]	; (8001ef4 <inverseKinematic+0x434>)
 8001c24:	e9c3 0100 	strd	r0, r1, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001c28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c2c:	a398      	add	r3, pc, #608	; (adr r3, 8001e90 <inverseKinematic+0x3d0>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fb31 	bl	8000298 <__aeabi_dsub>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	a396      	add	r3, pc, #600	; (adr r3, 8001e98 <inverseKinematic+0x3d8>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fce0 	bl	8000608 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	461d      	mov	r5, r3
 8001c50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c54:	a394      	add	r3, pc, #592	; (adr r3, 8001ea8 <inverseKinematic+0x3e8>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fb1f 	bl	800029c <__adddf3>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	f7fe fb17 	bl	800029c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fb0f 	bl	8000298 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	a38b      	add	r3, pc, #556	; (adr r3, 8001eb0 <inverseKinematic+0x3f0>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fb08 	bl	800029c <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	a388      	add	r3, pc, #544	; (adr r3, 8001eb8 <inverseKinematic+0x3f8>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe faff 	bl	800029c <__adddf3>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	f7fe faf5 	bl	800029c <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fdcf 	bl	800085c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ec43 2b17 	vmov	d7, r2, r3
 8001cc6:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001e88 <inverseKinematic+0x3c8>
 8001cca:	eeb0 0a47 	vmov.f32	s0, s14
 8001cce:	eef0 0a67 	vmov.f32	s1, s15
 8001cd2:	f00d fbc5 	bl	800f460 <pow>
 8001cd6:	ec51 0b10 	vmov	r0, r1, d0
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <inverseKinematic+0x430>)
 8001ce0:	f7fe fadc 	bl	800029c <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <inverseKinematic+0x438>)
 8001cee:	e9c3 0100 	strd	r0, r1, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001cf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cf6:	a372      	add	r3, pc, #456	; (adr r3, 8001ec0 <inverseKinematic+0x400>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe facc 	bl	8000298 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	a36b      	add	r3, pc, #428	; (adr r3, 8001eb8 <inverseKinematic+0x3f8>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fac5 	bl	800029c <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	f7fe fab1 	bl	800029c <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4620      	mov	r0, r4
 8001d40:	4629      	mov	r1, r5
 8001d42:	f7fe fd8b 	bl	800085c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	f7fe faa3 	bl	800029c <__adddf3>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d62:	a357      	add	r3, pc, #348	; (adr r3, 8001ec0 <inverseKinematic+0x400>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fa96 	bl	8000298 <__aeabi_dsub>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
 8001d74:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001e88 <inverseKinematic+0x3c8>
 8001d78:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7c:	eef0 0a67 	vmov.f32	s1, s15
 8001d80:	f00d fb6e 	bl	800f460 <pow>
 8001d84:	ec51 0b10 	vmov	r0, r1, d0
 8001d88:	a34f      	add	r3, pc, #316	; (adr r3, 8001ec8 <inverseKinematic+0x408>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fa85 	bl	800029c <__adddf3>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001d9e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001e88 <inverseKinematic+0x3c8>
 8001da2:	eeb0 0a47 	vmov.f32	s0, s14
 8001da6:	eef0 0a67 	vmov.f32	s1, s15
 8001daa:	f00d fb59 	bl	800f460 <pow>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fa71 	bl	800029c <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	a343      	add	r3, pc, #268	; (adr r3, 8001ed0 <inverseKinematic+0x410>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fa66 	bl	8000298 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001dd8:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001e88 <inverseKinematic+0x3c8>
 8001ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8001de0:	eef0 0a67 	vmov.f32	s1, s15
 8001de4:	f00d fb3c 	bl	800f460 <pow>
 8001de8:	ec53 2b10 	vmov	r2, r3, d0
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fa54 	bl	800029c <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	f7fe fa4a 	bl	800029c <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fd24 	bl	800085c <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4640      	mov	r0, r8
 8001e1a:	4649      	mov	r1, r9
 8001e1c:	f7fe fbf4 	bl	8000608 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	a32b      	add	r3, pc, #172	; (adr r3, 8001ed8 <inverseKinematic+0x418>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <inverseKinematic+0x43c>)
 8001e3c:	e9c3 0100 	strd	r0, r1, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001e40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e44:	a312      	add	r3, pc, #72	; (adr r3, 8001e90 <inverseKinematic+0x3d0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fa27 	bl	800029c <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	a322      	add	r3, pc, #136	; (adr r3, 8001ee0 <inverseKinematic+0x420>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbd4 	bl	8000608 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e6c:	a30e      	add	r3, pc, #56	; (adr r3, 8001ea8 <inverseKinematic+0x3e8>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fa13 	bl	800029c <__adddf3>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	e03d      	b.n	8001f00 <inverseKinematic+0x440>
 8001e84:	f3af 8000 	nop.w
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40000000 	.word	0x40000000
 8001e90:	5625749b 	.word	0x5625749b
 8001e94:	3faf09d1 	.word	0x3faf09d1
 8001e98:	e8584caa 	.word	0xe8584caa
 8001e9c:	400bb67a 	.word	0x400bb67a
 8001ea0:	24dd2f1d 	.word	0x24dd2f1d
 8001ea4:	3fe58106 	.word	0x3fe58106
 8001ea8:	1eb851ec 	.word	0x1eb851ec
 8001eac:	3fa1eb85 	.word	0x3fa1eb85
 8001eb0:	9ba5e356 	.word	0x9ba5e356
 8001eb4:	3fe020c4 	.word	0x3fe020c4
 8001eb8:	24dd2f1b 	.word	0x24dd2f1b
 8001ebc:	3fc58106 	.word	0x3fc58106
 8001ec0:	1eb851ec 	.word	0x1eb851ec
 8001ec4:	3fb1eb85 	.word	0x3fb1eb85
 8001ec8:	f705857e 	.word	0xf705857e
 8001ecc:	3f881e03 	.word	0x3f881e03
 8001ed0:	70a3d70a 	.word	0x70a3d70a
 8001ed4:	3fd70a3d 	.word	0x3fd70a3d
 8001ed8:	24dd2f1b 	.word	0x24dd2f1b
 8001edc:	3fd58106 	.word	0x3fd58106
 8001ee0:	e8584caa 	.word	0xe8584caa
 8001ee4:	c00bb67a 	.word	0xc00bb67a
 8001ee8:	3ff00000 	.word	0x3ff00000
 8001eec:	20000290 	.word	0x20000290
 8001ef0:	40100000 	.word	0x40100000
 8001ef4:	200002d8 	.word	0x200002d8
 8001ef8:	20000320 	.word	0x20000320
 8001efc:	20000298 	.word	0x20000298
 8001f00:	f7fe f9cc 	bl	800029c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9c4 	bl	8000298 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe f9bc 	bl	800029c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	f7fe f9b2 	bl	800029c <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe fc8c 	bl	800085c <__aeabi_ddiv>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	f7fe f9a4 	bl	800029c <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4690      	mov	r8, r2
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f60:	a3ed      	add	r3, pc, #948	; (adr r3, 8002318 <inverseKinematic+0x858>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe f999 	bl	800029c <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	ec43 2b17 	vmov	d7, r2, r3
 8001f72:	ed9f 1be7 	vldr	d1, [pc, #924]	; 8002310 <inverseKinematic+0x850>
 8001f76:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7a:	eef0 0a67 	vmov.f32	s1, s15
 8001f7e:	f00d fa6f 	bl	800f460 <pow>
 8001f82:	ec51 0b10 	vmov	r0, r1, d0
 8001f86:	a3fa      	add	r3, pc, #1000	; (adr r3, 8002370 <inverseKinematic+0x8b0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe f986 	bl	800029c <__adddf3>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f9c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002328 <inverseKinematic+0x868>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe f97b 	bl	800029c <__adddf3>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	ec43 2b17 	vmov	d7, r2, r3
 8001fae:	ed9f 1bd8 	vldr	d1, [pc, #864]	; 8002310 <inverseKinematic+0x850>
 8001fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb6:	eef0 0a67 	vmov.f32	s1, s15
 8001fba:	f00d fa51 	bl	800f460 <pow>
 8001fbe:	ec53 2b10 	vmov	r2, r3, d0
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	f7fe f969 	bl	800029c <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001fd6:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8002310 <inverseKinematic+0x850>
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	f00d fa3d 	bl	800f460 <pow>
 8001fe6:	ec53 2b10 	vmov	r2, r3, d0
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f955 	bl	800029c <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	a3d1      	add	r3, pc, #836	; (adr r3, 8002340 <inverseKinematic+0x880>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe f94a 	bl	8000298 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	f7fe f942 	bl	800029c <__adddf3>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe fc1c 	bl	800085c <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4640      	mov	r0, r8
 800202a:	4649      	mov	r1, r9
 800202c:	f7fe faec 	bl	8000608 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	a3c7      	add	r3, pc, #796	; (adr r3, 8002358 <inverseKinematic+0x898>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe f92b 	bl	8000298 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4bc7      	ldr	r3, [pc, #796]	; (8002368 <inverseKinematic+0x8a8>)
 800204c:	e9c3 0100 	strd	r0, r1, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002050:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002054:	a3b0      	add	r3, pc, #704	; (adr r3, 8002318 <inverseKinematic+0x858>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe f91d 	bl	8000298 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	a3ae      	add	r3, pc, #696	; (adr r3, 8002320 <inverseKinematic+0x860>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe facc 	bl	8000608 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800207c:	a3aa      	add	r3, pc, #680	; (adr r3, 8002328 <inverseKinematic+0x868>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe f90b 	bl	800029c <__adddf3>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	f7fe f903 	bl	800029c <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f7fe f8fb 	bl	8000298 <__aeabi_dsub>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	a3a1      	add	r3, pc, #644	; (adr r3, 8002330 <inverseKinematic+0x870>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe f8f4 	bl	800029c <__adddf3>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	a39e      	add	r3, pc, #632	; (adr r3, 8002338 <inverseKinematic+0x878>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe f8eb 	bl	800029c <__adddf3>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4614      	mov	r4, r2
 80020cc:	461d      	mov	r5, r3
 80020ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	f7fe f8e1 	bl	800029c <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f7fe fbbb 	bl	800085c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	f7fe f8d3 	bl	800029c <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4690      	mov	r8, r2
 80020fc:	4699      	mov	r9, r3
 80020fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002102:	a385      	add	r3, pc, #532	; (adr r3, 8002318 <inverseKinematic+0x858>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe f8c6 	bl	8000298 <__aeabi_dsub>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	ec43 2b17 	vmov	d7, r2, r3
 8002114:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002310 <inverseKinematic+0x850>
 8002118:	eeb0 0a47 	vmov.f32	s0, s14
 800211c:	eef0 0a67 	vmov.f32	s1, s15
 8002120:	f00d f99e 	bl	800f460 <pow>
 8002124:	ec55 4b10 	vmov	r4, r5, d0
 8002128:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800212c:	a37e      	add	r3, pc, #504	; (adr r3, 8002328 <inverseKinematic+0x868>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f8b3 	bl	800029c <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	ec43 2b17 	vmov	d7, r2, r3
 800213e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002310 <inverseKinematic+0x850>
 8002142:	eeb0 0a47 	vmov.f32	s0, s14
 8002146:	eef0 0a67 	vmov.f32	s1, s15
 800214a:	f00d f989 	bl	800f460 <pow>
 800214e:	ec53 2b10 	vmov	r2, r3, d0
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f8a1 	bl	800029c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4614      	mov	r4, r2
 8002160:	461d      	mov	r5, r3
 8002162:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002166:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8002310 <inverseKinematic+0x850>
 800216a:	eeb0 0a47 	vmov.f32	s0, s14
 800216e:	eef0 0a67 	vmov.f32	s1, s15
 8002172:	f00d f975 	bl	800f460 <pow>
 8002176:	ec53 2b10 	vmov	r2, r3, d0
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe f88d 	bl	800029c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	a36d      	add	r3, pc, #436	; (adr r3, 8002340 <inverseKinematic+0x880>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f882 	bl	8000298 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	a36a      	add	r3, pc, #424	; (adr r3, 8002348 <inverseKinematic+0x888>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe f879 	bl	8000298 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	a368      	add	r3, pc, #416	; (adr r3, 8002350 <inverseKinematic+0x890>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe f872 	bl	800029c <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	f7fe f868 	bl	800029c <__adddf3>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe fb42 	bl	800085c <__aeabi_ddiv>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4640      	mov	r0, r8
 80021de:	4649      	mov	r1, r9
 80021e0:	f7fe fa12 	bl	8000608 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	a35a      	add	r3, pc, #360	; (adr r3, 8002358 <inverseKinematic+0x898>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f7fe f851 	bl	8000298 <__aeabi_dsub>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	4b5b      	ldr	r3, [pc, #364]	; (800236c <inverseKinematic+0x8ac>)
 8002200:	e9c3 0100 	strd	r0, r1, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8002204:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002208:	a355      	add	r3, pc, #340	; (adr r3, 8002360 <inverseKinematic+0x8a0>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe f843 	bl	8000298 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	ec43 2b17 	vmov	d7, r2, r3
 800221a:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002310 <inverseKinematic+0x850>
 800221e:	eeb0 0a47 	vmov.f32	s0, s14
 8002222:	eef0 0a67 	vmov.f32	s1, s15
 8002226:	f00d f91b 	bl	800f460 <pow>
 800222a:	ec55 4b10 	vmov	r4, r5, d0
 800222e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002232:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8002310 <inverseKinematic+0x850>
 8002236:	eeb0 0a47 	vmov.f32	s0, s14
 800223a:	eef0 0a67 	vmov.f32	s1, s15
 800223e:	f00d f90f 	bl	800f460 <pow>
 8002242:	ec53 2b10 	vmov	r2, r3, d0
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fe f827 	bl	800029c <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	a33a      	add	r3, pc, #232	; (adr r3, 8002340 <inverseKinematic+0x880>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f81c 	bl	8000298 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800226c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002310 <inverseKinematic+0x850>
 8002270:	eeb0 0a47 	vmov.f32	s0, s14
 8002274:	eef0 0a67 	vmov.f32	s1, s15
 8002278:	f00d f8f2 	bl	800f460 <pow>
 800227c:	ec53 2b10 	vmov	r2, r3, d0
 8002280:	4620      	mov	r0, r4
 8002282:	4629      	mov	r1, r5
 8002284:	f7fe f80a 	bl	800029c <__adddf3>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	a32d      	add	r3, pc, #180	; (adr r3, 8002348 <inverseKinematic+0x888>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fd ffff 	bl	8000298 <__aeabi_dsub>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	a32b      	add	r3, pc, #172	; (adr r3, 8002350 <inverseKinematic+0x890>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fd fff8 	bl	800029c <__adddf3>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	f7fd ffee 	bl	800029c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4620      	mov	r0, r4
 80022c6:	4629      	mov	r1, r5
 80022c8:	f7fe fac8 	bl	800085c <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	ec43 2b17 	vmov	d7, r2, r3
 80022d4:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002310 <inverseKinematic+0x850>
 80022d8:	eeb0 0a47 	vmov.f32	s0, s14
 80022dc:	eef0 0a67 	vmov.f32	s1, s15
 80022e0:	f00d f8be 	bl	800f460 <pow>
 80022e4:	ec51 0b10 	vmov	r0, r1, d0
 80022e8:	a319      	add	r3, pc, #100	; (adr r3, 8002350 <inverseKinematic+0x890>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fd ffd3 	bl	8000298 <__aeabi_dsub>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a313      	add	r3, pc, #76	; (adr r3, 8002348 <inverseKinematic+0x888>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fd ffcc 	bl	800029c <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	e036      	b.n	8002378 <inverseKinematic+0x8b8>
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w
 8002310:	00000000 	.word	0x00000000
 8002314:	40000000 	.word	0x40000000
 8002318:	5625749b 	.word	0x5625749b
 800231c:	3faf09d1 	.word	0x3faf09d1
 8002320:	e8584caa 	.word	0xe8584caa
 8002324:	400bb67a 	.word	0x400bb67a
 8002328:	1eb851ec 	.word	0x1eb851ec
 800232c:	3fa1eb85 	.word	0x3fa1eb85
 8002330:	9ba5e356 	.word	0x9ba5e356
 8002334:	3fe020c4 	.word	0x3fe020c4
 8002338:	24dd2f1b 	.word	0x24dd2f1b
 800233c:	3fc58106 	.word	0x3fc58106
 8002340:	70a3d70a 	.word	0x70a3d70a
 8002344:	3fd70a3d 	.word	0x3fd70a3d
 8002348:	93d96639 	.word	0x93d96639
 800234c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002350:	47ae147c 	.word	0x47ae147c
 8002354:	3fa47ae1 	.word	0x3fa47ae1
 8002358:	24dd2f1d 	.word	0x24dd2f1d
 800235c:	3fe58106 	.word	0x3fe58106
 8002360:	1eb851ec 	.word	0x1eb851ec
 8002364:	3fb1eb85 	.word	0x3fb1eb85
 8002368:	200002e0 	.word	0x200002e0
 800236c:	20000328 	.word	0x20000328
 8002370:	f705857e 	.word	0xf705857e
 8002374:	3f881e03 	.word	0x3f881e03
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	4bde      	ldr	r3, [pc, #888]	; (80026f8 <inverseKinematic+0xc38>)
 800237e:	e9c3 0100 	strd	r0, r1, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8002382:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002386:	a3ce      	add	r3, pc, #824	; (adr r3, 80026c0 <inverseKinematic+0xc00>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fd ff86 	bl	800029c <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	ec43 2b17 	vmov	d7, r2, r3
 8002398:	ed9f 1bcb 	vldr	d1, [pc, #812]	; 80026c8 <inverseKinematic+0xc08>
 800239c:	eeb0 0a47 	vmov.f32	s0, s14
 80023a0:	eef0 0a67 	vmov.f32	s1, s15
 80023a4:	f00d f85c 	bl	800f460 <pow>
 80023a8:	ec51 0b10 	vmov	r0, r1, d0
 80023ac:	a3c8      	add	r3, pc, #800	; (adr r3, 80026d0 <inverseKinematic+0xc10>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fd ff73 	bl	800029c <__adddf3>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4614      	mov	r4, r2
 80023bc:	461d      	mov	r5, r3
 80023be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023c2:	a3c5      	add	r3, pc, #788	; (adr r3, 80026d8 <inverseKinematic+0xc18>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd ff68 	bl	800029c <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	ec43 2b17 	vmov	d7, r2, r3
 80023d4:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 80026c8 <inverseKinematic+0xc08>
 80023d8:	eeb0 0a47 	vmov.f32	s0, s14
 80023dc:	eef0 0a67 	vmov.f32	s1, s15
 80023e0:	f00d f83e 	bl	800f460 <pow>
 80023e4:	ec53 2b10 	vmov	r2, r3, d0
 80023e8:	4620      	mov	r0, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	f7fd ff56 	bl	800029c <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023fc:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 80026c8 <inverseKinematic+0xc08>
 8002400:	eeb0 0a47 	vmov.f32	s0, s14
 8002404:	eef0 0a67 	vmov.f32	s1, s15
 8002408:	f00d f82a 	bl	800f460 <pow>
 800240c:	ec53 2b10 	vmov	r2, r3, d0
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fd ff42 	bl	800029c <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	a3af      	add	r3, pc, #700	; (adr r3, 80026e0 <inverseKinematic+0xc20>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fd ff37 	bl	8000298 <__aeabi_dsub>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4614      	mov	r4, r2
 8002430:	461d      	mov	r5, r3
 8002432:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	f7fd ff2f 	bl	800029c <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fe fa09 	bl	800085c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	ec43 2b17 	vmov	d7, r2, r3
 8002452:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 80026c8 <inverseKinematic+0xc08>
 8002456:	eeb0 0a47 	vmov.f32	s0, s14
 800245a:	eef0 0a67 	vmov.f32	s1, s15
 800245e:	f00c ffff 	bl	800f460 <pow>
 8002462:	ec51 0b10 	vmov	r0, r1, d0
 8002466:	a39a      	add	r3, pc, #616	; (adr r3, 80026d0 <inverseKinematic+0xc10>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fd ff14 	bl	8000298 <__aeabi_dsub>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <inverseKinematic+0xc3c>)
 800247a:	e9c3 0100 	strd	r0, r1, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 800247e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002482:	a38f      	add	r3, pc, #572	; (adr r3, 80026c0 <inverseKinematic+0xc00>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fd ff06 	bl	8000298 <__aeabi_dsub>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	ec43 2b17 	vmov	d7, r2, r3
 8002494:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80026c8 <inverseKinematic+0xc08>
 8002498:	eeb0 0a47 	vmov.f32	s0, s14
 800249c:	eef0 0a67 	vmov.f32	s1, s15
 80024a0:	f00c ffde 	bl	800f460 <pow>
 80024a4:	ec55 4b10 	vmov	r4, r5, d0
 80024a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024ac:	a38a      	add	r3, pc, #552	; (adr r3, 80026d8 <inverseKinematic+0xc18>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	f7fd fef3 	bl	800029c <__adddf3>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	ec43 2b17 	vmov	d7, r2, r3
 80024be:	ed9f 1b82 	vldr	d1, [pc, #520]	; 80026c8 <inverseKinematic+0xc08>
 80024c2:	eeb0 0a47 	vmov.f32	s0, s14
 80024c6:	eef0 0a67 	vmov.f32	s1, s15
 80024ca:	f00c ffc9 	bl	800f460 <pow>
 80024ce:	ec53 2b10 	vmov	r2, r3, d0
 80024d2:	4620      	mov	r0, r4
 80024d4:	4629      	mov	r1, r5
 80024d6:	f7fd fee1 	bl	800029c <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4614      	mov	r4, r2
 80024e0:	461d      	mov	r5, r3
 80024e2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80024e6:	ed9f 1b78 	vldr	d1, [pc, #480]	; 80026c8 <inverseKinematic+0xc08>
 80024ea:	eeb0 0a47 	vmov.f32	s0, s14
 80024ee:	eef0 0a67 	vmov.f32	s1, s15
 80024f2:	f00c ffb5 	bl	800f460 <pow>
 80024f6:	ec53 2b10 	vmov	r2, r3, d0
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fd fecd 	bl	800029c <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	a375      	add	r3, pc, #468	; (adr r3, 80026e0 <inverseKinematic+0xc20>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fd fec2 	bl	8000298 <__aeabi_dsub>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	a372      	add	r3, pc, #456	; (adr r3, 80026e8 <inverseKinematic+0xc28>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd feb9 	bl	8000298 <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	a370      	add	r3, pc, #448	; (adr r3, 80026f0 <inverseKinematic+0xc30>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fd feb2 	bl	800029c <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	f7fd fea8 	bl	800029c <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fe f982 	bl	800085c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b17 	vmov	d7, r2, r3
 8002560:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80026c8 <inverseKinematic+0xc08>
 8002564:	eeb0 0a47 	vmov.f32	s0, s14
 8002568:	eef0 0a67 	vmov.f32	s1, s15
 800256c:	f00c ff78 	bl	800f460 <pow>
 8002570:	ec51 0b10 	vmov	r0, r1, d0
 8002574:	a356      	add	r3, pc, #344	; (adr r3, 80026d0 <inverseKinematic+0xc10>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fd fe8d 	bl	8000298 <__aeabi_dsub>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <inverseKinematic+0xc40>)
 8002588:	e9c3 0100 	strd	r0, r1, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800258c:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <inverseKinematic+0xc44>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	4692      	mov	sl, r2
 8002594:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002598:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <inverseKinematic+0xc44>)
 800259a:	ed93 7b00 	vldr	d7, [r3]
 800259e:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 80026c8 <inverseKinematic+0xc08>
 80025a2:	eeb0 0a47 	vmov.f32	s0, s14
 80025a6:	eef0 0a67 	vmov.f32	s1, s15
 80025aa:	f00c ff59 	bl	800f460 <pow>
 80025ae:	ec55 4b10 	vmov	r4, r5, d0
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <inverseKinematic+0xc48>)
 80025b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <inverseKinematic+0xc4c>)
 80025be:	f7fe f823 	bl	8000608 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <inverseKinematic+0xc38>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f81a 	bl	8000608 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fd fe5c 	bl	8000298 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	ec43 2b17 	vmov	d7, r2, r3
 80025e8:	eeb0 0a47 	vmov.f32	s0, s14
 80025ec:	eef0 0a67 	vmov.f32	s1, s15
 80025f0:	f00c ffa6 	bl	800f540 <sqrt>
 80025f4:	ec53 2b10 	vmov	r2, r3, d0
 80025f8:	4650      	mov	r0, sl
 80025fa:	4659      	mov	r1, fp
 80025fc:	f7fd fe4c 	bl	8000298 <__aeabi_dsub>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4614      	mov	r4, r2
 8002606:	461d      	mov	r5, r3
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <inverseKinematic+0xc48>)
 800260a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	f7fd fe43 	bl	800029c <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe f91d 	bl	800085c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	493a      	ldr	r1, [pc, #232]	; (8002710 <inverseKinematic+0xc50>)
 8002628:	e9c1 2300 	strd	r2, r3, [r1]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800262c:	4b35      	ldr	r3, [pc, #212]	; (8002704 <inverseKinematic+0xc44>)
 800262e:	ed93 7b00 	vldr	d7, [r3]
 8002632:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80026c8 <inverseKinematic+0xc08>
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	eef0 0a67 	vmov.f32	s1, s15
 800263e:	f00c ff0f 	bl	800f460 <pow>
 8002642:	ec55 4b10 	vmov	r4, r5, d0
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <inverseKinematic+0xc48>)
 8002648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <inverseKinematic+0xc4c>)
 8002652:	f7fd ffd9 	bl	8000608 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <inverseKinematic+0xc38>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd ffd0 	bl	8000608 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe12 	bl	8000298 <__aeabi_dsub>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	ec43 2b17 	vmov	d7, r2, r3
 800267c:	eeb0 0a47 	vmov.f32	s0, s14
 8002680:	eef0 0a67 	vmov.f32	s1, s15
 8002684:	f00c ff5c 	bl	800f540 <sqrt>
 8002688:	ec51 0b10 	vmov	r0, r1, d0
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <inverseKinematic+0xc44>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd fe01 	bl	8000298 <__aeabi_dsub>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4614      	mov	r4, r2
 800269c:	461d      	mov	r5, r3
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <inverseKinematic+0xc48>)
 80026a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	f7fd fdf8 	bl	800029c <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fe f8d2 	bl	800085c <__aeabi_ddiv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	e02b      	b.n	8002714 <inverseKinematic+0xc54>
 80026bc:	f3af 8000 	nop.w
 80026c0:	5625749b 	.word	0x5625749b
 80026c4:	3faf09d1 	.word	0x3faf09d1
 80026c8:	00000000 	.word	0x00000000
 80026cc:	40000000 	.word	0x40000000
 80026d0:	f705857e 	.word	0xf705857e
 80026d4:	3f881e03 	.word	0x3f881e03
 80026d8:	1eb851ec 	.word	0x1eb851ec
 80026dc:	3fa1eb85 	.word	0x3fa1eb85
 80026e0:	70a3d70a 	.word	0x70a3d70a
 80026e4:	3fd70a3d 	.word	0x3fd70a3d
 80026e8:	93d96639 	.word	0x93d96639
 80026ec:	3f9ce6c0 	.word	0x3f9ce6c0
 80026f0:	47ae147c 	.word	0x47ae147c
 80026f4:	3fa47ae1 	.word	0x3fa47ae1
 80026f8:	200002a0 	.word	0x200002a0
 80026fc:	200002e8 	.word	0x200002e8
 8002700:	20000330 	.word	0x20000330
 8002704:	20000298 	.word	0x20000298
 8002708:	20000290 	.word	0x20000290
 800270c:	40100000 	.word	0x40100000
 8002710:	200002b8 	.word	0x200002b8
 8002714:	460b      	mov	r3, r1
 8002716:	49c6      	ldr	r1, [pc, #792]	; (8002a30 <inverseKinematic+0xf70>)
 8002718:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800271c:	4bc5      	ldr	r3, [pc, #788]	; (8002a34 <inverseKinematic+0xf74>)
 800271e:	ed93 7b00 	vldr	d7, [r3]
 8002722:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 8002a18 <inverseKinematic+0xf58>
 8002726:	eeb0 0a47 	vmov.f32	s0, s14
 800272a:	eef0 0a67 	vmov.f32	s1, s15
 800272e:	f00c fe97 	bl	800f460 <pow>
 8002732:	ec55 4b10 	vmov	r4, r5, d0
 8002736:	4bc0      	ldr	r3, [pc, #768]	; (8002a38 <inverseKinematic+0xf78>)
 8002738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4bbe      	ldr	r3, [pc, #760]	; (8002a3c <inverseKinematic+0xf7c>)
 8002742:	f7fd ff61 	bl	8000608 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	4bbc      	ldr	r3, [pc, #752]	; (8002a40 <inverseKinematic+0xf80>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fd ff58 	bl	8000608 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd fd9a 	bl	8000298 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b17 	vmov	d7, r2, r3
 800276c:	eeb0 0a47 	vmov.f32	s0, s14
 8002770:	eef0 0a67 	vmov.f32	s1, s15
 8002774:	f00c fee4 	bl	800f540 <sqrt>
 8002778:	ec51 0b10 	vmov	r0, r1, d0
 800277c:	4bad      	ldr	r3, [pc, #692]	; (8002a34 <inverseKinematic+0xf74>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd fd89 	bl	8000298 <__aeabi_dsub>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4614      	mov	r4, r2
 800278c:	461d      	mov	r5, r3
 800278e:	4baa      	ldr	r3, [pc, #680]	; (8002a38 <inverseKinematic+0xf78>)
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	f7fd fd80 	bl	800029c <__adddf3>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fe f85a 	bl	800085c <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	49a5      	ldr	r1, [pc, #660]	; (8002a44 <inverseKinematic+0xf84>)
 80027ae:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80027b2:	4ba0      	ldr	r3, [pc, #640]	; (8002a34 <inverseKinematic+0xf74>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	623a      	str	r2, [r7, #32]
 80027ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <inverseKinematic+0xf74>)
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002a18 <inverseKinematic+0xf58>
 80027ca:	eeb0 0a47 	vmov.f32	s0, s14
 80027ce:	eef0 0a67 	vmov.f32	s1, s15
 80027d2:	f00c fe45 	bl	800f460 <pow>
 80027d6:	ec55 4b10 	vmov	r4, r5, d0
 80027da:	4b97      	ldr	r3, [pc, #604]	; (8002a38 <inverseKinematic+0xf78>)
 80027dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <inverseKinematic+0xf7c>)
 80027e6:	f7fd ff0f 	bl	8000608 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <inverseKinematic+0xf80>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd ff06 	bl	8000608 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fd48 	bl	8000298 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	ec43 2b17 	vmov	d7, r2, r3
 8002810:	eeb0 0a47 	vmov.f32	s0, s14
 8002814:	eef0 0a67 	vmov.f32	s1, s15
 8002818:	f00c fe92 	bl	800f540 <sqrt>
 800281c:	ec53 2b10 	vmov	r2, r3, d0
 8002820:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002824:	f7fd fd38 	bl	8000298 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <inverseKinematic+0xf78>)
 8002832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	f7fd fd2f 	bl	800029c <__adddf3>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fe f809 	bl	800085c <__aeabi_ddiv>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	497e      	ldr	r1, [pc, #504]	; (8002a48 <inverseKinematic+0xf88>)
 8002850:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002854:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <inverseKinematic+0xf8c>)
 8002856:	ed93 7b00 	vldr	d7, [r3]
 800285a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002a18 <inverseKinematic+0xf58>
 800285e:	eeb0 0a47 	vmov.f32	s0, s14
 8002862:	eef0 0a67 	vmov.f32	s1, s15
 8002866:	f00c fdfb 	bl	800f460 <pow>
 800286a:	ec55 4b10 	vmov	r4, r5, d0
 800286e:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <inverseKinematic+0xf90>)
 8002870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <inverseKinematic+0xf7c>)
 800287a:	f7fd fec5 	bl	8000608 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <inverseKinematic+0xf94>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd febc 	bl	8000608 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4620      	mov	r0, r4
 8002896:	4629      	mov	r1, r5
 8002898:	f7fd fcfe 	bl	8000298 <__aeabi_dsub>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	ec43 2b17 	vmov	d7, r2, r3
 80028a4:	eeb0 0a47 	vmov.f32	s0, s14
 80028a8:	eef0 0a67 	vmov.f32	s1, s15
 80028ac:	f00c fe48 	bl	800f540 <sqrt>
 80028b0:	ec51 0b10 	vmov	r0, r1, d0
 80028b4:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <inverseKinematic+0xf8c>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fced 	bl	8000298 <__aeabi_dsub>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
 80028c6:	4b62      	ldr	r3, [pc, #392]	; (8002a50 <inverseKinematic+0xf90>)
 80028c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	f7fd fce4 	bl	800029c <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4620      	mov	r0, r4
 80028da:	4629      	mov	r1, r5
 80028dc:	f7fd ffbe 	bl	800085c <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	495c      	ldr	r1, [pc, #368]	; (8002a58 <inverseKinematic+0xf98>)
 80028e6:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80028ea:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <inverseKinematic+0xf8c>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	61ba      	str	r2, [r7, #24]
 80028f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	4b54      	ldr	r3, [pc, #336]	; (8002a4c <inverseKinematic+0xf8c>)
 80028fa:	ed93 7b00 	vldr	d7, [r3]
 80028fe:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002a18 <inverseKinematic+0xf58>
 8002902:	eeb0 0a47 	vmov.f32	s0, s14
 8002906:	eef0 0a67 	vmov.f32	s1, s15
 800290a:	f00c fda9 	bl	800f460 <pow>
 800290e:	ec55 4b10 	vmov	r4, r5, d0
 8002912:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <inverseKinematic+0xf90>)
 8002914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <inverseKinematic+0xf7c>)
 800291e:	f7fd fe73 	bl	8000608 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <inverseKinematic+0xf94>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fe6a 	bl	8000608 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fcac 	bl	8000298 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	ec43 2b17 	vmov	d7, r2, r3
 8002948:	eeb0 0a47 	vmov.f32	s0, s14
 800294c:	eef0 0a67 	vmov.f32	s1, s15
 8002950:	f00c fdf6 	bl	800f540 <sqrt>
 8002954:	ec53 2b10 	vmov	r2, r3, d0
 8002958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800295c:	f7fd fc9c 	bl	8000298 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <inverseKinematic+0xf90>)
 800296a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	f7fd fc93 	bl	800029c <__adddf3>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd ff6d 	bl	800085c <__aeabi_ddiv>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4935      	ldr	r1, [pc, #212]	; (8002a5c <inverseKinematic+0xf9c>)
 8002988:	e9c1 2300 	strd	r2, r3, [r1]

	XJ1_1 = 0;
 800298c:	4934      	ldr	r1, [pc, #208]	; (8002a60 <inverseKinematic+0xfa0>)
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 800299a:	4932      	ldr	r1, [pc, #200]	; (8002a64 <inverseKinematic+0xfa4>)
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <inverseKinematic+0xf84>)
 80029aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ae:	a31c      	add	r3, pc, #112	; (adr r3, 8002a20 <inverseKinematic+0xf60>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe28 	bl	8000608 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	492a      	ldr	r1, [pc, #168]	; (8002a68 <inverseKinematic+0xfa8>)
 80029be:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_2 = sqrt(3) * YJ2_2;
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <inverseKinematic+0xf88>)
 80029c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c8:	a315      	add	r3, pc, #84	; (adr r3, 8002a20 <inverseKinematic+0xf60>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fe1b 	bl	8000608 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <inverseKinematic+0xfac>)
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_1 = -sqrt(3) * YJ3_1;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <inverseKinematic+0xf98>)
 80029de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e2:	a311      	add	r3, pc, #68	; (adr r3, 8002a28 <inverseKinematic+0xf68>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fe0e 	bl	8000608 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	491f      	ldr	r1, [pc, #124]	; (8002a70 <inverseKinematic+0xfb0>)
 80029f2:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_2 = -sqrt(3) * YJ3_2;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <inverseKinematic+0xf9c>)
 80029f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fc:	a30a      	add	r3, pc, #40	; (adr r3, 8002a28 <inverseKinematic+0xf68>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fe01 	bl	8000608 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	491a      	ldr	r1, [pc, #104]	; (8002a74 <inverseKinematic+0xfb4>)
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]
 8002a10:	e032      	b.n	8002a78 <inverseKinematic+0xfb8>
 8002a12:	bf00      	nop
 8002a14:	f3af 8000 	nop.w
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40000000 	.word	0x40000000
 8002a20:	e8584caa 	.word	0xe8584caa
 8002a24:	3ffbb67a 	.word	0x3ffbb67a
 8002a28:	e8584caa 	.word	0xe8584caa
 8002a2c:	bffbb67a 	.word	0xbffbb67a
 8002a30:	200002c0 	.word	0x200002c0
 8002a34:	200002e0 	.word	0x200002e0
 8002a38:	200002d8 	.word	0x200002d8
 8002a3c:	40100000 	.word	0x40100000
 8002a40:	200002e8 	.word	0x200002e8
 8002a44:	20000300 	.word	0x20000300
 8002a48:	20000308 	.word	0x20000308
 8002a4c:	20000328 	.word	0x20000328
 8002a50:	20000320 	.word	0x20000320
 8002a54:	20000330 	.word	0x20000330
 8002a58:	20000348 	.word	0x20000348
 8002a5c:	20000350 	.word	0x20000350
 8002a60:	200002a8 	.word	0x200002a8
 8002a64:	200002b0 	.word	0x200002b0
 8002a68:	200002f0 	.word	0x200002f0
 8002a6c:	200002f8 	.word	0x200002f8
 8002a70:	20000338 	.word	0x20000338
 8002a74:	20000340 	.word	0x20000340

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002a78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a7c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002e08 <inverseKinematic+0x1348>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fc09 	bl	8000298 <__aeabi_dsub>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	a3e8      	add	r3, pc, #928	; (adr r3, 8002e30 <inverseKinematic+0x1370>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fc02 	bl	800029c <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002aa8:	f7fd fdae 	bl	8000608 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	f7fd fbee 	bl	800029c <__adddf3>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	f7fd fec8 	bl	800085c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4be2      	ldr	r3, [pc, #904]	; (8002e60 <inverseKinematic+0x13a0>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fd fd95 	bl	8000608 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002aea:	a3c7      	add	r3, pc, #796	; (adr r3, 8002e08 <inverseKinematic+0x1348>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f7fd fbd2 	bl	8000298 <__aeabi_dsub>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	ec43 2b17 	vmov	d7, r2, r3
 8002afc:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 8002e10 <inverseKinematic+0x1350>
 8002b00:	eeb0 0a47 	vmov.f32	s0, s14
 8002b04:	eef0 0a67 	vmov.f32	s1, s15
 8002b08:	f00c fcaa 	bl	800f460 <pow>
 8002b0c:	ec55 4b10 	vmov	r4, r5, d0
 8002b10:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002b14:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8002e10 <inverseKinematic+0x1350>
 8002b18:	eeb0 0a47 	vmov.f32	s0, s14
 8002b1c:	eef0 0a67 	vmov.f32	s1, s15
 8002b20:	f00c fc9e 	bl	800f460 <pow>
 8002b24:	ec53 2b10 	vmov	r2, r3, d0
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fbb6 	bl	800029c <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	a3b7      	add	r3, pc, #732	; (adr r3, 8002e18 <inverseKinematic+0x1358>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fbab 	bl	8000298 <__aeabi_dsub>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4614      	mov	r4, r2
 8002b48:	461d      	mov	r5, r3
 8002b4a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b4e:	ed9f 1bb0 	vldr	d1, [pc, #704]	; 8002e10 <inverseKinematic+0x1350>
 8002b52:	eeb0 0a47 	vmov.f32	s0, s14
 8002b56:	eef0 0a67 	vmov.f32	s1, s15
 8002b5a:	f00c fc81 	bl	800f460 <pow>
 8002b5e:	ec53 2b10 	vmov	r2, r3, d0
 8002b62:	4620      	mov	r0, r4
 8002b64:	4629      	mov	r1, r5
 8002b66:	f7fd fb99 	bl	800029c <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	a3ab      	add	r3, pc, #684	; (adr r3, 8002e20 <inverseKinematic+0x1360>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fb8e 	bl	8000298 <__aeabi_dsub>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	a3a8      	add	r3, pc, #672	; (adr r3, 8002e28 <inverseKinematic+0x1368>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fb87 	bl	800029c <__adddf3>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4614      	mov	r4, r2
 8002b94:	461d      	mov	r5, r3
 8002b96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	f7fd fb7d 	bl	800029c <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fe57 	bl	800085c <__aeabi_ddiv>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	f7fd fb71 	bl	800029c <__adddf3>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	49a9      	ldr	r1, [pc, #676]	; (8002e64 <inverseKinematic+0x13a4>)
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002bc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bc8:	a38f      	add	r3, pc, #572	; (adr r3, 8002e08 <inverseKinematic+0x1348>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fb63 	bl	8000298 <__aeabi_dsub>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	a395      	add	r3, pc, #596	; (adr r3, 8002e30 <inverseKinematic+0x1370>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fb5c 	bl	800029c <__adddf3>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002bf4:	f7fd fd08 	bl	8000608 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	f7fd fb48 	bl	800029c <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fe22 	bl	800085c <__aeabi_ddiv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4b91      	ldr	r3, [pc, #580]	; (8002e68 <inverseKinematic+0x13a8>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcef 	bl	8000608 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c36:	a374      	add	r3, pc, #464	; (adr r3, 8002e08 <inverseKinematic+0x1348>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fb2c 	bl	8000298 <__aeabi_dsub>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	ec43 2b17 	vmov	d7, r2, r3
 8002c48:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002e10 <inverseKinematic+0x1350>
 8002c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c50:	eef0 0a67 	vmov.f32	s1, s15
 8002c54:	f00c fc04 	bl	800f460 <pow>
 8002c58:	ec55 4b10 	vmov	r4, r5, d0
 8002c5c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002c60:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002e10 <inverseKinematic+0x1350>
 8002c64:	eeb0 0a47 	vmov.f32	s0, s14
 8002c68:	eef0 0a67 	vmov.f32	s1, s15
 8002c6c:	f00c fbf8 	bl	800f460 <pow>
 8002c70:	ec53 2b10 	vmov	r2, r3, d0
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fb10 	bl	800029c <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	a364      	add	r3, pc, #400	; (adr r3, 8002e18 <inverseKinematic+0x1358>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fb05 	bl	8000298 <__aeabi_dsub>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4614      	mov	r4, r2
 8002c94:	461d      	mov	r5, r3
 8002c96:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c9a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002e10 <inverseKinematic+0x1350>
 8002c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca2:	eef0 0a67 	vmov.f32	s1, s15
 8002ca6:	f00c fbdb 	bl	800f460 <pow>
 8002caa:	ec53 2b10 	vmov	r2, r3, d0
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd faf3 	bl	800029c <__adddf3>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	a358      	add	r3, pc, #352	; (adr r3, 8002e20 <inverseKinematic+0x1360>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fae8 	bl	8000298 <__aeabi_dsub>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	a355      	add	r3, pc, #340	; (adr r3, 8002e28 <inverseKinematic+0x1368>)
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f7fd fae1 	bl	800029c <__adddf3>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4614      	mov	r4, r2
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	f7fd fad7 	bl	800029c <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fdb1 	bl	800085c <__aeabi_ddiv>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4640      	mov	r0, r8
 8002d00:	4649      	mov	r1, r9
 8002d02:	f7fd facb 	bl	800029c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4958      	ldr	r1, [pc, #352]	; (8002e6c <inverseKinematic+0x13ac>)
 8002d0c:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d14:	a348      	add	r3, pc, #288	; (adr r3, 8002e38 <inverseKinematic+0x1378>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fabf 	bl	800029c <__adddf3>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	a346      	add	r3, pc, #280	; (adr r3, 8002e40 <inverseKinematic+0x1380>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fc6c 	bl	8000608 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d3c:	a342      	add	r3, pc, #264	; (adr r3, 8002e48 <inverseKinematic+0x1388>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	f7fd faab 	bl	800029c <__adddf3>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	f7fd faa3 	bl	800029c <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd fa9b 	bl	8000298 <__aeabi_dsub>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	a339      	add	r3, pc, #228	; (adr r3, 8002e50 <inverseKinematic+0x1390>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fa94 	bl	800029c <__adddf3>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	f7fd fa8a 	bl	800029c <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fd64 	bl	800085c <__aeabi_ddiv>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <inverseKinematic+0x13b0>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc31 	bl	8000608 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002db2:	a321      	add	r3, pc, #132	; (adr r3, 8002e38 <inverseKinematic+0x1378>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f7fd fa70 	bl	800029c <__adddf3>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	ec43 2b17 	vmov	d7, r2, r3
 8002dc4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002e10 <inverseKinematic+0x1350>
 8002dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dcc:	eef0 0a67 	vmov.f32	s1, s15
 8002dd0:	f00c fb46 	bl	800f460 <pow>
 8002dd4:	ec51 0b10 	vmov	r0, r1, d0
 8002dd8:	a31f      	add	r3, pc, #124	; (adr r3, 8002e58 <inverseKinematic+0x1398>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fa5d 	bl	800029c <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	461d      	mov	r5, r3
 8002dea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dee:	a316      	add	r3, pc, #88	; (adr r3, 8002e48 <inverseKinematic+0x1388>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fa52 	bl	800029c <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	ec43 2b17 	vmov	d7, r2, r3
 8002e00:	e038      	b.n	8002e74 <inverseKinematic+0x13b4>
 8002e02:	bf00      	nop
 8002e04:	f3af 8000 	nop.w
 8002e08:	1eb851ec 	.word	0x1eb851ec
 8002e0c:	3fb1eb85 	.word	0x3fb1eb85
 8002e10:	00000000 	.word	0x00000000
 8002e14:	40000000 	.word	0x40000000
 8002e18:	70a3d70a 	.word	0x70a3d70a
 8002e1c:	3fd70a3d 	.word	0x3fd70a3d
 8002e20:	93d96639 	.word	0x93d96639
 8002e24:	3f9ce6c0 	.word	0x3f9ce6c0
 8002e28:	47ae147c 	.word	0x47ae147c
 8002e2c:	3fa47ae1 	.word	0x3fa47ae1
 8002e30:	24dd2f1b 	.word	0x24dd2f1b
 8002e34:	3fc58106 	.word	0x3fc58106
 8002e38:	5625749b 	.word	0x5625749b
 8002e3c:	3faf09d1 	.word	0x3faf09d1
 8002e40:	e8584caa 	.word	0xe8584caa
 8002e44:	c00bb67a 	.word	0xc00bb67a
 8002e48:	1eb851ec 	.word	0x1eb851ec
 8002e4c:	3fa1eb85 	.word	0x3fa1eb85
 8002e50:	24dd2f1d 	.word	0x24dd2f1d
 8002e54:	3fe58106 	.word	0x3fe58106
 8002e58:	f705857e 	.word	0xf705857e
 8002e5c:	3f881e03 	.word	0x3f881e03
 8002e60:	200002b8 	.word	0x200002b8
 8002e64:	200002c8 	.word	0x200002c8
 8002e68:	200002c0 	.word	0x200002c0
 8002e6c:	200002d0 	.word	0x200002d0
 8002e70:	20000300 	.word	0x20000300
 8002e74:	ed9f 1be0 	vldr	d1, [pc, #896]	; 80031f8 <inverseKinematic+0x1738>
 8002e78:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7c:	eef0 0a67 	vmov.f32	s1, s15
 8002e80:	f00c faee 	bl	800f460 <pow>
 8002e84:	ec53 2b10 	vmov	r2, r3, d0
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f7fd fa06 	bl	800029c <__adddf3>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	461d      	mov	r5, r3
 8002e98:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002e9c:	ed9f 1bd6 	vldr	d1, [pc, #856]	; 80031f8 <inverseKinematic+0x1738>
 8002ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea4:	eef0 0a67 	vmov.f32	s1, s15
 8002ea8:	f00c fada 	bl	800f460 <pow>
 8002eac:	ec53 2b10 	vmov	r2, r3, d0
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd f9f2 	bl	800029c <__adddf3>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	a3d9      	add	r3, pc, #868	; (adr r3, 8003228 <inverseKinematic+0x1768>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd f9e7 	bl	8000298 <__aeabi_dsub>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4614      	mov	r4, r2
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	f7fd f9df 	bl	800029c <__adddf3>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd fcb9 	bl	800085c <__aeabi_ddiv>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4640      	mov	r0, r8
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	f7fd f9d3 	bl	800029c <__adddf3>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	49d7      	ldr	r1, [pc, #860]	; (8003258 <inverseKinematic+0x1798>)
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002f00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f04:	a3be      	add	r3, pc, #760	; (adr r3, 8003200 <inverseKinematic+0x1740>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd f9c7 	bl	800029c <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	a3bc      	add	r3, pc, #752	; (adr r3, 8003208 <inverseKinematic+0x1748>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fb74 	bl	8000608 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	461d      	mov	r5, r3
 8002f28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f2c:	a3b8      	add	r3, pc, #736	; (adr r3, 8003210 <inverseKinematic+0x1750>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd f9b3 	bl	800029c <__adddf3>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	f7fd f9ab 	bl	800029c <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	f7fd f9a3 	bl	8000298 <__aeabi_dsub>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	a3af      	add	r3, pc, #700	; (adr r3, 8003218 <inverseKinematic+0x1758>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd f99c 	bl	800029c <__adddf3>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4614      	mov	r4, r2
 8002f6a:	461d      	mov	r5, r3
 8002f6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	f7fd f992 	bl	800029c <__adddf3>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	f7fd fc6c 	bl	800085c <__aeabi_ddiv>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4bb3      	ldr	r3, [pc, #716]	; (800325c <inverseKinematic+0x179c>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd fb39 	bl	8000608 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fa2:	a397      	add	r3, pc, #604	; (adr r3, 8003200 <inverseKinematic+0x1740>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd f978 	bl	800029c <__adddf3>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	ec43 2b17 	vmov	d7, r2, r3
 8002fb4:	ed9f 1b90 	vldr	d1, [pc, #576]	; 80031f8 <inverseKinematic+0x1738>
 8002fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbc:	eef0 0a67 	vmov.f32	s1, s15
 8002fc0:	f00c fa4e 	bl	800f460 <pow>
 8002fc4:	ec51 0b10 	vmov	r0, r1, d0
 8002fc8:	a395      	add	r3, pc, #596	; (adr r3, 8003220 <inverseKinematic+0x1760>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd f965 	bl	800029c <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	461d      	mov	r5, r3
 8002fda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fde:	a38c      	add	r3, pc, #560	; (adr r3, 8003210 <inverseKinematic+0x1750>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd f95a 	bl	800029c <__adddf3>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	ec43 2b17 	vmov	d7, r2, r3
 8002ff0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80031f8 <inverseKinematic+0x1738>
 8002ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff8:	eef0 0a67 	vmov.f32	s1, s15
 8002ffc:	f00c fa30 	bl	800f460 <pow>
 8003000:	ec53 2b10 	vmov	r2, r3, d0
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f948 	bl	800029c <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003018:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80031f8 <inverseKinematic+0x1738>
 800301c:	eeb0 0a47 	vmov.f32	s0, s14
 8003020:	eef0 0a67 	vmov.f32	s1, s15
 8003024:	f00c fa1c 	bl	800f460 <pow>
 8003028:	ec53 2b10 	vmov	r2, r3, d0
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd f934 	bl	800029c <__adddf3>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	a37a      	add	r3, pc, #488	; (adr r3, 8003228 <inverseKinematic+0x1768>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd f929 	bl	8000298 <__aeabi_dsub>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4614      	mov	r4, r2
 800304c:	461d      	mov	r5, r3
 800304e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	f7fd f921 	bl	800029c <__adddf3>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f7fd fbfb 	bl	800085c <__aeabi_ddiv>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4640      	mov	r0, r8
 800306c:	4649      	mov	r1, r9
 800306e:	f7fd f915 	bl	800029c <__adddf3>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	497a      	ldr	r1, [pc, #488]	; (8003260 <inverseKinematic+0x17a0>)
 8003078:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800307c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003080:	a35f      	add	r3, pc, #380	; (adr r3, 8003200 <inverseKinematic+0x1740>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd f907 	bl	8000298 <__aeabi_dsub>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	a367      	add	r3, pc, #412	; (adr r3, 8003230 <inverseKinematic+0x1770>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd fab6 	bl	8000608 <__aeabi_dmul>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030a8:	a359      	add	r3, pc, #356	; (adr r3, 8003210 <inverseKinematic+0x1750>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f7fd f8f5 	bl	800029c <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	f7fd f8ed 	bl	800029c <__adddf3>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4620      	mov	r0, r4
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7fd f8e5 	bl	8000298 <__aeabi_dsub>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	a358      	add	r3, pc, #352	; (adr r3, 8003238 <inverseKinematic+0x1778>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd f8de 	bl	800029c <__adddf3>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	a355      	add	r3, pc, #340	; (adr r3, 8003240 <inverseKinematic+0x1780>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f7fd f8d5 	bl	800029c <__adddf3>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4614      	mov	r4, r2
 80030f8:	461d      	mov	r5, r3
 80030fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	f7fd f8cb 	bl	800029c <__adddf3>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd fba5 	bl	800085c <__aeabi_ddiv>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	4b52      	ldr	r3, [pc, #328]	; (8003264 <inverseKinematic+0x17a4>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f7fd fa72 	bl	8000608 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4690      	mov	r8, r2
 800312a:	4699      	mov	r9, r3
 800312c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003130:	a333      	add	r3, pc, #204	; (adr r3, 8003200 <inverseKinematic+0x1740>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f7fd f8af 	bl	8000298 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	ec43 2b17 	vmov	d7, r2, r3
 8003142:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80031f8 <inverseKinematic+0x1738>
 8003146:	eeb0 0a47 	vmov.f32	s0, s14
 800314a:	eef0 0a67 	vmov.f32	s1, s15
 800314e:	f00c f987 	bl	800f460 <pow>
 8003152:	ec55 4b10 	vmov	r4, r5, d0
 8003156:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800315a:	a32d      	add	r3, pc, #180	; (adr r3, 8003210 <inverseKinematic+0x1750>)
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f7fd f89c 	bl	800029c <__adddf3>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	ec43 2b17 	vmov	d7, r2, r3
 800316c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80031f8 <inverseKinematic+0x1738>
 8003170:	eeb0 0a47 	vmov.f32	s0, s14
 8003174:	eef0 0a67 	vmov.f32	s1, s15
 8003178:	f00c f972 	bl	800f460 <pow>
 800317c:	ec53 2b10 	vmov	r2, r3, d0
 8003180:	4620      	mov	r0, r4
 8003182:	4629      	mov	r1, r5
 8003184:	f7fd f88a 	bl	800029c <__adddf3>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4614      	mov	r4, r2
 800318e:	461d      	mov	r5, r3
 8003190:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003194:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80031f8 <inverseKinematic+0x1738>
 8003198:	eeb0 0a47 	vmov.f32	s0, s14
 800319c:	eef0 0a67 	vmov.f32	s1, s15
 80031a0:	f00c f95e 	bl	800f460 <pow>
 80031a4:	ec53 2b10 	vmov	r2, r3, d0
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f876 	bl	800029c <__adddf3>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	a31b      	add	r3, pc, #108	; (adr r3, 8003228 <inverseKinematic+0x1768>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd f86b 	bl	8000298 <__aeabi_dsub>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	a31f      	add	r3, pc, #124	; (adr r3, 8003248 <inverseKinematic+0x1788>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd f862 	bl	8000298 <__aeabi_dsub>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	a31c      	add	r3, pc, #112	; (adr r3, 8003250 <inverseKinematic+0x1790>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd f85b 	bl	800029c <__adddf3>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4614      	mov	r4, r2
 80031ec:	461d      	mov	r5, r3
 80031ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	e037      	b.n	8003268 <inverseKinematic+0x17a8>
 80031f8:	00000000 	.word	0x00000000
 80031fc:	40000000 	.word	0x40000000
 8003200:	5625749b 	.word	0x5625749b
 8003204:	3faf09d1 	.word	0x3faf09d1
 8003208:	e8584caa 	.word	0xe8584caa
 800320c:	c00bb67a 	.word	0xc00bb67a
 8003210:	1eb851ec 	.word	0x1eb851ec
 8003214:	3fa1eb85 	.word	0x3fa1eb85
 8003218:	24dd2f1d 	.word	0x24dd2f1d
 800321c:	3fe58106 	.word	0x3fe58106
 8003220:	f705857e 	.word	0xf705857e
 8003224:	3f881e03 	.word	0x3f881e03
 8003228:	70a3d70a 	.word	0x70a3d70a
 800322c:	3fd70a3d 	.word	0x3fd70a3d
 8003230:	e8584caa 	.word	0xe8584caa
 8003234:	400bb67a 	.word	0x400bb67a
 8003238:	9ba5e356 	.word	0x9ba5e356
 800323c:	3fe020c4 	.word	0x3fe020c4
 8003240:	24dd2f1b 	.word	0x24dd2f1b
 8003244:	3fc58106 	.word	0x3fc58106
 8003248:	93d96639 	.word	0x93d96639
 800324c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003250:	47ae147c 	.word	0x47ae147c
 8003254:	3fa47ae1 	.word	0x3fa47ae1
 8003258:	20000310 	.word	0x20000310
 800325c:	20000308 	.word	0x20000308
 8003260:	20000318 	.word	0x20000318
 8003264:	20000348 	.word	0x20000348
 8003268:	f7fd f818 	bl	800029c <__adddf3>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4620      	mov	r0, r4
 8003272:	4629      	mov	r1, r5
 8003274:	f7fd faf2 	bl	800085c <__aeabi_ddiv>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fd f80c 	bl	800029c <__adddf3>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	49cf      	ldr	r1, [pc, #828]	; (80035c8 <inverseKinematic+0x1b08>)
 800328a:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800328e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003292:	a3b7      	add	r3, pc, #732	; (adr r3, 8003570 <inverseKinematic+0x1ab0>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f7fc fffe 	bl	8000298 <__aeabi_dsub>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
 80032a4:	a3b4      	add	r3, pc, #720	; (adr r3, 8003578 <inverseKinematic+0x1ab8>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f9ad 	bl	8000608 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032ba:	a3b1      	add	r3, pc, #708	; (adr r3, 8003580 <inverseKinematic+0x1ac0>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fc ffec 	bl	800029c <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	f7fc ffe4 	bl	800029c <__adddf3>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4620      	mov	r0, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fc ffdc 	bl	8000298 <__aeabi_dsub>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	a3a7      	add	r3, pc, #668	; (adr r3, 8003588 <inverseKinematic+0x1ac8>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fc ffd5 	bl	800029c <__adddf3>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	a3a5      	add	r3, pc, #660	; (adr r3, 8003590 <inverseKinematic+0x1ad0>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fc ffcc 	bl	800029c <__adddf3>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	f7fc ffc2 	bl	800029c <__adddf3>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fd fa9c 	bl	800085c <__aeabi_ddiv>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	4ba7      	ldr	r3, [pc, #668]	; (80035cc <inverseKinematic+0x1b0c>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f969 	bl	8000608 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4690      	mov	r8, r2
 800333c:	4699      	mov	r9, r3
 800333e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003342:	a38b      	add	r3, pc, #556	; (adr r3, 8003570 <inverseKinematic+0x1ab0>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fc ffa6 	bl	8000298 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	ec43 2b17 	vmov	d7, r2, r3
 8003354:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8003598 <inverseKinematic+0x1ad8>
 8003358:	eeb0 0a47 	vmov.f32	s0, s14
 800335c:	eef0 0a67 	vmov.f32	s1, s15
 8003360:	f00c f87e 	bl	800f460 <pow>
 8003364:	ec55 4b10 	vmov	r4, r5, d0
 8003368:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800336c:	a384      	add	r3, pc, #528	; (adr r3, 8003580 <inverseKinematic+0x1ac0>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fc ff93 	bl	800029c <__adddf3>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	ec43 2b17 	vmov	d7, r2, r3
 800337e:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8003598 <inverseKinematic+0x1ad8>
 8003382:	eeb0 0a47 	vmov.f32	s0, s14
 8003386:	eef0 0a67 	vmov.f32	s1, s15
 800338a:	f00c f869 	bl	800f460 <pow>
 800338e:	ec53 2b10 	vmov	r2, r3, d0
 8003392:	4620      	mov	r0, r4
 8003394:	4629      	mov	r1, r5
 8003396:	f7fc ff81 	bl	800029c <__adddf3>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4614      	mov	r4, r2
 80033a0:	461d      	mov	r5, r3
 80033a2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80033a6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8003598 <inverseKinematic+0x1ad8>
 80033aa:	eeb0 0a47 	vmov.f32	s0, s14
 80033ae:	eef0 0a67 	vmov.f32	s1, s15
 80033b2:	f00c f855 	bl	800f460 <pow>
 80033b6:	ec53 2b10 	vmov	r2, r3, d0
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff6d 	bl	800029c <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	a375      	add	r3, pc, #468	; (adr r3, 80035a0 <inverseKinematic+0x1ae0>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fc ff62 	bl	8000298 <__aeabi_dsub>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	a372      	add	r3, pc, #456	; (adr r3, 80035a8 <inverseKinematic+0x1ae8>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fc ff59 	bl	8000298 <__aeabi_dsub>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	a370      	add	r3, pc, #448	; (adr r3, 80035b0 <inverseKinematic+0x1af0>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fc ff52 	bl	800029c <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4614      	mov	r4, r2
 80033fe:	461d      	mov	r5, r3
 8003400:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	f7fc ff48 	bl	800029c <__adddf3>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f7fd fa22 	bl	800085c <__aeabi_ddiv>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4640      	mov	r0, r8
 800341e:	4649      	mov	r1, r9
 8003420:	f7fc ff3c 	bl	800029c <__adddf3>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4969      	ldr	r1, [pc, #420]	; (80035d0 <inverseKinematic+0x1b10>)
 800342a:	e9c1 2300 	strd	r2, r3, [r1]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800342e:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <inverseKinematic+0x1b14>)
 8003430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003434:	a360      	add	r3, pc, #384	; (adr r3, 80035b8 <inverseKinematic+0x1af8>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd fa0f 	bl	800085c <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	ec43 2b17 	vmov	d7, r2, r3
 8003446:	eeb0 0a47 	vmov.f32	s0, s14
 800344a:	eef0 0a67 	vmov.f32	s1, s15
 800344e:	f00b ffd3 	bl	800f3f8 <asin>
 8003452:	ec53 2b10 	vmov	r2, r3, d0
 8003456:	613a      	str	r2, [r7, #16]
 8003458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <inverseKinematic+0x1b18>)
 8003460:	ed97 7b04 	vldr	d7, [r7, #16]
 8003464:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8003468:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <inverseKinematic+0x1b18>)
 800346a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	4b5a      	ldr	r3, [pc, #360]	; (80035dc <inverseKinematic+0x1b1c>)
 8003474:	f7fd f8c8 	bl	8000608 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	a34f      	add	r3, pc, #316	; (adr r3, 80035c0 <inverseKinematic+0x1b00>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f9e9 	bl	800085c <__aeabi_ddiv>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4952      	ldr	r1, [pc, #328]	; (80035d8 <inverseKinematic+0x1b18>)
 8003490:	e9c1 2300 	strd	r2, r3, [r1]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <inverseKinematic+0x1b20>)
 8003496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349a:	a347      	add	r3, pc, #284	; (adr r3, 80035b8 <inverseKinematic+0x1af8>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f7fd f9dc 	bl	800085c <__aeabi_ddiv>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	ec43 2b17 	vmov	d7, r2, r3
 80034ac:	eeb0 0a47 	vmov.f32	s0, s14
 80034b0:	eef0 0a67 	vmov.f32	s1, s15
 80034b4:	f00b ffa0 	bl	800f3f8 <asin>
 80034b8:	ec53 2b10 	vmov	r2, r3, d0
 80034bc:	60ba      	str	r2, [r7, #8]
 80034be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <inverseKinematic+0x1b24>)
 80034c6:	ed97 7b02 	vldr	d7, [r7, #8]
 80034ca:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80034ce:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <inverseKinematic+0x1b24>)
 80034d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b40      	ldr	r3, [pc, #256]	; (80035dc <inverseKinematic+0x1b1c>)
 80034da:	f7fd f895 	bl	8000608 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	a336      	add	r3, pc, #216	; (adr r3, 80035c0 <inverseKinematic+0x1b00>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f9b6 	bl	800085c <__aeabi_ddiv>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	493b      	ldr	r1, [pc, #236]	; (80035e4 <inverseKinematic+0x1b24>)
 80034f6:	e9c1 2300 	strd	r2, r3, [r1]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 80034fa:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <inverseKinematic+0x1b08>)
 80034fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003500:	a32d      	add	r3, pc, #180	; (adr r3, 80035b8 <inverseKinematic+0x1af8>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f9a9 	bl	800085c <__aeabi_ddiv>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	ec43 2b17 	vmov	d7, r2, r3
 8003512:	eeb0 0a47 	vmov.f32	s0, s14
 8003516:	eef0 0a67 	vmov.f32	s1, s15
 800351a:	f00b ff6d 	bl	800f3f8 <asin>
 800351e:	ec53 2b10 	vmov	r2, r3, d0
 8003522:	603a      	str	r2, [r7, #0]
 8003524:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <inverseKinematic+0x1b28>)
 800352c:	ed97 7b00 	vldr	d7, [r7]
 8003530:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <inverseKinematic+0x1b28>)
 8003536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <inverseKinematic+0x1b1c>)
 8003540:	f7fd f862 	bl	8000608 <__aeabi_dmul>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	a31c      	add	r3, pc, #112	; (adr r3, 80035c0 <inverseKinematic+0x1b00>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fd f983 	bl	800085c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4923      	ldr	r1, [pc, #140]	; (80035e8 <inverseKinematic+0x1b28>)
 800355c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003560:	bf00      	nop
 8003562:	3740      	adds	r7, #64	; 0x40
 8003564:	46bd      	mov	sp, r7
 8003566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356a:	bf00      	nop
 800356c:	f3af 8000 	nop.w
 8003570:	5625749b 	.word	0x5625749b
 8003574:	3faf09d1 	.word	0x3faf09d1
 8003578:	e8584caa 	.word	0xe8584caa
 800357c:	400bb67a 	.word	0x400bb67a
 8003580:	1eb851ec 	.word	0x1eb851ec
 8003584:	3fa1eb85 	.word	0x3fa1eb85
 8003588:	9ba5e356 	.word	0x9ba5e356
 800358c:	3fe020c4 	.word	0x3fe020c4
 8003590:	24dd2f1b 	.word	0x24dd2f1b
 8003594:	3fc58106 	.word	0x3fc58106
 8003598:	00000000 	.word	0x00000000
 800359c:	40000000 	.word	0x40000000
 80035a0:	70a3d70a 	.word	0x70a3d70a
 80035a4:	3fd70a3d 	.word	0x3fd70a3d
 80035a8:	93d96639 	.word	0x93d96639
 80035ac:	3f9ce6c0 	.word	0x3f9ce6c0
 80035b0:	47ae147c 	.word	0x47ae147c
 80035b4:	3fa47ae1 	.word	0x3fa47ae1
 80035b8:	9999999a 	.word	0x9999999a
 80035bc:	3fc99999 	.word	0x3fc99999
 80035c0:	54442eea 	.word	0x54442eea
 80035c4:	400921fb 	.word	0x400921fb
 80035c8:	20000358 	.word	0x20000358
 80035cc:	20000350 	.word	0x20000350
 80035d0:	20000360 	.word	0x20000360
 80035d4:	200002c8 	.word	0x200002c8
 80035d8:	200005f0 	.word	0x200005f0
 80035dc:	40668000 	.word	0x40668000
 80035e0:	20000310 	.word	0x20000310
 80035e4:	20000638 	.word	0x20000638
 80035e8:	20000680 	.word	0x20000680

080035ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f0:	f004 fe06 	bl	8008200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035f4:	f000 f818 	bl	8003628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035f8:	f000 fbbe 	bl	8003d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80035fc:	f000 fb92 	bl	8003d24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003600:	f000 f87e 	bl	8003700 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003604:	f000 f91c 	bl	8003840 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003608:	f000 f966 	bl	80038d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800360c:	f000 fa50 	bl	8003ab0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8003610:	f000 fabe 	bl	8003b90 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003614:	f000 faf6 	bl	8003c04 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003618:	f000 fb3c 	bl	8003c94 <MX_TIM11_Init>
  MX_TIM4_Init();
 800361c:	f000 f9d2 	bl	80039c4 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statesMachineLoop();
 8003620:	f001 f816 	bl	8004650 <statesMachineLoop>
 8003624:	e7fc      	b.n	8003620 <main+0x34>
	...

08003628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b094      	sub	sp, #80	; 0x50
 800362c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	2230      	movs	r2, #48	; 0x30
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f009 f96c 	bl	800c914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <SystemClock_Config+0xd0>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <SystemClock_Config+0xd0>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <SystemClock_Config+0xd0>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <SystemClock_Config+0xd4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <SystemClock_Config+0xd4>)
 8003672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b20      	ldr	r3, [pc, #128]	; (80036fc <SystemClock_Config+0xd4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003684:	2303      	movs	r3, #3
 8003686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800368e:	2301      	movs	r3, #1
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003692:	2310      	movs	r3, #16
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003696:	2302      	movs	r3, #2
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800369a:	2300      	movs	r3, #0
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800369e:	2308      	movs	r3, #8
 80036a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036a6:	2302      	movs	r3, #2
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036aa:	2304      	movs	r3, #4
 80036ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	4618      	mov	r0, r3
 80036b4:	f005 f9f8 	bl	8008aa8 <HAL_RCC_OscConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80036be:	f000 fea5 	bl	800440c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036c2:	230f      	movs	r3, #15
 80036c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c6:	2302      	movs	r3, #2
 80036c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f005 fc5a 	bl	8008f98 <HAL_RCC_ClockConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80036ea:	f000 fe8f 	bl	800440c <Error_Handler>
  }
}
 80036ee:	bf00      	nop
 80036f0:	3750      	adds	r7, #80	; 0x50
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000

08003700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b096      	sub	sp, #88	; 0x58
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	615a      	str	r2, [r3, #20]
 8003730:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2220      	movs	r2, #32
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f009 f8eb 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <MX_TIM1_Init+0x138>)
 8003740:	4a3e      	ldr	r2, [pc, #248]	; (800383c <MX_TIM1_Init+0x13c>)
 8003742:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <MX_TIM1_Init+0x138>)
 8003746:	223f      	movs	r2, #63	; 0x3f
 8003748:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <MX_TIM1_Init+0x138>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003750:	4b39      	ldr	r3, [pc, #228]	; (8003838 <MX_TIM1_Init+0x138>)
 8003752:	2200      	movs	r2, #0
 8003754:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <MX_TIM1_Init+0x138>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <MX_TIM1_Init+0x138>)
 800375e:	2200      	movs	r2, #0
 8003760:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003762:	4b35      	ldr	r3, [pc, #212]	; (8003838 <MX_TIM1_Init+0x138>)
 8003764:	2200      	movs	r2, #0
 8003766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003768:	4833      	ldr	r0, [pc, #204]	; (8003838 <MX_TIM1_Init+0x138>)
 800376a:	f005 ff25 	bl	80095b8 <HAL_TIM_Base_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003774:	f000 fe4a 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800377e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003782:	4619      	mov	r1, r3
 8003784:	482c      	ldr	r0, [pc, #176]	; (8003838 <MX_TIM1_Init+0x138>)
 8003786:	f006 fe21 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003790:	f000 fe3c 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003794:	4828      	ldr	r0, [pc, #160]	; (8003838 <MX_TIM1_Init+0x138>)
 8003796:	f006 f872 	bl	800987e <HAL_TIM_PWM_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80037a0:	f000 fe34 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037b0:	4619      	mov	r1, r3
 80037b2:	4821      	ldr	r0, [pc, #132]	; (8003838 <MX_TIM1_Init+0x138>)
 80037b4:	f007 fada 	bl	800ad6c <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80037be:	f000 fe25 	bl	800440c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c2:	2360      	movs	r3, #96	; 0x60
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ce:	2300      	movs	r3, #0
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	4619      	mov	r1, r3
 80037e6:	4814      	ldr	r0, [pc, #80]	; (8003838 <MX_TIM1_Init+0x138>)
 80037e8:	f006 fd2e 	bl	800a248 <HAL_TIM_PWM_ConfigChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80037f2:	f000 fe0b 	bl	800440c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800380e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4807      	ldr	r0, [pc, #28]	; (8003838 <MX_TIM1_Init+0x138>)
 800381a:	f007 fb15 	bl	800ae48 <HAL_TIMEx_ConfigBreakDeadTime>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003824:	f000 fdf2 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <MX_TIM1_Init+0x138>)
 800382a:	f001 ff1b 	bl	8005664 <HAL_TIM_MspPostInit>

}
 800382e:	bf00      	nop
 8003830:	3758      	adds	r7, #88	; 0x58
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000368 	.word	0x20000368
 800383c:	40010000 	.word	0x40010000

08003840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003854:	463b      	mov	r3, r7
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <MX_TIM2_Init+0x94>)
 800385e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <MX_TIM2_Init+0x94>)
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <MX_TIM2_Init+0x94>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <MX_TIM2_Init+0x94>)
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <MX_TIM2_Init+0x94>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <MX_TIM2_Init+0x94>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003884:	4813      	ldr	r0, [pc, #76]	; (80038d4 <MX_TIM2_Init+0x94>)
 8003886:	f005 fe97 	bl	80095b8 <HAL_TIM_Base_Init>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003890:	f000 fdbc 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800389a:	f107 0308 	add.w	r3, r7, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	480c      	ldr	r0, [pc, #48]	; (80038d4 <MX_TIM2_Init+0x94>)
 80038a2:	f006 fd93 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80038ac:	f000 fdae 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b8:	463b      	mov	r3, r7
 80038ba:	4619      	mov	r1, r3
 80038bc:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_TIM2_Init+0x94>)
 80038be:	f007 fa55 	bl	800ad6c <HAL_TIMEx_MasterConfigSynchronization>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038c8:	f000 fda0 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038cc:	bf00      	nop
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200003b0 	.word	0x200003b0

080038d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]
 80038ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ec:	f107 0320 	add.w	r3, r7, #32
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
 8003904:	615a      	str	r2, [r3, #20]
 8003906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <MX_TIM3_Init+0xe4>)
 800390a:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <MX_TIM3_Init+0xe8>)
 800390c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <MX_TIM3_Init+0xe4>)
 8003910:	223f      	movs	r2, #63	; 0x3f
 8003912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <MX_TIM3_Init+0xe4>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <MX_TIM3_Init+0xe4>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <MX_TIM3_Init+0xe4>)
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <MX_TIM3_Init+0xe4>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800392c:	4823      	ldr	r0, [pc, #140]	; (80039bc <MX_TIM3_Init+0xe4>)
 800392e:	f005 fe43 	bl	80095b8 <HAL_TIM_Base_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003938:	f000 fd68 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003946:	4619      	mov	r1, r3
 8003948:	481c      	ldr	r0, [pc, #112]	; (80039bc <MX_TIM3_Init+0xe4>)
 800394a:	f006 fd3f 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003954:	f000 fd5a 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003958:	4818      	ldr	r0, [pc, #96]	; (80039bc <MX_TIM3_Init+0xe4>)
 800395a:	f005 ff90 	bl	800987e <HAL_TIM_PWM_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003964:	f000 fd52 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003970:	f107 0320 	add.w	r3, r7, #32
 8003974:	4619      	mov	r1, r3
 8003976:	4811      	ldr	r0, [pc, #68]	; (80039bc <MX_TIM3_Init+0xe4>)
 8003978:	f007 f9f8 	bl	800ad6c <HAL_TIMEx_MasterConfigSynchronization>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003982:	f000 fd43 	bl	800440c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003986:	2360      	movs	r3, #96	; 0x60
 8003988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	2200      	movs	r2, #0
 800399a:	4619      	mov	r1, r3
 800399c:	4807      	ldr	r0, [pc, #28]	; (80039bc <MX_TIM3_Init+0xe4>)
 800399e:	f006 fc53 	bl	800a248 <HAL_TIM_PWM_ConfigChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80039a8:	f000 fd30 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039ac:	4803      	ldr	r0, [pc, #12]	; (80039bc <MX_TIM3_Init+0xe4>)
 80039ae:	f001 fe59 	bl	8005664 <HAL_TIM_MspPostInit>

}
 80039b2:	bf00      	nop
 80039b4:	3738      	adds	r7, #56	; 0x38
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200003f8 	.word	0x200003f8
 80039c0:	40000400 	.word	0x40000400

080039c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08e      	sub	sp, #56	; 0x38
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	615a      	str	r2, [r3, #20]
 80039f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 80039f6:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <MX_TIM4_Init+0xe8>)
 80039f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 80039fc:	223f      	movs	r2, #63	; 0x3f
 80039fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000;
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a08:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003a0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a1a:	4823      	ldr	r0, [pc, #140]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a1c:	f005 fdcc 	bl	80095b8 <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003a26:	f000 fcf1 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a34:	4619      	mov	r1, r3
 8003a36:	481c      	ldr	r0, [pc, #112]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a38:	f006 fcc8 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003a42:	f000 fce3 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a46:	4818      	ldr	r0, [pc, #96]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a48:	f005 ff19 	bl	800987e <HAL_TIM_PWM_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003a52:	f000 fcdb 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a5e:	f107 0320 	add.w	r3, r7, #32
 8003a62:	4619      	mov	r1, r3
 8003a64:	4810      	ldr	r0, [pc, #64]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a66:	f007 f981 	bl	800ad6c <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003a70:	f000 fccc 	bl	800440c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a74:	2360      	movs	r3, #96	; 0x60
 8003a76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	2200      	movs	r2, #0
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a8c:	f006 fbdc 	bl	800a248 <HAL_TIM_PWM_ConfigChannel>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003a96:	f000 fcb9 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a9a:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <MX_TIM4_Init+0xe4>)
 8003a9c:	f001 fde2 	bl	8005664 <HAL_TIM_MspPostInit>

}
 8003aa0:	bf00      	nop
 8003aa2:	3738      	adds	r7, #56	; 0x38
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000440 	.word	0x20000440
 8003aac:	40000800 	.word	0x40000800

08003ab0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ab6:	f107 0318 	add.w	r3, r7, #24
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ace:	463b      	mov	r3, r7
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003adc:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <MX_TIM5_Init+0xdc>)
 8003ade:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae6:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003aec:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af4:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b00:	4821      	ldr	r0, [pc, #132]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003b02:	f005 fd59 	bl	80095b8 <HAL_TIM_Base_Init>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003b0c:	f000 fc7e 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b14:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	481a      	ldr	r0, [pc, #104]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003b1e:	f006 fc55 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003b28:	f000 fc70 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003b2c:	4816      	ldr	r0, [pc, #88]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003b2e:	f006 f813 	bl	8009b58 <HAL_TIM_IC_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003b38:	f000 fc68 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b44:	f107 0310 	add.w	r3, r7, #16
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480f      	ldr	r0, [pc, #60]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003b4c:	f007 f90e 	bl	800ad6c <HAL_TIMEx_MasterConfigSynchronization>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8003b56:	f000 fc59 	bl	800440c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4805      	ldr	r0, [pc, #20]	; (8003b88 <MX_TIM5_Init+0xd8>)
 8003b72:	f006 facd 	bl	800a110 <HAL_TIM_IC_ConfigChannel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8003b7c:	f000 fc46 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b80:	bf00      	nop
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000488 	.word	0x20000488
 8003b8c:	40000c00 	.word	0x40000c00

08003b90 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b96:	463b      	mov	r3, r7
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <MX_TIM9_Init+0x70>)
 8003ba6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64000;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003bb6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003bba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003bc8:	480c      	ldr	r0, [pc, #48]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003bca:	f005 fcf5 	bl	80095b8 <HAL_TIM_Base_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003bd4:	f000 fc1a 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bdc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bde:	463b      	mov	r3, r7
 8003be0:	4619      	mov	r1, r3
 8003be2:	4806      	ldr	r0, [pc, #24]	; (8003bfc <MX_TIM9_Init+0x6c>)
 8003be4:	f006 fbf2 	bl	800a3cc <HAL_TIM_ConfigClockSource>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003bee:	f000 fc0d 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200004d0 	.word	0x200004d0
 8003c00:	40014000 	.word	0x40014000

08003c04 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <MX_TIM10_Init+0x8c>)
 8003c1a:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003c28:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003c3c:	4813      	ldr	r0, [pc, #76]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c3e:	f005 fcbb 	bl	80095b8 <HAL_TIM_Base_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8003c48:	f000 fbe0 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8003c4c:	480f      	ldr	r0, [pc, #60]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c4e:	f005 ff83 	bl	8009b58 <HAL_TIM_IC_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8003c58:	f000 fbd8 	bl	800440c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c60:	2301      	movs	r3, #1
 8003c62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	2200      	movs	r2, #0
 8003c70:	4619      	mov	r1, r3
 8003c72:	4806      	ldr	r0, [pc, #24]	; (8003c8c <MX_TIM10_Init+0x88>)
 8003c74:	f006 fa4c 	bl	800a110 <HAL_TIM_IC_ConfigChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8003c7e:	f000 fbc5 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000518 	.word	0x20000518
 8003c90:	40014400 	.word	0x40014400

08003c94 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <MX_TIM11_Init+0x8c>)
 8003caa:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cbe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003ccc:	4813      	ldr	r0, [pc, #76]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cce:	f005 fc73 	bl	80095b8 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8003cd8:	f000 fb98 	bl	800440c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8003cdc:	480f      	ldr	r0, [pc, #60]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003cde:	f005 ff3b 	bl	8009b58 <HAL_TIM_IC_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8003ce8:	f000 fb90 	bl	800440c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003cec:	2300      	movs	r3, #0
 8003cee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4619      	mov	r1, r3
 8003d02:	4806      	ldr	r0, [pc, #24]	; (8003d1c <MX_TIM11_Init+0x88>)
 8003d04:	f006 fa04 	bl	800a110 <HAL_TIM_IC_ConfigChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8003d0e:	f000 fb7d 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000560 	.word	0x20000560
 8003d20:	40014800 	.word	0x40014800

08003d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <MX_USART2_UART_Init+0x50>)
 8003d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d5c:	f007 f8da 	bl	800af14 <HAL_UART_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d66:	f000 fb51 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200005a8 	.word	0x200005a8
 8003d74:	40004400 	.word	0x40004400

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a69      	ldr	r2, [pc, #420]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b67      	ldr	r3, [pc, #412]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a62      	ldr	r2, [pc, #392]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b60      	ldr	r3, [pc, #384]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b5c      	ldr	r3, [pc, #368]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a5b      	ldr	r2, [pc, #364]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a54      	ldr	r2, [pc, #336]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b52      	ldr	r3, [pc, #328]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a4d      	ldr	r2, [pc, #308]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <MX_GPIO_Init+0x1c4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f240 1163 	movw	r1, #355	; 0x163
 8003e20:	4847      	ldr	r0, [pc, #284]	; (8003f40 <MX_GPIO_Init+0x1c8>)
 8003e22:	f004 fdf5 	bl	8008a10 <HAL_GPIO_WritePin>
                          |S_Enable_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4846      	ldr	r0, [pc, #280]	; (8003f44 <MX_GPIO_Init+0x1cc>)
 8003e2c:	f004 fdf0 	bl	8008a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	4619      	mov	r1, r3
 8003e46:	483e      	ldr	r0, [pc, #248]	; (8003f40 <MX_GPIO_Init+0x1c8>)
 8003e48:	f004 fc46 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_DirPaP3_Pin S_DirPaP2_Pin S_Enable_3_Pin S_Enable_2_Pin
                           S_Enable_1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003e4c:	f240 1363 	movw	r3, #355	; 0x163
 8003e50:	617b      	str	r3, [r7, #20]
                          |S_Enable_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e52:	2301      	movs	r3, #1
 8003e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4619      	mov	r1, r3
 8003e64:	4836      	ldr	r0, [pc, #216]	; (8003f40 <MX_GPIO_Init+0x1c8>)
 8003e66:	f004 fc37 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : faultDriver3_Pin */
  GPIO_InitStruct.Pin = faultDriver3_Pin;
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(faultDriver3_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4832      	ldr	r0, [pc, #200]	; (8003f48 <MX_GPIO_Init+0x1d0>)
 8003e80:	f004 fc2a 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_DirPaP1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e90:	2300      	movs	r3, #0
 8003e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_DirPaP1_GPIO_Port, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	482a      	ldr	r0, [pc, #168]	; (8003f44 <MX_GPIO_Init+0x1cc>)
 8003e9c:	f004 fc1c 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : faultDriver2_Pin faultDriver1_Pin E_EndStop1_Sup_Pin E_EndStop1_Inf_Pin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
 8003ea0:	f24c 0330 	movw	r3, #49200	; 0xc030
 8003ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ea6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4823      	ldr	r0, [pc, #140]	; (8003f44 <MX_GPIO_Init+0x1cc>)
 8003eb8:	f004 fc0e 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_EndStop3_Sup_Pin E_EndStop2_Sup_Pin E_EndStop3_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop2_Sup_Pin|E_EndStop3_Inf_Pin;
 8003ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ec2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	481b      	ldr	r0, [pc, #108]	; (8003f40 <MX_GPIO_Init+0x1c8>)
 8003ed4:	f004 fc00 	bl	80086d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_EndStop2_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop2_Inf_Pin;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003edc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_EndStop2_Inf_GPIO_Port, &GPIO_InitStruct);
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	4619      	mov	r1, r3
 8003eec:	4817      	ldr	r0, [pc, #92]	; (8003f4c <MX_GPIO_Init+0x1d4>)
 8003eee:	f004 fbf3 	bl	80086d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	2008      	movs	r0, #8
 8003ef8:	f004 fb17 	bl	800852a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003efc:	2008      	movs	r0, #8
 8003efe:	f004 fb30 	bl	8008562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2102      	movs	r1, #2
 8003f06:	200a      	movs	r0, #10
 8003f08:	f004 fb0f 	bl	800852a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003f0c:	200a      	movs	r0, #10
 8003f0e:	f004 fb28 	bl	8008562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2102      	movs	r1, #2
 8003f16:	2017      	movs	r0, #23
 8003f18:	f004 fb07 	bl	800852a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003f1c:	2017      	movs	r0, #23
 8003f1e:	f004 fb20 	bl	8008562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2102      	movs	r1, #2
 8003f26:	2028      	movs	r0, #40	; 0x28
 8003f28:	f004 faff 	bl	800852a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f2c:	2028      	movs	r0, #40	; 0x28
 8003f2e:	f004 fb18 	bl	8008562 <HAL_NVIC_EnableIRQ>

}
 8003f32:	bf00      	nop
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020400 	.word	0x40020400
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	40020c00 	.word	0x40020c00

08003f50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
	test++;
 8003f5a:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x258>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a91      	ldr	r2, [pc, #580]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x258>)
 8003f62:	6013      	str	r3, [r2, #0]
	switch( GPIO_Pin){
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6a:	f000 8104 	beq.w	8004176 <HAL_GPIO_EXTI_Callback+0x226>
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f72:	f300 8114 	bgt.w	800419e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7a:	f000 80b2 	beq.w	80040e2 <HAL_GPIO_EXTI_Callback+0x192>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	f300 810c 	bgt.w	800419e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8a:	f000 8085 	beq.w	8004098 <HAL_GPIO_EXTI_Callback+0x148>
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	f300 8104 	bgt.w	800419e <HAL_GPIO_EXTI_Callback+0x24e>
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	f000 80c7 	beq.w	800412c <HAL_GPIO_EXTI_Callback+0x1dc>
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	f300 80fc 	bgt.w	800419e <HAL_GPIO_EXTI_Callback+0x24e>
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d007      	beq.n	8003fba <HAL_GPIO_EXTI_Callback+0x6a>
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	f300 80f7 	bgt.w	800419e <HAL_GPIO_EXTI_Callback+0x24e>
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d04c      	beq.n	800404e <HAL_GPIO_EXTI_Callback+0xfe>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d025      	beq.n	8004004 <HAL_GPIO_EXTI_Callback+0xb4>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8003fb8:	e0f1      	b.n	800419e <HAL_GPIO_EXTI_Callback+0x24e>
			 Stop_PWM_MOTOR_1;
 8003fba:	2100      	movs	r1, #0
 8003fbc:	487b      	ldr	r0, [pc, #492]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 8003fbe:	f005 fd67 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	487a      	ldr	r0, [pc, #488]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 8003fc6:	f005 fd63 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4879      	ldr	r0, [pc, #484]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 8003fce:	f005 fd5f 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003fd2:	4879      	ldr	r0, [pc, #484]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 8003fd4:	f005 fc24 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003fd8:	4878      	ldr	r0, [pc, #480]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 8003fda:	f005 fb97 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4877      	ldr	r0, [pc, #476]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 8003fe2:	f005 fe12 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4876      	ldr	r0, [pc, #472]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 8003fea:	f005 fe0e 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4875      	ldr	r0, [pc, #468]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 8003ff2:	f005 fe0a 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmInf = true;
 8003ff6:	4b75      	ldr	r3, [pc, #468]	; (80041cc <HAL_GPIO_EXTI_Callback+0x27c>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8003ffc:	4b74      	ldr	r3, [pc, #464]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 8003ffe:	2205      	movs	r2, #5
 8004000:	701a      	strb	r2, [r3, #0]
			 break;
 8004002:	e0cd      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 8004004:	2100      	movs	r1, #0
 8004006:	4869      	ldr	r0, [pc, #420]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 8004008:	f005 fd42 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800400c:	2100      	movs	r1, #0
 800400e:	4868      	ldr	r0, [pc, #416]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 8004010:	f005 fd3e 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8004014:	2100      	movs	r1, #0
 8004016:	4867      	ldr	r0, [pc, #412]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 8004018:	f005 fd3a 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 800401c:	4866      	ldr	r0, [pc, #408]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 800401e:	f005 fbff 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004022:	4866      	ldr	r0, [pc, #408]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 8004024:	f005 fb72 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004028:	2100      	movs	r1, #0
 800402a:	4865      	ldr	r0, [pc, #404]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 800402c:	f005 fded 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004030:	2100      	movs	r1, #0
 8004032:	4864      	ldr	r0, [pc, #400]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 8004034:	f005 fde9 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004038:	2100      	movs	r1, #0
 800403a:	4863      	ldr	r0, [pc, #396]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 800403c:	f005 fde5 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmSup = true;
 8004040:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x284>)
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004046:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004048:	2205      	movs	r2, #5
 800404a:	701a      	strb	r2, [r3, #0]
			 break;
 800404c:	e0a8      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 800404e:	2100      	movs	r1, #0
 8004050:	4856      	ldr	r0, [pc, #344]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 8004052:	f005 fd1d 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004056:	2100      	movs	r1, #0
 8004058:	4855      	ldr	r0, [pc, #340]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 800405a:	f005 fd19 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800405e:	2100      	movs	r1, #0
 8004060:	4854      	ldr	r0, [pc, #336]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 8004062:	f005 fd15 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004066:	4854      	ldr	r0, [pc, #336]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 8004068:	f005 fbda 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800406c:	4853      	ldr	r0, [pc, #332]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 800406e:	f005 fb4d 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004072:	2100      	movs	r1, #0
 8004074:	4852      	ldr	r0, [pc, #328]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 8004076:	f005 fdc8 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800407a:	2100      	movs	r1, #0
 800407c:	4851      	ldr	r0, [pc, #324]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 800407e:	f005 fdc4 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004082:	2100      	movs	r1, #0
 8004084:	4850      	ldr	r0, [pc, #320]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 8004086:	f005 fdc0 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmInf = true;
 800408a:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_GPIO_EXTI_Callback+0x27c>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004092:	2205      	movs	r2, #5
 8004094:	701a      	strb	r2, [r3, #0]
			 break;
 8004096:	e083      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 8004098:	2100      	movs	r1, #0
 800409a:	4844      	ldr	r0, [pc, #272]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 800409c:	f005 fcf8 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80040a0:	2100      	movs	r1, #0
 80040a2:	4843      	ldr	r0, [pc, #268]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 80040a4:	f005 fcf4 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040a8:	2100      	movs	r1, #0
 80040aa:	4842      	ldr	r0, [pc, #264]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 80040ac:	f005 fcf0 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 80040b0:	4841      	ldr	r0, [pc, #260]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 80040b2:	f005 fbb5 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 80040b6:	4841      	ldr	r0, [pc, #260]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 80040b8:	f005 fb28 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 80040bc:	2100      	movs	r1, #0
 80040be:	4840      	ldr	r0, [pc, #256]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 80040c0:	f005 fda3 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80040c4:	2100      	movs	r1, #0
 80040c6:	483f      	ldr	r0, [pc, #252]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 80040c8:	f005 fd9f 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80040cc:	2100      	movs	r1, #0
 80040ce:	483e      	ldr	r0, [pc, #248]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 80040d0:	f005 fd9b 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmSup = true;
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x284>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 80040dc:	2205      	movs	r2, #5
 80040de:	701a      	strb	r2, [r3, #0]
			 break;
 80040e0:	e05e      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 80040e2:	2100      	movs	r1, #0
 80040e4:	4831      	ldr	r0, [pc, #196]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 80040e6:	f005 fcd3 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80040ea:	2100      	movs	r1, #0
 80040ec:	4830      	ldr	r0, [pc, #192]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 80040ee:	f005 fccf 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040f2:	2100      	movs	r1, #0
 80040f4:	482f      	ldr	r0, [pc, #188]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 80040f6:	f005 fccb 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 80040fa:	482f      	ldr	r0, [pc, #188]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 80040fc:	f005 fb90 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004100:	482e      	ldr	r0, [pc, #184]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 8004102:	f005 fb03 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004106:	2100      	movs	r1, #0
 8004108:	482d      	ldr	r0, [pc, #180]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 800410a:	f005 fd7e 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800410e:	2100      	movs	r1, #0
 8004110:	482c      	ldr	r0, [pc, #176]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 8004112:	f005 fd7a 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004116:	2100      	movs	r1, #0
 8004118:	482b      	ldr	r0, [pc, #172]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 800411a:	f005 fd76 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmInf = true;
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_GPIO_EXTI_Callback+0x27c>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8004124:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004126:	2205      	movs	r2, #5
 8004128:	701a      	strb	r2, [r3, #0]
			 break;
 800412a:	e039      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 Stop_PWM_MOTOR_1;
 800412c:	2100      	movs	r1, #0
 800412e:	481f      	ldr	r0, [pc, #124]	; (80041ac <HAL_GPIO_EXTI_Callback+0x25c>)
 8004130:	f005 fcae 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004134:	2100      	movs	r1, #0
 8004136:	481e      	ldr	r0, [pc, #120]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x260>)
 8004138:	f005 fcaa 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800413c:	2100      	movs	r1, #0
 800413e:	481d      	ldr	r0, [pc, #116]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x264>)
 8004140:	f005 fca6 	bl	8009a90 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004144:	481c      	ldr	r0, [pc, #112]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x268>)
 8004146:	f005 fb6b 	bl	8009820 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 800414a:	481c      	ldr	r0, [pc, #112]	; (80041bc <HAL_GPIO_EXTI_Callback+0x26c>)
 800414c:	f005 fade 	bl	800970c <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004150:	2100      	movs	r1, #0
 8004152:	481b      	ldr	r0, [pc, #108]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x270>)
 8004154:	f005 fd59 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004158:	2100      	movs	r1, #0
 800415a:	481a      	ldr	r0, [pc, #104]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x274>)
 800415c:	f005 fd55 	bl	8009c0a <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004160:	2100      	movs	r1, #0
 8004162:	4819      	ldr	r0, [pc, #100]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x278>)
 8004164:	f005 fd51 	bl	8009c0a <HAL_TIM_IC_Stop>
			 endStopAlarmSup = true;
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x284>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x280>)
 8004170:	2205      	movs	r2, #5
 8004172:	701a      	strb	r2, [r3, #0]
			 break;
 8004174:	e014      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 if (!endStopAlarmSup && !endStopAlarmInf && !faultDrivers){
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x284>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <HAL_GPIO_EXTI_Callback+0x246>
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_GPIO_EXTI_Callback+0x27c>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <HAL_GPIO_EXTI_Callback+0x246>
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x288>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_GPIO_EXTI_Callback+0x246>
				 continuar = false;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_GPIO_EXTI_Callback+0x28c>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
			 break;
 8004194:	e004      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
			 }else{continuar = true;}
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_GPIO_EXTI_Callback+0x28c>)
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
			 break;
 800419c:	e000      	b.n	80041a0 <HAL_GPIO_EXTI_Callback+0x250>
		 default: break;
 800419e:	bf00      	nop


	}


}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200006d4 	.word	0x200006d4
 80041ac:	20000368 	.word	0x20000368
 80041b0:	200003f8 	.word	0x200003f8
 80041b4:	20000440 	.word	0x20000440
 80041b8:	200004d0 	.word	0x200004d0
 80041bc:	200003b0 	.word	0x200003b0
 80041c0:	20000488 	.word	0x20000488
 80041c4:	20000518 	.word	0x20000518
 80041c8:	20000560 	.word	0x20000560
 80041cc:	200006dd 	.word	0x200006dd
 80041d0:	200006d8 	.word	0x200006d8
 80041d4:	200006dc 	.word	0x200006dc
 80041d8:	200006df 	.word	0x200006df
 80041dc:	200006de 	.word	0x200006de

080041e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a30      	ldr	r2, [pc, #192]	; (80042b0 <HAL_UART_RxCpltCallback+0xd0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d14d      	bne.n	800428e <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_UART_RxCpltCallback+0xd4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b3a      	cmp	r3, #58	; 0x3a
 80041fc:	d006      	beq.n	800420c <HAL_UART_RxCpltCallback+0x2c>
 80041fe:	2b3a      	cmp	r3, #58	; 0x3a
 8004200:	dc36      	bgt.n	8004270 <HAL_UART_RxCpltCallback+0x90>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d009      	beq.n	800421a <HAL_UART_RxCpltCallback+0x3a>
 8004206:	2b0d      	cmp	r3, #13
 8004208:	d01e      	beq.n	8004248 <HAL_UART_RxCpltCallback+0x68>
 800420a:	e031      	b.n	8004270 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HAL_UART_RxCpltCallback+0xdc>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
			break;
 8004218:	e040      	b.n	800429c <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 800421a:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d037      	beq.n	8004292 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800422c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800422e:	e030      	b.n	8004292 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_UART_RxCpltCallback+0xe0>)
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]
				rx_index++;
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 8004246:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b1e      	cmp	r3, #30
 800424e:	d1ef      	bne.n	8004230 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_UART_RxCpltCallback+0xdc>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d11e      	bne.n	8004296 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_UART_RxCpltCallback+0xe0>)
 8004260:	2100      	movs	r1, #0
 8004262:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8004264:	f7fd fa8a 	bl	800177c <interpretaComando>
				cm0 = 0;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <HAL_UART_RxCpltCallback+0xdc>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]

			}
			break;
 800426e:	e012      	b.n	8004296 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b1d      	cmp	r3, #29
 8004276:	d810      	bhi.n	800429a <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	b2d1      	uxtb	r1, r2
 8004280:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <HAL_UART_RxCpltCallback+0xd8>)
 8004282:	7011      	strb	r1, [r2, #0]
 8004284:	4619      	mov	r1, r3
 8004286:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HAL_UART_RxCpltCallback+0xe0>)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	5453      	strb	r3, [r2, r1]
			}
			break;
 800428c:	e005      	b.n	800429a <HAL_UART_RxCpltCallback+0xba>
		}
	}
 800428e:	bf00      	nop
 8004290:	e004      	b.n	800429c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <HAL_UART_RxCpltCallback+0xbc>
			break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800429a:	bf00      	nop
	HAL_UART_Receive_IT(&huart2, &rx_data, 1); //Receive data (one character only)
 800429c:	2201      	movs	r2, #1
 800429e:	4905      	ldr	r1, [pc, #20]	; (80042b4 <HAL_UART_RxCpltCallback+0xd4>)
 80042a0:	4808      	ldr	r0, [pc, #32]	; (80042c4 <HAL_UART_RxCpltCallback+0xe4>)
 80042a2:	f006 ff16 	bl	800b0d2 <HAL_UART_Receive_IT>
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40004400 	.word	0x40004400
 80042b4:	2000081a 	.word	0x2000081a
 80042b8:	200007f9 	.word	0x200007f9
 80042bc:	200006d0 	.word	0x200006d0
 80042c0:	200007fc 	.word	0x200007fc
 80042c4:	200005a8 	.word	0x200005a8

080042c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	__NOP();
 80042d0:	bf00      	nop
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a20      	ldr	r2, [pc, #128]	; (8004370 <HAL_TIM_IC_CaptureCallback+0x90>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10f      	bne.n	8004312 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <HAL_TIM_IC_CaptureCallback+0x94>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d103      	bne.n	8004306 <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004300:	2201      	movs	r2, #1
 8004302:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8004304:	e02e      	b.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	3301      	adds	r3, #1
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_TIM_IC_CaptureCallback+0x94>)
 800430e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004310:	e028      	b.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM10){
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_TIM_IC_CaptureCallback+0x98>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10f      	bne.n	800433c <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_TIM_IC_CaptureCallback+0x9c>)
 800431e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	429a      	cmp	r2, r3
 8004326:	d103      	bne.n	8004330 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <HAL_TIM_IC_CaptureCallback+0x9c>)
 800432a:	2201      	movs	r2, #1
 800432c:	765a      	strb	r2, [r3, #25]
}
 800432e:	e019      	b.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	3301      	adds	r3, #1
 8004336:	4a11      	ldr	r2, [pc, #68]	; (800437c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
}
 800433a:	e013      	b.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM11){
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	429a      	cmp	r2, r3
 8004350:	d103      	bne.n	800435a <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004354:	2201      	movs	r2, #1
 8004356:	765a      	strb	r2, [r3, #25]
}
 8004358:	e004      	b.n	8004364 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	3301      	adds	r3, #1
 8004360:	4a08      	ldr	r2, [pc, #32]	; (8004384 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8004362:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40000c00 	.word	0x40000c00
 8004374:	200005f0 	.word	0x200005f0
 8004378:	40014400 	.word	0x40014400
 800437c:	20000638 	.word	0x20000638
 8004380:	40014800 	.word	0x40014800
 8004384:	20000680 	.word	0x20000680

08004388 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

	if (htim == &htim9) {  //Timer that update velocity'curve. It interrups every 10 ms
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d129      	bne.n	80043ec <HAL_TIM_PeriodElapsedCallback+0x64>

		if (!timeFlag) {
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_PeriodElapsedCallback+0x26>
			timeFlag = true;
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
			TIM2->CNT = 0;	//We start counting from here
 80043a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043aa:	2200      	movs	r2, #0
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM2->CNT)) * ((double)(TIM2->PSC + 1) / FCL));
 80043ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc f8ad 	bl	8000514 <__aeabi_ui2d>
 80043ba:	4604      	mov	r4, r0
 80043bc:	460d      	mov	r5, r1
 80043be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	3301      	adds	r3, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc f8a4 	bl	8000514 <__aeabi_ui2d>
 80043cc:	a30a      	add	r3, pc, #40	; (adr r3, 80043f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc fa43 	bl	800085c <__aeabi_ddiv>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fc f913 	bl	8000608 <__aeabi_dmul>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4908      	ldr	r1, [pc, #32]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80043e8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdb0      	pop	{r4, r5, r7, pc}
 80043f4:	f3af 8000 	nop.w
 80043f8:	00000000 	.word	0x00000000
 80043fc:	418e8480 	.word	0x418e8480
 8004400:	200004d0 	.word	0x200004d0
 8004404:	200007f8 	.word	0x200007f8
 8004408:	200006c8 	.word	0x200006c8

0800440c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004410:	b672      	cpsid	i
}
 8004412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004414:	e7fe      	b.n	8004414 <Error_Handler+0x8>
	...

08004418 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8004418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004436:	f7fc fb6d 	bl	8000b14 <__aeabi_dcmpge>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02a      	beq.n	8004496 <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800444c:	f7fb ff24 	bl	8000298 <__aeabi_dsub>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d104      	bne.n	8004474 <configMotor+0x5c>
 800446a:	2201      	movs	r2, #1
 800446c:	2101      	movs	r1, #1
 800446e:	484e      	ldr	r0, [pc, #312]	; (80045a8 <configMotor+0x190>)
 8004470:	f004 face 	bl	8008a10 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d104      	bne.n	8004484 <configMotor+0x6c>
 800447a:	2201      	movs	r2, #1
 800447c:	2102      	movs	r1, #2
 800447e:	484b      	ldr	r0, [pc, #300]	; (80045ac <configMotor+0x194>)
 8004480:	f004 fac6 	bl	8008a10 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d12f      	bne.n	80044ea <configMotor+0xd2>
 800448a:	2201      	movs	r2, #1
 800448c:	2101      	movs	r1, #1
 800448e:	4847      	ldr	r0, [pc, #284]	; (80045ac <configMotor+0x194>)
 8004490:	f004 fabe 	bl	8008a10 <HAL_GPIO_WritePin>
 8004494:	e029      	b.n	80044ea <configMotor+0xd2>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fb fef9 	bl	8000298 <__aeabi_dsub>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <configMotor+0xb2>
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	4838      	ldr	r0, [pc, #224]	; (80045a8 <configMotor+0x190>)
 80044c6:	f004 faa3 	bl	8008a10 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d104      	bne.n	80044da <configMotor+0xc2>
 80044d0:	2200      	movs	r2, #0
 80044d2:	2102      	movs	r1, #2
 80044d4:	4835      	ldr	r0, [pc, #212]	; (80045ac <configMotor+0x194>)
 80044d6:	f004 fa9b 	bl	8008a10 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d104      	bne.n	80044ea <configMotor+0xd2>
 80044e0:	2200      	movs	r2, #0
 80044e2:	2101      	movs	r1, #1
 80044e4:	4831      	ldr	r0, [pc, #196]	; (80045ac <configMotor+0x194>)
 80044e6:	f004 fa93 	bl	8008a10 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 80044ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b2f      	ldr	r3, [pc, #188]	; (80045b0 <configMotor+0x198>)
 80044f4:	f7fc f888 	bl	8000608 <__aeabi_dmul>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <configMotor+0x19c>)
 8004506:	f7fc f9a9 	bl	800085c <__aeabi_ddiv>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	f7fc fb23 	bl	8000b68 <__aeabi_d2uiz>
 8004522:	4602      	mov	r2, r0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb ffeb 	bl	8000514 <__aeabi_ui2d>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4640      	mov	r0, r8
 8004544:	4649      	mov	r1, r9
 8004546:	f7fb fea7 	bl	8000298 <__aeabi_dsub>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fb fea3 	bl	800029c <__adddf3>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	if (motor->remainder >= 1) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <configMotor+0x1a0>)
 800456c:	f7fc fad2 	bl	8000b14 <__aeabi_dcmpge>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d100      	bne.n	8004578 <configMotor+0x160>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8004576:	e011      	b.n	800459c <configMotor+0x184>
		motor->remainder -= 1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <configMotor+0x1a0>)
 8004584:	f7fb fe88 	bl	8000298 <__aeabi_dsub>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		motor->numStep += 1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045a6:	bf00      	nop
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40bf4000 	.word	0x40bf4000
 80045b4:	40768000 	.word	0x40768000
 80045b8:	3ff00000 	.word	0x3ff00000

080045bc <robotInitialization>:
FILE *file;
char *filename = "archivo.txt";
char buffer[BUFFER_SIZE];
//--------------------------------------------

void robotInitialization(void){
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim1);
 80045c0:	481a      	ldr	r0, [pc, #104]	; (800462c <robotInitialization+0x70>)
 80045c2:	f005 f849 	bl	8009658 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80045c6:	481a      	ldr	r0, [pc, #104]	; (8004630 <robotInitialization+0x74>)
 80045c8:	f005 f846 	bl	8009658 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80045cc:	4819      	ldr	r0, [pc, #100]	; (8004634 <robotInitialization+0x78>)
 80045ce:	f005 f843 	bl	8009658 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 80045d2:	2200      	movs	r2, #0
 80045d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045d8:	4817      	ldr	r0, [pc, #92]	; (8004638 <robotInitialization+0x7c>)
 80045da:	f004 fa19 	bl	8008a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 80045de:	2200      	movs	r2, #0
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	4815      	ldr	r0, [pc, #84]	; (8004638 <robotInitialization+0x7c>)
 80045e4:	f004 fa14 	bl	8008a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2120      	movs	r1, #32
 80045ec:	4812      	ldr	r0, [pc, #72]	; (8004638 <robotInitialization+0x7c>)
 80045ee:	f004 fa0f 	bl	8008a10 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 80045f2:	2032      	movs	r0, #50	; 0x32
 80045f4:	f003 fe76 	bl	80082e4 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 80045f8:	2200      	movs	r2, #0
 80045fa:	2101      	movs	r1, #1
 80045fc:	480f      	ldr	r0, [pc, #60]	; (800463c <robotInitialization+0x80>)
 80045fe:	f004 fa07 	bl	8008a10 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8004602:	2200      	movs	r2, #0
 8004604:	2102      	movs	r1, #2
 8004606:	480c      	ldr	r0, [pc, #48]	; (8004638 <robotInitialization+0x7c>)
 8004608:	f004 fa02 	bl	8008a10 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 800460c:	2200      	movs	r2, #0
 800460e:	2101      	movs	r1, #1
 8004610:	4809      	ldr	r0, [pc, #36]	; (8004638 <robotInitialization+0x7c>)
 8004612:	f004 f9fd 	bl	8008a10 <HAL_GPIO_WritePin>

	motor1.stepReached = false;
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <robotInitialization+0x84>)
 8004618:	2200      	movs	r2, #0
 800461a:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <robotInitialization+0x88>)
 800461e:	2200      	movs	r2, #0
 8004620:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <robotInitialization+0x8c>)
 8004624:	2200      	movs	r2, #0
 8004626:	765a      	strb	r2, [r3, #25]


}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000368 	.word	0x20000368
 8004630:	200003f8 	.word	0x200003f8
 8004634:	20000440 	.word	0x20000440
 8004638:	40020800 	.word	0x40020800
 800463c:	40020400 	.word	0x40020400
 8004640:	200005f0 	.word	0x200005f0
 8004644:	20000638 	.word	0x20000638
 8004648:	20000680 	.word	0x20000680
 800464c:	00000000 	.word	0x00000000

08004650 <statesMachineLoop>:


void statesMachineLoop(void){
 8004650:	b5b0      	push	{r4, r5, r7, lr}
 8004652:	af00      	add	r7, sp, #0



	switch (state){
 8004654:	4ba6      	ldr	r3, [pc, #664]	; (80048f0 <statesMachineLoop+0x2a0>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b05      	cmp	r3, #5
 800465a:	f200 8644 	bhi.w	80052e6 <statesMachineLoop+0xc96>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <statesMachineLoop+0x14>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	080049f1 	.word	0x080049f1
 800466c:	0800477d 	.word	0x0800477d
 8004670:	080046ad 	.word	0x080046ad
 8004674:	0800525d 	.word	0x0800525d
 8004678:	08004bb5 	.word	0x08004bb5

	case INIT:

		  HAL_UART_Transmit(&huart2, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 800467c:	2364      	movs	r3, #100	; 0x64
 800467e:	221c      	movs	r2, #28
 8004680:	499c      	ldr	r1, [pc, #624]	; (80048f4 <statesMachineLoop+0x2a4>)
 8004682:	489d      	ldr	r0, [pc, #628]	; (80048f8 <statesMachineLoop+0x2a8>)
 8004684:	f006 fc93 	bl	800afae <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8004688:	2201      	movs	r2, #1
 800468a:	499c      	ldr	r1, [pc, #624]	; (80048fc <statesMachineLoop+0x2ac>)
 800468c:	489a      	ldr	r0, [pc, #616]	; (80048f8 <statesMachineLoop+0x2a8>)
 800468e:	f006 fd20 	bl	800b0d2 <HAL_UART_Receive_IT>
		  robotInitialization();
 8004692:	f7ff ff93 	bl	80045bc <robotInitialization>
		  HAL_UART_Transmit(&huart2, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8004696:	2364      	movs	r3, #100	; 0x64
 8004698:	2227      	movs	r2, #39	; 0x27
 800469a:	4999      	ldr	r1, [pc, #612]	; (8004900 <statesMachineLoop+0x2b0>)
 800469c:	4896      	ldr	r0, [pc, #600]	; (80048f8 <statesMachineLoop+0x2a8>)
 800469e:	f006 fc86 	bl	800afae <HAL_UART_Transmit>

		  state = READY;
 80046a2:	4b93      	ldr	r3, [pc, #588]	; (80048f0 <statesMachineLoop+0x2a0>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]

		break;
 80046a8:	f000 be24 	b.w	80052f4 <statesMachineLoop+0xca4>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 80046ac:	4b95      	ldr	r3, [pc, #596]	; (8004904 <statesMachineLoop+0x2b4>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]

		homing();
 80046b2:	f7fc fc81 	bl	8000fb8 <homing>

        if(homFin){
 80046b6:	4b94      	ldr	r3, [pc, #592]	; (8004908 <statesMachineLoop+0x2b8>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8615 	beq.w	80052ea <statesMachineLoop+0xc9a>

        	homFin = false;
 80046c0:	4b91      	ldr	r3, [pc, #580]	; (8004908 <statesMachineLoop+0x2b8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 80046c6:	2001      	movs	r0, #1
 80046c8:	f003 fe0c 	bl	80082e4 <HAL_Delay>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 80046cc:	2006      	movs	r0, #6
 80046ce:	f003 ff48 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 80046d2:	2007      	movs	r0, #7
 80046d4:	f003 ff45 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 80046d8:	2008      	movs	r0, #8
 80046da:	f003 ff42 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 80046de:	2009      	movs	r0, #9
 80046e0:	f003 ff3f 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 80046e4:	200a      	movs	r0, #10
 80046e6:	f003 ff3c 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 80046ea:	2017      	movs	r0, #23
 80046ec:	f003 ff39 	bl	8008562 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 80046f0:	2028      	movs	r0, #40	; 0x28
 80046f2:	f003 ff36 	bl	8008562 <HAL_NVIC_EnableIRQ>

			Pini.x=0;
 80046f6:	4985      	ldr	r1, [pc, #532]	; (800490c <statesMachineLoop+0x2bc>)
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8004704:	4981      	ldr	r1, [pc, #516]	; (800490c <statesMachineLoop+0x2bc>)
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8004712:	497e      	ldr	r1, [pc, #504]	; (800490c <statesMachineLoop+0x2bc>)
 8004714:	a374      	add	r3, pc, #464	; (adr r3, 80048e8 <statesMachineLoop+0x298>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 800471e:	497c      	ldr	r1, [pc, #496]	; (8004910 <statesMachineLoop+0x2c0>)
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 800472c:	4979      	ldr	r1, [pc, #484]	; (8004914 <statesMachineLoop+0x2c4>)
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 800473a:	4977      	ldr	r1, [pc, #476]	; (8004918 <statesMachineLoop+0x2c8>)
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8004748:	4971      	ldr	r1, [pc, #452]	; (8004910 <statesMachineLoop+0x2c0>)
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8004756:	496f      	ldr	r1, [pc, #444]	; (8004914 <statesMachineLoop+0x2c4>)
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8004764:	496c      	ldr	r1, [pc, #432]	; (8004918 <statesMachineLoop+0x2c8>)
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9c1 2308 	strd	r2, r3, [r1, #32]

			state = READY;
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <statesMachineLoop+0x2a0>)
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]

        }


		break;
 8004778:	f000 bdb7 	b.w	80052ea <statesMachineLoop+0xc9a>

	case WORKING:

		receptionFlag = false;
 800477c:	4b61      	ldr	r3, [pc, #388]	; (8004904 <statesMachineLoop+0x2b4>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8004782:	e09f      	b.n	80048c4 <statesMachineLoop+0x274>

			if (state==FAULT)break;
 8004784:	4b5a      	ldr	r3, [pc, #360]	; (80048f0 <statesMachineLoop+0x2a0>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b05      	cmp	r3, #5
 800478a:	f000 80df 	beq.w	800494c <statesMachineLoop+0x2fc>

			if (motor1.stepReached) {
 800478e:	4b60      	ldr	r3, [pc, #384]	; (8004910 <statesMachineLoop+0x2c0>)
 8004790:	7e5b      	ldrb	r3, [r3, #25]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <statesMachineLoop+0x158>
				Stop_PWM_MOTOR_1;
 8004796:	2100      	movs	r1, #0
 8004798:	4860      	ldr	r0, [pc, #384]	; (800491c <statesMachineLoop+0x2cc>)
 800479a:	f005 f979 	bl	8009a90 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800479e:	2100      	movs	r1, #0
 80047a0:	485f      	ldr	r0, [pc, #380]	; (8004920 <statesMachineLoop+0x2d0>)
 80047a2:	f005 fa32 	bl	8009c0a <HAL_TIM_IC_Stop>
 80047a6:	e018      	b.n	80047da <statesMachineLoop+0x18a>
			}else if (motor2.stepReached) {
 80047a8:	4b5a      	ldr	r3, [pc, #360]	; (8004914 <statesMachineLoop+0x2c4>)
 80047aa:	7e5b      	ldrb	r3, [r3, #25]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <statesMachineLoop+0x172>
				Stop_PWM_MOTOR_2;
 80047b0:	2100      	movs	r1, #0
 80047b2:	485c      	ldr	r0, [pc, #368]	; (8004924 <statesMachineLoop+0x2d4>)
 80047b4:	f005 f96c 	bl	8009a90 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_2);
 80047b8:	2104      	movs	r1, #4
 80047ba:	485b      	ldr	r0, [pc, #364]	; (8004928 <statesMachineLoop+0x2d8>)
 80047bc:	f005 fa25 	bl	8009c0a <HAL_TIM_IC_Stop>
 80047c0:	e00b      	b.n	80047da <statesMachineLoop+0x18a>
			}else if (motor3.stepReached){
 80047c2:	4b55      	ldr	r3, [pc, #340]	; (8004918 <statesMachineLoop+0x2c8>)
 80047c4:	7e5b      	ldrb	r3, [r3, #25]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <statesMachineLoop+0x18a>
				Stop_PWM_MOTOR_3;
 80047ca:	2100      	movs	r1, #0
 80047cc:	4857      	ldr	r0, [pc, #348]	; (800492c <statesMachineLoop+0x2dc>)
 80047ce:	f005 f95f 	bl	8009a90 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_3);
 80047d2:	2108      	movs	r1, #8
 80047d4:	4856      	ldr	r0, [pc, #344]	; (8004930 <statesMachineLoop+0x2e0>)
 80047d6:	f005 fa18 	bl	8009c0a <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <statesMachineLoop+0x2e4>)
 80047dc:	ed93 7b00 	vldr	d7, [r3]
 80047e0:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <statesMachineLoop+0x2c0>)
 80047e2:	ed93 6b08 	vldr	d6, [r3, #32]
 80047e6:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <statesMachineLoop+0x2c0>)
 80047e8:	ed93 5b00 	vldr	d5, [r3]
 80047ec:	4852      	ldr	r0, [pc, #328]	; (8004938 <statesMachineLoop+0x2e8>)
 80047ee:	eeb0 2a45 	vmov.f32	s4, s10
 80047f2:	eef0 2a65 	vmov.f32	s5, s11
 80047f6:	eeb0 1a46 	vmov.f32	s2, s12
 80047fa:	eef0 1a66 	vmov.f32	s3, s13
 80047fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004802:	eef0 0a67 	vmov.f32	s1, s15
 8004806:	f001 f98f 	bl	8005b28 <get_Straj>
 800480a:	eeb0 7a40 	vmov.f32	s14, s0
 800480e:	eef0 7a60 	vmov.f32	s15, s1
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <statesMachineLoop+0x2c0>)
 8004814:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 8004818:	4b46      	ldr	r3, [pc, #280]	; (8004934 <statesMachineLoop+0x2e4>)
 800481a:	ed93 7b00 	vldr	d7, [r3]
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <statesMachineLoop+0x2c4>)
 8004820:	ed93 6b08 	vldr	d6, [r3, #32]
 8004824:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <statesMachineLoop+0x2c4>)
 8004826:	ed93 5b00 	vldr	d5, [r3]
 800482a:	4844      	ldr	r0, [pc, #272]	; (800493c <statesMachineLoop+0x2ec>)
 800482c:	eeb0 2a45 	vmov.f32	s4, s10
 8004830:	eef0 2a65 	vmov.f32	s5, s11
 8004834:	eeb0 1a46 	vmov.f32	s2, s12
 8004838:	eef0 1a66 	vmov.f32	s3, s13
 800483c:	eeb0 0a47 	vmov.f32	s0, s14
 8004840:	eef0 0a67 	vmov.f32	s1, s15
 8004844:	f001 f970 	bl	8005b28 <get_Straj>
 8004848:	eeb0 7a40 	vmov.f32	s14, s0
 800484c:	eef0 7a60 	vmov.f32	s15, s1
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <statesMachineLoop+0x2c4>)
 8004852:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <statesMachineLoop+0x2e4>)
 8004858:	ed93 7b00 	vldr	d7, [r3]
 800485c:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <statesMachineLoop+0x2c8>)
 800485e:	ed93 6b08 	vldr	d6, [r3, #32]
 8004862:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <statesMachineLoop+0x2c8>)
 8004864:	ed93 5b00 	vldr	d5, [r3]
 8004868:	4835      	ldr	r0, [pc, #212]	; (8004940 <statesMachineLoop+0x2f0>)
 800486a:	eeb0 2a45 	vmov.f32	s4, s10
 800486e:	eef0 2a65 	vmov.f32	s5, s11
 8004872:	eeb0 1a46 	vmov.f32	s2, s12
 8004876:	eef0 1a66 	vmov.f32	s3, s13
 800487a:	eeb0 0a47 	vmov.f32	s0, s14
 800487e:	eef0 0a67 	vmov.f32	s1, s15
 8004882:	f001 f951 	bl	8005b28 <get_Straj>
 8004886:	eeb0 7a40 	vmov.f32	s14, s0
 800488a:	eef0 7a60 	vmov.f32	s15, s1
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <statesMachineLoop+0x2c8>)
 8004890:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8004894:	f003 fafc 	bl	8007e90 <setProfilTimer>


			if(startMotors){
 8004898:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <statesMachineLoop+0x2f4>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <statesMachineLoop+0x26e>
				startMotors = false;
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <statesMachineLoop+0x2f4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 80048a6:	2100      	movs	r1, #0
 80048a8:	481c      	ldr	r0, [pc, #112]	; (800491c <statesMachineLoop+0x2cc>)
 80048aa:	f005 f841 	bl	8009930 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 80048ae:	2100      	movs	r1, #0
 80048b0:	481c      	ldr	r0, [pc, #112]	; (8004924 <statesMachineLoop+0x2d4>)
 80048b2:	f005 f83d 	bl	8009930 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 80048b6:	2100      	movs	r1, #0
 80048b8:	481c      	ldr	r0, [pc, #112]	; (800492c <statesMachineLoop+0x2dc>)
 80048ba:	f005 f839 	bl	8009930 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 80048be:	4b22      	ldr	r3, [pc, #136]	; (8004948 <statesMachineLoop+0x2f8>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 80048c4:	4b12      	ldr	r3, [pc, #72]	; (8004910 <statesMachineLoop+0x2c0>)
 80048c6:	7e5b      	ldrb	r3, [r3, #25]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f43f af5b 	beq.w	8004784 <statesMachineLoop+0x134>
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <statesMachineLoop+0x2c4>)
 80048d0:	7e5b      	ldrb	r3, [r3, #25]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f43f af56 	beq.w	8004784 <statesMachineLoop+0x134>
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <statesMachineLoop+0x2c8>)
 80048da:	7e5b      	ldrb	r3, [r3, #25]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f43f af51 	beq.w	8004784 <statesMachineLoop+0x134>
 80048e2:	e034      	b.n	800494e <statesMachineLoop+0x2fe>
 80048e4:	f3af 8000 	nop.w
 80048e8:	c2f837b5 	.word	0xc2f837b5
 80048ec:	bfe0aa64 	.word	0xbfe0aa64
 80048f0:	200006d8 	.word	0x200006d8
 80048f4:	20000030 	.word	0x20000030
 80048f8:	200005a8 	.word	0x200005a8
 80048fc:	2000081a 	.word	0x2000081a
 8004900:	2000004c 	.word	0x2000004c
 8004904:	2000081b 	.word	0x2000081b
 8004908:	200006d9 	.word	0x200006d9
 800490c:	20000720 	.word	0x20000720
 8004910:	200005f0 	.word	0x200005f0
 8004914:	20000638 	.word	0x20000638
 8004918:	20000680 	.word	0x20000680
 800491c:	20000368 	.word	0x20000368
 8004920:	20000488 	.word	0x20000488
 8004924:	200003f8 	.word	0x200003f8
 8004928:	20000518 	.word	0x20000518
 800492c:	20000440 	.word	0x20000440
 8004930:	20000560 	.word	0x20000560
 8004934:	200006c8 	.word	0x200006c8
 8004938:	20000750 	.word	0x20000750
 800493c:	20000788 	.word	0x20000788
 8004940:	200007c0 	.word	0x200007c0
 8004944:	200006da 	.word	0x200006da
 8004948:	200006db 	.word	0x200006db
			if (state==FAULT)break;
 800494c:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800494e:	4b7e      	ldr	r3, [pc, #504]	; (8004b48 <statesMachineLoop+0x4f8>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d026      	beq.n	80049a4 <statesMachineLoop+0x354>

			startMotors = false;
 8004956:	4b7d      	ldr	r3, [pc, #500]	; (8004b4c <statesMachineLoop+0x4fc>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim5,  TIM_CHANNEL_1);
 800495c:	2100      	movs	r1, #0
 800495e:	487c      	ldr	r0, [pc, #496]	; (8004b50 <statesMachineLoop+0x500>)
 8004960:	f005 f953 	bl	8009c0a <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004964:	2100      	movs	r1, #0
 8004966:	487b      	ldr	r0, [pc, #492]	; (8004b54 <statesMachineLoop+0x504>)
 8004968:	f005 f94f 	bl	8009c0a <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 800496c:	2100      	movs	r1, #0
 800496e:	487a      	ldr	r0, [pc, #488]	; (8004b58 <statesMachineLoop+0x508>)
 8004970:	f005 f94b 	bl	8009c0a <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 8004974:	4b79      	ldr	r3, [pc, #484]	; (8004b5c <statesMachineLoop+0x50c>)
 8004976:	7e5b      	ldrb	r3, [r3, #25]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <statesMachineLoop+0x334>
 800497c:	2100      	movs	r1, #0
 800497e:	4878      	ldr	r0, [pc, #480]	; (8004b60 <statesMachineLoop+0x510>)
 8004980:	f005 f886 	bl	8009a90 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 8004984:	4b77      	ldr	r3, [pc, #476]	; (8004b64 <statesMachineLoop+0x514>)
 8004986:	7e5b      	ldrb	r3, [r3, #25]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <statesMachineLoop+0x344>
 800498c:	2100      	movs	r1, #0
 800498e:	4876      	ldr	r0, [pc, #472]	; (8004b68 <statesMachineLoop+0x518>)
 8004990:	f005 f87e 	bl	8009a90 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 8004994:	4b75      	ldr	r3, [pc, #468]	; (8004b6c <statesMachineLoop+0x51c>)
 8004996:	7e5b      	ldrb	r3, [r3, #25]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <statesMachineLoop+0x354>
 800499c:	2100      	movs	r1, #0
 800499e:	4874      	ldr	r0, [pc, #464]	; (8004b70 <statesMachineLoop+0x520>)
 80049a0:	f005 f876 	bl	8009a90 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 80049a4:	4b73      	ldr	r3, [pc, #460]	; (8004b74 <statesMachineLoop+0x524>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	4973      	ldr	r1, [pc, #460]	; (8004b78 <statesMachineLoop+0x528>)
 80049ac:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 80049b0:	4b70      	ldr	r3, [pc, #448]	; (8004b74 <statesMachineLoop+0x524>)
 80049b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049b6:	4970      	ldr	r1, [pc, #448]	; (8004b78 <statesMachineLoop+0x528>)
 80049b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 80049bc:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <statesMachineLoop+0x524>)
 80049be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80049c2:	496d      	ldr	r1, [pc, #436]	; (8004b78 <statesMachineLoop+0x528>)
 80049c4:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_TIM_Base_Stop_IT(&htim9);
 80049c8:	486c      	ldr	r0, [pc, #432]	; (8004b7c <statesMachineLoop+0x52c>)
 80049ca:	f004 ff29 	bl	8009820 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 80049ce:	486c      	ldr	r0, [pc, #432]	; (8004b80 <statesMachineLoop+0x530>)
 80049d0:	f004 fe9c 	bl	800970c <HAL_TIM_Base_Stop>

		if (startDemo){state=DEMO;}
 80049d4:	4b6b      	ldr	r3, [pc, #428]	; (8004b84 <statesMachineLoop+0x534>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <statesMachineLoop+0x396>
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <statesMachineLoop+0x538>)
 80049de:	2204      	movs	r2, #4
 80049e0:	701a      	strb	r2, [r3, #0]
		else{state = READY;}


		break;
 80049e2:	f000 bc87 	b.w	80052f4 <statesMachineLoop+0xca4>
		else{state = READY;}
 80049e6:	4b68      	ldr	r3, [pc, #416]	; (8004b88 <statesMachineLoop+0x538>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
		break;
 80049ec:	f000 bc82 	b.w	80052f4 <statesMachineLoop+0xca4>

	case READY:

		if (receptionFlag){
 80049f0:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <statesMachineLoop+0x53c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 847a 	beq.w	80052ee <statesMachineLoop+0xc9e>

			receptionFlag = false;
 80049fa:	4b64      	ldr	r3, [pc, #400]	; (8004b8c <statesMachineLoop+0x53c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <statesMachineLoop+0x4fc>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004a06:	2100      	movs	r1, #0
 8004a08:	4851      	ldr	r0, [pc, #324]	; (8004b50 <statesMachineLoop+0x500>)
 8004a0a:	f005 f95f 	bl	8009ccc <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4850      	ldr	r0, [pc, #320]	; (8004b54 <statesMachineLoop+0x504>)
 8004a12:	f005 f95b 	bl	8009ccc <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 8004a16:	2100      	movs	r1, #0
 8004a18:	484f      	ldr	r0, [pc, #316]	; (8004b58 <statesMachineLoop+0x508>)
 8004a1a:	f005 f957 	bl	8009ccc <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 8004a1e:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <statesMachineLoop+0x524>)
 8004a20:	ed93 5b00 	vldr	d5, [r3]
 8004a24:	ed93 6b02 	vldr	d6, [r3, #8]
 8004a28:	ed93 7b04 	vldr	d7, [r3, #16]
 8004a2c:	eeb0 0a45 	vmov.f32	s0, s10
 8004a30:	eef0 0a65 	vmov.f32	s1, s11
 8004a34:	eeb0 1a46 	vmov.f32	s2, s12
 8004a38:	eef0 1a66 	vmov.f32	s3, s13
 8004a3c:	eeb0 2a47 	vmov.f32	s4, s14
 8004a40:	eef0 2a67 	vmov.f32	s5, s15
 8004a44:	f7fd f83c 	bl	8001ac0 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8004a48:	4b44      	ldr	r3, [pc, #272]	; (8004b5c <statesMachineLoop+0x50c>)
 8004a4a:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a4e:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <statesMachineLoop+0x50c>)
 8004a50:	ed93 1b00 	vldr	d1, [r3]
 8004a54:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <statesMachineLoop+0x540>)
 8004a56:	ed93 2b00 	vldr	d2, [r3]
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	; (8004b94 <statesMachineLoop+0x544>)
 8004a5c:	ed93 3b00 	vldr	d3, [r3]
 8004a60:	4b4d      	ldr	r3, [pc, #308]	; (8004b98 <statesMachineLoop+0x548>)
 8004a62:	ed93 4b00 	vldr	d4, [r3]
 8004a66:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <statesMachineLoop+0x54c>)
 8004a68:	ed93 5b00 	vldr	d5, [r3]
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <statesMachineLoop+0x550>)
 8004a6e:	ed93 6b00 	vldr	d6, [r3]
 8004a72:	484c      	ldr	r0, [pc, #304]	; (8004ba4 <statesMachineLoop+0x554>)
 8004a74:	eeb0 0a47 	vmov.f32	s0, s14
 8004a78:	eef0 0a67 	vmov.f32	s1, s15
 8004a7c:	f002 fa6c 	bl	8006f58 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <statesMachineLoop+0x514>)
 8004a82:	ed93 7b08 	vldr	d7, [r3, #32]
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <statesMachineLoop+0x514>)
 8004a88:	ed93 1b00 	vldr	d1, [r3]
 8004a8c:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <statesMachineLoop+0x540>)
 8004a8e:	ed93 2b00 	vldr	d2, [r3]
 8004a92:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <statesMachineLoop+0x544>)
 8004a94:	ed93 3b00 	vldr	d3, [r3]
 8004a98:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <statesMachineLoop+0x548>)
 8004a9a:	ed93 4b00 	vldr	d4, [r3]
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <statesMachineLoop+0x54c>)
 8004aa0:	ed93 5b00 	vldr	d5, [r3]
 8004aa4:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <statesMachineLoop+0x550>)
 8004aa6:	ed93 6b00 	vldr	d6, [r3]
 8004aaa:	483f      	ldr	r0, [pc, #252]	; (8004ba8 <statesMachineLoop+0x558>)
 8004aac:	eeb0 0a47 	vmov.f32	s0, s14
 8004ab0:	eef0 0a67 	vmov.f32	s1, s15
 8004ab4:	f002 fa50 	bl	8006f58 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <statesMachineLoop+0x51c>)
 8004aba:	ed93 7b08 	vldr	d7, [r3, #32]
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <statesMachineLoop+0x51c>)
 8004ac0:	ed93 1b00 	vldr	d1, [r3]
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <statesMachineLoop+0x540>)
 8004ac6:	ed93 2b00 	vldr	d2, [r3]
 8004aca:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <statesMachineLoop+0x544>)
 8004acc:	ed93 3b00 	vldr	d3, [r3]
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <statesMachineLoop+0x548>)
 8004ad2:	ed93 4b00 	vldr	d4, [r3]
 8004ad6:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <statesMachineLoop+0x54c>)
 8004ad8:	ed93 5b00 	vldr	d5, [r3]
 8004adc:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <statesMachineLoop+0x550>)
 8004ade:	ed93 6b00 	vldr	d6, [r3]
 8004ae2:	4832      	ldr	r0, [pc, #200]	; (8004bac <statesMachineLoop+0x55c>)
 8004ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ae8:	eef0 0a67 	vmov.f32	s1, s15
 8004aec:	f002 fa34 	bl	8006f58 <update_ScurveTraj>

			configMotor(&motor1,1);
 8004af0:	2101      	movs	r1, #1
 8004af2:	481a      	ldr	r0, [pc, #104]	; (8004b5c <statesMachineLoop+0x50c>)
 8004af4:	f7ff fc90 	bl	8004418 <configMotor>
			configMotor(&motor2,2);
 8004af8:	2102      	movs	r1, #2
 8004afa:	481a      	ldr	r0, [pc, #104]	; (8004b64 <statesMachineLoop+0x514>)
 8004afc:	f7ff fc8c 	bl	8004418 <configMotor>
			configMotor(&motor3,3);
 8004b00:	2103      	movs	r1, #3
 8004b02:	481a      	ldr	r0, [pc, #104]	; (8004b6c <statesMachineLoop+0x51c>)
 8004b04:	f7ff fc88 	bl	8004418 <configMotor>

			timeFlag = false;
 8004b08:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <statesMachineLoop+0x560>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <statesMachineLoop+0x50c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <statesMachineLoop+0x514>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <statesMachineLoop+0x51c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <statesMachineLoop+0x50c>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <statesMachineLoop+0x514>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <statesMachineLoop+0x51c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start_IT(&htim9);
 8004b32:	4812      	ldr	r0, [pc, #72]	; (8004b7c <statesMachineLoop+0x52c>)
 8004b34:	f004 fe12 	bl	800975c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8004b38:	4811      	ldr	r0, [pc, #68]	; (8004b80 <statesMachineLoop+0x530>)
 8004b3a:	f004 fd8d 	bl	8009658 <HAL_TIM_Base_Start>


			state = WORKING;
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <statesMachineLoop+0x538>)
 8004b40:	2202      	movs	r2, #2
 8004b42:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004b44:	e3d3      	b.n	80052ee <statesMachineLoop+0xc9e>
 8004b46:	bf00      	nop
 8004b48:	200006db 	.word	0x200006db
 8004b4c:	200006da 	.word	0x200006da
 8004b50:	20000488 	.word	0x20000488
 8004b54:	20000518 	.word	0x20000518
 8004b58:	20000560 	.word	0x20000560
 8004b5c:	200005f0 	.word	0x200005f0
 8004b60:	20000368 	.word	0x20000368
 8004b64:	20000638 	.word	0x20000638
 8004b68:	200003f8 	.word	0x200003f8
 8004b6c:	20000680 	.word	0x20000680
 8004b70:	20000440 	.word	0x20000440
 8004b74:	20000738 	.word	0x20000738
 8004b78:	20000720 	.word	0x20000720
 8004b7c:	200004d0 	.word	0x200004d0
 8004b80:	200003b0 	.word	0x200003b0
 8004b84:	2000081d 	.word	0x2000081d
 8004b88:	200006d8 	.word	0x200006d8
 8004b8c:	2000081b 	.word	0x2000081b
 8004b90:	20000018 	.word	0x20000018
 8004b94:	20000710 	.word	0x20000710
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	20000020 	.word	0x20000020
 8004ba0:	20000008 	.word	0x20000008
 8004ba4:	20000750 	.word	0x20000750
 8004ba8:	20000788 	.word	0x20000788
 8004bac:	200007c0 	.word	0x200007c0
 8004bb0:	200007f8 	.word	0x200007f8

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8004bb4:	4bd2      	ldr	r3, [pc, #840]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fcab 	bl	8000514 <__aeabi_ui2d>
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	4bd0      	ldr	r3, [pc, #832]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004bc4:	f7fb fb6a 	bl	800029c <__adddf3>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	a1ca      	add	r1, pc, #808	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd2:	f7fb fe43 	bl	800085c <__aeabi_ddiv>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4614      	mov	r4, r2
 8004bdc:	461d      	mov	r5, r3
 8004bde:	4bca      	ldr	r3, [pc, #808]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	4bc8      	ldr	r3, [pc, #800]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004bea:	f7fb fd0d 	bl	8000608 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	49c6      	ldr	r1, [pc, #792]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004bf8:	f7fb fe30 	bl	800085c <__aeabi_ddiv>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb fd00 	bl	8000608 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	4bbb      	ldr	r3, [pc, #748]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004c16:	f7fb fb3f 	bl	8000298 <__aeabi_dsub>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	49bd      	ldr	r1, [pc, #756]	; (8004f14 <statesMachineLoop+0x8c4>)
 8004c20:	680c      	ldr	r4, [r1, #0]
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fb ff9f 	bl	8000b68 <__aeabi_d2uiz>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c2e:	4bb4      	ldr	r3, [pc, #720]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fc6e 	bl	8000514 <__aeabi_ui2d>
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	4bb1      	ldr	r3, [pc, #708]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004c3e:	f7fb fb2d 	bl	800029c <__adddf3>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	a1ac      	add	r1, pc, #688	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c4c:	f7fb fe06 	bl	800085c <__aeabi_ddiv>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4bab      	ldr	r3, [pc, #684]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	4baa      	ldr	r3, [pc, #680]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004c64:	f7fb fcd0 	bl	8000608 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	49a7      	ldr	r1, [pc, #668]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004c72:	f7fb fdf3 	bl	800085c <__aeabi_ddiv>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	f7fb fcc3 	bl	8000608 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	4b9d      	ldr	r3, [pc, #628]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004c90:	f7fb fb02 	bl	8000298 <__aeabi_dsub>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f7fb ff64 	bl	8000b68 <__aeabi_d2uiz>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4a9c      	ldr	r2, [pc, #624]	; (8004f14 <statesMachineLoop+0x8c4>)
 8004ca4:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm_fault));
 8004ca6:	4b96      	ldr	r3, [pc, #600]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fb fc32 	bl	8000514 <__aeabi_ui2d>
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	4b93      	ldr	r3, [pc, #588]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004cb6:	f7fb faf1 	bl	800029c <__adddf3>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	a18e      	add	r1, pc, #568	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc4:	f7fb fdca 	bl	800085c <__aeabi_ddiv>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	461d      	mov	r5, r3
 8004cd0:	4b8d      	ldr	r3, [pc, #564]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004cdc:	f7fb fc94 	bl	8000608 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	4989      	ldr	r1, [pc, #548]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004cea:	f7fb fdb7 	bl	800085c <__aeabi_ddiv>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7fb fc87 	bl	8000608 <__aeabi_dmul>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	4b7f      	ldr	r3, [pc, #508]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004d08:	f7fb fac6 	bl	8000298 <__aeabi_dsub>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4981      	ldr	r1, [pc, #516]	; (8004f18 <statesMachineLoop+0x8c8>)
 8004d12:	680c      	ldr	r4, [r1, #0]
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	f7fb ff26 	bl	8000b68 <__aeabi_d2uiz>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d20:	4b77      	ldr	r3, [pc, #476]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fb fbf5 	bl	8000514 <__aeabi_ui2d>
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	4b75      	ldr	r3, [pc, #468]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004d30:	f7fb fab4 	bl	800029c <__adddf3>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	a16f      	add	r1, pc, #444	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d3e:	f7fb fd8d 	bl	800085c <__aeabi_ddiv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4614      	mov	r4, r2
 8004d48:	461d      	mov	r5, r3
 8004d4a:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004d56:	f7fb fc57 	bl	8000608 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	496b      	ldr	r1, [pc, #428]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004d64:	f7fb fd7a 	bl	800085c <__aeabi_ddiv>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fc4a 	bl	8000608 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	4b60      	ldr	r3, [pc, #384]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004d82:	f7fb fa89 	bl	8000298 <__aeabi_dsub>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f7fb feeb 	bl	8000b68 <__aeabi_d2uiz>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <statesMachineLoop+0x8c8>)
 8004d96:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm_fault));
 8004d98:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fbb9 	bl	8000514 <__aeabi_ui2d>
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	4b57      	ldr	r3, [pc, #348]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004da8:	f7fb fa78 	bl	800029c <__adddf3>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	a151      	add	r1, pc, #324	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db6:	f7fb fd51 	bl	800085c <__aeabi_ddiv>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	4b4f      	ldr	r3, [pc, #316]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004dce:	f7fb fc1b 	bl	8000608 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	494d      	ldr	r1, [pc, #308]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004ddc:	f7fb fd3e 	bl	800085c <__aeabi_ddiv>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4620      	mov	r0, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb fc0e 	bl	8000608 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004dfa:	f7fb fa4d 	bl	8000298 <__aeabi_dsub>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4946      	ldr	r1, [pc, #280]	; (8004f1c <statesMachineLoop+0x8cc>)
 8004e04:	680c      	ldr	r4, [r1, #0]
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fb fead 	bl	8000b68 <__aeabi_d2uiz>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e12:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fb fb7c 	bl	8000514 <__aeabi_ui2d>
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	4b38      	ldr	r3, [pc, #224]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004e22:	f7fb fa3b 	bl	800029c <__adddf3>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	a133      	add	r1, pc, #204	; (adr r1, 8004ef8 <statesMachineLoop+0x8a8>)
 8004e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e30:	f7fb fd14 	bl	800085c <__aeabi_ddiv>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <statesMachineLoop+0x8b8>)
 8004e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <statesMachineLoop+0x8bc>)
 8004e48:	f7fb fbde 	bl	8000608 <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	492e      	ldr	r1, [pc, #184]	; (8004f10 <statesMachineLoop+0x8c0>)
 8004e56:	f7fb fd01 	bl	800085c <__aeabi_ddiv>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb fbd1 	bl	8000608 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <statesMachineLoop+0x8b4>)
 8004e74:	f7fb fa10 	bl	8000298 <__aeabi_dsub>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f7fb fe72 	bl	8000b68 <__aeabi_d2uiz>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <statesMachineLoop+0x8cc>)
 8004e88:	60d3      	str	r3, [r2, #12]

		TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb40 	bl	8000514 <__aeabi_ui2d>
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e9c:	f7fb fcde 	bl	800085c <__aeabi_ddiv>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4c16      	ldr	r4, [pc, #88]	; (8004f00 <statesMachineLoop+0x8b0>)
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f7fb fe5d 	bl	8000b68 <__aeabi_d2uiz>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <statesMachineLoop+0x8d0>)
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fb2c 	bl	8000514 <__aeabi_ui2d>
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec4:	f7fb fcca 	bl	800085c <__aeabi_ddiv>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4c14      	ldr	r4, [pc, #80]	; (8004f20 <statesMachineLoop+0x8d0>)
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f7fb fe49 	bl	8000b68 <__aeabi_d2uiz>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	6363      	str	r3, [r4, #52]	; 0x34
		TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <statesMachineLoop+0x8d4>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fb fb18 	bl	8000514 <__aeabi_ui2d>
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eec:	f7fb fcb6 	bl	800085c <__aeabi_ddiv>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	e018      	b.n	8004f28 <statesMachineLoop+0x8d8>
 8004ef6:	bf00      	nop
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	418e8480 	.word	0x418e8480
 8004f00:	40010000 	.word	0x40010000
 8004f04:	3ff00000 	.word	0x3ff00000
 8004f08:	20000028 	.word	0x20000028
 8004f0c:	40bf4000 	.word	0x40bf4000
 8004f10:	404e0000 	.word	0x404e0000
 8004f14:	20000368 	.word	0x20000368
 8004f18:	200003f8 	.word	0x200003f8
 8004f1c:	20000440 	.word	0x20000440
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	4cbd      	ldr	r4, [pc, #756]	; (8005220 <statesMachineLoop+0xbd0>)
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f7fb fe1b 	bl	8000b68 <__aeabi_d2uiz>
 8004f32:	4603      	mov	r3, r0
 8004f34:	6363      	str	r3, [r4, #52]	; 0x34

		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 8004f36:	e14c      	b.n	80051d2 <statesMachineLoop+0xb82>

			 //HAL_UART_Transmit(&huart2,(uint8_t*)"EndStopAlarm\r\n", 16, 100);

			 if (ES1i_PRESSED){
 8004f38:	2120      	movs	r1, #32
 8004f3a:	48ba      	ldr	r0, [pc, #744]	; (8005224 <statesMachineLoop+0xbd4>)
 8004f3c:	f003 fd50 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d11c      	bne.n	8004f80 <statesMachineLoop+0x930>
				 HAL_Delay(10);
 8004f46:	200a      	movs	r0, #10
 8004f48:	f003 f9cc 	bl	80082e4 <HAL_Delay>
				 if (ES1i_PRESSED){
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	48b5      	ldr	r0, [pc, #724]	; (8005224 <statesMachineLoop+0xbd4>)
 8004f50:	f003 fd46 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d112      	bne.n	8004f80 <statesMachineLoop+0x930>
					 positive_Dir_MOTOR_1;
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	48b1      	ldr	r0, [pc, #708]	; (8005224 <statesMachineLoop+0xbd4>)
 8004f60:	f003 fd56 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004f64:	2000      	movs	r0, #0
 8004f66:	f003 f9bd 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	48ae      	ldr	r0, [pc, #696]	; (8005228 <statesMachineLoop+0xbd8>)
 8004f6e:	f004 fcdf 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8004f72:	20c8      	movs	r0, #200	; 0xc8
 8004f74:	f003 f9b6 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8004f78:	2100      	movs	r1, #0
 8004f7a:	48ab      	ldr	r0, [pc, #684]	; (8005228 <statesMachineLoop+0xbd8>)
 8004f7c:	f004 fd88 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8004f80:	2110      	movs	r1, #16
 8004f82:	48a8      	ldr	r0, [pc, #672]	; (8005224 <statesMachineLoop+0xbd4>)
 8004f84:	f003 fd2c 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11c      	bne.n	8004fc8 <statesMachineLoop+0x978>
				 HAL_Delay(10);
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f003 f9a8 	bl	80082e4 <HAL_Delay>
				 if (ES1s_PRESSED){
 8004f94:	2110      	movs	r1, #16
 8004f96:	48a3      	ldr	r0, [pc, #652]	; (8005224 <statesMachineLoop+0xbd4>)
 8004f98:	f003 fd22 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d112      	bne.n	8004fc8 <statesMachineLoop+0x978>
					 negative_Dir_MOTOR_1;
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	489f      	ldr	r0, [pc, #636]	; (8005224 <statesMachineLoop+0xbd4>)
 8004fa8:	f003 fd32 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004fac:	2000      	movs	r0, #0
 8004fae:	f003 f999 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	489c      	ldr	r0, [pc, #624]	; (8005228 <statesMachineLoop+0xbd8>)
 8004fb6:	f004 fcbb 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8004fba:	20c8      	movs	r0, #200	; 0xc8
 8004fbc:	f003 f992 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4899      	ldr	r0, [pc, #612]	; (8005228 <statesMachineLoop+0xbd8>)
 8004fc4:	f004 fd64 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if (ES2i_PRESSED){
 8004fc8:	2104      	movs	r1, #4
 8004fca:	4898      	ldr	r0, [pc, #608]	; (800522c <statesMachineLoop+0xbdc>)
 8004fcc:	f003 fd08 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11c      	bne.n	8005010 <statesMachineLoop+0x9c0>
				 HAL_Delay(30);
 8004fd6:	201e      	movs	r0, #30
 8004fd8:	f003 f984 	bl	80082e4 <HAL_Delay>
				 if (ES2i_PRESSED){
 8004fdc:	2104      	movs	r1, #4
 8004fde:	4893      	ldr	r0, [pc, #588]	; (800522c <statesMachineLoop+0xbdc>)
 8004fe0:	f003 fcfe 	bl	80089e0 <HAL_GPIO_ReadPin>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d112      	bne.n	8005010 <statesMachineLoop+0x9c0>
					 positive_Dir_MOTOR_2;
 8004fea:	2200      	movs	r2, #0
 8004fec:	2102      	movs	r1, #2
 8004fee:	4890      	ldr	r0, [pc, #576]	; (8005230 <statesMachineLoop+0xbe0>)
 8004ff0:	f003 fd0e 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f003 f975 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	488d      	ldr	r0, [pc, #564]	; (8005234 <statesMachineLoop+0xbe4>)
 8004ffe:	f004 fc97 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8005002:	20c8      	movs	r0, #200	; 0xc8
 8005004:	f003 f96e 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8005008:	2100      	movs	r1, #0
 800500a:	488a      	ldr	r0, [pc, #552]	; (8005234 <statesMachineLoop+0xbe4>)
 800500c:	f004 fd40 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 8005010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005014:	4886      	ldr	r0, [pc, #536]	; (8005230 <statesMachineLoop+0xbe0>)
 8005016:	f003 fce3 	bl	80089e0 <HAL_GPIO_ReadPin>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11d      	bne.n	800505c <statesMachineLoop+0xa0c>
				 HAL_Delay(10);
 8005020:	200a      	movs	r0, #10
 8005022:	f003 f95f 	bl	80082e4 <HAL_Delay>
				 if (ES2s_PRESSED){
 8005026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800502a:	4881      	ldr	r0, [pc, #516]	; (8005230 <statesMachineLoop+0xbe0>)
 800502c:	f003 fcd8 	bl	80089e0 <HAL_GPIO_ReadPin>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d112      	bne.n	800505c <statesMachineLoop+0xa0c>
					 negative_Dir_MOTOR_2;
 8005036:	2201      	movs	r2, #1
 8005038:	2102      	movs	r1, #2
 800503a:	487d      	ldr	r0, [pc, #500]	; (8005230 <statesMachineLoop+0xbe0>)
 800503c:	f003 fce8 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8005040:	2000      	movs	r0, #0
 8005042:	f003 f94f 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8005046:	2100      	movs	r1, #0
 8005048:	487a      	ldr	r0, [pc, #488]	; (8005234 <statesMachineLoop+0xbe4>)
 800504a:	f004 fc71 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800504e:	20c8      	movs	r0, #200	; 0xc8
 8005050:	f003 f948 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8005054:	2100      	movs	r1, #0
 8005056:	4877      	ldr	r0, [pc, #476]	; (8005234 <statesMachineLoop+0xbe4>)
 8005058:	f004 fd1a 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 800505c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005060:	4873      	ldr	r0, [pc, #460]	; (8005230 <statesMachineLoop+0xbe0>)
 8005062:	f003 fcbd 	bl	80089e0 <HAL_GPIO_ReadPin>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d11d      	bne.n	80050a8 <statesMachineLoop+0xa58>
				 HAL_Delay(10);
 800506c:	200a      	movs	r0, #10
 800506e:	f003 f939 	bl	80082e4 <HAL_Delay>
				 if (ES3i_PRESSED){
 8005072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005076:	486e      	ldr	r0, [pc, #440]	; (8005230 <statesMachineLoop+0xbe0>)
 8005078:	f003 fcb2 	bl	80089e0 <HAL_GPIO_ReadPin>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d112      	bne.n	80050a8 <statesMachineLoop+0xa58>
					 positive_Dir_MOTOR_3;
 8005082:	2200      	movs	r2, #0
 8005084:	2101      	movs	r1, #1
 8005086:	486a      	ldr	r0, [pc, #424]	; (8005230 <statesMachineLoop+0xbe0>)
 8005088:	f003 fcc2 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800508c:	2000      	movs	r0, #0
 800508e:	f003 f929 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8005092:	2100      	movs	r1, #0
 8005094:	4868      	ldr	r0, [pc, #416]	; (8005238 <statesMachineLoop+0xbe8>)
 8005096:	f004 fc4b 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800509a:	20c8      	movs	r0, #200	; 0xc8
 800509c:	f003 f922 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80050a0:	2100      	movs	r1, #0
 80050a2:	4865      	ldr	r0, [pc, #404]	; (8005238 <statesMachineLoop+0xbe8>)
 80050a4:	f004 fcf4 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 80050a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050ac:	4860      	ldr	r0, [pc, #384]	; (8005230 <statesMachineLoop+0xbe0>)
 80050ae:	f003 fc97 	bl	80089e0 <HAL_GPIO_ReadPin>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11d      	bne.n	80050f4 <statesMachineLoop+0xaa4>
				 HAL_Delay(10);
 80050b8:	200a      	movs	r0, #10
 80050ba:	f003 f913 	bl	80082e4 <HAL_Delay>
				 if (ES3s_PRESSED){
 80050be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050c2:	485b      	ldr	r0, [pc, #364]	; (8005230 <statesMachineLoop+0xbe0>)
 80050c4:	f003 fc8c 	bl	80089e0 <HAL_GPIO_ReadPin>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d112      	bne.n	80050f4 <statesMachineLoop+0xaa4>
					 negative_Dir_MOTOR_3;
 80050ce:	2201      	movs	r2, #1
 80050d0:	2101      	movs	r1, #1
 80050d2:	4857      	ldr	r0, [pc, #348]	; (8005230 <statesMachineLoop+0xbe0>)
 80050d4:	f003 fc9c 	bl	8008a10 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80050d8:	2000      	movs	r0, #0
 80050da:	f003 f903 	bl	80082e4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80050de:	2100      	movs	r1, #0
 80050e0:	4855      	ldr	r0, [pc, #340]	; (8005238 <statesMachineLoop+0xbe8>)
 80050e2:	f004 fc25 	bl	8009930 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80050e6:	20c8      	movs	r0, #200	; 0xc8
 80050e8:	f003 f8fc 	bl	80082e4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80050ec:	2100      	movs	r1, #0
 80050ee:	4852      	ldr	r0, [pc, #328]	; (8005238 <statesMachineLoop+0xbe8>)
 80050f0:	f004 fcce 	bl	8009a90 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80050f4:	2110      	movs	r1, #16
 80050f6:	484b      	ldr	r0, [pc, #300]	; (8005224 <statesMachineLoop+0xbd4>)
 80050f8:	f003 fc72 	bl	80089e0 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d067      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005106:	484a      	ldr	r0, [pc, #296]	; (8005230 <statesMachineLoop+0xbe0>)
 8005108:	f003 fc6a 	bl	80089e0 <HAL_GPIO_ReadPin>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d05f      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005116:	4846      	ldr	r0, [pc, #280]	; (8005230 <statesMachineLoop+0xbe0>)
 8005118:	f003 fc62 	bl	80089e0 <HAL_GPIO_ReadPin>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d057      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005122:	2120      	movs	r1, #32
 8005124:	483f      	ldr	r0, [pc, #252]	; (8005224 <statesMachineLoop+0xbd4>)
 8005126:	f003 fc5b 	bl	80089e0 <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d050      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005130:	2104      	movs	r1, #4
 8005132:	483e      	ldr	r0, [pc, #248]	; (800522c <statesMachineLoop+0xbdc>)
 8005134:	f003 fc54 	bl	80089e0 <HAL_GPIO_ReadPin>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d049      	beq.n	80051d2 <statesMachineLoop+0xb82>
 800513e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005142:	483b      	ldr	r0, [pc, #236]	; (8005230 <statesMachineLoop+0xbe0>)
 8005144:	f003 fc4c 	bl	80089e0 <HAL_GPIO_ReadPin>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d041      	beq.n	80051d2 <statesMachineLoop+0xb82>
				 HAL_Delay(10);
 800514e:	200a      	movs	r0, #10
 8005150:	f003 f8c8 	bl	80082e4 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8005154:	2110      	movs	r1, #16
 8005156:	4833      	ldr	r0, [pc, #204]	; (8005224 <statesMachineLoop+0xbd4>)
 8005158:	f003 fc42 	bl	80089e0 <HAL_GPIO_ReadPin>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d037      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005166:	4832      	ldr	r0, [pc, #200]	; (8005230 <statesMachineLoop+0xbe0>)
 8005168:	f003 fc3a 	bl	80089e0 <HAL_GPIO_ReadPin>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d02f      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005176:	482e      	ldr	r0, [pc, #184]	; (8005230 <statesMachineLoop+0xbe0>)
 8005178:	f003 fc32 	bl	80089e0 <HAL_GPIO_ReadPin>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d027      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005182:	2120      	movs	r1, #32
 8005184:	4827      	ldr	r0, [pc, #156]	; (8005224 <statesMachineLoop+0xbd4>)
 8005186:	f003 fc2b 	bl	80089e0 <HAL_GPIO_ReadPin>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <statesMachineLoop+0xb82>
 8005190:	2104      	movs	r1, #4
 8005192:	4826      	ldr	r0, [pc, #152]	; (800522c <statesMachineLoop+0xbdc>)
 8005194:	f003 fc24 	bl	80089e0 <HAL_GPIO_ReadPin>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <statesMachineLoop+0xb82>
 800519e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051a2:	4823      	ldr	r0, [pc, #140]	; (8005230 <statesMachineLoop+0xbe0>)
 80051a4:	f003 fc1c 	bl	80089e0 <HAL_GPIO_ReadPin>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <statesMachineLoop+0xb82>

					 endStopAlarmSup = false;
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <statesMachineLoop+0xbec>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <statesMachineLoop+0xbf0>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 80051ba:	4b22      	ldr	r3, [pc, #136]	; (8005244 <statesMachineLoop+0xbf4>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 80051c0:	2364      	movs	r3, #100	; 0x64
 80051c2:	220d      	movs	r2, #13
 80051c4:	4920      	ldr	r1, [pc, #128]	; (8005248 <statesMachineLoop+0xbf8>)
 80051c6:	4821      	ldr	r0, [pc, #132]	; (800524c <statesMachineLoop+0xbfc>)
 80051c8:	f005 fef1 	bl	800afae <HAL_UART_Transmit>
					 state = READY;
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <statesMachineLoop+0xc00>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 80051d2:	4b1a      	ldr	r3, [pc, #104]	; (800523c <statesMachineLoop+0xbec>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <statesMachineLoop+0xb92>
 80051da:	4b19      	ldr	r3, [pc, #100]	; (8005240 <statesMachineLoop+0xbf0>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d014      	beq.n	800520c <statesMachineLoop+0xbbc>
 80051e2:	4b18      	ldr	r3, [pc, #96]	; (8005244 <statesMachineLoop+0xbf4>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f47f aea6 	bne.w	8004f38 <statesMachineLoop+0x8e8>
			 }


		}//End while

		while(faultDrivers && continuar){
 80051ec:	e00e      	b.n	800520c <statesMachineLoop+0xbbc>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <statesMachineLoop+0xc04>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
			continuar = false;
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <statesMachineLoop+0xbf4>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 80051fa:	2364      	movs	r3, #100	; 0x64
 80051fc:	220d      	movs	r2, #13
 80051fe:	4916      	ldr	r1, [pc, #88]	; (8005258 <statesMachineLoop+0xc08>)
 8005200:	4812      	ldr	r0, [pc, #72]	; (800524c <statesMachineLoop+0xbfc>)
 8005202:	f005 fed4 	bl	800afae <HAL_UART_Transmit>
			state = READY;
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <statesMachineLoop+0xc00>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <statesMachineLoop+0xc04>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d06e      	beq.n	80052f2 <statesMachineLoop+0xca2>
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <statesMachineLoop+0xbf4>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e8      	bne.n	80051ee <statesMachineLoop+0xb9e>

		}//End while


		break;
 800521c:	e069      	b.n	80052f2 <statesMachineLoop+0xca2>
 800521e:	bf00      	nop
 8005220:	40000800 	.word	0x40000800
 8005224:	40020400 	.word	0x40020400
 8005228:	20000368 	.word	0x20000368
 800522c:	40020c00 	.word	0x40020c00
 8005230:	40020800 	.word	0x40020800
 8005234:	200003f8 	.word	0x200003f8
 8005238:	20000440 	.word	0x20000440
 800523c:	200006dc 	.word	0x200006dc
 8005240:	200006dd 	.word	0x200006dd
 8005244:	200006de 	.word	0x200006de
 8005248:	08010774 	.word	0x08010774
 800524c:	200005a8 	.word	0x200005a8
 8005250:	200006d8 	.word	0x200006d8
 8005254:	200006df 	.word	0x200006df
 8005258:	08010780 	.word	0x08010780

	case DEMO:

	    // Abre el archivo para lectura (una sola vez siempre y cuando readFile sea verdadero )
		if (readFile){
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <statesMachineLoop+0xca8>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d019      	beq.n	8005298 <statesMachineLoop+0xc48>
			file = fopen(filename, "r");
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <statesMachineLoop+0xcac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4925      	ldr	r1, [pc, #148]	; (8005300 <statesMachineLoop+0xcb0>)
 800526a:	4618      	mov	r0, r3
 800526c:	f007 f9bc 	bl	800c5e8 <fopen>
 8005270:	4603      	mov	r3, r0
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <statesMachineLoop+0xcb4>)
 8005274:	6013      	str	r3, [r2, #0]

			// Verifica si el archivo se ha abierto correctamente
			if (file == NULL) {
 8005276:	4b23      	ldr	r3, [pc, #140]	; (8005304 <statesMachineLoop+0xcb4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <statesMachineLoop+0xc3c>
				HAL_UART_Transmit(&huart2,(uint8_t*)"No se pudo abrir el archivo.\n", 30, 100);
 800527e:	2364      	movs	r3, #100	; 0x64
 8005280:	221e      	movs	r2, #30
 8005282:	4921      	ldr	r1, [pc, #132]	; (8005308 <statesMachineLoop+0xcb8>)
 8005284:	4821      	ldr	r0, [pc, #132]	; (800530c <statesMachineLoop+0xcbc>)
 8005286:	f005 fe92 	bl	800afae <HAL_UART_Transmit>
				break;
 800528a:	e033      	b.n	80052f4 <statesMachineLoop+0xca4>
			}
			readFile = false;
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <statesMachineLoop+0xca8>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
			startDemo = true;
 8005292:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <statesMachineLoop+0xcc0>)
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
		}

	    // Lee cada línea del archivo y la guarda en el buffer
	    if (fgets(buffer, BUFFER_SIZE, file) != NULL) {
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <statesMachineLoop+0xcb4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	211e      	movs	r1, #30
 80052a0:	481c      	ldr	r0, [pc, #112]	; (8005314 <statesMachineLoop+0xcc4>)
 80052a2:	f007 f86d 	bl	800c380 <fgets>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <statesMachineLoop+0xc7a>

	        // Copia la línea al buffer de tipo uint8_t
	        //uint8_t rx_buffer[strlen(buffer)];
	        memcpy(rx_buffer, buffer, strlen(buffer));
 80052ac:	4819      	ldr	r0, [pc, #100]	; (8005314 <statesMachineLoop+0xcc4>)
 80052ae:	f7fa ffe7 	bl	8000280 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4917      	ldr	r1, [pc, #92]	; (8005314 <statesMachineLoop+0xcc4>)
 80052b8:	4817      	ldr	r0, [pc, #92]	; (8005318 <statesMachineLoop+0xcc8>)
 80052ba:	f007 fb1d 	bl	800c8f8 <memcpy>

	        interpretaComando();
 80052be:	f7fc fa5d 	bl	800177c <interpretaComando>

	        state = READY;
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <statesMachineLoop+0xccc>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
			startDemo = false;
			fclose(file);
			HAL_UART_Transmit(&huart2,(uint8_t*)"Fin demo\n", 10, 100);
	    }

	default:break;
 80052c8:	e00d      	b.n	80052e6 <statesMachineLoop+0xc96>
			startDemo = false;
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <statesMachineLoop+0xcc0>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
			fclose(file);
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <statesMachineLoop+0xcb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f006 fefd 	bl	800c0d4 <fclose>
			HAL_UART_Transmit(&huart2,(uint8_t*)"Fin demo\n", 10, 100);
 80052da:	2364      	movs	r3, #100	; 0x64
 80052dc:	220a      	movs	r2, #10
 80052de:	4910      	ldr	r1, [pc, #64]	; (8005320 <statesMachineLoop+0xcd0>)
 80052e0:	480a      	ldr	r0, [pc, #40]	; (800530c <statesMachineLoop+0xcbc>)
 80052e2:	f005 fe64 	bl	800afae <HAL_UART_Transmit>
	default:break;
 80052e6:	bf00      	nop
 80052e8:	e004      	b.n	80052f4 <statesMachineLoop+0xca4>
		break;
 80052ea:	bf00      	nop
 80052ec:	e002      	b.n	80052f4 <statesMachineLoop+0xca4>
		break;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <statesMachineLoop+0xca4>
		break;
 80052f2:	bf00      	nop
	}
}
 80052f4:	bf00      	nop
 80052f6:	bdb0      	pop	{r4, r5, r7, pc}
 80052f8:	2000081c 	.word	0x2000081c
 80052fc:	20000074 	.word	0x20000074
 8005300:	0801078c 	.word	0x0801078c
 8005304:	20000820 	.word	0x20000820
 8005308:	08010790 	.word	0x08010790
 800530c:	200005a8 	.word	0x200005a8
 8005310:	2000081d 	.word	0x2000081d
 8005314:	20000824 	.word	0x20000824
 8005318:	200007fc 	.word	0x200007fc
 800531c:	200006d8 	.word	0x200006d8
 8005320:	080107b0 	.word	0x080107b0

08005324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	4b14      	ldr	r3, [pc, #80]	; (8005380 <HAL_MspInit+0x5c>)
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <HAL_MspInit+0x5c>)
 8005334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005338:	6453      	str	r3, [r2, #68]	; 0x44
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_MspInit+0x5c>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_MspInit+0x5c>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <HAL_MspInit+0x5c>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HAL_MspInit+0x5c>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005362:	2005      	movs	r0, #5
 8005364:	f003 f8d6 	bl	8008514 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005368:	2200      	movs	r2, #0
 800536a:	2100      	movs	r1, #0
 800536c:	2001      	movs	r0, #1
 800536e:	f003 f8dc 	bl	800852a <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005372:	2001      	movs	r0, #1
 8005374:	f003 f8f5 	bl	8008562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800

08005384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b098      	sub	sp, #96	; 0x60
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800539c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	611a      	str	r2, [r3, #16]
 80053ac:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4aa2      	ldr	r2, [pc, #648]	; (800563c <HAL_TIM_Base_MspInit+0x2b8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d126      	bne.n	8005406 <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053b8:	2300      	movs	r3, #0
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
 80053bc:	4ba0      	ldr	r3, [pc, #640]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	4a9f      	ldr	r2, [pc, #636]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6453      	str	r3, [r2, #68]	; 0x44
 80053c8:	4b9d      	ldr	r3, [pc, #628]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	2018      	movs	r0, #24
 80053da:	f003 f8a6 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80053de:	2018      	movs	r0, #24
 80053e0:	f003 f8bf 	bl	8008562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2102      	movs	r1, #2
 80053e8:	2019      	movs	r0, #25
 80053ea:	f003 f89e 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80053ee:	2019      	movs	r0, #25
 80053f0:	f003 f8b7 	bl	8008562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2102      	movs	r1, #2
 80053f8:	201a      	movs	r0, #26
 80053fa:	f003 f896 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80053fe:	201a      	movs	r0, #26
 8005400:	f003 f8af 	bl	8008562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005404:	e115      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540e:	d10e      	bne.n	800542e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	4b8a      	ldr	r3, [pc, #552]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	4a89      	ldr	r2, [pc, #548]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6413      	str	r3, [r2, #64]	; 0x40
 8005420:	4b87      	ldr	r3, [pc, #540]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800542c:	e101      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM3)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a84      	ldr	r2, [pc, #528]	; (8005644 <HAL_TIM_Base_MspInit+0x2c0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10e      	bne.n	8005456 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005438:	2300      	movs	r3, #0
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
 800543c:	4b80      	ldr	r3, [pc, #512]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	4a7f      	ldr	r2, [pc, #508]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	6413      	str	r3, [r2, #64]	; 0x40
 8005448:	4b7d      	ldr	r3, [pc, #500]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005454:	e0ed      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM4)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7b      	ldr	r2, [pc, #492]	; (8005648 <HAL_TIM_Base_MspInit+0x2c4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10e      	bne.n	800547e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	4a75      	ldr	r2, [pc, #468]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800546a:	f043 0304 	orr.w	r3, r3, #4
 800546e:	6413      	str	r3, [r2, #64]	; 0x40
 8005470:	4b73      	ldr	r3, [pc, #460]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800547c:	e0d9      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM5)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a72      	ldr	r2, [pc, #456]	; (800564c <HAL_TIM_Base_MspInit+0x2c8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d134      	bne.n	80054f2 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005488:	2300      	movs	r3, #0
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	4b6c      	ldr	r3, [pc, #432]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	4a6b      	ldr	r2, [pc, #428]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005492:	f043 0308 	orr.w	r3, r3, #8
 8005496:	6413      	str	r3, [r2, #64]	; 0x40
 8005498:	4b69      	ldr	r3, [pc, #420]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	623b      	str	r3, [r7, #32]
 80054a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	4b65      	ldr	r3, [pc, #404]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	4a64      	ldr	r2, [pc, #400]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6313      	str	r3, [r2, #48]	; 0x30
 80054b4:	4b62      	ldr	r3, [pc, #392]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 80054c0:	2301      	movs	r3, #1
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	2302      	movs	r3, #2
 80054c6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054cc:	2300      	movs	r3, #0
 80054ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80054d0:	2302      	movs	r3, #2
 80054d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 80054d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054d8:	4619      	mov	r1, r3
 80054da:	485d      	ldr	r0, [pc, #372]	; (8005650 <HAL_TIM_Base_MspInit+0x2cc>)
 80054dc:	f003 f8fc 	bl	80086d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80054e0:	2200      	movs	r2, #0
 80054e2:	2102      	movs	r1, #2
 80054e4:	2032      	movs	r0, #50	; 0x32
 80054e6:	f003 f820 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80054ea:	2032      	movs	r0, #50	; 0x32
 80054ec:	f003 f839 	bl	8008562 <HAL_NVIC_EnableIRQ>
}
 80054f0:	e09f      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM9)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a57      	ldr	r2, [pc, #348]	; (8005654 <HAL_TIM_Base_MspInit+0x2d0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d116      	bne.n	800552a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	4b4f      	ldr	r3, [pc, #316]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	4a4e      	ldr	r2, [pc, #312]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	6453      	str	r3, [r2, #68]	; 0x44
 800550c:	4b4c      	ldr	r3, [pc, #304]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005518:	2200      	movs	r2, #0
 800551a:	2100      	movs	r1, #0
 800551c:	2018      	movs	r0, #24
 800551e:	f003 f804 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005522:	2018      	movs	r0, #24
 8005524:	f003 f81d 	bl	8008562 <HAL_NVIC_EnableIRQ>
}
 8005528:	e083      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM10)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4a      	ldr	r2, [pc, #296]	; (8005658 <HAL_TIM_Base_MspInit+0x2d4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d135      	bne.n	80055a0 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	4a40      	ldr	r2, [pc, #256]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800553e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005542:	6453      	str	r3, [r2, #68]	; 0x44
 8005544:	4b3e      	ldr	r3, [pc, #248]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a39      	ldr	r2, [pc, #228]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b37      	ldr	r3, [pc, #220]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 800556c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005570:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557a:	2300      	movs	r3, #0
 800557c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800557e:	2303      	movs	r3, #3
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 8005582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005586:	4619      	mov	r1, r3
 8005588:	4834      	ldr	r0, [pc, #208]	; (800565c <HAL_TIM_Base_MspInit+0x2d8>)
 800558a:	f003 f8a5 	bl	80086d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800558e:	2200      	movs	r2, #0
 8005590:	2102      	movs	r1, #2
 8005592:	2019      	movs	r0, #25
 8005594:	f002 ffc9 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005598:	2019      	movs	r0, #25
 800559a:	f002 ffe2 	bl	8008562 <HAL_NVIC_EnableIRQ>
}
 800559e:	e048      	b.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM11)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	; (8005660 <HAL_TIM_Base_MspInit+0x2dc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d143      	bne.n	8005632 <HAL_TIM_Base_MspInit+0x2ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80055aa:	2302      	movs	r3, #2
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80055ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055b8:	4618      	mov	r0, r3
 80055ba:	f003 ff0d 	bl	80093d8 <HAL_RCCEx_PeriphCLKConfig>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Base_MspInit+0x244>
      Error_Handler();
 80055c4:	f7fe ff22 	bl	800440c <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d6:	6453      	str	r3, [r2, #68]	; 0x44
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	4a14      	ldr	r2, [pc, #80]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	6313      	str	r3, [r2, #48]	; 0x30
 80055f4:	4b12      	ldr	r3, [pc, #72]	; (8005640 <HAL_TIM_Base_MspInit+0x2bc>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 8005600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005604:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005606:	2302      	movs	r3, #2
 8005608:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560e:	2300      	movs	r3, #0
 8005610:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005612:	2303      	movs	r3, #3
 8005614:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8005616:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800561a:	4619      	mov	r1, r3
 800561c:	480f      	ldr	r0, [pc, #60]	; (800565c <HAL_TIM_Base_MspInit+0x2d8>)
 800561e:	f003 f85b 	bl	80086d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8005622:	2200      	movs	r2, #0
 8005624:	2102      	movs	r1, #2
 8005626:	201a      	movs	r0, #26
 8005628:	f002 ff7f 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800562c:	201a      	movs	r0, #26
 800562e:	f002 ff98 	bl	8008562 <HAL_NVIC_EnableIRQ>
}
 8005632:	bf00      	nop
 8005634:	3760      	adds	r7, #96	; 0x60
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40023800 	.word	0x40023800
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40020000 	.word	0x40020000
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40020400 	.word	0x40020400
 8005660:	40014800 	.word	0x40014800

08005664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566c:	f107 0314 	add.w	r3, r7, #20
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a36      	ldr	r2, [pc, #216]	; (800575c <HAL_TIM_MspPostInit+0xf8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d11f      	bne.n	80056c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	4b35      	ldr	r3, [pc, #212]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	4a34      	ldr	r2, [pc, #208]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6313      	str	r3, [r2, #48]	; 0x30
 8005696:	4b32      	ldr	r3, [pc, #200]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = S_PulsePaP1_Pin;
 80056a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80056b4:	2301      	movs	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP1_GPIO_Port, &GPIO_InitStruct);
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	4619      	mov	r1, r3
 80056be:	4829      	ldr	r0, [pc, #164]	; (8005764 <HAL_TIM_MspPostInit+0x100>)
 80056c0:	f003 f80a 	bl	80086d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80056c4:	e046      	b.n	8005754 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <HAL_TIM_MspPostInit+0x104>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d11e      	bne.n	800570e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6313      	str	r3, [r2, #48]	; 0x30
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsePaP2_Pin;
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f8:	2300      	movs	r3, #0
 80056fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056fc:	2302      	movs	r3, #2
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP2_GPIO_Port, &GPIO_InitStruct);
 8005700:	f107 0314 	add.w	r3, r7, #20
 8005704:	4619      	mov	r1, r3
 8005706:	4817      	ldr	r0, [pc, #92]	; (8005764 <HAL_TIM_MspPostInit+0x100>)
 8005708:	f002 ffe6 	bl	80086d8 <HAL_GPIO_Init>
}
 800570c:	e022      	b.n	8005754 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <HAL_TIM_MspPostInit+0x108>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d11d      	bne.n	8005754 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4a0f      	ldr	r2, [pc, #60]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	6313      	str	r3, [r2, #48]	; 0x30
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_TIM_MspPostInit+0xfc>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsePaP3_Pin;
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005738:	2302      	movs	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005740:	2300      	movs	r3, #0
 8005742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005744:	2302      	movs	r3, #2
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP3_GPIO_Port, &GPIO_InitStruct);
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	4619      	mov	r1, r3
 800574e:	4808      	ldr	r0, [pc, #32]	; (8005770 <HAL_TIM_MspPostInit+0x10c>)
 8005750:	f002 ffc2 	bl	80086d8 <HAL_GPIO_Init>
}
 8005754:	bf00      	nop
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40010000 	.word	0x40010000
 8005760:	40023800 	.word	0x40023800
 8005764:	40020000 	.word	0x40020000
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40020400 	.word	0x40020400

08005774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800577c:	f107 0314 	add.w	r3, r7, #20
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_UART_MspInit+0x94>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d133      	bne.n	80057fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	4b1c      	ldr	r3, [pc, #112]	; (800580c <HAL_UART_MspInit+0x98>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_UART_MspInit+0x98>)
 80057a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_UART_MspInit+0x98>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <HAL_UART_MspInit+0x98>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	4a14      	ldr	r2, [pc, #80]	; (800580c <HAL_UART_MspInit+0x98>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6313      	str	r3, [r2, #48]	; 0x30
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_UART_MspInit+0x98>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80057ce:	230c      	movs	r3, #12
 80057d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057da:	2303      	movs	r3, #3
 80057dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057de:	2307      	movs	r3, #7
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	4619      	mov	r1, r3
 80057e8:	4809      	ldr	r0, [pc, #36]	; (8005810 <HAL_UART_MspInit+0x9c>)
 80057ea:	f002 ff75 	bl	80086d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80057ee:	2200      	movs	r2, #0
 80057f0:	2101      	movs	r1, #1
 80057f2:	2026      	movs	r0, #38	; 0x26
 80057f4:	f002 fe99 	bl	800852a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057f8:	2026      	movs	r0, #38	; 0x26
 80057fa:	f002 feb2 	bl	8008562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80057fe:	bf00      	nop
 8005800:	3728      	adds	r7, #40	; 0x28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40004400 	.word	0x40004400
 800580c:	40023800 	.word	0x40023800
 8005810:	40020000 	.word	0x40020000

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <NMI_Handler+0x4>

0800581a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <HardFault_Handler+0x4>

08005820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <MemManage_Handler+0x4>

08005826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800582a:	e7fe      	b.n	800582a <BusFault_Handler+0x4>

0800582c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005830:	e7fe      	b.n	8005830 <UsageFault_Handler+0x4>

08005832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800584e:	b480      	push	{r7}
 8005850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005860:	f002 fd20 	bl	80082a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}

08005868 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800586c:	f003 f902 	bl	8008a74 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8005870:	bf00      	nop
 8005872:	bd80      	pop	{r7, pc}

08005874 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8005878:	2004      	movs	r0, #4
 800587a:	f003 f8e3 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}

08005882 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8005886:	2010      	movs	r0, #16
 8005888:	f003 f8dc 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800588c:	bf00      	nop
 800588e:	bd80      	pop	{r7, pc}

08005890 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8005894:	2020      	movs	r0, #32
 8005896:	f003 f8d5 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 800589a:	2080      	movs	r0, #128	; 0x80
 800589c:	f003 f8d2 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80058a0:	bf00      	nop
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058a8:	4803      	ldr	r0, [pc, #12]	; (80058b8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80058aa:	f004 fb29 	bl	8009f00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80058ae:	4803      	ldr	r0, [pc, #12]	; (80058bc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80058b0:	f004 fb26 	bl	8009f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000368 	.word	0x20000368
 80058bc:	200004d0 	.word	0x200004d0

080058c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058c4:	4803      	ldr	r0, [pc, #12]	; (80058d4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80058c6:	f004 fb1b 	bl	8009f00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80058ca:	4803      	ldr	r0, [pc, #12]	; (80058d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80058cc:	f004 fb18 	bl	8009f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80058d0:	bf00      	nop
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000368 	.word	0x20000368
 80058d8:	20000518 	.word	0x20000518

080058dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058e0:	4803      	ldr	r0, [pc, #12]	; (80058f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80058e2:	f004 fb0d 	bl	8009f00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80058e6:	4803      	ldr	r0, [pc, #12]	; (80058f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80058e8:	f004 fb0a 	bl	8009f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000368 	.word	0x20000368
 80058f4:	20000560 	.word	0x20000560

080058f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058fc:	4802      	ldr	r0, [pc, #8]	; (8005908 <USART2_IRQHandler+0x10>)
 80058fe:	f005 fc19 	bl	800b134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200005a8 	.word	0x200005a8

0800590c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8005910:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005914:	f003 f896 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8005918:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800591c:	f003 f892 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8005920:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005924:	f003 f88e 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8005928:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800592c:	f003 f88a 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8005930:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005934:	f003 f886 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8005938:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800593c:	f003 f882 	bl	8008a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005940:	bf00      	nop
 8005942:	bd80      	pop	{r7, pc}

08005944 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <TIM5_IRQHandler+0x10>)
 800594a:	f004 fad9 	bl	8009f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000488 	.word	0x20000488

08005958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	return 1;
 800595c:	2301      	movs	r3, #1
}
 800595e:	4618      	mov	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <_kill>:

int _kill(int pid, int sig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005972:	f006 fb3d 	bl	800bff0 <__errno>
 8005976:	4603      	mov	r3, r0
 8005978:	2216      	movs	r2, #22
 800597a:	601a      	str	r2, [r3, #0]
	return -1;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_exit>:

void _exit (int status)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005990:	f04f 31ff 	mov.w	r1, #4294967295
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ffe7 	bl	8005968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800599a:	e7fe      	b.n	800599a <_exit+0x12>

0800599c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e00a      	b.n	80059c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059ae:	f3af 8000 	nop.w
 80059b2:	4601      	mov	r1, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	60ba      	str	r2, [r7, #8]
 80059ba:	b2ca      	uxtb	r2, r1
 80059bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	dbf0      	blt.n	80059ae <_read+0x12>
	}

return len;
 80059cc:	687b      	ldr	r3, [r7, #4]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e009      	b.n	80059fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	60ba      	str	r2, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	dbf1      	blt.n	80059e8 <_write+0x12>
	}
	return len;
 8005a04:	687b      	ldr	r3, [r7, #4]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_close>:

int _close(int file)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
	return -1;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a36:	605a      	str	r2, [r3, #4]
	return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_isatty>:

int _isatty(int file)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	return 0;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_open>:

int _open(char *path, int flags, ...)
{
 8005a76:	b40e      	push	{r1, r2, r3}
 8005a78:	b480      	push	{r7}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	b003      	add	sp, #12
 8005a90:	4770      	bx	lr
	...

08005a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <_sbrk+0x5c>)
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <_sbrk+0x60>)
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <_sbrk+0x64>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <_sbrk+0x64>)
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <_sbrk+0x68>)
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <_sbrk+0x64>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d207      	bcs.n	8005ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ac4:	f006 fa94 	bl	800bff0 <__errno>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	220c      	movs	r2, #12
 8005acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	e009      	b.n	8005ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <_sbrk+0x64>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <_sbrk+0x64>)
 8005ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20020000 	.word	0x20020000
 8005af4:	00000400 	.word	0x00000400
 8005af8:	20000844 	.word	0x20000844
 8005afc:	200008e8 	.word	0x200008e8

08005b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b04:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <SystemInit+0x20>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <SystemInit+0x20>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00
 8005b24:	00000000 	.word	0x00000000

08005b28 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8005b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b2c:	b0e0      	sub	sp, #384	; 0x180
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
 8005b34:	ed87 1b5c 	vstr	d1, [r7, #368]	; 0x170
 8005b38:	ed87 2b5a 	vstr	d2, [r7, #360]	; 0x168
 8005b3c:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164

	Tj1 = params[0];
 8005b40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	498a      	ldr	r1, [pc, #552]	; (8005d74 <get_Straj+0x24c>)
 8005b4a:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8005b4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b56:	4988      	ldr	r1, [pc, #544]	; (8005d78 <get_Straj+0x250>)
 8005b58:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8005b5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b64:	4985      	ldr	r1, [pc, #532]	; (8005d7c <get_Straj+0x254>)
 8005b66:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8005b6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005b72:	4983      	ldr	r1, [pc, #524]	; (8005d80 <get_Straj+0x258>)
 8005b74:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8005b78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b80:	4980      	ldr	r1, [pc, #512]	; (8005d84 <get_Straj+0x25c>)
 8005b82:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8005b86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005b8e:	497e      	ldr	r1, [pc, #504]	; (8005d88 <get_Straj+0x260>)
 8005b90:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8005b94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b98:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005b9c:	497b      	ldr	r1, [pc, #492]	; (8005d8c <get_Straj+0x264>)
 8005b9e:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8005ba2:	497b      	ldr	r1, [pc, #492]	; (8005d90 <get_Straj+0x268>)
 8005ba4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005ba8:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8005bac:	4979      	ldr	r1, [pc, #484]	; (8005d94 <get_Straj+0x26c>)
 8005bae:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005bb2:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8005bb6:	4b77      	ldr	r3, [pc, #476]	; (8005d94 <get_Straj+0x26c>)
 8005bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bbc:	4b74      	ldr	r3, [pc, #464]	; (8005d90 <get_Straj+0x268>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa ff93 	bl	8000aec <__aeabi_dcmplt>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80fd 	beq.w	8005dc8 <get_Straj+0x2a0>

    flagInv = true;
 8005bce:	4a72      	ldr	r2, [pc, #456]	; (8005d98 <get_Straj+0x270>)
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	7013      	strb	r3, [r2, #0]

    qi = -qi;
 8005bd4:	4b6e      	ldr	r3, [pc, #440]	; (8005d90 <get_Straj+0x268>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	4690      	mov	r8, r2
 8005bdc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005be0:	4b6b      	ldr	r3, [pc, #428]	; (8005d90 <get_Straj+0x268>)
 8005be2:	e9c3 8900 	strd	r8, r9, [r3]
    qf = -qf;
 8005be6:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <get_Straj+0x26c>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8005bf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005bf8:	4b66      	ldr	r3, [pc, #408]	; (8005d94 <get_Straj+0x26c>)
 8005bfa:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8005bfe:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 8005c02:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <get_Straj+0x274>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005c0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005c14:	4b61      	ldr	r3, [pc, #388]	; (8005d9c <get_Straj+0x274>)
 8005c16:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8005c1a:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 8005c1e:	4b60      	ldr	r3, [pc, #384]	; (8005da0 <get_Straj+0x278>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005c28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005c30:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <get_Straj+0x278>)
 8005c32:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8005c36:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 8005c3a:	4b5a      	ldr	r3, [pc, #360]	; (8005da4 <get_Straj+0x27c>)
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005c4c:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <get_Straj+0x280>)
 8005c4e:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8005c52:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <get_Straj+0x280>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8005c60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005c68:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <get_Straj+0x27c>)
 8005c6a:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8005c6e:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8005c72:	4b4e      	ldr	r3, [pc, #312]	; (8005dac <get_Straj+0x284>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005c7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005c84:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <get_Straj+0x288>)
 8005c86:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005c8a:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8005c8e:	4b48      	ldr	r3, [pc, #288]	; (8005db0 <get_Straj+0x288>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8005c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ca0:	4b42      	ldr	r3, [pc, #264]	; (8005dac <get_Straj+0x284>)
 8005ca2:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8005ca6:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8005caa:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <get_Straj+0x28c>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8005cb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <get_Straj+0x290>)
 8005cbe:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8005cc2:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8005cc6:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <get_Straj+0x290>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005cd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005cd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <get_Straj+0x28c>)
 8005cda:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8005cde:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8005ce2:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <get_Straj+0x290>)
 8005ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <get_Straj+0x24c>)
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f7fa fc8b 	bl	8000608 <__aeabi_dmul>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <get_Straj+0x294>)
 8005cfc:	e9c3 0100 	strd	r0, r1, [r3]
    alimd = -jmax*Tj2;
 8005d00:	4b2d      	ldr	r3, [pc, #180]	; (8005db8 <get_Straj+0x290>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8005d0a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d12:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <get_Straj+0x250>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005d1c:	f7fa fc74 	bl	8000608 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <get_Straj+0x298>)
 8005d2a:	e9c3 0100 	strd	r0, r1, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <get_Straj+0x258>)
 8005d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <get_Straj+0x24c>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa faad 	bl	8000298 <__aeabi_dsub>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4610      	mov	r0, r2
 8005d44:	4619      	mov	r1, r3
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <get_Straj+0x294>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc5c 	bl	8000608 <__aeabi_dmul>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <get_Straj+0x274>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fa9d 	bl	800029c <__adddf3>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <get_Straj+0x29c>)
 8005d6c:	e9c3 0100 	strd	r0, r1, [r3]
 8005d70:	e091      	b.n	8005e96 <get_Straj+0x36e>
 8005d72:	bf00      	nop
 8005d74:	200008a0 	.word	0x200008a0
 8005d78:	200008a8 	.word	0x200008a8
 8005d7c:	200008b0 	.word	0x200008b0
 8005d80:	20000888 	.word	0x20000888
 8005d84:	20000890 	.word	0x20000890
 8005d88:	20000898 	.word	0x20000898
 8005d8c:	20000880 	.word	0x20000880
 8005d90:	200008c0 	.word	0x200008c0
 8005d94:	200008c8 	.word	0x200008c8
 8005d98:	20000860 	.word	0x20000860
 8005d9c:	20000018 	.word	0x20000018
 8005da0:	20000710 	.word	0x20000710
 8005da4:	20000708 	.word	0x20000708
 8005da8:	20000010 	.word	0x20000010
 8005dac:	20000718 	.word	0x20000718
 8005db0:	20000020 	.word	0x20000020
 8005db4:	20000700 	.word	0x20000700
 8005db8:	20000008 	.word	0x20000008
 8005dbc:	20000868 	.word	0x20000868
 8005dc0:	20000870 	.word	0x20000870
 8005dc4:	20000878 	.word	0x20000878

    }else{
        jmin = -jmax;
 8005dc8:	4b99      	ldr	r3, [pc, #612]	; (8006030 <get_Straj+0x508>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	4614      	mov	r4, r2
 8005dd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005dd4:	4b97      	ldr	r3, [pc, #604]	; (8006034 <get_Straj+0x50c>)
 8005dd6:	e9c3 4500 	strd	r4, r5, [r3]
        amin = -amax;
 8005dda:	4b97      	ldr	r3, [pc, #604]	; (8006038 <get_Straj+0x510>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	4692      	mov	sl, r2
 8005de2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005de6:	4b95      	ldr	r3, [pc, #596]	; (800603c <get_Straj+0x514>)
 8005de8:	e9c3 ab00 	strd	sl, fp, [r3]
        vmin = -vmax;
 8005dec:	4b94      	ldr	r3, [pc, #592]	; (8006040 <get_Straj+0x518>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005df6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dfe:	4b91      	ldr	r3, [pc, #580]	; (8006044 <get_Straj+0x51c>)
 8005e00:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8005e04:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8005e08:	4b89      	ldr	r3, [pc, #548]	; (8006030 <get_Straj+0x508>)
 8005e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e0e:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <get_Straj+0x520>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fbf8 	bl	8000608 <__aeabi_dmul>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4b8a      	ldr	r3, [pc, #552]	; (800604c <get_Straj+0x524>)
 8005e22:	e9c3 0100 	strd	r0, r1, [r3]
        alimd = -jmax*Tj2;
 8005e26:	4b82      	ldr	r3, [pc, #520]	; (8006030 <get_Straj+0x508>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005e30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e38:	4b85      	ldr	r3, [pc, #532]	; (8006050 <get_Straj+0x528>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005e42:	f7fa fbe1 	bl	8000608 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4b81      	ldr	r3, [pc, #516]	; (8006054 <get_Straj+0x52c>)
 8005e50:	e9c3 0100 	strd	r0, r1, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8005e54:	4b80      	ldr	r3, [pc, #512]	; (8006058 <get_Straj+0x530>)
 8005e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e5a:	4b7b      	ldr	r3, [pc, #492]	; (8006048 <get_Straj+0x520>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fa1a 	bl	8000298 <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4b77      	ldr	r3, [pc, #476]	; (800604c <get_Straj+0x524>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f7fa fbc9 	bl	8000608 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4b77      	ldr	r3, [pc, #476]	; (800605c <get_Straj+0x534>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fa0a 	bl	800029c <__adddf3>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4b73      	ldr	r3, [pc, #460]	; (8006060 <get_Straj+0x538>)
 8005e92:	e9c3 0100 	strd	r0, r1, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005ea2:	f7fa fe37 	bl	8000b14 <__aeabi_dcmpge>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80e9 	beq.w	8006080 <get_Straj+0x558>
 8005eae:	4b66      	ldr	r3, [pc, #408]	; (8006048 <get_Straj+0x520>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005eb8:	f7fa fe22 	bl	8000b00 <__aeabi_dcmple>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80de 	beq.w	8006080 <get_Straj+0x558>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8005ec4:	4b65      	ldr	r3, [pc, #404]	; (800605c <get_Straj+0x534>)
 8005ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005eca:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005ece:	f7fa fb9b 	bl	8000608 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4b62      	ldr	r3, [pc, #392]	; (8006064 <get_Straj+0x53c>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f9dc 	bl	800029c <__adddf3>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8006020 <get_Straj+0x4f8>
 8005ef0:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005ef4:	f009 fab4 	bl	800f460 <pow>
 8005ef8:	ec51 0b10 	vmov	r0, r1, d0
 8005efc:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <get_Straj+0x508>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa fb81 	bl	8000608 <__aeabi_dmul>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	4b55      	ldr	r3, [pc, #340]	; (8006068 <get_Straj+0x540>)
 8005f14:	f7fa fca2 	bl	800085c <__aeabi_ddiv>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa f9bc 	bl	800029c <__adddf3>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4950      	ldr	r1, [pc, #320]	; (800606c <get_Straj+0x544>)
 8005f2a:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+jmax*pow(t,2)/2;
 8005f2e:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8006028 <get_Straj+0x500>
 8005f32:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8005f36:	f009 fa93 	bl	800f460 <pow>
 8005f3a:	ec51 0b10 	vmov	r0, r1, d0
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <get_Straj+0x508>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fb60 	bl	8000608 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f58:	f7fa fc80 	bl	800085c <__aeabi_ddiv>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4610      	mov	r0, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <get_Straj+0x534>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa f997 	bl	800029c <__adddf3>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	493f      	ldr	r1, [pc, #252]	; (8006070 <get_Straj+0x548>)
 8005f74:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*t;
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <get_Straj+0x508>)
 8005f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f7e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005f82:	f7fa fb41 	bl	8000608 <__aeabi_dmul>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	493a      	ldr	r1, [pc, #232]	; (8006074 <get_Straj+0x54c>)
 8005f8c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <get_Straj+0x508>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	4938      	ldr	r1, [pc, #224]	; (8006078 <get_Straj+0x550>)
 8005f98:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <get_Straj+0x554>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 87a8 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005fa6:	4b31      	ldr	r3, [pc, #196]	; (800606c <get_Straj+0x544>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005fb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fb8:	4b2c      	ldr	r3, [pc, #176]	; (800606c <get_Straj+0x544>)
 8005fba:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8005fbe:	ed83 7b00 	vstr	d7, [r3]
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <get_Straj+0x548>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fd4:	4b26      	ldr	r3, [pc, #152]	; (8006070 <get_Straj+0x548>)
 8005fd6:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8005fda:	ed83 7b00 	vstr	d7, [r3]
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <get_Straj+0x54c>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8005fe8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ff0:	4b20      	ldr	r3, [pc, #128]	; (8006074 <get_Straj+0x54c>)
 8005ff2:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8005ff6:	ed83 7b00 	vstr	d7, [r3]
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	; (8006078 <get_Straj+0x550>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8006004:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800600c:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <get_Straj+0x550>)
 800600e:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8006012:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006016:	4b19      	ldr	r3, [pc, #100]	; (800607c <get_Straj+0x554>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800601c:	f000 bf6b 	b.w	8006ef6 <get_Straj+0x13ce>
 8006020:	00000000 	.word	0x00000000
 8006024:	40080000 	.word	0x40080000
 8006028:	00000000 	.word	0x00000000
 800602c:	40000000 	.word	0x40000000
 8006030:	20000008 	.word	0x20000008
 8006034:	20000700 	.word	0x20000700
 8006038:	20000020 	.word	0x20000020
 800603c:	20000718 	.word	0x20000718
 8006040:	20000010 	.word	0x20000010
 8006044:	20000708 	.word	0x20000708
 8006048:	200008a0 	.word	0x200008a0
 800604c:	20000868 	.word	0x20000868
 8006050:	200008a8 	.word	0x200008a8
 8006054:	20000870 	.word	0x20000870
 8006058:	20000888 	.word	0x20000888
 800605c:	20000018 	.word	0x20000018
 8006060:	20000878 	.word	0x20000878
 8006064:	200008c0 	.word	0x200008c0
 8006068:	40180000 	.word	0x40180000
 800606c:	200006e0 	.word	0x200006e0
 8006070:	200006e8 	.word	0x200006e8
 8006074:	200006f0 	.word	0x200006f0
 8006078:	200006f8 	.word	0x200006f8
 800607c:	20000860 	.word	0x20000860
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8006080:	4b85      	ldr	r3, [pc, #532]	; (8006298 <get_Straj+0x770>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800608a:	f7fa fd4d 	bl	8000b28 <__aeabi_dcmpgt>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 811b 	beq.w	80062cc <get_Straj+0x7a4>
 8006096:	4b81      	ldr	r3, [pc, #516]	; (800629c <get_Straj+0x774>)
 8006098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800609c:	4b7e      	ldr	r3, [pc, #504]	; (8006298 <get_Straj+0x770>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa f8f9 	bl	8000298 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80060ae:	f7fa fd27 	bl	8000b00 <__aeabi_dcmple>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8109 	beq.w	80062cc <get_Straj+0x7a4>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 80060ba:	4b79      	ldr	r3, [pc, #484]	; (80062a0 <get_Straj+0x778>)
 80060bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060c0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80060c4:	f7fa faa0 	bl	8000608 <__aeabi_dmul>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	4b74      	ldr	r3, [pc, #464]	; (80062a4 <get_Straj+0x77c>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa f8e1 	bl	800029c <__adddf3>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4692      	mov	sl, r2
 80060e0:	469b      	mov	fp, r3
 80060e2:	4b71      	ldr	r3, [pc, #452]	; (80062a8 <get_Straj+0x780>)
 80060e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	4b6f      	ldr	r3, [pc, #444]	; (80062ac <get_Straj+0x784>)
 80060ee:	f7fa fbb5 	bl	800085c <__aeabi_ddiv>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4690      	mov	r8, r2
 80060f8:	4699      	mov	r9, r3
 80060fa:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8006290 <get_Straj+0x768>
 80060fe:	ed97 0b5e 	vldr	d0, [r7, #376]	; 0x178
 8006102:	f009 f9ad 	bl	800f460 <pow>
 8006106:	ec51 0b10 	vmov	r0, r1, d0
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	4b68      	ldr	r3, [pc, #416]	; (80062b0 <get_Straj+0x788>)
 8006110:	f7fa fa7a 	bl	8000608 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4614      	mov	r4, r2
 800611a:	461d      	mov	r5, r3
 800611c:	4b5e      	ldr	r3, [pc, #376]	; (8006298 <get_Straj+0x770>)
 800611e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	4b62      	ldr	r3, [pc, #392]	; (80062b0 <get_Straj+0x788>)
 8006128:	f7fa fa6e 	bl	8000608 <__aeabi_dmul>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f8a8 	bl	8000298 <__aeabi_dsub>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4614      	mov	r4, r2
 800614e:	461d      	mov	r5, r3
 8006150:	4b51      	ldr	r3, [pc, #324]	; (8006298 <get_Straj+0x770>)
 8006152:	ed93 7b00 	vldr	d7, [r3]
 8006156:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8006290 <get_Straj+0x768>
 800615a:	eeb0 0a47 	vmov.f32	s0, s14
 800615e:	eef0 0a67 	vmov.f32	s1, s15
 8006162:	f009 f97d 	bl	800f460 <pow>
 8006166:	ec53 2b10 	vmov	r2, r3, d0
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f7fa f895 	bl	800029c <__adddf3>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f7fa fa45 	bl	8000608 <__aeabi_dmul>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4650      	mov	r0, sl
 8006184:	4659      	mov	r1, fp
 8006186:	f7fa f889 	bl	800029c <__adddf3>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4949      	ldr	r1, [pc, #292]	; (80062b4 <get_Straj+0x78c>)
 8006190:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+alima*(t-Tj1/2);
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <get_Straj+0x770>)
 8006196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061a2:	f7fa fb5b 	bl	800085c <__aeabi_ddiv>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80061ae:	f7fa f873 	bl	8000298 <__aeabi_dsub>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <get_Straj+0x780>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa fa22 	bl	8000608 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	4b34      	ldr	r3, [pc, #208]	; (80062a0 <get_Straj+0x778>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa f863 	bl	800029c <__adddf3>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4937      	ldr	r1, [pc, #220]	; (80062b8 <get_Straj+0x790>)
 80061dc:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*Tj1;
 80061e0:	4b36      	ldr	r3, [pc, #216]	; (80062bc <get_Straj+0x794>)
 80061e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061e6:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <get_Straj+0x770>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa fa0c 	bl	8000608 <__aeabi_dmul>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4932      	ldr	r1, [pc, #200]	; (80062c0 <get_Straj+0x798>)
 80061f6:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 80061fa:	4932      	ldr	r1, [pc, #200]	; (80062c4 <get_Straj+0x79c>)
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <get_Straj+0x7a0>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8672 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006212:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <get_Straj+0x78c>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800621c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006224:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <get_Straj+0x78c>)
 8006226:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 800622a:	ed83 7b00 	vstr	d7, [r3]
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <get_Straj+0x790>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800623c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <get_Straj+0x790>)
 8006242:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8006246:	ed83 7b00 	vstr	d7, [r3]
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <get_Straj+0x798>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8006254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800625c:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <get_Straj+0x798>)
 800625e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8006262:	ed83 7b00 	vstr	d7, [r3]
 8006266:	4b17      	ldr	r3, [pc, #92]	; (80062c4 <get_Straj+0x79c>)
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8006270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <get_Straj+0x79c>)
 800627a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 800627e:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <get_Straj+0x7a0>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006288:	f000 be35 	b.w	8006ef6 <get_Straj+0x13ce>
 800628c:	f3af 8000 	nop.w
 8006290:	00000000 	.word	0x00000000
 8006294:	40000000 	.word	0x40000000
 8006298:	200008a0 	.word	0x200008a0
 800629c:	20000888 	.word	0x20000888
 80062a0:	20000018 	.word	0x20000018
 80062a4:	200008c0 	.word	0x200008c0
 80062a8:	20000868 	.word	0x20000868
 80062ac:	40180000 	.word	0x40180000
 80062b0:	40080000 	.word	0x40080000
 80062b4:	200006e0 	.word	0x200006e0
 80062b8:	200006e8 	.word	0x200006e8
 80062bc:	20000008 	.word	0x20000008
 80062c0:	200006f0 	.word	0x200006f0
 80062c4:	200006f8 	.word	0x200006f8
 80062c8:	20000860 	.word	0x20000860
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 80062cc:	4b94      	ldr	r3, [pc, #592]	; (8006520 <get_Straj+0x9f8>)
 80062ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062d2:	4b94      	ldr	r3, [pc, #592]	; (8006524 <get_Straj+0x9fc>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7f9 ffde 	bl	8000298 <__aeabi_dsub>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80062e4:	f7fa fc20 	bl	8000b28 <__aeabi_dcmpgt>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8130 	beq.w	8006550 <get_Straj+0xa28>
 80062f0:	4b8b      	ldr	r3, [pc, #556]	; (8006520 <get_Straj+0x9f8>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80062fa:	f7fa fc01 	bl	8000b00 <__aeabi_dcmple>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8125 	beq.w	8006550 <get_Straj+0xa28>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8006306:	4b88      	ldr	r3, [pc, #544]	; (8006528 <get_Straj+0xa00>)
 8006308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800630c:	4b87      	ldr	r3, [pc, #540]	; (800652c <get_Straj+0xa04>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f7f9 ffc3 	bl	800029c <__adddf3>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	4b80      	ldr	r3, [pc, #512]	; (8006520 <get_Straj+0x9f8>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f970 	bl	8000608 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4610      	mov	r0, r2
 800632e:	4619      	mov	r1, r3
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006338:	f7fa fa90 	bl	800085c <__aeabi_ddiv>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4610      	mov	r0, r2
 8006342:	4619      	mov	r1, r3
 8006344:	4b7a      	ldr	r3, [pc, #488]	; (8006530 <get_Straj+0xa08>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7f9 ffa7 	bl	800029c <__adddf3>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4614      	mov	r4, r2
 8006354:	461d      	mov	r5, r3
 8006356:	4b72      	ldr	r3, [pc, #456]	; (8006520 <get_Straj+0x9f8>)
 8006358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800635c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006360:	f7f9 ff9a 	bl	8000298 <__aeabi_dsub>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	4b6e      	ldr	r3, [pc, #440]	; (8006528 <get_Straj+0xa00>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7fa f949 	bl	8000608 <__aeabi_dmul>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7f9 ff8b 	bl	8000298 <__aeabi_dsub>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4614      	mov	r4, r2
 8006388:	461d      	mov	r5, r3
 800638a:	4b65      	ldr	r3, [pc, #404]	; (8006520 <get_Straj+0x9f8>)
 800638c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006390:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006394:	f7f9 ff80 	bl	8000298 <__aeabi_dsub>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	ec43 2b17 	vmov	d7, r2, r3
 80063a0:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8006510 <get_Straj+0x9e8>
 80063a4:	eeb0 0a47 	vmov.f32	s0, s14
 80063a8:	eef0 0a67 	vmov.f32	s1, s15
 80063ac:	f009 f858 	bl	800f460 <pow>
 80063b0:	ec51 0b10 	vmov	r0, r1, d0
 80063b4:	4b5f      	ldr	r3, [pc, #380]	; (8006534 <get_Straj+0xa0c>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7fa f925 	bl	8000608 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <get_Straj+0xa10>)
 80063cc:	f7fa fa46 	bl	800085c <__aeabi_ddiv>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7f9 ff5e 	bl	8000298 <__aeabi_dsub>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4956      	ldr	r1, [pc, #344]	; (800653c <get_Straj+0xa14>)
 80063e2:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 80063e6:	4b4e      	ldr	r3, [pc, #312]	; (8006520 <get_Straj+0x9f8>)
 80063e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ec:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80063f0:	f7f9 ff52 	bl	8000298 <__aeabi_dsub>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	ec43 2b17 	vmov	d7, r2, r3
 80063fc:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8006518 <get_Straj+0x9f0>
 8006400:	eeb0 0a47 	vmov.f32	s0, s14
 8006404:	eef0 0a67 	vmov.f32	s1, s15
 8006408:	f009 f82a 	bl	800f460 <pow>
 800640c:	ec51 0b10 	vmov	r0, r1, d0
 8006410:	4b48      	ldr	r3, [pc, #288]	; (8006534 <get_Straj+0xa0c>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7fa f8f7 	bl	8000608 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4610      	mov	r0, r2
 8006420:	4619      	mov	r1, r3
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800642a:	f7fa fa17 	bl	800085c <__aeabi_ddiv>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4b3c      	ldr	r3, [pc, #240]	; (8006528 <get_Straj+0xa00>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7f9 ff2e 	bl	800029c <__adddf3>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	493e      	ldr	r1, [pc, #248]	; (8006540 <get_Straj+0xa18>)
 8006446:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmin*(Ta-t);
 800644a:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <get_Straj+0xa0c>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8006454:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800645c:	4b30      	ldr	r3, [pc, #192]	; (8006520 <get_Straj+0x9f8>)
 800645e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006462:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006466:	f7f9 ff17 	bl	8000298 <__aeabi_dsub>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006472:	f7fa f8c9 	bl	8000608 <__aeabi_dmul>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4932      	ldr	r1, [pc, #200]	; (8006544 <get_Straj+0xa1c>)
 800647c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmin;
 8006480:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <get_Straj+0xa0c>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	4930      	ldr	r1, [pc, #192]	; (8006548 <get_Straj+0xa20>)
 8006488:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800648c:	4b2f      	ldr	r3, [pc, #188]	; (800654c <get_Straj+0xa24>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8530 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006496:	4b29      	ldr	r3, [pc, #164]	; (800653c <get_Straj+0xa14>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80064a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a8:	4b24      	ldr	r3, [pc, #144]	; (800653c <get_Straj+0xa14>)
 80064aa:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 80064ae:	ed83 7b00 	vstr	d7, [r3]
 80064b2:	4b23      	ldr	r3, [pc, #140]	; (8006540 <get_Straj+0xa18>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <get_Straj+0xa18>)
 80064c6:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 80064ca:	ed83 7b00 	vstr	d7, [r3]
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <get_Straj+0xa1c>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80064d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064e0:	4b18      	ldr	r3, [pc, #96]	; (8006544 <get_Straj+0xa1c>)
 80064e2:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80064e6:	ed83 7b00 	vstr	d7, [r3]
 80064ea:	4b17      	ldr	r3, [pc, #92]	; (8006548 <get_Straj+0xa20>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80064f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064fc:	4b12      	ldr	r3, [pc, #72]	; (8006548 <get_Straj+0xa20>)
 80064fe:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8006502:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <get_Straj+0xa24>)
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800650c:	f000 bcf3 	b.w	8006ef6 <get_Straj+0x13ce>
 8006510:	00000000 	.word	0x00000000
 8006514:	40080000 	.word	0x40080000
 8006518:	00000000 	.word	0x00000000
 800651c:	40000000 	.word	0x40000000
 8006520:	20000888 	.word	0x20000888
 8006524:	200008a0 	.word	0x200008a0
 8006528:	20000878 	.word	0x20000878
 800652c:	20000018 	.word	0x20000018
 8006530:	200008c0 	.word	0x200008c0
 8006534:	20000700 	.word	0x20000700
 8006538:	40180000 	.word	0x40180000
 800653c:	200006e0 	.word	0x200006e0
 8006540:	200006e8 	.word	0x200006e8
 8006544:	200006f0 	.word	0x200006f0
 8006548:	200006f8 	.word	0x200006f8
 800654c:	20000860 	.word	0x20000860
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8006550:	4b59      	ldr	r3, [pc, #356]	; (80066b8 <get_Straj+0xb90>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800655a:	f7fa fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80bd 	beq.w	80066e0 <get_Straj+0xbb8>
 8006566:	4b54      	ldr	r3, [pc, #336]	; (80066b8 <get_Straj+0xb90>)
 8006568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <get_Straj+0xb94>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7f9 fe93 	bl	800029c <__adddf3>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800657e:	f7fa fabf 	bl	8000b00 <__aeabi_dcmple>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80ab 	beq.w	80066e0 <get_Straj+0xbb8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 800658a:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <get_Straj+0xb98>)
 800658c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006590:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <get_Straj+0xb9c>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 fe81 	bl	800029c <__adddf3>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <get_Straj+0xb90>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7fa f82e 	bl	8000608 <__aeabi_dmul>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065bc:	f7fa f94e 	bl	800085c <__aeabi_ddiv>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <get_Straj+0xba0>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7f9 fe65 	bl	800029c <__adddf3>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4614      	mov	r4, r2
 80065d8:	461d      	mov	r5, r3
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <get_Straj+0xb90>)
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80065e4:	f7f9 fe58 	bl	8000298 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	4b33      	ldr	r3, [pc, #204]	; (80066c0 <get_Straj+0xb98>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa f807 	bl	8000608 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fe4b 	bl	800029c <__adddf3>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4930      	ldr	r1, [pc, #192]	; (80066cc <get_Straj+0xba4>)
 800660c:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim;
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <get_Straj+0xb98>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	492e      	ldr	r1, [pc, #184]	; (80066d0 <get_Straj+0xba8>)
 8006618:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 800661c:	492d      	ldr	r1, [pc, #180]	; (80066d4 <get_Straj+0xbac>)
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 800662a:	492b      	ldr	r1, [pc, #172]	; (80066d8 <get_Straj+0xbb0>)
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006638:	4b28      	ldr	r3, [pc, #160]	; (80066dc <get_Straj+0xbb4>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 845a 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <get_Straj+0xba4>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800664c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006650:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <get_Straj+0xba4>)
 8006656:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800665a:	ed83 7b00 	vstr	d7, [r3]
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <get_Straj+0xba8>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800666c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006670:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <get_Straj+0xba8>)
 8006672:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8006676:	ed83 7b00 	vstr	d7, [r3]
 800667a:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <get_Straj+0xbac>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006684:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668c:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <get_Straj+0xbac>)
 800668e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8006692:	ed83 7b00 	vstr	d7, [r3]
 8006696:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <get_Straj+0xbb0>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	67ba      	str	r2, [r7, #120]	; 0x78
 800669e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80066a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <get_Straj+0xbb0>)
 80066a6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80066aa:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <get_Straj+0xbb4>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80066b4:	f000 bc1f 	b.w	8006ef6 <get_Straj+0x13ce>
 80066b8:	20000888 	.word	0x20000888
 80066bc:	20000898 	.word	0x20000898
 80066c0:	20000878 	.word	0x20000878
 80066c4:	20000018 	.word	0x20000018
 80066c8:	200008c0 	.word	0x200008c0
 80066cc:	200006e0 	.word	0x200006e0
 80066d0:	200006e8 	.word	0x200006e8
 80066d4:	200006f0 	.word	0x200006f0
 80066d8:	200006f8 	.word	0x200006f8
 80066dc:	20000860 	.word	0x20000860
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 80066e0:	4ba9      	ldr	r3, [pc, #676]	; (8006988 <get_Straj+0xe60>)
 80066e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066e6:	4ba9      	ldr	r3, [pc, #676]	; (800698c <get_Straj+0xe64>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fdd4 	bl	8000298 <__aeabi_dsub>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80066f8:	f7fa fa0c 	bl	8000b14 <__aeabi_dcmpge>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 815e 	beq.w	80069c0 <get_Straj+0xe98>
 8006704:	4ba0      	ldr	r3, [pc, #640]	; (8006988 <get_Straj+0xe60>)
 8006706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800670a:	4ba0      	ldr	r3, [pc, #640]	; (800698c <get_Straj+0xe64>)
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f7f9 fdc2 	bl	8000298 <__aeabi_dsub>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	4b9c      	ldr	r3, [pc, #624]	; (8006990 <get_Straj+0xe68>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fdbb 	bl	800029c <__adddf3>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800672e:	f7fa f9e7 	bl	8000b00 <__aeabi_dcmple>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8143 	beq.w	80069c0 <get_Straj+0xe98>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 800673a:	4b96      	ldr	r3, [pc, #600]	; (8006994 <get_Straj+0xe6c>)
 800673c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006740:	4b95      	ldr	r3, [pc, #596]	; (8006998 <get_Straj+0xe70>)
 8006742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006746:	4b95      	ldr	r3, [pc, #596]	; (800699c <get_Straj+0xe74>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fda6 	bl	800029c <__adddf3>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	4b8c      	ldr	r3, [pc, #560]	; (800698c <get_Straj+0xe64>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 ff53 	bl	8000608 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f04f 0200 	mov.w	r2, #0
 800676e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006772:	f7fa f873 	bl	800085c <__aeabi_ddiv>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4620      	mov	r0, r4
 800677c:	4629      	mov	r1, r5
 800677e:	f7f9 fd8b 	bl	8000298 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4614      	mov	r4, r2
 8006788:	461d      	mov	r5, r3
 800678a:	4b7f      	ldr	r3, [pc, #508]	; (8006988 <get_Straj+0xe60>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006794:	f7f9 fd80 	bl	8000298 <__aeabi_dsub>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4610      	mov	r0, r2
 800679e:	4619      	mov	r1, r3
 80067a0:	4b7a      	ldr	r3, [pc, #488]	; (800698c <get_Straj+0xe64>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 fd79 	bl	800029c <__adddf3>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	4b79      	ldr	r3, [pc, #484]	; (8006998 <get_Straj+0xe70>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 ff26 	bl	8000608 <__aeabi_dmul>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7f9 fd6a 	bl	800029c <__adddf3>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	4b6d      	ldr	r3, [pc, #436]	; (8006988 <get_Straj+0xe60>)
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80067da:	f7f9 fd5d 	bl	8000298 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	4b69      	ldr	r3, [pc, #420]	; (800698c <get_Straj+0xe64>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fd56 	bl	800029c <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	ec43 2b17 	vmov	d7, r2, r3
 80067f8:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8006978 <get_Straj+0xe50>
 80067fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006800:	eef0 0a67 	vmov.f32	s1, s15
 8006804:	f008 fe2c 	bl	800f460 <pow>
 8006808:	ec51 0b10 	vmov	r0, r1, d0
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	4b63      	ldr	r3, [pc, #396]	; (80069a0 <get_Straj+0xe78>)
 8006812:	f7fa f823 	bl	800085c <__aeabi_ddiv>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <get_Straj+0xe7c>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fef0 	bl	8000608 <__aeabi_dmul>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	f7f9 fd32 	bl	8000298 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	495b      	ldr	r1, [pc, #364]	; (80069a8 <get_Straj+0xe80>)
 800683a:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 800683e:	4b56      	ldr	r3, [pc, #344]	; (8006998 <get_Straj+0xe70>)
 8006840:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006844:	4b50      	ldr	r3, [pc, #320]	; (8006988 <get_Straj+0xe60>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800684e:	f7f9 fd23 	bl	8000298 <__aeabi_dsub>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	4b4c      	ldr	r3, [pc, #304]	; (800698c <get_Straj+0xe64>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fd1c 	bl	800029c <__adddf3>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	ec43 2b17 	vmov	d7, r2, r3
 800686c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8006980 <get_Straj+0xe58>
 8006870:	eeb0 0a47 	vmov.f32	s0, s14
 8006874:	eef0 0a67 	vmov.f32	s1, s15
 8006878:	f008 fdf2 	bl	800f460 <pow>
 800687c:	ec51 0b10 	vmov	r0, r1, d0
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006888:	f7f9 ffe8 	bl	800085c <__aeabi_ddiv>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4610      	mov	r0, r2
 8006892:	4619      	mov	r1, r3
 8006894:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <get_Straj+0xe7c>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 feb5 	bl	8000608 <__aeabi_dmul>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7f9 fcf7 	bl	8000298 <__aeabi_dsub>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	493f      	ldr	r1, [pc, #252]	; (80069ac <get_Straj+0xe84>)
 80068b0:	e9c1 2300 	strd	r2, r3, [r1]
        qdd=-jmax*(t-T+Td);
 80068b4:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <get_Straj+0xe7c>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	673a      	str	r2, [r7, #112]	; 0x70
 80068bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	677b      	str	r3, [r7, #116]	; 0x74
 80068c2:	4b31      	ldr	r3, [pc, #196]	; (8006988 <get_Straj+0xe60>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80068cc:	f7f9 fce4 	bl	8000298 <__aeabi_dsub>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4610      	mov	r0, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <get_Straj+0xe64>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fcdd 	bl	800029c <__adddf3>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80068ea:	f7f9 fe8d 	bl	8000608 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	492f      	ldr	r1, [pc, #188]	; (80069b0 <get_Straj+0xe88>)
 80068f4:	e9c1 2300 	strd	r2, r3, [r1]
        qddd=jmin;
 80068f8:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <get_Straj+0xe8c>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	492e      	ldr	r1, [pc, #184]	; (80069b8 <get_Straj+0xe90>)
 8006900:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006904:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <get_Straj+0xe94>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 82f4 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800690e:	4b26      	ldr	r3, [pc, #152]	; (80069a8 <get_Straj+0xe80>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	66ba      	str	r2, [r7, #104]	; 0x68
 8006916:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800691a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800691c:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <get_Straj+0xe80>)
 800691e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8006922:	ed83 7b00 	vstr	d7, [r3]
 8006926:	4b21      	ldr	r3, [pc, #132]	; (80069ac <get_Straj+0xe84>)
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	663a      	str	r2, [r7, #96]	; 0x60
 800692e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006932:	667b      	str	r3, [r7, #100]	; 0x64
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <get_Straj+0xe84>)
 8006936:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800693a:	ed83 7b00 	vstr	d7, [r3]
 800693e:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <get_Straj+0xe88>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	65ba      	str	r2, [r7, #88]	; 0x58
 8006946:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800694a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694c:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <get_Straj+0xe88>)
 800694e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006952:	ed83 7b00 	vstr	d7, [r3]
 8006956:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <get_Straj+0xe90>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	653a      	str	r2, [r7, #80]	; 0x50
 800695e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006962:	657b      	str	r3, [r7, #84]	; 0x54
 8006964:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <get_Straj+0xe90>)
 8006966:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800696a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <get_Straj+0xe94>)
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006974:	e2bf      	b.n	8006ef6 <get_Straj+0x13ce>
 8006976:	bf00      	nop
 8006978:	00000000 	.word	0x00000000
 800697c:	40080000 	.word	0x40080000
 8006980:	00000000 	.word	0x00000000
 8006984:	40000000 	.word	0x40000000
 8006988:	20000880 	.word	0x20000880
 800698c:	20000890 	.word	0x20000890
 8006990:	200008a8 	.word	0x200008a8
 8006994:	200008c8 	.word	0x200008c8
 8006998:	20000878 	.word	0x20000878
 800699c:	20000710 	.word	0x20000710
 80069a0:	40180000 	.word	0x40180000
 80069a4:	20000008 	.word	0x20000008
 80069a8:	200006e0 	.word	0x200006e0
 80069ac:	200006e8 	.word	0x200006e8
 80069b0:	200006f0 	.word	0x200006f0
 80069b4:	20000700 	.word	0x20000700
 80069b8:	200006f8 	.word	0x200006f8
 80069bc:	20000860 	.word	0x20000860
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 80069c0:	4bbb      	ldr	r3, [pc, #748]	; (8006cb0 <get_Straj+0x1188>)
 80069c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069c6:	4bbb      	ldr	r3, [pc, #748]	; (8006cb4 <get_Straj+0x118c>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f7f9 fc64 	bl	8000298 <__aeabi_dsub>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	4bb7      	ldr	r3, [pc, #732]	; (8006cb8 <get_Straj+0x1190>)
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f7f9 fc5d 	bl	800029c <__adddf3>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80069ea:	f7fa f89d 	bl	8000b28 <__aeabi_dcmpgt>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8190 	beq.w	8006d16 <get_Straj+0x11ee>
 80069f6:	4bae      	ldr	r3, [pc, #696]	; (8006cb0 <get_Straj+0x1188>)
 80069f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069fc:	4bae      	ldr	r3, [pc, #696]	; (8006cb8 <get_Straj+0x1190>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fc49 	bl	8000298 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006a0e:	f7fa f877 	bl	8000b00 <__aeabi_dcmple>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 817e 	beq.w	8006d16 <get_Straj+0x11ee>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8006a1a:	4ba8      	ldr	r3, [pc, #672]	; (8006cbc <get_Straj+0x1194>)
 8006a1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a20:	4ba7      	ldr	r3, [pc, #668]	; (8006cc0 <get_Straj+0x1198>)
 8006a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a26:	4ba7      	ldr	r3, [pc, #668]	; (8006cc4 <get_Straj+0x119c>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fc36 	bl	800029c <__adddf3>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4610      	mov	r0, r2
 8006a36:	4619      	mov	r1, r3
 8006a38:	4b9e      	ldr	r3, [pc, #632]	; (8006cb4 <get_Straj+0x118c>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fde3 	bl	8000608 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a52:	f7f9 ff03 	bl	800085c <__aeabi_ddiv>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7f9 fc1b 	bl	8000298 <__aeabi_dsub>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4614      	mov	r4, r2
 8006a68:	461d      	mov	r5, r3
 8006a6a:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <get_Straj+0x1188>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <get_Straj+0x118c>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fc09 	bl	800029c <__adddf3>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4b8b      	ldr	r3, [pc, #556]	; (8006cc0 <get_Straj+0x1198>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fdb6 	bl	8000608 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7f9 fbfa 	bl	800029c <__adddf3>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 8006ab0:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <get_Straj+0x11a0>)
 8006ab2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	4b84      	ldr	r3, [pc, #528]	; (8006ccc <get_Straj+0x11a4>)
 8006abc:	f7f9 fece 	bl	800085c <__aeabi_ddiv>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4692      	mov	sl, r2
 8006ac6:	469b      	mov	fp, r3
 8006ac8:	4b79      	ldr	r3, [pc, #484]	; (8006cb0 <get_Straj+0x1188>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006ad2:	f7f9 fbe1 	bl	8000298 <__aeabi_dsub>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4610      	mov	r0, r2
 8006adc:	4619      	mov	r1, r3
 8006ade:	4b75      	ldr	r3, [pc, #468]	; (8006cb4 <get_Straj+0x118c>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fbda 	bl	800029c <__adddf3>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	ec43 2b17 	vmov	d7, r2, r3
 8006af0:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8006ca8 <get_Straj+0x1180>
 8006af4:	eeb0 0a47 	vmov.f32	s0, s14
 8006af8:	eef0 0a67 	vmov.f32	s1, s15
 8006afc:	f008 fcb0 	bl	800f460 <pow>
 8006b00:	ec51 0b10 	vmov	r0, r1, d0
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	4b71      	ldr	r3, [pc, #452]	; (8006cd0 <get_Straj+0x11a8>)
 8006b0a:	f7f9 fd7d 	bl	8000608 <__aeabi_dmul>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4690      	mov	r8, r2
 8006b14:	4699      	mov	r9, r3
 8006b16:	4b68      	ldr	r3, [pc, #416]	; (8006cb8 <get_Straj+0x1190>)
 8006b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	4b6b      	ldr	r3, [pc, #428]	; (8006cd0 <get_Straj+0x11a8>)
 8006b22:	f7f9 fd71 	bl	8000608 <__aeabi_dmul>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	4b60      	ldr	r3, [pc, #384]	; (8006cb0 <get_Straj+0x1188>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006b38:	f7f9 fbae 	bl	8000298 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	4b5b      	ldr	r3, [pc, #364]	; (8006cb4 <get_Straj+0x118c>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fba7 	bl	800029c <__adddf3>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 fd57 	bl	8000608 <__aeabi_dmul>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4649      	mov	r1, r9
 8006b62:	f7f9 fb99 	bl	8000298 <__aeabi_dsub>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	4b52      	ldr	r3, [pc, #328]	; (8006cb8 <get_Straj+0x1190>)
 8006b70:	ed93 7b00 	vldr	d7, [r3]
 8006b74:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8006ca8 <get_Straj+0x1180>
 8006b78:	eeb0 0a47 	vmov.f32	s0, s14
 8006b7c:	eef0 0a67 	vmov.f32	s1, s15
 8006b80:	f008 fc6e 	bl	800f460 <pow>
 8006b84:	ec53 2b10 	vmov	r2, r3, d0
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	f7f9 fb86 	bl	800029c <__adddf3>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	f7f9 fd36 	bl	8000608 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8006ba4:	f7f9 fb7a 	bl	800029c <__adddf3>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4949      	ldr	r1, [pc, #292]	; (8006cd4 <get_Straj+0x11ac>)
 8006bae:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <get_Straj+0x1188>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006bbc:	f7f9 fb6c 	bl	8000298 <__aeabi_dsub>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4b3a      	ldr	r3, [pc, #232]	; (8006cb4 <get_Straj+0x118c>)
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f7f9 fb65 	bl	800029c <__adddf3>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	461d      	mov	r5, r3
 8006bda:	4b37      	ldr	r3, [pc, #220]	; (8006cb8 <get_Straj+0x1190>)
 8006bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006be8:	f7f9 fe38 	bl	800085c <__aeabi_ddiv>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fb50 	bl	8000298 <__aeabi_dsub>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <get_Straj+0x11a0>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f7f9 fcff 	bl	8000608 <__aeabi_dmul>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <get_Straj+0x1198>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fb40 	bl	800029c <__adddf3>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	492d      	ldr	r1, [pc, #180]	; (8006cd8 <get_Straj+0x11b0>)
 8006c22:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*Tj2;
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <get_Straj+0x11b4>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <get_Straj+0x1190>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c3e:	f7f9 fce3 	bl	8000608 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4926      	ldr	r1, [pc, #152]	; (8006ce0 <get_Straj+0x11b8>)
 8006c48:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006c4c:	4925      	ldr	r1, [pc, #148]	; (8006ce4 <get_Straj+0x11bc>)
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <get_Straj+0x11c0>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8149 	beq.w	8006ef6 <get_Straj+0x13ce>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006c64:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <get_Straj+0x11ac>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	643a      	str	r2, [r7, #64]	; 0x40
 8006c6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c70:	647b      	str	r3, [r7, #68]	; 0x44
 8006c72:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <get_Straj+0x11ac>)
 8006c74:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006c78:	ed83 7b00 	vstr	d7, [r3]
 8006c7c:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <get_Straj+0x11b0>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	63ba      	str	r2, [r7, #56]	; 0x38
 8006c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8a:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <get_Straj+0x11b0>)
 8006c8c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006c90:	ed83 7b00 	vstr	d7, [r3]
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <get_Straj+0x11b8>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	e023      	b.n	8006cec <get_Straj+0x11c4>
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	00000000 	.word	0x00000000
 8006cac:	40000000 	.word	0x40000000
 8006cb0:	20000880 	.word	0x20000880
 8006cb4:	20000890 	.word	0x20000890
 8006cb8:	200008a8 	.word	0x200008a8
 8006cbc:	200008c8 	.word	0x200008c8
 8006cc0:	20000878 	.word	0x20000878
 8006cc4:	20000710 	.word	0x20000710
 8006cc8:	20000870 	.word	0x20000870
 8006ccc:	40180000 	.word	0x40180000
 8006cd0:	40080000 	.word	0x40080000
 8006cd4:	200006e0 	.word	0x200006e0
 8006cd8:	200006e8 	.word	0x200006e8
 8006cdc:	20000008 	.word	0x20000008
 8006ce0:	200006f0 	.word	0x200006f0
 8006ce4:	200006f8 	.word	0x200006f8
 8006ce8:	20000860 	.word	0x20000860
 8006cec:	4b8e      	ldr	r3, [pc, #568]	; (8006f28 <get_Straj+0x1400>)
 8006cee:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006cf2:	ed83 7b00 	vstr	d7, [r3]
 8006cf6:	4b8d      	ldr	r3, [pc, #564]	; (8006f2c <get_Straj+0x1404>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d04:	4b89      	ldr	r3, [pc, #548]	; (8006f2c <get_Straj+0x1404>)
 8006d06:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006d0a:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006d0e:	4b88      	ldr	r3, [pc, #544]	; (8006f30 <get_Straj+0x1408>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8006d14:	e0ef      	b.n	8006ef6 <get_Straj+0x13ce>
        }

    } else if (t>T-Tj2 && t<=T){
 8006d16:	4b87      	ldr	r3, [pc, #540]	; (8006f34 <get_Straj+0x140c>)
 8006d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d1c:	4b86      	ldr	r3, [pc, #536]	; (8006f38 <get_Straj+0x1410>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fab9 	bl	8000298 <__aeabi_dsub>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006d2e:	f7f9 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80de 	beq.w	8006ef6 <get_Straj+0x13ce>
 8006d3a:	4b7e      	ldr	r3, [pc, #504]	; (8006f34 <get_Straj+0x140c>)
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006d44:	f7f9 fedc 	bl	8000b00 <__aeabi_dcmple>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80d3 	beq.w	8006ef6 <get_Straj+0x13ce>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8006d50:	4b7a      	ldr	r3, [pc, #488]	; (8006f3c <get_Straj+0x1414>)
 8006d52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006d56:	4b77      	ldr	r3, [pc, #476]	; (8006f34 <get_Straj+0x140c>)
 8006d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d5c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d60:	f7f9 fa9a 	bl	8000298 <__aeabi_dsub>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4b74      	ldr	r3, [pc, #464]	; (8006f40 <get_Straj+0x1418>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f7f9 fc49 	bl	8000608 <__aeabi_dmul>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 fa8b 	bl	8000298 <__aeabi_dsub>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4614      	mov	r4, r2
 8006d88:	461d      	mov	r5, r3
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	; (8006f34 <get_Straj+0x140c>)
 8006d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d90:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	ec43 2b17 	vmov	d7, r2, r3
 8006da0:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8006f18 <get_Straj+0x13f0>
 8006da4:	eeb0 0a47 	vmov.f32	s0, s14
 8006da8:	eef0 0a67 	vmov.f32	s1, s15
 8006dac:	f008 fb58 	bl	800f460 <pow>
 8006db0:	ec51 0b10 	vmov	r0, r1, d0
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	4b62      	ldr	r3, [pc, #392]	; (8006f44 <get_Straj+0x141c>)
 8006dba:	f7f9 fd4f 	bl	800085c <__aeabi_ddiv>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4b60      	ldr	r3, [pc, #384]	; (8006f48 <get_Straj+0x1420>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fa5e 	bl	8000298 <__aeabi_dsub>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	495a      	ldr	r1, [pc, #360]	; (8006f4c <get_Straj+0x1424>)
 8006de2:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vf+jmax*(pow(T-t,2))/2;
 8006de6:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <get_Straj+0x140c>)
 8006de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dec:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006df0:	f7f9 fa52 	bl	8000298 <__aeabi_dsub>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	ec43 2b17 	vmov	d7, r2, r3
 8006dfc:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8006f20 <get_Straj+0x13f8>
 8006e00:	eeb0 0a47 	vmov.f32	s0, s14
 8006e04:	eef0 0a67 	vmov.f32	s1, s15
 8006e08:	f008 fb2a 	bl	800f460 <pow>
 8006e0c:	ec51 0b10 	vmov	r0, r1, d0
 8006e10:	4b4d      	ldr	r3, [pc, #308]	; (8006f48 <get_Straj+0x1420>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fbf7 	bl	8000608 <__aeabi_dmul>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e2a:	f7f9 fd17 	bl	800085c <__aeabi_ddiv>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <get_Straj+0x1418>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fa2e 	bl	800029c <__adddf3>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4942      	ldr	r1, [pc, #264]	; (8006f50 <get_Straj+0x1428>)
 8006e46:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*(T-t);
 8006e4a:	4b3f      	ldr	r3, [pc, #252]	; (8006f48 <get_Straj+0x1420>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	623a      	str	r2, [r7, #32]
 8006e52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
 8006e58:	4b36      	ldr	r3, [pc, #216]	; (8006f34 <get_Straj+0x140c>)
 8006e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e5e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8006e62:	f7f9 fa19 	bl	8000298 <__aeabi_dsub>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006e6e:	f7f9 fbcb 	bl	8000608 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	492c      	ldr	r1, [pc, #176]	; (8006f28 <get_Straj+0x1400>)
 8006e78:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8006e7c:	4b32      	ldr	r3, [pc, #200]	; (8006f48 <get_Straj+0x1420>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	492a      	ldr	r1, [pc, #168]	; (8006f2c <get_Straj+0x1404>)
 8006e84:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8006e88:	4b29      	ldr	r3, [pc, #164]	; (8006f30 <get_Straj+0x1408>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d032      	beq.n	8006ef6 <get_Straj+0x13ce>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8006e90:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <get_Straj+0x1424>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	61ba      	str	r2, [r7, #24]
 8006e98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <get_Straj+0x1424>)
 8006ea0:	ed97 7b06 	vldr	d7, [r7, #24]
 8006ea4:	ed83 7b00 	vstr	d7, [r3]
 8006ea8:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <get_Straj+0x1428>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	613a      	str	r2, [r7, #16]
 8006eb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	4b26      	ldr	r3, [pc, #152]	; (8006f50 <get_Straj+0x1428>)
 8006eb8:	ed97 7b04 	vldr	d7, [r7, #16]
 8006ebc:	ed83 7b00 	vstr	d7, [r3]
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <get_Straj+0x1400>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	60ba      	str	r2, [r7, #8]
 8006ec8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <get_Straj+0x1400>)
 8006ed0:	ed97 7b02 	vldr	d7, [r7, #8]
 8006ed4:	ed83 7b00 	vstr	d7, [r3]
 8006ed8:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <get_Straj+0x1404>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	603a      	str	r2, [r7, #0]
 8006ee0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <get_Straj+0x1404>)
 8006ee8:	ed97 7b00 	vldr	d7, [r7]
 8006eec:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <get_Straj+0x1408>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <get_Straj+0x1428>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f00:	eeb0 0a47 	vmov.f32	s0, s14
 8006f04:	eef0 0a67 	vmov.f32	s1, s15
 8006f08:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f12:	bf00      	nop
 8006f14:	f3af 8000 	nop.w
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	40080000 	.word	0x40080000
 8006f20:	00000000 	.word	0x00000000
 8006f24:	40000000 	.word	0x40000000
 8006f28:	200006f0 	.word	0x200006f0
 8006f2c:	200006f8 	.word	0x200006f8
 8006f30:	20000860 	.word	0x20000860
 8006f34:	20000880 	.word	0x20000880
 8006f38:	200008a8 	.word	0x200008a8
 8006f3c:	200008c8 	.word	0x200008c8
 8006f40:	20000710 	.word	0x20000710
 8006f44:	40180000 	.word	0x40180000
 8006f48:	20000008 	.word	0x20000008
 8006f4c:	200006e0 	.word	0x200006e0
 8006f50:	200006e8 	.word	0x200006e8
 8006f54:	00000000 	.word	0x00000000

08006f58 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8006f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f5c:	b0a6      	sub	sp, #152	; 0x98
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
 8006f64:	ed87 1b20 	vstr	d1, [r7, #128]	; 0x80
 8006f68:	ed87 2b1e 	vstr	d2, [r7, #120]	; 0x78
 8006f6c:	ed87 3b1c 	vstr	d3, [r7, #112]	; 0x70
 8006f70:	ed87 4b1a 	vstr	d4, [r7, #104]	; 0x68
 8006f74:	ed87 5b18 	vstr	d5, [r7, #96]	; 0x60
 8006f78:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 8006f7c:	6578      	str	r0, [r7, #84]	; 0x54

	jmin = -jmax;
 8006f7e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f82:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006f86:	4bae      	ldr	r3, [pc, #696]	; (8007240 <update_ScurveTraj+0x2e8>)
 8006f88:	e9c3 4500 	strd	r4, r5, [r3]
	amin = -amax;
 8006f8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f90:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8006f94:	4bab      	ldr	r3, [pc, #684]	; (8007244 <update_ScurveTraj+0x2ec>)
 8006f96:	e9c3 1200 	strd	r1, r2, [r3]
	vmin = -vmax;
 8006f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa6:	4ba8      	ldr	r3, [pc, #672]	; (8007248 <update_ScurveTraj+0x2f0>)
 8006fa8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8006fac:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8006fb0:	49a6      	ldr	r1, [pc, #664]	; (800724c <update_ScurveTraj+0x2f4>)
 8006fb2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006fb6:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8006fba:	49a5      	ldr	r1, [pc, #660]	; (8007250 <update_ScurveTraj+0x2f8>)
 8006fbc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006fc0:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8006fc4:	4ba2      	ldr	r3, [pc, #648]	; (8007250 <update_ScurveTraj+0x2f8>)
 8006fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fca:	4ba0      	ldr	r3, [pc, #640]	; (800724c <update_ScurveTraj+0x2f4>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f7f9 fd8c 	bl	8000aec <__aeabi_dcmplt>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d061      	beq.n	800709e <update_ScurveTraj+0x146>

		flagInv = true;
 8006fda:	4a9e      	ldr	r2, [pc, #632]	; (8007254 <update_ScurveTraj+0x2fc>)
 8006fdc:	2301      	movs	r3, #1
 8006fde:	7013      	strb	r3, [r2, #0]

		qi = -qi;
 8006fe0:	4b9a      	ldr	r3, [pc, #616]	; (800724c <update_ScurveTraj+0x2f4>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	4690      	mov	r8, r2
 8006fe8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006fec:	4b97      	ldr	r3, [pc, #604]	; (800724c <update_ScurveTraj+0x2f4>)
 8006fee:	e9c3 8900 	strd	r8, r9, [r3]
		qf = -qf;
 8006ff2:	4b97      	ldr	r3, [pc, #604]	; (8007250 <update_ScurveTraj+0x2f8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	4692      	mov	sl, r2
 8006ffa:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8006ffe:	4b94      	ldr	r3, [pc, #592]	; (8007250 <update_ScurveTraj+0x2f8>)
 8007000:	e9c3 ab00 	strd	sl, fp, [r3]
		vi = -vi;
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	60bb      	str	r3, [r7, #8]
 8007008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800700a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	ed97 7b02 	vldr	d7, [r7, #8]
 8007014:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
		vf = -vf;
 8007018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800701e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007022:	607b      	str	r3, [r7, #4]
 8007024:	ed97 7b00 	vldr	d7, [r7]
 8007028:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70

		vmax = -vmin;
 800702c:	4b86      	ldr	r3, [pc, #536]	; (8007248 <update_ScurveTraj+0x2f0>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	4611      	mov	r1, r2
 8007034:	66b9      	str	r1, [r7, #104]	; 0x68
 8007036:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800703a:	66fb      	str	r3, [r7, #108]	; 0x6c
		vmin = -vmax;
 800703c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007046:	647b      	str	r3, [r7, #68]	; 0x44
 8007048:	4b7f      	ldr	r3, [pc, #508]	; (8007248 <update_ScurveTraj+0x2f0>)
 800704a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800704e:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8007052:	4b7c      	ldr	r3, [pc, #496]	; (8007244 <update_ScurveTraj+0x2ec>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	4611      	mov	r1, r2
 800705a:	6639      	str	r1, [r7, #96]	; 0x60
 800705c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007060:	667b      	str	r3, [r7, #100]	; 0x64
		amin = -amax;
 8007062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
 8007066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007068:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706e:	4b75      	ldr	r3, [pc, #468]	; (8007244 <update_ScurveTraj+0x2ec>)
 8007070:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8007074:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8007078:	4b71      	ldr	r3, [pc, #452]	; (8007240 <update_ScurveTraj+0x2e8>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	4611      	mov	r1, r2
 8007080:	65b9      	str	r1, [r7, #88]	; 0x58
 8007082:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007086:	65fb      	str	r3, [r7, #92]	; 0x5c
		jmin = -jmax;
 8007088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
 800708c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800708e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
 8007094:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <update_ScurveTraj+0x2e8>)
 8007096:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800709a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800709e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80070a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80070a6:	f7f9 f8f7 	bl	8000298 <__aeabi_dsub>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80070b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070be:	f7f9 fbcd 	bl	800085c <__aeabi_ddiv>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	ec43 2b17 	vmov	d7, r2, r3
 80070ca:	eeb0 0a47 	vmov.f32	s0, s14
 80070ce:	eef0 0a67 	vmov.f32	s1, s15
 80070d2:	f008 fa35 	bl	800f540 <sqrt>
 80070d6:	ec55 4b10 	vmov	r4, r5, d0
 80070da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80070e2:	f7f9 fbbb 	bl	800085c <__aeabi_ddiv>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 fcfd 	bl	8000aec <__aeabi_dcmplt>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01e      	beq.n	8007136 <update_ScurveTraj+0x1de>
 80070f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80070fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007100:	f7f9 f8ca 	bl	8000298 <__aeabi_dsub>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	623a      	str	r2, [r7, #32]
 800710a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007114:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007118:	f7f9 fba0 	bl	800085c <__aeabi_ddiv>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	ec43 2b17 	vmov	d7, r2, r3
 8007124:	eeb0 0a47 	vmov.f32	s0, s14
 8007128:	eef0 0a67 	vmov.f32	s1, s15
 800712c:	f008 fa08 	bl	800f540 <sqrt>
 8007130:	ec53 2b10 	vmov	r2, r3, d0
 8007134:	e007      	b.n	8007146 <update_ScurveTraj+0x1ee>
 8007136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800713a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800713e:	f7f9 fb8d 	bl	800085c <__aeabi_ddiv>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 fd2d 	bl	8000ba8 <__aeabi_d2f>
 800714e:	4603      	mov	r3, r0
 8007150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


	if (Tjaux<amax/jmax){
 8007154:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007158:	4618      	mov	r0, r3
 800715a:	f7f9 f9fd 	bl	8000558 <__aeabi_f2d>
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007166:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800716a:	f7f9 fb77 	bl	800085c <__aeabi_ddiv>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 fcb9 	bl	8000aec <__aeabi_dcmplt>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <update_ScurveTraj+0x23e>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8007180:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007184:	4618      	mov	r0, r3
 8007186:	f7f9 f9e7 	bl	8000558 <__aeabi_f2d>
 800718a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800718e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007192:	f7f9 fb63 	bl	800085c <__aeabi_ddiv>
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8007196:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800719a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800719e:	f7f9 f87b 	bl	8000298 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4610      	mov	r0, r2
 80071a8:	4619      	mov	r1, r3
 80071aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071ae:	f7f9 fa2b 	bl	8000608 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4614      	mov	r4, r2
 80071b8:	461d      	mov	r5, r3
 80071ba:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007238 <update_ScurveTraj+0x2e0>
 80071be:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80071c2:	f008 f94d 	bl	800f460 <pow>
 80071c6:	ec53 2b10 	vmov	r2, r3, d0
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	f7f9 fc8d 	bl	8000aec <__aeabi_dcmplt>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d043      	beq.n	8007260 <update_ScurveTraj+0x308>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 80071d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80071dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071e0:	f7f9 f85a 	bl	8000298 <__aeabi_dsub>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	61ba      	str	r2, [r7, #24]
 80071ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071f8:	f7f9 fb30 	bl	800085c <__aeabi_ddiv>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	ec43 2b17 	vmov	d7, r2, r3
 8007204:	eeb0 0a47 	vmov.f32	s0, s14
 8007208:	eef0 0a67 	vmov.f32	s1, s15
 800720c:	f008 f998 	bl	800f540 <sqrt>
 8007210:	eeb0 7a40 	vmov.f32	s14, s0
 8007214:	eef0 7a60 	vmov.f32	s15, s1
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <update_ScurveTraj+0x300>)
 800721a:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <update_ScurveTraj+0x300>)
 8007220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	f7f9 f838 	bl	800029c <__adddf3>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	490a      	ldr	r1, [pc, #40]	; (800725c <update_ScurveTraj+0x304>)
 8007232:	e9c1 2300 	strd	r2, r3, [r1]
 8007236:	e03a      	b.n	80072ae <update_ScurveTraj+0x356>
 8007238:	00000000 	.word	0x00000000
 800723c:	40000000 	.word	0x40000000
 8007240:	20000700 	.word	0x20000700
 8007244:	20000718 	.word	0x20000718
 8007248:	20000708 	.word	0x20000708
 800724c:	200008c0 	.word	0x200008c0
 8007250:	200008c8 	.word	0x200008c8
 8007254:	20000860 	.word	0x20000860
 8007258:	200008a0 	.word	0x200008a0
 800725c:	20000888 	.word	0x20000888
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8007260:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007264:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007268:	f7f9 faf8 	bl	800085c <__aeabi_ddiv>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4939      	ldr	r1, [pc, #228]	; (8007358 <update_ScurveTraj+0x400>)
 8007272:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=Tj1+(vmax-vi)/amax;
 8007276:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800727a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800727e:	f7f9 f80b 	bl	8000298 <__aeabi_dsub>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800728e:	f7f9 fae5 	bl	800085c <__aeabi_ddiv>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4610      	mov	r0, r2
 8007298:	4619      	mov	r1, r3
 800729a:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <update_ScurveTraj+0x400>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f8 fffc 	bl	800029c <__adddf3>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	492c      	ldr	r1, [pc, #176]	; (800735c <update_ScurveTraj+0x404>)
 80072aa:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 80072ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80072b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072b6:	f7f8 ffef 	bl	8000298 <__aeabi_dsub>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072c6:	f7f9 f99f 	bl	8000608 <__aeabi_dmul>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4614      	mov	r4, r2
 80072d0:	461d      	mov	r5, r3
 80072d2:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007350 <update_ScurveTraj+0x3f8>
 80072d6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80072da:	f008 f8c1 	bl	800f460 <pow>
 80072de:	ec53 2b10 	vmov	r2, r3, d0
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f9 fc01 	bl	8000aec <__aeabi_dcmplt>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d03b      	beq.n	8007368 <update_ScurveTraj+0x410>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80072f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80072f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072f8:	f7f8 ffce 	bl	8000298 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	613a      	str	r2, [r7, #16]
 8007302:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800730c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007310:	f7f9 faa4 	bl	800085c <__aeabi_ddiv>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	ec43 2b17 	vmov	d7, r2, r3
 800731c:	eeb0 0a47 	vmov.f32	s0, s14
 8007320:	eef0 0a67 	vmov.f32	s1, s15
 8007324:	f008 f90c 	bl	800f540 <sqrt>
 8007328:	eeb0 7a40 	vmov.f32	s14, s0
 800732c:	eef0 7a60 	vmov.f32	s15, s1
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <update_ScurveTraj+0x408>)
 8007332:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 8007336:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <update_ScurveTraj+0x408>)
 8007338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	f7f8 ffac 	bl	800029c <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4906      	ldr	r1, [pc, #24]	; (8007364 <update_ScurveTraj+0x40c>)
 800734a:	e9c1 2300 	strd	r2, r3, [r1]
 800734e:	e032      	b.n	80073b6 <update_ScurveTraj+0x45e>
 8007350:	00000000 	.word	0x00000000
 8007354:	40000000 	.word	0x40000000
 8007358:	200008a0 	.word	0x200008a0
 800735c:	20000888 	.word	0x20000888
 8007360:	200008a8 	.word	0x200008a8
 8007364:	20000890 	.word	0x20000890
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8007368:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800736c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007370:	f7f9 fa74 	bl	800085c <__aeabi_ddiv>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	49cb      	ldr	r1, [pc, #812]	; (80076a8 <update_ScurveTraj+0x750>)
 800737a:	e9c1 2300 	strd	r2, r3, [r1]
		Td=Tj2+(vmax-vf)/amax;
 800737e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007386:	f7f8 ff87 	bl	8000298 <__aeabi_dsub>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4610      	mov	r0, r2
 8007390:	4619      	mov	r1, r3
 8007392:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007396:	f7f9 fa61 	bl	800085c <__aeabi_ddiv>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4bc1      	ldr	r3, [pc, #772]	; (80076a8 <update_ScurveTraj+0x750>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff78 	bl	800029c <__adddf3>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	49be      	ldr	r1, [pc, #760]	; (80076ac <update_ScurveTraj+0x754>)
 80073b2:	e9c1 2300 	strd	r2, r3, [r1]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 80073b6:	4bbe      	ldr	r3, [pc, #760]	; (80076b0 <update_ScurveTraj+0x758>)
 80073b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073bc:	4bbd      	ldr	r3, [pc, #756]	; (80076b4 <update_ScurveTraj+0x75c>)
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f8 ff69 	bl	8000298 <__aeabi_dsub>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4610      	mov	r0, r2
 80073cc:	4619      	mov	r1, r3
 80073ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80073d2:	f7f9 fa43 	bl	800085c <__aeabi_ddiv>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4614      	mov	r4, r2
 80073dc:	461d      	mov	r5, r3
 80073de:	4bb6      	ldr	r3, [pc, #728]	; (80076b8 <update_ScurveTraj+0x760>)
 80073e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073ec:	f7f9 fa36 	bl	800085c <__aeabi_ddiv>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4690      	mov	r8, r2
 80073f6:	4699      	mov	r9, r3
 80073f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80073fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007400:	f7f9 fa2c 	bl	800085c <__aeabi_ddiv>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	4baa      	ldr	r3, [pc, #680]	; (80076bc <update_ScurveTraj+0x764>)
 8007412:	f7f8 ff43 	bl	800029c <__adddf3>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f8f3 	bl	8000608 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f8 ff35 	bl	8000298 <__aeabi_dsub>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4614      	mov	r4, r2
 8007434:	461d      	mov	r5, r3
 8007436:	4b9d      	ldr	r3, [pc, #628]	; (80076ac <update_ScurveTraj+0x754>)
 8007438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007444:	f7f9 fa0a 	bl	800085c <__aeabi_ddiv>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4690      	mov	r8, r2
 800744e:	4699      	mov	r9, r3
 8007450:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007454:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007458:	f7f9 fa00 	bl	800085c <__aeabi_ddiv>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4610      	mov	r0, r2
 8007462:	4619      	mov	r1, r3
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	4b94      	ldr	r3, [pc, #592]	; (80076bc <update_ScurveTraj+0x764>)
 800746a:	f7f8 ff17 	bl	800029c <__adddf3>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4640      	mov	r0, r8
 8007474:	4649      	mov	r1, r9
 8007476:	f7f9 f8c7 	bl	8000608 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f8 ff09 	bl	8000298 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	498d      	ldr	r1, [pc, #564]	; (80076c0 <update_ScurveTraj+0x768>)
 800748c:	e9c1 2300 	strd	r2, r3, [r1]

	if (Tv>0){
 8007490:	4b8b      	ldr	r3, [pc, #556]	; (80076c0 <update_ScurveTraj+0x768>)
 8007492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007496:	f04f 0200 	mov.w	r2, #0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	f7f9 fb43 	bl	8000b28 <__aeabi_dcmpgt>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f040 849f 	bne.w	8007de8 <update_ScurveTraj+0xe90>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 80074aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074b2:	f7f9 f9d3 	bl	800085c <__aeabi_ddiv>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4982      	ldr	r1, [pc, #520]	; (80076c4 <update_ScurveTraj+0x76c>)
 80074bc:	e9c1 2300 	strd	r2, r3, [r1]
		Tj2=Tj1;
 80074c0:	4b80      	ldr	r3, [pc, #512]	; (80076c4 <update_ScurveTraj+0x76c>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	4978      	ldr	r1, [pc, #480]	; (80076a8 <update_ScurveTraj+0x750>)
 80074c8:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 80074cc:	4b7d      	ldr	r3, [pc, #500]	; (80076c4 <update_ScurveTraj+0x76c>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	497d      	ldr	r1, [pc, #500]	; (80076c8 <update_ScurveTraj+0x770>)
 80074d4:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80074d8:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8007698 <update_ScurveTraj+0x740>
 80074dc:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80074e0:	f007 ffbe 	bl	800f460 <pow>
 80074e4:	ec55 4b10 	vmov	r4, r5, d0
 80074e8:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80076a0 <update_ScurveTraj+0x748>
 80074ec:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80074f0:	f007 ffb6 	bl	800f460 <pow>
 80074f4:	ec53 2b10 	vmov	r2, r3, d0
 80074f8:	4620      	mov	r0, r4
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7f9 f9ae 	bl	800085c <__aeabi_ddiv>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4614      	mov	r4, r2
 8007506:	461d      	mov	r5, r3
 8007508:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80076a0 <update_ScurveTraj+0x748>
 800750c:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 8007510:	f007 ffa6 	bl	800f460 <pow>
 8007514:	ec59 8b10 	vmov	r8, r9, d0
 8007518:	ed9f 1b61 	vldr	d1, [pc, #388]	; 80076a0 <update_ScurveTraj+0x748>
 800751c:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8007520:	f007 ff9e 	bl	800f460 <pow>
 8007524:	ec53 2b10 	vmov	r2, r3, d0
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f8 feb6 	bl	800029c <__adddf3>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	f7f8 feae 	bl	800029c <__adddf3>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4620      	mov	r0, r4
 8007546:	4629      	mov	r1, r5
 8007548:	f7f8 fea8 	bl	800029c <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4614      	mov	r4, r2
 8007552:	461d      	mov	r5, r3
 8007554:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <update_ScurveTraj+0x758>)
 8007556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800755a:	4b56      	ldr	r3, [pc, #344]	; (80076b4 <update_ScurveTraj+0x75c>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fe9a 	bl	8000298 <__aeabi_dsub>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	4b56      	ldr	r3, [pc, #344]	; (80076cc <update_ScurveTraj+0x774>)
 8007572:	f7f9 f849 	bl	8000608 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4690      	mov	r8, r2
 800757c:	4699      	mov	r9, r3
 800757e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007582:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007586:	f7f9 f969 	bl	800085c <__aeabi_ddiv>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4610      	mov	r0, r2
 8007590:	4619      	mov	r1, r3
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	f7f8 fe81 	bl	800029c <__adddf3>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4692      	mov	sl, r2
 80075a0:	469b      	mov	fp, r3
 80075a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80075a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80075aa:	f7f8 fe77 	bl	800029c <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4650      	mov	r0, sl
 80075b4:	4659      	mov	r1, fp
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4640      	mov	r0, r8
 80075c0:	4649      	mov	r1, r9
 80075c2:	f7f8 fe69 	bl	8000298 <__aeabi_dsub>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075d2:	f7f9 f819 	bl	8000608 <__aeabi_dmul>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f8 fe5d 	bl	800029c <__adddf3>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	493a      	ldr	r1, [pc, #232]	; (80076d0 <update_ScurveTraj+0x778>)
 80075e8:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80075ec:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80076a0 <update_ScurveTraj+0x748>
 80075f0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80075f4:	f007 ff34 	bl	800f460 <pow>
 80075f8:	ec51 0b10 	vmov	r0, r1, d0
 80075fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007600:	f7f9 f92c 	bl	800085c <__aeabi_ddiv>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4614      	mov	r4, r2
 800760a:	461d      	mov	r5, r3
 800760c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	f7f8 fe42 	bl	800029c <__adddf3>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4614      	mov	r4, r2
 800762a:	461d      	mov	r5, r3
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <update_ScurveTraj+0x778>)
 800762e:	ed93 7b00 	vldr	d7, [r3]
 8007632:	eeb0 0a47 	vmov.f32	s0, s14
 8007636:	eef0 0a67 	vmov.f32	s1, s15
 800763a:	f007 ff81 	bl	800f540 <sqrt>
 800763e:	ec53 2b10 	vmov	r2, r3, d0
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f8 fe29 	bl	800029c <__adddf3>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4614      	mov	r4, r2
 8007650:	461d      	mov	r5, r3
 8007652:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	f7f8 fe1f 	bl	800029c <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f7f9 f8f9 	bl	800085c <__aeabi_ddiv>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4912      	ldr	r1, [pc, #72]	; (80076b8 <update_ScurveTraj+0x760>)
 8007670:	e9c1 2300 	strd	r2, r3, [r1]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007674:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80076a0 <update_ScurveTraj+0x748>
 8007678:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800767c:	f007 fef0 	bl	800f460 <pow>
 8007680:	ec51 0b10 	vmov	r0, r1, d0
 8007684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007688:	f7f9 f8e8 	bl	800085c <__aeabi_ddiv>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	e01e      	b.n	80076d4 <update_ScurveTraj+0x77c>
 8007696:	bf00      	nop
 8007698:	00000000 	.word	0x00000000
 800769c:	40100000 	.word	0x40100000
 80076a0:	00000000 	.word	0x00000000
 80076a4:	40000000 	.word	0x40000000
 80076a8:	200008a8 	.word	0x200008a8
 80076ac:	20000890 	.word	0x20000890
 80076b0:	200008c8 	.word	0x200008c8
 80076b4:	200008c0 	.word	0x200008c0
 80076b8:	20000888 	.word	0x20000888
 80076bc:	3ff00000 	.word	0x3ff00000
 80076c0:	20000898 	.word	0x20000898
 80076c4:	200008a0 	.word	0x200008a0
 80076c8:	200008b0 	.word	0x200008b0
 80076cc:	40100000 	.word	0x40100000
 80076d0:	200008b8 	.word	0x200008b8
 80076d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	f7f8 fdde 	bl	800029c <__adddf3>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4620      	mov	r0, r4
 80076e6:	4629      	mov	r1, r5
 80076e8:	f7f8 fdd6 	bl	8000298 <__aeabi_dsub>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	4b29      	ldr	r3, [pc, #164]	; (800779c <update_ScurveTraj+0x844>)
 80076f6:	ed93 7b00 	vldr	d7, [r3]
 80076fa:	eeb0 0a47 	vmov.f32	s0, s14
 80076fe:	eef0 0a67 	vmov.f32	s1, s15
 8007702:	f007 ff1d 	bl	800f540 <sqrt>
 8007706:	ec53 2b10 	vmov	r2, r3, d0
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	f7f8 fdc5 	bl	800029c <__adddf3>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4614      	mov	r4, r2
 8007718:	461d      	mov	r5, r3
 800771a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	f7f8 fdbb 	bl	800029c <__adddf3>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f9 f895 	bl	800085c <__aeabi_ddiv>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	491a      	ldr	r1, [pc, #104]	; (80077a0 <update_ScurveTraj+0x848>)
 8007738:	e9c1 2300 	strd	r2, r3, [r1]
		Tv=0;
 800773c:	4919      	ldr	r1, [pc, #100]	; (80077a4 <update_ScurveTraj+0x84c>)
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 800774a:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <update_ScurveTraj+0x850>)
 800774c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	f7f8 fda2 	bl	800029c <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	4b12      	ldr	r3, [pc, #72]	; (80077ac <update_ScurveTraj+0x854>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f9 f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8301 	bne.w	8007d74 <update_ScurveTraj+0xe1c>
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <update_ScurveTraj+0x850>)
 8007774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	f7f8 fd8e 	bl	800029c <__adddf3>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4610      	mov	r0, r2
 8007786:	4619      	mov	r1, r3
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <update_ScurveTraj+0x848>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f9 f9cb 	bl	8000b28 <__aeabi_dcmpgt>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8327 	beq.w	8007de8 <update_ScurveTraj+0xe90>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 800779a:	e2eb      	b.n	8007d74 <update_ScurveTraj+0xe1c>
 800779c:	200008b8 	.word	0x200008b8
 80077a0:	20000890 	.word	0x20000890
 80077a4:	20000898 	.word	0x20000898
 80077a8:	200008b0 	.word	0x200008b0
 80077ac:	20000888 	.word	0x20000888

				amax=amax*0.99;
 80077b0:	a3e3      	add	r3, pc, #908	; (adr r3, 8007b40 <update_ScurveTraj+0xbe8>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077ba:	f7f8 ff25 	bl	8000608 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				Tj=amax/jmax;
 80077c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077ce:	f7f9 f845 	bl	800085c <__aeabi_ddiv>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	49d2      	ldr	r1, [pc, #840]	; (8007b20 <update_ScurveTraj+0xbc8>)
 80077d8:	e9c1 2300 	strd	r2, r3, [r1]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80077dc:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 8007b10 <update_ScurveTraj+0xbb8>
 80077e0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80077e4:	f007 fe3c 	bl	800f460 <pow>
 80077e8:	ec55 4b10 	vmov	r4, r5, d0
 80077ec:	ed9f 1bca 	vldr	d1, [pc, #808]	; 8007b18 <update_ScurveTraj+0xbc0>
 80077f0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80077f4:	f007 fe34 	bl	800f460 <pow>
 80077f8:	ec53 2b10 	vmov	r2, r3, d0
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f9 f82c 	bl	800085c <__aeabi_ddiv>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4614      	mov	r4, r2
 800780a:	461d      	mov	r5, r3
 800780c:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8007b18 <update_ScurveTraj+0xbc0>
 8007810:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 8007814:	f007 fe24 	bl	800f460 <pow>
 8007818:	ec59 8b10 	vmov	r8, r9, d0
 800781c:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8007b18 <update_ScurveTraj+0xbc0>
 8007820:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8007824:	f007 fe1c 	bl	800f460 <pow>
 8007828:	ec53 2b10 	vmov	r2, r3, d0
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f8 fd34 	bl	800029c <__adddf3>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4610      	mov	r0, r2
 800783a:	4619      	mov	r1, r3
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	f7f8 fd2c 	bl	800029c <__adddf3>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	f7f8 fd26 	bl	800029c <__adddf3>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4614      	mov	r4, r2
 8007856:	461d      	mov	r5, r3
 8007858:	4bb2      	ldr	r3, [pc, #712]	; (8007b24 <update_ScurveTraj+0xbcc>)
 800785a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800785e:	4bb2      	ldr	r3, [pc, #712]	; (8007b28 <update_ScurveTraj+0xbd0>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fd18 	bl	8000298 <__aeabi_dsub>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4610      	mov	r0, r2
 800786e:	4619      	mov	r1, r3
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	4bad      	ldr	r3, [pc, #692]	; (8007b2c <update_ScurveTraj+0xbd4>)
 8007876:	f7f8 fec7 	bl	8000608 <__aeabi_dmul>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4690      	mov	r8, r2
 8007880:	4699      	mov	r9, r3
 8007882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007886:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800788a:	f7f8 ffe7 	bl	800085c <__aeabi_ddiv>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	f7f8 fcff 	bl	800029c <__adddf3>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4692      	mov	sl, r2
 80078a4:	469b      	mov	fp, r3
 80078a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80078aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80078ae:	f7f8 fcf5 	bl	800029c <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4650      	mov	r0, sl
 80078b8:	4659      	mov	r1, fp
 80078ba:	f7f8 fea5 	bl	8000608 <__aeabi_dmul>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fce7 	bl	8000298 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4610      	mov	r0, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80078d6:	f7f8 fe97 	bl	8000608 <__aeabi_dmul>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f8 fcdb 	bl	800029c <__adddf3>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4991      	ldr	r1, [pc, #580]	; (8007b30 <update_ScurveTraj+0xbd8>)
 80078ec:	e9c1 2300 	strd	r2, r3, [r1]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80078f0:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8007b18 <update_ScurveTraj+0xbc0>
 80078f4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80078f8:	f007 fdb2 	bl	800f460 <pow>
 80078fc:	ec51 0b10 	vmov	r0, r1, d0
 8007900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007904:	f7f8 ffaa 	bl	800085c <__aeabi_ddiv>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4614      	mov	r4, r2
 800790e:	461d      	mov	r5, r3
 8007910:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	f7f8 fcc0 	bl	800029c <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fcb8 	bl	8000298 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4614      	mov	r4, r2
 800792e:	461d      	mov	r5, r3
 8007930:	4b7f      	ldr	r3, [pc, #508]	; (8007b30 <update_ScurveTraj+0xbd8>)
 8007932:	ed93 7b00 	vldr	d7, [r3]
 8007936:	eeb0 0a47 	vmov.f32	s0, s14
 800793a:	eef0 0a67 	vmov.f32	s1, s15
 800793e:	f007 fdff 	bl	800f540 <sqrt>
 8007942:	ec53 2b10 	vmov	r2, r3, d0
 8007946:	4620      	mov	r0, r4
 8007948:	4629      	mov	r1, r5
 800794a:	f7f8 fca7 	bl	800029c <__adddf3>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4614      	mov	r4, r2
 8007954:	461d      	mov	r5, r3
 8007956:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	f7f8 fc9d 	bl	800029c <__adddf3>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 ff77 	bl	800085c <__aeabi_ddiv>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4970      	ldr	r1, [pc, #448]	; (8007b34 <update_ScurveTraj+0xbdc>)
 8007974:	e9c1 2300 	strd	r2, r3, [r1]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007978:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007b18 <update_ScurveTraj+0xbc0>
 800797c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8007980:	f007 fd6e 	bl	800f460 <pow>
 8007984:	ec51 0b10 	vmov	r0, r1, d0
 8007988:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800798c:	f7f8 ff66 	bl	800085c <__aeabi_ddiv>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4614      	mov	r4, r2
 8007996:	461d      	mov	r5, r3
 8007998:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	f7f8 fc7c 	bl	800029c <__adddf3>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4620      	mov	r0, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	f7f8 fc74 	bl	8000298 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	461d      	mov	r5, r3
 80079b8:	4b5d      	ldr	r3, [pc, #372]	; (8007b30 <update_ScurveTraj+0xbd8>)
 80079ba:	ed93 7b00 	vldr	d7, [r3]
 80079be:	eeb0 0a47 	vmov.f32	s0, s14
 80079c2:	eef0 0a67 	vmov.f32	s1, s15
 80079c6:	f007 fdbb 	bl	800f540 <sqrt>
 80079ca:	ec53 2b10 	vmov	r2, r3, d0
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 fc63 	bl	800029c <__adddf3>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4614      	mov	r4, r2
 80079dc:	461d      	mov	r5, r3
 80079de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	f7f8 fc59 	bl	800029c <__adddf3>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 ff33 	bl	800085c <__aeabi_ddiv>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	494f      	ldr	r1, [pc, #316]	; (8007b38 <update_ScurveTraj+0xbe0>)
 80079fc:	e9c1 2300 	strd	r2, r3, [r1]

				//print(f'{i}',amax)


				if (Ta<0){
 8007a00:	4b4c      	ldr	r3, [pc, #304]	; (8007b34 <update_ScurveTraj+0xbdc>)
 8007a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	f7f9 f86d 	bl	8000aec <__aeabi_dcmplt>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80df 	beq.w	8007bd8 <update_ScurveTraj+0xc80>
					Ta=0;
 8007a1a:	4946      	ldr	r1, [pc, #280]	; (8007b34 <update_ScurveTraj+0xbdc>)
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8007a28:	4944      	ldr	r1, [pc, #272]	; (8007b3c <update_ScurveTraj+0xbe4>)
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8007a36:	4b3b      	ldr	r3, [pc, #236]	; (8007b24 <update_ScurveTraj+0xbcc>)
 8007a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a3c:	4b3a      	ldr	r3, [pc, #232]	; (8007b28 <update_ScurveTraj+0xbd0>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc29 	bl	8000298 <__aeabi_dsub>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	461d      	mov	r5, r3
 8007a4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007a52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007a56:	f7f8 fc21 	bl	800029c <__adddf3>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fefb 	bl	800085c <__aeabi_ddiv>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	f7f8 fc13 	bl	800029c <__adddf3>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	492f      	ldr	r1, [pc, #188]	; (8007b38 <update_ScurveTraj+0xbe0>)
 8007a7c:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <update_ScurveTraj+0xbcc>)
 8007a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a86:	4b28      	ldr	r3, [pc, #160]	; (8007b28 <update_ScurveTraj+0xbd0>)
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f7f8 fc04 	bl	8000298 <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4610      	mov	r0, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a9c:	f7f8 fdb4 	bl	8000608 <__aeabi_dmul>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <update_ScurveTraj+0xbcc>)
 8007aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007aae:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <update_ScurveTraj+0xbd0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fbf0 	bl	8000298 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	ec43 2b17 	vmov	d7, r2, r3
 8007ac0:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8007b18 <update_ScurveTraj+0xbc0>
 8007ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8007ac8:	eef0 0a67 	vmov.f32	s1, s15
 8007acc:	f007 fcc8 	bl	800f460 <pow>
 8007ad0:	ec51 0b10 	vmov	r0, r1, d0
 8007ad4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ad8:	f7f8 fd96 	bl	8000608 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4690      	mov	r8, r2
 8007ae2:	4699      	mov	r9, r3
 8007ae4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007ae8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007aec:	f7f8 fbd6 	bl	800029c <__adddf3>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	ec43 2b17 	vmov	d7, r2, r3
 8007af8:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8007b18 <update_ScurveTraj+0xbc0>
 8007afc:	eeb0 0a47 	vmov.f32	s0, s14
 8007b00:	eef0 0a67 	vmov.f32	s1, s15
 8007b04:	f007 fcac 	bl	800f460 <pow>
 8007b08:	ec5b ab10 	vmov	sl, fp, d0
 8007b0c:	e01c      	b.n	8007b48 <update_ScurveTraj+0xbf0>
 8007b0e:	bf00      	nop
 8007b10:	00000000 	.word	0x00000000
 8007b14:	40100000 	.word	0x40100000
 8007b18:	00000000 	.word	0x00000000
 8007b1c:	40000000 	.word	0x40000000
 8007b20:	200008b0 	.word	0x200008b0
 8007b24:	200008c8 	.word	0x200008c8
 8007b28:	200008c0 	.word	0x200008c0
 8007b2c:	40100000 	.word	0x40100000
 8007b30:	200008b8 	.word	0x200008b8
 8007b34:	20000888 	.word	0x20000888
 8007b38:	20000890 	.word	0x20000890
 8007b3c:	200008a0 	.word	0x200008a0
 8007b40:	7ae147ae 	.word	0x7ae147ae
 8007b44:	3fefae14 	.word	0x3fefae14
 8007b48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007b4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007b50:	f7f8 fba2 	bl	8000298 <__aeabi_dsub>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4650      	mov	r0, sl
 8007b5a:	4659      	mov	r1, fp
 8007b5c:	f7f8 fd54 	bl	8000608 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fb98 	bl	800029c <__adddf3>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4610      	mov	r0, r2
 8007b72:	4619      	mov	r1, r3
 8007b74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b78:	f7f8 fd46 	bl	8000608 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	ec43 2b17 	vmov	d7, r2, r3
 8007b84:	eeb0 0a47 	vmov.f32	s0, s14
 8007b88:	eef0 0a67 	vmov.f32	s1, s15
 8007b8c:	f007 fcd8 	bl	800f540 <sqrt>
 8007b90:	ec53 2b10 	vmov	r2, r3, d0
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 fb7e 	bl	8000298 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007ba8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007bac:	f7f8 fb76 	bl	800029c <__adddf3>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bbc:	f7f8 fd24 	bl	8000608 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fe48 	bl	800085c <__aeabi_ddiv>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	49a5      	ldr	r1, [pc, #660]	; (8007e68 <update_ScurveTraj+0xf10>)
 8007bd2:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007bd6:	e107      	b.n	8007de8 <update_ScurveTraj+0xe90>
				}
				if (Td<0){
 8007bd8:	4ba4      	ldr	r3, [pc, #656]	; (8007e6c <update_ScurveTraj+0xf14>)
 8007bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	f7f8 ff81 	bl	8000aec <__aeabi_dcmplt>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d100      	bne.n	8007bf2 <update_ScurveTraj+0xc9a>
 8007bf0:	e0c0      	b.n	8007d74 <update_ScurveTraj+0xe1c>
					Td=0;
 8007bf2:	499e      	ldr	r1, [pc, #632]	; (8007e6c <update_ScurveTraj+0xf14>)
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8007c00:	4b9b      	ldr	r3, [pc, #620]	; (8007e70 <update_ScurveTraj+0xf18>)
 8007c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c06:	4b9b      	ldr	r3, [pc, #620]	; (8007e74 <update_ScurveTraj+0xf1c>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fb44 	bl	8000298 <__aeabi_dsub>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	461d      	mov	r5, r3
 8007c18:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007c1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007c20:	f7f8 fb3c 	bl	800029c <__adddf3>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 fe16 	bl	800085c <__aeabi_ddiv>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4610      	mov	r0, r2
 8007c36:	4619      	mov	r1, r3
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	f7f8 fb2e 	bl	800029c <__adddf3>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	498c      	ldr	r1, [pc, #560]	; (8007e78 <update_ScurveTraj+0xf20>)
 8007c46:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007c4a:	4b89      	ldr	r3, [pc, #548]	; (8007e70 <update_ScurveTraj+0xf18>)
 8007c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c50:	4b88      	ldr	r3, [pc, #544]	; (8007e74 <update_ScurveTraj+0xf1c>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c66:	f7f8 fccf 	bl	8000608 <__aeabi_dmul>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461d      	mov	r5, r3
 8007c72:	4b7f      	ldr	r3, [pc, #508]	; (8007e70 <update_ScurveTraj+0xf18>)
 8007c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c78:	4b7e      	ldr	r3, [pc, #504]	; (8007e74 <update_ScurveTraj+0xf1c>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb0b 	bl	8000298 <__aeabi_dsub>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	ec43 2b17 	vmov	d7, r2, r3
 8007c8a:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8007e60 <update_ScurveTraj+0xf08>
 8007c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007c92:	eef0 0a67 	vmov.f32	s1, s15
 8007c96:	f007 fbe3 	bl	800f460 <pow>
 8007c9a:	ec51 0b10 	vmov	r0, r1, d0
 8007c9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ca2:	f7f8 fcb1 	bl	8000608 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4690      	mov	r8, r2
 8007cac:	4699      	mov	r9, r3
 8007cae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007cb2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cb6:	f7f8 faf1 	bl	800029c <__adddf3>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	ec43 2b17 	vmov	d7, r2, r3
 8007cc2:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007e60 <update_ScurveTraj+0xf08>
 8007cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8007cca:	eef0 0a67 	vmov.f32	s1, s15
 8007cce:	f007 fbc7 	bl	800f460 <pow>
 8007cd2:	ec5b ab10 	vmov	sl, fp, d0
 8007cd6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007cda:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007cde:	f7f8 fadb 	bl	8000298 <__aeabi_dsub>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	4659      	mov	r1, fp
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 facf 	bl	8000298 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d06:	f7f8 fc7f 	bl	8000608 <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	ec43 2b17 	vmov	d7, r2, r3
 8007d12:	eeb0 0a47 	vmov.f32	s0, s14
 8007d16:	eef0 0a67 	vmov.f32	s1, s15
 8007d1a:	f007 fc11 	bl	800f540 <sqrt>
 8007d1e:	ec53 2b10 	vmov	r2, r3, d0
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fab7 	bl	8000298 <__aeabi_dsub>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4614      	mov	r4, r2
 8007d30:	461d      	mov	r5, r3
 8007d32:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007d36:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d3a:	f7f8 faaf 	bl	800029c <__adddf3>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d4a:	f7f8 fc5d 	bl	8000608 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fd81 	bl	800085c <__aeabi_ddiv>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4947      	ldr	r1, [pc, #284]	; (8007e7c <update_ScurveTraj+0xf24>)
 8007d60:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=0;
 8007d64:	4940      	ldr	r1, [pc, #256]	; (8007e68 <update_ScurveTraj+0xf10>)
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007d72:	e039      	b.n	8007de8 <update_ScurveTraj+0xe90>
			while (!(Ta>2*Tj && Td>2*Tj)){
 8007d74:	4b42      	ldr	r3, [pc, #264]	; (8007e80 <update_ScurveTraj+0xf28>)
 8007d76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	f7f8 fa8d 	bl	800029c <__adddf3>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <update_ScurveTraj+0xf20>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	2401      	movs	r4, #1
 8007d92:	f7f8 feab 	bl	8000aec <__aeabi_dcmplt>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <update_ScurveTraj+0xe48>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	461c      	mov	r4, r3
 8007da0:	b2e3      	uxtb	r3, r4
 8007da2:	f083 0301 	eor.w	r3, r3, #1
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f47f ad01 	bne.w	80077b0 <update_ScurveTraj+0x858>
 8007dae:	4b34      	ldr	r3, [pc, #208]	; (8007e80 <update_ScurveTraj+0xf28>)
 8007db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <update_ScurveTraj+0xf14>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	2401      	movs	r4, #1
 8007dcc:	f7f8 fe8e 	bl	8000aec <__aeabi_dcmplt>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <update_ScurveTraj+0xe82>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	461c      	mov	r4, r3
 8007dda:	b2e3      	uxtb	r3, r4
 8007ddc:	f083 0301 	eor.w	r3, r3, #1
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f47f ace4 	bne.w	80077b0 <update_ScurveTraj+0x858>
				}
			}
		}
	}

	*(params)=Tj1;
 8007de8:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <update_ScurveTraj+0xf24>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007df0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8007df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df6:	f103 0108 	add.w	r1, r3, #8
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <update_ScurveTraj+0xf10>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8007e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e06:	f103 0110 	add.w	r1, r3, #16
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <update_ScurveTraj+0xf28>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8007e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e16:	f103 0118 	add.w	r1, r3, #24
 8007e1a:	4b17      	ldr	r3, [pc, #92]	; (8007e78 <update_ScurveTraj+0xf20>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8007e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e26:	f103 0120 	add.w	r1, r3, #32
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <update_ScurveTraj+0xf14>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8007e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e36:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <update_ScurveTraj+0xf2c>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8007e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <update_ScurveTraj+0xf30>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	e9c1 2300 	strd	r2, r3, [r1]

}
 8007e54:	bf00      	nop
 8007e56:	3798      	adds	r7, #152	; 0x98
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e5e:	bf00      	nop
 8007e60:	00000000 	.word	0x00000000
 8007e64:	40000000 	.word	0x40000000
 8007e68:	200008a8 	.word	0x200008a8
 8007e6c:	20000890 	.word	0x20000890
 8007e70:	200008c8 	.word	0x200008c8
 8007e74:	200008c0 	.word	0x200008c0
 8007e78:	20000888 	.word	0x20000888
 8007e7c:	200008a0 	.word	0x200008a0
 8007e80:	200008b0 	.word	0x200008b0
 8007e84:	20000898 	.word	0x20000898
 8007e88:	20000880 	.word	0x20000880
 8007e8c:	00000000 	.word	0x00000000

08007e90 <setProfilTimer>:


void setProfilTimer(void){
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8007e94:	4bb8      	ldr	r3, [pc, #736]	; (8008178 <setProfilTimer+0x2e8>)
 8007e96:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007e9a:	a3b3      	add	r3, pc, #716	; (adr r3, 8008168 <setProfilTimer+0x2d8>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fbb2 	bl	8000608 <__aeabi_dmul>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	49b3      	ldr	r1, [pc, #716]	; (8008178 <setProfilTimer+0x2e8>)
 8007eaa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8007eae:	4bb3      	ldr	r3, [pc, #716]	; (800817c <setProfilTimer+0x2ec>)
 8007eb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007eb4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008168 <setProfilTimer+0x2d8>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fba5 	bl	8000608 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	49ae      	ldr	r1, [pc, #696]	; (800817c <setProfilTimer+0x2ec>)
 8007ec4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8007ec8:	4bad      	ldr	r3, [pc, #692]	; (8008180 <setProfilTimer+0x2f0>)
 8007eca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ece:	a3a6      	add	r3, pc, #664	; (adr r3, 8008168 <setProfilTimer+0x2d8>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 fb98 	bl	8000608 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	49a8      	ldr	r1, [pc, #672]	; (8008180 <setProfilTimer+0x2f0>)
 8007ede:	e9c1 2304 	strd	r2, r3, [r1, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8007ee2:	4ba8      	ldr	r3, [pc, #672]	; (8008184 <setProfilTimer+0x2f4>)
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7f8 fb14 	bl	8000514 <__aeabi_ui2d>
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	4ba5      	ldr	r3, [pc, #660]	; (8008188 <setProfilTimer+0x2f8>)
 8007ef2:	f7f8 f9d3 	bl	800029c <__adddf3>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	a19d      	add	r1, pc, #628	; (adr r1, 8008170 <setProfilTimer+0x2e0>)
 8007efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f00:	f7f8 fcac 	bl	800085c <__aeabi_ddiv>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <setProfilTimer+0x2e8>)
 8007f0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	4b9d      	ldr	r3, [pc, #628]	; (800818c <setProfilTimer+0x2fc>)
 8007f18:	f7f8 fb76 	bl	8000608 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	f04f 0000 	mov.w	r0, #0
 8007f24:	499a      	ldr	r1, [pc, #616]	; (8008190 <setProfilTimer+0x300>)
 8007f26:	f7f8 fc99 	bl	800085c <__aeabi_ddiv>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 fb69 	bl	8000608 <__aeabi_dmul>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	4b91      	ldr	r3, [pc, #580]	; (8008188 <setProfilTimer+0x2f8>)
 8007f44:	f7f8 f9a8 	bl	8000298 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f7f8 fe0a 	bl	8000b68 <__aeabi_d2uiz>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f8 fadc 	bl	8000514 <__aeabi_ui2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	498c      	ldr	r1, [pc, #560]	; (8008194 <setProfilTimer+0x304>)
 8007f62:	e9c1 2300 	strd	r2, r3, [r1]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8007f66:	4b87      	ldr	r3, [pc, #540]	; (8008184 <setProfilTimer+0x2f4>)
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f8 fad2 	bl	8000514 <__aeabi_ui2d>
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	4b84      	ldr	r3, [pc, #528]	; (8008188 <setProfilTimer+0x2f8>)
 8007f76:	f7f8 f991 	bl	800029c <__adddf3>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	a17c      	add	r1, pc, #496	; (adr r1, 8008170 <setProfilTimer+0x2e0>)
 8007f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f84:	f7f8 fc6a 	bl	800085c <__aeabi_ddiv>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	461d      	mov	r5, r3
 8007f90:	4b7a      	ldr	r3, [pc, #488]	; (800817c <setProfilTimer+0x2ec>)
 8007f92:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	4b7c      	ldr	r3, [pc, #496]	; (800818c <setProfilTimer+0x2fc>)
 8007f9c:	f7f8 fb34 	bl	8000608 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	4979      	ldr	r1, [pc, #484]	; (8008190 <setProfilTimer+0x300>)
 8007faa:	f7f8 fc57 	bl	800085c <__aeabi_ddiv>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7f8 fb27 	bl	8000608 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	4b70      	ldr	r3, [pc, #448]	; (8008188 <setProfilTimer+0x2f8>)
 8007fc8:	f7f8 f966 	bl	8000298 <__aeabi_dsub>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f7f8 fdc8 	bl	8000b68 <__aeabi_d2uiz>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 fa9a 	bl	8000514 <__aeabi_ui2d>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	496b      	ldr	r1, [pc, #428]	; (8008194 <setProfilTimer+0x304>)
 8007fe6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    period[2] = COUNTERPERIOD(motor3.rpm);
 8007fea:	4b66      	ldr	r3, [pc, #408]	; (8008184 <setProfilTimer+0x2f4>)
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f8 fa90 	bl	8000514 <__aeabi_ui2d>
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	4b63      	ldr	r3, [pc, #396]	; (8008188 <setProfilTimer+0x2f8>)
 8007ffa:	f7f8 f94f 	bl	800029c <__adddf3>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	a15b      	add	r1, pc, #364	; (adr r1, 8008170 <setProfilTimer+0x2e0>)
 8008004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008008:	f7f8 fc28 	bl	800085c <__aeabi_ddiv>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	4b5a      	ldr	r3, [pc, #360]	; (8008180 <setProfilTimer+0x2f0>)
 8008016:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	4b5b      	ldr	r3, [pc, #364]	; (800818c <setProfilTimer+0x2fc>)
 8008020:	f7f8 faf2 	bl	8000608 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	f04f 0000 	mov.w	r0, #0
 800802c:	4958      	ldr	r1, [pc, #352]	; (8008190 <setProfilTimer+0x300>)
 800802e:	f7f8 fc15 	bl	800085c <__aeabi_ddiv>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 fae5 	bl	8000608 <__aeabi_dmul>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4610      	mov	r0, r2
 8008044:	4619      	mov	r1, r3
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	4b4f      	ldr	r3, [pc, #316]	; (8008188 <setProfilTimer+0x2f8>)
 800804c:	f7f8 f924 	bl	8000298 <__aeabi_dsub>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	f7f8 fd86 	bl	8000b68 <__aeabi_d2uiz>
 800805c:	4603      	mov	r3, r0
 800805e:	4618      	mov	r0, r3
 8008060:	f7f8 fa58 	bl	8000514 <__aeabi_ui2d>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	494a      	ldr	r1, [pc, #296]	; (8008194 <setProfilTimer+0x304>)
 800806a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	*/

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim1,period[0]);
 800806e:	4b49      	ldr	r3, [pc, #292]	; (8008194 <setProfilTimer+0x304>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	4948      	ldr	r1, [pc, #288]	; (8008198 <setProfilTimer+0x308>)
 8008076:	680c      	ldr	r4, [r1, #0]
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	f7f8 fd74 	bl	8000b68 <__aeabi_d2uiz>
 8008080:	4603      	mov	r3, r0
 8008082:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008084:	4b43      	ldr	r3, [pc, #268]	; (8008194 <setProfilTimer+0x304>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	4610      	mov	r0, r2
 800808c:	4619      	mov	r1, r3
 800808e:	f7f8 fd6b 	bl	8000b68 <__aeabi_d2uiz>
 8008092:	4603      	mov	r3, r0
 8008094:	4a40      	ldr	r2, [pc, #256]	; (8008198 <setProfilTimer+0x308>)
 8008096:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,period[1]);
 8008098:	4b3e      	ldr	r3, [pc, #248]	; (8008194 <setProfilTimer+0x304>)
 800809a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800809e:	493f      	ldr	r1, [pc, #252]	; (800819c <setProfilTimer+0x30c>)
 80080a0:	680c      	ldr	r4, [r1, #0]
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7f8 fd5f 	bl	8000b68 <__aeabi_d2uiz>
 80080aa:	4603      	mov	r3, r0
 80080ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ae:	4b39      	ldr	r3, [pc, #228]	; (8008194 <setProfilTimer+0x304>)
 80080b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80080b4:	4610      	mov	r0, r2
 80080b6:	4619      	mov	r1, r3
 80080b8:	f7f8 fd56 	bl	8000b68 <__aeabi_d2uiz>
 80080bc:	4603      	mov	r3, r0
 80080be:	4a37      	ldr	r2, [pc, #220]	; (800819c <setProfilTimer+0x30c>)
 80080c0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,period[2]);
 80080c2:	4b34      	ldr	r3, [pc, #208]	; (8008194 <setProfilTimer+0x304>)
 80080c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80080c8:	4935      	ldr	r1, [pc, #212]	; (80081a0 <setProfilTimer+0x310>)
 80080ca:	680c      	ldr	r4, [r1, #0]
 80080cc:	4610      	mov	r0, r2
 80080ce:	4619      	mov	r1, r3
 80080d0:	f7f8 fd4a 	bl	8000b68 <__aeabi_d2uiz>
 80080d4:	4603      	mov	r3, r0
 80080d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080d8:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <setProfilTimer+0x304>)
 80080da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80080de:	4610      	mov	r0, r2
 80080e0:	4619      	mov	r1, r3
 80080e2:	f7f8 fd41 	bl	8000b68 <__aeabi_d2uiz>
 80080e6:	4603      	mov	r3, r0
 80080e8:	4a2d      	ldr	r2, [pc, #180]	; (80081a0 <setProfilTimer+0x310>)
 80080ea:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <setProfilTimer+0x2f4>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f8 fa0f 	bl	8000514 <__aeabi_ui2d>
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080fe:	f7f8 fbad 	bl	800085c <__aeabi_ddiv>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4c1f      	ldr	r4, [pc, #124]	; (8008184 <setProfilTimer+0x2f4>)
 8008108:	4610      	mov	r0, r2
 800810a:	4619      	mov	r1, r3
 800810c:	f7f8 fd2c 	bl	8000b68 <__aeabi_d2uiz>
 8008110:	4603      	mov	r3, r0
 8008112:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 8008114:	4b23      	ldr	r3, [pc, #140]	; (80081a4 <setProfilTimer+0x314>)
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4618      	mov	r0, r3
 800811a:	f7f8 f9fb 	bl	8000514 <__aeabi_ui2d>
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008126:	f7f8 fb99 	bl	800085c <__aeabi_ddiv>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4c1d      	ldr	r4, [pc, #116]	; (80081a4 <setProfilTimer+0x314>)
 8008130:	4610      	mov	r0, r2
 8008132:	4619      	mov	r1, r3
 8008134:	f7f8 fd18 	bl	8000b68 <__aeabi_d2uiz>
 8008138:	4603      	mov	r3, r0
 800813a:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 800813c:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <setProfilTimer+0x318>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4618      	mov	r0, r3
 8008142:	f7f8 f9e7 	bl	8000514 <__aeabi_ui2d>
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800814e:	f7f8 fb85 	bl	800085c <__aeabi_ddiv>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4c14      	ldr	r4, [pc, #80]	; (80081a8 <setProfilTimer+0x318>)
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	f7f8 fd04 	bl	8000b68 <__aeabi_d2uiz>
 8008160:	4603      	mov	r3, r0
 8008162:	6363      	str	r3, [r4, #52]	; 0x34


}
 8008164:	bf00      	nop
 8008166:	bdb0      	pop	{r4, r5, r7, pc}
 8008168:	66ed2a99 	.word	0x66ed2a99
 800816c:	4023193d 	.word	0x4023193d
 8008170:	00000000 	.word	0x00000000
 8008174:	418e8480 	.word	0x418e8480
 8008178:	200005f0 	.word	0x200005f0
 800817c:	20000638 	.word	0x20000638
 8008180:	20000680 	.word	0x20000680
 8008184:	40010000 	.word	0x40010000
 8008188:	3ff00000 	.word	0x3ff00000
 800818c:	40bf4000 	.word	0x40bf4000
 8008190:	404e0000 	.word	0x404e0000
 8008194:	20000848 	.word	0x20000848
 8008198:	20000368 	.word	0x20000368
 800819c:	200003f8 	.word	0x200003f8
 80081a0:	20000440 	.word	0x20000440
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800

080081ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80081ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80081b0:	480d      	ldr	r0, [pc, #52]	; (80081e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80081b2:	490e      	ldr	r1, [pc, #56]	; (80081ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80081b4:	4a0e      	ldr	r2, [pc, #56]	; (80081f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80081b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80081b8:	e002      	b.n	80081c0 <LoopCopyDataInit>

080081ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081be:	3304      	adds	r3, #4

080081c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081c4:	d3f9      	bcc.n	80081ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081c6:	4a0b      	ldr	r2, [pc, #44]	; (80081f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80081c8:	4c0b      	ldr	r4, [pc, #44]	; (80081f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80081ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081cc:	e001      	b.n	80081d2 <LoopFillZerobss>

080081ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081d0:	3204      	adds	r2, #4

080081d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081d4:	d3fb      	bcc.n	80081ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80081d6:	f7fd fc93 	bl	8005b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081da:	f004 faff 	bl	800c7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80081de:	f7fb fa05 	bl	80035ec <main>
  bx  lr    
 80081e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80081e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80081e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081ec:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80081f0:	08010c48 	.word	0x08010c48
  ldr r2, =_sbss
 80081f4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80081f8:	200008e4 	.word	0x200008e4

080081fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80081fc:	e7fe      	b.n	80081fc <ADC_IRQHandler>
	...

08008200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <HAL_Init+0x40>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a0d      	ldr	r2, [pc, #52]	; (8008240 <HAL_Init+0x40>)
 800820a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800820e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <HAL_Init+0x40>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a0a      	ldr	r2, [pc, #40]	; (8008240 <HAL_Init+0x40>)
 8008216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800821a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <HAL_Init+0x40>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a07      	ldr	r2, [pc, #28]	; (8008240 <HAL_Init+0x40>)
 8008222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008228:	2003      	movs	r0, #3
 800822a:	f000 f973 	bl	8008514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800822e:	2000      	movs	r0, #0
 8008230:	f000 f808 	bl	8008244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008234:	f7fd f876 	bl	8005324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40023c00 	.word	0x40023c00

08008244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <HAL_InitTick+0x54>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	4b12      	ldr	r3, [pc, #72]	; (800829c <HAL_InitTick+0x58>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	4619      	mov	r1, r3
 8008256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800825a:	fbb3 f3f1 	udiv	r3, r3, r1
 800825e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f999 	bl	800859a <HAL_SYSTICK_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e00e      	b.n	8008290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b0f      	cmp	r3, #15
 8008276:	d80a      	bhi.n	800828e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008278:	2200      	movs	r2, #0
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	f000 f953 	bl	800852a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008284:	4a06      	ldr	r2, [pc, #24]	; (80082a0 <HAL_InitTick+0x5c>)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	e000      	b.n	8008290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000078 	.word	0x20000078
 800829c:	20000080 	.word	0x20000080
 80082a0:	2000007c 	.word	0x2000007c

080082a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <HAL_IncTick+0x20>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <HAL_IncTick+0x24>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4413      	add	r3, r2
 80082b4:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <HAL_IncTick+0x24>)
 80082b6:	6013      	str	r3, [r2, #0]
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000080 	.word	0x20000080
 80082c8:	200008d0 	.word	0x200008d0

080082cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  return uwTick;
 80082d0:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <HAL_GetTick+0x14>)
 80082d2:	681b      	ldr	r3, [r3, #0]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	200008d0 	.word	0x200008d0

080082e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082ec:	f7ff ffee 	bl	80082cc <HAL_GetTick>
 80082f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d005      	beq.n	800830a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <HAL_Delay+0x44>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4413      	add	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800830a:	bf00      	nop
 800830c:	f7ff ffde 	bl	80082cc <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	429a      	cmp	r2, r3
 800831a:	d8f7      	bhi.n	800830c <HAL_Delay+0x28>
  {
  }
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000080 	.word	0x20000080

0800832c <__NVIC_SetPriorityGrouping>:
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800833c:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <__NVIC_SetPriorityGrouping+0x44>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008348:	4013      	ands	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800835e:	4a04      	ldr	r2, [pc, #16]	; (8008370 <__NVIC_SetPriorityGrouping+0x44>)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	60d3      	str	r3, [r2, #12]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	e000ed00 	.word	0xe000ed00

08008374 <__NVIC_GetPriorityGrouping>:
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <__NVIC_GetPriorityGrouping+0x18>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	0a1b      	lsrs	r3, r3, #8
 800837e:	f003 0307 	and.w	r3, r3, #7
}
 8008382:	4618      	mov	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	e000ed00 	.word	0xe000ed00

08008390 <__NVIC_EnableIRQ>:
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800839a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	db0b      	blt.n	80083ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f003 021f 	and.w	r2, r3, #31
 80083a8:	4907      	ldr	r1, [pc, #28]	; (80083c8 <__NVIC_EnableIRQ+0x38>)
 80083aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ae:	095b      	lsrs	r3, r3, #5
 80083b0:	2001      	movs	r0, #1
 80083b2:	fa00 f202 	lsl.w	r2, r0, r2
 80083b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	e000e100 	.word	0xe000e100

080083cc <__NVIC_DisableIRQ>:
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	db12      	blt.n	8008404 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	f003 021f 	and.w	r2, r3, #31
 80083e4:	490a      	ldr	r1, [pc, #40]	; (8008410 <__NVIC_DisableIRQ+0x44>)
 80083e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	2001      	movs	r0, #1
 80083ee:	fa00 f202 	lsl.w	r2, r0, r2
 80083f2:	3320      	adds	r3, #32
 80083f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083f8:	f3bf 8f4f 	dsb	sy
}
 80083fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083fe:	f3bf 8f6f 	isb	sy
}
 8008402:	bf00      	nop
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	e000e100 	.word	0xe000e100

08008414 <__NVIC_SetPriority>:
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008424:	2b00      	cmp	r3, #0
 8008426:	db0a      	blt.n	800843e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	490c      	ldr	r1, [pc, #48]	; (8008460 <__NVIC_SetPriority+0x4c>)
 800842e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008432:	0112      	lsls	r2, r2, #4
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	440b      	add	r3, r1
 8008438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800843c:	e00a      	b.n	8008454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4908      	ldr	r1, [pc, #32]	; (8008464 <__NVIC_SetPriority+0x50>)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	3b04      	subs	r3, #4
 800844c:	0112      	lsls	r2, r2, #4
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	440b      	add	r3, r1
 8008452:	761a      	strb	r2, [r3, #24]
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	e000e100 	.word	0xe000e100
 8008464:	e000ed00 	.word	0xe000ed00

08008468 <NVIC_EncodePriority>:
{
 8008468:	b480      	push	{r7}
 800846a:	b089      	sub	sp, #36	; 0x24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f1c3 0307 	rsb	r3, r3, #7
 8008482:	2b04      	cmp	r3, #4
 8008484:	bf28      	it	cs
 8008486:	2304      	movcs	r3, #4
 8008488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	3304      	adds	r3, #4
 800848e:	2b06      	cmp	r3, #6
 8008490:	d902      	bls.n	8008498 <NVIC_EncodePriority+0x30>
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	3b03      	subs	r3, #3
 8008496:	e000      	b.n	800849a <NVIC_EncodePriority+0x32>
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	fa02 f303 	lsl.w	r3, r2, r3
 80084a6:	43da      	mvns	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	401a      	ands	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084b0:	f04f 31ff 	mov.w	r1, #4294967295
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ba:	43d9      	mvns	r1, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084c0:	4313      	orrs	r3, r2
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3724      	adds	r7, #36	; 0x24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3b01      	subs	r3, #1
 80084dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084e0:	d301      	bcc.n	80084e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084e2:	2301      	movs	r3, #1
 80084e4:	e00f      	b.n	8008506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084e6:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <SysTick_Config+0x40>)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084ee:	210f      	movs	r1, #15
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	f7ff ff8e 	bl	8008414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <SysTick_Config+0x40>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084fe:	4b04      	ldr	r3, [pc, #16]	; (8008510 <SysTick_Config+0x40>)
 8008500:	2207      	movs	r2, #7
 8008502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	e000e010 	.word	0xe000e010

08008514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ff05 	bl	800832c <__NVIC_SetPriorityGrouping>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800852a:	b580      	push	{r7, lr}
 800852c:	b086      	sub	sp, #24
 800852e:	af00      	add	r7, sp, #0
 8008530:	4603      	mov	r3, r0
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800853c:	f7ff ff1a 	bl	8008374 <__NVIC_GetPriorityGrouping>
 8008540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	6978      	ldr	r0, [r7, #20]
 8008548:	f7ff ff8e 	bl	8008468 <NVIC_EncodePriority>
 800854c:	4602      	mov	r2, r0
 800854e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008552:	4611      	mov	r1, r2
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff ff5d 	bl	8008414 <__NVIC_SetPriority>
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	4603      	mov	r3, r0
 800856a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800856c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff ff0d 	bl	8008390 <__NVIC_EnableIRQ>
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	4603      	mov	r3, r0
 8008586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff ff1d 	bl	80083cc <__NVIC_DisableIRQ>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ff94 	bl	80084d0 <SysTick_Config>
 80085a8:	4603      	mov	r3, r0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80085c0:	f7ff fe84 	bl	80082cc <HAL_GetTick>
 80085c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d008      	beq.n	80085e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2280      	movs	r2, #128	; 0x80
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e052      	b.n	800868a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0216 	bic.w	r2, r2, #22
 80085f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <HAL_DMA_Abort+0x62>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0208 	bic.w	r2, r2, #8
 8008622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008634:	e013      	b.n	800865e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008636:	f7ff fe49 	bl	80082cc <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b05      	cmp	r3, #5
 8008642:	d90c      	bls.n	800865e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2203      	movs	r2, #3
 800864e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e015      	b.n	800868a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e4      	bne.n	8008636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008670:	223f      	movs	r2, #63	; 0x3f
 8008672:	409a      	lsls	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d004      	beq.n	80086b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2280      	movs	r2, #128	; 0x80
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e00c      	b.n	80086ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2205      	movs	r2, #5
 80086b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086d8:	b480      	push	{r7}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e159      	b.n	80089a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086f4:	2201      	movs	r2, #1
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4013      	ands	r3, r2
 8008706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	429a      	cmp	r2, r3
 800870e:	f040 8148 	bne.w	80089a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b01      	cmp	r3, #1
 800871c:	d005      	beq.n	800872a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008726:	2b02      	cmp	r3, #2
 8008728:	d130      	bne.n	800878c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	2203      	movs	r2, #3
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4013      	ands	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4313      	orrs	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008760:	2201      	movs	r2, #1
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	fa02 f303 	lsl.w	r3, r2, r3
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	f003 0201 	and.w	r2, r3, #1
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	4313      	orrs	r3, r2
 8008784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	2b03      	cmp	r3, #3
 8008796:	d017      	beq.n	80087c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	2203      	movs	r2, #3
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	43db      	mvns	r3, r3
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	4013      	ands	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4313      	orrs	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d123      	bne.n	800881c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	08da      	lsrs	r2, r3, #3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3208      	adds	r2, #8
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	220f      	movs	r2, #15
 80087ec:	fa02 f303 	lsl.w	r3, r2, r3
 80087f0:	43db      	mvns	r3, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4013      	ands	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	4313      	orrs	r3, r2
 800880c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	08da      	lsrs	r2, r3, #3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3208      	adds	r2, #8
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	2203      	movs	r2, #3
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	43db      	mvns	r3, r3
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	4013      	ands	r3, r2
 8008832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f003 0203 	and.w	r2, r3, #3
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	4313      	orrs	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80a2 	beq.w	80089a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	4b57      	ldr	r3, [pc, #348]	; (80089c0 <HAL_GPIO_Init+0x2e8>)
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	4a56      	ldr	r2, [pc, #344]	; (80089c0 <HAL_GPIO_Init+0x2e8>)
 8008868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800886c:	6453      	str	r3, [r2, #68]	; 0x44
 800886e:	4b54      	ldr	r3, [pc, #336]	; (80089c0 <HAL_GPIO_Init+0x2e8>)
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800887a:	4a52      	ldr	r2, [pc, #328]	; (80089c4 <HAL_GPIO_Init+0x2ec>)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	089b      	lsrs	r3, r3, #2
 8008880:	3302      	adds	r3, #2
 8008882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	220f      	movs	r2, #15
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	4013      	ands	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a49      	ldr	r2, [pc, #292]	; (80089c8 <HAL_GPIO_Init+0x2f0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d019      	beq.n	80088da <HAL_GPIO_Init+0x202>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a48      	ldr	r2, [pc, #288]	; (80089cc <HAL_GPIO_Init+0x2f4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d013      	beq.n	80088d6 <HAL_GPIO_Init+0x1fe>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a47      	ldr	r2, [pc, #284]	; (80089d0 <HAL_GPIO_Init+0x2f8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00d      	beq.n	80088d2 <HAL_GPIO_Init+0x1fa>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a46      	ldr	r2, [pc, #280]	; (80089d4 <HAL_GPIO_Init+0x2fc>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d007      	beq.n	80088ce <HAL_GPIO_Init+0x1f6>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a45      	ldr	r2, [pc, #276]	; (80089d8 <HAL_GPIO_Init+0x300>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <HAL_GPIO_Init+0x1f2>
 80088c6:	2304      	movs	r3, #4
 80088c8:	e008      	b.n	80088dc <HAL_GPIO_Init+0x204>
 80088ca:	2307      	movs	r3, #7
 80088cc:	e006      	b.n	80088dc <HAL_GPIO_Init+0x204>
 80088ce:	2303      	movs	r3, #3
 80088d0:	e004      	b.n	80088dc <HAL_GPIO_Init+0x204>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e002      	b.n	80088dc <HAL_GPIO_Init+0x204>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <HAL_GPIO_Init+0x204>
 80088da:	2300      	movs	r3, #0
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	f002 0203 	and.w	r2, r2, #3
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	4093      	lsls	r3, r2
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ec:	4935      	ldr	r1, [pc, #212]	; (80089c4 <HAL_GPIO_Init+0x2ec>)
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	3302      	adds	r3, #2
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088fa:	4b38      	ldr	r3, [pc, #224]	; (80089dc <HAL_GPIO_Init+0x304>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	43db      	mvns	r3, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4013      	ands	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800891e:	4a2f      	ldr	r2, [pc, #188]	; (80089dc <HAL_GPIO_Init+0x304>)
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008924:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <HAL_GPIO_Init+0x304>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	43db      	mvns	r3, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4013      	ands	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008948:	4a24      	ldr	r2, [pc, #144]	; (80089dc <HAL_GPIO_Init+0x304>)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800894e:	4b23      	ldr	r3, [pc, #140]	; (80089dc <HAL_GPIO_Init+0x304>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	43db      	mvns	r3, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4013      	ands	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008972:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <HAL_GPIO_Init+0x304>)
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008978:	4b18      	ldr	r3, [pc, #96]	; (80089dc <HAL_GPIO_Init+0x304>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	43db      	mvns	r3, r3
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4013      	ands	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800899c:	4a0f      	ldr	r2, [pc, #60]	; (80089dc <HAL_GPIO_Init+0x304>)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3301      	adds	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	f67f aea2 	bls.w	80086f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	3724      	adds	r7, #36	; 0x24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40013800 	.word	0x40013800
 80089c8:	40020000 	.word	0x40020000
 80089cc:	40020400 	.word	0x40020400
 80089d0:	40020800 	.word	0x40020800
 80089d4:	40020c00 	.word	0x40020c00
 80089d8:	40021000 	.word	0x40021000
 80089dc:	40013c00 	.word	0x40013c00

080089e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	887b      	ldrh	r3, [r7, #2]
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089f8:	2301      	movs	r3, #1
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	e001      	b.n	8008a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	807b      	strh	r3, [r7, #2]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a20:	787b      	ldrb	r3, [r7, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a26:	887a      	ldrh	r2, [r7, #2]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a2c:	e003      	b.n	8008a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a2e:	887b      	ldrh	r3, [r7, #2]
 8008a30:	041a      	lsls	r2, r3, #16
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	619a      	str	r2, [r3, #24]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a4e:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a50:	695a      	ldr	r2, [r3, #20]
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	4013      	ands	r3, r2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a5a:	4a05      	ldr	r2, [pc, #20]	; (8008a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a5c:	88fb      	ldrh	r3, [r7, #6]
 8008a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb fa74 	bl	8003f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40013c00 	.word	0x40013c00

08008a74 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008a78:	4b06      	ldr	r3, [pc, #24]	; (8008a94 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008a84:	f000 f808 	bl	8008a98 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008a8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a8e:	615a      	str	r2, [r3, #20]
  }
}
 8008a90:	bf00      	nop
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40013c00 	.word	0x40013c00

08008a98 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e267      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d075      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ac6:	4b88      	ldr	r3, [pc, #544]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 030c 	and.w	r3, r3, #12
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00c      	beq.n	8008aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ad2:	4b85      	ldr	r3, [pc, #532]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d112      	bne.n	8008b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ade:	4b82      	ldr	r3, [pc, #520]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aea:	d10b      	bne.n	8008b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aec:	4b7e      	ldr	r3, [pc, #504]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d05b      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x108>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d157      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e242      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0c:	d106      	bne.n	8008b1c <HAL_RCC_OscConfig+0x74>
 8008b0e:	4b76      	ldr	r3, [pc, #472]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a75      	ldr	r2, [pc, #468]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e01d      	b.n	8008b58 <HAL_RCC_OscConfig+0xb0>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b24:	d10c      	bne.n	8008b40 <HAL_RCC_OscConfig+0x98>
 8008b26:	4b70      	ldr	r3, [pc, #448]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a6f      	ldr	r2, [pc, #444]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	4b6d      	ldr	r3, [pc, #436]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a6c      	ldr	r2, [pc, #432]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	e00b      	b.n	8008b58 <HAL_RCC_OscConfig+0xb0>
 8008b40:	4b69      	ldr	r3, [pc, #420]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a68      	ldr	r2, [pc, #416]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	4b66      	ldr	r3, [pc, #408]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a65      	ldr	r2, [pc, #404]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b60:	f7ff fbb4 	bl	80082cc <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b68:	f7ff fbb0 	bl	80082cc <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b64      	cmp	r3, #100	; 0x64
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e207      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7a:	4b5b      	ldr	r3, [pc, #364]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0xc0>
 8008b86:	e014      	b.n	8008bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b88:	f7ff fba0 	bl	80082cc <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b90:	f7ff fb9c 	bl	80082cc <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b64      	cmp	r3, #100	; 0x64
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e1f3      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ba2:	4b51      	ldr	r3, [pc, #324]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1f0      	bne.n	8008b90 <HAL_RCC_OscConfig+0xe8>
 8008bae:	e000      	b.n	8008bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d063      	beq.n	8008c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bbe:	4b4a      	ldr	r3, [pc, #296]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 030c 	and.w	r3, r3, #12
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bca:	4b47      	ldr	r3, [pc, #284]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d11c      	bne.n	8008c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bd6:	4b44      	ldr	r3, [pc, #272]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d116      	bne.n	8008c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008be2:	4b41      	ldr	r3, [pc, #260]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <HAL_RCC_OscConfig+0x152>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d001      	beq.n	8008bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e1c7      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bfa:	4b3b      	ldr	r3, [pc, #236]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4937      	ldr	r1, [pc, #220]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c0e:	e03a      	b.n	8008c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d020      	beq.n	8008c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c18:	4b34      	ldr	r3, [pc, #208]	; (8008cec <HAL_RCC_OscConfig+0x244>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1e:	f7ff fb55 	bl	80082cc <HAL_GetTick>
 8008c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c24:	e008      	b.n	8008c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c26:	f7ff fb51 	bl	80082cc <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d901      	bls.n	8008c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e1a8      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c38:	4b2b      	ldr	r3, [pc, #172]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0f0      	beq.n	8008c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c44:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	4925      	ldr	r1, [pc, #148]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	600b      	str	r3, [r1, #0]
 8008c58:	e015      	b.n	8008c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c5a:	4b24      	ldr	r3, [pc, #144]	; (8008cec <HAL_RCC_OscConfig+0x244>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c60:	f7ff fb34 	bl	80082cc <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c68:	f7ff fb30 	bl	80082cc <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e187      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d036      	beq.n	8008d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <HAL_RCC_OscConfig+0x248>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca0:	f7ff fb14 	bl	80082cc <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ca8:	f7ff fb10 	bl	80082cc <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e167      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x200>
 8008cc6:	e01b      	b.n	8008d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cc8:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <HAL_RCC_OscConfig+0x248>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cce:	f7ff fafd 	bl	80082cc <HAL_GetTick>
 8008cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cd4:	e00e      	b.n	8008cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008cd6:	f7ff faf9 	bl	80082cc <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d907      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e150      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
 8008ce8:	40023800 	.word	0x40023800
 8008cec:	42470000 	.word	0x42470000
 8008cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cf4:	4b88      	ldr	r3, [pc, #544]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1ea      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8097 	beq.w	8008e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d12:	4b81      	ldr	r3, [pc, #516]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10f      	bne.n	8008d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]
 8008d22:	4b7d      	ldr	r3, [pc, #500]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	4a7c      	ldr	r2, [pc, #496]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d2e:	4b7a      	ldr	r3, [pc, #488]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d36:	60bb      	str	r3, [r7, #8]
 8008d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d3e:	4b77      	ldr	r3, [pc, #476]	; (8008f1c <HAL_RCC_OscConfig+0x474>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d118      	bne.n	8008d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d4a:	4b74      	ldr	r3, [pc, #464]	; (8008f1c <HAL_RCC_OscConfig+0x474>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a73      	ldr	r2, [pc, #460]	; (8008f1c <HAL_RCC_OscConfig+0x474>)
 8008d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d56:	f7ff fab9 	bl	80082cc <HAL_GetTick>
 8008d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d5c:	e008      	b.n	8008d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d5e:	f7ff fab5 	bl	80082cc <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e10c      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d70:	4b6a      	ldr	r3, [pc, #424]	; (8008f1c <HAL_RCC_OscConfig+0x474>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0f0      	beq.n	8008d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d106      	bne.n	8008d92 <HAL_RCC_OscConfig+0x2ea>
 8008d84:	4b64      	ldr	r3, [pc, #400]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d88:	4a63      	ldr	r2, [pc, #396]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008d90:	e01c      	b.n	8008dcc <HAL_RCC_OscConfig+0x324>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d10c      	bne.n	8008db4 <HAL_RCC_OscConfig+0x30c>
 8008d9a:	4b5f      	ldr	r3, [pc, #380]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	4a5e      	ldr	r2, [pc, #376]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008da0:	f043 0304 	orr.w	r3, r3, #4
 8008da4:	6713      	str	r3, [r2, #112]	; 0x70
 8008da6:	4b5c      	ldr	r3, [pc, #368]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008daa:	4a5b      	ldr	r2, [pc, #364]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008dac:	f043 0301 	orr.w	r3, r3, #1
 8008db0:	6713      	str	r3, [r2, #112]	; 0x70
 8008db2:	e00b      	b.n	8008dcc <HAL_RCC_OscConfig+0x324>
 8008db4:	4b58      	ldr	r3, [pc, #352]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a57      	ldr	r2, [pc, #348]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008dba:	f023 0301 	bic.w	r3, r3, #1
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc0:	4b55      	ldr	r3, [pc, #340]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	4a54      	ldr	r2, [pc, #336]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008dc6:	f023 0304 	bic.w	r3, r3, #4
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d015      	beq.n	8008e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd4:	f7ff fa7a 	bl	80082cc <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dda:	e00a      	b.n	8008df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ddc:	f7ff fa76 	bl	80082cc <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e0cb      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df2:	4b49      	ldr	r3, [pc, #292]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ee      	beq.n	8008ddc <HAL_RCC_OscConfig+0x334>
 8008dfe:	e014      	b.n	8008e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e00:	f7ff fa64 	bl	80082cc <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e06:	e00a      	b.n	8008e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e08:	f7ff fa60 	bl	80082cc <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e0b5      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e1e:	4b3e      	ldr	r3, [pc, #248]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1ee      	bne.n	8008e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d105      	bne.n	8008e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	4a38      	ldr	r2, [pc, #224]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80a1 	beq.w	8008f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e46:	4b34      	ldr	r3, [pc, #208]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 030c 	and.w	r3, r3, #12
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d05c      	beq.n	8008f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d141      	bne.n	8008ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5a:	4b31      	ldr	r3, [pc, #196]	; (8008f20 <HAL_RCC_OscConfig+0x478>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e60:	f7ff fa34 	bl	80082cc <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e68:	f7ff fa30 	bl	80082cc <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e087      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e7a:	4b27      	ldr	r3, [pc, #156]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69da      	ldr	r2, [r3, #28]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	019b      	lsls	r3, r3, #6
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	061b      	lsls	r3, r3, #24
 8008eaa:	491b      	ldr	r1, [pc, #108]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <HAL_RCC_OscConfig+0x478>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb6:	f7ff fa09 	bl	80082cc <HAL_GetTick>
 8008eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ebc:	e008      	b.n	8008ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ebe:	f7ff fa05 	bl	80082cc <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e05c      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ed0:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f0      	beq.n	8008ebe <HAL_RCC_OscConfig+0x416>
 8008edc:	e054      	b.n	8008f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <HAL_RCC_OscConfig+0x478>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee4:	f7ff f9f2 	bl	80082cc <HAL_GetTick>
 8008ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eec:	f7ff f9ee 	bl	80082cc <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e045      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008efe:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <HAL_RCC_OscConfig+0x470>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x444>
 8008f0a:	e03d      	b.n	8008f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d107      	bne.n	8008f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e038      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	40007000 	.word	0x40007000
 8008f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <HAL_RCC_OscConfig+0x4ec>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d028      	beq.n	8008f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d121      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d11a      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f54:	4013      	ands	r3, r2
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d111      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6a:	085b      	lsrs	r3, r3, #1
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d107      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d001      	beq.n	8008f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e000      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40023800 	.word	0x40023800

08008f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0cc      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fac:	4b68      	ldr	r3, [pc, #416]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d90c      	bls.n	8008fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fba:	4b65      	ldr	r3, [pc, #404]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc2:	4b63      	ldr	r3, [pc, #396]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d001      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0b8      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d020      	beq.n	8009022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fec:	4b59      	ldr	r3, [pc, #356]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	4a58      	ldr	r2, [pc, #352]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0308 	and.w	r3, r3, #8
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009004:	4b53      	ldr	r3, [pc, #332]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	4a52      	ldr	r2, [pc, #328]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 800900a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800900e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009010:	4b50      	ldr	r3, [pc, #320]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	494d      	ldr	r1, [pc, #308]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 800901e:	4313      	orrs	r3, r2
 8009020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d044      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d107      	bne.n	8009046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009036:	4b47      	ldr	r3, [pc, #284]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d119      	bne.n	8009076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e07f      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d003      	beq.n	8009056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009052:	2b03      	cmp	r3, #3
 8009054:	d107      	bne.n	8009066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009056:	4b3f      	ldr	r3, [pc, #252]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d109      	bne.n	8009076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e06f      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009066:	4b3b      	ldr	r3, [pc, #236]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e067      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009076:	4b37      	ldr	r3, [pc, #220]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f023 0203 	bic.w	r2, r3, #3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	4934      	ldr	r1, [pc, #208]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009084:	4313      	orrs	r3, r2
 8009086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009088:	f7ff f920 	bl	80082cc <HAL_GetTick>
 800908c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800908e:	e00a      	b.n	80090a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009090:	f7ff f91c 	bl	80082cc <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f241 3288 	movw	r2, #5000	; 0x1388
 800909e:	4293      	cmp	r3, r2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e04f      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090a6:	4b2b      	ldr	r3, [pc, #172]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 020c 	and.w	r2, r3, #12
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d1eb      	bne.n	8009090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090b8:	4b25      	ldr	r3, [pc, #148]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d20c      	bcs.n	80090e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090c6:	4b22      	ldr	r3, [pc, #136]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <HAL_RCC_ClockConfig+0x1b8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d001      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e032      	b.n	8009146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d008      	beq.n	80090fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090ec:	4b19      	ldr	r3, [pc, #100]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	4916      	ldr	r1, [pc, #88]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800910a:	4b12      	ldr	r3, [pc, #72]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	00db      	lsls	r3, r3, #3
 8009118:	490e      	ldr	r1, [pc, #56]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 800911a:	4313      	orrs	r3, r2
 800911c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800911e:	f000 f821 	bl	8009164 <HAL_RCC_GetSysClockFreq>
 8009122:	4602      	mov	r2, r0
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	091b      	lsrs	r3, r3, #4
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	490a      	ldr	r1, [pc, #40]	; (8009158 <HAL_RCC_ClockConfig+0x1c0>)
 8009130:	5ccb      	ldrb	r3, [r1, r3]
 8009132:	fa22 f303 	lsr.w	r3, r2, r3
 8009136:	4a09      	ldr	r2, [pc, #36]	; (800915c <HAL_RCC_ClockConfig+0x1c4>)
 8009138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <HAL_RCC_ClockConfig+0x1c8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff f880 	bl	8008244 <HAL_InitTick>

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40023c00 	.word	0x40023c00
 8009154:	40023800 	.word	0x40023800
 8009158:	080107bc 	.word	0x080107bc
 800915c:	20000078 	.word	0x20000078
 8009160:	2000007c 	.word	0x2000007c

08009164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009168:	b094      	sub	sp, #80	; 0x50
 800916a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	647b      	str	r3, [r7, #68]	; 0x44
 8009170:	2300      	movs	r3, #0
 8009172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009174:	2300      	movs	r3, #0
 8009176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800917c:	4b79      	ldr	r3, [pc, #484]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 030c 	and.w	r3, r3, #12
 8009184:	2b08      	cmp	r3, #8
 8009186:	d00d      	beq.n	80091a4 <HAL_RCC_GetSysClockFreq+0x40>
 8009188:	2b08      	cmp	r3, #8
 800918a:	f200 80e1 	bhi.w	8009350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <HAL_RCC_GetSysClockFreq+0x34>
 8009192:	2b04      	cmp	r3, #4
 8009194:	d003      	beq.n	800919e <HAL_RCC_GetSysClockFreq+0x3a>
 8009196:	e0db      	b.n	8009350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009198:	4b73      	ldr	r3, [pc, #460]	; (8009368 <HAL_RCC_GetSysClockFreq+0x204>)
 800919a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800919c:	e0db      	b.n	8009356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800919e:	4b73      	ldr	r3, [pc, #460]	; (800936c <HAL_RCC_GetSysClockFreq+0x208>)
 80091a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091a2:	e0d8      	b.n	8009356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091a4:	4b6f      	ldr	r3, [pc, #444]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091ae:	4b6d      	ldr	r3, [pc, #436]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d063      	beq.n	8009282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091ba:	4b6a      	ldr	r3, [pc, #424]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	099b      	lsrs	r3, r3, #6
 80091c0:	2200      	movs	r2, #0
 80091c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80091c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091cc:	633b      	str	r3, [r7, #48]	; 0x30
 80091ce:	2300      	movs	r3, #0
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80091d6:	4622      	mov	r2, r4
 80091d8:	462b      	mov	r3, r5
 80091da:	f04f 0000 	mov.w	r0, #0
 80091de:	f04f 0100 	mov.w	r1, #0
 80091e2:	0159      	lsls	r1, r3, #5
 80091e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091e8:	0150      	lsls	r0, r2, #5
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4621      	mov	r1, r4
 80091f0:	1a51      	subs	r1, r2, r1
 80091f2:	6139      	str	r1, [r7, #16]
 80091f4:	4629      	mov	r1, r5
 80091f6:	eb63 0301 	sbc.w	r3, r3, r1
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009208:	4659      	mov	r1, fp
 800920a:	018b      	lsls	r3, r1, #6
 800920c:	4651      	mov	r1, sl
 800920e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009212:	4651      	mov	r1, sl
 8009214:	018a      	lsls	r2, r1, #6
 8009216:	4651      	mov	r1, sl
 8009218:	ebb2 0801 	subs.w	r8, r2, r1
 800921c:	4659      	mov	r1, fp
 800921e:	eb63 0901 	sbc.w	r9, r3, r1
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800922e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009236:	4690      	mov	r8, r2
 8009238:	4699      	mov	r9, r3
 800923a:	4623      	mov	r3, r4
 800923c:	eb18 0303 	adds.w	r3, r8, r3
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	462b      	mov	r3, r5
 8009244:	eb49 0303 	adc.w	r3, r9, r3
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009256:	4629      	mov	r1, r5
 8009258:	024b      	lsls	r3, r1, #9
 800925a:	4621      	mov	r1, r4
 800925c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009260:	4621      	mov	r1, r4
 8009262:	024a      	lsls	r2, r1, #9
 8009264:	4610      	mov	r0, r2
 8009266:	4619      	mov	r1, r3
 8009268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926a:	2200      	movs	r2, #0
 800926c:	62bb      	str	r3, [r7, #40]	; 0x28
 800926e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009274:	f7f7 fce8 	bl	8000c48 <__aeabi_uldivmod>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4613      	mov	r3, r2
 800927e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009280:	e058      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009282:	4b38      	ldr	r3, [pc, #224]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	099b      	lsrs	r3, r3, #6
 8009288:	2200      	movs	r2, #0
 800928a:	4618      	mov	r0, r3
 800928c:	4611      	mov	r1, r2
 800928e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009292:	623b      	str	r3, [r7, #32]
 8009294:	2300      	movs	r3, #0
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
 8009298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	f04f 0000 	mov.w	r0, #0
 80092a4:	f04f 0100 	mov.w	r1, #0
 80092a8:	0159      	lsls	r1, r3, #5
 80092aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ae:	0150      	lsls	r0, r2, #5
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4641      	mov	r1, r8
 80092b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80092ba:	4649      	mov	r1, r9
 80092bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092d4:	ebb2 040a 	subs.w	r4, r2, sl
 80092d8:	eb63 050b 	sbc.w	r5, r3, fp
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	00eb      	lsls	r3, r5, #3
 80092e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092ea:	00e2      	lsls	r2, r4, #3
 80092ec:	4614      	mov	r4, r2
 80092ee:	461d      	mov	r5, r3
 80092f0:	4643      	mov	r3, r8
 80092f2:	18e3      	adds	r3, r4, r3
 80092f4:	603b      	str	r3, [r7, #0]
 80092f6:	464b      	mov	r3, r9
 80092f8:	eb45 0303 	adc.w	r3, r5, r3
 80092fc:	607b      	str	r3, [r7, #4]
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800930a:	4629      	mov	r1, r5
 800930c:	028b      	lsls	r3, r1, #10
 800930e:	4621      	mov	r1, r4
 8009310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009314:	4621      	mov	r1, r4
 8009316:	028a      	lsls	r2, r1, #10
 8009318:	4610      	mov	r0, r2
 800931a:	4619      	mov	r1, r3
 800931c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931e:	2200      	movs	r2, #0
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	61fa      	str	r2, [r7, #28]
 8009324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009328:	f7f7 fc8e 	bl	8000c48 <__aeabi_uldivmod>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4613      	mov	r3, r2
 8009332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <HAL_RCC_GetSysClockFreq+0x200>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	3301      	adds	r3, #1
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009348:	fbb2 f3f3 	udiv	r3, r2, r3
 800934c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800934e:	e002      	b.n	8009356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <HAL_RCC_GetSysClockFreq+0x204>)
 8009352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009358:	4618      	mov	r0, r3
 800935a:	3750      	adds	r7, #80	; 0x50
 800935c:	46bd      	mov	sp, r7
 800935e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009362:	bf00      	nop
 8009364:	40023800 	.word	0x40023800
 8009368:	00f42400 	.word	0x00f42400
 800936c:	007a1200 	.word	0x007a1200

08009370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009374:	4b03      	ldr	r3, [pc, #12]	; (8009384 <HAL_RCC_GetHCLKFreq+0x14>)
 8009376:	681b      	ldr	r3, [r3, #0]
}
 8009378:	4618      	mov	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000078 	.word	0x20000078

08009388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800938c:	f7ff fff0 	bl	8009370 <HAL_RCC_GetHCLKFreq>
 8009390:	4602      	mov	r2, r0
 8009392:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	0a9b      	lsrs	r3, r3, #10
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	4903      	ldr	r1, [pc, #12]	; (80093ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800939e:	5ccb      	ldrb	r3, [r1, r3]
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40023800 	.word	0x40023800
 80093ac:	080107cc 	.word	0x080107cc

080093b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093b4:	f7ff ffdc 	bl	8009370 <HAL_RCC_GetHCLKFreq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	0b5b      	lsrs	r3, r3, #13
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	4903      	ldr	r1, [pc, #12]	; (80093d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093c6:	5ccb      	ldrb	r3, [r1, r3]
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40023800 	.word	0x40023800
 80093d4:	080107cc 	.word	0x080107cc

080093d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d038      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009400:	4b68      	ldr	r3, [pc, #416]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009406:	f7fe ff61 	bl	80082cc <HAL_GetTick>
 800940a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800940c:	e008      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800940e:	f7fe ff5d 	bl	80082cc <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b02      	cmp	r3, #2
 800941a:	d901      	bls.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e0bd      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009420:	4b61      	ldr	r3, [pc, #388]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f0      	bne.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	019b      	lsls	r3, r3, #6
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	071b      	lsls	r3, r3, #28
 800943e:	495a      	ldr	r1, [pc, #360]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009446:	4b57      	ldr	r3, [pc, #348]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800944c:	f7fe ff3e 	bl	80082cc <HAL_GetTick>
 8009450:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009452:	e008      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009454:	f7fe ff3a 	bl	80082cc <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e09a      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009466:	4b50      	ldr	r3, [pc, #320]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0f0      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 8083 	beq.w	8009586 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	4b48      	ldr	r3, [pc, #288]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009488:	4a47      	ldr	r2, [pc, #284]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800948e:	6413      	str	r3, [r2, #64]	; 0x40
 8009490:	4b45      	ldr	r3, [pc, #276]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800949c:	4b43      	ldr	r3, [pc, #268]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a42      	ldr	r2, [pc, #264]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094a8:	f7fe ff10 	bl	80082cc <HAL_GetTick>
 80094ac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094ae:	e008      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094b0:	f7fe ff0c 	bl	80082cc <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d901      	bls.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e06c      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094c2:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0f0      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094ce:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094d6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d02f      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d028      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ec:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094f6:	4b2e      	ldr	r3, [pc, #184]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094f8:	2201      	movs	r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094fc:	4b2c      	ldr	r3, [pc, #176]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009502:	4a29      	ldr	r2, [pc, #164]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009508:	4b27      	ldr	r3, [pc, #156]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800950a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	d114      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009514:	f7fe feda 	bl	80082cc <HAL_GetTick>
 8009518:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800951a:	e00a      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800951c:	f7fe fed6 	bl	80082cc <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	f241 3288 	movw	r2, #5000	; 0x1388
 800952a:	4293      	cmp	r3, r2
 800952c:	d901      	bls.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e034      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009532:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0ee      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800954a:	d10d      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800954c:	4b16      	ldr	r3, [pc, #88]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800955c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009560:	4911      	ldr	r1, [pc, #68]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009562:	4313      	orrs	r3, r2
 8009564:	608b      	str	r3, [r1, #8]
 8009566:	e005      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	4a0e      	ldr	r2, [pc, #56]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009572:	6093      	str	r3, [r2, #8]
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009580:	4909      	ldr	r1, [pc, #36]	; (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009582:	4313      	orrs	r3, r2
 8009584:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7d1a      	ldrb	r2, [r3, #20]
 8009596:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009598:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	42470068 	.word	0x42470068
 80095a8:	40023800 	.word	0x40023800
 80095ac:	40007000 	.word	0x40007000
 80095b0:	42470e40 	.word	0x42470e40
 80095b4:	424711e0 	.word	0x424711e0

080095b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e041      	b.n	800964e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7fb fed0 	bl	8005384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f000 ffce 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b01      	cmp	r3, #1
 800966a:	d001      	beq.n	8009670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e03c      	b.n	80096ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <HAL_TIM_Base_Start+0xa0>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d018      	beq.n	80096b4 <HAL_TIM_Base_Start+0x5c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800968a:	d013      	beq.n	80096b4 <HAL_TIM_Base_Start+0x5c>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a1a      	ldr	r2, [pc, #104]	; (80096fc <HAL_TIM_Base_Start+0xa4>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00e      	beq.n	80096b4 <HAL_TIM_Base_Start+0x5c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a19      	ldr	r2, [pc, #100]	; (8009700 <HAL_TIM_Base_Start+0xa8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d009      	beq.n	80096b4 <HAL_TIM_Base_Start+0x5c>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a17      	ldr	r2, [pc, #92]	; (8009704 <HAL_TIM_Base_Start+0xac>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d004      	beq.n	80096b4 <HAL_TIM_Base_Start+0x5c>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a16      	ldr	r2, [pc, #88]	; (8009708 <HAL_TIM_Base_Start+0xb0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d111      	bne.n	80096d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b06      	cmp	r3, #6
 80096c4:	d010      	beq.n	80096e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d6:	e007      	b.n	80096e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40014000 	.word	0x40014000

0800970c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6a1a      	ldr	r2, [r3, #32]
 800971a:	f241 1311 	movw	r3, #4369	; 0x1111
 800971e:	4013      	ands	r3, r2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10f      	bne.n	8009744 <HAL_TIM_Base_Stop+0x38>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6a1a      	ldr	r2, [r3, #32]
 800972a:	f240 4344 	movw	r3, #1092	; 0x444
 800972e:	4013      	ands	r3, r2
 8009730:	2b00      	cmp	r3, #0
 8009732:	d107      	bne.n	8009744 <HAL_TIM_Base_Stop+0x38>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0201 	bic.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	d001      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e044      	b.n	80097fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1e      	ldr	r2, [pc, #120]	; (800980c <HAL_TIM_Base_Start_IT+0xb0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d018      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x6c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979e:	d013      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x6c>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1a      	ldr	r2, [pc, #104]	; (8009810 <HAL_TIM_Base_Start_IT+0xb4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d00e      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x6c>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a19      	ldr	r2, [pc, #100]	; (8009814 <HAL_TIM_Base_Start_IT+0xb8>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d009      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x6c>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a17      	ldr	r2, [pc, #92]	; (8009818 <HAL_TIM_Base_Start_IT+0xbc>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d004      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x6c>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a16      	ldr	r2, [pc, #88]	; (800981c <HAL_TIM_Base_Start_IT+0xc0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d111      	bne.n	80097ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b06      	cmp	r3, #6
 80097d8:	d010      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ea:	e007      	b.n	80097fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40010000 	.word	0x40010000
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40014000 	.word	0x40014000

08009820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009842:	4013      	ands	r3, r2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10f      	bne.n	8009868 <HAL_TIM_Base_Stop_IT+0x48>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6a1a      	ldr	r2, [r3, #32]
 800984e:	f240 4344 	movw	r3, #1092	; 0x444
 8009852:	4013      	ands	r3, r2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d107      	bne.n	8009868 <HAL_TIM_Base_Stop_IT+0x48>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0201 	bic.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e041      	b.n	8009914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f839 	bl	800991c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f000 fe6b 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <HAL_TIM_PWM_Start+0x24>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b01      	cmp	r3, #1
 800994a:	bf14      	ite	ne
 800994c:	2301      	movne	r3, #1
 800994e:	2300      	moveq	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	e022      	b.n	800999a <HAL_TIM_PWM_Start+0x6a>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b04      	cmp	r3, #4
 8009958:	d109      	bne.n	800996e <HAL_TIM_PWM_Start+0x3e>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b01      	cmp	r3, #1
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	e015      	b.n	800999a <HAL_TIM_PWM_Start+0x6a>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b08      	cmp	r3, #8
 8009972:	d109      	bne.n	8009988 <HAL_TIM_PWM_Start+0x58>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	bf14      	ite	ne
 8009980:	2301      	movne	r3, #1
 8009982:	2300      	moveq	r3, #0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	e008      	b.n	800999a <HAL_TIM_PWM_Start+0x6a>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b01      	cmp	r3, #1
 8009992:	bf14      	ite	ne
 8009994:	2301      	movne	r3, #1
 8009996:	2300      	moveq	r3, #0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e068      	b.n	8009a74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d104      	bne.n	80099b2 <HAL_TIM_PWM_Start+0x82>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2202      	movs	r2, #2
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099b0:	e013      	b.n	80099da <HAL_TIM_PWM_Start+0xaa>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d104      	bne.n	80099c2 <HAL_TIM_PWM_Start+0x92>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099c0:	e00b      	b.n	80099da <HAL_TIM_PWM_Start+0xaa>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d104      	bne.n	80099d2 <HAL_TIM_PWM_Start+0xa2>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099d0:	e003      	b.n	80099da <HAL_TIM_PWM_Start+0xaa>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2202      	movs	r2, #2
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2201      	movs	r2, #1
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f001 f99c 	bl	800ad20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a23      	ldr	r2, [pc, #140]	; (8009a7c <HAL_TIM_PWM_Start+0x14c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d107      	bne.n	8009a02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1d      	ldr	r2, [pc, #116]	; (8009a7c <HAL_TIM_PWM_Start+0x14c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d018      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x10e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a14:	d013      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x10e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a19      	ldr	r2, [pc, #100]	; (8009a80 <HAL_TIM_PWM_Start+0x150>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00e      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x10e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a17      	ldr	r2, [pc, #92]	; (8009a84 <HAL_TIM_PWM_Start+0x154>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d009      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x10e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <HAL_TIM_PWM_Start+0x158>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d004      	beq.n	8009a3e <HAL_TIM_PWM_Start+0x10e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a14      	ldr	r2, [pc, #80]	; (8009a8c <HAL_TIM_PWM_Start+0x15c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d111      	bne.n	8009a62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0307 	and.w	r3, r3, #7
 8009a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d010      	beq.n	8009a72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f042 0201 	orr.w	r2, r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a60:	e007      	b.n	8009a72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0201 	orr.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	40014000 	.word	0x40014000

08009a90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 f93c 	bl	800ad20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a29      	ldr	r2, [pc, #164]	; (8009b54 <HAL_TIM_PWM_Stop+0xc4>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d117      	bne.n	8009ae2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6a1a      	ldr	r2, [r3, #32]
 8009ab8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009abc:	4013      	ands	r3, r2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10f      	bne.n	8009ae2 <HAL_TIM_PWM_Stop+0x52>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a1a      	ldr	r2, [r3, #32]
 8009ac8:	f240 4344 	movw	r3, #1092	; 0x444
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d107      	bne.n	8009ae2 <HAL_TIM_PWM_Stop+0x52>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6a1a      	ldr	r2, [r3, #32]
 8009ae8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10f      	bne.n	8009b12 <HAL_TIM_PWM_Stop+0x82>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	f240 4344 	movw	r3, #1092	; 0x444
 8009afc:	4013      	ands	r3, r2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d107      	bne.n	8009b12 <HAL_TIM_PWM_Stop+0x82>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 0201 	bic.w	r2, r2, #1
 8009b10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <HAL_TIM_PWM_Stop+0x92>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b20:	e013      	b.n	8009b4a <HAL_TIM_PWM_Stop+0xba>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d104      	bne.n	8009b32 <HAL_TIM_PWM_Stop+0xa2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b30:	e00b      	b.n	8009b4a <HAL_TIM_PWM_Stop+0xba>
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d104      	bne.n	8009b42 <HAL_TIM_PWM_Stop+0xb2>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b40:	e003      	b.n	8009b4a <HAL_TIM_PWM_Stop+0xba>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40010000 	.word	0x40010000

08009b58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e041      	b.n	8009bee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f839 	bl	8009bf6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3304      	adds	r3, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4610      	mov	r0, r2
 8009b98:	f000 fcfe 	bl	800a598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 f87f 	bl	800ad20 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6a1a      	ldr	r2, [r3, #32]
 8009c28:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10f      	bne.n	8009c52 <HAL_TIM_IC_Stop+0x48>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	f240 4344 	movw	r3, #1092	; 0x444
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d107      	bne.n	8009c52 <HAL_TIM_IC_Stop+0x48>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0201 	bic.w	r2, r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <HAL_TIM_IC_Stop+0x58>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c60:	e013      	b.n	8009c8a <HAL_TIM_IC_Stop+0x80>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d104      	bne.n	8009c72 <HAL_TIM_IC_Stop+0x68>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c70:	e00b      	b.n	8009c8a <HAL_TIM_IC_Stop+0x80>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d104      	bne.n	8009c82 <HAL_TIM_IC_Stop+0x78>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c80:	e003      	b.n	8009c8a <HAL_TIM_IC_Stop+0x80>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d104      	bne.n	8009c9a <HAL_TIM_IC_Stop+0x90>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c98:	e013      	b.n	8009cc2 <HAL_TIM_IC_Stop+0xb8>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d104      	bne.n	8009caa <HAL_TIM_IC_Stop+0xa0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ca8:	e00b      	b.n	8009cc2 <HAL_TIM_IC_Stop+0xb8>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d104      	bne.n	8009cba <HAL_TIM_IC_Stop+0xb0>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb8:	e003      	b.n	8009cc2 <HAL_TIM_IC_Stop+0xb8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <HAL_TIM_IC_Start_IT+0x1e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	e013      	b.n	8009d12 <HAL_TIM_IC_Start_IT+0x46>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d104      	bne.n	8009cfa <HAL_TIM_IC_Start_IT+0x2e>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	e00b      	b.n	8009d12 <HAL_TIM_IC_Start_IT+0x46>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d104      	bne.n	8009d0a <HAL_TIM_IC_Start_IT+0x3e>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	e003      	b.n	8009d12 <HAL_TIM_IC_Start_IT+0x46>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <HAL_TIM_IC_Start_IT+0x58>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	e013      	b.n	8009d4c <HAL_TIM_IC_Start_IT+0x80>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d104      	bne.n	8009d34 <HAL_TIM_IC_Start_IT+0x68>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	e00b      	b.n	8009d4c <HAL_TIM_IC_Start_IT+0x80>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b08      	cmp	r3, #8
 8009d38:	d104      	bne.n	8009d44 <HAL_TIM_IC_Start_IT+0x78>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	e003      	b.n	8009d4c <HAL_TIM_IC_Start_IT+0x80>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d102      	bne.n	8009d5a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d54:	7b7b      	ldrb	r3, [r7, #13]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d001      	beq.n	8009d5e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e0c2      	b.n	8009ee4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <HAL_TIM_IC_Start_IT+0xa2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d6c:	e013      	b.n	8009d96 <HAL_TIM_IC_Start_IT+0xca>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d104      	bne.n	8009d7e <HAL_TIM_IC_Start_IT+0xb2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d7c:	e00b      	b.n	8009d96 <HAL_TIM_IC_Start_IT+0xca>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d104      	bne.n	8009d8e <HAL_TIM_IC_Start_IT+0xc2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d8c:	e003      	b.n	8009d96 <HAL_TIM_IC_Start_IT+0xca>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d104      	bne.n	8009da6 <HAL_TIM_IC_Start_IT+0xda>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009da4:	e013      	b.n	8009dce <HAL_TIM_IC_Start_IT+0x102>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d104      	bne.n	8009db6 <HAL_TIM_IC_Start_IT+0xea>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009db4:	e00b      	b.n	8009dce <HAL_TIM_IC_Start_IT+0x102>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d104      	bne.n	8009dc6 <HAL_TIM_IC_Start_IT+0xfa>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dc4:	e003      	b.n	8009dce <HAL_TIM_IC_Start_IT+0x102>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b0c      	cmp	r3, #12
 8009dd2:	d841      	bhi.n	8009e58 <HAL_TIM_IC_Start_IT+0x18c>
 8009dd4:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <HAL_TIM_IC_Start_IT+0x110>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e11 	.word	0x08009e11
 8009de0:	08009e59 	.word	0x08009e59
 8009de4:	08009e59 	.word	0x08009e59
 8009de8:	08009e59 	.word	0x08009e59
 8009dec:	08009e23 	.word	0x08009e23
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009e59 	.word	0x08009e59
 8009df8:	08009e59 	.word	0x08009e59
 8009dfc:	08009e35 	.word	0x08009e35
 8009e00:	08009e59 	.word	0x08009e59
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	08009e47 	.word	0x08009e47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f042 0202 	orr.w	r2, r2, #2
 8009e1e:	60da      	str	r2, [r3, #12]
      break;
 8009e20:	e01d      	b.n	8009e5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68da      	ldr	r2, [r3, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f042 0204 	orr.w	r2, r2, #4
 8009e30:	60da      	str	r2, [r3, #12]
      break;
 8009e32:	e014      	b.n	8009e5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0208 	orr.w	r2, r2, #8
 8009e42:	60da      	str	r2, [r3, #12]
      break;
 8009e44:	e00b      	b.n	8009e5e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0210 	orr.w	r2, r2, #16
 8009e54:	60da      	str	r2, [r3, #12]
      break;
 8009e56:	e002      	b.n	8009e5e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d13e      	bne.n	8009ee2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 ff57 	bl	800ad20 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_TIM_IC_Start_IT+0x220>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d018      	beq.n	8009eae <HAL_TIM_IC_Start_IT+0x1e2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e84:	d013      	beq.n	8009eae <HAL_TIM_IC_Start_IT+0x1e2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a19      	ldr	r2, [pc, #100]	; (8009ef0 <HAL_TIM_IC_Start_IT+0x224>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00e      	beq.n	8009eae <HAL_TIM_IC_Start_IT+0x1e2>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a17      	ldr	r2, [pc, #92]	; (8009ef4 <HAL_TIM_IC_Start_IT+0x228>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HAL_TIM_IC_Start_IT+0x1e2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a16      	ldr	r2, [pc, #88]	; (8009ef8 <HAL_TIM_IC_Start_IT+0x22c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d004      	beq.n	8009eae <HAL_TIM_IC_Start_IT+0x1e2>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <HAL_TIM_IC_Start_IT+0x230>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d111      	bne.n	8009ed2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b06      	cmp	r3, #6
 8009ebe:	d010      	beq.n	8009ee2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed0:	e007      	b.n	8009ee2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0201 	orr.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40010000 	.word	0x40010000
 8009ef0:	40000400 	.word	0x40000400
 8009ef4:	40000800 	.word	0x40000800
 8009ef8:	40000c00 	.word	0x40000c00
 8009efc:	40014000 	.word	0x40014000

08009f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d122      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d11b      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0202 	mvn.w	r2, #2
 8009f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7fa f9cc 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8009f48:	e005      	b.n	8009f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fb05 	bl	800a55a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb0c 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d122      	bne.n	8009fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d11b      	bne.n	8009fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f06f 0204 	mvn.w	r2, #4
 8009f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7fa f9a2 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8009f9c:	e005      	b.n	8009faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fadb 	bl	800a55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fae2 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	2b08      	cmp	r3, #8
 8009fbc:	d122      	bne.n	800a004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d11b      	bne.n	800a004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f06f 0208 	mvn.w	r2, #8
 8009fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2204      	movs	r2, #4
 8009fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fa f978 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 8009ff0:	e005      	b.n	8009ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fab1 	bl	800a55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fab8 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0310 	and.w	r3, r3, #16
 800a00e:	2b10      	cmp	r3, #16
 800a010:	d122      	bne.n	800a058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b10      	cmp	r3, #16
 800a01e:	d11b      	bne.n	800a058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0210 	mvn.w	r2, #16
 800a028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2208      	movs	r2, #8
 800a02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fa f94e 	bl	80042e0 <HAL_TIM_IC_CaptureCallback>
 800a044:	e005      	b.n	800a052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa87 	bl	800a55a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fa8e 	bl	800a56e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b01      	cmp	r3, #1
 800a064:	d10e      	bne.n	800a084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b01      	cmp	r3, #1
 800a072:	d107      	bne.n	800a084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f06f 0201 	mvn.w	r2, #1
 800a07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7fa f982 	bl	8004388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08e:	2b80      	cmp	r3, #128	; 0x80
 800a090:	d10e      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09c:	2b80      	cmp	r3, #128	; 0x80
 800a09e:	d107      	bne.n	800a0b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 ff28 	bl	800af00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b40      	cmp	r3, #64	; 0x40
 800a0bc:	d10e      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d107      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa53 	bl	800a582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0320 	and.w	r3, r3, #32
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d10e      	bne.n	800a108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0320 	and.w	r3, r3, #32
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d107      	bne.n	800a108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0220 	mvn.w	r2, #32
 800a100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fef2 	bl	800aeec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_TIM_IC_ConfigChannel+0x1e>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e088      	b.n	800a240 <HAL_TIM_IC_ConfigChannel+0x130>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d11b      	bne.n	800a174 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f000 fc30 	bl	800a9b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699a      	ldr	r2, [r3, #24]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 020c 	bic.w	r2, r2, #12
 800a15e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6999      	ldr	r1, [r3, #24]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	619a      	str	r2, [r3, #24]
 800a172:	e060      	b.n	800a236 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b04      	cmp	r3, #4
 800a178:	d11c      	bne.n	800a1b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6819      	ldr	r1, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f000 fca8 	bl	800aade <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a19c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6999      	ldr	r1, [r3, #24]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	021a      	lsls	r2, r3, #8
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	619a      	str	r2, [r3, #24]
 800a1b2:	e040      	b.n	800a236 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d11b      	bne.n	800a1f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6819      	ldr	r1, [r3, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f000 fcf5 	bl	800abb8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 020c 	bic.w	r2, r2, #12
 800a1dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69d9      	ldr	r1, [r3, #28]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	689a      	ldr	r2, [r3, #8]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	61da      	str	r2, [r3, #28]
 800a1f0:	e021      	b.n	800a236 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b0c      	cmp	r3, #12
 800a1f6:	d11c      	bne.n	800a232 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f000 fd12 	bl	800ac30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69da      	ldr	r2, [r3, #28]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a21a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	69d9      	ldr	r1, [r3, #28]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	021a      	lsls	r2, r3, #8
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	61da      	str	r2, [r3, #28]
 800a230:	e001      	b.n	800a236 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d101      	bne.n	800a266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a262:	2302      	movs	r3, #2
 800a264:	e0ae      	b.n	800a3c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b0c      	cmp	r3, #12
 800a272:	f200 809f 	bhi.w	800a3b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a2b1 	.word	0x0800a2b1
 800a280:	0800a3b5 	.word	0x0800a3b5
 800a284:	0800a3b5 	.word	0x0800a3b5
 800a288:	0800a3b5 	.word	0x0800a3b5
 800a28c:	0800a2f1 	.word	0x0800a2f1
 800a290:	0800a3b5 	.word	0x0800a3b5
 800a294:	0800a3b5 	.word	0x0800a3b5
 800a298:	0800a3b5 	.word	0x0800a3b5
 800a29c:	0800a333 	.word	0x0800a333
 800a2a0:	0800a3b5 	.word	0x0800a3b5
 800a2a4:	0800a3b5 	.word	0x0800a3b5
 800a2a8:	0800a3b5 	.word	0x0800a3b5
 800a2ac:	0800a373 	.word	0x0800a373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f9ee 	bl	800a698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699a      	ldr	r2, [r3, #24]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0208 	orr.w	r2, r2, #8
 800a2ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699a      	ldr	r2, [r3, #24]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 0204 	bic.w	r2, r2, #4
 800a2da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6999      	ldr	r1, [r3, #24]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	691a      	ldr	r2, [r3, #16]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	619a      	str	r2, [r3, #24]
      break;
 800a2ee:	e064      	b.n	800a3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fa34 	bl	800a764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	699a      	ldr	r2, [r3, #24]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6999      	ldr	r1, [r3, #24]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	021a      	lsls	r2, r3, #8
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	619a      	str	r2, [r3, #24]
      break;
 800a330:	e043      	b.n	800a3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fa7f 	bl	800a83c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	69da      	ldr	r2, [r3, #28]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0208 	orr.w	r2, r2, #8
 800a34c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69da      	ldr	r2, [r3, #28]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0204 	bic.w	r2, r2, #4
 800a35c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69d9      	ldr	r1, [r3, #28]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	61da      	str	r2, [r3, #28]
      break;
 800a370:	e023      	b.n	800a3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fac9 	bl	800a910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69da      	ldr	r2, [r3, #28]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69da      	ldr	r2, [r3, #28]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69d9      	ldr	r1, [r3, #28]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	021a      	lsls	r2, r3, #8
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	61da      	str	r2, [r3, #28]
      break;
 800a3b2:	e002      	b.n	800a3ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIM_ConfigClockSource+0x1c>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e0b4      	b.n	800a552 <HAL_TIM_ConfigClockSource+0x186>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a40e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a420:	d03e      	beq.n	800a4a0 <HAL_TIM_ConfigClockSource+0xd4>
 800a422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a426:	f200 8087 	bhi.w	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42e:	f000 8086 	beq.w	800a53e <HAL_TIM_ConfigClockSource+0x172>
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a436:	d87f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a438:	2b70      	cmp	r3, #112	; 0x70
 800a43a:	d01a      	beq.n	800a472 <HAL_TIM_ConfigClockSource+0xa6>
 800a43c:	2b70      	cmp	r3, #112	; 0x70
 800a43e:	d87b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a440:	2b60      	cmp	r3, #96	; 0x60
 800a442:	d050      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x11a>
 800a444:	2b60      	cmp	r3, #96	; 0x60
 800a446:	d877      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a448:	2b50      	cmp	r3, #80	; 0x50
 800a44a:	d03c      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0xfa>
 800a44c:	2b50      	cmp	r3, #80	; 0x50
 800a44e:	d873      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a450:	2b40      	cmp	r3, #64	; 0x40
 800a452:	d058      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x13a>
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d86f      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a458:	2b30      	cmp	r3, #48	; 0x30
 800a45a:	d064      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x15a>
 800a45c:	2b30      	cmp	r3, #48	; 0x30
 800a45e:	d86b      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a460:	2b20      	cmp	r3, #32
 800a462:	d060      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x15a>
 800a464:	2b20      	cmp	r3, #32
 800a466:	d867      	bhi.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05c      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x15a>
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d05a      	beq.n	800a526 <HAL_TIM_ConfigClockSource+0x15a>
 800a470:	e062      	b.n	800a538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	6899      	ldr	r1, [r3, #8]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f000 fc2d 	bl	800ace0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	609a      	str	r2, [r3, #8]
      break;
 800a49e:	e04f      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	6899      	ldr	r1, [r3, #8]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f000 fc16 	bl	800ace0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4c2:	609a      	str	r2, [r3, #8]
      break;
 800a4c4:	e03c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	6859      	ldr	r1, [r3, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 fad4 	bl	800aa80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2150      	movs	r1, #80	; 0x50
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fbe3 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a4e4:	e02c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 fb30 	bl	800ab58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2160      	movs	r1, #96	; 0x60
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fbd3 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a504:	e01c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6859      	ldr	r1, [r3, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	461a      	mov	r2, r3
 800a514:	f000 fab4 	bl	800aa80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2140      	movs	r1, #64	; 0x40
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fbc3 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a524:	e00c      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f000 fbba 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a536:	e003      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	e000      	b.n	800a540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a34      	ldr	r2, [pc, #208]	; (800a67c <TIM_Base_SetConfig+0xe4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00f      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b6:	d00b      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a31      	ldr	r2, [pc, #196]	; (800a680 <TIM_Base_SetConfig+0xe8>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d007      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a30      	ldr	r2, [pc, #192]	; (800a684 <TIM_Base_SetConfig+0xec>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <TIM_Base_SetConfig+0x38>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a2f      	ldr	r2, [pc, #188]	; (800a688 <TIM_Base_SetConfig+0xf0>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d108      	bne.n	800a5e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a25      	ldr	r2, [pc, #148]	; (800a67c <TIM_Base_SetConfig+0xe4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d01b      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5f0:	d017      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a22      	ldr	r2, [pc, #136]	; (800a680 <TIM_Base_SetConfig+0xe8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d013      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a21      	ldr	r2, [pc, #132]	; (800a684 <TIM_Base_SetConfig+0xec>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00f      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a20      	ldr	r2, [pc, #128]	; (800a688 <TIM_Base_SetConfig+0xf0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00b      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <TIM_Base_SetConfig+0xf4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d007      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <TIM_Base_SetConfig+0xf8>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d003      	beq.n	800a622 <TIM_Base_SetConfig+0x8a>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <TIM_Base_SetConfig+0xfc>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d108      	bne.n	800a634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	4313      	orrs	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a08      	ldr	r2, [pc, #32]	; (800a67c <TIM_Base_SetConfig+0xe4>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d103      	bne.n	800a668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	615a      	str	r2, [r3, #20]
}
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40010000 	.word	0x40010000
 800a680:	40000400 	.word	0x40000400
 800a684:	40000800 	.word	0x40000800
 800a688:	40000c00 	.word	0x40000c00
 800a68c:	40014000 	.word	0x40014000
 800a690:	40014400 	.word	0x40014400
 800a694:	40014800 	.word	0x40014800

0800a698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f023 0201 	bic.w	r2, r3, #1
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f023 0302 	bic.w	r3, r3, #2
 800a6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a1c      	ldr	r2, [pc, #112]	; (800a760 <TIM_OC1_SetConfig+0xc8>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d10c      	bne.n	800a70e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f023 0308 	bic.w	r3, r3, #8
 800a6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4313      	orrs	r3, r2
 800a704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f023 0304 	bic.w	r3, r3, #4
 800a70c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a13      	ldr	r2, [pc, #76]	; (800a760 <TIM_OC1_SetConfig+0xc8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d111      	bne.n	800a73a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4313      	orrs	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	621a      	str	r2, [r3, #32]
}
 800a754:	bf00      	nop
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	40010000 	.word	0x40010000

0800a764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	f023 0210 	bic.w	r2, r3, #16
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f023 0320 	bic.w	r3, r3, #32
 800a7ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	011b      	lsls	r3, r3, #4
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a1e      	ldr	r2, [pc, #120]	; (800a838 <TIM_OC2_SetConfig+0xd4>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d10d      	bne.n	800a7e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a15      	ldr	r2, [pc, #84]	; (800a838 <TIM_OC2_SetConfig+0xd4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d113      	bne.n	800a810 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	621a      	str	r2, [r3, #32]
}
 800a82a:	bf00      	nop
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40010000 	.word	0x40010000

0800a83c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f023 0303 	bic.w	r3, r3, #3
 800a872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a1d      	ldr	r2, [pc, #116]	; (800a90c <TIM_OC3_SetConfig+0xd0>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d10d      	bne.n	800a8b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a14      	ldr	r2, [pc, #80]	; (800a90c <TIM_OC3_SetConfig+0xd0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d113      	bne.n	800a8e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	011b      	lsls	r3, r3, #4
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	621a      	str	r2, [r3, #32]
}
 800a900:	bf00      	nop
 800a902:	371c      	adds	r7, #28
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	40010000 	.word	0x40010000

0800a910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	021b      	lsls	r3, r3, #8
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a95a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	031b      	lsls	r3, r3, #12
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	4313      	orrs	r3, r2
 800a966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a10      	ldr	r2, [pc, #64]	; (800a9ac <TIM_OC4_SetConfig+0x9c>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d109      	bne.n	800a984 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	019b      	lsls	r3, r3, #6
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	621a      	str	r2, [r3, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40010000 	.word	0x40010000

0800a9b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f023 0201 	bic.w	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4a24      	ldr	r2, [pc, #144]	; (800aa6c <TIM_TI1_SetConfig+0xbc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d013      	beq.n	800aa06 <TIM_TI1_SetConfig+0x56>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e4:	d00f      	beq.n	800aa06 <TIM_TI1_SetConfig+0x56>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a21      	ldr	r2, [pc, #132]	; (800aa70 <TIM_TI1_SetConfig+0xc0>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00b      	beq.n	800aa06 <TIM_TI1_SetConfig+0x56>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4a20      	ldr	r2, [pc, #128]	; (800aa74 <TIM_TI1_SetConfig+0xc4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d007      	beq.n	800aa06 <TIM_TI1_SetConfig+0x56>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4a1f      	ldr	r2, [pc, #124]	; (800aa78 <TIM_TI1_SetConfig+0xc8>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d003      	beq.n	800aa06 <TIM_TI1_SetConfig+0x56>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4a1e      	ldr	r2, [pc, #120]	; (800aa7c <TIM_TI1_SetConfig+0xcc>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d101      	bne.n	800aa0a <TIM_TI1_SetConfig+0x5a>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <TIM_TI1_SetConfig+0x5c>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d008      	beq.n	800aa22 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f023 0303 	bic.w	r3, r3, #3
 800aa16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e003      	b.n	800aa2a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f043 0301 	orr.w	r3, r3, #1
 800aa28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	011b      	lsls	r3, r3, #4
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f023 030a 	bic.w	r3, r3, #10
 800aa44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f003 030a 	and.w	r3, r3, #10
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	621a      	str	r2, [r3, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40010000 	.word	0x40010000
 800aa70:	40000400 	.word	0x40000400
 800aa74:	40000800 	.word	0x40000800
 800aa78:	40000c00 	.word	0x40000c00
 800aa7c:	40014000 	.word	0x40014000

0800aa80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0201 	bic.w	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f023 030a 	bic.w	r3, r3, #10
 800aabc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	621a      	str	r2, [r3, #32]
}
 800aad2:	bf00      	nop
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aade:	b480      	push	{r7}
 800aae0:	b087      	sub	sp, #28
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	f023 0210 	bic.w	r2, r3, #16
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	031b      	lsls	r3, r3, #12
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	621a      	str	r2, [r3, #32]
}
 800ab4c:	bf00      	nop
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f023 0210 	bic.w	r2, r3, #16
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	031b      	lsls	r3, r3, #12
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	621a      	str	r2, [r3, #32]
}
 800abac:	bf00      	nop
 800abae:	371c      	adds	r7, #28
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	011b      	lsls	r3, r3, #4
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ac08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	031b      	lsls	r3, r3, #12
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	031b      	lsls	r3, r3, #12
 800ac88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	f043 0307 	orr.w	r3, r3, #7
 800accc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	609a      	str	r2, [r3, #8]
}
 800acd4:	bf00      	nop
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	021a      	lsls	r2, r3, #8
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	609a      	str	r2, [r3, #8]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f003 031f 	and.w	r3, r3, #31
 800ad32:	2201      	movs	r2, #1
 800ad34:	fa02 f303 	lsl.w	r3, r2, r3
 800ad38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6a1a      	ldr	r2, [r3, #32]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	43db      	mvns	r3, r3
 800ad42:	401a      	ands	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6a1a      	ldr	r2, [r3, #32]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f003 031f 	and.w	r3, r3, #31
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	fa01 f303 	lsl.w	r3, r1, r3
 800ad58:	431a      	orrs	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
	...

0800ad6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d101      	bne.n	800ad84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad80:	2302      	movs	r3, #2
 800ad82:	e050      	b.n	800ae26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d018      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add0:	d013      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a18      	ldr	r2, [pc, #96]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d00e      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a16      	ldr	r2, [pc, #88]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d009      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a15      	ldr	r2, [pc, #84]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d004      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d10c      	bne.n	800ae14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	40010000 	.word	0x40010000
 800ae38:	40000400 	.word	0x40000400
 800ae3c:	40000800 	.word	0x40000800
 800ae40:	40000c00 	.word	0x40000c00
 800ae44:	40014000 	.word	0x40014000

0800ae48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d101      	bne.n	800ae64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae60:	2302      	movs	r3, #2
 800ae62:	e03d      	b.n	800aee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e03f      	b.n	800afa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fa fc1a 	bl	8005774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	; 0x24
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fdd5 	bl	800bb08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695a      	ldr	r2, [r3, #20]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2220      	movs	r2, #32
 800afa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b08a      	sub	sp, #40	; 0x28
 800afb2:	af02      	add	r7, sp, #8
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	603b      	str	r3, [r7, #0]
 800afba:	4613      	mov	r3, r2
 800afbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d17c      	bne.n	800b0c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <HAL_UART_Transmit+0x2c>
 800afd4:	88fb      	ldrh	r3, [r7, #6]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e075      	b.n	800b0ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_UART_Transmit+0x3e>
 800afe8:	2302      	movs	r3, #2
 800afea:	e06e      	b.n	800b0ca <HAL_UART_Transmit+0x11c>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2221      	movs	r2, #33	; 0x21
 800affe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b002:	f7fd f963 	bl	80082cc <HAL_GetTick>
 800b006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	88fa      	ldrh	r2, [r7, #6]
 800b00c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	88fa      	ldrh	r2, [r7, #6]
 800b012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01c:	d108      	bne.n	800b030 <HAL_UART_Transmit+0x82>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e003      	b.n	800b038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b040:	e02a      	b.n	800b098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2200      	movs	r2, #0
 800b04a:	2180      	movs	r1, #128	; 0x80
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fb15 	bl	800b67c <UART_WaitOnFlagUntilTimeout>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e036      	b.n	800b0ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10b      	bne.n	800b07a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	3302      	adds	r3, #2
 800b076:	61bb      	str	r3, [r7, #24]
 800b078:	e007      	b.n	800b08a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	3301      	adds	r3, #1
 800b088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b08e:	b29b      	uxth	r3, r3
 800b090:	3b01      	subs	r3, #1
 800b092:	b29a      	uxth	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1cf      	bne.n	800b042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2140      	movs	r1, #64	; 0x40
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 fae5 	bl	800b67c <UART_WaitOnFlagUntilTimeout>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e006      	b.n	800b0ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e000      	b.n	800b0ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b0c8:	2302      	movs	r3, #2
  }
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d11d      	bne.n	800b128 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_UART_Receive_IT+0x26>
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e016      	b.n	800b12a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_UART_Receive_IT+0x38>
 800b106:	2302      	movs	r3, #2
 800b108:	e00f      	b.n	800b12a <HAL_UART_Receive_IT+0x58>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	461a      	mov	r2, r3
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fb1a 	bl	800b758 <UART_Start_Receive_IT>
 800b124:	4603      	mov	r3, r0
 800b126:	e000      	b.n	800b12a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b128:	2302      	movs	r3, #2
  }
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b0ba      	sub	sp, #232	; 0xe8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b160:	2300      	movs	r3, #0
 800b162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10f      	bne.n	800b19a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <HAL_UART_IRQHandler+0x66>
 800b186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b18a:	f003 0320 	and.w	r3, r3, #32
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fbfd 	bl	800b992 <UART_Receive_IT>
      return;
 800b198:	e256      	b.n	800b648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b19a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 80de 	beq.w	800b360 <HAL_UART_IRQHandler+0x22c>
 800b1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80d1 	beq.w	800b360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <HAL_UART_IRQHandler+0xae>
 800b1ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	f043 0201 	orr.w	r2, r3, #1
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00b      	beq.n	800b206 <HAL_UART_IRQHandler+0xd2>
 800b1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fe:	f043 0202 	orr.w	r2, r3, #2
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00b      	beq.n	800b22a <HAL_UART_IRQHandler+0xf6>
 800b212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	f043 0204 	orr.w	r2, r3, #4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d011      	beq.n	800b25a <HAL_UART_IRQHandler+0x126>
 800b236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d105      	bne.n	800b24e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b252:	f043 0208 	orr.w	r2, r3, #8
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f000 81ed 	beq.w	800b63e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b268:	f003 0320 	and.w	r3, r3, #32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d008      	beq.n	800b282 <HAL_UART_IRQHandler+0x14e>
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b274:	f003 0320 	and.w	r3, r3, #32
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fb88 	bl	800b992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28c:	2b40      	cmp	r3, #64	; 0x40
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d103      	bne.n	800b2ae <HAL_UART_IRQHandler+0x17a>
 800b2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d04f      	beq.n	800b34e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fa90 	bl	800b7d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2be:	2b40      	cmp	r3, #64	; 0x40
 800b2c0:	d141      	bne.n	800b346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3314      	adds	r3, #20
 800b2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2d0:	e853 3f00 	ldrex	r3, [r3]
 800b2d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3314      	adds	r3, #20
 800b2ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1d9      	bne.n	800b2c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b312:	2b00      	cmp	r3, #0
 800b314:	d013      	beq.n	800b33e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31a:	4a7d      	ldr	r2, [pc, #500]	; (800b510 <HAL_UART_IRQHandler+0x3dc>)
 800b31c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd f9b5 	bl	8008692 <HAL_DMA_Abort_IT>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d016      	beq.n	800b35c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b33c:	e00e      	b.n	800b35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f986 	bl	800b650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b344:	e00a      	b.n	800b35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f982 	bl	800b650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b34c:	e006      	b.n	800b35c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f97e 	bl	800b650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b35a:	e170      	b.n	800b63e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35c:	bf00      	nop
    return;
 800b35e:	e16e      	b.n	800b63e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b364:	2b01      	cmp	r3, #1
 800b366:	f040 814a 	bne.w	800b5fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8143 	beq.w	800b5fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 813c 	beq.w	800b5fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60bb      	str	r3, [r7, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	60bb      	str	r3, [r7, #8]
 800b39a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	f040 80b4 	bne.w	800b514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8140 	beq.w	800b642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	f080 8139 	bcs.w	800b642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3e2:	f000 8088 	beq.w	800b4f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	330c      	adds	r3, #12
 800b3ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b3fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	330c      	adds	r3, #12
 800b40e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b41e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b42a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1d9      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3314      	adds	r3, #20
 800b438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b43c:	e853 3f00 	ldrex	r3, [r3]
 800b440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b444:	f023 0301 	bic.w	r3, r3, #1
 800b448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3314      	adds	r3, #20
 800b452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b45a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b45e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e1      	bne.n	800b432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3314      	adds	r3, #20
 800b474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b47e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3314      	adds	r3, #20
 800b48e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b492:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e3      	bne.n	800b46e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c6:	f023 0310 	bic.w	r3, r3, #16
 800b4ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	330c      	adds	r3, #12
 800b4d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b4da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e3      	bne.n	800b4b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fd f85e 	bl	80085b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	b29b      	uxth	r3, r3
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f8ac 	bl	800b664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b50c:	e099      	b.n	800b642 <HAL_UART_IRQHandler+0x50e>
 800b50e:	bf00      	nop
 800b510:	0800b89b 	.word	0x0800b89b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b528:	b29b      	uxth	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 808b 	beq.w	800b646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8086 	beq.w	800b646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	330c      	adds	r3, #12
 800b540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	330c      	adds	r3, #12
 800b55a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b55e:	647a      	str	r2, [r7, #68]	; 0x44
 800b560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e3      	bne.n	800b53a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3314      	adds	r3, #20
 800b578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	623b      	str	r3, [r7, #32]
   return(result);
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	f023 0301 	bic.w	r3, r3, #1
 800b588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3314      	adds	r3, #20
 800b592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b596:	633a      	str	r2, [r7, #48]	; 0x30
 800b598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e3      	bne.n	800b572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	330c      	adds	r3, #12
 800b5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f023 0310 	bic.w	r3, r3, #16
 800b5ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	330c      	adds	r3, #12
 800b5d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b5dc:	61fa      	str	r2, [r7, #28]
 800b5de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	69b9      	ldr	r1, [r7, #24]
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e3      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f834 	bl	800b664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5fc:	e023      	b.n	800b646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b606:	2b00      	cmp	r3, #0
 800b608:	d009      	beq.n	800b61e <HAL_UART_IRQHandler+0x4ea>
 800b60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f953 	bl	800b8c2 <UART_Transmit_IT>
    return;
 800b61c:	e014      	b.n	800b648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00e      	beq.n	800b648 <HAL_UART_IRQHandler+0x514>
 800b62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d008      	beq.n	800b648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f993 	bl	800b962 <UART_EndTransmit_IT>
    return;
 800b63c:	e004      	b.n	800b648 <HAL_UART_IRQHandler+0x514>
    return;
 800b63e:	bf00      	nop
 800b640:	e002      	b.n	800b648 <HAL_UART_IRQHandler+0x514>
      return;
 800b642:	bf00      	nop
 800b644:	e000      	b.n	800b648 <HAL_UART_IRQHandler+0x514>
      return;
 800b646:	bf00      	nop
  }
}
 800b648:	37e8      	adds	r7, #232	; 0xe8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop

0800b650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b090      	sub	sp, #64	; 0x40
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	603b      	str	r3, [r7, #0]
 800b688:	4613      	mov	r3, r2
 800b68a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b68c:	e050      	b.n	800b730 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b694:	d04c      	beq.n	800b730 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b69c:	f7fc fe16 	bl	80082cc <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d241      	bcs.n	800b730 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	330c      	adds	r3, #12
 800b6b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	330c      	adds	r3, #12
 800b6ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6cc:	637a      	str	r2, [r7, #52]	; 0x34
 800b6ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6d4:	e841 2300 	strex	r3, r2, [r1]
 800b6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e5      	bne.n	800b6ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3314      	adds	r3, #20
 800b6e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f023 0301 	bic.w	r3, r3, #1
 800b6f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3314      	adds	r3, #20
 800b6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b700:	623a      	str	r2, [r7, #32]
 800b702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	69f9      	ldr	r1, [r7, #28]
 800b706:	6a3a      	ldr	r2, [r7, #32]
 800b708:	e841 2300 	strex	r3, r2, [r1]
 800b70c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e5      	bne.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2220      	movs	r2, #32
 800b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2220      	movs	r2, #32
 800b720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e00f      	b.n	800b750 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	4013      	ands	r3, r2
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	bf0c      	ite	eq
 800b740:	2301      	moveq	r3, #1
 800b742:	2300      	movne	r3, #0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	461a      	mov	r2, r3
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d09f      	beq.n	800b68e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3740      	adds	r7, #64	; 0x40
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	88fa      	ldrh	r2, [r7, #6]
 800b770:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2222      	movs	r2, #34	; 0x22
 800b782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	695a      	ldr	r2, [r3, #20]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f042 0201 	orr.w	r2, r2, #1
 800b7b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f042 0220 	orr.w	r2, r2, #32
 800b7c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b095      	sub	sp, #84	; 0x54
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e6:	e853 3f00 	ldrex	r3, [r3]
 800b7ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	330c      	adds	r3, #12
 800b7fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7fc:	643a      	str	r2, [r7, #64]	; 0x40
 800b7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b804:	e841 2300 	strex	r3, r2, [r1]
 800b808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1e5      	bne.n	800b7dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3314      	adds	r3, #20
 800b816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	64bb      	str	r3, [r7, #72]	; 0x48
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3314      	adds	r3, #20
 800b82e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b830:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b832:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b838:	e841 2300 	strex	r3, r2, [r1]
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1e5      	bne.n	800b810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d119      	bne.n	800b880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	e853 3f00 	ldrex	r3, [r3]
 800b85a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f023 0310 	bic.w	r3, r3, #16
 800b862:	647b      	str	r3, [r7, #68]	; 0x44
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	330c      	adds	r3, #12
 800b86a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b86c:	61ba      	str	r2, [r7, #24]
 800b86e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b870:	6979      	ldr	r1, [r7, #20]
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	613b      	str	r3, [r7, #16]
   return(result);
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e5      	bne.n	800b84c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b88e:	bf00      	nop
 800b890:	3754      	adds	r7, #84	; 0x54
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff fecb 	bl	800b650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b21      	cmp	r3, #33	; 0x21
 800b8d4:	d13e      	bne.n	800b954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8de:	d114      	bne.n	800b90a <UART_Transmit_IT+0x48>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d110      	bne.n	800b90a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	1c9a      	adds	r2, r3, #2
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	621a      	str	r2, [r3, #32]
 800b908:	e008      	b.n	800b91c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	1c59      	adds	r1, r3, #1
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	6211      	str	r1, [r2, #32]
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b920:	b29b      	uxth	r3, r3
 800b922:	3b01      	subs	r3, #1
 800b924:	b29b      	uxth	r3, r3
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4619      	mov	r1, r3
 800b92a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10f      	bne.n	800b950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b93e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b94e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	e000      	b.n	800b956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b954:	2302      	movs	r3, #2
  }
}
 800b956:	4618      	mov	r0, r3
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7f8 fca0 	bl	80042c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b08c      	sub	sp, #48	; 0x30
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b22      	cmp	r3, #34	; 0x22
 800b9a4:	f040 80ab 	bne.w	800bafe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b0:	d117      	bne.n	800b9e2 <UART_Receive_IT+0x50>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d113      	bne.n	800b9e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	629a      	str	r2, [r3, #40]	; 0x28
 800b9e0:	e026      	b.n	800ba30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f4:	d007      	beq.n	800ba06 <UART_Receive_IT+0x74>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <UART_Receive_IT+0x82>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	e008      	b.n	800ba26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d15a      	bne.n	800bafa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f022 0220 	bic.w	r2, r2, #32
 800ba52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	695a      	ldr	r2, [r3, #20]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0201 	bic.w	r2, r2, #1
 800ba72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d135      	bne.n	800baf0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	330c      	adds	r3, #12
 800ba90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	613b      	str	r3, [r7, #16]
   return(result);
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f023 0310 	bic.w	r3, r3, #16
 800baa0:	627b      	str	r3, [r7, #36]	; 0x24
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baaa:	623a      	str	r2, [r7, #32]
 800baac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	69f9      	ldr	r1, [r7, #28]
 800bab0:	6a3a      	ldr	r2, [r7, #32]
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e5      	bne.n	800ba8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0310 	and.w	r3, r3, #16
 800bac8:	2b10      	cmp	r3, #16
 800baca:	d10a      	bne.n	800bae2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	60fb      	str	r3, [r7, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff fdbb 	bl	800b664 <HAL_UARTEx_RxEventCallback>
 800baee:	e002      	b.n	800baf6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7f8 fb75 	bl	80041e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	e002      	b.n	800bb00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e000      	b.n	800bb00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bafe:	2302      	movs	r3, #2
  }
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3730      	adds	r7, #48	; 0x30
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb0c:	b0c0      	sub	sp, #256	; 0x100
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb24:	68d9      	ldr	r1, [r3, #12]
 800bb26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	ea40 0301 	orr.w	r3, r0, r1
 800bb30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	431a      	orrs	r2, r3
 800bb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb60:	f021 010c 	bic.w	r1, r1, #12
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb6e:	430b      	orrs	r3, r1
 800bb70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb82:	6999      	ldr	r1, [r3, #24]
 800bb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	ea40 0301 	orr.w	r3, r0, r1
 800bb8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	4b8f      	ldr	r3, [pc, #572]	; (800bdd4 <UART_SetConfig+0x2cc>)
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d005      	beq.n	800bba8 <UART_SetConfig+0xa0>
 800bb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b8d      	ldr	r3, [pc, #564]	; (800bdd8 <UART_SetConfig+0x2d0>)
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d104      	bne.n	800bbb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bba8:	f7fd fc02 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 800bbac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bbb0:	e003      	b.n	800bbba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbb2:	f7fd fbe9 	bl	8009388 <HAL_RCC_GetPCLK1Freq>
 800bbb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbc4:	f040 810c 	bne.w	800bde0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bbd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bbd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bbda:	4622      	mov	r2, r4
 800bbdc:	462b      	mov	r3, r5
 800bbde:	1891      	adds	r1, r2, r2
 800bbe0:	65b9      	str	r1, [r7, #88]	; 0x58
 800bbe2:	415b      	adcs	r3, r3
 800bbe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bbea:	4621      	mov	r1, r4
 800bbec:	eb12 0801 	adds.w	r8, r2, r1
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	eb43 0901 	adc.w	r9, r3, r1
 800bbf6:	f04f 0200 	mov.w	r2, #0
 800bbfa:	f04f 0300 	mov.w	r3, #0
 800bbfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc0a:	4690      	mov	r8, r2
 800bc0c:	4699      	mov	r9, r3
 800bc0e:	4623      	mov	r3, r4
 800bc10:	eb18 0303 	adds.w	r3, r8, r3
 800bc14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc18:	462b      	mov	r3, r5
 800bc1a:	eb49 0303 	adc.w	r3, r9, r3
 800bc1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc36:	460b      	mov	r3, r1
 800bc38:	18db      	adds	r3, r3, r3
 800bc3a:	653b      	str	r3, [r7, #80]	; 0x50
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	eb42 0303 	adc.w	r3, r2, r3
 800bc42:	657b      	str	r3, [r7, #84]	; 0x54
 800bc44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc4c:	f7f4 fffc 	bl	8000c48 <__aeabi_uldivmod>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4b61      	ldr	r3, [pc, #388]	; (800bddc <UART_SetConfig+0x2d4>)
 800bc56:	fba3 2302 	umull	r2, r3, r3, r2
 800bc5a:	095b      	lsrs	r3, r3, #5
 800bc5c:	011c      	lsls	r4, r3, #4
 800bc5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc70:	4642      	mov	r2, r8
 800bc72:	464b      	mov	r3, r9
 800bc74:	1891      	adds	r1, r2, r2
 800bc76:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc78:	415b      	adcs	r3, r3
 800bc7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc80:	4641      	mov	r1, r8
 800bc82:	eb12 0a01 	adds.w	sl, r2, r1
 800bc86:	4649      	mov	r1, r9
 800bc88:	eb43 0b01 	adc.w	fp, r3, r1
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	f04f 0300 	mov.w	r3, #0
 800bc94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bca0:	4692      	mov	sl, r2
 800bca2:	469b      	mov	fp, r3
 800bca4:	4643      	mov	r3, r8
 800bca6:	eb1a 0303 	adds.w	r3, sl, r3
 800bcaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcae:	464b      	mov	r3, r9
 800bcb0:	eb4b 0303 	adc.w	r3, fp, r3
 800bcb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bcc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bccc:	460b      	mov	r3, r1
 800bcce:	18db      	adds	r3, r3, r3
 800bcd0:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	eb42 0303 	adc.w	r3, r2, r3
 800bcd8:	647b      	str	r3, [r7, #68]	; 0x44
 800bcda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bcde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bce2:	f7f4 ffb1 	bl	8000c48 <__aeabi_uldivmod>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4611      	mov	r1, r2
 800bcec:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <UART_SetConfig+0x2d4>)
 800bcee:	fba3 2301 	umull	r2, r3, r3, r1
 800bcf2:	095b      	lsrs	r3, r3, #5
 800bcf4:	2264      	movs	r2, #100	; 0x64
 800bcf6:	fb02 f303 	mul.w	r3, r2, r3
 800bcfa:	1acb      	subs	r3, r1, r3
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd02:	4b36      	ldr	r3, [pc, #216]	; (800bddc <UART_SetConfig+0x2d4>)
 800bd04:	fba3 2302 	umull	r2, r3, r3, r2
 800bd08:	095b      	lsrs	r3, r3, #5
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd10:	441c      	add	r4, r3
 800bd12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	1891      	adds	r1, r2, r2
 800bd2a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd2c:	415b      	adcs	r3, r3
 800bd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd34:	4641      	mov	r1, r8
 800bd36:	1851      	adds	r1, r2, r1
 800bd38:	6339      	str	r1, [r7, #48]	; 0x30
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	414b      	adcs	r3, r1
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd40:	f04f 0200 	mov.w	r2, #0
 800bd44:	f04f 0300 	mov.w	r3, #0
 800bd48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd4c:	4659      	mov	r1, fp
 800bd4e:	00cb      	lsls	r3, r1, #3
 800bd50:	4651      	mov	r1, sl
 800bd52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd56:	4651      	mov	r1, sl
 800bd58:	00ca      	lsls	r2, r1, #3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4642      	mov	r2, r8
 800bd62:	189b      	adds	r3, r3, r2
 800bd64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd68:	464b      	mov	r3, r9
 800bd6a:	460a      	mov	r2, r1
 800bd6c:	eb42 0303 	adc.w	r3, r2, r3
 800bd70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd88:	460b      	mov	r3, r1
 800bd8a:	18db      	adds	r3, r3, r3
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8e:	4613      	mov	r3, r2
 800bd90:	eb42 0303 	adc.w	r3, r2, r3
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd9e:	f7f4 ff53 	bl	8000c48 <__aeabi_uldivmod>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <UART_SetConfig+0x2d4>)
 800bda8:	fba3 1302 	umull	r1, r3, r3, r2
 800bdac:	095b      	lsrs	r3, r3, #5
 800bdae:	2164      	movs	r1, #100	; 0x64
 800bdb0:	fb01 f303 	mul.w	r3, r1, r3
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	3332      	adds	r3, #50	; 0x32
 800bdba:	4a08      	ldr	r2, [pc, #32]	; (800bddc <UART_SetConfig+0x2d4>)
 800bdbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	f003 0207 	and.w	r2, r3, #7
 800bdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4422      	add	r2, r4
 800bdce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bdd0:	e105      	b.n	800bfde <UART_SetConfig+0x4d6>
 800bdd2:	bf00      	nop
 800bdd4:	40011000 	.word	0x40011000
 800bdd8:	40011400 	.word	0x40011400
 800bddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bde0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bdee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bdf2:	4642      	mov	r2, r8
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	1891      	adds	r1, r2, r2
 800bdf8:	6239      	str	r1, [r7, #32]
 800bdfa:	415b      	adcs	r3, r3
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be02:	4641      	mov	r1, r8
 800be04:	1854      	adds	r4, r2, r1
 800be06:	4649      	mov	r1, r9
 800be08:	eb43 0501 	adc.w	r5, r3, r1
 800be0c:	f04f 0200 	mov.w	r2, #0
 800be10:	f04f 0300 	mov.w	r3, #0
 800be14:	00eb      	lsls	r3, r5, #3
 800be16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be1a:	00e2      	lsls	r2, r4, #3
 800be1c:	4614      	mov	r4, r2
 800be1e:	461d      	mov	r5, r3
 800be20:	4643      	mov	r3, r8
 800be22:	18e3      	adds	r3, r4, r3
 800be24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be28:	464b      	mov	r3, r9
 800be2a:	eb45 0303 	adc.w	r3, r5, r3
 800be2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be42:	f04f 0200 	mov.w	r2, #0
 800be46:	f04f 0300 	mov.w	r3, #0
 800be4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be4e:	4629      	mov	r1, r5
 800be50:	008b      	lsls	r3, r1, #2
 800be52:	4621      	mov	r1, r4
 800be54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be58:	4621      	mov	r1, r4
 800be5a:	008a      	lsls	r2, r1, #2
 800be5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be60:	f7f4 fef2 	bl	8000c48 <__aeabi_uldivmod>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4b60      	ldr	r3, [pc, #384]	; (800bfec <UART_SetConfig+0x4e4>)
 800be6a:	fba3 2302 	umull	r2, r3, r3, r2
 800be6e:	095b      	lsrs	r3, r3, #5
 800be70:	011c      	lsls	r4, r3, #4
 800be72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be76:	2200      	movs	r2, #0
 800be78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be84:	4642      	mov	r2, r8
 800be86:	464b      	mov	r3, r9
 800be88:	1891      	adds	r1, r2, r2
 800be8a:	61b9      	str	r1, [r7, #24]
 800be8c:	415b      	adcs	r3, r3
 800be8e:	61fb      	str	r3, [r7, #28]
 800be90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be94:	4641      	mov	r1, r8
 800be96:	1851      	adds	r1, r2, r1
 800be98:	6139      	str	r1, [r7, #16]
 800be9a:	4649      	mov	r1, r9
 800be9c:	414b      	adcs	r3, r1
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800beac:	4659      	mov	r1, fp
 800beae:	00cb      	lsls	r3, r1, #3
 800beb0:	4651      	mov	r1, sl
 800beb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beb6:	4651      	mov	r1, sl
 800beb8:	00ca      	lsls	r2, r1, #3
 800beba:	4610      	mov	r0, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	4642      	mov	r2, r8
 800bec2:	189b      	adds	r3, r3, r2
 800bec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bec8:	464b      	mov	r3, r9
 800beca:	460a      	mov	r2, r1
 800becc:	eb42 0303 	adc.w	r3, r2, r3
 800bed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bede:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	f04f 0300 	mov.w	r3, #0
 800bee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800beec:	4649      	mov	r1, r9
 800beee:	008b      	lsls	r3, r1, #2
 800bef0:	4641      	mov	r1, r8
 800bef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bef6:	4641      	mov	r1, r8
 800bef8:	008a      	lsls	r2, r1, #2
 800befa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800befe:	f7f4 fea3 	bl	8000c48 <__aeabi_uldivmod>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4b39      	ldr	r3, [pc, #228]	; (800bfec <UART_SetConfig+0x4e4>)
 800bf08:	fba3 1302 	umull	r1, r3, r3, r2
 800bf0c:	095b      	lsrs	r3, r3, #5
 800bf0e:	2164      	movs	r1, #100	; 0x64
 800bf10:	fb01 f303 	mul.w	r3, r1, r3
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	011b      	lsls	r3, r3, #4
 800bf18:	3332      	adds	r3, #50	; 0x32
 800bf1a:	4a34      	ldr	r2, [pc, #208]	; (800bfec <UART_SetConfig+0x4e4>)
 800bf1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf20:	095b      	lsrs	r3, r3, #5
 800bf22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf26:	441c      	add	r4, r3
 800bf28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	673b      	str	r3, [r7, #112]	; 0x70
 800bf30:	677a      	str	r2, [r7, #116]	; 0x74
 800bf32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf36:	4642      	mov	r2, r8
 800bf38:	464b      	mov	r3, r9
 800bf3a:	1891      	adds	r1, r2, r2
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	415b      	adcs	r3, r3
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf46:	4641      	mov	r1, r8
 800bf48:	1851      	adds	r1, r2, r1
 800bf4a:	6039      	str	r1, [r7, #0]
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	414b      	adcs	r3, r1
 800bf50:	607b      	str	r3, [r7, #4]
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf5e:	4659      	mov	r1, fp
 800bf60:	00cb      	lsls	r3, r1, #3
 800bf62:	4651      	mov	r1, sl
 800bf64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf68:	4651      	mov	r1, sl
 800bf6a:	00ca      	lsls	r2, r1, #3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4603      	mov	r3, r0
 800bf72:	4642      	mov	r2, r8
 800bf74:	189b      	adds	r3, r3, r2
 800bf76:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf78:	464b      	mov	r3, r9
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	eb42 0303 	adc.w	r3, r2, r3
 800bf80:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	663b      	str	r3, [r7, #96]	; 0x60
 800bf8c:	667a      	str	r2, [r7, #100]	; 0x64
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	008b      	lsls	r3, r1, #2
 800bf9e:	4641      	mov	r1, r8
 800bfa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfa4:	4641      	mov	r1, r8
 800bfa6:	008a      	lsls	r2, r1, #2
 800bfa8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bfac:	f7f4 fe4c 	bl	8000c48 <__aeabi_uldivmod>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4b0d      	ldr	r3, [pc, #52]	; (800bfec <UART_SetConfig+0x4e4>)
 800bfb6:	fba3 1302 	umull	r1, r3, r3, r2
 800bfba:	095b      	lsrs	r3, r3, #5
 800bfbc:	2164      	movs	r1, #100	; 0x64
 800bfbe:	fb01 f303 	mul.w	r3, r1, r3
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	3332      	adds	r3, #50	; 0x32
 800bfc8:	4a08      	ldr	r2, [pc, #32]	; (800bfec <UART_SetConfig+0x4e4>)
 800bfca:	fba2 2303 	umull	r2, r3, r2, r3
 800bfce:	095b      	lsrs	r3, r3, #5
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4422      	add	r2, r4
 800bfdc:	609a      	str	r2, [r3, #8]
}
 800bfde:	bf00      	nop
 800bfe0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfea:	bf00      	nop
 800bfec:	51eb851f 	.word	0x51eb851f

0800bff0 <__errno>:
 800bff0:	4b01      	ldr	r3, [pc, #4]	; (800bff8 <__errno+0x8>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	20000084 	.word	0x20000084

0800bffc <_fclose_r>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	4605      	mov	r5, r0
 800c000:	460c      	mov	r4, r1
 800c002:	b911      	cbnz	r1, 800c00a <_fclose_r+0xe>
 800c004:	2600      	movs	r6, #0
 800c006:	4630      	mov	r0, r6
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	b118      	cbz	r0, 800c014 <_fclose_r+0x18>
 800c00c:	6983      	ldr	r3, [r0, #24]
 800c00e:	b90b      	cbnz	r3, 800c014 <_fclose_r+0x18>
 800c010:	f000 fa18 	bl	800c444 <__sinit>
 800c014:	4b2c      	ldr	r3, [pc, #176]	; (800c0c8 <_fclose_r+0xcc>)
 800c016:	429c      	cmp	r4, r3
 800c018:	d114      	bne.n	800c044 <_fclose_r+0x48>
 800c01a:	686c      	ldr	r4, [r5, #4]
 800c01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c01e:	07d8      	lsls	r0, r3, #31
 800c020:	d405      	bmi.n	800c02e <_fclose_r+0x32>
 800c022:	89a3      	ldrh	r3, [r4, #12]
 800c024:	0599      	lsls	r1, r3, #22
 800c026:	d402      	bmi.n	800c02e <_fclose_r+0x32>
 800c028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02a:	f000 fbfd 	bl	800c828 <__retarget_lock_acquire_recursive>
 800c02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c032:	b98b      	cbnz	r3, 800c058 <_fclose_r+0x5c>
 800c034:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800c036:	f016 0601 	ands.w	r6, r6, #1
 800c03a:	d1e3      	bne.n	800c004 <_fclose_r+0x8>
 800c03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03e:	f000 fbf4 	bl	800c82a <__retarget_lock_release_recursive>
 800c042:	e7e0      	b.n	800c006 <_fclose_r+0xa>
 800c044:	4b21      	ldr	r3, [pc, #132]	; (800c0cc <_fclose_r+0xd0>)
 800c046:	429c      	cmp	r4, r3
 800c048:	d101      	bne.n	800c04e <_fclose_r+0x52>
 800c04a:	68ac      	ldr	r4, [r5, #8]
 800c04c:	e7e6      	b.n	800c01c <_fclose_r+0x20>
 800c04e:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <_fclose_r+0xd4>)
 800c050:	429c      	cmp	r4, r3
 800c052:	bf08      	it	eq
 800c054:	68ec      	ldreq	r4, [r5, #12]
 800c056:	e7e1      	b.n	800c01c <_fclose_r+0x20>
 800c058:	4621      	mov	r1, r4
 800c05a:	4628      	mov	r0, r5
 800c05c:	f000 f842 	bl	800c0e4 <__sflush_r>
 800c060:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c062:	4606      	mov	r6, r0
 800c064:	b133      	cbz	r3, 800c074 <_fclose_r+0x78>
 800c066:	6a21      	ldr	r1, [r4, #32]
 800c068:	4628      	mov	r0, r5
 800c06a:	4798      	blx	r3
 800c06c:	2800      	cmp	r0, #0
 800c06e:	bfb8      	it	lt
 800c070:	f04f 36ff 	movlt.w	r6, #4294967295
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	061a      	lsls	r2, r3, #24
 800c078:	d503      	bpl.n	800c082 <_fclose_r+0x86>
 800c07a:	6921      	ldr	r1, [r4, #16]
 800c07c:	4628      	mov	r0, r5
 800c07e:	f000 fc51 	bl	800c924 <_free_r>
 800c082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c084:	b141      	cbz	r1, 800c098 <_fclose_r+0x9c>
 800c086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c08a:	4299      	cmp	r1, r3
 800c08c:	d002      	beq.n	800c094 <_fclose_r+0x98>
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 fc48 	bl	800c924 <_free_r>
 800c094:	2300      	movs	r3, #0
 800c096:	6363      	str	r3, [r4, #52]	; 0x34
 800c098:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c09a:	b121      	cbz	r1, 800c0a6 <_fclose_r+0xaa>
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 fc41 	bl	800c924 <_free_r>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c0a6:	f000 f9b5 	bl	800c414 <__sfp_lock_acquire>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0b0:	07db      	lsls	r3, r3, #31
 800c0b2:	d402      	bmi.n	800c0ba <_fclose_r+0xbe>
 800c0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0b6:	f000 fbb8 	bl	800c82a <__retarget_lock_release_recursive>
 800c0ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0bc:	f000 fbb3 	bl	800c826 <__retarget_lock_close_recursive>
 800c0c0:	f000 f9ae 	bl	800c420 <__sfp_lock_release>
 800c0c4:	e79f      	b.n	800c006 <_fclose_r+0xa>
 800c0c6:	bf00      	nop
 800c0c8:	080107f4 	.word	0x080107f4
 800c0cc:	08010814 	.word	0x08010814
 800c0d0:	080107d4 	.word	0x080107d4

0800c0d4 <fclose>:
 800c0d4:	4b02      	ldr	r3, [pc, #8]	; (800c0e0 <fclose+0xc>)
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	f7ff bf8f 	b.w	800bffc <_fclose_r>
 800c0de:	bf00      	nop
 800c0e0:	20000084 	.word	0x20000084

0800c0e4 <__sflush_r>:
 800c0e4:	898a      	ldrh	r2, [r1, #12]
 800c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	0710      	lsls	r0, r2, #28
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	d458      	bmi.n	800c1a4 <__sflush_r+0xc0>
 800c0f2:	684b      	ldr	r3, [r1, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dc05      	bgt.n	800c104 <__sflush_r+0x20>
 800c0f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dc02      	bgt.n	800c104 <__sflush_r+0x20>
 800c0fe:	2000      	movs	r0, #0
 800c100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c106:	2e00      	cmp	r6, #0
 800c108:	d0f9      	beq.n	800c0fe <__sflush_r+0x1a>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c110:	682f      	ldr	r7, [r5, #0]
 800c112:	602b      	str	r3, [r5, #0]
 800c114:	d032      	beq.n	800c17c <__sflush_r+0x98>
 800c116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	075a      	lsls	r2, r3, #29
 800c11c:	d505      	bpl.n	800c12a <__sflush_r+0x46>
 800c11e:	6863      	ldr	r3, [r4, #4]
 800c120:	1ac0      	subs	r0, r0, r3
 800c122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c124:	b10b      	cbz	r3, 800c12a <__sflush_r+0x46>
 800c126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c128:	1ac0      	subs	r0, r0, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	4602      	mov	r2, r0
 800c12e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c130:	6a21      	ldr	r1, [r4, #32]
 800c132:	4628      	mov	r0, r5
 800c134:	47b0      	blx	r6
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	d106      	bne.n	800c14a <__sflush_r+0x66>
 800c13c:	6829      	ldr	r1, [r5, #0]
 800c13e:	291d      	cmp	r1, #29
 800c140:	d82c      	bhi.n	800c19c <__sflush_r+0xb8>
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <__sflush_r+0x108>)
 800c144:	40ca      	lsrs	r2, r1
 800c146:	07d6      	lsls	r6, r2, #31
 800c148:	d528      	bpl.n	800c19c <__sflush_r+0xb8>
 800c14a:	2200      	movs	r2, #0
 800c14c:	6062      	str	r2, [r4, #4]
 800c14e:	04d9      	lsls	r1, r3, #19
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	d504      	bpl.n	800c160 <__sflush_r+0x7c>
 800c156:	1c42      	adds	r2, r0, #1
 800c158:	d101      	bne.n	800c15e <__sflush_r+0x7a>
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	b903      	cbnz	r3, 800c160 <__sflush_r+0x7c>
 800c15e:	6560      	str	r0, [r4, #84]	; 0x54
 800c160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c162:	602f      	str	r7, [r5, #0]
 800c164:	2900      	cmp	r1, #0
 800c166:	d0ca      	beq.n	800c0fe <__sflush_r+0x1a>
 800c168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c16c:	4299      	cmp	r1, r3
 800c16e:	d002      	beq.n	800c176 <__sflush_r+0x92>
 800c170:	4628      	mov	r0, r5
 800c172:	f000 fbd7 	bl	800c924 <_free_r>
 800c176:	2000      	movs	r0, #0
 800c178:	6360      	str	r0, [r4, #52]	; 0x34
 800c17a:	e7c1      	b.n	800c100 <__sflush_r+0x1c>
 800c17c:	6a21      	ldr	r1, [r4, #32]
 800c17e:	2301      	movs	r3, #1
 800c180:	4628      	mov	r0, r5
 800c182:	47b0      	blx	r6
 800c184:	1c41      	adds	r1, r0, #1
 800c186:	d1c7      	bne.n	800c118 <__sflush_r+0x34>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0c4      	beq.n	800c118 <__sflush_r+0x34>
 800c18e:	2b1d      	cmp	r3, #29
 800c190:	d001      	beq.n	800c196 <__sflush_r+0xb2>
 800c192:	2b16      	cmp	r3, #22
 800c194:	d101      	bne.n	800c19a <__sflush_r+0xb6>
 800c196:	602f      	str	r7, [r5, #0]
 800c198:	e7b1      	b.n	800c0fe <__sflush_r+0x1a>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	e7ad      	b.n	800c100 <__sflush_r+0x1c>
 800c1a4:	690f      	ldr	r7, [r1, #16]
 800c1a6:	2f00      	cmp	r7, #0
 800c1a8:	d0a9      	beq.n	800c0fe <__sflush_r+0x1a>
 800c1aa:	0793      	lsls	r3, r2, #30
 800c1ac:	680e      	ldr	r6, [r1, #0]
 800c1ae:	bf08      	it	eq
 800c1b0:	694b      	ldreq	r3, [r1, #20]
 800c1b2:	600f      	str	r7, [r1, #0]
 800c1b4:	bf18      	it	ne
 800c1b6:	2300      	movne	r3, #0
 800c1b8:	eba6 0807 	sub.w	r8, r6, r7
 800c1bc:	608b      	str	r3, [r1, #8]
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	dd9c      	ble.n	800c0fe <__sflush_r+0x1a>
 800c1c4:	6a21      	ldr	r1, [r4, #32]
 800c1c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1c8:	4643      	mov	r3, r8
 800c1ca:	463a      	mov	r2, r7
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b0      	blx	r6
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	dc06      	bgt.n	800c1e2 <__sflush_r+0xfe>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	e78e      	b.n	800c100 <__sflush_r+0x1c>
 800c1e2:	4407      	add	r7, r0
 800c1e4:	eba8 0800 	sub.w	r8, r8, r0
 800c1e8:	e7e9      	b.n	800c1be <__sflush_r+0xda>
 800c1ea:	bf00      	nop
 800c1ec:	20400001 	.word	0x20400001

0800c1f0 <_fflush_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	690b      	ldr	r3, [r1, #16]
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	b913      	cbnz	r3, 800c200 <_fflush_r+0x10>
 800c1fa:	2500      	movs	r5, #0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	b118      	cbz	r0, 800c20a <_fflush_r+0x1a>
 800c202:	6983      	ldr	r3, [r0, #24]
 800c204:	b90b      	cbnz	r3, 800c20a <_fflush_r+0x1a>
 800c206:	f000 f91d 	bl	800c444 <__sinit>
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <_fflush_r+0x6c>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d11b      	bne.n	800c248 <_fflush_r+0x58>
 800c210:	686c      	ldr	r4, [r5, #4]
 800c212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0ef      	beq.n	800c1fa <_fflush_r+0xa>
 800c21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c21c:	07d0      	lsls	r0, r2, #31
 800c21e:	d404      	bmi.n	800c22a <_fflush_r+0x3a>
 800c220:	0599      	lsls	r1, r3, #22
 800c222:	d402      	bmi.n	800c22a <_fflush_r+0x3a>
 800c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c226:	f000 faff 	bl	800c828 <__retarget_lock_acquire_recursive>
 800c22a:	4628      	mov	r0, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7ff ff59 	bl	800c0e4 <__sflush_r>
 800c232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c234:	07da      	lsls	r2, r3, #31
 800c236:	4605      	mov	r5, r0
 800c238:	d4e0      	bmi.n	800c1fc <_fflush_r+0xc>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	d4dd      	bmi.n	800c1fc <_fflush_r+0xc>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f000 faf2 	bl	800c82a <__retarget_lock_release_recursive>
 800c246:	e7d9      	b.n	800c1fc <_fflush_r+0xc>
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <_fflush_r+0x70>)
 800c24a:	429c      	cmp	r4, r3
 800c24c:	d101      	bne.n	800c252 <_fflush_r+0x62>
 800c24e:	68ac      	ldr	r4, [r5, #8]
 800c250:	e7df      	b.n	800c212 <_fflush_r+0x22>
 800c252:	4b04      	ldr	r3, [pc, #16]	; (800c264 <_fflush_r+0x74>)
 800c254:	429c      	cmp	r4, r3
 800c256:	bf08      	it	eq
 800c258:	68ec      	ldreq	r4, [r5, #12]
 800c25a:	e7da      	b.n	800c212 <_fflush_r+0x22>
 800c25c:	080107f4 	.word	0x080107f4
 800c260:	08010814 	.word	0x08010814
 800c264:	080107d4 	.word	0x080107d4

0800c268 <fflush>:
 800c268:	4601      	mov	r1, r0
 800c26a:	b920      	cbnz	r0, 800c276 <fflush+0xe>
 800c26c:	4b04      	ldr	r3, [pc, #16]	; (800c280 <fflush+0x18>)
 800c26e:	4905      	ldr	r1, [pc, #20]	; (800c284 <fflush+0x1c>)
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	f000 ba94 	b.w	800c79e <_fwalk_reent>
 800c276:	4b04      	ldr	r3, [pc, #16]	; (800c288 <fflush+0x20>)
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f7ff bfb9 	b.w	800c1f0 <_fflush_r>
 800c27e:	bf00      	nop
 800c280:	08010834 	.word	0x08010834
 800c284:	0800c1f1 	.word	0x0800c1f1
 800c288:	20000084 	.word	0x20000084

0800c28c <_fgets_r>:
 800c28c:	2a01      	cmp	r2, #1
 800c28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c292:	4680      	mov	r8, r0
 800c294:	460d      	mov	r5, r1
 800c296:	4617      	mov	r7, r2
 800c298:	461c      	mov	r4, r3
 800c29a:	dc03      	bgt.n	800c2a4 <_fgets_r+0x18>
 800c29c:	2500      	movs	r5, #0
 800c29e:	4628      	mov	r0, r5
 800c2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a4:	b118      	cbz	r0, 800c2ae <_fgets_r+0x22>
 800c2a6:	6983      	ldr	r3, [r0, #24]
 800c2a8:	b90b      	cbnz	r3, 800c2ae <_fgets_r+0x22>
 800c2aa:	f000 f8cb 	bl	800c444 <__sinit>
 800c2ae:	4b31      	ldr	r3, [pc, #196]	; (800c374 <_fgets_r+0xe8>)
 800c2b0:	429c      	cmp	r4, r3
 800c2b2:	d120      	bne.n	800c2f6 <_fgets_r+0x6a>
 800c2b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ba:	07de      	lsls	r6, r3, #31
 800c2bc:	d405      	bmi.n	800c2ca <_fgets_r+0x3e>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	0598      	lsls	r0, r3, #22
 800c2c2:	d402      	bmi.n	800c2ca <_fgets_r+0x3e>
 800c2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2c6:	f000 faaf 	bl	800c828 <__retarget_lock_acquire_recursive>
 800c2ca:	3f01      	subs	r7, #1
 800c2cc:	46a9      	mov	r9, r5
 800c2ce:	6866      	ldr	r6, [r4, #4]
 800c2d0:	b9f6      	cbnz	r6, 800c310 <_fgets_r+0x84>
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	f000 fc21 	bl	800cb1c <__srefill_r>
 800c2da:	b1c0      	cbz	r0, 800c30e <_fgets_r+0x82>
 800c2dc:	45a9      	cmp	r9, r5
 800c2de:	d145      	bne.n	800c36c <_fgets_r+0xe0>
 800c2e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e2:	07d9      	lsls	r1, r3, #31
 800c2e4:	d4da      	bmi.n	800c29c <_fgets_r+0x10>
 800c2e6:	89a5      	ldrh	r5, [r4, #12]
 800c2e8:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800c2ec:	d1d6      	bne.n	800c29c <_fgets_r+0x10>
 800c2ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f0:	f000 fa9b 	bl	800c82a <__retarget_lock_release_recursive>
 800c2f4:	e7d3      	b.n	800c29e <_fgets_r+0x12>
 800c2f6:	4b20      	ldr	r3, [pc, #128]	; (800c378 <_fgets_r+0xec>)
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	d102      	bne.n	800c302 <_fgets_r+0x76>
 800c2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c300:	e7da      	b.n	800c2b8 <_fgets_r+0x2c>
 800c302:	4b1e      	ldr	r3, [pc, #120]	; (800c37c <_fgets_r+0xf0>)
 800c304:	429c      	cmp	r4, r3
 800c306:	bf08      	it	eq
 800c308:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800c30c:	e7d4      	b.n	800c2b8 <_fgets_r+0x2c>
 800c30e:	6866      	ldr	r6, [r4, #4]
 800c310:	f8d4 a000 	ldr.w	sl, [r4]
 800c314:	42be      	cmp	r6, r7
 800c316:	bf28      	it	cs
 800c318:	463e      	movcs	r6, r7
 800c31a:	4632      	mov	r2, r6
 800c31c:	210a      	movs	r1, #10
 800c31e:	4650      	mov	r0, sl
 800c320:	f7f3 ff5e 	bl	80001e0 <memchr>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	b1a0      	cbz	r0, 800c352 <_fgets_r+0xc6>
 800c328:	3001      	adds	r0, #1
 800c32a:	eba0 060a 	sub.w	r6, r0, sl
 800c32e:	1b9b      	subs	r3, r3, r6
 800c330:	e9c4 0300 	strd	r0, r3, [r4]
 800c334:	4632      	mov	r2, r6
 800c336:	4651      	mov	r1, sl
 800c338:	4648      	mov	r0, r9
 800c33a:	f000 fadd 	bl	800c8f8 <memcpy>
 800c33e:	2300      	movs	r3, #0
 800c340:	f809 3006 	strb.w	r3, [r9, r6]
 800c344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c346:	07da      	lsls	r2, r3, #31
 800c348:	d4a9      	bmi.n	800c29e <_fgets_r+0x12>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	059b      	lsls	r3, r3, #22
 800c34e:	d4a6      	bmi.n	800c29e <_fgets_r+0x12>
 800c350:	e7cd      	b.n	800c2ee <_fgets_r+0x62>
 800c352:	1b9b      	subs	r3, r3, r6
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	4433      	add	r3, r6
 800c35a:	4648      	mov	r0, r9
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	4632      	mov	r2, r6
 800c360:	4651      	mov	r1, sl
 800c362:	f000 fac9 	bl	800c8f8 <memcpy>
 800c366:	1bbf      	subs	r7, r7, r6
 800c368:	44b1      	add	r9, r6
 800c36a:	d1b0      	bne.n	800c2ce <_fgets_r+0x42>
 800c36c:	2300      	movs	r3, #0
 800c36e:	f889 3000 	strb.w	r3, [r9]
 800c372:	e7e7      	b.n	800c344 <_fgets_r+0xb8>
 800c374:	080107f4 	.word	0x080107f4
 800c378:	08010814 	.word	0x08010814
 800c37c:	080107d4 	.word	0x080107d4

0800c380 <fgets>:
 800c380:	4613      	mov	r3, r2
 800c382:	460a      	mov	r2, r1
 800c384:	4601      	mov	r1, r0
 800c386:	4802      	ldr	r0, [pc, #8]	; (800c390 <fgets+0x10>)
 800c388:	6800      	ldr	r0, [r0, #0]
 800c38a:	f7ff bf7f 	b.w	800c28c <_fgets_r>
 800c38e:	bf00      	nop
 800c390:	20000084 	.word	0x20000084

0800c394 <std>:
 800c394:	2300      	movs	r3, #0
 800c396:	b510      	push	{r4, lr}
 800c398:	4604      	mov	r4, r0
 800c39a:	e9c0 3300 	strd	r3, r3, [r0]
 800c39e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3a2:	6083      	str	r3, [r0, #8]
 800c3a4:	8181      	strh	r1, [r0, #12]
 800c3a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c3a8:	81c2      	strh	r2, [r0, #14]
 800c3aa:	6183      	str	r3, [r0, #24]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	2208      	movs	r2, #8
 800c3b0:	305c      	adds	r0, #92	; 0x5c
 800c3b2:	f000 faaf 	bl	800c914 <memset>
 800c3b6:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <std+0x38>)
 800c3b8:	6263      	str	r3, [r4, #36]	; 0x24
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <std+0x3c>)
 800c3bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3be:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <std+0x40>)
 800c3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <std+0x44>)
 800c3c4:	6224      	str	r4, [r4, #32]
 800c3c6:	6323      	str	r3, [r4, #48]	; 0x30
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0800cc51 	.word	0x0800cc51
 800c3d0:	0800cc73 	.word	0x0800cc73
 800c3d4:	0800ccab 	.word	0x0800ccab
 800c3d8:	0800cccf 	.word	0x0800cccf

0800c3dc <_cleanup_r>:
 800c3dc:	4901      	ldr	r1, [pc, #4]	; (800c3e4 <_cleanup_r+0x8>)
 800c3de:	f000 b9de 	b.w	800c79e <_fwalk_reent>
 800c3e2:	bf00      	nop
 800c3e4:	0800c1f1 	.word	0x0800c1f1

0800c3e8 <__sfmoreglue>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	2268      	movs	r2, #104	; 0x68
 800c3ec:	1e4d      	subs	r5, r1, #1
 800c3ee:	4355      	muls	r5, r2
 800c3f0:	460e      	mov	r6, r1
 800c3f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3f6:	f000 fb01 	bl	800c9fc <_malloc_r>
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	b140      	cbz	r0, 800c410 <__sfmoreglue+0x28>
 800c3fe:	2100      	movs	r1, #0
 800c400:	e9c0 1600 	strd	r1, r6, [r0]
 800c404:	300c      	adds	r0, #12
 800c406:	60a0      	str	r0, [r4, #8]
 800c408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c40c:	f000 fa82 	bl	800c914 <memset>
 800c410:	4620      	mov	r0, r4
 800c412:	bd70      	pop	{r4, r5, r6, pc}

0800c414 <__sfp_lock_acquire>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__sfp_lock_acquire+0x8>)
 800c416:	f000 ba07 	b.w	800c828 <__retarget_lock_acquire_recursive>
 800c41a:	bf00      	nop
 800c41c:	200008d5 	.word	0x200008d5

0800c420 <__sfp_lock_release>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__sfp_lock_release+0x8>)
 800c422:	f000 ba02 	b.w	800c82a <__retarget_lock_release_recursive>
 800c426:	bf00      	nop
 800c428:	200008d5 	.word	0x200008d5

0800c42c <__sinit_lock_acquire>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__sinit_lock_acquire+0x8>)
 800c42e:	f000 b9fb 	b.w	800c828 <__retarget_lock_acquire_recursive>
 800c432:	bf00      	nop
 800c434:	200008d6 	.word	0x200008d6

0800c438 <__sinit_lock_release>:
 800c438:	4801      	ldr	r0, [pc, #4]	; (800c440 <__sinit_lock_release+0x8>)
 800c43a:	f000 b9f6 	b.w	800c82a <__retarget_lock_release_recursive>
 800c43e:	bf00      	nop
 800c440:	200008d6 	.word	0x200008d6

0800c444 <__sinit>:
 800c444:	b510      	push	{r4, lr}
 800c446:	4604      	mov	r4, r0
 800c448:	f7ff fff0 	bl	800c42c <__sinit_lock_acquire>
 800c44c:	69a3      	ldr	r3, [r4, #24]
 800c44e:	b11b      	cbz	r3, 800c458 <__sinit+0x14>
 800c450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c454:	f7ff bff0 	b.w	800c438 <__sinit_lock_release>
 800c458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c45c:	6523      	str	r3, [r4, #80]	; 0x50
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <__sinit+0x68>)
 800c460:	4a13      	ldr	r2, [pc, #76]	; (800c4b0 <__sinit+0x6c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	62a2      	str	r2, [r4, #40]	; 0x28
 800c466:	42a3      	cmp	r3, r4
 800c468:	bf04      	itt	eq
 800c46a:	2301      	moveq	r3, #1
 800c46c:	61a3      	streq	r3, [r4, #24]
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f820 	bl	800c4b4 <__sfp>
 800c474:	6060      	str	r0, [r4, #4]
 800c476:	4620      	mov	r0, r4
 800c478:	f000 f81c 	bl	800c4b4 <__sfp>
 800c47c:	60a0      	str	r0, [r4, #8]
 800c47e:	4620      	mov	r0, r4
 800c480:	f000 f818 	bl	800c4b4 <__sfp>
 800c484:	2200      	movs	r2, #0
 800c486:	60e0      	str	r0, [r4, #12]
 800c488:	2104      	movs	r1, #4
 800c48a:	6860      	ldr	r0, [r4, #4]
 800c48c:	f7ff ff82 	bl	800c394 <std>
 800c490:	68a0      	ldr	r0, [r4, #8]
 800c492:	2201      	movs	r2, #1
 800c494:	2109      	movs	r1, #9
 800c496:	f7ff ff7d 	bl	800c394 <std>
 800c49a:	68e0      	ldr	r0, [r4, #12]
 800c49c:	2202      	movs	r2, #2
 800c49e:	2112      	movs	r1, #18
 800c4a0:	f7ff ff78 	bl	800c394 <std>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	61a3      	str	r3, [r4, #24]
 800c4a8:	e7d2      	b.n	800c450 <__sinit+0xc>
 800c4aa:	bf00      	nop
 800c4ac:	08010834 	.word	0x08010834
 800c4b0:	0800c3dd 	.word	0x0800c3dd

0800c4b4 <__sfp>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	4607      	mov	r7, r0
 800c4b8:	f7ff ffac 	bl	800c414 <__sfp_lock_acquire>
 800c4bc:	4b1e      	ldr	r3, [pc, #120]	; (800c538 <__sfp+0x84>)
 800c4be:	681e      	ldr	r6, [r3, #0]
 800c4c0:	69b3      	ldr	r3, [r6, #24]
 800c4c2:	b913      	cbnz	r3, 800c4ca <__sfp+0x16>
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f7ff ffbd 	bl	800c444 <__sinit>
 800c4ca:	3648      	adds	r6, #72	; 0x48
 800c4cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	d503      	bpl.n	800c4dc <__sfp+0x28>
 800c4d4:	6833      	ldr	r3, [r6, #0]
 800c4d6:	b30b      	cbz	r3, 800c51c <__sfp+0x68>
 800c4d8:	6836      	ldr	r6, [r6, #0]
 800c4da:	e7f7      	b.n	800c4cc <__sfp+0x18>
 800c4dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4e0:	b9d5      	cbnz	r5, 800c518 <__sfp+0x64>
 800c4e2:	4b16      	ldr	r3, [pc, #88]	; (800c53c <__sfp+0x88>)
 800c4e4:	60e3      	str	r3, [r4, #12]
 800c4e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ea:	6665      	str	r5, [r4, #100]	; 0x64
 800c4ec:	f000 f99a 	bl	800c824 <__retarget_lock_init_recursive>
 800c4f0:	f7ff ff96 	bl	800c420 <__sfp_lock_release>
 800c4f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4fc:	6025      	str	r5, [r4, #0]
 800c4fe:	61a5      	str	r5, [r4, #24]
 800c500:	2208      	movs	r2, #8
 800c502:	4629      	mov	r1, r5
 800c504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c508:	f000 fa04 	bl	800c914 <memset>
 800c50c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c514:	4620      	mov	r0, r4
 800c516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c518:	3468      	adds	r4, #104	; 0x68
 800c51a:	e7d9      	b.n	800c4d0 <__sfp+0x1c>
 800c51c:	2104      	movs	r1, #4
 800c51e:	4638      	mov	r0, r7
 800c520:	f7ff ff62 	bl	800c3e8 <__sfmoreglue>
 800c524:	4604      	mov	r4, r0
 800c526:	6030      	str	r0, [r6, #0]
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1d5      	bne.n	800c4d8 <__sfp+0x24>
 800c52c:	f7ff ff78 	bl	800c420 <__sfp_lock_release>
 800c530:	230c      	movs	r3, #12
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	e7ee      	b.n	800c514 <__sfp+0x60>
 800c536:	bf00      	nop
 800c538:	08010834 	.word	0x08010834
 800c53c:	ffff0001 	.word	0xffff0001

0800c540 <_fopen_r>:
 800c540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c542:	460f      	mov	r7, r1
 800c544:	4611      	mov	r1, r2
 800c546:	aa01      	add	r2, sp, #4
 800c548:	4605      	mov	r5, r0
 800c54a:	f001 fa15 	bl	800d978 <__sflags>
 800c54e:	4606      	mov	r6, r0
 800c550:	b918      	cbnz	r0, 800c55a <_fopen_r+0x1a>
 800c552:	2400      	movs	r4, #0
 800c554:	4620      	mov	r0, r4
 800c556:	b003      	add	sp, #12
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7ff ffaa 	bl	800c4b4 <__sfp>
 800c560:	4604      	mov	r4, r0
 800c562:	2800      	cmp	r0, #0
 800c564:	d0f5      	beq.n	800c552 <_fopen_r+0x12>
 800c566:	4639      	mov	r1, r7
 800c568:	9a01      	ldr	r2, [sp, #4]
 800c56a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800c56e:	4628      	mov	r0, r5
 800c570:	f000 fab8 	bl	800cae4 <_open_r>
 800c574:	1e07      	subs	r7, r0, #0
 800c576:	da09      	bge.n	800c58c <_fopen_r+0x4c>
 800c578:	2500      	movs	r5, #0
 800c57a:	f7ff ff4b 	bl	800c414 <__sfp_lock_acquire>
 800c57e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c580:	81a5      	strh	r5, [r4, #12]
 800c582:	f000 f950 	bl	800c826 <__retarget_lock_close_recursive>
 800c586:	f7ff ff4b 	bl	800c420 <__sfp_lock_release>
 800c58a:	e7e2      	b.n	800c552 <_fopen_r+0x12>
 800c58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c58e:	07db      	lsls	r3, r3, #31
 800c590:	d405      	bmi.n	800c59e <_fopen_r+0x5e>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	0598      	lsls	r0, r3, #22
 800c596:	d402      	bmi.n	800c59e <_fopen_r+0x5e>
 800c598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c59a:	f000 f945 	bl	800c828 <__retarget_lock_acquire_recursive>
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <_fopen_r+0x98>)
 800c5a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c5a2:	4b0e      	ldr	r3, [pc, #56]	; (800c5dc <_fopen_r+0x9c>)
 800c5a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5a6:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <_fopen_r+0xa0>)
 800c5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5aa:	05f1      	lsls	r1, r6, #23
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <_fopen_r+0xa4>)
 800c5ae:	81e7      	strh	r7, [r4, #14]
 800c5b0:	81a6      	strh	r6, [r4, #12]
 800c5b2:	6224      	str	r4, [r4, #32]
 800c5b4:	6323      	str	r3, [r4, #48]	; 0x30
 800c5b6:	d505      	bpl.n	800c5c4 <_fopen_r+0x84>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4621      	mov	r1, r4
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f000 f81a 	bl	800c5f8 <_fseek_r>
 800c5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5c6:	07da      	lsls	r2, r3, #31
 800c5c8:	d4c4      	bmi.n	800c554 <_fopen_r+0x14>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	059b      	lsls	r3, r3, #22
 800c5ce:	d4c1      	bmi.n	800c554 <_fopen_r+0x14>
 800c5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5d2:	f000 f92a 	bl	800c82a <__retarget_lock_release_recursive>
 800c5d6:	e7bd      	b.n	800c554 <_fopen_r+0x14>
 800c5d8:	0800cc51 	.word	0x0800cc51
 800c5dc:	0800cc73 	.word	0x0800cc73
 800c5e0:	0800ccab 	.word	0x0800ccab
 800c5e4:	0800cccf 	.word	0x0800cccf

0800c5e8 <fopen>:
 800c5e8:	4b02      	ldr	r3, [pc, #8]	; (800c5f4 <fopen+0xc>)
 800c5ea:	460a      	mov	r2, r1
 800c5ec:	4601      	mov	r1, r0
 800c5ee:	6818      	ldr	r0, [r3, #0]
 800c5f0:	f7ff bfa6 	b.w	800c540 <_fopen_r>
 800c5f4:	20000084 	.word	0x20000084

0800c5f8 <_fseek_r>:
 800c5f8:	f000 b800 	b.w	800c5fc <_fseeko_r>

0800c5fc <_fseeko_r>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	460c      	mov	r4, r1
 800c602:	4617      	mov	r7, r2
 800c604:	461d      	mov	r5, r3
 800c606:	4606      	mov	r6, r0
 800c608:	b118      	cbz	r0, 800c612 <_fseeko_r+0x16>
 800c60a:	6983      	ldr	r3, [r0, #24]
 800c60c:	b90b      	cbnz	r3, 800c612 <_fseeko_r+0x16>
 800c60e:	f7ff ff19 	bl	800c444 <__sinit>
 800c612:	4b51      	ldr	r3, [pc, #324]	; (800c758 <_fseeko_r+0x15c>)
 800c614:	429c      	cmp	r4, r3
 800c616:	d122      	bne.n	800c65e <_fseeko_r+0x62>
 800c618:	6874      	ldr	r4, [r6, #4]
 800c61a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c61c:	07d9      	lsls	r1, r3, #31
 800c61e:	d405      	bmi.n	800c62c <_fseeko_r+0x30>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	059a      	lsls	r2, r3, #22
 800c624:	d402      	bmi.n	800c62c <_fseeko_r+0x30>
 800c626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c628:	f000 f8fe 	bl	800c828 <__retarget_lock_acquire_recursive>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800c632:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800c636:	d103      	bne.n	800c640 <_fseeko_r+0x44>
 800c638:	4621      	mov	r1, r4
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff fdd8 	bl	800c1f0 <_fflush_r>
 800c640:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800c644:	f1b8 0f00 	cmp.w	r8, #0
 800c648:	d113      	bne.n	800c672 <_fseeko_r+0x76>
 800c64a:	231d      	movs	r3, #29
 800c64c:	6033      	str	r3, [r6, #0]
 800c64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c650:	07d9      	lsls	r1, r3, #31
 800c652:	d578      	bpl.n	800c746 <_fseeko_r+0x14a>
 800c654:	f04f 35ff 	mov.w	r5, #4294967295
 800c658:	4628      	mov	r0, r5
 800c65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65e:	4b3f      	ldr	r3, [pc, #252]	; (800c75c <_fseeko_r+0x160>)
 800c660:	429c      	cmp	r4, r3
 800c662:	d101      	bne.n	800c668 <_fseeko_r+0x6c>
 800c664:	68b4      	ldr	r4, [r6, #8]
 800c666:	e7d8      	b.n	800c61a <_fseeko_r+0x1e>
 800c668:	4b3d      	ldr	r3, [pc, #244]	; (800c760 <_fseeko_r+0x164>)
 800c66a:	429c      	cmp	r4, r3
 800c66c:	bf08      	it	eq
 800c66e:	68f4      	ldreq	r4, [r6, #12]
 800c670:	e7d3      	b.n	800c61a <_fseeko_r+0x1e>
 800c672:	2d01      	cmp	r5, #1
 800c674:	d036      	beq.n	800c6e4 <_fseeko_r+0xe8>
 800c676:	f035 0302 	bics.w	r3, r5, #2
 800c67a:	d162      	bne.n	800c742 <_fseeko_r+0x146>
 800c67c:	6923      	ldr	r3, [r4, #16]
 800c67e:	b91b      	cbnz	r3, 800c688 <_fseeko_r+0x8c>
 800c680:	4621      	mov	r1, r4
 800c682:	4630      	mov	r0, r6
 800c684:	f000 f8f8 	bl	800c878 <__smakebuf_r>
 800c688:	4621      	mov	r1, r4
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7ff fdb0 	bl	800c1f0 <_fflush_r>
 800c690:	2800      	cmp	r0, #0
 800c692:	d1dc      	bne.n	800c64e <_fseeko_r+0x52>
 800c694:	6a21      	ldr	r1, [r4, #32]
 800c696:	462b      	mov	r3, r5
 800c698:	463a      	mov	r2, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	47c0      	blx	r8
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d0d5      	beq.n	800c64e <_fseeko_r+0x52>
 800c6a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6a4:	b141      	cbz	r1, 800c6b8 <_fseeko_r+0xbc>
 800c6a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	d002      	beq.n	800c6b4 <_fseeko_r+0xb8>
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f000 f938 	bl	800c924 <_free_r>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	6363      	str	r3, [r4, #52]	; 0x34
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	2600      	movs	r6, #0
 800c6c0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800c6c4:	6066      	str	r6, [r4, #4]
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6d0:	f000 f920 	bl	800c914 <memset>
 800c6d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c6d6:	f015 0501 	ands.w	r5, r5, #1
 800c6da:	d13b      	bne.n	800c754 <_fseeko_r+0x158>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	059b      	lsls	r3, r3, #22
 800c6e0:	d4ba      	bmi.n	800c658 <_fseeko_r+0x5c>
 800c6e2:	e021      	b.n	800c728 <_fseeko_r+0x12c>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff fd82 	bl	800c1f0 <_fflush_r>
 800c6ec:	89a2      	ldrh	r2, [r4, #12]
 800c6ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6f2:	d00c      	beq.n	800c70e <_fseeko_r+0x112>
 800c6f4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	075a      	lsls	r2, r3, #29
 800c6fa:	d519      	bpl.n	800c730 <_fseeko_r+0x134>
 800c6fc:	6863      	ldr	r3, [r4, #4]
 800c6fe:	1aed      	subs	r5, r5, r3
 800c700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c702:	b10b      	cbz	r3, 800c708 <_fseeko_r+0x10c>
 800c704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c706:	1aed      	subs	r5, r5, r3
 800c708:	442f      	add	r7, r5
 800c70a:	2500      	movs	r5, #0
 800c70c:	e7b6      	b.n	800c67c <_fseeko_r+0x80>
 800c70e:	462b      	mov	r3, r5
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	4630      	mov	r0, r6
 800c714:	47c0      	blx	r8
 800c716:	1c43      	adds	r3, r0, #1
 800c718:	4605      	mov	r5, r0
 800c71a:	d1ec      	bne.n	800c6f6 <_fseeko_r+0xfa>
 800c71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c71e:	07d8      	lsls	r0, r3, #31
 800c720:	d498      	bmi.n	800c654 <_fseeko_r+0x58>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	0599      	lsls	r1, r3, #22
 800c726:	d495      	bmi.n	800c654 <_fseeko_r+0x58>
 800c728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c72a:	f000 f87e 	bl	800c82a <__retarget_lock_release_recursive>
 800c72e:	e793      	b.n	800c658 <_fseeko_r+0x5c>
 800c730:	0718      	lsls	r0, r3, #28
 800c732:	d5e9      	bpl.n	800c708 <_fseeko_r+0x10c>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	6922      	ldr	r2, [r4, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0e5      	beq.n	800c708 <_fseeko_r+0x10c>
 800c73c:	1a9b      	subs	r3, r3, r2
 800c73e:	441d      	add	r5, r3
 800c740:	e7e2      	b.n	800c708 <_fseeko_r+0x10c>
 800c742:	2316      	movs	r3, #22
 800c744:	e782      	b.n	800c64c <_fseeko_r+0x50>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	059a      	lsls	r2, r3, #22
 800c74a:	d483      	bmi.n	800c654 <_fseeko_r+0x58>
 800c74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c74e:	f000 f86c 	bl	800c82a <__retarget_lock_release_recursive>
 800c752:	e77f      	b.n	800c654 <_fseeko_r+0x58>
 800c754:	4635      	mov	r5, r6
 800c756:	e77f      	b.n	800c658 <_fseeko_r+0x5c>
 800c758:	080107f4 	.word	0x080107f4
 800c75c:	08010814 	.word	0x08010814
 800c760:	080107d4 	.word	0x080107d4

0800c764 <_fwalk>:
 800c764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c768:	460f      	mov	r7, r1
 800c76a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c76e:	2600      	movs	r6, #0
 800c770:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800c774:	f1b8 0801 	subs.w	r8, r8, #1
 800c778:	d505      	bpl.n	800c786 <_fwalk+0x22>
 800c77a:	6824      	ldr	r4, [r4, #0]
 800c77c:	2c00      	cmp	r4, #0
 800c77e:	d1f7      	bne.n	800c770 <_fwalk+0xc>
 800c780:	4630      	mov	r0, r6
 800c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d906      	bls.n	800c79a <_fwalk+0x36>
 800c78c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c790:	3301      	adds	r3, #1
 800c792:	d002      	beq.n	800c79a <_fwalk+0x36>
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	4306      	orrs	r6, r0
 800c79a:	3568      	adds	r5, #104	; 0x68
 800c79c:	e7ea      	b.n	800c774 <_fwalk+0x10>

0800c79e <_fwalk_reent>:
 800c79e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	4688      	mov	r8, r1
 800c7a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c7aa:	2700      	movs	r7, #0
 800c7ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c7b4:	d505      	bpl.n	800c7c2 <_fwalk_reent+0x24>
 800c7b6:	6824      	ldr	r4, [r4, #0]
 800c7b8:	2c00      	cmp	r4, #0
 800c7ba:	d1f7      	bne.n	800c7ac <_fwalk_reent+0xe>
 800c7bc:	4638      	mov	r0, r7
 800c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	89ab      	ldrh	r3, [r5, #12]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d907      	bls.n	800c7d8 <_fwalk_reent+0x3a>
 800c7c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	d003      	beq.n	800c7d8 <_fwalk_reent+0x3a>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	47c0      	blx	r8
 800c7d6:	4307      	orrs	r7, r0
 800c7d8:	3568      	adds	r5, #104	; 0x68
 800c7da:	e7e9      	b.n	800c7b0 <_fwalk_reent+0x12>

0800c7dc <__libc_init_array>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	4d0d      	ldr	r5, [pc, #52]	; (800c814 <__libc_init_array+0x38>)
 800c7e0:	4c0d      	ldr	r4, [pc, #52]	; (800c818 <__libc_init_array+0x3c>)
 800c7e2:	1b64      	subs	r4, r4, r5
 800c7e4:	10a4      	asrs	r4, r4, #2
 800c7e6:	2600      	movs	r6, #0
 800c7e8:	42a6      	cmp	r6, r4
 800c7ea:	d109      	bne.n	800c800 <__libc_init_array+0x24>
 800c7ec:	4d0b      	ldr	r5, [pc, #44]	; (800c81c <__libc_init_array+0x40>)
 800c7ee:	4c0c      	ldr	r4, [pc, #48]	; (800c820 <__libc_init_array+0x44>)
 800c7f0:	f003 ff90 	bl	8010714 <_init>
 800c7f4:	1b64      	subs	r4, r4, r5
 800c7f6:	10a4      	asrs	r4, r4, #2
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d105      	bne.n	800c80a <__libc_init_array+0x2e>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	f855 3b04 	ldr.w	r3, [r5], #4
 800c804:	4798      	blx	r3
 800c806:	3601      	adds	r6, #1
 800c808:	e7ee      	b.n	800c7e8 <__libc_init_array+0xc>
 800c80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80e:	4798      	blx	r3
 800c810:	3601      	adds	r6, #1
 800c812:	e7f2      	b.n	800c7fa <__libc_init_array+0x1e>
 800c814:	08010c40 	.word	0x08010c40
 800c818:	08010c40 	.word	0x08010c40
 800c81c:	08010c40 	.word	0x08010c40
 800c820:	08010c44 	.word	0x08010c44

0800c824 <__retarget_lock_init_recursive>:
 800c824:	4770      	bx	lr

0800c826 <__retarget_lock_close_recursive>:
 800c826:	4770      	bx	lr

0800c828 <__retarget_lock_acquire_recursive>:
 800c828:	4770      	bx	lr

0800c82a <__retarget_lock_release_recursive>:
 800c82a:	4770      	bx	lr

0800c82c <__swhatbuf_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	460e      	mov	r6, r1
 800c830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c834:	2900      	cmp	r1, #0
 800c836:	b096      	sub	sp, #88	; 0x58
 800c838:	4614      	mov	r4, r2
 800c83a:	461d      	mov	r5, r3
 800c83c:	da08      	bge.n	800c850 <__swhatbuf_r+0x24>
 800c83e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	602a      	str	r2, [r5, #0]
 800c846:	061a      	lsls	r2, r3, #24
 800c848:	d410      	bmi.n	800c86c <__swhatbuf_r+0x40>
 800c84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84e:	e00e      	b.n	800c86e <__swhatbuf_r+0x42>
 800c850:	466a      	mov	r2, sp
 800c852:	f001 f8c7 	bl	800d9e4 <_fstat_r>
 800c856:	2800      	cmp	r0, #0
 800c858:	dbf1      	blt.n	800c83e <__swhatbuf_r+0x12>
 800c85a:	9a01      	ldr	r2, [sp, #4]
 800c85c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c864:	425a      	negs	r2, r3
 800c866:	415a      	adcs	r2, r3
 800c868:	602a      	str	r2, [r5, #0]
 800c86a:	e7ee      	b.n	800c84a <__swhatbuf_r+0x1e>
 800c86c:	2340      	movs	r3, #64	; 0x40
 800c86e:	2000      	movs	r0, #0
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	b016      	add	sp, #88	; 0x58
 800c874:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c878 <__smakebuf_r>:
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c87c:	079d      	lsls	r5, r3, #30
 800c87e:	4606      	mov	r6, r0
 800c880:	460c      	mov	r4, r1
 800c882:	d507      	bpl.n	800c894 <__smakebuf_r+0x1c>
 800c884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	2301      	movs	r3, #1
 800c88e:	6163      	str	r3, [r4, #20]
 800c890:	b002      	add	sp, #8
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	ab01      	add	r3, sp, #4
 800c896:	466a      	mov	r2, sp
 800c898:	f7ff ffc8 	bl	800c82c <__swhatbuf_r>
 800c89c:	9900      	ldr	r1, [sp, #0]
 800c89e:	4605      	mov	r5, r0
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f000 f8ab 	bl	800c9fc <_malloc_r>
 800c8a6:	b948      	cbnz	r0, 800c8bc <__smakebuf_r+0x44>
 800c8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ac:	059a      	lsls	r2, r3, #22
 800c8ae:	d4ef      	bmi.n	800c890 <__smakebuf_r+0x18>
 800c8b0:	f023 0303 	bic.w	r3, r3, #3
 800c8b4:	f043 0302 	orr.w	r3, r3, #2
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	e7e3      	b.n	800c884 <__smakebuf_r+0xc>
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	; (800c8f4 <__smakebuf_r+0x7c>)
 800c8be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	6020      	str	r0, [r4, #0]
 800c8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8c8:	81a3      	strh	r3, [r4, #12]
 800c8ca:	9b00      	ldr	r3, [sp, #0]
 800c8cc:	6163      	str	r3, [r4, #20]
 800c8ce:	9b01      	ldr	r3, [sp, #4]
 800c8d0:	6120      	str	r0, [r4, #16]
 800c8d2:	b15b      	cbz	r3, 800c8ec <__smakebuf_r+0x74>
 800c8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f001 fc05 	bl	800e0e8 <_isatty_r>
 800c8de:	b128      	cbz	r0, 800c8ec <__smakebuf_r+0x74>
 800c8e0:	89a3      	ldrh	r3, [r4, #12]
 800c8e2:	f023 0303 	bic.w	r3, r3, #3
 800c8e6:	f043 0301 	orr.w	r3, r3, #1
 800c8ea:	81a3      	strh	r3, [r4, #12]
 800c8ec:	89a0      	ldrh	r0, [r4, #12]
 800c8ee:	4305      	orrs	r5, r0
 800c8f0:	81a5      	strh	r5, [r4, #12]
 800c8f2:	e7cd      	b.n	800c890 <__smakebuf_r+0x18>
 800c8f4:	0800c3dd 	.word	0x0800c3dd

0800c8f8 <memcpy>:
 800c8f8:	440a      	add	r2, r1
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c900:	d100      	bne.n	800c904 <memcpy+0xc>
 800c902:	4770      	bx	lr
 800c904:	b510      	push	{r4, lr}
 800c906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c90e:	4291      	cmp	r1, r2
 800c910:	d1f9      	bne.n	800c906 <memcpy+0xe>
 800c912:	bd10      	pop	{r4, pc}

0800c914 <memset>:
 800c914:	4402      	add	r2, r0
 800c916:	4603      	mov	r3, r0
 800c918:	4293      	cmp	r3, r2
 800c91a:	d100      	bne.n	800c91e <memset+0xa>
 800c91c:	4770      	bx	lr
 800c91e:	f803 1b01 	strb.w	r1, [r3], #1
 800c922:	e7f9      	b.n	800c918 <memset+0x4>

0800c924 <_free_r>:
 800c924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c926:	2900      	cmp	r1, #0
 800c928:	d044      	beq.n	800c9b4 <_free_r+0x90>
 800c92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92e:	9001      	str	r0, [sp, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f1a1 0404 	sub.w	r4, r1, #4
 800c936:	bfb8      	it	lt
 800c938:	18e4      	addlt	r4, r4, r3
 800c93a:	f001 fc09 	bl	800e150 <__malloc_lock>
 800c93e:	4a1e      	ldr	r2, [pc, #120]	; (800c9b8 <_free_r+0x94>)
 800c940:	9801      	ldr	r0, [sp, #4]
 800c942:	6813      	ldr	r3, [r2, #0]
 800c944:	b933      	cbnz	r3, 800c954 <_free_r+0x30>
 800c946:	6063      	str	r3, [r4, #4]
 800c948:	6014      	str	r4, [r2, #0]
 800c94a:	b003      	add	sp, #12
 800c94c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c950:	f001 bc04 	b.w	800e15c <__malloc_unlock>
 800c954:	42a3      	cmp	r3, r4
 800c956:	d908      	bls.n	800c96a <_free_r+0x46>
 800c958:	6825      	ldr	r5, [r4, #0]
 800c95a:	1961      	adds	r1, r4, r5
 800c95c:	428b      	cmp	r3, r1
 800c95e:	bf01      	itttt	eq
 800c960:	6819      	ldreq	r1, [r3, #0]
 800c962:	685b      	ldreq	r3, [r3, #4]
 800c964:	1949      	addeq	r1, r1, r5
 800c966:	6021      	streq	r1, [r4, #0]
 800c968:	e7ed      	b.n	800c946 <_free_r+0x22>
 800c96a:	461a      	mov	r2, r3
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	b10b      	cbz	r3, 800c974 <_free_r+0x50>
 800c970:	42a3      	cmp	r3, r4
 800c972:	d9fa      	bls.n	800c96a <_free_r+0x46>
 800c974:	6811      	ldr	r1, [r2, #0]
 800c976:	1855      	adds	r5, r2, r1
 800c978:	42a5      	cmp	r5, r4
 800c97a:	d10b      	bne.n	800c994 <_free_r+0x70>
 800c97c:	6824      	ldr	r4, [r4, #0]
 800c97e:	4421      	add	r1, r4
 800c980:	1854      	adds	r4, r2, r1
 800c982:	42a3      	cmp	r3, r4
 800c984:	6011      	str	r1, [r2, #0]
 800c986:	d1e0      	bne.n	800c94a <_free_r+0x26>
 800c988:	681c      	ldr	r4, [r3, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	6053      	str	r3, [r2, #4]
 800c98e:	4421      	add	r1, r4
 800c990:	6011      	str	r1, [r2, #0]
 800c992:	e7da      	b.n	800c94a <_free_r+0x26>
 800c994:	d902      	bls.n	800c99c <_free_r+0x78>
 800c996:	230c      	movs	r3, #12
 800c998:	6003      	str	r3, [r0, #0]
 800c99a:	e7d6      	b.n	800c94a <_free_r+0x26>
 800c99c:	6825      	ldr	r5, [r4, #0]
 800c99e:	1961      	adds	r1, r4, r5
 800c9a0:	428b      	cmp	r3, r1
 800c9a2:	bf04      	itt	eq
 800c9a4:	6819      	ldreq	r1, [r3, #0]
 800c9a6:	685b      	ldreq	r3, [r3, #4]
 800c9a8:	6063      	str	r3, [r4, #4]
 800c9aa:	bf04      	itt	eq
 800c9ac:	1949      	addeq	r1, r1, r5
 800c9ae:	6021      	streq	r1, [r4, #0]
 800c9b0:	6054      	str	r4, [r2, #4]
 800c9b2:	e7ca      	b.n	800c94a <_free_r+0x26>
 800c9b4:	b003      	add	sp, #12
 800c9b6:	bd30      	pop	{r4, r5, pc}
 800c9b8:	200008d8 	.word	0x200008d8

0800c9bc <sbrk_aligned>:
 800c9bc:	b570      	push	{r4, r5, r6, lr}
 800c9be:	4e0e      	ldr	r6, [pc, #56]	; (800c9f8 <sbrk_aligned+0x3c>)
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	6831      	ldr	r1, [r6, #0]
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	b911      	cbnz	r1, 800c9ce <sbrk_aligned+0x12>
 800c9c8:	f000 f932 	bl	800cc30 <_sbrk_r>
 800c9cc:	6030      	str	r0, [r6, #0]
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 f92d 	bl	800cc30 <_sbrk_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	d00a      	beq.n	800c9f0 <sbrk_aligned+0x34>
 800c9da:	1cc4      	adds	r4, r0, #3
 800c9dc:	f024 0403 	bic.w	r4, r4, #3
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d007      	beq.n	800c9f4 <sbrk_aligned+0x38>
 800c9e4:	1a21      	subs	r1, r4, r0
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 f922 	bl	800cc30 <_sbrk_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d101      	bne.n	800c9f4 <sbrk_aligned+0x38>
 800c9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	200008dc 	.word	0x200008dc

0800c9fc <_malloc_r>:
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4607      	mov	r7, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d905      	bls.n	800ca24 <_malloc_r+0x28>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	2600      	movs	r6, #0
 800ca1e:	4630      	mov	r0, r6
 800ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca24:	4e2e      	ldr	r6, [pc, #184]	; (800cae0 <_malloc_r+0xe4>)
 800ca26:	f001 fb93 	bl	800e150 <__malloc_lock>
 800ca2a:	6833      	ldr	r3, [r6, #0]
 800ca2c:	461c      	mov	r4, r3
 800ca2e:	bb34      	cbnz	r4, 800ca7e <_malloc_r+0x82>
 800ca30:	4629      	mov	r1, r5
 800ca32:	4638      	mov	r0, r7
 800ca34:	f7ff ffc2 	bl	800c9bc <sbrk_aligned>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	d14d      	bne.n	800cada <_malloc_r+0xde>
 800ca3e:	6834      	ldr	r4, [r6, #0]
 800ca40:	4626      	mov	r6, r4
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	d140      	bne.n	800cac8 <_malloc_r+0xcc>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	eb04 0803 	add.w	r8, r4, r3
 800ca50:	f000 f8ee 	bl	800cc30 <_sbrk_r>
 800ca54:	4580      	cmp	r8, r0
 800ca56:	d13a      	bne.n	800cace <_malloc_r+0xd2>
 800ca58:	6821      	ldr	r1, [r4, #0]
 800ca5a:	3503      	adds	r5, #3
 800ca5c:	1a6d      	subs	r5, r5, r1
 800ca5e:	f025 0503 	bic.w	r5, r5, #3
 800ca62:	3508      	adds	r5, #8
 800ca64:	2d0c      	cmp	r5, #12
 800ca66:	bf38      	it	cc
 800ca68:	250c      	movcc	r5, #12
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	f7ff ffa5 	bl	800c9bc <sbrk_aligned>
 800ca72:	3001      	adds	r0, #1
 800ca74:	d02b      	beq.n	800cace <_malloc_r+0xd2>
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	442b      	add	r3, r5
 800ca7a:	6023      	str	r3, [r4, #0]
 800ca7c:	e00e      	b.n	800ca9c <_malloc_r+0xa0>
 800ca7e:	6822      	ldr	r2, [r4, #0]
 800ca80:	1b52      	subs	r2, r2, r5
 800ca82:	d41e      	bmi.n	800cac2 <_malloc_r+0xc6>
 800ca84:	2a0b      	cmp	r2, #11
 800ca86:	d916      	bls.n	800cab6 <_malloc_r+0xba>
 800ca88:	1961      	adds	r1, r4, r5
 800ca8a:	42a3      	cmp	r3, r4
 800ca8c:	6025      	str	r5, [r4, #0]
 800ca8e:	bf18      	it	ne
 800ca90:	6059      	strne	r1, [r3, #4]
 800ca92:	6863      	ldr	r3, [r4, #4]
 800ca94:	bf08      	it	eq
 800ca96:	6031      	streq	r1, [r6, #0]
 800ca98:	5162      	str	r2, [r4, r5]
 800ca9a:	604b      	str	r3, [r1, #4]
 800ca9c:	4638      	mov	r0, r7
 800ca9e:	f104 060b 	add.w	r6, r4, #11
 800caa2:	f001 fb5b 	bl	800e15c <__malloc_unlock>
 800caa6:	f026 0607 	bic.w	r6, r6, #7
 800caaa:	1d23      	adds	r3, r4, #4
 800caac:	1af2      	subs	r2, r6, r3
 800caae:	d0b6      	beq.n	800ca1e <_malloc_r+0x22>
 800cab0:	1b9b      	subs	r3, r3, r6
 800cab2:	50a3      	str	r3, [r4, r2]
 800cab4:	e7b3      	b.n	800ca1e <_malloc_r+0x22>
 800cab6:	6862      	ldr	r2, [r4, #4]
 800cab8:	42a3      	cmp	r3, r4
 800caba:	bf0c      	ite	eq
 800cabc:	6032      	streq	r2, [r6, #0]
 800cabe:	605a      	strne	r2, [r3, #4]
 800cac0:	e7ec      	b.n	800ca9c <_malloc_r+0xa0>
 800cac2:	4623      	mov	r3, r4
 800cac4:	6864      	ldr	r4, [r4, #4]
 800cac6:	e7b2      	b.n	800ca2e <_malloc_r+0x32>
 800cac8:	4634      	mov	r4, r6
 800caca:	6876      	ldr	r6, [r6, #4]
 800cacc:	e7b9      	b.n	800ca42 <_malloc_r+0x46>
 800cace:	230c      	movs	r3, #12
 800cad0:	603b      	str	r3, [r7, #0]
 800cad2:	4638      	mov	r0, r7
 800cad4:	f001 fb42 	bl	800e15c <__malloc_unlock>
 800cad8:	e7a1      	b.n	800ca1e <_malloc_r+0x22>
 800cada:	6025      	str	r5, [r4, #0]
 800cadc:	e7de      	b.n	800ca9c <_malloc_r+0xa0>
 800cade:	bf00      	nop
 800cae0:	200008d8 	.word	0x200008d8

0800cae4 <_open_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4d07      	ldr	r5, [pc, #28]	; (800cb04 <_open_r+0x20>)
 800cae8:	4604      	mov	r4, r0
 800caea:	4608      	mov	r0, r1
 800caec:	4611      	mov	r1, r2
 800caee:	2200      	movs	r2, #0
 800caf0:	602a      	str	r2, [r5, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f7f8 ffbf 	bl	8005a76 <_open>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	d102      	bne.n	800cb02 <_open_r+0x1e>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b103      	cbz	r3, 800cb02 <_open_r+0x1e>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	bd38      	pop	{r3, r4, r5, pc}
 800cb04:	200008e0 	.word	0x200008e0

0800cb08 <lflush>:
 800cb08:	8983      	ldrh	r3, [r0, #12]
 800cb0a:	f003 0309 	and.w	r3, r3, #9
 800cb0e:	2b09      	cmp	r3, #9
 800cb10:	d101      	bne.n	800cb16 <lflush+0xe>
 800cb12:	f7ff bba9 	b.w	800c268 <fflush>
 800cb16:	2000      	movs	r0, #0
 800cb18:	4770      	bx	lr
	...

0800cb1c <__srefill_r>:
 800cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4605      	mov	r5, r0
 800cb22:	b118      	cbz	r0, 800cb2c <__srefill_r+0x10>
 800cb24:	6983      	ldr	r3, [r0, #24]
 800cb26:	b90b      	cbnz	r3, 800cb2c <__srefill_r+0x10>
 800cb28:	f7ff fc8c 	bl	800c444 <__sinit>
 800cb2c:	4b3b      	ldr	r3, [pc, #236]	; (800cc1c <__srefill_r+0x100>)
 800cb2e:	429c      	cmp	r4, r3
 800cb30:	d10a      	bne.n	800cb48 <__srefill_r+0x2c>
 800cb32:	686c      	ldr	r4, [r5, #4]
 800cb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	069e      	lsls	r6, r3, #26
 800cb40:	d50c      	bpl.n	800cb5c <__srefill_r+0x40>
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295
 800cb46:	e066      	b.n	800cc16 <__srefill_r+0xfa>
 800cb48:	4b35      	ldr	r3, [pc, #212]	; (800cc20 <__srefill_r+0x104>)
 800cb4a:	429c      	cmp	r4, r3
 800cb4c:	d101      	bne.n	800cb52 <__srefill_r+0x36>
 800cb4e:	68ac      	ldr	r4, [r5, #8]
 800cb50:	e7f0      	b.n	800cb34 <__srefill_r+0x18>
 800cb52:	4b34      	ldr	r3, [pc, #208]	; (800cc24 <__srefill_r+0x108>)
 800cb54:	429c      	cmp	r4, r3
 800cb56:	bf08      	it	eq
 800cb58:	68ec      	ldreq	r4, [r5, #12]
 800cb5a:	e7eb      	b.n	800cb34 <__srefill_r+0x18>
 800cb5c:	0758      	lsls	r0, r3, #29
 800cb5e:	d448      	bmi.n	800cbf2 <__srefill_r+0xd6>
 800cb60:	06d9      	lsls	r1, r3, #27
 800cb62:	d405      	bmi.n	800cb70 <__srefill_r+0x54>
 800cb64:	2309      	movs	r3, #9
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	e7e8      	b.n	800cb42 <__srefill_r+0x26>
 800cb70:	071a      	lsls	r2, r3, #28
 800cb72:	d50b      	bpl.n	800cb8c <__srefill_r+0x70>
 800cb74:	4621      	mov	r1, r4
 800cb76:	4628      	mov	r0, r5
 800cb78:	f7ff fb3a 	bl	800c1f0 <_fflush_r>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d1e0      	bne.n	800cb42 <__srefill_r+0x26>
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	60a0      	str	r0, [r4, #8]
 800cb84:	f023 0308 	bic.w	r3, r3, #8
 800cb88:	81a3      	strh	r3, [r4, #12]
 800cb8a:	61a0      	str	r0, [r4, #24]
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	f043 0304 	orr.w	r3, r3, #4
 800cb92:	81a3      	strh	r3, [r4, #12]
 800cb94:	6923      	ldr	r3, [r4, #16]
 800cb96:	b91b      	cbnz	r3, 800cba0 <__srefill_r+0x84>
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f7ff fe6c 	bl	800c878 <__smakebuf_r>
 800cba0:	89a6      	ldrh	r6, [r4, #12]
 800cba2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800cba6:	07b3      	lsls	r3, r6, #30
 800cba8:	d00f      	beq.n	800cbca <__srefill_r+0xae>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	4b1e      	ldr	r3, [pc, #120]	; (800cc28 <__srefill_r+0x10c>)
 800cbb0:	491e      	ldr	r1, [pc, #120]	; (800cc2c <__srefill_r+0x110>)
 800cbb2:	6818      	ldr	r0, [r3, #0]
 800cbb4:	f006 0609 	and.w	r6, r6, #9
 800cbb8:	f7ff fdd4 	bl	800c764 <_fwalk>
 800cbbc:	2e09      	cmp	r6, #9
 800cbbe:	81a7      	strh	r7, [r4, #12]
 800cbc0:	d103      	bne.n	800cbca <__srefill_r+0xae>
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f7ff fa8d 	bl	800c0e4 <__sflush_r>
 800cbca:	6922      	ldr	r2, [r4, #16]
 800cbcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cbce:	6963      	ldr	r3, [r4, #20]
 800cbd0:	6a21      	ldr	r1, [r4, #32]
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	47b0      	blx	r6
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	6060      	str	r0, [r4, #4]
 800cbdc:	dc1c      	bgt.n	800cc18 <__srefill_r+0xfc>
 800cbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe2:	bf17      	itett	ne
 800cbe4:	2200      	movne	r2, #0
 800cbe6:	f043 0320 	orreq.w	r3, r3, #32
 800cbea:	6062      	strne	r2, [r4, #4]
 800cbec:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800cbf0:	e7bc      	b.n	800cb6c <__srefill_r+0x50>
 800cbf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	d0cd      	beq.n	800cb94 <__srefill_r+0x78>
 800cbf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	d002      	beq.n	800cc06 <__srefill_r+0xea>
 800cc00:	4628      	mov	r0, r5
 800cc02:	f7ff fe8f 	bl	800c924 <_free_r>
 800cc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc08:	6063      	str	r3, [r4, #4]
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	6360      	str	r0, [r4, #52]	; 0x34
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0c0      	beq.n	800cb94 <__srefill_r+0x78>
 800cc12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc18:	2000      	movs	r0, #0
 800cc1a:	e7fc      	b.n	800cc16 <__srefill_r+0xfa>
 800cc1c:	080107f4 	.word	0x080107f4
 800cc20:	08010814 	.word	0x08010814
 800cc24:	080107d4 	.word	0x080107d4
 800cc28:	08010834 	.word	0x08010834
 800cc2c:	0800cb09 	.word	0x0800cb09

0800cc30 <_sbrk_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d06      	ldr	r5, [pc, #24]	; (800cc4c <_sbrk_r+0x1c>)
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	602b      	str	r3, [r5, #0]
 800cc3c:	f7f8 ff2a 	bl	8005a94 <_sbrk>
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	d102      	bne.n	800cc4a <_sbrk_r+0x1a>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	b103      	cbz	r3, 800cc4a <_sbrk_r+0x1a>
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	200008e0 	.word	0x200008e0

0800cc50 <__sread>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	460c      	mov	r4, r1
 800cc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc58:	f001 ff5e 	bl	800eb18 <_read_r>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	bfab      	itete	ge
 800cc60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc62:	89a3      	ldrhlt	r3, [r4, #12]
 800cc64:	181b      	addge	r3, r3, r0
 800cc66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc6a:	bfac      	ite	ge
 800cc6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc6e:	81a3      	strhlt	r3, [r4, #12]
 800cc70:	bd10      	pop	{r4, pc}

0800cc72 <__swrite>:
 800cc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc76:	461f      	mov	r7, r3
 800cc78:	898b      	ldrh	r3, [r1, #12]
 800cc7a:	05db      	lsls	r3, r3, #23
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	4616      	mov	r6, r2
 800cc82:	d505      	bpl.n	800cc90 <__swrite+0x1e>
 800cc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc88:	2302      	movs	r3, #2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f001 fa3c 	bl	800e108 <_lseek_r>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	4628      	mov	r0, r5
 800cca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca6:	f000 be45 	b.w	800d934 <_write_r>

0800ccaa <__sseek>:
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	460c      	mov	r4, r1
 800ccae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb2:	f001 fa29 	bl	800e108 <_lseek_r>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	bf15      	itete	ne
 800ccbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccc6:	81a3      	strheq	r3, [r4, #12]
 800ccc8:	bf18      	it	ne
 800ccca:	81a3      	strhne	r3, [r4, #12]
 800cccc:	bd10      	pop	{r4, pc}

0800ccce <__sclose>:
 800ccce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd2:	f000 be41 	b.w	800d958 <_close_r>

0800ccd6 <sulp>:
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	4604      	mov	r4, r0
 800ccda:	460d      	mov	r5, r1
 800ccdc:	ec45 4b10 	vmov	d0, r4, r5
 800cce0:	4616      	mov	r6, r2
 800cce2:	f001 fdb3 	bl	800e84c <__ulp>
 800cce6:	ec51 0b10 	vmov	r0, r1, d0
 800ccea:	b17e      	cbz	r6, 800cd0c <sulp+0x36>
 800ccec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	dd09      	ble.n	800cd0c <sulp+0x36>
 800ccf8:	051b      	lsls	r3, r3, #20
 800ccfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ccfe:	2400      	movs	r4, #0
 800cd00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd04:	4622      	mov	r2, r4
 800cd06:	462b      	mov	r3, r5
 800cd08:	f7f3 fc7e 	bl	8000608 <__aeabi_dmul>
 800cd0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd10 <_strtod_l>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	ed2d 8b02 	vpush	{d8}
 800cd18:	b09d      	sub	sp, #116	; 0x74
 800cd1a:	461f      	mov	r7, r3
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	9318      	str	r3, [sp, #96]	; 0x60
 800cd20:	4ba2      	ldr	r3, [pc, #648]	; (800cfac <_strtod_l+0x29c>)
 800cd22:	9213      	str	r2, [sp, #76]	; 0x4c
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	9305      	str	r3, [sp, #20]
 800cd28:	4604      	mov	r4, r0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	4688      	mov	r8, r1
 800cd2e:	f7f3 faa7 	bl	8000280 <strlen>
 800cd32:	f04f 0a00 	mov.w	sl, #0
 800cd36:	4605      	mov	r5, r0
 800cd38:	f04f 0b00 	mov.w	fp, #0
 800cd3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd42:	781a      	ldrb	r2, [r3, #0]
 800cd44:	2a2b      	cmp	r2, #43	; 0x2b
 800cd46:	d04e      	beq.n	800cde6 <_strtod_l+0xd6>
 800cd48:	d83b      	bhi.n	800cdc2 <_strtod_l+0xb2>
 800cd4a:	2a0d      	cmp	r2, #13
 800cd4c:	d834      	bhi.n	800cdb8 <_strtod_l+0xa8>
 800cd4e:	2a08      	cmp	r2, #8
 800cd50:	d834      	bhi.n	800cdbc <_strtod_l+0xac>
 800cd52:	2a00      	cmp	r2, #0
 800cd54:	d03e      	beq.n	800cdd4 <_strtod_l+0xc4>
 800cd56:	2300      	movs	r3, #0
 800cd58:	930a      	str	r3, [sp, #40]	; 0x28
 800cd5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cd5c:	7833      	ldrb	r3, [r6, #0]
 800cd5e:	2b30      	cmp	r3, #48	; 0x30
 800cd60:	f040 80b0 	bne.w	800cec4 <_strtod_l+0x1b4>
 800cd64:	7873      	ldrb	r3, [r6, #1]
 800cd66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd6a:	2b58      	cmp	r3, #88	; 0x58
 800cd6c:	d168      	bne.n	800ce40 <_strtod_l+0x130>
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	ab18      	add	r3, sp, #96	; 0x60
 800cd74:	9702      	str	r7, [sp, #8]
 800cd76:	9300      	str	r3, [sp, #0]
 800cd78:	4a8d      	ldr	r2, [pc, #564]	; (800cfb0 <_strtod_l+0x2a0>)
 800cd7a:	ab19      	add	r3, sp, #100	; 0x64
 800cd7c:	a917      	add	r1, sp, #92	; 0x5c
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 feaa 	bl	800dad8 <__gethex>
 800cd84:	f010 0707 	ands.w	r7, r0, #7
 800cd88:	4605      	mov	r5, r0
 800cd8a:	d005      	beq.n	800cd98 <_strtod_l+0x88>
 800cd8c:	2f06      	cmp	r7, #6
 800cd8e:	d12c      	bne.n	800cdea <_strtod_l+0xda>
 800cd90:	3601      	adds	r6, #1
 800cd92:	2300      	movs	r3, #0
 800cd94:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd96:	930a      	str	r3, [sp, #40]	; 0x28
 800cd98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 8590 	bne.w	800d8c0 <_strtod_l+0xbb0>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	b1eb      	cbz	r3, 800cde0 <_strtod_l+0xd0>
 800cda4:	4652      	mov	r2, sl
 800cda6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cdaa:	ec43 2b10 	vmov	d0, r2, r3
 800cdae:	b01d      	add	sp, #116	; 0x74
 800cdb0:	ecbd 8b02 	vpop	{d8}
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	2a20      	cmp	r2, #32
 800cdba:	d1cc      	bne.n	800cd56 <_strtod_l+0x46>
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdc0:	e7be      	b.n	800cd40 <_strtod_l+0x30>
 800cdc2:	2a2d      	cmp	r2, #45	; 0x2d
 800cdc4:	d1c7      	bne.n	800cd56 <_strtod_l+0x46>
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	920a      	str	r2, [sp, #40]	; 0x28
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdce:	785b      	ldrb	r3, [r3, #1]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1c2      	bne.n	800cd5a <_strtod_l+0x4a>
 800cdd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f040 856e 	bne.w	800d8bc <_strtod_l+0xbac>
 800cde0:	4652      	mov	r2, sl
 800cde2:	465b      	mov	r3, fp
 800cde4:	e7e1      	b.n	800cdaa <_strtod_l+0x9a>
 800cde6:	2200      	movs	r2, #0
 800cde8:	e7ee      	b.n	800cdc8 <_strtod_l+0xb8>
 800cdea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdec:	b13a      	cbz	r2, 800cdfe <_strtod_l+0xee>
 800cdee:	2135      	movs	r1, #53	; 0x35
 800cdf0:	a81a      	add	r0, sp, #104	; 0x68
 800cdf2:	f001 fe36 	bl	800ea62 <__copybits>
 800cdf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 f9f5 	bl	800e1e8 <_Bfree>
 800cdfe:	3f01      	subs	r7, #1
 800ce00:	2f04      	cmp	r7, #4
 800ce02:	d806      	bhi.n	800ce12 <_strtod_l+0x102>
 800ce04:	e8df f007 	tbb	[pc, r7]
 800ce08:	1714030a 	.word	0x1714030a
 800ce0c:	0a          	.byte	0x0a
 800ce0d:	00          	.byte	0x00
 800ce0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ce12:	0728      	lsls	r0, r5, #28
 800ce14:	d5c0      	bpl.n	800cd98 <_strtod_l+0x88>
 800ce16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ce1a:	e7bd      	b.n	800cd98 <_strtod_l+0x88>
 800ce1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ce20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ce22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce2e:	e7f0      	b.n	800ce12 <_strtod_l+0x102>
 800ce30:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cfb4 <_strtod_l+0x2a4>
 800ce34:	e7ed      	b.n	800ce12 <_strtod_l+0x102>
 800ce36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ce3a:	f04f 3aff 	mov.w	sl, #4294967295
 800ce3e:	e7e8      	b.n	800ce12 <_strtod_l+0x102>
 800ce40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce46:	785b      	ldrb	r3, [r3, #1]
 800ce48:	2b30      	cmp	r3, #48	; 0x30
 800ce4a:	d0f9      	beq.n	800ce40 <_strtod_l+0x130>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0a3      	beq.n	800cd98 <_strtod_l+0x88>
 800ce50:	2301      	movs	r3, #1
 800ce52:	f04f 0900 	mov.w	r9, #0
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce5a:	9308      	str	r3, [sp, #32]
 800ce5c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ce60:	464f      	mov	r7, r9
 800ce62:	220a      	movs	r2, #10
 800ce64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce66:	7806      	ldrb	r6, [r0, #0]
 800ce68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce6c:	b2d9      	uxtb	r1, r3
 800ce6e:	2909      	cmp	r1, #9
 800ce70:	d92a      	bls.n	800cec8 <_strtod_l+0x1b8>
 800ce72:	9905      	ldr	r1, [sp, #20]
 800ce74:	462a      	mov	r2, r5
 800ce76:	f001 fe6b 	bl	800eb50 <strncmp>
 800ce7a:	b398      	cbz	r0, 800cee4 <_strtod_l+0x1d4>
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	4632      	mov	r2, r6
 800ce80:	463d      	mov	r5, r7
 800ce82:	9005      	str	r0, [sp, #20]
 800ce84:	4603      	mov	r3, r0
 800ce86:	2a65      	cmp	r2, #101	; 0x65
 800ce88:	d001      	beq.n	800ce8e <_strtod_l+0x17e>
 800ce8a:	2a45      	cmp	r2, #69	; 0x45
 800ce8c:	d118      	bne.n	800cec0 <_strtod_l+0x1b0>
 800ce8e:	b91d      	cbnz	r5, 800ce98 <_strtod_l+0x188>
 800ce90:	9a04      	ldr	r2, [sp, #16]
 800ce92:	4302      	orrs	r2, r0
 800ce94:	d09e      	beq.n	800cdd4 <_strtod_l+0xc4>
 800ce96:	2500      	movs	r5, #0
 800ce98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ce9c:	f108 0201 	add.w	r2, r8, #1
 800cea0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cea2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cea6:	2a2b      	cmp	r2, #43	; 0x2b
 800cea8:	d075      	beq.n	800cf96 <_strtod_l+0x286>
 800ceaa:	2a2d      	cmp	r2, #45	; 0x2d
 800ceac:	d07b      	beq.n	800cfa6 <_strtod_l+0x296>
 800ceae:	f04f 0c00 	mov.w	ip, #0
 800ceb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ceb6:	2909      	cmp	r1, #9
 800ceb8:	f240 8082 	bls.w	800cfc0 <_strtod_l+0x2b0>
 800cebc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cec0:	2600      	movs	r6, #0
 800cec2:	e09d      	b.n	800d000 <_strtod_l+0x2f0>
 800cec4:	2300      	movs	r3, #0
 800cec6:	e7c4      	b.n	800ce52 <_strtod_l+0x142>
 800cec8:	2f08      	cmp	r7, #8
 800ceca:	bfd8      	it	le
 800cecc:	9907      	ldrle	r1, [sp, #28]
 800cece:	f100 0001 	add.w	r0, r0, #1
 800ced2:	bfda      	itte	le
 800ced4:	fb02 3301 	mlale	r3, r2, r1, r3
 800ced8:	9307      	strle	r3, [sp, #28]
 800ceda:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cede:	3701      	adds	r7, #1
 800cee0:	9017      	str	r0, [sp, #92]	; 0x5c
 800cee2:	e7bf      	b.n	800ce64 <_strtod_l+0x154>
 800cee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cee6:	195a      	adds	r2, r3, r5
 800cee8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ceea:	5d5a      	ldrb	r2, [r3, r5]
 800ceec:	2f00      	cmp	r7, #0
 800ceee:	d037      	beq.n	800cf60 <_strtod_l+0x250>
 800cef0:	9005      	str	r0, [sp, #20]
 800cef2:	463d      	mov	r5, r7
 800cef4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cef8:	2b09      	cmp	r3, #9
 800cefa:	d912      	bls.n	800cf22 <_strtod_l+0x212>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e7c2      	b.n	800ce86 <_strtod_l+0x176>
 800cf00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf06:	785a      	ldrb	r2, [r3, #1]
 800cf08:	3001      	adds	r0, #1
 800cf0a:	2a30      	cmp	r2, #48	; 0x30
 800cf0c:	d0f8      	beq.n	800cf00 <_strtod_l+0x1f0>
 800cf0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cf12:	2b08      	cmp	r3, #8
 800cf14:	f200 84d9 	bhi.w	800d8ca <_strtod_l+0xbba>
 800cf18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf1a:	9005      	str	r0, [sp, #20]
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	9308      	str	r3, [sp, #32]
 800cf20:	4605      	mov	r5, r0
 800cf22:	3a30      	subs	r2, #48	; 0x30
 800cf24:	f100 0301 	add.w	r3, r0, #1
 800cf28:	d014      	beq.n	800cf54 <_strtod_l+0x244>
 800cf2a:	9905      	ldr	r1, [sp, #20]
 800cf2c:	4419      	add	r1, r3
 800cf2e:	9105      	str	r1, [sp, #20]
 800cf30:	462b      	mov	r3, r5
 800cf32:	eb00 0e05 	add.w	lr, r0, r5
 800cf36:	210a      	movs	r1, #10
 800cf38:	4573      	cmp	r3, lr
 800cf3a:	d113      	bne.n	800cf64 <_strtod_l+0x254>
 800cf3c:	182b      	adds	r3, r5, r0
 800cf3e:	2b08      	cmp	r3, #8
 800cf40:	f105 0501 	add.w	r5, r5, #1
 800cf44:	4405      	add	r5, r0
 800cf46:	dc1c      	bgt.n	800cf82 <_strtod_l+0x272>
 800cf48:	9907      	ldr	r1, [sp, #28]
 800cf4a:	230a      	movs	r3, #10
 800cf4c:	fb03 2301 	mla	r3, r3, r1, r2
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	2300      	movs	r3, #0
 800cf54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf56:	1c51      	adds	r1, r2, #1
 800cf58:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf5a:	7852      	ldrb	r2, [r2, #1]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	e7c9      	b.n	800cef4 <_strtod_l+0x1e4>
 800cf60:	4638      	mov	r0, r7
 800cf62:	e7d2      	b.n	800cf0a <_strtod_l+0x1fa>
 800cf64:	2b08      	cmp	r3, #8
 800cf66:	dc04      	bgt.n	800cf72 <_strtod_l+0x262>
 800cf68:	9e07      	ldr	r6, [sp, #28]
 800cf6a:	434e      	muls	r6, r1
 800cf6c:	9607      	str	r6, [sp, #28]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	e7e2      	b.n	800cf38 <_strtod_l+0x228>
 800cf72:	f103 0c01 	add.w	ip, r3, #1
 800cf76:	f1bc 0f10 	cmp.w	ip, #16
 800cf7a:	bfd8      	it	le
 800cf7c:	fb01 f909 	mulle.w	r9, r1, r9
 800cf80:	e7f5      	b.n	800cf6e <_strtod_l+0x25e>
 800cf82:	2d10      	cmp	r5, #16
 800cf84:	bfdc      	itt	le
 800cf86:	230a      	movle	r3, #10
 800cf88:	fb03 2909 	mlale	r9, r3, r9, r2
 800cf8c:	e7e1      	b.n	800cf52 <_strtod_l+0x242>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	2301      	movs	r3, #1
 800cf94:	e77c      	b.n	800ce90 <_strtod_l+0x180>
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	f108 0202 	add.w	r2, r8, #2
 800cf9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfa0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cfa4:	e785      	b.n	800ceb2 <_strtod_l+0x1a2>
 800cfa6:	f04f 0c01 	mov.w	ip, #1
 800cfaa:	e7f6      	b.n	800cf9a <_strtod_l+0x28a>
 800cfac:	08010910 	.word	0x08010910
 800cfb0:	08010844 	.word	0x08010844
 800cfb4:	7ff00000 	.word	0x7ff00000
 800cfb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfba:	1c51      	adds	r1, r2, #1
 800cfbc:	9117      	str	r1, [sp, #92]	; 0x5c
 800cfbe:	7852      	ldrb	r2, [r2, #1]
 800cfc0:	2a30      	cmp	r2, #48	; 0x30
 800cfc2:	d0f9      	beq.n	800cfb8 <_strtod_l+0x2a8>
 800cfc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cfc8:	2908      	cmp	r1, #8
 800cfca:	f63f af79 	bhi.w	800cec0 <_strtod_l+0x1b0>
 800cfce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cfd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfd4:	9206      	str	r2, [sp, #24]
 800cfd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfd8:	1c51      	adds	r1, r2, #1
 800cfda:	9117      	str	r1, [sp, #92]	; 0x5c
 800cfdc:	7852      	ldrb	r2, [r2, #1]
 800cfde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cfe2:	2e09      	cmp	r6, #9
 800cfe4:	d937      	bls.n	800d056 <_strtod_l+0x346>
 800cfe6:	9e06      	ldr	r6, [sp, #24]
 800cfe8:	1b89      	subs	r1, r1, r6
 800cfea:	2908      	cmp	r1, #8
 800cfec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cff0:	dc02      	bgt.n	800cff8 <_strtod_l+0x2e8>
 800cff2:	4576      	cmp	r6, lr
 800cff4:	bfa8      	it	ge
 800cff6:	4676      	movge	r6, lr
 800cff8:	f1bc 0f00 	cmp.w	ip, #0
 800cffc:	d000      	beq.n	800d000 <_strtod_l+0x2f0>
 800cffe:	4276      	negs	r6, r6
 800d000:	2d00      	cmp	r5, #0
 800d002:	d14d      	bne.n	800d0a0 <_strtod_l+0x390>
 800d004:	9904      	ldr	r1, [sp, #16]
 800d006:	4301      	orrs	r1, r0
 800d008:	f47f aec6 	bne.w	800cd98 <_strtod_l+0x88>
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f47f aee1 	bne.w	800cdd4 <_strtod_l+0xc4>
 800d012:	2a69      	cmp	r2, #105	; 0x69
 800d014:	d027      	beq.n	800d066 <_strtod_l+0x356>
 800d016:	dc24      	bgt.n	800d062 <_strtod_l+0x352>
 800d018:	2a49      	cmp	r2, #73	; 0x49
 800d01a:	d024      	beq.n	800d066 <_strtod_l+0x356>
 800d01c:	2a4e      	cmp	r2, #78	; 0x4e
 800d01e:	f47f aed9 	bne.w	800cdd4 <_strtod_l+0xc4>
 800d022:	499f      	ldr	r1, [pc, #636]	; (800d2a0 <_strtod_l+0x590>)
 800d024:	a817      	add	r0, sp, #92	; 0x5c
 800d026:	f000 ffaf 	bl	800df88 <__match>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	f43f aed2 	beq.w	800cdd4 <_strtod_l+0xc4>
 800d030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b28      	cmp	r3, #40	; 0x28
 800d036:	d12d      	bne.n	800d094 <_strtod_l+0x384>
 800d038:	499a      	ldr	r1, [pc, #616]	; (800d2a4 <_strtod_l+0x594>)
 800d03a:	aa1a      	add	r2, sp, #104	; 0x68
 800d03c:	a817      	add	r0, sp, #92	; 0x5c
 800d03e:	f000 ffb7 	bl	800dfb0 <__hexnan>
 800d042:	2805      	cmp	r0, #5
 800d044:	d126      	bne.n	800d094 <_strtod_l+0x384>
 800d046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d048:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d04c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d050:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d054:	e6a0      	b.n	800cd98 <_strtod_l+0x88>
 800d056:	210a      	movs	r1, #10
 800d058:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d05c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d060:	e7b9      	b.n	800cfd6 <_strtod_l+0x2c6>
 800d062:	2a6e      	cmp	r2, #110	; 0x6e
 800d064:	e7db      	b.n	800d01e <_strtod_l+0x30e>
 800d066:	4990      	ldr	r1, [pc, #576]	; (800d2a8 <_strtod_l+0x598>)
 800d068:	a817      	add	r0, sp, #92	; 0x5c
 800d06a:	f000 ff8d 	bl	800df88 <__match>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f aeb0 	beq.w	800cdd4 <_strtod_l+0xc4>
 800d074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d076:	498d      	ldr	r1, [pc, #564]	; (800d2ac <_strtod_l+0x59c>)
 800d078:	3b01      	subs	r3, #1
 800d07a:	a817      	add	r0, sp, #92	; 0x5c
 800d07c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d07e:	f000 ff83 	bl	800df88 <__match>
 800d082:	b910      	cbnz	r0, 800d08a <_strtod_l+0x37a>
 800d084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d086:	3301      	adds	r3, #1
 800d088:	9317      	str	r3, [sp, #92]	; 0x5c
 800d08a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d2bc <_strtod_l+0x5ac>
 800d08e:	f04f 0a00 	mov.w	sl, #0
 800d092:	e681      	b.n	800cd98 <_strtod_l+0x88>
 800d094:	4886      	ldr	r0, [pc, #536]	; (800d2b0 <_strtod_l+0x5a0>)
 800d096:	f001 fd53 	bl	800eb40 <nan>
 800d09a:	ec5b ab10 	vmov	sl, fp, d0
 800d09e:	e67b      	b.n	800cd98 <_strtod_l+0x88>
 800d0a0:	9b05      	ldr	r3, [sp, #20]
 800d0a2:	9807      	ldr	r0, [sp, #28]
 800d0a4:	1af3      	subs	r3, r6, r3
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	bf08      	it	eq
 800d0aa:	462f      	moveq	r7, r5
 800d0ac:	2d10      	cmp	r5, #16
 800d0ae:	9306      	str	r3, [sp, #24]
 800d0b0:	46a8      	mov	r8, r5
 800d0b2:	bfa8      	it	ge
 800d0b4:	f04f 0810 	movge.w	r8, #16
 800d0b8:	f7f3 fa2c 	bl	8000514 <__aeabi_ui2d>
 800d0bc:	2d09      	cmp	r5, #9
 800d0be:	4682      	mov	sl, r0
 800d0c0:	468b      	mov	fp, r1
 800d0c2:	dd13      	ble.n	800d0ec <_strtod_l+0x3dc>
 800d0c4:	4b7b      	ldr	r3, [pc, #492]	; (800d2b4 <_strtod_l+0x5a4>)
 800d0c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d0ce:	f7f3 fa9b 	bl	8000608 <__aeabi_dmul>
 800d0d2:	4682      	mov	sl, r0
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	468b      	mov	fp, r1
 800d0d8:	f7f3 fa1c 	bl	8000514 <__aeabi_ui2d>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	4659      	mov	r1, fp
 800d0e4:	f7f3 f8da 	bl	800029c <__adddf3>
 800d0e8:	4682      	mov	sl, r0
 800d0ea:	468b      	mov	fp, r1
 800d0ec:	2d0f      	cmp	r5, #15
 800d0ee:	dc38      	bgt.n	800d162 <_strtod_l+0x452>
 800d0f0:	9b06      	ldr	r3, [sp, #24]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f43f ae50 	beq.w	800cd98 <_strtod_l+0x88>
 800d0f8:	dd24      	ble.n	800d144 <_strtod_l+0x434>
 800d0fa:	2b16      	cmp	r3, #22
 800d0fc:	dc0b      	bgt.n	800d116 <_strtod_l+0x406>
 800d0fe:	496d      	ldr	r1, [pc, #436]	; (800d2b4 <_strtod_l+0x5a4>)
 800d100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d108:	4652      	mov	r2, sl
 800d10a:	465b      	mov	r3, fp
 800d10c:	f7f3 fa7c 	bl	8000608 <__aeabi_dmul>
 800d110:	4682      	mov	sl, r0
 800d112:	468b      	mov	fp, r1
 800d114:	e640      	b.n	800cd98 <_strtod_l+0x88>
 800d116:	9a06      	ldr	r2, [sp, #24]
 800d118:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d11c:	4293      	cmp	r3, r2
 800d11e:	db20      	blt.n	800d162 <_strtod_l+0x452>
 800d120:	4c64      	ldr	r4, [pc, #400]	; (800d2b4 <_strtod_l+0x5a4>)
 800d122:	f1c5 050f 	rsb	r5, r5, #15
 800d126:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d12a:	4652      	mov	r2, sl
 800d12c:	465b      	mov	r3, fp
 800d12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d132:	f7f3 fa69 	bl	8000608 <__aeabi_dmul>
 800d136:	9b06      	ldr	r3, [sp, #24]
 800d138:	1b5d      	subs	r5, r3, r5
 800d13a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d13e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d142:	e7e3      	b.n	800d10c <_strtod_l+0x3fc>
 800d144:	9b06      	ldr	r3, [sp, #24]
 800d146:	3316      	adds	r3, #22
 800d148:	db0b      	blt.n	800d162 <_strtod_l+0x452>
 800d14a:	9b05      	ldr	r3, [sp, #20]
 800d14c:	1b9e      	subs	r6, r3, r6
 800d14e:	4b59      	ldr	r3, [pc, #356]	; (800d2b4 <_strtod_l+0x5a4>)
 800d150:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d154:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d158:	4650      	mov	r0, sl
 800d15a:	4659      	mov	r1, fp
 800d15c:	f7f3 fb7e 	bl	800085c <__aeabi_ddiv>
 800d160:	e7d6      	b.n	800d110 <_strtod_l+0x400>
 800d162:	9b06      	ldr	r3, [sp, #24]
 800d164:	eba5 0808 	sub.w	r8, r5, r8
 800d168:	4498      	add	r8, r3
 800d16a:	f1b8 0f00 	cmp.w	r8, #0
 800d16e:	dd74      	ble.n	800d25a <_strtod_l+0x54a>
 800d170:	f018 030f 	ands.w	r3, r8, #15
 800d174:	d00a      	beq.n	800d18c <_strtod_l+0x47c>
 800d176:	494f      	ldr	r1, [pc, #316]	; (800d2b4 <_strtod_l+0x5a4>)
 800d178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d17c:	4652      	mov	r2, sl
 800d17e:	465b      	mov	r3, fp
 800d180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d184:	f7f3 fa40 	bl	8000608 <__aeabi_dmul>
 800d188:	4682      	mov	sl, r0
 800d18a:	468b      	mov	fp, r1
 800d18c:	f038 080f 	bics.w	r8, r8, #15
 800d190:	d04f      	beq.n	800d232 <_strtod_l+0x522>
 800d192:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d196:	dd22      	ble.n	800d1de <_strtod_l+0x4ce>
 800d198:	2500      	movs	r5, #0
 800d19a:	462e      	mov	r6, r5
 800d19c:	9507      	str	r5, [sp, #28]
 800d19e:	9505      	str	r5, [sp, #20]
 800d1a0:	2322      	movs	r3, #34	; 0x22
 800d1a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d2bc <_strtod_l+0x5ac>
 800d1a6:	6023      	str	r3, [r4, #0]
 800d1a8:	f04f 0a00 	mov.w	sl, #0
 800d1ac:	9b07      	ldr	r3, [sp, #28]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f43f adf2 	beq.w	800cd98 <_strtod_l+0x88>
 800d1b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f001 f816 	bl	800e1e8 <_Bfree>
 800d1bc:	9905      	ldr	r1, [sp, #20]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f001 f812 	bl	800e1e8 <_Bfree>
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f001 f80e 	bl	800e1e8 <_Bfree>
 800d1cc:	9907      	ldr	r1, [sp, #28]
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f001 f80a 	bl	800e1e8 <_Bfree>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f001 f806 	bl	800e1e8 <_Bfree>
 800d1dc:	e5dc      	b.n	800cd98 <_strtod_l+0x88>
 800d1de:	4b36      	ldr	r3, [pc, #216]	; (800d2b8 <_strtod_l+0x5a8>)
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	4659      	mov	r1, fp
 800d1ec:	4699      	mov	r9, r3
 800d1ee:	f1b8 0f01 	cmp.w	r8, #1
 800d1f2:	dc21      	bgt.n	800d238 <_strtod_l+0x528>
 800d1f4:	b10b      	cbz	r3, 800d1fa <_strtod_l+0x4ea>
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	468b      	mov	fp, r1
 800d1fa:	4b2f      	ldr	r3, [pc, #188]	; (800d2b8 <_strtod_l+0x5a8>)
 800d1fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d200:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d204:	4652      	mov	r2, sl
 800d206:	465b      	mov	r3, fp
 800d208:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d20c:	f7f3 f9fc 	bl	8000608 <__aeabi_dmul>
 800d210:	4b2a      	ldr	r3, [pc, #168]	; (800d2bc <_strtod_l+0x5ac>)
 800d212:	460a      	mov	r2, r1
 800d214:	400b      	ands	r3, r1
 800d216:	492a      	ldr	r1, [pc, #168]	; (800d2c0 <_strtod_l+0x5b0>)
 800d218:	428b      	cmp	r3, r1
 800d21a:	4682      	mov	sl, r0
 800d21c:	d8bc      	bhi.n	800d198 <_strtod_l+0x488>
 800d21e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d222:	428b      	cmp	r3, r1
 800d224:	bf86      	itte	hi
 800d226:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d2c4 <_strtod_l+0x5b4>
 800d22a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d22e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d232:	2300      	movs	r3, #0
 800d234:	9304      	str	r3, [sp, #16]
 800d236:	e084      	b.n	800d342 <_strtod_l+0x632>
 800d238:	f018 0f01 	tst.w	r8, #1
 800d23c:	d005      	beq.n	800d24a <_strtod_l+0x53a>
 800d23e:	9b04      	ldr	r3, [sp, #16]
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f7f3 f9e0 	bl	8000608 <__aeabi_dmul>
 800d248:	2301      	movs	r3, #1
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	3208      	adds	r2, #8
 800d24e:	f109 0901 	add.w	r9, r9, #1
 800d252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d256:	9204      	str	r2, [sp, #16]
 800d258:	e7c9      	b.n	800d1ee <_strtod_l+0x4de>
 800d25a:	d0ea      	beq.n	800d232 <_strtod_l+0x522>
 800d25c:	f1c8 0800 	rsb	r8, r8, #0
 800d260:	f018 020f 	ands.w	r2, r8, #15
 800d264:	d00a      	beq.n	800d27c <_strtod_l+0x56c>
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <_strtod_l+0x5a4>)
 800d268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d26c:	4650      	mov	r0, sl
 800d26e:	4659      	mov	r1, fp
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f7f3 faf2 	bl	800085c <__aeabi_ddiv>
 800d278:	4682      	mov	sl, r0
 800d27a:	468b      	mov	fp, r1
 800d27c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d280:	d0d7      	beq.n	800d232 <_strtod_l+0x522>
 800d282:	f1b8 0f1f 	cmp.w	r8, #31
 800d286:	dd1f      	ble.n	800d2c8 <_strtod_l+0x5b8>
 800d288:	2500      	movs	r5, #0
 800d28a:	462e      	mov	r6, r5
 800d28c:	9507      	str	r5, [sp, #28]
 800d28e:	9505      	str	r5, [sp, #20]
 800d290:	2322      	movs	r3, #34	; 0x22
 800d292:	f04f 0a00 	mov.w	sl, #0
 800d296:	f04f 0b00 	mov.w	fp, #0
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	e786      	b.n	800d1ac <_strtod_l+0x49c>
 800d29e:	bf00      	nop
 800d2a0:	08010841 	.word	0x08010841
 800d2a4:	08010858 	.word	0x08010858
 800d2a8:	08010838 	.word	0x08010838
 800d2ac:	0801083b 	.word	0x0801083b
 800d2b0:	08010acf 	.word	0x08010acf
 800d2b4:	080109c0 	.word	0x080109c0
 800d2b8:	08010998 	.word	0x08010998
 800d2bc:	7ff00000 	.word	0x7ff00000
 800d2c0:	7ca00000 	.word	0x7ca00000
 800d2c4:	7fefffff 	.word	0x7fefffff
 800d2c8:	f018 0310 	ands.w	r3, r8, #16
 800d2cc:	bf18      	it	ne
 800d2ce:	236a      	movne	r3, #106	; 0x6a
 800d2d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d680 <_strtod_l+0x970>
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	4650      	mov	r0, sl
 800d2d8:	4659      	mov	r1, fp
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f018 0f01 	tst.w	r8, #1
 800d2e0:	d004      	beq.n	800d2ec <_strtod_l+0x5dc>
 800d2e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d2e6:	f7f3 f98f 	bl	8000608 <__aeabi_dmul>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d2f0:	f109 0908 	add.w	r9, r9, #8
 800d2f4:	d1f2      	bne.n	800d2dc <_strtod_l+0x5cc>
 800d2f6:	b10b      	cbz	r3, 800d2fc <_strtod_l+0x5ec>
 800d2f8:	4682      	mov	sl, r0
 800d2fa:	468b      	mov	fp, r1
 800d2fc:	9b04      	ldr	r3, [sp, #16]
 800d2fe:	b1c3      	cbz	r3, 800d332 <_strtod_l+0x622>
 800d300:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d304:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d308:	2b00      	cmp	r3, #0
 800d30a:	4659      	mov	r1, fp
 800d30c:	dd11      	ble.n	800d332 <_strtod_l+0x622>
 800d30e:	2b1f      	cmp	r3, #31
 800d310:	f340 8124 	ble.w	800d55c <_strtod_l+0x84c>
 800d314:	2b34      	cmp	r3, #52	; 0x34
 800d316:	bfde      	ittt	le
 800d318:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d31c:	f04f 33ff 	movle.w	r3, #4294967295
 800d320:	fa03 f202 	lslle.w	r2, r3, r2
 800d324:	f04f 0a00 	mov.w	sl, #0
 800d328:	bfcc      	ite	gt
 800d32a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d32e:	ea02 0b01 	andle.w	fp, r2, r1
 800d332:	2200      	movs	r2, #0
 800d334:	2300      	movs	r3, #0
 800d336:	4650      	mov	r0, sl
 800d338:	4659      	mov	r1, fp
 800d33a:	f7f3 fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d1a2      	bne.n	800d288 <_strtod_l+0x578>
 800d342:	9b07      	ldr	r3, [sp, #28]
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	9908      	ldr	r1, [sp, #32]
 800d348:	462b      	mov	r3, r5
 800d34a:	463a      	mov	r2, r7
 800d34c:	4620      	mov	r0, r4
 800d34e:	f000 ffb3 	bl	800e2b8 <__s2b>
 800d352:	9007      	str	r0, [sp, #28]
 800d354:	2800      	cmp	r0, #0
 800d356:	f43f af1f 	beq.w	800d198 <_strtod_l+0x488>
 800d35a:	9b05      	ldr	r3, [sp, #20]
 800d35c:	1b9e      	subs	r6, r3, r6
 800d35e:	9b06      	ldr	r3, [sp, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	bfb4      	ite	lt
 800d364:	4633      	movlt	r3, r6
 800d366:	2300      	movge	r3, #0
 800d368:	930c      	str	r3, [sp, #48]	; 0x30
 800d36a:	9b06      	ldr	r3, [sp, #24]
 800d36c:	2500      	movs	r5, #0
 800d36e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d372:	9312      	str	r3, [sp, #72]	; 0x48
 800d374:	462e      	mov	r6, r5
 800d376:	9b07      	ldr	r3, [sp, #28]
 800d378:	4620      	mov	r0, r4
 800d37a:	6859      	ldr	r1, [r3, #4]
 800d37c:	f000 fef4 	bl	800e168 <_Balloc>
 800d380:	9005      	str	r0, [sp, #20]
 800d382:	2800      	cmp	r0, #0
 800d384:	f43f af0c 	beq.w	800d1a0 <_strtod_l+0x490>
 800d388:	9b07      	ldr	r3, [sp, #28]
 800d38a:	691a      	ldr	r2, [r3, #16]
 800d38c:	3202      	adds	r2, #2
 800d38e:	f103 010c 	add.w	r1, r3, #12
 800d392:	0092      	lsls	r2, r2, #2
 800d394:	300c      	adds	r0, #12
 800d396:	f7ff faaf 	bl	800c8f8 <memcpy>
 800d39a:	ec4b ab10 	vmov	d0, sl, fp
 800d39e:	aa1a      	add	r2, sp, #104	; 0x68
 800d3a0:	a919      	add	r1, sp, #100	; 0x64
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f001 face 	bl	800e944 <__d2b>
 800d3a8:	ec4b ab18 	vmov	d8, sl, fp
 800d3ac:	9018      	str	r0, [sp, #96]	; 0x60
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f aef6 	beq.w	800d1a0 <_strtod_l+0x490>
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f001 f818 	bl	800e3ec <__i2b>
 800d3bc:	4606      	mov	r6, r0
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f43f aeee 	beq.w	800d1a0 <_strtod_l+0x490>
 800d3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3c6:	9904      	ldr	r1, [sp, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bfab      	itete	ge
 800d3cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d3ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d3d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d3d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d3d6:	bfac      	ite	ge
 800d3d8:	eb03 0902 	addge.w	r9, r3, r2
 800d3dc:	1ad7      	sublt	r7, r2, r3
 800d3de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3e0:	eba3 0801 	sub.w	r8, r3, r1
 800d3e4:	4490      	add	r8, r2
 800d3e6:	4ba1      	ldr	r3, [pc, #644]	; (800d66c <_strtod_l+0x95c>)
 800d3e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3ec:	4598      	cmp	r8, r3
 800d3ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d3f2:	f280 80c7 	bge.w	800d584 <_strtod_l+0x874>
 800d3f6:	eba3 0308 	sub.w	r3, r3, r8
 800d3fa:	2b1f      	cmp	r3, #31
 800d3fc:	eba2 0203 	sub.w	r2, r2, r3
 800d400:	f04f 0101 	mov.w	r1, #1
 800d404:	f300 80b1 	bgt.w	800d56a <_strtod_l+0x85a>
 800d408:	fa01 f303 	lsl.w	r3, r1, r3
 800d40c:	930d      	str	r3, [sp, #52]	; 0x34
 800d40e:	2300      	movs	r3, #0
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	eb09 0802 	add.w	r8, r9, r2
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	45c1      	cmp	r9, r8
 800d41a:	4417      	add	r7, r2
 800d41c:	441f      	add	r7, r3
 800d41e:	464b      	mov	r3, r9
 800d420:	bfa8      	it	ge
 800d422:	4643      	movge	r3, r8
 800d424:	42bb      	cmp	r3, r7
 800d426:	bfa8      	it	ge
 800d428:	463b      	movge	r3, r7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	bfc2      	ittt	gt
 800d42e:	eba8 0803 	subgt.w	r8, r8, r3
 800d432:	1aff      	subgt	r7, r7, r3
 800d434:	eba9 0903 	subgt.w	r9, r9, r3
 800d438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dd17      	ble.n	800d46e <_strtod_l+0x75e>
 800d43e:	4631      	mov	r1, r6
 800d440:	461a      	mov	r2, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f001 f892 	bl	800e56c <__pow5mult>
 800d448:	4606      	mov	r6, r0
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f43f aea8 	beq.w	800d1a0 <_strtod_l+0x490>
 800d450:	4601      	mov	r1, r0
 800d452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d454:	4620      	mov	r0, r4
 800d456:	f000 ffdf 	bl	800e418 <__multiply>
 800d45a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d45c:	2800      	cmp	r0, #0
 800d45e:	f43f ae9f 	beq.w	800d1a0 <_strtod_l+0x490>
 800d462:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d464:	4620      	mov	r0, r4
 800d466:	f000 febf 	bl	800e1e8 <_Bfree>
 800d46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d46c:	9318      	str	r3, [sp, #96]	; 0x60
 800d46e:	f1b8 0f00 	cmp.w	r8, #0
 800d472:	f300 808c 	bgt.w	800d58e <_strtod_l+0x87e>
 800d476:	9b06      	ldr	r3, [sp, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dd08      	ble.n	800d48e <_strtod_l+0x77e>
 800d47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d47e:	9905      	ldr	r1, [sp, #20]
 800d480:	4620      	mov	r0, r4
 800d482:	f001 f873 	bl	800e56c <__pow5mult>
 800d486:	9005      	str	r0, [sp, #20]
 800d488:	2800      	cmp	r0, #0
 800d48a:	f43f ae89 	beq.w	800d1a0 <_strtod_l+0x490>
 800d48e:	2f00      	cmp	r7, #0
 800d490:	dd08      	ble.n	800d4a4 <_strtod_l+0x794>
 800d492:	9905      	ldr	r1, [sp, #20]
 800d494:	463a      	mov	r2, r7
 800d496:	4620      	mov	r0, r4
 800d498:	f001 f8c2 	bl	800e620 <__lshift>
 800d49c:	9005      	str	r0, [sp, #20]
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f43f ae7e 	beq.w	800d1a0 <_strtod_l+0x490>
 800d4a4:	f1b9 0f00 	cmp.w	r9, #0
 800d4a8:	dd08      	ble.n	800d4bc <_strtod_l+0x7ac>
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	464a      	mov	r2, r9
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f001 f8b6 	bl	800e620 <__lshift>
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	f43f ae72 	beq.w	800d1a0 <_strtod_l+0x490>
 800d4bc:	9a05      	ldr	r2, [sp, #20]
 800d4be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f001 f939 	bl	800e738 <__mdiff>
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	f43f ae69 	beq.w	800d1a0 <_strtod_l+0x490>
 800d4ce:	68c3      	ldr	r3, [r0, #12]
 800d4d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60c3      	str	r3, [r0, #12]
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	f001 f912 	bl	800e700 <__mcmp>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	da60      	bge.n	800d5a2 <_strtod_l+0x892>
 800d4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d4e6:	f040 8082 	bne.w	800d5ee <_strtod_l+0x8de>
 800d4ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d17d      	bne.n	800d5ee <_strtod_l+0x8de>
 800d4f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4f6:	0d1b      	lsrs	r3, r3, #20
 800d4f8:	051b      	lsls	r3, r3, #20
 800d4fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4fe:	d976      	bls.n	800d5ee <_strtod_l+0x8de>
 800d500:	696b      	ldr	r3, [r5, #20]
 800d502:	b913      	cbnz	r3, 800d50a <_strtod_l+0x7fa>
 800d504:	692b      	ldr	r3, [r5, #16]
 800d506:	2b01      	cmp	r3, #1
 800d508:	dd71      	ble.n	800d5ee <_strtod_l+0x8de>
 800d50a:	4629      	mov	r1, r5
 800d50c:	2201      	movs	r2, #1
 800d50e:	4620      	mov	r0, r4
 800d510:	f001 f886 	bl	800e620 <__lshift>
 800d514:	4631      	mov	r1, r6
 800d516:	4605      	mov	r5, r0
 800d518:	f001 f8f2 	bl	800e700 <__mcmp>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	dd66      	ble.n	800d5ee <_strtod_l+0x8de>
 800d520:	9904      	ldr	r1, [sp, #16]
 800d522:	4a53      	ldr	r2, [pc, #332]	; (800d670 <_strtod_l+0x960>)
 800d524:	465b      	mov	r3, fp
 800d526:	2900      	cmp	r1, #0
 800d528:	f000 8081 	beq.w	800d62e <_strtod_l+0x91e>
 800d52c:	ea02 010b 	and.w	r1, r2, fp
 800d530:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d534:	dc7b      	bgt.n	800d62e <_strtod_l+0x91e>
 800d536:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d53a:	f77f aea9 	ble.w	800d290 <_strtod_l+0x580>
 800d53e:	4b4d      	ldr	r3, [pc, #308]	; (800d674 <_strtod_l+0x964>)
 800d540:	4650      	mov	r0, sl
 800d542:	4659      	mov	r1, fp
 800d544:	2200      	movs	r2, #0
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	460b      	mov	r3, r1
 800d54c:	4303      	orrs	r3, r0
 800d54e:	bf08      	it	eq
 800d550:	2322      	moveq	r3, #34	; 0x22
 800d552:	4682      	mov	sl, r0
 800d554:	468b      	mov	fp, r1
 800d556:	bf08      	it	eq
 800d558:	6023      	streq	r3, [r4, #0]
 800d55a:	e62b      	b.n	800d1b4 <_strtod_l+0x4a4>
 800d55c:	f04f 32ff 	mov.w	r2, #4294967295
 800d560:	fa02 f303 	lsl.w	r3, r2, r3
 800d564:	ea03 0a0a 	and.w	sl, r3, sl
 800d568:	e6e3      	b.n	800d332 <_strtod_l+0x622>
 800d56a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d56e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d572:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d576:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d57a:	fa01 f308 	lsl.w	r3, r1, r8
 800d57e:	9308      	str	r3, [sp, #32]
 800d580:	910d      	str	r1, [sp, #52]	; 0x34
 800d582:	e746      	b.n	800d412 <_strtod_l+0x702>
 800d584:	2300      	movs	r3, #0
 800d586:	9308      	str	r3, [sp, #32]
 800d588:	2301      	movs	r3, #1
 800d58a:	930d      	str	r3, [sp, #52]	; 0x34
 800d58c:	e741      	b.n	800d412 <_strtod_l+0x702>
 800d58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d590:	4642      	mov	r2, r8
 800d592:	4620      	mov	r0, r4
 800d594:	f001 f844 	bl	800e620 <__lshift>
 800d598:	9018      	str	r0, [sp, #96]	; 0x60
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f47f af6b 	bne.w	800d476 <_strtod_l+0x766>
 800d5a0:	e5fe      	b.n	800d1a0 <_strtod_l+0x490>
 800d5a2:	465f      	mov	r7, fp
 800d5a4:	d16e      	bne.n	800d684 <_strtod_l+0x974>
 800d5a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5ac:	b342      	cbz	r2, 800d600 <_strtod_l+0x8f0>
 800d5ae:	4a32      	ldr	r2, [pc, #200]	; (800d678 <_strtod_l+0x968>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d128      	bne.n	800d606 <_strtod_l+0x8f6>
 800d5b4:	9b04      	ldr	r3, [sp, #16]
 800d5b6:	4651      	mov	r1, sl
 800d5b8:	b1eb      	cbz	r3, 800d5f6 <_strtod_l+0x8e6>
 800d5ba:	4b2d      	ldr	r3, [pc, #180]	; (800d670 <_strtod_l+0x960>)
 800d5bc:	403b      	ands	r3, r7
 800d5be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c6:	d819      	bhi.n	800d5fc <_strtod_l+0x8ec>
 800d5c8:	0d1b      	lsrs	r3, r3, #20
 800d5ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d2:	4299      	cmp	r1, r3
 800d5d4:	d117      	bne.n	800d606 <_strtod_l+0x8f6>
 800d5d6:	4b29      	ldr	r3, [pc, #164]	; (800d67c <_strtod_l+0x96c>)
 800d5d8:	429f      	cmp	r7, r3
 800d5da:	d102      	bne.n	800d5e2 <_strtod_l+0x8d2>
 800d5dc:	3101      	adds	r1, #1
 800d5de:	f43f addf 	beq.w	800d1a0 <_strtod_l+0x490>
 800d5e2:	4b23      	ldr	r3, [pc, #140]	; (800d670 <_strtod_l+0x960>)
 800d5e4:	403b      	ands	r3, r7
 800d5e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d5ea:	f04f 0a00 	mov.w	sl, #0
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1a4      	bne.n	800d53e <_strtod_l+0x82e>
 800d5f4:	e5de      	b.n	800d1b4 <_strtod_l+0x4a4>
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	e7ea      	b.n	800d5d2 <_strtod_l+0x8c2>
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	e7e8      	b.n	800d5d2 <_strtod_l+0x8c2>
 800d600:	ea53 030a 	orrs.w	r3, r3, sl
 800d604:	d08c      	beq.n	800d520 <_strtod_l+0x810>
 800d606:	9b08      	ldr	r3, [sp, #32]
 800d608:	b1db      	cbz	r3, 800d642 <_strtod_l+0x932>
 800d60a:	423b      	tst	r3, r7
 800d60c:	d0ef      	beq.n	800d5ee <_strtod_l+0x8de>
 800d60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d610:	9a04      	ldr	r2, [sp, #16]
 800d612:	4650      	mov	r0, sl
 800d614:	4659      	mov	r1, fp
 800d616:	b1c3      	cbz	r3, 800d64a <_strtod_l+0x93a>
 800d618:	f7ff fb5d 	bl	800ccd6 <sulp>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	ec51 0b18 	vmov	r0, r1, d8
 800d624:	f7f2 fe3a 	bl	800029c <__adddf3>
 800d628:	4682      	mov	sl, r0
 800d62a:	468b      	mov	fp, r1
 800d62c:	e7df      	b.n	800d5ee <_strtod_l+0x8de>
 800d62e:	4013      	ands	r3, r2
 800d630:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d634:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d638:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d63c:	f04f 3aff 	mov.w	sl, #4294967295
 800d640:	e7d5      	b.n	800d5ee <_strtod_l+0x8de>
 800d642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d644:	ea13 0f0a 	tst.w	r3, sl
 800d648:	e7e0      	b.n	800d60c <_strtod_l+0x8fc>
 800d64a:	f7ff fb44 	bl	800ccd6 <sulp>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	ec51 0b18 	vmov	r0, r1, d8
 800d656:	f7f2 fe1f 	bl	8000298 <__aeabi_dsub>
 800d65a:	2200      	movs	r2, #0
 800d65c:	2300      	movs	r3, #0
 800d65e:	4682      	mov	sl, r0
 800d660:	468b      	mov	fp, r1
 800d662:	f7f3 fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 800d666:	2800      	cmp	r0, #0
 800d668:	d0c1      	beq.n	800d5ee <_strtod_l+0x8de>
 800d66a:	e611      	b.n	800d290 <_strtod_l+0x580>
 800d66c:	fffffc02 	.word	0xfffffc02
 800d670:	7ff00000 	.word	0x7ff00000
 800d674:	39500000 	.word	0x39500000
 800d678:	000fffff 	.word	0x000fffff
 800d67c:	7fefffff 	.word	0x7fefffff
 800d680:	08010870 	.word	0x08010870
 800d684:	4631      	mov	r1, r6
 800d686:	4628      	mov	r0, r5
 800d688:	f001 f9b8 	bl	800e9fc <__ratio>
 800d68c:	ec59 8b10 	vmov	r8, r9, d0
 800d690:	ee10 0a10 	vmov	r0, s0
 800d694:	2200      	movs	r2, #0
 800d696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d69a:	4649      	mov	r1, r9
 800d69c:	f7f3 fa30 	bl	8000b00 <__aeabi_dcmple>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d07a      	beq.n	800d79a <_strtod_l+0xa8a>
 800d6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d04a      	beq.n	800d740 <_strtod_l+0xa30>
 800d6aa:	4b95      	ldr	r3, [pc, #596]	; (800d900 <_strtod_l+0xbf0>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d900 <_strtod_l+0xbf0>
 800d6b6:	f04f 0800 	mov.w	r8, #0
 800d6ba:	4b92      	ldr	r3, [pc, #584]	; (800d904 <_strtod_l+0xbf4>)
 800d6bc:	403b      	ands	r3, r7
 800d6be:	930d      	str	r3, [sp, #52]	; 0x34
 800d6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6c2:	4b91      	ldr	r3, [pc, #580]	; (800d908 <_strtod_l+0xbf8>)
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	f040 80b0 	bne.w	800d82a <_strtod_l+0xb1a>
 800d6ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d6d2:	ec4b ab10 	vmov	d0, sl, fp
 800d6d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6da:	f001 f8b7 	bl	800e84c <__ulp>
 800d6de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6e2:	ec53 2b10 	vmov	r2, r3, d0
 800d6e6:	f7f2 ff8f 	bl	8000608 <__aeabi_dmul>
 800d6ea:	4652      	mov	r2, sl
 800d6ec:	465b      	mov	r3, fp
 800d6ee:	f7f2 fdd5 	bl	800029c <__adddf3>
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4983      	ldr	r1, [pc, #524]	; (800d904 <_strtod_l+0xbf4>)
 800d6f6:	4a85      	ldr	r2, [pc, #532]	; (800d90c <_strtod_l+0xbfc>)
 800d6f8:	4019      	ands	r1, r3
 800d6fa:	4291      	cmp	r1, r2
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	d960      	bls.n	800d7c2 <_strtod_l+0xab2>
 800d700:	ee18 3a90 	vmov	r3, s17
 800d704:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d708:	4293      	cmp	r3, r2
 800d70a:	d104      	bne.n	800d716 <_strtod_l+0xa06>
 800d70c:	ee18 3a10 	vmov	r3, s16
 800d710:	3301      	adds	r3, #1
 800d712:	f43f ad45 	beq.w	800d1a0 <_strtod_l+0x490>
 800d716:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d918 <_strtod_l+0xc08>
 800d71a:	f04f 3aff 	mov.w	sl, #4294967295
 800d71e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fd61 	bl	800e1e8 <_Bfree>
 800d726:	9905      	ldr	r1, [sp, #20]
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fd5d 	bl	800e1e8 <_Bfree>
 800d72e:	4631      	mov	r1, r6
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fd59 	bl	800e1e8 <_Bfree>
 800d736:	4629      	mov	r1, r5
 800d738:	4620      	mov	r0, r4
 800d73a:	f000 fd55 	bl	800e1e8 <_Bfree>
 800d73e:	e61a      	b.n	800d376 <_strtod_l+0x666>
 800d740:	f1ba 0f00 	cmp.w	sl, #0
 800d744:	d11b      	bne.n	800d77e <_strtod_l+0xa6e>
 800d746:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d74a:	b9f3      	cbnz	r3, 800d78a <_strtod_l+0xa7a>
 800d74c:	4b6c      	ldr	r3, [pc, #432]	; (800d900 <_strtod_l+0xbf0>)
 800d74e:	2200      	movs	r2, #0
 800d750:	4640      	mov	r0, r8
 800d752:	4649      	mov	r1, r9
 800d754:	f7f3 f9ca 	bl	8000aec <__aeabi_dcmplt>
 800d758:	b9d0      	cbnz	r0, 800d790 <_strtod_l+0xa80>
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	4b6c      	ldr	r3, [pc, #432]	; (800d910 <_strtod_l+0xc00>)
 800d760:	2200      	movs	r2, #0
 800d762:	f7f2 ff51 	bl	8000608 <__aeabi_dmul>
 800d766:	4680      	mov	r8, r0
 800d768:	4689      	mov	r9, r1
 800d76a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d76e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d772:	9315      	str	r3, [sp, #84]	; 0x54
 800d774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d778:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d77c:	e79d      	b.n	800d6ba <_strtod_l+0x9aa>
 800d77e:	f1ba 0f01 	cmp.w	sl, #1
 800d782:	d102      	bne.n	800d78a <_strtod_l+0xa7a>
 800d784:	2f00      	cmp	r7, #0
 800d786:	f43f ad83 	beq.w	800d290 <_strtod_l+0x580>
 800d78a:	4b62      	ldr	r3, [pc, #392]	; (800d914 <_strtod_l+0xc04>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	e78e      	b.n	800d6ae <_strtod_l+0x99e>
 800d790:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d910 <_strtod_l+0xc00>
 800d794:	f04f 0800 	mov.w	r8, #0
 800d798:	e7e7      	b.n	800d76a <_strtod_l+0xa5a>
 800d79a:	4b5d      	ldr	r3, [pc, #372]	; (800d910 <_strtod_l+0xc00>)
 800d79c:	4640      	mov	r0, r8
 800d79e:	4649      	mov	r1, r9
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f7f2 ff31 	bl	8000608 <__aeabi_dmul>
 800d7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a8:	4680      	mov	r8, r0
 800d7aa:	4689      	mov	r9, r1
 800d7ac:	b933      	cbnz	r3, 800d7bc <_strtod_l+0xaac>
 800d7ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7b2:	900e      	str	r0, [sp, #56]	; 0x38
 800d7b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d7ba:	e7dd      	b.n	800d778 <_strtod_l+0xa68>
 800d7bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d7c0:	e7f9      	b.n	800d7b6 <_strtod_l+0xaa6>
 800d7c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d7c6:	9b04      	ldr	r3, [sp, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1a8      	bne.n	800d71e <_strtod_l+0xa0e>
 800d7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7d2:	0d1b      	lsrs	r3, r3, #20
 800d7d4:	051b      	lsls	r3, r3, #20
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d1a1      	bne.n	800d71e <_strtod_l+0xa0e>
 800d7da:	4640      	mov	r0, r8
 800d7dc:	4649      	mov	r1, r9
 800d7de:	f7f3 fa4b 	bl	8000c78 <__aeabi_d2lz>
 800d7e2:	f7f2 fee3 	bl	80005ac <__aeabi_l2d>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4640      	mov	r0, r8
 800d7ec:	4649      	mov	r1, r9
 800d7ee:	f7f2 fd53 	bl	8000298 <__aeabi_dsub>
 800d7f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7f8:	ea43 030a 	orr.w	r3, r3, sl
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	4680      	mov	r8, r0
 800d800:	4689      	mov	r9, r1
 800d802:	d055      	beq.n	800d8b0 <_strtod_l+0xba0>
 800d804:	a336      	add	r3, pc, #216	; (adr r3, 800d8e0 <_strtod_l+0xbd0>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f7f3 f96f 	bl	8000aec <__aeabi_dcmplt>
 800d80e:	2800      	cmp	r0, #0
 800d810:	f47f acd0 	bne.w	800d1b4 <_strtod_l+0x4a4>
 800d814:	a334      	add	r3, pc, #208	; (adr r3, 800d8e8 <_strtod_l+0xbd8>)
 800d816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81a:	4640      	mov	r0, r8
 800d81c:	4649      	mov	r1, r9
 800d81e:	f7f3 f983 	bl	8000b28 <__aeabi_dcmpgt>
 800d822:	2800      	cmp	r0, #0
 800d824:	f43f af7b 	beq.w	800d71e <_strtod_l+0xa0e>
 800d828:	e4c4      	b.n	800d1b4 <_strtod_l+0x4a4>
 800d82a:	9b04      	ldr	r3, [sp, #16]
 800d82c:	b333      	cbz	r3, 800d87c <_strtod_l+0xb6c>
 800d82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d830:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d834:	d822      	bhi.n	800d87c <_strtod_l+0xb6c>
 800d836:	a32e      	add	r3, pc, #184	; (adr r3, 800d8f0 <_strtod_l+0xbe0>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	f7f3 f95e 	bl	8000b00 <__aeabi_dcmple>
 800d844:	b1a0      	cbz	r0, 800d870 <_strtod_l+0xb60>
 800d846:	4649      	mov	r1, r9
 800d848:	4640      	mov	r0, r8
 800d84a:	f7f3 f98d 	bl	8000b68 <__aeabi_d2uiz>
 800d84e:	2801      	cmp	r0, #1
 800d850:	bf38      	it	cc
 800d852:	2001      	movcc	r0, #1
 800d854:	f7f2 fe5e 	bl	8000514 <__aeabi_ui2d>
 800d858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d85a:	4680      	mov	r8, r0
 800d85c:	4689      	mov	r9, r1
 800d85e:	bb23      	cbnz	r3, 800d8aa <_strtod_l+0xb9a>
 800d860:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d864:	9010      	str	r0, [sp, #64]	; 0x40
 800d866:	9311      	str	r3, [sp, #68]	; 0x44
 800d868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d86c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d874:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d878:	1a9b      	subs	r3, r3, r2
 800d87a:	9309      	str	r3, [sp, #36]	; 0x24
 800d87c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d880:	eeb0 0a48 	vmov.f32	s0, s16
 800d884:	eef0 0a68 	vmov.f32	s1, s17
 800d888:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d88c:	f000 ffde 	bl	800e84c <__ulp>
 800d890:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d894:	ec53 2b10 	vmov	r2, r3, d0
 800d898:	f7f2 feb6 	bl	8000608 <__aeabi_dmul>
 800d89c:	ec53 2b18 	vmov	r2, r3, d8
 800d8a0:	f7f2 fcfc 	bl	800029c <__adddf3>
 800d8a4:	4682      	mov	sl, r0
 800d8a6:	468b      	mov	fp, r1
 800d8a8:	e78d      	b.n	800d7c6 <_strtod_l+0xab6>
 800d8aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d8ae:	e7db      	b.n	800d868 <_strtod_l+0xb58>
 800d8b0:	a311      	add	r3, pc, #68	; (adr r3, 800d8f8 <_strtod_l+0xbe8>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f7f3 f919 	bl	8000aec <__aeabi_dcmplt>
 800d8ba:	e7b2      	b.n	800d822 <_strtod_l+0xb12>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	f7ff ba6b 	b.w	800cda0 <_strtod_l+0x90>
 800d8ca:	2a65      	cmp	r2, #101	; 0x65
 800d8cc:	f43f ab5f 	beq.w	800cf8e <_strtod_l+0x27e>
 800d8d0:	2a45      	cmp	r2, #69	; 0x45
 800d8d2:	f43f ab5c 	beq.w	800cf8e <_strtod_l+0x27e>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f7ff bb94 	b.w	800d004 <_strtod_l+0x2f4>
 800d8dc:	f3af 8000 	nop.w
 800d8e0:	94a03595 	.word	0x94a03595
 800d8e4:	3fdfffff 	.word	0x3fdfffff
 800d8e8:	35afe535 	.word	0x35afe535
 800d8ec:	3fe00000 	.word	0x3fe00000
 800d8f0:	ffc00000 	.word	0xffc00000
 800d8f4:	41dfffff 	.word	0x41dfffff
 800d8f8:	94a03595 	.word	0x94a03595
 800d8fc:	3fcfffff 	.word	0x3fcfffff
 800d900:	3ff00000 	.word	0x3ff00000
 800d904:	7ff00000 	.word	0x7ff00000
 800d908:	7fe00000 	.word	0x7fe00000
 800d90c:	7c9fffff 	.word	0x7c9fffff
 800d910:	3fe00000 	.word	0x3fe00000
 800d914:	bff00000 	.word	0xbff00000
 800d918:	7fefffff 	.word	0x7fefffff

0800d91c <strtod>:
 800d91c:	460a      	mov	r2, r1
 800d91e:	4601      	mov	r1, r0
 800d920:	4802      	ldr	r0, [pc, #8]	; (800d92c <strtod+0x10>)
 800d922:	4b03      	ldr	r3, [pc, #12]	; (800d930 <strtod+0x14>)
 800d924:	6800      	ldr	r0, [r0, #0]
 800d926:	f7ff b9f3 	b.w	800cd10 <_strtod_l>
 800d92a:	bf00      	nop
 800d92c:	20000084 	.word	0x20000084
 800d930:	200000ec 	.word	0x200000ec

0800d934 <_write_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	; (800d954 <_write_r+0x20>)
 800d938:	4604      	mov	r4, r0
 800d93a:	4608      	mov	r0, r1
 800d93c:	4611      	mov	r1, r2
 800d93e:	2200      	movs	r2, #0
 800d940:	602a      	str	r2, [r5, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	f7f8 f847 	bl	80059d6 <_write>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_write_r+0x1e>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_write_r+0x1e>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	200008e0 	.word	0x200008e0

0800d958 <_close_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	; (800d974 <_close_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f8 f853 	bl	8005a0e <_close>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_close_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_close_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	200008e0 	.word	0x200008e0

0800d978 <__sflags>:
 800d978:	780b      	ldrb	r3, [r1, #0]
 800d97a:	2b72      	cmp	r3, #114	; 0x72
 800d97c:	b530      	push	{r4, r5, lr}
 800d97e:	d022      	beq.n	800d9c6 <__sflags+0x4e>
 800d980:	2b77      	cmp	r3, #119	; 0x77
 800d982:	d024      	beq.n	800d9ce <__sflags+0x56>
 800d984:	2b61      	cmp	r3, #97	; 0x61
 800d986:	d027      	beq.n	800d9d8 <__sflags+0x60>
 800d988:	2316      	movs	r3, #22
 800d98a:	6003      	str	r3, [r0, #0]
 800d98c:	2000      	movs	r0, #0
 800d98e:	bd30      	pop	{r4, r5, pc}
 800d990:	2d62      	cmp	r5, #98	; 0x62
 800d992:	d012      	beq.n	800d9ba <__sflags+0x42>
 800d994:	2d78      	cmp	r5, #120	; 0x78
 800d996:	d013      	beq.n	800d9c0 <__sflags+0x48>
 800d998:	2d2b      	cmp	r5, #43	; 0x2b
 800d99a:	d107      	bne.n	800d9ac <__sflags+0x34>
 800d99c:	f020 001c 	bic.w	r0, r0, #28
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f040 0010 	orr.w	r0, r0, #16
 800d9a8:	f043 0302 	orr.w	r3, r3, #2
 800d9ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d9b0:	2d00      	cmp	r5, #0
 800d9b2:	d1ed      	bne.n	800d990 <__sflags+0x18>
 800d9b4:	4323      	orrs	r3, r4
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	e7e9      	b.n	800d98e <__sflags+0x16>
 800d9ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9be:	e7f5      	b.n	800d9ac <__sflags+0x34>
 800d9c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d9c4:	e7f2      	b.n	800d9ac <__sflags+0x34>
 800d9c6:	2400      	movs	r4, #0
 800d9c8:	4623      	mov	r3, r4
 800d9ca:	2004      	movs	r0, #4
 800d9cc:	e7ee      	b.n	800d9ac <__sflags+0x34>
 800d9ce:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	2008      	movs	r0, #8
 800d9d6:	e7e9      	b.n	800d9ac <__sflags+0x34>
 800d9d8:	f44f 7402 	mov.w	r4, #520	; 0x208
 800d9dc:	2301      	movs	r3, #1
 800d9de:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d9e2:	e7e3      	b.n	800d9ac <__sflags+0x34>

0800d9e4 <_fstat_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d07      	ldr	r5, [pc, #28]	; (800da04 <_fstat_r+0x20>)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f7f8 f818 	bl	8005a26 <_fstat>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	d102      	bne.n	800da00 <_fstat_r+0x1c>
 800d9fa:	682b      	ldr	r3, [r5, #0]
 800d9fc:	b103      	cbz	r3, 800da00 <_fstat_r+0x1c>
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	bd38      	pop	{r3, r4, r5, pc}
 800da02:	bf00      	nop
 800da04:	200008e0 	.word	0x200008e0

0800da08 <rshift>:
 800da08:	6903      	ldr	r3, [r0, #16]
 800da0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da16:	f100 0414 	add.w	r4, r0, #20
 800da1a:	dd45      	ble.n	800daa8 <rshift+0xa0>
 800da1c:	f011 011f 	ands.w	r1, r1, #31
 800da20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da28:	d10c      	bne.n	800da44 <rshift+0x3c>
 800da2a:	f100 0710 	add.w	r7, r0, #16
 800da2e:	4629      	mov	r1, r5
 800da30:	42b1      	cmp	r1, r6
 800da32:	d334      	bcc.n	800da9e <rshift+0x96>
 800da34:	1a9b      	subs	r3, r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	1eea      	subs	r2, r5, #3
 800da3a:	4296      	cmp	r6, r2
 800da3c:	bf38      	it	cc
 800da3e:	2300      	movcc	r3, #0
 800da40:	4423      	add	r3, r4
 800da42:	e015      	b.n	800da70 <rshift+0x68>
 800da44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da48:	f1c1 0820 	rsb	r8, r1, #32
 800da4c:	40cf      	lsrs	r7, r1
 800da4e:	f105 0e04 	add.w	lr, r5, #4
 800da52:	46a1      	mov	r9, r4
 800da54:	4576      	cmp	r6, lr
 800da56:	46f4      	mov	ip, lr
 800da58:	d815      	bhi.n	800da86 <rshift+0x7e>
 800da5a:	1a9a      	subs	r2, r3, r2
 800da5c:	0092      	lsls	r2, r2, #2
 800da5e:	3a04      	subs	r2, #4
 800da60:	3501      	adds	r5, #1
 800da62:	42ae      	cmp	r6, r5
 800da64:	bf38      	it	cc
 800da66:	2200      	movcc	r2, #0
 800da68:	18a3      	adds	r3, r4, r2
 800da6a:	50a7      	str	r7, [r4, r2]
 800da6c:	b107      	cbz	r7, 800da70 <rshift+0x68>
 800da6e:	3304      	adds	r3, #4
 800da70:	1b1a      	subs	r2, r3, r4
 800da72:	42a3      	cmp	r3, r4
 800da74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da78:	bf08      	it	eq
 800da7a:	2300      	moveq	r3, #0
 800da7c:	6102      	str	r2, [r0, #16]
 800da7e:	bf08      	it	eq
 800da80:	6143      	streq	r3, [r0, #20]
 800da82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da86:	f8dc c000 	ldr.w	ip, [ip]
 800da8a:	fa0c fc08 	lsl.w	ip, ip, r8
 800da8e:	ea4c 0707 	orr.w	r7, ip, r7
 800da92:	f849 7b04 	str.w	r7, [r9], #4
 800da96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da9a:	40cf      	lsrs	r7, r1
 800da9c:	e7da      	b.n	800da54 <rshift+0x4c>
 800da9e:	f851 cb04 	ldr.w	ip, [r1], #4
 800daa2:	f847 cf04 	str.w	ip, [r7, #4]!
 800daa6:	e7c3      	b.n	800da30 <rshift+0x28>
 800daa8:	4623      	mov	r3, r4
 800daaa:	e7e1      	b.n	800da70 <rshift+0x68>

0800daac <__hexdig_fun>:
 800daac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dab0:	2b09      	cmp	r3, #9
 800dab2:	d802      	bhi.n	800daba <__hexdig_fun+0xe>
 800dab4:	3820      	subs	r0, #32
 800dab6:	b2c0      	uxtb	r0, r0
 800dab8:	4770      	bx	lr
 800daba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dabe:	2b05      	cmp	r3, #5
 800dac0:	d801      	bhi.n	800dac6 <__hexdig_fun+0x1a>
 800dac2:	3847      	subs	r0, #71	; 0x47
 800dac4:	e7f7      	b.n	800dab6 <__hexdig_fun+0xa>
 800dac6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800daca:	2b05      	cmp	r3, #5
 800dacc:	d801      	bhi.n	800dad2 <__hexdig_fun+0x26>
 800dace:	3827      	subs	r0, #39	; 0x27
 800dad0:	e7f1      	b.n	800dab6 <__hexdig_fun+0xa>
 800dad2:	2000      	movs	r0, #0
 800dad4:	4770      	bx	lr
	...

0800dad8 <__gethex>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	ed2d 8b02 	vpush	{d8}
 800dae0:	b089      	sub	sp, #36	; 0x24
 800dae2:	ee08 0a10 	vmov	s16, r0
 800dae6:	9304      	str	r3, [sp, #16]
 800dae8:	4bb4      	ldr	r3, [pc, #720]	; (800ddbc <__gethex+0x2e4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	4618      	mov	r0, r3
 800daf0:	468b      	mov	fp, r1
 800daf2:	4690      	mov	r8, r2
 800daf4:	f7f2 fbc4 	bl	8000280 <strlen>
 800daf8:	9b01      	ldr	r3, [sp, #4]
 800dafa:	f8db 2000 	ldr.w	r2, [fp]
 800dafe:	4403      	add	r3, r0
 800db00:	4682      	mov	sl, r0
 800db02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db06:	9305      	str	r3, [sp, #20]
 800db08:	1c93      	adds	r3, r2, #2
 800db0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db12:	32fe      	adds	r2, #254	; 0xfe
 800db14:	18d1      	adds	r1, r2, r3
 800db16:	461f      	mov	r7, r3
 800db18:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db1c:	9100      	str	r1, [sp, #0]
 800db1e:	2830      	cmp	r0, #48	; 0x30
 800db20:	d0f8      	beq.n	800db14 <__gethex+0x3c>
 800db22:	f7ff ffc3 	bl	800daac <__hexdig_fun>
 800db26:	4604      	mov	r4, r0
 800db28:	2800      	cmp	r0, #0
 800db2a:	d13a      	bne.n	800dba2 <__gethex+0xca>
 800db2c:	9901      	ldr	r1, [sp, #4]
 800db2e:	4652      	mov	r2, sl
 800db30:	4638      	mov	r0, r7
 800db32:	f001 f80d 	bl	800eb50 <strncmp>
 800db36:	4605      	mov	r5, r0
 800db38:	2800      	cmp	r0, #0
 800db3a:	d168      	bne.n	800dc0e <__gethex+0x136>
 800db3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800db40:	eb07 060a 	add.w	r6, r7, sl
 800db44:	f7ff ffb2 	bl	800daac <__hexdig_fun>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d062      	beq.n	800dc12 <__gethex+0x13a>
 800db4c:	4633      	mov	r3, r6
 800db4e:	7818      	ldrb	r0, [r3, #0]
 800db50:	2830      	cmp	r0, #48	; 0x30
 800db52:	461f      	mov	r7, r3
 800db54:	f103 0301 	add.w	r3, r3, #1
 800db58:	d0f9      	beq.n	800db4e <__gethex+0x76>
 800db5a:	f7ff ffa7 	bl	800daac <__hexdig_fun>
 800db5e:	2301      	movs	r3, #1
 800db60:	fab0 f480 	clz	r4, r0
 800db64:	0964      	lsrs	r4, r4, #5
 800db66:	4635      	mov	r5, r6
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	463a      	mov	r2, r7
 800db6c:	4616      	mov	r6, r2
 800db6e:	3201      	adds	r2, #1
 800db70:	7830      	ldrb	r0, [r6, #0]
 800db72:	f7ff ff9b 	bl	800daac <__hexdig_fun>
 800db76:	2800      	cmp	r0, #0
 800db78:	d1f8      	bne.n	800db6c <__gethex+0x94>
 800db7a:	9901      	ldr	r1, [sp, #4]
 800db7c:	4652      	mov	r2, sl
 800db7e:	4630      	mov	r0, r6
 800db80:	f000 ffe6 	bl	800eb50 <strncmp>
 800db84:	b980      	cbnz	r0, 800dba8 <__gethex+0xd0>
 800db86:	b94d      	cbnz	r5, 800db9c <__gethex+0xc4>
 800db88:	eb06 050a 	add.w	r5, r6, sl
 800db8c:	462a      	mov	r2, r5
 800db8e:	4616      	mov	r6, r2
 800db90:	3201      	adds	r2, #1
 800db92:	7830      	ldrb	r0, [r6, #0]
 800db94:	f7ff ff8a 	bl	800daac <__hexdig_fun>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1f8      	bne.n	800db8e <__gethex+0xb6>
 800db9c:	1bad      	subs	r5, r5, r6
 800db9e:	00ad      	lsls	r5, r5, #2
 800dba0:	e004      	b.n	800dbac <__gethex+0xd4>
 800dba2:	2400      	movs	r4, #0
 800dba4:	4625      	mov	r5, r4
 800dba6:	e7e0      	b.n	800db6a <__gethex+0x92>
 800dba8:	2d00      	cmp	r5, #0
 800dbaa:	d1f7      	bne.n	800db9c <__gethex+0xc4>
 800dbac:	7833      	ldrb	r3, [r6, #0]
 800dbae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dbb2:	2b50      	cmp	r3, #80	; 0x50
 800dbb4:	d13b      	bne.n	800dc2e <__gethex+0x156>
 800dbb6:	7873      	ldrb	r3, [r6, #1]
 800dbb8:	2b2b      	cmp	r3, #43	; 0x2b
 800dbba:	d02c      	beq.n	800dc16 <__gethex+0x13e>
 800dbbc:	2b2d      	cmp	r3, #45	; 0x2d
 800dbbe:	d02e      	beq.n	800dc1e <__gethex+0x146>
 800dbc0:	1c71      	adds	r1, r6, #1
 800dbc2:	f04f 0900 	mov.w	r9, #0
 800dbc6:	7808      	ldrb	r0, [r1, #0]
 800dbc8:	f7ff ff70 	bl	800daac <__hexdig_fun>
 800dbcc:	1e43      	subs	r3, r0, #1
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b18      	cmp	r3, #24
 800dbd2:	d82c      	bhi.n	800dc2e <__gethex+0x156>
 800dbd4:	f1a0 0210 	sub.w	r2, r0, #16
 800dbd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbdc:	f7ff ff66 	bl	800daac <__hexdig_fun>
 800dbe0:	1e43      	subs	r3, r0, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b18      	cmp	r3, #24
 800dbe6:	d91d      	bls.n	800dc24 <__gethex+0x14c>
 800dbe8:	f1b9 0f00 	cmp.w	r9, #0
 800dbec:	d000      	beq.n	800dbf0 <__gethex+0x118>
 800dbee:	4252      	negs	r2, r2
 800dbf0:	4415      	add	r5, r2
 800dbf2:	f8cb 1000 	str.w	r1, [fp]
 800dbf6:	b1e4      	cbz	r4, 800dc32 <__gethex+0x15a>
 800dbf8:	9b00      	ldr	r3, [sp, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	bf14      	ite	ne
 800dbfe:	2700      	movne	r7, #0
 800dc00:	2706      	moveq	r7, #6
 800dc02:	4638      	mov	r0, r7
 800dc04:	b009      	add	sp, #36	; 0x24
 800dc06:	ecbd 8b02 	vpop	{d8}
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	463e      	mov	r6, r7
 800dc10:	4625      	mov	r5, r4
 800dc12:	2401      	movs	r4, #1
 800dc14:	e7ca      	b.n	800dbac <__gethex+0xd4>
 800dc16:	f04f 0900 	mov.w	r9, #0
 800dc1a:	1cb1      	adds	r1, r6, #2
 800dc1c:	e7d3      	b.n	800dbc6 <__gethex+0xee>
 800dc1e:	f04f 0901 	mov.w	r9, #1
 800dc22:	e7fa      	b.n	800dc1a <__gethex+0x142>
 800dc24:	230a      	movs	r3, #10
 800dc26:	fb03 0202 	mla	r2, r3, r2, r0
 800dc2a:	3a10      	subs	r2, #16
 800dc2c:	e7d4      	b.n	800dbd8 <__gethex+0x100>
 800dc2e:	4631      	mov	r1, r6
 800dc30:	e7df      	b.n	800dbf2 <__gethex+0x11a>
 800dc32:	1bf3      	subs	r3, r6, r7
 800dc34:	3b01      	subs	r3, #1
 800dc36:	4621      	mov	r1, r4
 800dc38:	2b07      	cmp	r3, #7
 800dc3a:	dc0b      	bgt.n	800dc54 <__gethex+0x17c>
 800dc3c:	ee18 0a10 	vmov	r0, s16
 800dc40:	f000 fa92 	bl	800e168 <_Balloc>
 800dc44:	4604      	mov	r4, r0
 800dc46:	b940      	cbnz	r0, 800dc5a <__gethex+0x182>
 800dc48:	4b5d      	ldr	r3, [pc, #372]	; (800ddc0 <__gethex+0x2e8>)
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	21de      	movs	r1, #222	; 0xde
 800dc4e:	485d      	ldr	r0, [pc, #372]	; (800ddc4 <__gethex+0x2ec>)
 800dc50:	f000 ffa0 	bl	800eb94 <__assert_func>
 800dc54:	3101      	adds	r1, #1
 800dc56:	105b      	asrs	r3, r3, #1
 800dc58:	e7ee      	b.n	800dc38 <__gethex+0x160>
 800dc5a:	f100 0914 	add.w	r9, r0, #20
 800dc5e:	f04f 0b00 	mov.w	fp, #0
 800dc62:	f1ca 0301 	rsb	r3, sl, #1
 800dc66:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc6a:	f8cd b000 	str.w	fp, [sp]
 800dc6e:	9306      	str	r3, [sp, #24]
 800dc70:	42b7      	cmp	r7, r6
 800dc72:	d340      	bcc.n	800dcf6 <__gethex+0x21e>
 800dc74:	9802      	ldr	r0, [sp, #8]
 800dc76:	9b00      	ldr	r3, [sp, #0]
 800dc78:	f840 3b04 	str.w	r3, [r0], #4
 800dc7c:	eba0 0009 	sub.w	r0, r0, r9
 800dc80:	1080      	asrs	r0, r0, #2
 800dc82:	0146      	lsls	r6, r0, #5
 800dc84:	6120      	str	r0, [r4, #16]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fb60 	bl	800e34c <__hi0bits>
 800dc8c:	1a30      	subs	r0, r6, r0
 800dc8e:	f8d8 6000 	ldr.w	r6, [r8]
 800dc92:	42b0      	cmp	r0, r6
 800dc94:	dd63      	ble.n	800dd5e <__gethex+0x286>
 800dc96:	1b87      	subs	r7, r0, r6
 800dc98:	4639      	mov	r1, r7
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 ff04 	bl	800eaa8 <__any_on>
 800dca0:	4682      	mov	sl, r0
 800dca2:	b1a8      	cbz	r0, 800dcd0 <__gethex+0x1f8>
 800dca4:	1e7b      	subs	r3, r7, #1
 800dca6:	1159      	asrs	r1, r3, #5
 800dca8:	f003 021f 	and.w	r2, r3, #31
 800dcac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dcb0:	f04f 0a01 	mov.w	sl, #1
 800dcb4:	fa0a f202 	lsl.w	r2, sl, r2
 800dcb8:	420a      	tst	r2, r1
 800dcba:	d009      	beq.n	800dcd0 <__gethex+0x1f8>
 800dcbc:	4553      	cmp	r3, sl
 800dcbe:	dd05      	ble.n	800dccc <__gethex+0x1f4>
 800dcc0:	1eb9      	subs	r1, r7, #2
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fef0 	bl	800eaa8 <__any_on>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d145      	bne.n	800dd58 <__gethex+0x280>
 800dccc:	f04f 0a02 	mov.w	sl, #2
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7ff fe98 	bl	800da08 <rshift>
 800dcd8:	443d      	add	r5, r7
 800dcda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcde:	42ab      	cmp	r3, r5
 800dce0:	da4c      	bge.n	800dd7c <__gethex+0x2a4>
 800dce2:	ee18 0a10 	vmov	r0, s16
 800dce6:	4621      	mov	r1, r4
 800dce8:	f000 fa7e 	bl	800e1e8 <_Bfree>
 800dcec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dcee:	2300      	movs	r3, #0
 800dcf0:	6013      	str	r3, [r2, #0]
 800dcf2:	27a3      	movs	r7, #163	; 0xa3
 800dcf4:	e785      	b.n	800dc02 <__gethex+0x12a>
 800dcf6:	1e73      	subs	r3, r6, #1
 800dcf8:	9a05      	ldr	r2, [sp, #20]
 800dcfa:	9303      	str	r3, [sp, #12]
 800dcfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d019      	beq.n	800dd38 <__gethex+0x260>
 800dd04:	f1bb 0f20 	cmp.w	fp, #32
 800dd08:	d107      	bne.n	800dd1a <__gethex+0x242>
 800dd0a:	9b02      	ldr	r3, [sp, #8]
 800dd0c:	9a00      	ldr	r2, [sp, #0]
 800dd0e:	f843 2b04 	str.w	r2, [r3], #4
 800dd12:	9302      	str	r3, [sp, #8]
 800dd14:	2300      	movs	r3, #0
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	469b      	mov	fp, r3
 800dd1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd1e:	f7ff fec5 	bl	800daac <__hexdig_fun>
 800dd22:	9b00      	ldr	r3, [sp, #0]
 800dd24:	f000 000f 	and.w	r0, r0, #15
 800dd28:	fa00 f00b 	lsl.w	r0, r0, fp
 800dd2c:	4303      	orrs	r3, r0
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	f10b 0b04 	add.w	fp, fp, #4
 800dd34:	9b03      	ldr	r3, [sp, #12]
 800dd36:	e00d      	b.n	800dd54 <__gethex+0x27c>
 800dd38:	9b03      	ldr	r3, [sp, #12]
 800dd3a:	9a06      	ldr	r2, [sp, #24]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	42bb      	cmp	r3, r7
 800dd40:	d3e0      	bcc.n	800dd04 <__gethex+0x22c>
 800dd42:	4618      	mov	r0, r3
 800dd44:	9901      	ldr	r1, [sp, #4]
 800dd46:	9307      	str	r3, [sp, #28]
 800dd48:	4652      	mov	r2, sl
 800dd4a:	f000 ff01 	bl	800eb50 <strncmp>
 800dd4e:	9b07      	ldr	r3, [sp, #28]
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d1d7      	bne.n	800dd04 <__gethex+0x22c>
 800dd54:	461e      	mov	r6, r3
 800dd56:	e78b      	b.n	800dc70 <__gethex+0x198>
 800dd58:	f04f 0a03 	mov.w	sl, #3
 800dd5c:	e7b8      	b.n	800dcd0 <__gethex+0x1f8>
 800dd5e:	da0a      	bge.n	800dd76 <__gethex+0x29e>
 800dd60:	1a37      	subs	r7, r6, r0
 800dd62:	4621      	mov	r1, r4
 800dd64:	ee18 0a10 	vmov	r0, s16
 800dd68:	463a      	mov	r2, r7
 800dd6a:	f000 fc59 	bl	800e620 <__lshift>
 800dd6e:	1bed      	subs	r5, r5, r7
 800dd70:	4604      	mov	r4, r0
 800dd72:	f100 0914 	add.w	r9, r0, #20
 800dd76:	f04f 0a00 	mov.w	sl, #0
 800dd7a:	e7ae      	b.n	800dcda <__gethex+0x202>
 800dd7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd80:	42a8      	cmp	r0, r5
 800dd82:	dd72      	ble.n	800de6a <__gethex+0x392>
 800dd84:	1b45      	subs	r5, r0, r5
 800dd86:	42ae      	cmp	r6, r5
 800dd88:	dc36      	bgt.n	800ddf8 <__gethex+0x320>
 800dd8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d02a      	beq.n	800dde8 <__gethex+0x310>
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d02c      	beq.n	800ddf0 <__gethex+0x318>
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d11c      	bne.n	800ddd4 <__gethex+0x2fc>
 800dd9a:	42ae      	cmp	r6, r5
 800dd9c:	d11a      	bne.n	800ddd4 <__gethex+0x2fc>
 800dd9e:	2e01      	cmp	r6, #1
 800dda0:	d112      	bne.n	800ddc8 <__gethex+0x2f0>
 800dda2:	9a04      	ldr	r2, [sp, #16]
 800dda4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dda8:	6013      	str	r3, [r2, #0]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	f8c9 3000 	str.w	r3, [r9]
 800ddb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddb4:	2762      	movs	r7, #98	; 0x62
 800ddb6:	601c      	str	r4, [r3, #0]
 800ddb8:	e723      	b.n	800dc02 <__gethex+0x12a>
 800ddba:	bf00      	nop
 800ddbc:	08010910 	.word	0x08010910
 800ddc0:	08010898 	.word	0x08010898
 800ddc4:	080108a9 	.word	0x080108a9
 800ddc8:	1e71      	subs	r1, r6, #1
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fe6c 	bl	800eaa8 <__any_on>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d1e6      	bne.n	800dda2 <__gethex+0x2ca>
 800ddd4:	ee18 0a10 	vmov	r0, s16
 800ddd8:	4621      	mov	r1, r4
 800ddda:	f000 fa05 	bl	800e1e8 <_Bfree>
 800ddde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dde0:	2300      	movs	r3, #0
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	2750      	movs	r7, #80	; 0x50
 800dde6:	e70c      	b.n	800dc02 <__gethex+0x12a>
 800dde8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d1f2      	bne.n	800ddd4 <__gethex+0x2fc>
 800ddee:	e7d8      	b.n	800dda2 <__gethex+0x2ca>
 800ddf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1d5      	bne.n	800dda2 <__gethex+0x2ca>
 800ddf6:	e7ed      	b.n	800ddd4 <__gethex+0x2fc>
 800ddf8:	1e6f      	subs	r7, r5, #1
 800ddfa:	f1ba 0f00 	cmp.w	sl, #0
 800ddfe:	d131      	bne.n	800de64 <__gethex+0x38c>
 800de00:	b127      	cbz	r7, 800de0c <__gethex+0x334>
 800de02:	4639      	mov	r1, r7
 800de04:	4620      	mov	r0, r4
 800de06:	f000 fe4f 	bl	800eaa8 <__any_on>
 800de0a:	4682      	mov	sl, r0
 800de0c:	117b      	asrs	r3, r7, #5
 800de0e:	2101      	movs	r1, #1
 800de10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de14:	f007 071f 	and.w	r7, r7, #31
 800de18:	fa01 f707 	lsl.w	r7, r1, r7
 800de1c:	421f      	tst	r7, r3
 800de1e:	4629      	mov	r1, r5
 800de20:	4620      	mov	r0, r4
 800de22:	bf18      	it	ne
 800de24:	f04a 0a02 	orrne.w	sl, sl, #2
 800de28:	1b76      	subs	r6, r6, r5
 800de2a:	f7ff fded 	bl	800da08 <rshift>
 800de2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de32:	2702      	movs	r7, #2
 800de34:	f1ba 0f00 	cmp.w	sl, #0
 800de38:	d048      	beq.n	800decc <__gethex+0x3f4>
 800de3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d015      	beq.n	800de6e <__gethex+0x396>
 800de42:	2b03      	cmp	r3, #3
 800de44:	d017      	beq.n	800de76 <__gethex+0x39e>
 800de46:	2b01      	cmp	r3, #1
 800de48:	d109      	bne.n	800de5e <__gethex+0x386>
 800de4a:	f01a 0f02 	tst.w	sl, #2
 800de4e:	d006      	beq.n	800de5e <__gethex+0x386>
 800de50:	f8d9 0000 	ldr.w	r0, [r9]
 800de54:	ea4a 0a00 	orr.w	sl, sl, r0
 800de58:	f01a 0f01 	tst.w	sl, #1
 800de5c:	d10e      	bne.n	800de7c <__gethex+0x3a4>
 800de5e:	f047 0710 	orr.w	r7, r7, #16
 800de62:	e033      	b.n	800decc <__gethex+0x3f4>
 800de64:	f04f 0a01 	mov.w	sl, #1
 800de68:	e7d0      	b.n	800de0c <__gethex+0x334>
 800de6a:	2701      	movs	r7, #1
 800de6c:	e7e2      	b.n	800de34 <__gethex+0x35c>
 800de6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de70:	f1c3 0301 	rsb	r3, r3, #1
 800de74:	9315      	str	r3, [sp, #84]	; 0x54
 800de76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0f0      	beq.n	800de5e <__gethex+0x386>
 800de7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de80:	f104 0314 	add.w	r3, r4, #20
 800de84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de8c:	f04f 0c00 	mov.w	ip, #0
 800de90:	4618      	mov	r0, r3
 800de92:	f853 2b04 	ldr.w	r2, [r3], #4
 800de96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de9a:	d01c      	beq.n	800ded6 <__gethex+0x3fe>
 800de9c:	3201      	adds	r2, #1
 800de9e:	6002      	str	r2, [r0, #0]
 800dea0:	2f02      	cmp	r7, #2
 800dea2:	f104 0314 	add.w	r3, r4, #20
 800dea6:	d13f      	bne.n	800df28 <__gethex+0x450>
 800dea8:	f8d8 2000 	ldr.w	r2, [r8]
 800deac:	3a01      	subs	r2, #1
 800deae:	42b2      	cmp	r2, r6
 800deb0:	d10a      	bne.n	800dec8 <__gethex+0x3f0>
 800deb2:	1171      	asrs	r1, r6, #5
 800deb4:	2201      	movs	r2, #1
 800deb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800deba:	f006 061f 	and.w	r6, r6, #31
 800debe:	fa02 f606 	lsl.w	r6, r2, r6
 800dec2:	421e      	tst	r6, r3
 800dec4:	bf18      	it	ne
 800dec6:	4617      	movne	r7, r2
 800dec8:	f047 0720 	orr.w	r7, r7, #32
 800decc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dece:	601c      	str	r4, [r3, #0]
 800ded0:	9b04      	ldr	r3, [sp, #16]
 800ded2:	601d      	str	r5, [r3, #0]
 800ded4:	e695      	b.n	800dc02 <__gethex+0x12a>
 800ded6:	4299      	cmp	r1, r3
 800ded8:	f843 cc04 	str.w	ip, [r3, #-4]
 800dedc:	d8d8      	bhi.n	800de90 <__gethex+0x3b8>
 800dede:	68a3      	ldr	r3, [r4, #8]
 800dee0:	459b      	cmp	fp, r3
 800dee2:	db19      	blt.n	800df18 <__gethex+0x440>
 800dee4:	6861      	ldr	r1, [r4, #4]
 800dee6:	ee18 0a10 	vmov	r0, s16
 800deea:	3101      	adds	r1, #1
 800deec:	f000 f93c 	bl	800e168 <_Balloc>
 800def0:	4681      	mov	r9, r0
 800def2:	b918      	cbnz	r0, 800defc <__gethex+0x424>
 800def4:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <__gethex+0x488>)
 800def6:	4602      	mov	r2, r0
 800def8:	2184      	movs	r1, #132	; 0x84
 800defa:	e6a8      	b.n	800dc4e <__gethex+0x176>
 800defc:	6922      	ldr	r2, [r4, #16]
 800defe:	3202      	adds	r2, #2
 800df00:	f104 010c 	add.w	r1, r4, #12
 800df04:	0092      	lsls	r2, r2, #2
 800df06:	300c      	adds	r0, #12
 800df08:	f7fe fcf6 	bl	800c8f8 <memcpy>
 800df0c:	4621      	mov	r1, r4
 800df0e:	ee18 0a10 	vmov	r0, s16
 800df12:	f000 f969 	bl	800e1e8 <_Bfree>
 800df16:	464c      	mov	r4, r9
 800df18:	6923      	ldr	r3, [r4, #16]
 800df1a:	1c5a      	adds	r2, r3, #1
 800df1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df20:	6122      	str	r2, [r4, #16]
 800df22:	2201      	movs	r2, #1
 800df24:	615a      	str	r2, [r3, #20]
 800df26:	e7bb      	b.n	800dea0 <__gethex+0x3c8>
 800df28:	6922      	ldr	r2, [r4, #16]
 800df2a:	455a      	cmp	r2, fp
 800df2c:	dd0b      	ble.n	800df46 <__gethex+0x46e>
 800df2e:	2101      	movs	r1, #1
 800df30:	4620      	mov	r0, r4
 800df32:	f7ff fd69 	bl	800da08 <rshift>
 800df36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df3a:	3501      	adds	r5, #1
 800df3c:	42ab      	cmp	r3, r5
 800df3e:	f6ff aed0 	blt.w	800dce2 <__gethex+0x20a>
 800df42:	2701      	movs	r7, #1
 800df44:	e7c0      	b.n	800dec8 <__gethex+0x3f0>
 800df46:	f016 061f 	ands.w	r6, r6, #31
 800df4a:	d0fa      	beq.n	800df42 <__gethex+0x46a>
 800df4c:	4453      	add	r3, sl
 800df4e:	f1c6 0620 	rsb	r6, r6, #32
 800df52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800df56:	f000 f9f9 	bl	800e34c <__hi0bits>
 800df5a:	42b0      	cmp	r0, r6
 800df5c:	dbe7      	blt.n	800df2e <__gethex+0x456>
 800df5e:	e7f0      	b.n	800df42 <__gethex+0x46a>
 800df60:	08010898 	.word	0x08010898

0800df64 <L_shift>:
 800df64:	f1c2 0208 	rsb	r2, r2, #8
 800df68:	0092      	lsls	r2, r2, #2
 800df6a:	b570      	push	{r4, r5, r6, lr}
 800df6c:	f1c2 0620 	rsb	r6, r2, #32
 800df70:	6843      	ldr	r3, [r0, #4]
 800df72:	6804      	ldr	r4, [r0, #0]
 800df74:	fa03 f506 	lsl.w	r5, r3, r6
 800df78:	432c      	orrs	r4, r5
 800df7a:	40d3      	lsrs	r3, r2
 800df7c:	6004      	str	r4, [r0, #0]
 800df7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800df82:	4288      	cmp	r0, r1
 800df84:	d3f4      	bcc.n	800df70 <L_shift+0xc>
 800df86:	bd70      	pop	{r4, r5, r6, pc}

0800df88 <__match>:
 800df88:	b530      	push	{r4, r5, lr}
 800df8a:	6803      	ldr	r3, [r0, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df92:	b914      	cbnz	r4, 800df9a <__match+0x12>
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	2001      	movs	r0, #1
 800df98:	bd30      	pop	{r4, r5, pc}
 800df9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dfa2:	2d19      	cmp	r5, #25
 800dfa4:	bf98      	it	ls
 800dfa6:	3220      	addls	r2, #32
 800dfa8:	42a2      	cmp	r2, r4
 800dfaa:	d0f0      	beq.n	800df8e <__match+0x6>
 800dfac:	2000      	movs	r0, #0
 800dfae:	e7f3      	b.n	800df98 <__match+0x10>

0800dfb0 <__hexnan>:
 800dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb4:	680b      	ldr	r3, [r1, #0]
 800dfb6:	115e      	asrs	r6, r3, #5
 800dfb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dfbc:	f013 031f 	ands.w	r3, r3, #31
 800dfc0:	b087      	sub	sp, #28
 800dfc2:	bf18      	it	ne
 800dfc4:	3604      	addne	r6, #4
 800dfc6:	2500      	movs	r5, #0
 800dfc8:	1f37      	subs	r7, r6, #4
 800dfca:	4690      	mov	r8, r2
 800dfcc:	6802      	ldr	r2, [r0, #0]
 800dfce:	9301      	str	r3, [sp, #4]
 800dfd0:	4682      	mov	sl, r0
 800dfd2:	f846 5c04 	str.w	r5, [r6, #-4]
 800dfd6:	46b9      	mov	r9, r7
 800dfd8:	463c      	mov	r4, r7
 800dfda:	9502      	str	r5, [sp, #8]
 800dfdc:	46ab      	mov	fp, r5
 800dfde:	7851      	ldrb	r1, [r2, #1]
 800dfe0:	1c53      	adds	r3, r2, #1
 800dfe2:	9303      	str	r3, [sp, #12]
 800dfe4:	b341      	cbz	r1, 800e038 <__hexnan+0x88>
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	9205      	str	r2, [sp, #20]
 800dfea:	9104      	str	r1, [sp, #16]
 800dfec:	f7ff fd5e 	bl	800daac <__hexdig_fun>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d14f      	bne.n	800e094 <__hexnan+0xe4>
 800dff4:	9904      	ldr	r1, [sp, #16]
 800dff6:	9a05      	ldr	r2, [sp, #20]
 800dff8:	2920      	cmp	r1, #32
 800dffa:	d818      	bhi.n	800e02e <__hexnan+0x7e>
 800dffc:	9b02      	ldr	r3, [sp, #8]
 800dffe:	459b      	cmp	fp, r3
 800e000:	dd13      	ble.n	800e02a <__hexnan+0x7a>
 800e002:	454c      	cmp	r4, r9
 800e004:	d206      	bcs.n	800e014 <__hexnan+0x64>
 800e006:	2d07      	cmp	r5, #7
 800e008:	dc04      	bgt.n	800e014 <__hexnan+0x64>
 800e00a:	462a      	mov	r2, r5
 800e00c:	4649      	mov	r1, r9
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff ffa8 	bl	800df64 <L_shift>
 800e014:	4544      	cmp	r4, r8
 800e016:	d950      	bls.n	800e0ba <__hexnan+0x10a>
 800e018:	2300      	movs	r3, #0
 800e01a:	f1a4 0904 	sub.w	r9, r4, #4
 800e01e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e022:	f8cd b008 	str.w	fp, [sp, #8]
 800e026:	464c      	mov	r4, r9
 800e028:	461d      	mov	r5, r3
 800e02a:	9a03      	ldr	r2, [sp, #12]
 800e02c:	e7d7      	b.n	800dfde <__hexnan+0x2e>
 800e02e:	2929      	cmp	r1, #41	; 0x29
 800e030:	d156      	bne.n	800e0e0 <__hexnan+0x130>
 800e032:	3202      	adds	r2, #2
 800e034:	f8ca 2000 	str.w	r2, [sl]
 800e038:	f1bb 0f00 	cmp.w	fp, #0
 800e03c:	d050      	beq.n	800e0e0 <__hexnan+0x130>
 800e03e:	454c      	cmp	r4, r9
 800e040:	d206      	bcs.n	800e050 <__hexnan+0xa0>
 800e042:	2d07      	cmp	r5, #7
 800e044:	dc04      	bgt.n	800e050 <__hexnan+0xa0>
 800e046:	462a      	mov	r2, r5
 800e048:	4649      	mov	r1, r9
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7ff ff8a 	bl	800df64 <L_shift>
 800e050:	4544      	cmp	r4, r8
 800e052:	d934      	bls.n	800e0be <__hexnan+0x10e>
 800e054:	f1a8 0204 	sub.w	r2, r8, #4
 800e058:	4623      	mov	r3, r4
 800e05a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e05e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e062:	429f      	cmp	r7, r3
 800e064:	d2f9      	bcs.n	800e05a <__hexnan+0xaa>
 800e066:	1b3b      	subs	r3, r7, r4
 800e068:	f023 0303 	bic.w	r3, r3, #3
 800e06c:	3304      	adds	r3, #4
 800e06e:	3401      	adds	r4, #1
 800e070:	3e03      	subs	r6, #3
 800e072:	42b4      	cmp	r4, r6
 800e074:	bf88      	it	hi
 800e076:	2304      	movhi	r3, #4
 800e078:	4443      	add	r3, r8
 800e07a:	2200      	movs	r2, #0
 800e07c:	f843 2b04 	str.w	r2, [r3], #4
 800e080:	429f      	cmp	r7, r3
 800e082:	d2fb      	bcs.n	800e07c <__hexnan+0xcc>
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	b91b      	cbnz	r3, 800e090 <__hexnan+0xe0>
 800e088:	4547      	cmp	r7, r8
 800e08a:	d127      	bne.n	800e0dc <__hexnan+0x12c>
 800e08c:	2301      	movs	r3, #1
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	2005      	movs	r0, #5
 800e092:	e026      	b.n	800e0e2 <__hexnan+0x132>
 800e094:	3501      	adds	r5, #1
 800e096:	2d08      	cmp	r5, #8
 800e098:	f10b 0b01 	add.w	fp, fp, #1
 800e09c:	dd06      	ble.n	800e0ac <__hexnan+0xfc>
 800e09e:	4544      	cmp	r4, r8
 800e0a0:	d9c3      	bls.n	800e02a <__hexnan+0x7a>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0a8:	2501      	movs	r5, #1
 800e0aa:	3c04      	subs	r4, #4
 800e0ac:	6822      	ldr	r2, [r4, #0]
 800e0ae:	f000 000f 	and.w	r0, r0, #15
 800e0b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	e7b7      	b.n	800e02a <__hexnan+0x7a>
 800e0ba:	2508      	movs	r5, #8
 800e0bc:	e7b5      	b.n	800e02a <__hexnan+0x7a>
 800e0be:	9b01      	ldr	r3, [sp, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d0df      	beq.n	800e084 <__hexnan+0xd4>
 800e0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c8:	f1c3 0320 	rsb	r3, r3, #32
 800e0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e0d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0d4:	401a      	ands	r2, r3
 800e0d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e0da:	e7d3      	b.n	800e084 <__hexnan+0xd4>
 800e0dc:	3f04      	subs	r7, #4
 800e0de:	e7d1      	b.n	800e084 <__hexnan+0xd4>
 800e0e0:	2004      	movs	r0, #4
 800e0e2:	b007      	add	sp, #28
 800e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0e8 <_isatty_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d06      	ldr	r5, [pc, #24]	; (800e104 <_isatty_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	f7f7 fca7 	bl	8005a46 <_isatty>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_isatty_r+0x1a>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_isatty_r+0x1a>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	200008e0 	.word	0x200008e0

0800e108 <_lseek_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	4d07      	ldr	r5, [pc, #28]	; (800e128 <_lseek_r+0x20>)
 800e10c:	4604      	mov	r4, r0
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	2200      	movs	r2, #0
 800e114:	602a      	str	r2, [r5, #0]
 800e116:	461a      	mov	r2, r3
 800e118:	f7f7 fca0 	bl	8005a5c <_lseek>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_lseek_r+0x1e>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_lseek_r+0x1e>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	200008e0 	.word	0x200008e0

0800e12c <__ascii_mbtowc>:
 800e12c:	b082      	sub	sp, #8
 800e12e:	b901      	cbnz	r1, 800e132 <__ascii_mbtowc+0x6>
 800e130:	a901      	add	r1, sp, #4
 800e132:	b142      	cbz	r2, 800e146 <__ascii_mbtowc+0x1a>
 800e134:	b14b      	cbz	r3, 800e14a <__ascii_mbtowc+0x1e>
 800e136:	7813      	ldrb	r3, [r2, #0]
 800e138:	600b      	str	r3, [r1, #0]
 800e13a:	7812      	ldrb	r2, [r2, #0]
 800e13c:	1e10      	subs	r0, r2, #0
 800e13e:	bf18      	it	ne
 800e140:	2001      	movne	r0, #1
 800e142:	b002      	add	sp, #8
 800e144:	4770      	bx	lr
 800e146:	4610      	mov	r0, r2
 800e148:	e7fb      	b.n	800e142 <__ascii_mbtowc+0x16>
 800e14a:	f06f 0001 	mvn.w	r0, #1
 800e14e:	e7f8      	b.n	800e142 <__ascii_mbtowc+0x16>

0800e150 <__malloc_lock>:
 800e150:	4801      	ldr	r0, [pc, #4]	; (800e158 <__malloc_lock+0x8>)
 800e152:	f7fe bb69 	b.w	800c828 <__retarget_lock_acquire_recursive>
 800e156:	bf00      	nop
 800e158:	200008d4 	.word	0x200008d4

0800e15c <__malloc_unlock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	; (800e164 <__malloc_unlock+0x8>)
 800e15e:	f7fe bb64 	b.w	800c82a <__retarget_lock_release_recursive>
 800e162:	bf00      	nop
 800e164:	200008d4 	.word	0x200008d4

0800e168 <_Balloc>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e16c:	4604      	mov	r4, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	b976      	cbnz	r6, 800e190 <_Balloc+0x28>
 800e172:	2010      	movs	r0, #16
 800e174:	f000 fd3e 	bl	800ebf4 <malloc>
 800e178:	4602      	mov	r2, r0
 800e17a:	6260      	str	r0, [r4, #36]	; 0x24
 800e17c:	b920      	cbnz	r0, 800e188 <_Balloc+0x20>
 800e17e:	4b18      	ldr	r3, [pc, #96]	; (800e1e0 <_Balloc+0x78>)
 800e180:	4818      	ldr	r0, [pc, #96]	; (800e1e4 <_Balloc+0x7c>)
 800e182:	2166      	movs	r1, #102	; 0x66
 800e184:	f000 fd06 	bl	800eb94 <__assert_func>
 800e188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e18c:	6006      	str	r6, [r0, #0]
 800e18e:	60c6      	str	r6, [r0, #12]
 800e190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e192:	68f3      	ldr	r3, [r6, #12]
 800e194:	b183      	cbz	r3, 800e1b8 <_Balloc+0x50>
 800e196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e19e:	b9b8      	cbnz	r0, 800e1d0 <_Balloc+0x68>
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	fa01 f605 	lsl.w	r6, r1, r5
 800e1a6:	1d72      	adds	r2, r6, #5
 800e1a8:	0092      	lsls	r2, r2, #2
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fc9d 	bl	800eaea <_calloc_r>
 800e1b0:	b160      	cbz	r0, 800e1cc <_Balloc+0x64>
 800e1b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1b6:	e00e      	b.n	800e1d6 <_Balloc+0x6e>
 800e1b8:	2221      	movs	r2, #33	; 0x21
 800e1ba:	2104      	movs	r1, #4
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 fc94 	bl	800eaea <_calloc_r>
 800e1c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1c4:	60f0      	str	r0, [r6, #12]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e4      	bne.n	800e196 <_Balloc+0x2e>
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	bd70      	pop	{r4, r5, r6, pc}
 800e1d0:	6802      	ldr	r2, [r0, #0]
 800e1d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1dc:	e7f7      	b.n	800e1ce <_Balloc+0x66>
 800e1de:	bf00      	nop
 800e1e0:	08010924 	.word	0x08010924
 800e1e4:	0801093b 	.word	0x0801093b

0800e1e8 <_Bfree>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1ec:	4605      	mov	r5, r0
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	b976      	cbnz	r6, 800e210 <_Bfree+0x28>
 800e1f2:	2010      	movs	r0, #16
 800e1f4:	f000 fcfe 	bl	800ebf4 <malloc>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	6268      	str	r0, [r5, #36]	; 0x24
 800e1fc:	b920      	cbnz	r0, 800e208 <_Bfree+0x20>
 800e1fe:	4b09      	ldr	r3, [pc, #36]	; (800e224 <_Bfree+0x3c>)
 800e200:	4809      	ldr	r0, [pc, #36]	; (800e228 <_Bfree+0x40>)
 800e202:	218a      	movs	r1, #138	; 0x8a
 800e204:	f000 fcc6 	bl	800eb94 <__assert_func>
 800e208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e20c:	6006      	str	r6, [r0, #0]
 800e20e:	60c6      	str	r6, [r0, #12]
 800e210:	b13c      	cbz	r4, 800e222 <_Bfree+0x3a>
 800e212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e214:	6862      	ldr	r2, [r4, #4]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e21c:	6021      	str	r1, [r4, #0]
 800e21e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e222:	bd70      	pop	{r4, r5, r6, pc}
 800e224:	08010924 	.word	0x08010924
 800e228:	0801093b 	.word	0x0801093b

0800e22c <__multadd>:
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	690d      	ldr	r5, [r1, #16]
 800e232:	4607      	mov	r7, r0
 800e234:	460c      	mov	r4, r1
 800e236:	461e      	mov	r6, r3
 800e238:	f101 0c14 	add.w	ip, r1, #20
 800e23c:	2000      	movs	r0, #0
 800e23e:	f8dc 3000 	ldr.w	r3, [ip]
 800e242:	b299      	uxth	r1, r3
 800e244:	fb02 6101 	mla	r1, r2, r1, r6
 800e248:	0c1e      	lsrs	r6, r3, #16
 800e24a:	0c0b      	lsrs	r3, r1, #16
 800e24c:	fb02 3306 	mla	r3, r2, r6, r3
 800e250:	b289      	uxth	r1, r1
 800e252:	3001      	adds	r0, #1
 800e254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e258:	4285      	cmp	r5, r0
 800e25a:	f84c 1b04 	str.w	r1, [ip], #4
 800e25e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e262:	dcec      	bgt.n	800e23e <__multadd+0x12>
 800e264:	b30e      	cbz	r6, 800e2aa <__multadd+0x7e>
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	42ab      	cmp	r3, r5
 800e26a:	dc19      	bgt.n	800e2a0 <__multadd+0x74>
 800e26c:	6861      	ldr	r1, [r4, #4]
 800e26e:	4638      	mov	r0, r7
 800e270:	3101      	adds	r1, #1
 800e272:	f7ff ff79 	bl	800e168 <_Balloc>
 800e276:	4680      	mov	r8, r0
 800e278:	b928      	cbnz	r0, 800e286 <__multadd+0x5a>
 800e27a:	4602      	mov	r2, r0
 800e27c:	4b0c      	ldr	r3, [pc, #48]	; (800e2b0 <__multadd+0x84>)
 800e27e:	480d      	ldr	r0, [pc, #52]	; (800e2b4 <__multadd+0x88>)
 800e280:	21b5      	movs	r1, #181	; 0xb5
 800e282:	f000 fc87 	bl	800eb94 <__assert_func>
 800e286:	6922      	ldr	r2, [r4, #16]
 800e288:	3202      	adds	r2, #2
 800e28a:	f104 010c 	add.w	r1, r4, #12
 800e28e:	0092      	lsls	r2, r2, #2
 800e290:	300c      	adds	r0, #12
 800e292:	f7fe fb31 	bl	800c8f8 <memcpy>
 800e296:	4621      	mov	r1, r4
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff ffa5 	bl	800e1e8 <_Bfree>
 800e29e:	4644      	mov	r4, r8
 800e2a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2a4:	3501      	adds	r5, #1
 800e2a6:	615e      	str	r6, [r3, #20]
 800e2a8:	6125      	str	r5, [r4, #16]
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b0:	08010898 	.word	0x08010898
 800e2b4:	0801093b 	.word	0x0801093b

0800e2b8 <__s2b>:
 800e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2bc:	460c      	mov	r4, r1
 800e2be:	4615      	mov	r5, r2
 800e2c0:	461f      	mov	r7, r3
 800e2c2:	2209      	movs	r2, #9
 800e2c4:	3308      	adds	r3, #8
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	db09      	blt.n	800e2e8 <__s2b+0x30>
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7ff ff47 	bl	800e168 <_Balloc>
 800e2da:	b940      	cbnz	r0, 800e2ee <__s2b+0x36>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	4b19      	ldr	r3, [pc, #100]	; (800e344 <__s2b+0x8c>)
 800e2e0:	4819      	ldr	r0, [pc, #100]	; (800e348 <__s2b+0x90>)
 800e2e2:	21ce      	movs	r1, #206	; 0xce
 800e2e4:	f000 fc56 	bl	800eb94 <__assert_func>
 800e2e8:	0052      	lsls	r2, r2, #1
 800e2ea:	3101      	adds	r1, #1
 800e2ec:	e7f0      	b.n	800e2d0 <__s2b+0x18>
 800e2ee:	9b08      	ldr	r3, [sp, #32]
 800e2f0:	6143      	str	r3, [r0, #20]
 800e2f2:	2d09      	cmp	r5, #9
 800e2f4:	f04f 0301 	mov.w	r3, #1
 800e2f8:	6103      	str	r3, [r0, #16]
 800e2fa:	dd16      	ble.n	800e32a <__s2b+0x72>
 800e2fc:	f104 0909 	add.w	r9, r4, #9
 800e300:	46c8      	mov	r8, r9
 800e302:	442c      	add	r4, r5
 800e304:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e308:	4601      	mov	r1, r0
 800e30a:	3b30      	subs	r3, #48	; 0x30
 800e30c:	220a      	movs	r2, #10
 800e30e:	4630      	mov	r0, r6
 800e310:	f7ff ff8c 	bl	800e22c <__multadd>
 800e314:	45a0      	cmp	r8, r4
 800e316:	d1f5      	bne.n	800e304 <__s2b+0x4c>
 800e318:	f1a5 0408 	sub.w	r4, r5, #8
 800e31c:	444c      	add	r4, r9
 800e31e:	1b2d      	subs	r5, r5, r4
 800e320:	1963      	adds	r3, r4, r5
 800e322:	42bb      	cmp	r3, r7
 800e324:	db04      	blt.n	800e330 <__s2b+0x78>
 800e326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e32a:	340a      	adds	r4, #10
 800e32c:	2509      	movs	r5, #9
 800e32e:	e7f6      	b.n	800e31e <__s2b+0x66>
 800e330:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e334:	4601      	mov	r1, r0
 800e336:	3b30      	subs	r3, #48	; 0x30
 800e338:	220a      	movs	r2, #10
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7ff ff76 	bl	800e22c <__multadd>
 800e340:	e7ee      	b.n	800e320 <__s2b+0x68>
 800e342:	bf00      	nop
 800e344:	08010898 	.word	0x08010898
 800e348:	0801093b 	.word	0x0801093b

0800e34c <__hi0bits>:
 800e34c:	0c03      	lsrs	r3, r0, #16
 800e34e:	041b      	lsls	r3, r3, #16
 800e350:	b9d3      	cbnz	r3, 800e388 <__hi0bits+0x3c>
 800e352:	0400      	lsls	r0, r0, #16
 800e354:	2310      	movs	r3, #16
 800e356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e35a:	bf04      	itt	eq
 800e35c:	0200      	lsleq	r0, r0, #8
 800e35e:	3308      	addeq	r3, #8
 800e360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e364:	bf04      	itt	eq
 800e366:	0100      	lsleq	r0, r0, #4
 800e368:	3304      	addeq	r3, #4
 800e36a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e36e:	bf04      	itt	eq
 800e370:	0080      	lsleq	r0, r0, #2
 800e372:	3302      	addeq	r3, #2
 800e374:	2800      	cmp	r0, #0
 800e376:	db05      	blt.n	800e384 <__hi0bits+0x38>
 800e378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e37c:	f103 0301 	add.w	r3, r3, #1
 800e380:	bf08      	it	eq
 800e382:	2320      	moveq	r3, #32
 800e384:	4618      	mov	r0, r3
 800e386:	4770      	bx	lr
 800e388:	2300      	movs	r3, #0
 800e38a:	e7e4      	b.n	800e356 <__hi0bits+0xa>

0800e38c <__lo0bits>:
 800e38c:	6803      	ldr	r3, [r0, #0]
 800e38e:	f013 0207 	ands.w	r2, r3, #7
 800e392:	4601      	mov	r1, r0
 800e394:	d00b      	beq.n	800e3ae <__lo0bits+0x22>
 800e396:	07da      	lsls	r2, r3, #31
 800e398:	d423      	bmi.n	800e3e2 <__lo0bits+0x56>
 800e39a:	0798      	lsls	r0, r3, #30
 800e39c:	bf49      	itett	mi
 800e39e:	085b      	lsrmi	r3, r3, #1
 800e3a0:	089b      	lsrpl	r3, r3, #2
 800e3a2:	2001      	movmi	r0, #1
 800e3a4:	600b      	strmi	r3, [r1, #0]
 800e3a6:	bf5c      	itt	pl
 800e3a8:	600b      	strpl	r3, [r1, #0]
 800e3aa:	2002      	movpl	r0, #2
 800e3ac:	4770      	bx	lr
 800e3ae:	b298      	uxth	r0, r3
 800e3b0:	b9a8      	cbnz	r0, 800e3de <__lo0bits+0x52>
 800e3b2:	0c1b      	lsrs	r3, r3, #16
 800e3b4:	2010      	movs	r0, #16
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	b90a      	cbnz	r2, 800e3be <__lo0bits+0x32>
 800e3ba:	3008      	adds	r0, #8
 800e3bc:	0a1b      	lsrs	r3, r3, #8
 800e3be:	071a      	lsls	r2, r3, #28
 800e3c0:	bf04      	itt	eq
 800e3c2:	091b      	lsreq	r3, r3, #4
 800e3c4:	3004      	addeq	r0, #4
 800e3c6:	079a      	lsls	r2, r3, #30
 800e3c8:	bf04      	itt	eq
 800e3ca:	089b      	lsreq	r3, r3, #2
 800e3cc:	3002      	addeq	r0, #2
 800e3ce:	07da      	lsls	r2, r3, #31
 800e3d0:	d403      	bmi.n	800e3da <__lo0bits+0x4e>
 800e3d2:	085b      	lsrs	r3, r3, #1
 800e3d4:	f100 0001 	add.w	r0, r0, #1
 800e3d8:	d005      	beq.n	800e3e6 <__lo0bits+0x5a>
 800e3da:	600b      	str	r3, [r1, #0]
 800e3dc:	4770      	bx	lr
 800e3de:	4610      	mov	r0, r2
 800e3e0:	e7e9      	b.n	800e3b6 <__lo0bits+0x2a>
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	4770      	bx	lr
 800e3e6:	2020      	movs	r0, #32
 800e3e8:	4770      	bx	lr
	...

0800e3ec <__i2b>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	f7ff feb9 	bl	800e168 <_Balloc>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	b928      	cbnz	r0, 800e406 <__i2b+0x1a>
 800e3fa:	4b05      	ldr	r3, [pc, #20]	; (800e410 <__i2b+0x24>)
 800e3fc:	4805      	ldr	r0, [pc, #20]	; (800e414 <__i2b+0x28>)
 800e3fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e402:	f000 fbc7 	bl	800eb94 <__assert_func>
 800e406:	2301      	movs	r3, #1
 800e408:	6144      	str	r4, [r0, #20]
 800e40a:	6103      	str	r3, [r0, #16]
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	bf00      	nop
 800e410:	08010898 	.word	0x08010898
 800e414:	0801093b 	.word	0x0801093b

0800e418 <__multiply>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	4691      	mov	r9, r2
 800e41e:	690a      	ldr	r2, [r1, #16]
 800e420:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e424:	429a      	cmp	r2, r3
 800e426:	bfb8      	it	lt
 800e428:	460b      	movlt	r3, r1
 800e42a:	460c      	mov	r4, r1
 800e42c:	bfbc      	itt	lt
 800e42e:	464c      	movlt	r4, r9
 800e430:	4699      	movlt	r9, r3
 800e432:	6927      	ldr	r7, [r4, #16]
 800e434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e438:	68a3      	ldr	r3, [r4, #8]
 800e43a:	6861      	ldr	r1, [r4, #4]
 800e43c:	eb07 060a 	add.w	r6, r7, sl
 800e440:	42b3      	cmp	r3, r6
 800e442:	b085      	sub	sp, #20
 800e444:	bfb8      	it	lt
 800e446:	3101      	addlt	r1, #1
 800e448:	f7ff fe8e 	bl	800e168 <_Balloc>
 800e44c:	b930      	cbnz	r0, 800e45c <__multiply+0x44>
 800e44e:	4602      	mov	r2, r0
 800e450:	4b44      	ldr	r3, [pc, #272]	; (800e564 <__multiply+0x14c>)
 800e452:	4845      	ldr	r0, [pc, #276]	; (800e568 <__multiply+0x150>)
 800e454:	f240 115d 	movw	r1, #349	; 0x15d
 800e458:	f000 fb9c 	bl	800eb94 <__assert_func>
 800e45c:	f100 0514 	add.w	r5, r0, #20
 800e460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e464:	462b      	mov	r3, r5
 800e466:	2200      	movs	r2, #0
 800e468:	4543      	cmp	r3, r8
 800e46a:	d321      	bcc.n	800e4b0 <__multiply+0x98>
 800e46c:	f104 0314 	add.w	r3, r4, #20
 800e470:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e474:	f109 0314 	add.w	r3, r9, #20
 800e478:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e47c:	9202      	str	r2, [sp, #8]
 800e47e:	1b3a      	subs	r2, r7, r4
 800e480:	3a15      	subs	r2, #21
 800e482:	f022 0203 	bic.w	r2, r2, #3
 800e486:	3204      	adds	r2, #4
 800e488:	f104 0115 	add.w	r1, r4, #21
 800e48c:	428f      	cmp	r7, r1
 800e48e:	bf38      	it	cc
 800e490:	2204      	movcc	r2, #4
 800e492:	9201      	str	r2, [sp, #4]
 800e494:	9a02      	ldr	r2, [sp, #8]
 800e496:	9303      	str	r3, [sp, #12]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d80c      	bhi.n	800e4b6 <__multiply+0x9e>
 800e49c:	2e00      	cmp	r6, #0
 800e49e:	dd03      	ble.n	800e4a8 <__multiply+0x90>
 800e4a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d05a      	beq.n	800e55e <__multiply+0x146>
 800e4a8:	6106      	str	r6, [r0, #16]
 800e4aa:	b005      	add	sp, #20
 800e4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b0:	f843 2b04 	str.w	r2, [r3], #4
 800e4b4:	e7d8      	b.n	800e468 <__multiply+0x50>
 800e4b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4ba:	f1ba 0f00 	cmp.w	sl, #0
 800e4be:	d024      	beq.n	800e50a <__multiply+0xf2>
 800e4c0:	f104 0e14 	add.w	lr, r4, #20
 800e4c4:	46a9      	mov	r9, r5
 800e4c6:	f04f 0c00 	mov.w	ip, #0
 800e4ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4ce:	f8d9 1000 	ldr.w	r1, [r9]
 800e4d2:	fa1f fb82 	uxth.w	fp, r2
 800e4d6:	b289      	uxth	r1, r1
 800e4d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e4e0:	f8d9 2000 	ldr.w	r2, [r9]
 800e4e4:	4461      	add	r1, ip
 800e4e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800e4ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4f2:	b289      	uxth	r1, r1
 800e4f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4f8:	4577      	cmp	r7, lr
 800e4fa:	f849 1b04 	str.w	r1, [r9], #4
 800e4fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e502:	d8e2      	bhi.n	800e4ca <__multiply+0xb2>
 800e504:	9a01      	ldr	r2, [sp, #4]
 800e506:	f845 c002 	str.w	ip, [r5, r2]
 800e50a:	9a03      	ldr	r2, [sp, #12]
 800e50c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e510:	3304      	adds	r3, #4
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	d020      	beq.n	800e55a <__multiply+0x142>
 800e518:	6829      	ldr	r1, [r5, #0]
 800e51a:	f104 0c14 	add.w	ip, r4, #20
 800e51e:	46ae      	mov	lr, r5
 800e520:	f04f 0a00 	mov.w	sl, #0
 800e524:	f8bc b000 	ldrh.w	fp, [ip]
 800e528:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e52c:	fb09 220b 	mla	r2, r9, fp, r2
 800e530:	4492      	add	sl, r2
 800e532:	b289      	uxth	r1, r1
 800e534:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e538:	f84e 1b04 	str.w	r1, [lr], #4
 800e53c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e540:	f8be 1000 	ldrh.w	r1, [lr]
 800e544:	0c12      	lsrs	r2, r2, #16
 800e546:	fb09 1102 	mla	r1, r9, r2, r1
 800e54a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e54e:	4567      	cmp	r7, ip
 800e550:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e554:	d8e6      	bhi.n	800e524 <__multiply+0x10c>
 800e556:	9a01      	ldr	r2, [sp, #4]
 800e558:	50a9      	str	r1, [r5, r2]
 800e55a:	3504      	adds	r5, #4
 800e55c:	e79a      	b.n	800e494 <__multiply+0x7c>
 800e55e:	3e01      	subs	r6, #1
 800e560:	e79c      	b.n	800e49c <__multiply+0x84>
 800e562:	bf00      	nop
 800e564:	08010898 	.word	0x08010898
 800e568:	0801093b 	.word	0x0801093b

0800e56c <__pow5mult>:
 800e56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e570:	4615      	mov	r5, r2
 800e572:	f012 0203 	ands.w	r2, r2, #3
 800e576:	4606      	mov	r6, r0
 800e578:	460f      	mov	r7, r1
 800e57a:	d007      	beq.n	800e58c <__pow5mult+0x20>
 800e57c:	4c25      	ldr	r4, [pc, #148]	; (800e614 <__pow5mult+0xa8>)
 800e57e:	3a01      	subs	r2, #1
 800e580:	2300      	movs	r3, #0
 800e582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e586:	f7ff fe51 	bl	800e22c <__multadd>
 800e58a:	4607      	mov	r7, r0
 800e58c:	10ad      	asrs	r5, r5, #2
 800e58e:	d03d      	beq.n	800e60c <__pow5mult+0xa0>
 800e590:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e592:	b97c      	cbnz	r4, 800e5b4 <__pow5mult+0x48>
 800e594:	2010      	movs	r0, #16
 800e596:	f000 fb2d 	bl	800ebf4 <malloc>
 800e59a:	4602      	mov	r2, r0
 800e59c:	6270      	str	r0, [r6, #36]	; 0x24
 800e59e:	b928      	cbnz	r0, 800e5ac <__pow5mult+0x40>
 800e5a0:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <__pow5mult+0xac>)
 800e5a2:	481e      	ldr	r0, [pc, #120]	; (800e61c <__pow5mult+0xb0>)
 800e5a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e5a8:	f000 faf4 	bl	800eb94 <__assert_func>
 800e5ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5b0:	6004      	str	r4, [r0, #0]
 800e5b2:	60c4      	str	r4, [r0, #12]
 800e5b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5bc:	b94c      	cbnz	r4, 800e5d2 <__pow5mult+0x66>
 800e5be:	f240 2171 	movw	r1, #625	; 0x271
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7ff ff12 	bl	800e3ec <__i2b>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	6003      	str	r3, [r0, #0]
 800e5d2:	f04f 0900 	mov.w	r9, #0
 800e5d6:	07eb      	lsls	r3, r5, #31
 800e5d8:	d50a      	bpl.n	800e5f0 <__pow5mult+0x84>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	4622      	mov	r2, r4
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7ff ff1a 	bl	800e418 <__multiply>
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7ff fdfd 	bl	800e1e8 <_Bfree>
 800e5ee:	4647      	mov	r7, r8
 800e5f0:	106d      	asrs	r5, r5, #1
 800e5f2:	d00b      	beq.n	800e60c <__pow5mult+0xa0>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	b938      	cbnz	r0, 800e608 <__pow5mult+0x9c>
 800e5f8:	4622      	mov	r2, r4
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff ff0b 	bl	800e418 <__multiply>
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	f8c0 9000 	str.w	r9, [r0]
 800e608:	4604      	mov	r4, r0
 800e60a:	e7e4      	b.n	800e5d6 <__pow5mult+0x6a>
 800e60c:	4638      	mov	r0, r7
 800e60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e612:	bf00      	nop
 800e614:	08010a88 	.word	0x08010a88
 800e618:	08010924 	.word	0x08010924
 800e61c:	0801093b 	.word	0x0801093b

0800e620 <__lshift>:
 800e620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e624:	460c      	mov	r4, r1
 800e626:	6849      	ldr	r1, [r1, #4]
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e62e:	68a3      	ldr	r3, [r4, #8]
 800e630:	4607      	mov	r7, r0
 800e632:	4691      	mov	r9, r2
 800e634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e638:	f108 0601 	add.w	r6, r8, #1
 800e63c:	42b3      	cmp	r3, r6
 800e63e:	db0b      	blt.n	800e658 <__lshift+0x38>
 800e640:	4638      	mov	r0, r7
 800e642:	f7ff fd91 	bl	800e168 <_Balloc>
 800e646:	4605      	mov	r5, r0
 800e648:	b948      	cbnz	r0, 800e65e <__lshift+0x3e>
 800e64a:	4602      	mov	r2, r0
 800e64c:	4b2a      	ldr	r3, [pc, #168]	; (800e6f8 <__lshift+0xd8>)
 800e64e:	482b      	ldr	r0, [pc, #172]	; (800e6fc <__lshift+0xdc>)
 800e650:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e654:	f000 fa9e 	bl	800eb94 <__assert_func>
 800e658:	3101      	adds	r1, #1
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	e7ee      	b.n	800e63c <__lshift+0x1c>
 800e65e:	2300      	movs	r3, #0
 800e660:	f100 0114 	add.w	r1, r0, #20
 800e664:	f100 0210 	add.w	r2, r0, #16
 800e668:	4618      	mov	r0, r3
 800e66a:	4553      	cmp	r3, sl
 800e66c:	db37      	blt.n	800e6de <__lshift+0xbe>
 800e66e:	6920      	ldr	r0, [r4, #16]
 800e670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e674:	f104 0314 	add.w	r3, r4, #20
 800e678:	f019 091f 	ands.w	r9, r9, #31
 800e67c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e680:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e684:	d02f      	beq.n	800e6e6 <__lshift+0xc6>
 800e686:	f1c9 0e20 	rsb	lr, r9, #32
 800e68a:	468a      	mov	sl, r1
 800e68c:	f04f 0c00 	mov.w	ip, #0
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	fa02 f209 	lsl.w	r2, r2, r9
 800e696:	ea42 020c 	orr.w	r2, r2, ip
 800e69a:	f84a 2b04 	str.w	r2, [sl], #4
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	4298      	cmp	r0, r3
 800e6a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e6a8:	d8f2      	bhi.n	800e690 <__lshift+0x70>
 800e6aa:	1b03      	subs	r3, r0, r4
 800e6ac:	3b15      	subs	r3, #21
 800e6ae:	f023 0303 	bic.w	r3, r3, #3
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	f104 0215 	add.w	r2, r4, #21
 800e6b8:	4290      	cmp	r0, r2
 800e6ba:	bf38      	it	cc
 800e6bc:	2304      	movcc	r3, #4
 800e6be:	f841 c003 	str.w	ip, [r1, r3]
 800e6c2:	f1bc 0f00 	cmp.w	ip, #0
 800e6c6:	d001      	beq.n	800e6cc <__lshift+0xac>
 800e6c8:	f108 0602 	add.w	r6, r8, #2
 800e6cc:	3e01      	subs	r6, #1
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	612e      	str	r6, [r5, #16]
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	f7ff fd88 	bl	800e1e8 <_Bfree>
 800e6d8:	4628      	mov	r0, r5
 800e6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	e7c1      	b.n	800e66a <__lshift+0x4a>
 800e6e6:	3904      	subs	r1, #4
 800e6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6f0:	4298      	cmp	r0, r3
 800e6f2:	d8f9      	bhi.n	800e6e8 <__lshift+0xc8>
 800e6f4:	e7ea      	b.n	800e6cc <__lshift+0xac>
 800e6f6:	bf00      	nop
 800e6f8:	08010898 	.word	0x08010898
 800e6fc:	0801093b 	.word	0x0801093b

0800e700 <__mcmp>:
 800e700:	b530      	push	{r4, r5, lr}
 800e702:	6902      	ldr	r2, [r0, #16]
 800e704:	690c      	ldr	r4, [r1, #16]
 800e706:	1b12      	subs	r2, r2, r4
 800e708:	d10e      	bne.n	800e728 <__mcmp+0x28>
 800e70a:	f100 0314 	add.w	r3, r0, #20
 800e70e:	3114      	adds	r1, #20
 800e710:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e714:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e718:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e71c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e720:	42a5      	cmp	r5, r4
 800e722:	d003      	beq.n	800e72c <__mcmp+0x2c>
 800e724:	d305      	bcc.n	800e732 <__mcmp+0x32>
 800e726:	2201      	movs	r2, #1
 800e728:	4610      	mov	r0, r2
 800e72a:	bd30      	pop	{r4, r5, pc}
 800e72c:	4283      	cmp	r3, r0
 800e72e:	d3f3      	bcc.n	800e718 <__mcmp+0x18>
 800e730:	e7fa      	b.n	800e728 <__mcmp+0x28>
 800e732:	f04f 32ff 	mov.w	r2, #4294967295
 800e736:	e7f7      	b.n	800e728 <__mcmp+0x28>

0800e738 <__mdiff>:
 800e738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	460c      	mov	r4, r1
 800e73e:	4606      	mov	r6, r0
 800e740:	4611      	mov	r1, r2
 800e742:	4620      	mov	r0, r4
 800e744:	4690      	mov	r8, r2
 800e746:	f7ff ffdb 	bl	800e700 <__mcmp>
 800e74a:	1e05      	subs	r5, r0, #0
 800e74c:	d110      	bne.n	800e770 <__mdiff+0x38>
 800e74e:	4629      	mov	r1, r5
 800e750:	4630      	mov	r0, r6
 800e752:	f7ff fd09 	bl	800e168 <_Balloc>
 800e756:	b930      	cbnz	r0, 800e766 <__mdiff+0x2e>
 800e758:	4b3a      	ldr	r3, [pc, #232]	; (800e844 <__mdiff+0x10c>)
 800e75a:	4602      	mov	r2, r0
 800e75c:	f240 2132 	movw	r1, #562	; 0x232
 800e760:	4839      	ldr	r0, [pc, #228]	; (800e848 <__mdiff+0x110>)
 800e762:	f000 fa17 	bl	800eb94 <__assert_func>
 800e766:	2301      	movs	r3, #1
 800e768:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e76c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	bfa4      	itt	ge
 800e772:	4643      	movge	r3, r8
 800e774:	46a0      	movge	r8, r4
 800e776:	4630      	mov	r0, r6
 800e778:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e77c:	bfa6      	itte	ge
 800e77e:	461c      	movge	r4, r3
 800e780:	2500      	movge	r5, #0
 800e782:	2501      	movlt	r5, #1
 800e784:	f7ff fcf0 	bl	800e168 <_Balloc>
 800e788:	b920      	cbnz	r0, 800e794 <__mdiff+0x5c>
 800e78a:	4b2e      	ldr	r3, [pc, #184]	; (800e844 <__mdiff+0x10c>)
 800e78c:	4602      	mov	r2, r0
 800e78e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e792:	e7e5      	b.n	800e760 <__mdiff+0x28>
 800e794:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e798:	6926      	ldr	r6, [r4, #16]
 800e79a:	60c5      	str	r5, [r0, #12]
 800e79c:	f104 0914 	add.w	r9, r4, #20
 800e7a0:	f108 0514 	add.w	r5, r8, #20
 800e7a4:	f100 0e14 	add.w	lr, r0, #20
 800e7a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e7ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e7b0:	f108 0210 	add.w	r2, r8, #16
 800e7b4:	46f2      	mov	sl, lr
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e7c0:	fa1f f883 	uxth.w	r8, r3
 800e7c4:	fa11 f18b 	uxtah	r1, r1, fp
 800e7c8:	0c1b      	lsrs	r3, r3, #16
 800e7ca:	eba1 0808 	sub.w	r8, r1, r8
 800e7ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7d6:	fa1f f888 	uxth.w	r8, r8
 800e7da:	1419      	asrs	r1, r3, #16
 800e7dc:	454e      	cmp	r6, r9
 800e7de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7e2:	f84a 3b04 	str.w	r3, [sl], #4
 800e7e6:	d8e7      	bhi.n	800e7b8 <__mdiff+0x80>
 800e7e8:	1b33      	subs	r3, r6, r4
 800e7ea:	3b15      	subs	r3, #21
 800e7ec:	f023 0303 	bic.w	r3, r3, #3
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	3415      	adds	r4, #21
 800e7f4:	42a6      	cmp	r6, r4
 800e7f6:	bf38      	it	cc
 800e7f8:	2304      	movcc	r3, #4
 800e7fa:	441d      	add	r5, r3
 800e7fc:	4473      	add	r3, lr
 800e7fe:	469e      	mov	lr, r3
 800e800:	462e      	mov	r6, r5
 800e802:	4566      	cmp	r6, ip
 800e804:	d30e      	bcc.n	800e824 <__mdiff+0xec>
 800e806:	f10c 0203 	add.w	r2, ip, #3
 800e80a:	1b52      	subs	r2, r2, r5
 800e80c:	f022 0203 	bic.w	r2, r2, #3
 800e810:	3d03      	subs	r5, #3
 800e812:	45ac      	cmp	ip, r5
 800e814:	bf38      	it	cc
 800e816:	2200      	movcc	r2, #0
 800e818:	441a      	add	r2, r3
 800e81a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e81e:	b17b      	cbz	r3, 800e840 <__mdiff+0x108>
 800e820:	6107      	str	r7, [r0, #16]
 800e822:	e7a3      	b.n	800e76c <__mdiff+0x34>
 800e824:	f856 8b04 	ldr.w	r8, [r6], #4
 800e828:	fa11 f288 	uxtah	r2, r1, r8
 800e82c:	1414      	asrs	r4, r2, #16
 800e82e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e832:	b292      	uxth	r2, r2
 800e834:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e838:	f84e 2b04 	str.w	r2, [lr], #4
 800e83c:	1421      	asrs	r1, r4, #16
 800e83e:	e7e0      	b.n	800e802 <__mdiff+0xca>
 800e840:	3f01      	subs	r7, #1
 800e842:	e7ea      	b.n	800e81a <__mdiff+0xe2>
 800e844:	08010898 	.word	0x08010898
 800e848:	0801093b 	.word	0x0801093b

0800e84c <__ulp>:
 800e84c:	b082      	sub	sp, #8
 800e84e:	ed8d 0b00 	vstr	d0, [sp]
 800e852:	9b01      	ldr	r3, [sp, #4]
 800e854:	4912      	ldr	r1, [pc, #72]	; (800e8a0 <__ulp+0x54>)
 800e856:	4019      	ands	r1, r3
 800e858:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e85c:	2900      	cmp	r1, #0
 800e85e:	dd05      	ble.n	800e86c <__ulp+0x20>
 800e860:	2200      	movs	r2, #0
 800e862:	460b      	mov	r3, r1
 800e864:	ec43 2b10 	vmov	d0, r2, r3
 800e868:	b002      	add	sp, #8
 800e86a:	4770      	bx	lr
 800e86c:	4249      	negs	r1, r1
 800e86e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e872:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e876:	f04f 0200 	mov.w	r2, #0
 800e87a:	f04f 0300 	mov.w	r3, #0
 800e87e:	da04      	bge.n	800e88a <__ulp+0x3e>
 800e880:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e884:	fa41 f300 	asr.w	r3, r1, r0
 800e888:	e7ec      	b.n	800e864 <__ulp+0x18>
 800e88a:	f1a0 0114 	sub.w	r1, r0, #20
 800e88e:	291e      	cmp	r1, #30
 800e890:	bfda      	itte	le
 800e892:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e896:	fa20 f101 	lsrle.w	r1, r0, r1
 800e89a:	2101      	movgt	r1, #1
 800e89c:	460a      	mov	r2, r1
 800e89e:	e7e1      	b.n	800e864 <__ulp+0x18>
 800e8a0:	7ff00000 	.word	0x7ff00000

0800e8a4 <__b2d>:
 800e8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a6:	6905      	ldr	r5, [r0, #16]
 800e8a8:	f100 0714 	add.w	r7, r0, #20
 800e8ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e8b0:	1f2e      	subs	r6, r5, #4
 800e8b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7ff fd48 	bl	800e34c <__hi0bits>
 800e8bc:	f1c0 0320 	rsb	r3, r0, #32
 800e8c0:	280a      	cmp	r0, #10
 800e8c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e940 <__b2d+0x9c>
 800e8c6:	600b      	str	r3, [r1, #0]
 800e8c8:	dc14      	bgt.n	800e8f4 <__b2d+0x50>
 800e8ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800e8ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800e8d2:	42b7      	cmp	r7, r6
 800e8d4:	ea41 030c 	orr.w	r3, r1, ip
 800e8d8:	bf34      	ite	cc
 800e8da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8de:	2100      	movcs	r1, #0
 800e8e0:	3015      	adds	r0, #21
 800e8e2:	fa04 f000 	lsl.w	r0, r4, r0
 800e8e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e8ea:	ea40 0201 	orr.w	r2, r0, r1
 800e8ee:	ec43 2b10 	vmov	d0, r2, r3
 800e8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f4:	42b7      	cmp	r7, r6
 800e8f6:	bf3a      	itte	cc
 800e8f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e900:	2100      	movcs	r1, #0
 800e902:	380b      	subs	r0, #11
 800e904:	d017      	beq.n	800e936 <__b2d+0x92>
 800e906:	f1c0 0c20 	rsb	ip, r0, #32
 800e90a:	fa04 f500 	lsl.w	r5, r4, r0
 800e90e:	42be      	cmp	r6, r7
 800e910:	fa21 f40c 	lsr.w	r4, r1, ip
 800e914:	ea45 0504 	orr.w	r5, r5, r4
 800e918:	bf8c      	ite	hi
 800e91a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e91e:	2400      	movls	r4, #0
 800e920:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e924:	fa01 f000 	lsl.w	r0, r1, r0
 800e928:	fa24 f40c 	lsr.w	r4, r4, ip
 800e92c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e930:	ea40 0204 	orr.w	r2, r0, r4
 800e934:	e7db      	b.n	800e8ee <__b2d+0x4a>
 800e936:	ea44 030c 	orr.w	r3, r4, ip
 800e93a:	460a      	mov	r2, r1
 800e93c:	e7d7      	b.n	800e8ee <__b2d+0x4a>
 800e93e:	bf00      	nop
 800e940:	3ff00000 	.word	0x3ff00000

0800e944 <__d2b>:
 800e944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e948:	4689      	mov	r9, r1
 800e94a:	2101      	movs	r1, #1
 800e94c:	ec57 6b10 	vmov	r6, r7, d0
 800e950:	4690      	mov	r8, r2
 800e952:	f7ff fc09 	bl	800e168 <_Balloc>
 800e956:	4604      	mov	r4, r0
 800e958:	b930      	cbnz	r0, 800e968 <__d2b+0x24>
 800e95a:	4602      	mov	r2, r0
 800e95c:	4b25      	ldr	r3, [pc, #148]	; (800e9f4 <__d2b+0xb0>)
 800e95e:	4826      	ldr	r0, [pc, #152]	; (800e9f8 <__d2b+0xb4>)
 800e960:	f240 310a 	movw	r1, #778	; 0x30a
 800e964:	f000 f916 	bl	800eb94 <__assert_func>
 800e968:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e96c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e970:	bb35      	cbnz	r5, 800e9c0 <__d2b+0x7c>
 800e972:	2e00      	cmp	r6, #0
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	d028      	beq.n	800e9ca <__d2b+0x86>
 800e978:	4668      	mov	r0, sp
 800e97a:	9600      	str	r6, [sp, #0]
 800e97c:	f7ff fd06 	bl	800e38c <__lo0bits>
 800e980:	9900      	ldr	r1, [sp, #0]
 800e982:	b300      	cbz	r0, 800e9c6 <__d2b+0x82>
 800e984:	9a01      	ldr	r2, [sp, #4]
 800e986:	f1c0 0320 	rsb	r3, r0, #32
 800e98a:	fa02 f303 	lsl.w	r3, r2, r3
 800e98e:	430b      	orrs	r3, r1
 800e990:	40c2      	lsrs	r2, r0
 800e992:	6163      	str	r3, [r4, #20]
 800e994:	9201      	str	r2, [sp, #4]
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	61a3      	str	r3, [r4, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	bf14      	ite	ne
 800e99e:	2202      	movne	r2, #2
 800e9a0:	2201      	moveq	r2, #1
 800e9a2:	6122      	str	r2, [r4, #16]
 800e9a4:	b1d5      	cbz	r5, 800e9dc <__d2b+0x98>
 800e9a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e9aa:	4405      	add	r5, r0
 800e9ac:	f8c9 5000 	str.w	r5, [r9]
 800e9b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9b4:	f8c8 0000 	str.w	r0, [r8]
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	b003      	add	sp, #12
 800e9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9c4:	e7d5      	b.n	800e972 <__d2b+0x2e>
 800e9c6:	6161      	str	r1, [r4, #20]
 800e9c8:	e7e5      	b.n	800e996 <__d2b+0x52>
 800e9ca:	a801      	add	r0, sp, #4
 800e9cc:	f7ff fcde 	bl	800e38c <__lo0bits>
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	6163      	str	r3, [r4, #20]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	6122      	str	r2, [r4, #16]
 800e9d8:	3020      	adds	r0, #32
 800e9da:	e7e3      	b.n	800e9a4 <__d2b+0x60>
 800e9dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9e4:	f8c9 0000 	str.w	r0, [r9]
 800e9e8:	6918      	ldr	r0, [r3, #16]
 800e9ea:	f7ff fcaf 	bl	800e34c <__hi0bits>
 800e9ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9f2:	e7df      	b.n	800e9b4 <__d2b+0x70>
 800e9f4:	08010898 	.word	0x08010898
 800e9f8:	0801093b 	.word	0x0801093b

0800e9fc <__ratio>:
 800e9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea00:	4688      	mov	r8, r1
 800ea02:	4669      	mov	r1, sp
 800ea04:	4681      	mov	r9, r0
 800ea06:	f7ff ff4d 	bl	800e8a4 <__b2d>
 800ea0a:	a901      	add	r1, sp, #4
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	ec55 4b10 	vmov	r4, r5, d0
 800ea12:	f7ff ff47 	bl	800e8a4 <__b2d>
 800ea16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ea1e:	eba3 0c02 	sub.w	ip, r3, r2
 800ea22:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea26:	1a9b      	subs	r3, r3, r2
 800ea28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ea2c:	ec51 0b10 	vmov	r0, r1, d0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	bfd6      	itet	le
 800ea34:	460a      	movle	r2, r1
 800ea36:	462a      	movgt	r2, r5
 800ea38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea3c:	468b      	mov	fp, r1
 800ea3e:	462f      	mov	r7, r5
 800ea40:	bfd4      	ite	le
 800ea42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ea46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	ee10 2a10 	vmov	r2, s0
 800ea50:	465b      	mov	r3, fp
 800ea52:	4639      	mov	r1, r7
 800ea54:	f7f1 ff02 	bl	800085c <__aeabi_ddiv>
 800ea58:	ec41 0b10 	vmov	d0, r0, r1
 800ea5c:	b003      	add	sp, #12
 800ea5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea62 <__copybits>:
 800ea62:	3901      	subs	r1, #1
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	1149      	asrs	r1, r1, #5
 800ea68:	6914      	ldr	r4, [r2, #16]
 800ea6a:	3101      	adds	r1, #1
 800ea6c:	f102 0314 	add.w	r3, r2, #20
 800ea70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea78:	1f05      	subs	r5, r0, #4
 800ea7a:	42a3      	cmp	r3, r4
 800ea7c:	d30c      	bcc.n	800ea98 <__copybits+0x36>
 800ea7e:	1aa3      	subs	r3, r4, r2
 800ea80:	3b11      	subs	r3, #17
 800ea82:	f023 0303 	bic.w	r3, r3, #3
 800ea86:	3211      	adds	r2, #17
 800ea88:	42a2      	cmp	r2, r4
 800ea8a:	bf88      	it	hi
 800ea8c:	2300      	movhi	r3, #0
 800ea8e:	4418      	add	r0, r3
 800ea90:	2300      	movs	r3, #0
 800ea92:	4288      	cmp	r0, r1
 800ea94:	d305      	bcc.n	800eaa2 <__copybits+0x40>
 800ea96:	bd70      	pop	{r4, r5, r6, pc}
 800ea98:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eaa0:	e7eb      	b.n	800ea7a <__copybits+0x18>
 800eaa2:	f840 3b04 	str.w	r3, [r0], #4
 800eaa6:	e7f4      	b.n	800ea92 <__copybits+0x30>

0800eaa8 <__any_on>:
 800eaa8:	f100 0214 	add.w	r2, r0, #20
 800eaac:	6900      	ldr	r0, [r0, #16]
 800eaae:	114b      	asrs	r3, r1, #5
 800eab0:	4298      	cmp	r0, r3
 800eab2:	b510      	push	{r4, lr}
 800eab4:	db11      	blt.n	800eada <__any_on+0x32>
 800eab6:	dd0a      	ble.n	800eace <__any_on+0x26>
 800eab8:	f011 011f 	ands.w	r1, r1, #31
 800eabc:	d007      	beq.n	800eace <__any_on+0x26>
 800eabe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eac2:	fa24 f001 	lsr.w	r0, r4, r1
 800eac6:	fa00 f101 	lsl.w	r1, r0, r1
 800eaca:	428c      	cmp	r4, r1
 800eacc:	d10b      	bne.n	800eae6 <__any_on+0x3e>
 800eace:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d803      	bhi.n	800eade <__any_on+0x36>
 800ead6:	2000      	movs	r0, #0
 800ead8:	bd10      	pop	{r4, pc}
 800eada:	4603      	mov	r3, r0
 800eadc:	e7f7      	b.n	800eace <__any_on+0x26>
 800eade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eae2:	2900      	cmp	r1, #0
 800eae4:	d0f5      	beq.n	800ead2 <__any_on+0x2a>
 800eae6:	2001      	movs	r0, #1
 800eae8:	e7f6      	b.n	800ead8 <__any_on+0x30>

0800eaea <_calloc_r>:
 800eaea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaec:	fba1 2402 	umull	r2, r4, r1, r2
 800eaf0:	b94c      	cbnz	r4, 800eb06 <_calloc_r+0x1c>
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	9201      	str	r2, [sp, #4]
 800eaf6:	f7fd ff81 	bl	800c9fc <_malloc_r>
 800eafa:	9a01      	ldr	r2, [sp, #4]
 800eafc:	4605      	mov	r5, r0
 800eafe:	b930      	cbnz	r0, 800eb0e <_calloc_r+0x24>
 800eb00:	4628      	mov	r0, r5
 800eb02:	b003      	add	sp, #12
 800eb04:	bd30      	pop	{r4, r5, pc}
 800eb06:	220c      	movs	r2, #12
 800eb08:	6002      	str	r2, [r0, #0]
 800eb0a:	2500      	movs	r5, #0
 800eb0c:	e7f8      	b.n	800eb00 <_calloc_r+0x16>
 800eb0e:	4621      	mov	r1, r4
 800eb10:	f7fd ff00 	bl	800c914 <memset>
 800eb14:	e7f4      	b.n	800eb00 <_calloc_r+0x16>
	...

0800eb18 <_read_r>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	4d07      	ldr	r5, [pc, #28]	; (800eb38 <_read_r+0x20>)
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	4608      	mov	r0, r1
 800eb20:	4611      	mov	r1, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	602a      	str	r2, [r5, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	f7f6 ff38 	bl	800599c <_read>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_read_r+0x1e>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_read_r+0x1e>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	200008e0 	.word	0x200008e0
 800eb3c:	00000000 	.word	0x00000000

0800eb40 <nan>:
 800eb40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eb48 <nan+0x8>
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	00000000 	.word	0x00000000
 800eb4c:	7ff80000 	.word	0x7ff80000

0800eb50 <strncmp>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	b17a      	cbz	r2, 800eb74 <strncmp+0x24>
 800eb54:	4603      	mov	r3, r0
 800eb56:	3901      	subs	r1, #1
 800eb58:	1884      	adds	r4, r0, r2
 800eb5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eb62:	4290      	cmp	r0, r2
 800eb64:	d101      	bne.n	800eb6a <strncmp+0x1a>
 800eb66:	42a3      	cmp	r3, r4
 800eb68:	d101      	bne.n	800eb6e <strncmp+0x1e>
 800eb6a:	1a80      	subs	r0, r0, r2
 800eb6c:	bd10      	pop	{r4, pc}
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d1f3      	bne.n	800eb5a <strncmp+0xa>
 800eb72:	e7fa      	b.n	800eb6a <strncmp+0x1a>
 800eb74:	4610      	mov	r0, r2
 800eb76:	e7f9      	b.n	800eb6c <strncmp+0x1c>

0800eb78 <__ascii_wctomb>:
 800eb78:	b149      	cbz	r1, 800eb8e <__ascii_wctomb+0x16>
 800eb7a:	2aff      	cmp	r2, #255	; 0xff
 800eb7c:	bf85      	ittet	hi
 800eb7e:	238a      	movhi	r3, #138	; 0x8a
 800eb80:	6003      	strhi	r3, [r0, #0]
 800eb82:	700a      	strbls	r2, [r1, #0]
 800eb84:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb88:	bf98      	it	ls
 800eb8a:	2001      	movls	r0, #1
 800eb8c:	4770      	bx	lr
 800eb8e:	4608      	mov	r0, r1
 800eb90:	4770      	bx	lr
	...

0800eb94 <__assert_func>:
 800eb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb96:	4614      	mov	r4, r2
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4b09      	ldr	r3, [pc, #36]	; (800ebc0 <__assert_func+0x2c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4605      	mov	r5, r0
 800eba0:	68d8      	ldr	r0, [r3, #12]
 800eba2:	b14c      	cbz	r4, 800ebb8 <__assert_func+0x24>
 800eba4:	4b07      	ldr	r3, [pc, #28]	; (800ebc4 <__assert_func+0x30>)
 800eba6:	9100      	str	r1, [sp, #0]
 800eba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebac:	4906      	ldr	r1, [pc, #24]	; (800ebc8 <__assert_func+0x34>)
 800ebae:	462b      	mov	r3, r5
 800ebb0:	f000 f80e 	bl	800ebd0 <fiprintf>
 800ebb4:	f000 fbd4 	bl	800f360 <abort>
 800ebb8:	4b04      	ldr	r3, [pc, #16]	; (800ebcc <__assert_func+0x38>)
 800ebba:	461c      	mov	r4, r3
 800ebbc:	e7f3      	b.n	800eba6 <__assert_func+0x12>
 800ebbe:	bf00      	nop
 800ebc0:	20000084 	.word	0x20000084
 800ebc4:	08010a94 	.word	0x08010a94
 800ebc8:	08010aa1 	.word	0x08010aa1
 800ebcc:	08010acf 	.word	0x08010acf

0800ebd0 <fiprintf>:
 800ebd0:	b40e      	push	{r1, r2, r3}
 800ebd2:	b503      	push	{r0, r1, lr}
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	ab03      	add	r3, sp, #12
 800ebd8:	4805      	ldr	r0, [pc, #20]	; (800ebf0 <fiprintf+0x20>)
 800ebda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebde:	6800      	ldr	r0, [r0, #0]
 800ebe0:	9301      	str	r3, [sp, #4]
 800ebe2:	f000 f839 	bl	800ec58 <_vfiprintf_r>
 800ebe6:	b002      	add	sp, #8
 800ebe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebec:	b003      	add	sp, #12
 800ebee:	4770      	bx	lr
 800ebf0:	20000084 	.word	0x20000084

0800ebf4 <malloc>:
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <malloc+0xc>)
 800ebf6:	4601      	mov	r1, r0
 800ebf8:	6818      	ldr	r0, [r3, #0]
 800ebfa:	f7fd beff 	b.w	800c9fc <_malloc_r>
 800ebfe:	bf00      	nop
 800ec00:	20000084 	.word	0x20000084

0800ec04 <__sfputc_r>:
 800ec04:	6893      	ldr	r3, [r2, #8]
 800ec06:	3b01      	subs	r3, #1
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	b410      	push	{r4}
 800ec0c:	6093      	str	r3, [r2, #8]
 800ec0e:	da08      	bge.n	800ec22 <__sfputc_r+0x1e>
 800ec10:	6994      	ldr	r4, [r2, #24]
 800ec12:	42a3      	cmp	r3, r4
 800ec14:	db01      	blt.n	800ec1a <__sfputc_r+0x16>
 800ec16:	290a      	cmp	r1, #10
 800ec18:	d103      	bne.n	800ec22 <__sfputc_r+0x1e>
 800ec1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec1e:	f000 badf 	b.w	800f1e0 <__swbuf_r>
 800ec22:	6813      	ldr	r3, [r2, #0]
 800ec24:	1c58      	adds	r0, r3, #1
 800ec26:	6010      	str	r0, [r2, #0]
 800ec28:	7019      	strb	r1, [r3, #0]
 800ec2a:	4608      	mov	r0, r1
 800ec2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec30:	4770      	bx	lr

0800ec32 <__sfputs_r>:
 800ec32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	4614      	mov	r4, r2
 800ec3a:	18d5      	adds	r5, r2, r3
 800ec3c:	42ac      	cmp	r4, r5
 800ec3e:	d101      	bne.n	800ec44 <__sfputs_r+0x12>
 800ec40:	2000      	movs	r0, #0
 800ec42:	e007      	b.n	800ec54 <__sfputs_r+0x22>
 800ec44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec48:	463a      	mov	r2, r7
 800ec4a:	4630      	mov	r0, r6
 800ec4c:	f7ff ffda 	bl	800ec04 <__sfputc_r>
 800ec50:	1c43      	adds	r3, r0, #1
 800ec52:	d1f3      	bne.n	800ec3c <__sfputs_r+0xa>
 800ec54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec58 <_vfiprintf_r>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	b09d      	sub	sp, #116	; 0x74
 800ec60:	4614      	mov	r4, r2
 800ec62:	4698      	mov	r8, r3
 800ec64:	4606      	mov	r6, r0
 800ec66:	b118      	cbz	r0, 800ec70 <_vfiprintf_r+0x18>
 800ec68:	6983      	ldr	r3, [r0, #24]
 800ec6a:	b90b      	cbnz	r3, 800ec70 <_vfiprintf_r+0x18>
 800ec6c:	f7fd fbea 	bl	800c444 <__sinit>
 800ec70:	4b89      	ldr	r3, [pc, #548]	; (800ee98 <_vfiprintf_r+0x240>)
 800ec72:	429d      	cmp	r5, r3
 800ec74:	d11b      	bne.n	800ecae <_vfiprintf_r+0x56>
 800ec76:	6875      	ldr	r5, [r6, #4]
 800ec78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec7a:	07d9      	lsls	r1, r3, #31
 800ec7c:	d405      	bmi.n	800ec8a <_vfiprintf_r+0x32>
 800ec7e:	89ab      	ldrh	r3, [r5, #12]
 800ec80:	059a      	lsls	r2, r3, #22
 800ec82:	d402      	bmi.n	800ec8a <_vfiprintf_r+0x32>
 800ec84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec86:	f7fd fdcf 	bl	800c828 <__retarget_lock_acquire_recursive>
 800ec8a:	89ab      	ldrh	r3, [r5, #12]
 800ec8c:	071b      	lsls	r3, r3, #28
 800ec8e:	d501      	bpl.n	800ec94 <_vfiprintf_r+0x3c>
 800ec90:	692b      	ldr	r3, [r5, #16]
 800ec92:	b9eb      	cbnz	r3, 800ecd0 <_vfiprintf_r+0x78>
 800ec94:	4629      	mov	r1, r5
 800ec96:	4630      	mov	r0, r6
 800ec98:	f000 faf4 	bl	800f284 <__swsetup_r>
 800ec9c:	b1c0      	cbz	r0, 800ecd0 <_vfiprintf_r+0x78>
 800ec9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eca0:	07dc      	lsls	r4, r3, #31
 800eca2:	d50e      	bpl.n	800ecc2 <_vfiprintf_r+0x6a>
 800eca4:	f04f 30ff 	mov.w	r0, #4294967295
 800eca8:	b01d      	add	sp, #116	; 0x74
 800ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecae:	4b7b      	ldr	r3, [pc, #492]	; (800ee9c <_vfiprintf_r+0x244>)
 800ecb0:	429d      	cmp	r5, r3
 800ecb2:	d101      	bne.n	800ecb8 <_vfiprintf_r+0x60>
 800ecb4:	68b5      	ldr	r5, [r6, #8]
 800ecb6:	e7df      	b.n	800ec78 <_vfiprintf_r+0x20>
 800ecb8:	4b79      	ldr	r3, [pc, #484]	; (800eea0 <_vfiprintf_r+0x248>)
 800ecba:	429d      	cmp	r5, r3
 800ecbc:	bf08      	it	eq
 800ecbe:	68f5      	ldreq	r5, [r6, #12]
 800ecc0:	e7da      	b.n	800ec78 <_vfiprintf_r+0x20>
 800ecc2:	89ab      	ldrh	r3, [r5, #12]
 800ecc4:	0598      	lsls	r0, r3, #22
 800ecc6:	d4ed      	bmi.n	800eca4 <_vfiprintf_r+0x4c>
 800ecc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecca:	f7fd fdae 	bl	800c82a <__retarget_lock_release_recursive>
 800ecce:	e7e9      	b.n	800eca4 <_vfiprintf_r+0x4c>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd4:	2320      	movs	r3, #32
 800ecd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecda:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecde:	2330      	movs	r3, #48	; 0x30
 800ece0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eea4 <_vfiprintf_r+0x24c>
 800ece4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ece8:	f04f 0901 	mov.w	r9, #1
 800ecec:	4623      	mov	r3, r4
 800ecee:	469a      	mov	sl, r3
 800ecf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecf4:	b10a      	cbz	r2, 800ecfa <_vfiprintf_r+0xa2>
 800ecf6:	2a25      	cmp	r2, #37	; 0x25
 800ecf8:	d1f9      	bne.n	800ecee <_vfiprintf_r+0x96>
 800ecfa:	ebba 0b04 	subs.w	fp, sl, r4
 800ecfe:	d00b      	beq.n	800ed18 <_vfiprintf_r+0xc0>
 800ed00:	465b      	mov	r3, fp
 800ed02:	4622      	mov	r2, r4
 800ed04:	4629      	mov	r1, r5
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7ff ff93 	bl	800ec32 <__sfputs_r>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	f000 80aa 	beq.w	800ee66 <_vfiprintf_r+0x20e>
 800ed12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed14:	445a      	add	r2, fp
 800ed16:	9209      	str	r2, [sp, #36]	; 0x24
 800ed18:	f89a 3000 	ldrb.w	r3, [sl]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 80a2 	beq.w	800ee66 <_vfiprintf_r+0x20e>
 800ed22:	2300      	movs	r3, #0
 800ed24:	f04f 32ff 	mov.w	r2, #4294967295
 800ed28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed2c:	f10a 0a01 	add.w	sl, sl, #1
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	9307      	str	r3, [sp, #28]
 800ed34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed38:	931a      	str	r3, [sp, #104]	; 0x68
 800ed3a:	4654      	mov	r4, sl
 800ed3c:	2205      	movs	r2, #5
 800ed3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed42:	4858      	ldr	r0, [pc, #352]	; (800eea4 <_vfiprintf_r+0x24c>)
 800ed44:	f7f1 fa4c 	bl	80001e0 <memchr>
 800ed48:	9a04      	ldr	r2, [sp, #16]
 800ed4a:	b9d8      	cbnz	r0, 800ed84 <_vfiprintf_r+0x12c>
 800ed4c:	06d1      	lsls	r1, r2, #27
 800ed4e:	bf44      	itt	mi
 800ed50:	2320      	movmi	r3, #32
 800ed52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed56:	0713      	lsls	r3, r2, #28
 800ed58:	bf44      	itt	mi
 800ed5a:	232b      	movmi	r3, #43	; 0x2b
 800ed5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed60:	f89a 3000 	ldrb.w	r3, [sl]
 800ed64:	2b2a      	cmp	r3, #42	; 0x2a
 800ed66:	d015      	beq.n	800ed94 <_vfiprintf_r+0x13c>
 800ed68:	9a07      	ldr	r2, [sp, #28]
 800ed6a:	4654      	mov	r4, sl
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f04f 0c0a 	mov.w	ip, #10
 800ed72:	4621      	mov	r1, r4
 800ed74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed78:	3b30      	subs	r3, #48	; 0x30
 800ed7a:	2b09      	cmp	r3, #9
 800ed7c:	d94e      	bls.n	800ee1c <_vfiprintf_r+0x1c4>
 800ed7e:	b1b0      	cbz	r0, 800edae <_vfiprintf_r+0x156>
 800ed80:	9207      	str	r2, [sp, #28]
 800ed82:	e014      	b.n	800edae <_vfiprintf_r+0x156>
 800ed84:	eba0 0308 	sub.w	r3, r0, r8
 800ed88:	fa09 f303 	lsl.w	r3, r9, r3
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	9304      	str	r3, [sp, #16]
 800ed90:	46a2      	mov	sl, r4
 800ed92:	e7d2      	b.n	800ed3a <_vfiprintf_r+0xe2>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	1d19      	adds	r1, r3, #4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	9103      	str	r1, [sp, #12]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	bfbb      	ittet	lt
 800eda0:	425b      	neglt	r3, r3
 800eda2:	f042 0202 	orrlt.w	r2, r2, #2
 800eda6:	9307      	strge	r3, [sp, #28]
 800eda8:	9307      	strlt	r3, [sp, #28]
 800edaa:	bfb8      	it	lt
 800edac:	9204      	strlt	r2, [sp, #16]
 800edae:	7823      	ldrb	r3, [r4, #0]
 800edb0:	2b2e      	cmp	r3, #46	; 0x2e
 800edb2:	d10c      	bne.n	800edce <_vfiprintf_r+0x176>
 800edb4:	7863      	ldrb	r3, [r4, #1]
 800edb6:	2b2a      	cmp	r3, #42	; 0x2a
 800edb8:	d135      	bne.n	800ee26 <_vfiprintf_r+0x1ce>
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	1d1a      	adds	r2, r3, #4
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	9203      	str	r2, [sp, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	bfb8      	it	lt
 800edc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800edca:	3402      	adds	r4, #2
 800edcc:	9305      	str	r3, [sp, #20]
 800edce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eeb4 <_vfiprintf_r+0x25c>
 800edd2:	7821      	ldrb	r1, [r4, #0]
 800edd4:	2203      	movs	r2, #3
 800edd6:	4650      	mov	r0, sl
 800edd8:	f7f1 fa02 	bl	80001e0 <memchr>
 800eddc:	b140      	cbz	r0, 800edf0 <_vfiprintf_r+0x198>
 800edde:	2340      	movs	r3, #64	; 0x40
 800ede0:	eba0 000a 	sub.w	r0, r0, sl
 800ede4:	fa03 f000 	lsl.w	r0, r3, r0
 800ede8:	9b04      	ldr	r3, [sp, #16]
 800edea:	4303      	orrs	r3, r0
 800edec:	3401      	adds	r4, #1
 800edee:	9304      	str	r3, [sp, #16]
 800edf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edf4:	482c      	ldr	r0, [pc, #176]	; (800eea8 <_vfiprintf_r+0x250>)
 800edf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edfa:	2206      	movs	r2, #6
 800edfc:	f7f1 f9f0 	bl	80001e0 <memchr>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d03f      	beq.n	800ee84 <_vfiprintf_r+0x22c>
 800ee04:	4b29      	ldr	r3, [pc, #164]	; (800eeac <_vfiprintf_r+0x254>)
 800ee06:	bb1b      	cbnz	r3, 800ee50 <_vfiprintf_r+0x1f8>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	3307      	adds	r3, #7
 800ee0c:	f023 0307 	bic.w	r3, r3, #7
 800ee10:	3308      	adds	r3, #8
 800ee12:	9303      	str	r3, [sp, #12]
 800ee14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee16:	443b      	add	r3, r7
 800ee18:	9309      	str	r3, [sp, #36]	; 0x24
 800ee1a:	e767      	b.n	800ecec <_vfiprintf_r+0x94>
 800ee1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee20:	460c      	mov	r4, r1
 800ee22:	2001      	movs	r0, #1
 800ee24:	e7a5      	b.n	800ed72 <_vfiprintf_r+0x11a>
 800ee26:	2300      	movs	r3, #0
 800ee28:	3401      	adds	r4, #1
 800ee2a:	9305      	str	r3, [sp, #20]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	f04f 0c0a 	mov.w	ip, #10
 800ee32:	4620      	mov	r0, r4
 800ee34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee38:	3a30      	subs	r2, #48	; 0x30
 800ee3a:	2a09      	cmp	r2, #9
 800ee3c:	d903      	bls.n	800ee46 <_vfiprintf_r+0x1ee>
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0c5      	beq.n	800edce <_vfiprintf_r+0x176>
 800ee42:	9105      	str	r1, [sp, #20]
 800ee44:	e7c3      	b.n	800edce <_vfiprintf_r+0x176>
 800ee46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e7f0      	b.n	800ee32 <_vfiprintf_r+0x1da>
 800ee50:	ab03      	add	r3, sp, #12
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	462a      	mov	r2, r5
 800ee56:	4b16      	ldr	r3, [pc, #88]	; (800eeb0 <_vfiprintf_r+0x258>)
 800ee58:	a904      	add	r1, sp, #16
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f3af 8000 	nop.w
 800ee60:	4607      	mov	r7, r0
 800ee62:	1c78      	adds	r0, r7, #1
 800ee64:	d1d6      	bne.n	800ee14 <_vfiprintf_r+0x1bc>
 800ee66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee68:	07d9      	lsls	r1, r3, #31
 800ee6a:	d405      	bmi.n	800ee78 <_vfiprintf_r+0x220>
 800ee6c:	89ab      	ldrh	r3, [r5, #12]
 800ee6e:	059a      	lsls	r2, r3, #22
 800ee70:	d402      	bmi.n	800ee78 <_vfiprintf_r+0x220>
 800ee72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee74:	f7fd fcd9 	bl	800c82a <__retarget_lock_release_recursive>
 800ee78:	89ab      	ldrh	r3, [r5, #12]
 800ee7a:	065b      	lsls	r3, r3, #25
 800ee7c:	f53f af12 	bmi.w	800eca4 <_vfiprintf_r+0x4c>
 800ee80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee82:	e711      	b.n	800eca8 <_vfiprintf_r+0x50>
 800ee84:	ab03      	add	r3, sp, #12
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	462a      	mov	r2, r5
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <_vfiprintf_r+0x258>)
 800ee8c:	a904      	add	r1, sp, #16
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f000 f880 	bl	800ef94 <_printf_i>
 800ee94:	e7e4      	b.n	800ee60 <_vfiprintf_r+0x208>
 800ee96:	bf00      	nop
 800ee98:	080107f4 	.word	0x080107f4
 800ee9c:	08010814 	.word	0x08010814
 800eea0:	080107d4 	.word	0x080107d4
 800eea4:	08010bd1 	.word	0x08010bd1
 800eea8:	08010bdb 	.word	0x08010bdb
 800eeac:	00000000 	.word	0x00000000
 800eeb0:	0800ec33 	.word	0x0800ec33
 800eeb4:	08010bd7 	.word	0x08010bd7

0800eeb8 <_printf_common>:
 800eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eebc:	4616      	mov	r6, r2
 800eebe:	4699      	mov	r9, r3
 800eec0:	688a      	ldr	r2, [r1, #8]
 800eec2:	690b      	ldr	r3, [r1, #16]
 800eec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eec8:	4293      	cmp	r3, r2
 800eeca:	bfb8      	it	lt
 800eecc:	4613      	movlt	r3, r2
 800eece:	6033      	str	r3, [r6, #0]
 800eed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eed4:	4607      	mov	r7, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	b10a      	cbz	r2, 800eede <_printf_common+0x26>
 800eeda:	3301      	adds	r3, #1
 800eedc:	6033      	str	r3, [r6, #0]
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	0699      	lsls	r1, r3, #26
 800eee2:	bf42      	ittt	mi
 800eee4:	6833      	ldrmi	r3, [r6, #0]
 800eee6:	3302      	addmi	r3, #2
 800eee8:	6033      	strmi	r3, [r6, #0]
 800eeea:	6825      	ldr	r5, [r4, #0]
 800eeec:	f015 0506 	ands.w	r5, r5, #6
 800eef0:	d106      	bne.n	800ef00 <_printf_common+0x48>
 800eef2:	f104 0a19 	add.w	sl, r4, #25
 800eef6:	68e3      	ldr	r3, [r4, #12]
 800eef8:	6832      	ldr	r2, [r6, #0]
 800eefa:	1a9b      	subs	r3, r3, r2
 800eefc:	42ab      	cmp	r3, r5
 800eefe:	dc26      	bgt.n	800ef4e <_printf_common+0x96>
 800ef00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef04:	1e13      	subs	r3, r2, #0
 800ef06:	6822      	ldr	r2, [r4, #0]
 800ef08:	bf18      	it	ne
 800ef0a:	2301      	movne	r3, #1
 800ef0c:	0692      	lsls	r2, r2, #26
 800ef0e:	d42b      	bmi.n	800ef68 <_printf_common+0xb0>
 800ef10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef14:	4649      	mov	r1, r9
 800ef16:	4638      	mov	r0, r7
 800ef18:	47c0      	blx	r8
 800ef1a:	3001      	adds	r0, #1
 800ef1c:	d01e      	beq.n	800ef5c <_printf_common+0xa4>
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	68e5      	ldr	r5, [r4, #12]
 800ef22:	6832      	ldr	r2, [r6, #0]
 800ef24:	f003 0306 	and.w	r3, r3, #6
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	bf08      	it	eq
 800ef2c:	1aad      	subeq	r5, r5, r2
 800ef2e:	68a3      	ldr	r3, [r4, #8]
 800ef30:	6922      	ldr	r2, [r4, #16]
 800ef32:	bf0c      	ite	eq
 800ef34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef38:	2500      	movne	r5, #0
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	bfc4      	itt	gt
 800ef3e:	1a9b      	subgt	r3, r3, r2
 800ef40:	18ed      	addgt	r5, r5, r3
 800ef42:	2600      	movs	r6, #0
 800ef44:	341a      	adds	r4, #26
 800ef46:	42b5      	cmp	r5, r6
 800ef48:	d11a      	bne.n	800ef80 <_printf_common+0xc8>
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	e008      	b.n	800ef60 <_printf_common+0xa8>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4652      	mov	r2, sl
 800ef52:	4649      	mov	r1, r9
 800ef54:	4638      	mov	r0, r7
 800ef56:	47c0      	blx	r8
 800ef58:	3001      	adds	r0, #1
 800ef5a:	d103      	bne.n	800ef64 <_printf_common+0xac>
 800ef5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef64:	3501      	adds	r5, #1
 800ef66:	e7c6      	b.n	800eef6 <_printf_common+0x3e>
 800ef68:	18e1      	adds	r1, r4, r3
 800ef6a:	1c5a      	adds	r2, r3, #1
 800ef6c:	2030      	movs	r0, #48	; 0x30
 800ef6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef72:	4422      	add	r2, r4
 800ef74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef7c:	3302      	adds	r3, #2
 800ef7e:	e7c7      	b.n	800ef10 <_printf_common+0x58>
 800ef80:	2301      	movs	r3, #1
 800ef82:	4622      	mov	r2, r4
 800ef84:	4649      	mov	r1, r9
 800ef86:	4638      	mov	r0, r7
 800ef88:	47c0      	blx	r8
 800ef8a:	3001      	adds	r0, #1
 800ef8c:	d0e6      	beq.n	800ef5c <_printf_common+0xa4>
 800ef8e:	3601      	adds	r6, #1
 800ef90:	e7d9      	b.n	800ef46 <_printf_common+0x8e>
	...

0800ef94 <_printf_i>:
 800ef94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef98:	7e0f      	ldrb	r7, [r1, #24]
 800ef9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef9c:	2f78      	cmp	r7, #120	; 0x78
 800ef9e:	4691      	mov	r9, r2
 800efa0:	4680      	mov	r8, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	469a      	mov	sl, r3
 800efa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efaa:	d807      	bhi.n	800efbc <_printf_i+0x28>
 800efac:	2f62      	cmp	r7, #98	; 0x62
 800efae:	d80a      	bhi.n	800efc6 <_printf_i+0x32>
 800efb0:	2f00      	cmp	r7, #0
 800efb2:	f000 80d8 	beq.w	800f166 <_printf_i+0x1d2>
 800efb6:	2f58      	cmp	r7, #88	; 0x58
 800efb8:	f000 80a3 	beq.w	800f102 <_printf_i+0x16e>
 800efbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efc4:	e03a      	b.n	800f03c <_printf_i+0xa8>
 800efc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efca:	2b15      	cmp	r3, #21
 800efcc:	d8f6      	bhi.n	800efbc <_printf_i+0x28>
 800efce:	a101      	add	r1, pc, #4	; (adr r1, 800efd4 <_printf_i+0x40>)
 800efd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efd4:	0800f02d 	.word	0x0800f02d
 800efd8:	0800f041 	.word	0x0800f041
 800efdc:	0800efbd 	.word	0x0800efbd
 800efe0:	0800efbd 	.word	0x0800efbd
 800efe4:	0800efbd 	.word	0x0800efbd
 800efe8:	0800efbd 	.word	0x0800efbd
 800efec:	0800f041 	.word	0x0800f041
 800eff0:	0800efbd 	.word	0x0800efbd
 800eff4:	0800efbd 	.word	0x0800efbd
 800eff8:	0800efbd 	.word	0x0800efbd
 800effc:	0800efbd 	.word	0x0800efbd
 800f000:	0800f14d 	.word	0x0800f14d
 800f004:	0800f071 	.word	0x0800f071
 800f008:	0800f12f 	.word	0x0800f12f
 800f00c:	0800efbd 	.word	0x0800efbd
 800f010:	0800efbd 	.word	0x0800efbd
 800f014:	0800f16f 	.word	0x0800f16f
 800f018:	0800efbd 	.word	0x0800efbd
 800f01c:	0800f071 	.word	0x0800f071
 800f020:	0800efbd 	.word	0x0800efbd
 800f024:	0800efbd 	.word	0x0800efbd
 800f028:	0800f137 	.word	0x0800f137
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	1d1a      	adds	r2, r3, #4
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	602a      	str	r2, [r5, #0]
 800f034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f03c:	2301      	movs	r3, #1
 800f03e:	e0a3      	b.n	800f188 <_printf_i+0x1f4>
 800f040:	6820      	ldr	r0, [r4, #0]
 800f042:	6829      	ldr	r1, [r5, #0]
 800f044:	0606      	lsls	r6, r0, #24
 800f046:	f101 0304 	add.w	r3, r1, #4
 800f04a:	d50a      	bpl.n	800f062 <_printf_i+0xce>
 800f04c:	680e      	ldr	r6, [r1, #0]
 800f04e:	602b      	str	r3, [r5, #0]
 800f050:	2e00      	cmp	r6, #0
 800f052:	da03      	bge.n	800f05c <_printf_i+0xc8>
 800f054:	232d      	movs	r3, #45	; 0x2d
 800f056:	4276      	negs	r6, r6
 800f058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f05c:	485e      	ldr	r0, [pc, #376]	; (800f1d8 <_printf_i+0x244>)
 800f05e:	230a      	movs	r3, #10
 800f060:	e019      	b.n	800f096 <_printf_i+0x102>
 800f062:	680e      	ldr	r6, [r1, #0]
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f06a:	bf18      	it	ne
 800f06c:	b236      	sxthne	r6, r6
 800f06e:	e7ef      	b.n	800f050 <_printf_i+0xbc>
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	1d19      	adds	r1, r3, #4
 800f076:	6029      	str	r1, [r5, #0]
 800f078:	0601      	lsls	r1, r0, #24
 800f07a:	d501      	bpl.n	800f080 <_printf_i+0xec>
 800f07c:	681e      	ldr	r6, [r3, #0]
 800f07e:	e002      	b.n	800f086 <_printf_i+0xf2>
 800f080:	0646      	lsls	r6, r0, #25
 800f082:	d5fb      	bpl.n	800f07c <_printf_i+0xe8>
 800f084:	881e      	ldrh	r6, [r3, #0]
 800f086:	4854      	ldr	r0, [pc, #336]	; (800f1d8 <_printf_i+0x244>)
 800f088:	2f6f      	cmp	r7, #111	; 0x6f
 800f08a:	bf0c      	ite	eq
 800f08c:	2308      	moveq	r3, #8
 800f08e:	230a      	movne	r3, #10
 800f090:	2100      	movs	r1, #0
 800f092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f096:	6865      	ldr	r5, [r4, #4]
 800f098:	60a5      	str	r5, [r4, #8]
 800f09a:	2d00      	cmp	r5, #0
 800f09c:	bfa2      	ittt	ge
 800f09e:	6821      	ldrge	r1, [r4, #0]
 800f0a0:	f021 0104 	bicge.w	r1, r1, #4
 800f0a4:	6021      	strge	r1, [r4, #0]
 800f0a6:	b90e      	cbnz	r6, 800f0ac <_printf_i+0x118>
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	d04d      	beq.n	800f148 <_printf_i+0x1b4>
 800f0ac:	4615      	mov	r5, r2
 800f0ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f0b6:	5dc7      	ldrb	r7, [r0, r7]
 800f0b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0bc:	4637      	mov	r7, r6
 800f0be:	42bb      	cmp	r3, r7
 800f0c0:	460e      	mov	r6, r1
 800f0c2:	d9f4      	bls.n	800f0ae <_printf_i+0x11a>
 800f0c4:	2b08      	cmp	r3, #8
 800f0c6:	d10b      	bne.n	800f0e0 <_printf_i+0x14c>
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	07de      	lsls	r6, r3, #31
 800f0cc:	d508      	bpl.n	800f0e0 <_printf_i+0x14c>
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	6861      	ldr	r1, [r4, #4]
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	bfde      	ittt	le
 800f0d6:	2330      	movle	r3, #48	; 0x30
 800f0d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0e0:	1b52      	subs	r2, r2, r5
 800f0e2:	6122      	str	r2, [r4, #16]
 800f0e4:	f8cd a000 	str.w	sl, [sp]
 800f0e8:	464b      	mov	r3, r9
 800f0ea:	aa03      	add	r2, sp, #12
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	f7ff fee2 	bl	800eeb8 <_printf_common>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d14c      	bne.n	800f192 <_printf_i+0x1fe>
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	b004      	add	sp, #16
 800f0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f102:	4835      	ldr	r0, [pc, #212]	; (800f1d8 <_printf_i+0x244>)
 800f104:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f108:	6829      	ldr	r1, [r5, #0]
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f110:	6029      	str	r1, [r5, #0]
 800f112:	061d      	lsls	r5, r3, #24
 800f114:	d514      	bpl.n	800f140 <_printf_i+0x1ac>
 800f116:	07df      	lsls	r7, r3, #31
 800f118:	bf44      	itt	mi
 800f11a:	f043 0320 	orrmi.w	r3, r3, #32
 800f11e:	6023      	strmi	r3, [r4, #0]
 800f120:	b91e      	cbnz	r6, 800f12a <_printf_i+0x196>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	f023 0320 	bic.w	r3, r3, #32
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	2310      	movs	r3, #16
 800f12c:	e7b0      	b.n	800f090 <_printf_i+0xfc>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	f043 0320 	orr.w	r3, r3, #32
 800f134:	6023      	str	r3, [r4, #0]
 800f136:	2378      	movs	r3, #120	; 0x78
 800f138:	4828      	ldr	r0, [pc, #160]	; (800f1dc <_printf_i+0x248>)
 800f13a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f13e:	e7e3      	b.n	800f108 <_printf_i+0x174>
 800f140:	0659      	lsls	r1, r3, #25
 800f142:	bf48      	it	mi
 800f144:	b2b6      	uxthmi	r6, r6
 800f146:	e7e6      	b.n	800f116 <_printf_i+0x182>
 800f148:	4615      	mov	r5, r2
 800f14a:	e7bb      	b.n	800f0c4 <_printf_i+0x130>
 800f14c:	682b      	ldr	r3, [r5, #0]
 800f14e:	6826      	ldr	r6, [r4, #0]
 800f150:	6961      	ldr	r1, [r4, #20]
 800f152:	1d18      	adds	r0, r3, #4
 800f154:	6028      	str	r0, [r5, #0]
 800f156:	0635      	lsls	r5, r6, #24
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	d501      	bpl.n	800f160 <_printf_i+0x1cc>
 800f15c:	6019      	str	r1, [r3, #0]
 800f15e:	e002      	b.n	800f166 <_printf_i+0x1d2>
 800f160:	0670      	lsls	r0, r6, #25
 800f162:	d5fb      	bpl.n	800f15c <_printf_i+0x1c8>
 800f164:	8019      	strh	r1, [r3, #0]
 800f166:	2300      	movs	r3, #0
 800f168:	6123      	str	r3, [r4, #16]
 800f16a:	4615      	mov	r5, r2
 800f16c:	e7ba      	b.n	800f0e4 <_printf_i+0x150>
 800f16e:	682b      	ldr	r3, [r5, #0]
 800f170:	1d1a      	adds	r2, r3, #4
 800f172:	602a      	str	r2, [r5, #0]
 800f174:	681d      	ldr	r5, [r3, #0]
 800f176:	6862      	ldr	r2, [r4, #4]
 800f178:	2100      	movs	r1, #0
 800f17a:	4628      	mov	r0, r5
 800f17c:	f7f1 f830 	bl	80001e0 <memchr>
 800f180:	b108      	cbz	r0, 800f186 <_printf_i+0x1f2>
 800f182:	1b40      	subs	r0, r0, r5
 800f184:	6060      	str	r0, [r4, #4]
 800f186:	6863      	ldr	r3, [r4, #4]
 800f188:	6123      	str	r3, [r4, #16]
 800f18a:	2300      	movs	r3, #0
 800f18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f190:	e7a8      	b.n	800f0e4 <_printf_i+0x150>
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	462a      	mov	r2, r5
 800f196:	4649      	mov	r1, r9
 800f198:	4640      	mov	r0, r8
 800f19a:	47d0      	blx	sl
 800f19c:	3001      	adds	r0, #1
 800f19e:	d0ab      	beq.n	800f0f8 <_printf_i+0x164>
 800f1a0:	6823      	ldr	r3, [r4, #0]
 800f1a2:	079b      	lsls	r3, r3, #30
 800f1a4:	d413      	bmi.n	800f1ce <_printf_i+0x23a>
 800f1a6:	68e0      	ldr	r0, [r4, #12]
 800f1a8:	9b03      	ldr	r3, [sp, #12]
 800f1aa:	4298      	cmp	r0, r3
 800f1ac:	bfb8      	it	lt
 800f1ae:	4618      	movlt	r0, r3
 800f1b0:	e7a4      	b.n	800f0fc <_printf_i+0x168>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	4649      	mov	r1, r9
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	47d0      	blx	sl
 800f1bc:	3001      	adds	r0, #1
 800f1be:	d09b      	beq.n	800f0f8 <_printf_i+0x164>
 800f1c0:	3501      	adds	r5, #1
 800f1c2:	68e3      	ldr	r3, [r4, #12]
 800f1c4:	9903      	ldr	r1, [sp, #12]
 800f1c6:	1a5b      	subs	r3, r3, r1
 800f1c8:	42ab      	cmp	r3, r5
 800f1ca:	dcf2      	bgt.n	800f1b2 <_printf_i+0x21e>
 800f1cc:	e7eb      	b.n	800f1a6 <_printf_i+0x212>
 800f1ce:	2500      	movs	r5, #0
 800f1d0:	f104 0619 	add.w	r6, r4, #25
 800f1d4:	e7f5      	b.n	800f1c2 <_printf_i+0x22e>
 800f1d6:	bf00      	nop
 800f1d8:	08010be2 	.word	0x08010be2
 800f1dc:	08010bf3 	.word	0x08010bf3

0800f1e0 <__swbuf_r>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	460e      	mov	r6, r1
 800f1e4:	4614      	mov	r4, r2
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	b118      	cbz	r0, 800f1f2 <__swbuf_r+0x12>
 800f1ea:	6983      	ldr	r3, [r0, #24]
 800f1ec:	b90b      	cbnz	r3, 800f1f2 <__swbuf_r+0x12>
 800f1ee:	f7fd f929 	bl	800c444 <__sinit>
 800f1f2:	4b21      	ldr	r3, [pc, #132]	; (800f278 <__swbuf_r+0x98>)
 800f1f4:	429c      	cmp	r4, r3
 800f1f6:	d12b      	bne.n	800f250 <__swbuf_r+0x70>
 800f1f8:	686c      	ldr	r4, [r5, #4]
 800f1fa:	69a3      	ldr	r3, [r4, #24]
 800f1fc:	60a3      	str	r3, [r4, #8]
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	071a      	lsls	r2, r3, #28
 800f202:	d52f      	bpl.n	800f264 <__swbuf_r+0x84>
 800f204:	6923      	ldr	r3, [r4, #16]
 800f206:	b36b      	cbz	r3, 800f264 <__swbuf_r+0x84>
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	6820      	ldr	r0, [r4, #0]
 800f20c:	1ac0      	subs	r0, r0, r3
 800f20e:	6963      	ldr	r3, [r4, #20]
 800f210:	b2f6      	uxtb	r6, r6
 800f212:	4283      	cmp	r3, r0
 800f214:	4637      	mov	r7, r6
 800f216:	dc04      	bgt.n	800f222 <__swbuf_r+0x42>
 800f218:	4621      	mov	r1, r4
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7fc ffe8 	bl	800c1f0 <_fflush_r>
 800f220:	bb30      	cbnz	r0, 800f270 <__swbuf_r+0x90>
 800f222:	68a3      	ldr	r3, [r4, #8]
 800f224:	3b01      	subs	r3, #1
 800f226:	60a3      	str	r3, [r4, #8]
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	6022      	str	r2, [r4, #0]
 800f22e:	701e      	strb	r6, [r3, #0]
 800f230:	6963      	ldr	r3, [r4, #20]
 800f232:	3001      	adds	r0, #1
 800f234:	4283      	cmp	r3, r0
 800f236:	d004      	beq.n	800f242 <__swbuf_r+0x62>
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	07db      	lsls	r3, r3, #31
 800f23c:	d506      	bpl.n	800f24c <__swbuf_r+0x6c>
 800f23e:	2e0a      	cmp	r6, #10
 800f240:	d104      	bne.n	800f24c <__swbuf_r+0x6c>
 800f242:	4621      	mov	r1, r4
 800f244:	4628      	mov	r0, r5
 800f246:	f7fc ffd3 	bl	800c1f0 <_fflush_r>
 800f24a:	b988      	cbnz	r0, 800f270 <__swbuf_r+0x90>
 800f24c:	4638      	mov	r0, r7
 800f24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f250:	4b0a      	ldr	r3, [pc, #40]	; (800f27c <__swbuf_r+0x9c>)
 800f252:	429c      	cmp	r4, r3
 800f254:	d101      	bne.n	800f25a <__swbuf_r+0x7a>
 800f256:	68ac      	ldr	r4, [r5, #8]
 800f258:	e7cf      	b.n	800f1fa <__swbuf_r+0x1a>
 800f25a:	4b09      	ldr	r3, [pc, #36]	; (800f280 <__swbuf_r+0xa0>)
 800f25c:	429c      	cmp	r4, r3
 800f25e:	bf08      	it	eq
 800f260:	68ec      	ldreq	r4, [r5, #12]
 800f262:	e7ca      	b.n	800f1fa <__swbuf_r+0x1a>
 800f264:	4621      	mov	r1, r4
 800f266:	4628      	mov	r0, r5
 800f268:	f000 f80c 	bl	800f284 <__swsetup_r>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d0cb      	beq.n	800f208 <__swbuf_r+0x28>
 800f270:	f04f 37ff 	mov.w	r7, #4294967295
 800f274:	e7ea      	b.n	800f24c <__swbuf_r+0x6c>
 800f276:	bf00      	nop
 800f278:	080107f4 	.word	0x080107f4
 800f27c:	08010814 	.word	0x08010814
 800f280:	080107d4 	.word	0x080107d4

0800f284 <__swsetup_r>:
 800f284:	4b32      	ldr	r3, [pc, #200]	; (800f350 <__swsetup_r+0xcc>)
 800f286:	b570      	push	{r4, r5, r6, lr}
 800f288:	681d      	ldr	r5, [r3, #0]
 800f28a:	4606      	mov	r6, r0
 800f28c:	460c      	mov	r4, r1
 800f28e:	b125      	cbz	r5, 800f29a <__swsetup_r+0x16>
 800f290:	69ab      	ldr	r3, [r5, #24]
 800f292:	b913      	cbnz	r3, 800f29a <__swsetup_r+0x16>
 800f294:	4628      	mov	r0, r5
 800f296:	f7fd f8d5 	bl	800c444 <__sinit>
 800f29a:	4b2e      	ldr	r3, [pc, #184]	; (800f354 <__swsetup_r+0xd0>)
 800f29c:	429c      	cmp	r4, r3
 800f29e:	d10f      	bne.n	800f2c0 <__swsetup_r+0x3c>
 800f2a0:	686c      	ldr	r4, [r5, #4]
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2a8:	0719      	lsls	r1, r3, #28
 800f2aa:	d42c      	bmi.n	800f306 <__swsetup_r+0x82>
 800f2ac:	06dd      	lsls	r5, r3, #27
 800f2ae:	d411      	bmi.n	800f2d4 <__swsetup_r+0x50>
 800f2b0:	2309      	movs	r3, #9
 800f2b2:	6033      	str	r3, [r6, #0]
 800f2b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f2b8:	81a3      	strh	r3, [r4, #12]
 800f2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f2be:	e03e      	b.n	800f33e <__swsetup_r+0xba>
 800f2c0:	4b25      	ldr	r3, [pc, #148]	; (800f358 <__swsetup_r+0xd4>)
 800f2c2:	429c      	cmp	r4, r3
 800f2c4:	d101      	bne.n	800f2ca <__swsetup_r+0x46>
 800f2c6:	68ac      	ldr	r4, [r5, #8]
 800f2c8:	e7eb      	b.n	800f2a2 <__swsetup_r+0x1e>
 800f2ca:	4b24      	ldr	r3, [pc, #144]	; (800f35c <__swsetup_r+0xd8>)
 800f2cc:	429c      	cmp	r4, r3
 800f2ce:	bf08      	it	eq
 800f2d0:	68ec      	ldreq	r4, [r5, #12]
 800f2d2:	e7e6      	b.n	800f2a2 <__swsetup_r+0x1e>
 800f2d4:	0758      	lsls	r0, r3, #29
 800f2d6:	d512      	bpl.n	800f2fe <__swsetup_r+0x7a>
 800f2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2da:	b141      	cbz	r1, 800f2ee <__swsetup_r+0x6a>
 800f2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2e0:	4299      	cmp	r1, r3
 800f2e2:	d002      	beq.n	800f2ea <__swsetup_r+0x66>
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f7fd fb1d 	bl	800c924 <_free_r>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	6363      	str	r3, [r4, #52]	; 0x34
 800f2ee:	89a3      	ldrh	r3, [r4, #12]
 800f2f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2f4:	81a3      	strh	r3, [r4, #12]
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	6063      	str	r3, [r4, #4]
 800f2fa:	6923      	ldr	r3, [r4, #16]
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f043 0308 	orr.w	r3, r3, #8
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	b94b      	cbnz	r3, 800f31e <__swsetup_r+0x9a>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f314:	d003      	beq.n	800f31e <__swsetup_r+0x9a>
 800f316:	4621      	mov	r1, r4
 800f318:	4630      	mov	r0, r6
 800f31a:	f7fd faad 	bl	800c878 <__smakebuf_r>
 800f31e:	89a0      	ldrh	r0, [r4, #12]
 800f320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f324:	f010 0301 	ands.w	r3, r0, #1
 800f328:	d00a      	beq.n	800f340 <__swsetup_r+0xbc>
 800f32a:	2300      	movs	r3, #0
 800f32c:	60a3      	str	r3, [r4, #8]
 800f32e:	6963      	ldr	r3, [r4, #20]
 800f330:	425b      	negs	r3, r3
 800f332:	61a3      	str	r3, [r4, #24]
 800f334:	6923      	ldr	r3, [r4, #16]
 800f336:	b943      	cbnz	r3, 800f34a <__swsetup_r+0xc6>
 800f338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f33c:	d1ba      	bne.n	800f2b4 <__swsetup_r+0x30>
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	0781      	lsls	r1, r0, #30
 800f342:	bf58      	it	pl
 800f344:	6963      	ldrpl	r3, [r4, #20]
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	e7f4      	b.n	800f334 <__swsetup_r+0xb0>
 800f34a:	2000      	movs	r0, #0
 800f34c:	e7f7      	b.n	800f33e <__swsetup_r+0xba>
 800f34e:	bf00      	nop
 800f350:	20000084 	.word	0x20000084
 800f354:	080107f4 	.word	0x080107f4
 800f358:	08010814 	.word	0x08010814
 800f35c:	080107d4 	.word	0x080107d4

0800f360 <abort>:
 800f360:	b508      	push	{r3, lr}
 800f362:	2006      	movs	r0, #6
 800f364:	f000 f82c 	bl	800f3c0 <raise>
 800f368:	2001      	movs	r0, #1
 800f36a:	f7f6 fb0d 	bl	8005988 <_exit>

0800f36e <_raise_r>:
 800f36e:	291f      	cmp	r1, #31
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4604      	mov	r4, r0
 800f374:	460d      	mov	r5, r1
 800f376:	d904      	bls.n	800f382 <_raise_r+0x14>
 800f378:	2316      	movs	r3, #22
 800f37a:	6003      	str	r3, [r0, #0]
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f384:	b112      	cbz	r2, 800f38c <_raise_r+0x1e>
 800f386:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f38a:	b94b      	cbnz	r3, 800f3a0 <_raise_r+0x32>
 800f38c:	4620      	mov	r0, r4
 800f38e:	f000 f831 	bl	800f3f4 <_getpid_r>
 800f392:	462a      	mov	r2, r5
 800f394:	4601      	mov	r1, r0
 800f396:	4620      	mov	r0, r4
 800f398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f39c:	f000 b818 	b.w	800f3d0 <_kill_r>
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d00a      	beq.n	800f3ba <_raise_r+0x4c>
 800f3a4:	1c59      	adds	r1, r3, #1
 800f3a6:	d103      	bne.n	800f3b0 <_raise_r+0x42>
 800f3a8:	2316      	movs	r3, #22
 800f3aa:	6003      	str	r3, [r0, #0]
 800f3ac:	2001      	movs	r0, #1
 800f3ae:	e7e7      	b.n	800f380 <_raise_r+0x12>
 800f3b0:	2400      	movs	r4, #0
 800f3b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	4798      	blx	r3
 800f3ba:	2000      	movs	r0, #0
 800f3bc:	e7e0      	b.n	800f380 <_raise_r+0x12>
	...

0800f3c0 <raise>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <raise+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f7ff bfd2 	b.w	800f36e <_raise_r>
 800f3ca:	bf00      	nop
 800f3cc:	20000084 	.word	0x20000084

0800f3d0 <_kill_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_kill_r+0x20>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f7f6 fac3 	bl	8005968 <_kill>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	d102      	bne.n	800f3ec <_kill_r+0x1c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	b103      	cbz	r3, 800f3ec <_kill_r+0x1c>
 800f3ea:	6023      	str	r3, [r4, #0]
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	bf00      	nop
 800f3f0:	200008e0 	.word	0x200008e0

0800f3f4 <_getpid_r>:
 800f3f4:	f7f6 bab0 	b.w	8005958 <_getpid>

0800f3f8 <asin>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	ed2d 8b02 	vpush	{d8}
 800f3fe:	ec55 4b10 	vmov	r4, r5, d0
 800f402:	f000 f8c9 	bl	800f598 <__ieee754_asin>
 800f406:	4622      	mov	r2, r4
 800f408:	462b      	mov	r3, r5
 800f40a:	4620      	mov	r0, r4
 800f40c:	4629      	mov	r1, r5
 800f40e:	eeb0 8a40 	vmov.f32	s16, s0
 800f412:	eef0 8a60 	vmov.f32	s17, s1
 800f416:	f7f1 fb91 	bl	8000b3c <__aeabi_dcmpun>
 800f41a:	b9a8      	cbnz	r0, 800f448 <asin+0x50>
 800f41c:	ec45 4b10 	vmov	d0, r4, r5
 800f420:	f001 f8de 	bl	80105e0 <fabs>
 800f424:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <asin+0x60>)
 800f426:	ec51 0b10 	vmov	r0, r1, d0
 800f42a:	2200      	movs	r2, #0
 800f42c:	f7f1 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 800f430:	b150      	cbz	r0, 800f448 <asin+0x50>
 800f432:	f7fc fddd 	bl	800bff0 <__errno>
 800f436:	ecbd 8b02 	vpop	{d8}
 800f43a:	2321      	movs	r3, #33	; 0x21
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f442:	4806      	ldr	r0, [pc, #24]	; (800f45c <asin+0x64>)
 800f444:	f7ff bb7c 	b.w	800eb40 <nan>
 800f448:	eeb0 0a48 	vmov.f32	s0, s16
 800f44c:	eef0 0a68 	vmov.f32	s1, s17
 800f450:	ecbd 8b02 	vpop	{d8}
 800f454:	bd38      	pop	{r3, r4, r5, pc}
 800f456:	bf00      	nop
 800f458:	3ff00000 	.word	0x3ff00000
 800f45c:	08010acf 	.word	0x08010acf

0800f460 <pow>:
 800f460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f462:	ed2d 8b02 	vpush	{d8}
 800f466:	eeb0 8a40 	vmov.f32	s16, s0
 800f46a:	eef0 8a60 	vmov.f32	s17, s1
 800f46e:	ec55 4b11 	vmov	r4, r5, d1
 800f472:	f000 faa5 	bl	800f9c0 <__ieee754_pow>
 800f476:	4622      	mov	r2, r4
 800f478:	462b      	mov	r3, r5
 800f47a:	4620      	mov	r0, r4
 800f47c:	4629      	mov	r1, r5
 800f47e:	ec57 6b10 	vmov	r6, r7, d0
 800f482:	f7f1 fb5b 	bl	8000b3c <__aeabi_dcmpun>
 800f486:	2800      	cmp	r0, #0
 800f488:	d13b      	bne.n	800f502 <pow+0xa2>
 800f48a:	ec51 0b18 	vmov	r0, r1, d8
 800f48e:	2200      	movs	r2, #0
 800f490:	2300      	movs	r3, #0
 800f492:	f7f1 fb21 	bl	8000ad8 <__aeabi_dcmpeq>
 800f496:	b1b8      	cbz	r0, 800f4c8 <pow+0x68>
 800f498:	2200      	movs	r2, #0
 800f49a:	2300      	movs	r3, #0
 800f49c:	4620      	mov	r0, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f7f1 fb1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d146      	bne.n	800f536 <pow+0xd6>
 800f4a8:	ec45 4b10 	vmov	d0, r4, r5
 800f4ac:	f001 f8a1 	bl	80105f2 <finite>
 800f4b0:	b338      	cbz	r0, 800f502 <pow+0xa2>
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	f7f1 fb17 	bl	8000aec <__aeabi_dcmplt>
 800f4be:	b300      	cbz	r0, 800f502 <pow+0xa2>
 800f4c0:	f7fc fd96 	bl	800bff0 <__errno>
 800f4c4:	2322      	movs	r3, #34	; 0x22
 800f4c6:	e01b      	b.n	800f500 <pow+0xa0>
 800f4c8:	ec47 6b10 	vmov	d0, r6, r7
 800f4cc:	f001 f891 	bl	80105f2 <finite>
 800f4d0:	b9e0      	cbnz	r0, 800f50c <pow+0xac>
 800f4d2:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d6:	eef0 0a68 	vmov.f32	s1, s17
 800f4da:	f001 f88a 	bl	80105f2 <finite>
 800f4de:	b1a8      	cbz	r0, 800f50c <pow+0xac>
 800f4e0:	ec45 4b10 	vmov	d0, r4, r5
 800f4e4:	f001 f885 	bl	80105f2 <finite>
 800f4e8:	b180      	cbz	r0, 800f50c <pow+0xac>
 800f4ea:	4632      	mov	r2, r6
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	4639      	mov	r1, r7
 800f4f2:	f7f1 fb23 	bl	8000b3c <__aeabi_dcmpun>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d0e2      	beq.n	800f4c0 <pow+0x60>
 800f4fa:	f7fc fd79 	bl	800bff0 <__errno>
 800f4fe:	2321      	movs	r3, #33	; 0x21
 800f500:	6003      	str	r3, [r0, #0]
 800f502:	ecbd 8b02 	vpop	{d8}
 800f506:	ec47 6b10 	vmov	d0, r6, r7
 800f50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f50c:	2200      	movs	r2, #0
 800f50e:	2300      	movs	r3, #0
 800f510:	4630      	mov	r0, r6
 800f512:	4639      	mov	r1, r7
 800f514:	f7f1 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d0f2      	beq.n	800f502 <pow+0xa2>
 800f51c:	eeb0 0a48 	vmov.f32	s0, s16
 800f520:	eef0 0a68 	vmov.f32	s1, s17
 800f524:	f001 f865 	bl	80105f2 <finite>
 800f528:	2800      	cmp	r0, #0
 800f52a:	d0ea      	beq.n	800f502 <pow+0xa2>
 800f52c:	ec45 4b10 	vmov	d0, r4, r5
 800f530:	f001 f85f 	bl	80105f2 <finite>
 800f534:	e7c3      	b.n	800f4be <pow+0x5e>
 800f536:	4f01      	ldr	r7, [pc, #4]	; (800f53c <pow+0xdc>)
 800f538:	2600      	movs	r6, #0
 800f53a:	e7e2      	b.n	800f502 <pow+0xa2>
 800f53c:	3ff00000 	.word	0x3ff00000

0800f540 <sqrt>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	ed2d 8b02 	vpush	{d8}
 800f546:	ec55 4b10 	vmov	r4, r5, d0
 800f54a:	f000 ff67 	bl	801041c <__ieee754_sqrt>
 800f54e:	4622      	mov	r2, r4
 800f550:	462b      	mov	r3, r5
 800f552:	4620      	mov	r0, r4
 800f554:	4629      	mov	r1, r5
 800f556:	eeb0 8a40 	vmov.f32	s16, s0
 800f55a:	eef0 8a60 	vmov.f32	s17, s1
 800f55e:	f7f1 faed 	bl	8000b3c <__aeabi_dcmpun>
 800f562:	b990      	cbnz	r0, 800f58a <sqrt+0x4a>
 800f564:	2200      	movs	r2, #0
 800f566:	2300      	movs	r3, #0
 800f568:	4620      	mov	r0, r4
 800f56a:	4629      	mov	r1, r5
 800f56c:	f7f1 fabe 	bl	8000aec <__aeabi_dcmplt>
 800f570:	b158      	cbz	r0, 800f58a <sqrt+0x4a>
 800f572:	f7fc fd3d 	bl	800bff0 <__errno>
 800f576:	2321      	movs	r3, #33	; 0x21
 800f578:	6003      	str	r3, [r0, #0]
 800f57a:	2200      	movs	r2, #0
 800f57c:	2300      	movs	r3, #0
 800f57e:	4610      	mov	r0, r2
 800f580:	4619      	mov	r1, r3
 800f582:	f7f1 f96b 	bl	800085c <__aeabi_ddiv>
 800f586:	ec41 0b18 	vmov	d8, r0, r1
 800f58a:	eeb0 0a48 	vmov.f32	s0, s16
 800f58e:	eef0 0a68 	vmov.f32	s1, s17
 800f592:	ecbd 8b02 	vpop	{d8}
 800f596:	bd38      	pop	{r3, r4, r5, pc}

0800f598 <__ieee754_asin>:
 800f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59c:	ed2d 8b04 	vpush	{d8-d9}
 800f5a0:	ec55 4b10 	vmov	r4, r5, d0
 800f5a4:	4bcc      	ldr	r3, [pc, #816]	; (800f8d8 <__ieee754_asin+0x340>)
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f5ac:	4598      	cmp	r8, r3
 800f5ae:	9501      	str	r5, [sp, #4]
 800f5b0:	dd35      	ble.n	800f61e <__ieee754_asin+0x86>
 800f5b2:	ee10 3a10 	vmov	r3, s0
 800f5b6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800f5ba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800f5be:	ea58 0303 	orrs.w	r3, r8, r3
 800f5c2:	d117      	bne.n	800f5f4 <__ieee754_asin+0x5c>
 800f5c4:	a3aa      	add	r3, pc, #680	; (adr r3, 800f870 <__ieee754_asin+0x2d8>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	ee10 0a10 	vmov	r0, s0
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f1 f81a 	bl	8000608 <__aeabi_dmul>
 800f5d4:	a3a8      	add	r3, pc, #672	; (adr r3, 800f878 <__ieee754_asin+0x2e0>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	4606      	mov	r6, r0
 800f5dc:	460f      	mov	r7, r1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 f811 	bl	8000608 <__aeabi_dmul>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	f7f0 fe55 	bl	800029c <__adddf3>
 800f5f2:	e00b      	b.n	800f60c <__ieee754_asin+0x74>
 800f5f4:	ee10 2a10 	vmov	r2, s0
 800f5f8:	462b      	mov	r3, r5
 800f5fa:	ee10 0a10 	vmov	r0, s0
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f0 fe4a 	bl	8000298 <__aeabi_dsub>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	f7f1 f928 	bl	800085c <__aeabi_ddiv>
 800f60c:	4604      	mov	r4, r0
 800f60e:	460d      	mov	r5, r1
 800f610:	ec45 4b10 	vmov	d0, r4, r5
 800f614:	b003      	add	sp, #12
 800f616:	ecbd 8b04 	vpop	{d8-d9}
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	4baf      	ldr	r3, [pc, #700]	; (800f8dc <__ieee754_asin+0x344>)
 800f620:	4598      	cmp	r8, r3
 800f622:	dc11      	bgt.n	800f648 <__ieee754_asin+0xb0>
 800f624:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f628:	f280 80ae 	bge.w	800f788 <__ieee754_asin+0x1f0>
 800f62c:	a394      	add	r3, pc, #592	; (adr r3, 800f880 <__ieee754_asin+0x2e8>)
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	ee10 0a10 	vmov	r0, s0
 800f636:	4629      	mov	r1, r5
 800f638:	f7f0 fe30 	bl	800029c <__adddf3>
 800f63c:	4ba8      	ldr	r3, [pc, #672]	; (800f8e0 <__ieee754_asin+0x348>)
 800f63e:	2200      	movs	r2, #0
 800f640:	f7f1 fa72 	bl	8000b28 <__aeabi_dcmpgt>
 800f644:	2800      	cmp	r0, #0
 800f646:	d1e3      	bne.n	800f610 <__ieee754_asin+0x78>
 800f648:	ec45 4b10 	vmov	d0, r4, r5
 800f64c:	f000 ffc8 	bl	80105e0 <fabs>
 800f650:	49a3      	ldr	r1, [pc, #652]	; (800f8e0 <__ieee754_asin+0x348>)
 800f652:	ec53 2b10 	vmov	r2, r3, d0
 800f656:	2000      	movs	r0, #0
 800f658:	f7f0 fe1e 	bl	8000298 <__aeabi_dsub>
 800f65c:	4ba1      	ldr	r3, [pc, #644]	; (800f8e4 <__ieee754_asin+0x34c>)
 800f65e:	2200      	movs	r2, #0
 800f660:	f7f0 ffd2 	bl	8000608 <__aeabi_dmul>
 800f664:	a388      	add	r3, pc, #544	; (adr r3, 800f888 <__ieee754_asin+0x2f0>)
 800f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66a:	4604      	mov	r4, r0
 800f66c:	460d      	mov	r5, r1
 800f66e:	f7f0 ffcb 	bl	8000608 <__aeabi_dmul>
 800f672:	a387      	add	r3, pc, #540	; (adr r3, 800f890 <__ieee754_asin+0x2f8>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 fe10 	bl	800029c <__adddf3>
 800f67c:	4622      	mov	r2, r4
 800f67e:	462b      	mov	r3, r5
 800f680:	f7f0 ffc2 	bl	8000608 <__aeabi_dmul>
 800f684:	a384      	add	r3, pc, #528	; (adr r3, 800f898 <__ieee754_asin+0x300>)
 800f686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68a:	f7f0 fe05 	bl	8000298 <__aeabi_dsub>
 800f68e:	4622      	mov	r2, r4
 800f690:	462b      	mov	r3, r5
 800f692:	f7f0 ffb9 	bl	8000608 <__aeabi_dmul>
 800f696:	a382      	add	r3, pc, #520	; (adr r3, 800f8a0 <__ieee754_asin+0x308>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f0 fdfe 	bl	800029c <__adddf3>
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	462b      	mov	r3, r5
 800f6a4:	f7f0 ffb0 	bl	8000608 <__aeabi_dmul>
 800f6a8:	a37f      	add	r3, pc, #508	; (adr r3, 800f8a8 <__ieee754_asin+0x310>)
 800f6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ae:	f7f0 fdf3 	bl	8000298 <__aeabi_dsub>
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	462b      	mov	r3, r5
 800f6b6:	f7f0 ffa7 	bl	8000608 <__aeabi_dmul>
 800f6ba:	a37d      	add	r3, pc, #500	; (adr r3, 800f8b0 <__ieee754_asin+0x318>)
 800f6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c0:	f7f0 fdec 	bl	800029c <__adddf3>
 800f6c4:	4622      	mov	r2, r4
 800f6c6:	462b      	mov	r3, r5
 800f6c8:	f7f0 ff9e 	bl	8000608 <__aeabi_dmul>
 800f6cc:	a37a      	add	r3, pc, #488	; (adr r3, 800f8b8 <__ieee754_asin+0x320>)
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	ec41 0b18 	vmov	d8, r0, r1
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	4629      	mov	r1, r5
 800f6da:	f7f0 ff95 	bl	8000608 <__aeabi_dmul>
 800f6de:	a378      	add	r3, pc, #480	; (adr r3, 800f8c0 <__ieee754_asin+0x328>)
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	f7f0 fdd8 	bl	8000298 <__aeabi_dsub>
 800f6e8:	4622      	mov	r2, r4
 800f6ea:	462b      	mov	r3, r5
 800f6ec:	f7f0 ff8c 	bl	8000608 <__aeabi_dmul>
 800f6f0:	a375      	add	r3, pc, #468	; (adr r3, 800f8c8 <__ieee754_asin+0x330>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fdd1 	bl	800029c <__adddf3>
 800f6fa:	4622      	mov	r2, r4
 800f6fc:	462b      	mov	r3, r5
 800f6fe:	f7f0 ff83 	bl	8000608 <__aeabi_dmul>
 800f702:	a373      	add	r3, pc, #460	; (adr r3, 800f8d0 <__ieee754_asin+0x338>)
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	f7f0 fdc6 	bl	8000298 <__aeabi_dsub>
 800f70c:	4622      	mov	r2, r4
 800f70e:	462b      	mov	r3, r5
 800f710:	f7f0 ff7a 	bl	8000608 <__aeabi_dmul>
 800f714:	4b72      	ldr	r3, [pc, #456]	; (800f8e0 <__ieee754_asin+0x348>)
 800f716:	2200      	movs	r2, #0
 800f718:	f7f0 fdc0 	bl	800029c <__adddf3>
 800f71c:	ec45 4b10 	vmov	d0, r4, r5
 800f720:	4606      	mov	r6, r0
 800f722:	460f      	mov	r7, r1
 800f724:	f000 fe7a 	bl	801041c <__ieee754_sqrt>
 800f728:	4b6f      	ldr	r3, [pc, #444]	; (800f8e8 <__ieee754_asin+0x350>)
 800f72a:	4598      	cmp	r8, r3
 800f72c:	ec5b ab10 	vmov	sl, fp, d0
 800f730:	f340 80dc 	ble.w	800f8ec <__ieee754_asin+0x354>
 800f734:	4632      	mov	r2, r6
 800f736:	463b      	mov	r3, r7
 800f738:	ec51 0b18 	vmov	r0, r1, d8
 800f73c:	f7f1 f88e 	bl	800085c <__aeabi_ddiv>
 800f740:	4652      	mov	r2, sl
 800f742:	465b      	mov	r3, fp
 800f744:	f7f0 ff60 	bl	8000608 <__aeabi_dmul>
 800f748:	4652      	mov	r2, sl
 800f74a:	465b      	mov	r3, fp
 800f74c:	f7f0 fda6 	bl	800029c <__adddf3>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	f7f0 fda2 	bl	800029c <__adddf3>
 800f758:	a347      	add	r3, pc, #284	; (adr r3, 800f878 <__ieee754_asin+0x2e0>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 fd9b 	bl	8000298 <__aeabi_dsub>
 800f762:	4602      	mov	r2, r0
 800f764:	460b      	mov	r3, r1
 800f766:	a142      	add	r1, pc, #264	; (adr r1, 800f870 <__ieee754_asin+0x2d8>)
 800f768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f76c:	f7f0 fd94 	bl	8000298 <__aeabi_dsub>
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	bfdc      	itt	le
 800f776:	4602      	movle	r2, r0
 800f778:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800f77c:	4604      	mov	r4, r0
 800f77e:	460d      	mov	r5, r1
 800f780:	bfdc      	itt	le
 800f782:	4614      	movle	r4, r2
 800f784:	461d      	movle	r5, r3
 800f786:	e743      	b.n	800f610 <__ieee754_asin+0x78>
 800f788:	ee10 2a10 	vmov	r2, s0
 800f78c:	ee10 0a10 	vmov	r0, s0
 800f790:	462b      	mov	r3, r5
 800f792:	4629      	mov	r1, r5
 800f794:	f7f0 ff38 	bl	8000608 <__aeabi_dmul>
 800f798:	a33b      	add	r3, pc, #236	; (adr r3, 800f888 <__ieee754_asin+0x2f0>)
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	4606      	mov	r6, r0
 800f7a0:	460f      	mov	r7, r1
 800f7a2:	f7f0 ff31 	bl	8000608 <__aeabi_dmul>
 800f7a6:	a33a      	add	r3, pc, #232	; (adr r3, 800f890 <__ieee754_asin+0x2f8>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	f7f0 fd76 	bl	800029c <__adddf3>
 800f7b0:	4632      	mov	r2, r6
 800f7b2:	463b      	mov	r3, r7
 800f7b4:	f7f0 ff28 	bl	8000608 <__aeabi_dmul>
 800f7b8:	a337      	add	r3, pc, #220	; (adr r3, 800f898 <__ieee754_asin+0x300>)
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	f7f0 fd6b 	bl	8000298 <__aeabi_dsub>
 800f7c2:	4632      	mov	r2, r6
 800f7c4:	463b      	mov	r3, r7
 800f7c6:	f7f0 ff1f 	bl	8000608 <__aeabi_dmul>
 800f7ca:	a335      	add	r3, pc, #212	; (adr r3, 800f8a0 <__ieee754_asin+0x308>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f7f0 fd64 	bl	800029c <__adddf3>
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	f7f0 ff16 	bl	8000608 <__aeabi_dmul>
 800f7dc:	a332      	add	r3, pc, #200	; (adr r3, 800f8a8 <__ieee754_asin+0x310>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	f7f0 fd59 	bl	8000298 <__aeabi_dsub>
 800f7e6:	4632      	mov	r2, r6
 800f7e8:	463b      	mov	r3, r7
 800f7ea:	f7f0 ff0d 	bl	8000608 <__aeabi_dmul>
 800f7ee:	a330      	add	r3, pc, #192	; (adr r3, 800f8b0 <__ieee754_asin+0x318>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	f7f0 fd52 	bl	800029c <__adddf3>
 800f7f8:	4632      	mov	r2, r6
 800f7fa:	463b      	mov	r3, r7
 800f7fc:	f7f0 ff04 	bl	8000608 <__aeabi_dmul>
 800f800:	a32d      	add	r3, pc, #180	; (adr r3, 800f8b8 <__ieee754_asin+0x320>)
 800f802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f806:	4680      	mov	r8, r0
 800f808:	4689      	mov	r9, r1
 800f80a:	4630      	mov	r0, r6
 800f80c:	4639      	mov	r1, r7
 800f80e:	f7f0 fefb 	bl	8000608 <__aeabi_dmul>
 800f812:	a32b      	add	r3, pc, #172	; (adr r3, 800f8c0 <__ieee754_asin+0x328>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f0 fd3e 	bl	8000298 <__aeabi_dsub>
 800f81c:	4632      	mov	r2, r6
 800f81e:	463b      	mov	r3, r7
 800f820:	f7f0 fef2 	bl	8000608 <__aeabi_dmul>
 800f824:	a328      	add	r3, pc, #160	; (adr r3, 800f8c8 <__ieee754_asin+0x330>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd37 	bl	800029c <__adddf3>
 800f82e:	4632      	mov	r2, r6
 800f830:	463b      	mov	r3, r7
 800f832:	f7f0 fee9 	bl	8000608 <__aeabi_dmul>
 800f836:	a326      	add	r3, pc, #152	; (adr r3, 800f8d0 <__ieee754_asin+0x338>)
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f7f0 fd2c 	bl	8000298 <__aeabi_dsub>
 800f840:	4632      	mov	r2, r6
 800f842:	463b      	mov	r3, r7
 800f844:	f7f0 fee0 	bl	8000608 <__aeabi_dmul>
 800f848:	4b25      	ldr	r3, [pc, #148]	; (800f8e0 <__ieee754_asin+0x348>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f7f0 fd26 	bl	800029c <__adddf3>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4640      	mov	r0, r8
 800f856:	4649      	mov	r1, r9
 800f858:	f7f1 f800 	bl	800085c <__aeabi_ddiv>
 800f85c:	4622      	mov	r2, r4
 800f85e:	462b      	mov	r3, r5
 800f860:	f7f0 fed2 	bl	8000608 <__aeabi_dmul>
 800f864:	4602      	mov	r2, r0
 800f866:	460b      	mov	r3, r1
 800f868:	4620      	mov	r0, r4
 800f86a:	4629      	mov	r1, r5
 800f86c:	e6bf      	b.n	800f5ee <__ieee754_asin+0x56>
 800f86e:	bf00      	nop
 800f870:	54442d18 	.word	0x54442d18
 800f874:	3ff921fb 	.word	0x3ff921fb
 800f878:	33145c07 	.word	0x33145c07
 800f87c:	3c91a626 	.word	0x3c91a626
 800f880:	8800759c 	.word	0x8800759c
 800f884:	7e37e43c 	.word	0x7e37e43c
 800f888:	0dfdf709 	.word	0x0dfdf709
 800f88c:	3f023de1 	.word	0x3f023de1
 800f890:	7501b288 	.word	0x7501b288
 800f894:	3f49efe0 	.word	0x3f49efe0
 800f898:	b5688f3b 	.word	0xb5688f3b
 800f89c:	3fa48228 	.word	0x3fa48228
 800f8a0:	0e884455 	.word	0x0e884455
 800f8a4:	3fc9c155 	.word	0x3fc9c155
 800f8a8:	03eb6f7d 	.word	0x03eb6f7d
 800f8ac:	3fd4d612 	.word	0x3fd4d612
 800f8b0:	55555555 	.word	0x55555555
 800f8b4:	3fc55555 	.word	0x3fc55555
 800f8b8:	b12e9282 	.word	0xb12e9282
 800f8bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f8c0:	1b8d0159 	.word	0x1b8d0159
 800f8c4:	3fe6066c 	.word	0x3fe6066c
 800f8c8:	9c598ac8 	.word	0x9c598ac8
 800f8cc:	40002ae5 	.word	0x40002ae5
 800f8d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f8d4:	40033a27 	.word	0x40033a27
 800f8d8:	3fefffff 	.word	0x3fefffff
 800f8dc:	3fdfffff 	.word	0x3fdfffff
 800f8e0:	3ff00000 	.word	0x3ff00000
 800f8e4:	3fe00000 	.word	0x3fe00000
 800f8e8:	3fef3332 	.word	0x3fef3332
 800f8ec:	ee10 2a10 	vmov	r2, s0
 800f8f0:	ee10 0a10 	vmov	r0, s0
 800f8f4:	465b      	mov	r3, fp
 800f8f6:	4659      	mov	r1, fp
 800f8f8:	f7f0 fcd0 	bl	800029c <__adddf3>
 800f8fc:	4632      	mov	r2, r6
 800f8fe:	463b      	mov	r3, r7
 800f900:	ec41 0b19 	vmov	d9, r0, r1
 800f904:	ec51 0b18 	vmov	r0, r1, d8
 800f908:	f7f0 ffa8 	bl	800085c <__aeabi_ddiv>
 800f90c:	4602      	mov	r2, r0
 800f90e:	460b      	mov	r3, r1
 800f910:	ec51 0b19 	vmov	r0, r1, d9
 800f914:	f7f0 fe78 	bl	8000608 <__aeabi_dmul>
 800f918:	f04f 0800 	mov.w	r8, #0
 800f91c:	4606      	mov	r6, r0
 800f91e:	460f      	mov	r7, r1
 800f920:	4642      	mov	r2, r8
 800f922:	465b      	mov	r3, fp
 800f924:	4640      	mov	r0, r8
 800f926:	4659      	mov	r1, fp
 800f928:	f7f0 fe6e 	bl	8000608 <__aeabi_dmul>
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4620      	mov	r0, r4
 800f932:	4629      	mov	r1, r5
 800f934:	f7f0 fcb0 	bl	8000298 <__aeabi_dsub>
 800f938:	4642      	mov	r2, r8
 800f93a:	4604      	mov	r4, r0
 800f93c:	460d      	mov	r5, r1
 800f93e:	465b      	mov	r3, fp
 800f940:	4650      	mov	r0, sl
 800f942:	4659      	mov	r1, fp
 800f944:	f7f0 fcaa 	bl	800029c <__adddf3>
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f0 ff84 	bl	800085c <__aeabi_ddiv>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	f7f0 fca0 	bl	800029c <__adddf3>
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	a113      	add	r1, pc, #76	; (adr r1, 800f9b0 <__ieee754_asin+0x418>)
 800f962:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f966:	f7f0 fc97 	bl	8000298 <__aeabi_dsub>
 800f96a:	4602      	mov	r2, r0
 800f96c:	460b      	mov	r3, r1
 800f96e:	4630      	mov	r0, r6
 800f970:	4639      	mov	r1, r7
 800f972:	f7f0 fc91 	bl	8000298 <__aeabi_dsub>
 800f976:	4642      	mov	r2, r8
 800f978:	4604      	mov	r4, r0
 800f97a:	460d      	mov	r5, r1
 800f97c:	465b      	mov	r3, fp
 800f97e:	4640      	mov	r0, r8
 800f980:	4659      	mov	r1, fp
 800f982:	f7f0 fc8b 	bl	800029c <__adddf3>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	a10b      	add	r1, pc, #44	; (adr r1, 800f9b8 <__ieee754_asin+0x420>)
 800f98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f990:	f7f0 fc82 	bl	8000298 <__aeabi_dsub>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	4620      	mov	r0, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f0 fc7c 	bl	8000298 <__aeabi_dsub>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	a104      	add	r1, pc, #16	; (adr r1, 800f9b8 <__ieee754_asin+0x420>)
 800f9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9aa:	e6df      	b.n	800f76c <__ieee754_asin+0x1d4>
 800f9ac:	f3af 8000 	nop.w
 800f9b0:	33145c07 	.word	0x33145c07
 800f9b4:	3c91a626 	.word	0x3c91a626
 800f9b8:	54442d18 	.word	0x54442d18
 800f9bc:	3fe921fb 	.word	0x3fe921fb

0800f9c0 <__ieee754_pow>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	ed2d 8b06 	vpush	{d8-d10}
 800f9c8:	b089      	sub	sp, #36	; 0x24
 800f9ca:	ed8d 1b00 	vstr	d1, [sp]
 800f9ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f9d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f9d6:	ea58 0102 	orrs.w	r1, r8, r2
 800f9da:	ec57 6b10 	vmov	r6, r7, d0
 800f9de:	d115      	bne.n	800fa0c <__ieee754_pow+0x4c>
 800f9e0:	19b3      	adds	r3, r6, r6
 800f9e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f9e6:	4152      	adcs	r2, r2
 800f9e8:	4299      	cmp	r1, r3
 800f9ea:	4b89      	ldr	r3, [pc, #548]	; (800fc10 <__ieee754_pow+0x250>)
 800f9ec:	4193      	sbcs	r3, r2
 800f9ee:	f080 84d2 	bcs.w	8010396 <__ieee754_pow+0x9d6>
 800f9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	f7f0 fc4f 	bl	800029c <__adddf3>
 800f9fe:	ec41 0b10 	vmov	d0, r0, r1
 800fa02:	b009      	add	sp, #36	; 0x24
 800fa04:	ecbd 8b06 	vpop	{d8-d10}
 800fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0c:	4b81      	ldr	r3, [pc, #516]	; (800fc14 <__ieee754_pow+0x254>)
 800fa0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fa12:	429c      	cmp	r4, r3
 800fa14:	ee10 aa10 	vmov	sl, s0
 800fa18:	463d      	mov	r5, r7
 800fa1a:	dc06      	bgt.n	800fa2a <__ieee754_pow+0x6a>
 800fa1c:	d101      	bne.n	800fa22 <__ieee754_pow+0x62>
 800fa1e:	2e00      	cmp	r6, #0
 800fa20:	d1e7      	bne.n	800f9f2 <__ieee754_pow+0x32>
 800fa22:	4598      	cmp	r8, r3
 800fa24:	dc01      	bgt.n	800fa2a <__ieee754_pow+0x6a>
 800fa26:	d10f      	bne.n	800fa48 <__ieee754_pow+0x88>
 800fa28:	b172      	cbz	r2, 800fa48 <__ieee754_pow+0x88>
 800fa2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fa2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fa32:	ea55 050a 	orrs.w	r5, r5, sl
 800fa36:	d1dc      	bne.n	800f9f2 <__ieee754_pow+0x32>
 800fa38:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fa3c:	18db      	adds	r3, r3, r3
 800fa3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fa42:	4152      	adcs	r2, r2
 800fa44:	429d      	cmp	r5, r3
 800fa46:	e7d0      	b.n	800f9ea <__ieee754_pow+0x2a>
 800fa48:	2d00      	cmp	r5, #0
 800fa4a:	da3b      	bge.n	800fac4 <__ieee754_pow+0x104>
 800fa4c:	4b72      	ldr	r3, [pc, #456]	; (800fc18 <__ieee754_pow+0x258>)
 800fa4e:	4598      	cmp	r8, r3
 800fa50:	dc51      	bgt.n	800faf6 <__ieee754_pow+0x136>
 800fa52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fa56:	4598      	cmp	r8, r3
 800fa58:	f340 84ac 	ble.w	80103b4 <__ieee754_pow+0x9f4>
 800fa5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fa60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fa64:	2b14      	cmp	r3, #20
 800fa66:	dd0f      	ble.n	800fa88 <__ieee754_pow+0xc8>
 800fa68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fa6c:	fa22 f103 	lsr.w	r1, r2, r3
 800fa70:	fa01 f303 	lsl.w	r3, r1, r3
 800fa74:	4293      	cmp	r3, r2
 800fa76:	f040 849d 	bne.w	80103b4 <__ieee754_pow+0x9f4>
 800fa7a:	f001 0101 	and.w	r1, r1, #1
 800fa7e:	f1c1 0302 	rsb	r3, r1, #2
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	b182      	cbz	r2, 800faa8 <__ieee754_pow+0xe8>
 800fa86:	e05f      	b.n	800fb48 <__ieee754_pow+0x188>
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	d15b      	bne.n	800fb44 <__ieee754_pow+0x184>
 800fa8c:	f1c3 0314 	rsb	r3, r3, #20
 800fa90:	fa48 f103 	asr.w	r1, r8, r3
 800fa94:	fa01 f303 	lsl.w	r3, r1, r3
 800fa98:	4543      	cmp	r3, r8
 800fa9a:	f040 8488 	bne.w	80103ae <__ieee754_pow+0x9ee>
 800fa9e:	f001 0101 	and.w	r1, r1, #1
 800faa2:	f1c1 0302 	rsb	r3, r1, #2
 800faa6:	9304      	str	r3, [sp, #16]
 800faa8:	4b5c      	ldr	r3, [pc, #368]	; (800fc1c <__ieee754_pow+0x25c>)
 800faaa:	4598      	cmp	r8, r3
 800faac:	d132      	bne.n	800fb14 <__ieee754_pow+0x154>
 800faae:	f1b9 0f00 	cmp.w	r9, #0
 800fab2:	f280 8478 	bge.w	80103a6 <__ieee754_pow+0x9e6>
 800fab6:	4959      	ldr	r1, [pc, #356]	; (800fc1c <__ieee754_pow+0x25c>)
 800fab8:	4632      	mov	r2, r6
 800faba:	463b      	mov	r3, r7
 800fabc:	2000      	movs	r0, #0
 800fabe:	f7f0 fecd 	bl	800085c <__aeabi_ddiv>
 800fac2:	e79c      	b.n	800f9fe <__ieee754_pow+0x3e>
 800fac4:	2300      	movs	r3, #0
 800fac6:	9304      	str	r3, [sp, #16]
 800fac8:	2a00      	cmp	r2, #0
 800faca:	d13d      	bne.n	800fb48 <__ieee754_pow+0x188>
 800facc:	4b51      	ldr	r3, [pc, #324]	; (800fc14 <__ieee754_pow+0x254>)
 800face:	4598      	cmp	r8, r3
 800fad0:	d1ea      	bne.n	800faa8 <__ieee754_pow+0xe8>
 800fad2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fad6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fada:	ea53 030a 	orrs.w	r3, r3, sl
 800fade:	f000 845a 	beq.w	8010396 <__ieee754_pow+0x9d6>
 800fae2:	4b4f      	ldr	r3, [pc, #316]	; (800fc20 <__ieee754_pow+0x260>)
 800fae4:	429c      	cmp	r4, r3
 800fae6:	dd08      	ble.n	800fafa <__ieee754_pow+0x13a>
 800fae8:	f1b9 0f00 	cmp.w	r9, #0
 800faec:	f2c0 8457 	blt.w	801039e <__ieee754_pow+0x9de>
 800faf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800faf4:	e783      	b.n	800f9fe <__ieee754_pow+0x3e>
 800faf6:	2302      	movs	r3, #2
 800faf8:	e7e5      	b.n	800fac6 <__ieee754_pow+0x106>
 800fafa:	f1b9 0f00 	cmp.w	r9, #0
 800fafe:	f04f 0000 	mov.w	r0, #0
 800fb02:	f04f 0100 	mov.w	r1, #0
 800fb06:	f6bf af7a 	bge.w	800f9fe <__ieee754_pow+0x3e>
 800fb0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fb0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fb12:	e774      	b.n	800f9fe <__ieee754_pow+0x3e>
 800fb14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fb18:	d106      	bne.n	800fb28 <__ieee754_pow+0x168>
 800fb1a:	4632      	mov	r2, r6
 800fb1c:	463b      	mov	r3, r7
 800fb1e:	4630      	mov	r0, r6
 800fb20:	4639      	mov	r1, r7
 800fb22:	f7f0 fd71 	bl	8000608 <__aeabi_dmul>
 800fb26:	e76a      	b.n	800f9fe <__ieee754_pow+0x3e>
 800fb28:	4b3e      	ldr	r3, [pc, #248]	; (800fc24 <__ieee754_pow+0x264>)
 800fb2a:	4599      	cmp	r9, r3
 800fb2c:	d10c      	bne.n	800fb48 <__ieee754_pow+0x188>
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	db0a      	blt.n	800fb48 <__ieee754_pow+0x188>
 800fb32:	ec47 6b10 	vmov	d0, r6, r7
 800fb36:	b009      	add	sp, #36	; 0x24
 800fb38:	ecbd 8b06 	vpop	{d8-d10}
 800fb3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb40:	f000 bc6c 	b.w	801041c <__ieee754_sqrt>
 800fb44:	2300      	movs	r3, #0
 800fb46:	9304      	str	r3, [sp, #16]
 800fb48:	ec47 6b10 	vmov	d0, r6, r7
 800fb4c:	f000 fd48 	bl	80105e0 <fabs>
 800fb50:	ec51 0b10 	vmov	r0, r1, d0
 800fb54:	f1ba 0f00 	cmp.w	sl, #0
 800fb58:	d129      	bne.n	800fbae <__ieee754_pow+0x1ee>
 800fb5a:	b124      	cbz	r4, 800fb66 <__ieee754_pow+0x1a6>
 800fb5c:	4b2f      	ldr	r3, [pc, #188]	; (800fc1c <__ieee754_pow+0x25c>)
 800fb5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d123      	bne.n	800fbae <__ieee754_pow+0x1ee>
 800fb66:	f1b9 0f00 	cmp.w	r9, #0
 800fb6a:	da05      	bge.n	800fb78 <__ieee754_pow+0x1b8>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	2000      	movs	r0, #0
 800fb72:	492a      	ldr	r1, [pc, #168]	; (800fc1c <__ieee754_pow+0x25c>)
 800fb74:	f7f0 fe72 	bl	800085c <__aeabi_ddiv>
 800fb78:	2d00      	cmp	r5, #0
 800fb7a:	f6bf af40 	bge.w	800f9fe <__ieee754_pow+0x3e>
 800fb7e:	9b04      	ldr	r3, [sp, #16]
 800fb80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fb84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb88:	4323      	orrs	r3, r4
 800fb8a:	d108      	bne.n	800fb9e <__ieee754_pow+0x1de>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	460b      	mov	r3, r1
 800fb90:	4610      	mov	r0, r2
 800fb92:	4619      	mov	r1, r3
 800fb94:	f7f0 fb80 	bl	8000298 <__aeabi_dsub>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	e78f      	b.n	800fabe <__ieee754_pow+0xfe>
 800fb9e:	9b04      	ldr	r3, [sp, #16]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	f47f af2c 	bne.w	800f9fe <__ieee754_pow+0x3e>
 800fba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbaa:	4619      	mov	r1, r3
 800fbac:	e727      	b.n	800f9fe <__ieee754_pow+0x3e>
 800fbae:	0feb      	lsrs	r3, r5, #31
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	9306      	str	r3, [sp, #24]
 800fbb4:	9a06      	ldr	r2, [sp, #24]
 800fbb6:	9b04      	ldr	r3, [sp, #16]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	d102      	bne.n	800fbc2 <__ieee754_pow+0x202>
 800fbbc:	4632      	mov	r2, r6
 800fbbe:	463b      	mov	r3, r7
 800fbc0:	e7e6      	b.n	800fb90 <__ieee754_pow+0x1d0>
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <__ieee754_pow+0x268>)
 800fbc4:	4598      	cmp	r8, r3
 800fbc6:	f340 80fb 	ble.w	800fdc0 <__ieee754_pow+0x400>
 800fbca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fbce:	4598      	cmp	r8, r3
 800fbd0:	4b13      	ldr	r3, [pc, #76]	; (800fc20 <__ieee754_pow+0x260>)
 800fbd2:	dd0c      	ble.n	800fbee <__ieee754_pow+0x22e>
 800fbd4:	429c      	cmp	r4, r3
 800fbd6:	dc0f      	bgt.n	800fbf8 <__ieee754_pow+0x238>
 800fbd8:	f1b9 0f00 	cmp.w	r9, #0
 800fbdc:	da0f      	bge.n	800fbfe <__ieee754_pow+0x23e>
 800fbde:	2000      	movs	r0, #0
 800fbe0:	b009      	add	sp, #36	; 0x24
 800fbe2:	ecbd 8b06 	vpop	{d8-d10}
 800fbe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbea:	f000 bcf0 	b.w	80105ce <__math_oflow>
 800fbee:	429c      	cmp	r4, r3
 800fbf0:	dbf2      	blt.n	800fbd8 <__ieee754_pow+0x218>
 800fbf2:	4b0a      	ldr	r3, [pc, #40]	; (800fc1c <__ieee754_pow+0x25c>)
 800fbf4:	429c      	cmp	r4, r3
 800fbf6:	dd19      	ble.n	800fc2c <__ieee754_pow+0x26c>
 800fbf8:	f1b9 0f00 	cmp.w	r9, #0
 800fbfc:	dcef      	bgt.n	800fbde <__ieee754_pow+0x21e>
 800fbfe:	2000      	movs	r0, #0
 800fc00:	b009      	add	sp, #36	; 0x24
 800fc02:	ecbd 8b06 	vpop	{d8-d10}
 800fc06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0a:	f000 bcd7 	b.w	80105bc <__math_uflow>
 800fc0e:	bf00      	nop
 800fc10:	fff00000 	.word	0xfff00000
 800fc14:	7ff00000 	.word	0x7ff00000
 800fc18:	433fffff 	.word	0x433fffff
 800fc1c:	3ff00000 	.word	0x3ff00000
 800fc20:	3fefffff 	.word	0x3fefffff
 800fc24:	3fe00000 	.word	0x3fe00000
 800fc28:	41e00000 	.word	0x41e00000
 800fc2c:	4b60      	ldr	r3, [pc, #384]	; (800fdb0 <__ieee754_pow+0x3f0>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f7f0 fb32 	bl	8000298 <__aeabi_dsub>
 800fc34:	a354      	add	r3, pc, #336	; (adr r3, 800fd88 <__ieee754_pow+0x3c8>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	460d      	mov	r5, r1
 800fc3e:	f7f0 fce3 	bl	8000608 <__aeabi_dmul>
 800fc42:	a353      	add	r3, pc, #332	; (adr r3, 800fd90 <__ieee754_pow+0x3d0>)
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	4606      	mov	r6, r0
 800fc4a:	460f      	mov	r7, r1
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f0 fcda 	bl	8000608 <__aeabi_dmul>
 800fc54:	4b57      	ldr	r3, [pc, #348]	; (800fdb4 <__ieee754_pow+0x3f4>)
 800fc56:	4682      	mov	sl, r0
 800fc58:	468b      	mov	fp, r1
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	4629      	mov	r1, r5
 800fc60:	f7f0 fcd2 	bl	8000608 <__aeabi_dmul>
 800fc64:	4602      	mov	r2, r0
 800fc66:	460b      	mov	r3, r1
 800fc68:	a14b      	add	r1, pc, #300	; (adr r1, 800fd98 <__ieee754_pow+0x3d8>)
 800fc6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc6e:	f7f0 fb13 	bl	8000298 <__aeabi_dsub>
 800fc72:	4622      	mov	r2, r4
 800fc74:	462b      	mov	r3, r5
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	2000      	movs	r0, #0
 800fc80:	494d      	ldr	r1, [pc, #308]	; (800fdb8 <__ieee754_pow+0x3f8>)
 800fc82:	f7f0 fb09 	bl	8000298 <__aeabi_dsub>
 800fc86:	4622      	mov	r2, r4
 800fc88:	4680      	mov	r8, r0
 800fc8a:	4689      	mov	r9, r1
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 fcb9 	bl	8000608 <__aeabi_dmul>
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4640      	mov	r0, r8
 800fc9c:	4649      	mov	r1, r9
 800fc9e:	f7f0 fcb3 	bl	8000608 <__aeabi_dmul>
 800fca2:	a33f      	add	r3, pc, #252	; (adr r3, 800fda0 <__ieee754_pow+0x3e0>)
 800fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca8:	f7f0 fcae 	bl	8000608 <__aeabi_dmul>
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	4650      	mov	r0, sl
 800fcb2:	4659      	mov	r1, fp
 800fcb4:	f7f0 faf0 	bl	8000298 <__aeabi_dsub>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	460b      	mov	r3, r1
 800fcbc:	4680      	mov	r8, r0
 800fcbe:	4689      	mov	r9, r1
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 faea 	bl	800029c <__adddf3>
 800fcc8:	2000      	movs	r0, #0
 800fcca:	4632      	mov	r2, r6
 800fccc:	463b      	mov	r3, r7
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	f7f0 fae1 	bl	8000298 <__aeabi_dsub>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	460b      	mov	r3, r1
 800fcda:	4640      	mov	r0, r8
 800fcdc:	4649      	mov	r1, r9
 800fcde:	f7f0 fadb 	bl	8000298 <__aeabi_dsub>
 800fce2:	9b04      	ldr	r3, [sp, #16]
 800fce4:	9a06      	ldr	r2, [sp, #24]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	4313      	orrs	r3, r2
 800fcea:	4682      	mov	sl, r0
 800fcec:	468b      	mov	fp, r1
 800fcee:	f040 81e7 	bne.w	80100c0 <__ieee754_pow+0x700>
 800fcf2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fda8 <__ieee754_pow+0x3e8>
 800fcf6:	eeb0 8a47 	vmov.f32	s16, s14
 800fcfa:	eef0 8a67 	vmov.f32	s17, s15
 800fcfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd02:	2600      	movs	r6, #0
 800fd04:	4632      	mov	r2, r6
 800fd06:	463b      	mov	r3, r7
 800fd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd0c:	f7f0 fac4 	bl	8000298 <__aeabi_dsub>
 800fd10:	4622      	mov	r2, r4
 800fd12:	462b      	mov	r3, r5
 800fd14:	f7f0 fc78 	bl	8000608 <__aeabi_dmul>
 800fd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd1c:	4680      	mov	r8, r0
 800fd1e:	4689      	mov	r9, r1
 800fd20:	4650      	mov	r0, sl
 800fd22:	4659      	mov	r1, fp
 800fd24:	f7f0 fc70 	bl	8000608 <__aeabi_dmul>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	4640      	mov	r0, r8
 800fd2e:	4649      	mov	r1, r9
 800fd30:	f7f0 fab4 	bl	800029c <__adddf3>
 800fd34:	4632      	mov	r2, r6
 800fd36:	463b      	mov	r3, r7
 800fd38:	4680      	mov	r8, r0
 800fd3a:	4689      	mov	r9, r1
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 fc62 	bl	8000608 <__aeabi_dmul>
 800fd44:	460b      	mov	r3, r1
 800fd46:	4604      	mov	r4, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	4640      	mov	r0, r8
 800fd50:	f7f0 faa4 	bl	800029c <__adddf3>
 800fd54:	4b19      	ldr	r3, [pc, #100]	; (800fdbc <__ieee754_pow+0x3fc>)
 800fd56:	4299      	cmp	r1, r3
 800fd58:	ec45 4b19 	vmov	d9, r4, r5
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	460f      	mov	r7, r1
 800fd60:	468b      	mov	fp, r1
 800fd62:	f340 82f1 	ble.w	8010348 <__ieee754_pow+0x988>
 800fd66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fd6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fd6e:	4303      	orrs	r3, r0
 800fd70:	f000 81e4 	beq.w	801013c <__ieee754_pow+0x77c>
 800fd74:	ec51 0b18 	vmov	r0, r1, d8
 800fd78:	2200      	movs	r2, #0
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f7f0 feb6 	bl	8000aec <__aeabi_dcmplt>
 800fd80:	3800      	subs	r0, #0
 800fd82:	bf18      	it	ne
 800fd84:	2001      	movne	r0, #1
 800fd86:	e72b      	b.n	800fbe0 <__ieee754_pow+0x220>
 800fd88:	60000000 	.word	0x60000000
 800fd8c:	3ff71547 	.word	0x3ff71547
 800fd90:	f85ddf44 	.word	0xf85ddf44
 800fd94:	3e54ae0b 	.word	0x3e54ae0b
 800fd98:	55555555 	.word	0x55555555
 800fd9c:	3fd55555 	.word	0x3fd55555
 800fda0:	652b82fe 	.word	0x652b82fe
 800fda4:	3ff71547 	.word	0x3ff71547
 800fda8:	00000000 	.word	0x00000000
 800fdac:	bff00000 	.word	0xbff00000
 800fdb0:	3ff00000 	.word	0x3ff00000
 800fdb4:	3fd00000 	.word	0x3fd00000
 800fdb8:	3fe00000 	.word	0x3fe00000
 800fdbc:	408fffff 	.word	0x408fffff
 800fdc0:	4bd5      	ldr	r3, [pc, #852]	; (8010118 <__ieee754_pow+0x758>)
 800fdc2:	402b      	ands	r3, r5
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	b92b      	cbnz	r3, 800fdd4 <__ieee754_pow+0x414>
 800fdc8:	4bd4      	ldr	r3, [pc, #848]	; (801011c <__ieee754_pow+0x75c>)
 800fdca:	f7f0 fc1d 	bl	8000608 <__aeabi_dmul>
 800fdce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	1523      	asrs	r3, r4, #20
 800fdd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fdda:	4413      	add	r3, r2
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	4bd0      	ldr	r3, [pc, #832]	; (8010120 <__ieee754_pow+0x760>)
 800fde0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fde4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fde8:	429c      	cmp	r4, r3
 800fdea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fdee:	dd08      	ble.n	800fe02 <__ieee754_pow+0x442>
 800fdf0:	4bcc      	ldr	r3, [pc, #816]	; (8010124 <__ieee754_pow+0x764>)
 800fdf2:	429c      	cmp	r4, r3
 800fdf4:	f340 8162 	ble.w	80100bc <__ieee754_pow+0x6fc>
 800fdf8:	9b05      	ldr	r3, [sp, #20]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	9305      	str	r3, [sp, #20]
 800fdfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fe02:	2400      	movs	r4, #0
 800fe04:	00e3      	lsls	r3, r4, #3
 800fe06:	9307      	str	r3, [sp, #28]
 800fe08:	4bc7      	ldr	r3, [pc, #796]	; (8010128 <__ieee754_pow+0x768>)
 800fe0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe0e:	ed93 7b00 	vldr	d7, [r3]
 800fe12:	4629      	mov	r1, r5
 800fe14:	ec53 2b17 	vmov	r2, r3, d7
 800fe18:	eeb0 9a47 	vmov.f32	s18, s14
 800fe1c:	eef0 9a67 	vmov.f32	s19, s15
 800fe20:	4682      	mov	sl, r0
 800fe22:	f7f0 fa39 	bl	8000298 <__aeabi_dsub>
 800fe26:	4652      	mov	r2, sl
 800fe28:	4606      	mov	r6, r0
 800fe2a:	460f      	mov	r7, r1
 800fe2c:	462b      	mov	r3, r5
 800fe2e:	ec51 0b19 	vmov	r0, r1, d9
 800fe32:	f7f0 fa33 	bl	800029c <__adddf3>
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	49bb      	ldr	r1, [pc, #748]	; (801012c <__ieee754_pow+0x76c>)
 800fe3e:	f7f0 fd0d 	bl	800085c <__aeabi_ddiv>
 800fe42:	ec41 0b1a 	vmov	d10, r0, r1
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	4639      	mov	r1, r7
 800fe4e:	f7f0 fbdb 	bl	8000608 <__aeabi_dmul>
 800fe52:	2300      	movs	r3, #0
 800fe54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe58:	9302      	str	r3, [sp, #8]
 800fe5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fe5e:	46ab      	mov	fp, r5
 800fe60:	106d      	asrs	r5, r5, #1
 800fe62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fe66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fe6a:	ec41 0b18 	vmov	d8, r0, r1
 800fe6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fe72:	2200      	movs	r2, #0
 800fe74:	4640      	mov	r0, r8
 800fe76:	4649      	mov	r1, r9
 800fe78:	4614      	mov	r4, r2
 800fe7a:	461d      	mov	r5, r3
 800fe7c:	f7f0 fbc4 	bl	8000608 <__aeabi_dmul>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4630      	mov	r0, r6
 800fe86:	4639      	mov	r1, r7
 800fe88:	f7f0 fa06 	bl	8000298 <__aeabi_dsub>
 800fe8c:	ec53 2b19 	vmov	r2, r3, d9
 800fe90:	4606      	mov	r6, r0
 800fe92:	460f      	mov	r7, r1
 800fe94:	4620      	mov	r0, r4
 800fe96:	4629      	mov	r1, r5
 800fe98:	f7f0 f9fe 	bl	8000298 <__aeabi_dsub>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	4650      	mov	r0, sl
 800fea2:	4659      	mov	r1, fp
 800fea4:	f7f0 f9f8 	bl	8000298 <__aeabi_dsub>
 800fea8:	4642      	mov	r2, r8
 800feaa:	464b      	mov	r3, r9
 800feac:	f7f0 fbac 	bl	8000608 <__aeabi_dmul>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4630      	mov	r0, r6
 800feb6:	4639      	mov	r1, r7
 800feb8:	f7f0 f9ee 	bl	8000298 <__aeabi_dsub>
 800febc:	ec53 2b1a 	vmov	r2, r3, d10
 800fec0:	f7f0 fba2 	bl	8000608 <__aeabi_dmul>
 800fec4:	ec53 2b18 	vmov	r2, r3, d8
 800fec8:	ec41 0b19 	vmov	d9, r0, r1
 800fecc:	ec51 0b18 	vmov	r0, r1, d8
 800fed0:	f7f0 fb9a 	bl	8000608 <__aeabi_dmul>
 800fed4:	a37c      	add	r3, pc, #496	; (adr r3, 80100c8 <__ieee754_pow+0x708>)
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	f7f0 fb93 	bl	8000608 <__aeabi_dmul>
 800fee2:	a37b      	add	r3, pc, #492	; (adr r3, 80100d0 <__ieee754_pow+0x710>)
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	f7f0 f9d8 	bl	800029c <__adddf3>
 800feec:	4622      	mov	r2, r4
 800feee:	462b      	mov	r3, r5
 800fef0:	f7f0 fb8a 	bl	8000608 <__aeabi_dmul>
 800fef4:	a378      	add	r3, pc, #480	; (adr r3, 80100d8 <__ieee754_pow+0x718>)
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	f7f0 f9cf 	bl	800029c <__adddf3>
 800fefe:	4622      	mov	r2, r4
 800ff00:	462b      	mov	r3, r5
 800ff02:	f7f0 fb81 	bl	8000608 <__aeabi_dmul>
 800ff06:	a376      	add	r3, pc, #472	; (adr r3, 80100e0 <__ieee754_pow+0x720>)
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	f7f0 f9c6 	bl	800029c <__adddf3>
 800ff10:	4622      	mov	r2, r4
 800ff12:	462b      	mov	r3, r5
 800ff14:	f7f0 fb78 	bl	8000608 <__aeabi_dmul>
 800ff18:	a373      	add	r3, pc, #460	; (adr r3, 80100e8 <__ieee754_pow+0x728>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 f9bd 	bl	800029c <__adddf3>
 800ff22:	4622      	mov	r2, r4
 800ff24:	462b      	mov	r3, r5
 800ff26:	f7f0 fb6f 	bl	8000608 <__aeabi_dmul>
 800ff2a:	a371      	add	r3, pc, #452	; (adr r3, 80100f0 <__ieee754_pow+0x730>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	f7f0 f9b4 	bl	800029c <__adddf3>
 800ff34:	4622      	mov	r2, r4
 800ff36:	4606      	mov	r6, r0
 800ff38:	460f      	mov	r7, r1
 800ff3a:	462b      	mov	r3, r5
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	4629      	mov	r1, r5
 800ff40:	f7f0 fb62 	bl	8000608 <__aeabi_dmul>
 800ff44:	4602      	mov	r2, r0
 800ff46:	460b      	mov	r3, r1
 800ff48:	4630      	mov	r0, r6
 800ff4a:	4639      	mov	r1, r7
 800ff4c:	f7f0 fb5c 	bl	8000608 <__aeabi_dmul>
 800ff50:	4642      	mov	r2, r8
 800ff52:	4604      	mov	r4, r0
 800ff54:	460d      	mov	r5, r1
 800ff56:	464b      	mov	r3, r9
 800ff58:	ec51 0b18 	vmov	r0, r1, d8
 800ff5c:	f7f0 f99e 	bl	800029c <__adddf3>
 800ff60:	ec53 2b19 	vmov	r2, r3, d9
 800ff64:	f7f0 fb50 	bl	8000608 <__aeabi_dmul>
 800ff68:	4622      	mov	r2, r4
 800ff6a:	462b      	mov	r3, r5
 800ff6c:	f7f0 f996 	bl	800029c <__adddf3>
 800ff70:	4642      	mov	r2, r8
 800ff72:	4682      	mov	sl, r0
 800ff74:	468b      	mov	fp, r1
 800ff76:	464b      	mov	r3, r9
 800ff78:	4640      	mov	r0, r8
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	f7f0 fb44 	bl	8000608 <__aeabi_dmul>
 800ff80:	4b6b      	ldr	r3, [pc, #428]	; (8010130 <__ieee754_pow+0x770>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	4606      	mov	r6, r0
 800ff86:	460f      	mov	r7, r1
 800ff88:	f7f0 f988 	bl	800029c <__adddf3>
 800ff8c:	4652      	mov	r2, sl
 800ff8e:	465b      	mov	r3, fp
 800ff90:	f7f0 f984 	bl	800029c <__adddf3>
 800ff94:	2000      	movs	r0, #0
 800ff96:	4604      	mov	r4, r0
 800ff98:	460d      	mov	r5, r1
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4640      	mov	r0, r8
 800ffa0:	4649      	mov	r1, r9
 800ffa2:	f7f0 fb31 	bl	8000608 <__aeabi_dmul>
 800ffa6:	4b62      	ldr	r3, [pc, #392]	; (8010130 <__ieee754_pow+0x770>)
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	4689      	mov	r9, r1
 800ffac:	2200      	movs	r2, #0
 800ffae:	4620      	mov	r0, r4
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	f7f0 f971 	bl	8000298 <__aeabi_dsub>
 800ffb6:	4632      	mov	r2, r6
 800ffb8:	463b      	mov	r3, r7
 800ffba:	f7f0 f96d 	bl	8000298 <__aeabi_dsub>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	4650      	mov	r0, sl
 800ffc4:	4659      	mov	r1, fp
 800ffc6:	f7f0 f967 	bl	8000298 <__aeabi_dsub>
 800ffca:	ec53 2b18 	vmov	r2, r3, d8
 800ffce:	f7f0 fb1b 	bl	8000608 <__aeabi_dmul>
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	462b      	mov	r3, r5
 800ffda:	ec51 0b19 	vmov	r0, r1, d9
 800ffde:	f7f0 fb13 	bl	8000608 <__aeabi_dmul>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	4639      	mov	r1, r7
 800ffea:	f7f0 f957 	bl	800029c <__adddf3>
 800ffee:	4606      	mov	r6, r0
 800fff0:	460f      	mov	r7, r1
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	f7f0 f94f 	bl	800029c <__adddf3>
 800fffe:	a33e      	add	r3, pc, #248	; (adr r3, 80100f8 <__ieee754_pow+0x738>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	2000      	movs	r0, #0
 8010006:	4604      	mov	r4, r0
 8010008:	460d      	mov	r5, r1
 801000a:	f7f0 fafd 	bl	8000608 <__aeabi_dmul>
 801000e:	4642      	mov	r2, r8
 8010010:	ec41 0b18 	vmov	d8, r0, r1
 8010014:	464b      	mov	r3, r9
 8010016:	4620      	mov	r0, r4
 8010018:	4629      	mov	r1, r5
 801001a:	f7f0 f93d 	bl	8000298 <__aeabi_dsub>
 801001e:	4602      	mov	r2, r0
 8010020:	460b      	mov	r3, r1
 8010022:	4630      	mov	r0, r6
 8010024:	4639      	mov	r1, r7
 8010026:	f7f0 f937 	bl	8000298 <__aeabi_dsub>
 801002a:	a335      	add	r3, pc, #212	; (adr r3, 8010100 <__ieee754_pow+0x740>)
 801002c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010030:	f7f0 faea 	bl	8000608 <__aeabi_dmul>
 8010034:	a334      	add	r3, pc, #208	; (adr r3, 8010108 <__ieee754_pow+0x748>)
 8010036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	4620      	mov	r0, r4
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 fae1 	bl	8000608 <__aeabi_dmul>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	4630      	mov	r0, r6
 801004c:	4639      	mov	r1, r7
 801004e:	f7f0 f925 	bl	800029c <__adddf3>
 8010052:	9a07      	ldr	r2, [sp, #28]
 8010054:	4b37      	ldr	r3, [pc, #220]	; (8010134 <__ieee754_pow+0x774>)
 8010056:	4413      	add	r3, r2
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	f7f0 f91e 	bl	800029c <__adddf3>
 8010060:	4682      	mov	sl, r0
 8010062:	9805      	ldr	r0, [sp, #20]
 8010064:	468b      	mov	fp, r1
 8010066:	f7f0 fa65 	bl	8000534 <__aeabi_i2d>
 801006a:	9a07      	ldr	r2, [sp, #28]
 801006c:	4b32      	ldr	r3, [pc, #200]	; (8010138 <__ieee754_pow+0x778>)
 801006e:	4413      	add	r3, r2
 8010070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010074:	4606      	mov	r6, r0
 8010076:	460f      	mov	r7, r1
 8010078:	4652      	mov	r2, sl
 801007a:	465b      	mov	r3, fp
 801007c:	ec51 0b18 	vmov	r0, r1, d8
 8010080:	f7f0 f90c 	bl	800029c <__adddf3>
 8010084:	4642      	mov	r2, r8
 8010086:	464b      	mov	r3, r9
 8010088:	f7f0 f908 	bl	800029c <__adddf3>
 801008c:	4632      	mov	r2, r6
 801008e:	463b      	mov	r3, r7
 8010090:	f7f0 f904 	bl	800029c <__adddf3>
 8010094:	2000      	movs	r0, #0
 8010096:	4632      	mov	r2, r6
 8010098:	463b      	mov	r3, r7
 801009a:	4604      	mov	r4, r0
 801009c:	460d      	mov	r5, r1
 801009e:	f7f0 f8fb 	bl	8000298 <__aeabi_dsub>
 80100a2:	4642      	mov	r2, r8
 80100a4:	464b      	mov	r3, r9
 80100a6:	f7f0 f8f7 	bl	8000298 <__aeabi_dsub>
 80100aa:	ec53 2b18 	vmov	r2, r3, d8
 80100ae:	f7f0 f8f3 	bl	8000298 <__aeabi_dsub>
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4650      	mov	r0, sl
 80100b8:	4659      	mov	r1, fp
 80100ba:	e610      	b.n	800fcde <__ieee754_pow+0x31e>
 80100bc:	2401      	movs	r4, #1
 80100be:	e6a1      	b.n	800fe04 <__ieee754_pow+0x444>
 80100c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010110 <__ieee754_pow+0x750>
 80100c4:	e617      	b.n	800fcf6 <__ieee754_pow+0x336>
 80100c6:	bf00      	nop
 80100c8:	4a454eef 	.word	0x4a454eef
 80100cc:	3fca7e28 	.word	0x3fca7e28
 80100d0:	93c9db65 	.word	0x93c9db65
 80100d4:	3fcd864a 	.word	0x3fcd864a
 80100d8:	a91d4101 	.word	0xa91d4101
 80100dc:	3fd17460 	.word	0x3fd17460
 80100e0:	518f264d 	.word	0x518f264d
 80100e4:	3fd55555 	.word	0x3fd55555
 80100e8:	db6fabff 	.word	0xdb6fabff
 80100ec:	3fdb6db6 	.word	0x3fdb6db6
 80100f0:	33333303 	.word	0x33333303
 80100f4:	3fe33333 	.word	0x3fe33333
 80100f8:	e0000000 	.word	0xe0000000
 80100fc:	3feec709 	.word	0x3feec709
 8010100:	dc3a03fd 	.word	0xdc3a03fd
 8010104:	3feec709 	.word	0x3feec709
 8010108:	145b01f5 	.word	0x145b01f5
 801010c:	be3e2fe0 	.word	0xbe3e2fe0
 8010110:	00000000 	.word	0x00000000
 8010114:	3ff00000 	.word	0x3ff00000
 8010118:	7ff00000 	.word	0x7ff00000
 801011c:	43400000 	.word	0x43400000
 8010120:	0003988e 	.word	0x0003988e
 8010124:	000bb679 	.word	0x000bb679
 8010128:	08010c08 	.word	0x08010c08
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	40080000 	.word	0x40080000
 8010134:	08010c28 	.word	0x08010c28
 8010138:	08010c18 	.word	0x08010c18
 801013c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010414 <__ieee754_pow+0xa54>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	4640      	mov	r0, r8
 8010144:	4649      	mov	r1, r9
 8010146:	f7f0 f8a9 	bl	800029c <__adddf3>
 801014a:	4622      	mov	r2, r4
 801014c:	ec41 0b1a 	vmov	d10, r0, r1
 8010150:	462b      	mov	r3, r5
 8010152:	4630      	mov	r0, r6
 8010154:	4639      	mov	r1, r7
 8010156:	f7f0 f89f 	bl	8000298 <__aeabi_dsub>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	ec51 0b1a 	vmov	r0, r1, d10
 8010162:	f7f0 fce1 	bl	8000b28 <__aeabi_dcmpgt>
 8010166:	2800      	cmp	r0, #0
 8010168:	f47f ae04 	bne.w	800fd74 <__ieee754_pow+0x3b4>
 801016c:	4aa4      	ldr	r2, [pc, #656]	; (8010400 <__ieee754_pow+0xa40>)
 801016e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010172:	4293      	cmp	r3, r2
 8010174:	f340 8108 	ble.w	8010388 <__ieee754_pow+0x9c8>
 8010178:	151b      	asrs	r3, r3, #20
 801017a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801017e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010182:	fa4a f303 	asr.w	r3, sl, r3
 8010186:	445b      	add	r3, fp
 8010188:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801018c:	4e9d      	ldr	r6, [pc, #628]	; (8010404 <__ieee754_pow+0xa44>)
 801018e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010192:	4116      	asrs	r6, r2
 8010194:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010198:	2000      	movs	r0, #0
 801019a:	ea23 0106 	bic.w	r1, r3, r6
 801019e:	f1c2 0214 	rsb	r2, r2, #20
 80101a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80101a6:	fa4a fa02 	asr.w	sl, sl, r2
 80101aa:	f1bb 0f00 	cmp.w	fp, #0
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4620      	mov	r0, r4
 80101b4:	4629      	mov	r1, r5
 80101b6:	bfb8      	it	lt
 80101b8:	f1ca 0a00 	rsblt	sl, sl, #0
 80101bc:	f7f0 f86c 	bl	8000298 <__aeabi_dsub>
 80101c0:	ec41 0b19 	vmov	d9, r0, r1
 80101c4:	4642      	mov	r2, r8
 80101c6:	464b      	mov	r3, r9
 80101c8:	ec51 0b19 	vmov	r0, r1, d9
 80101cc:	f7f0 f866 	bl	800029c <__adddf3>
 80101d0:	a37b      	add	r3, pc, #492	; (adr r3, 80103c0 <__ieee754_pow+0xa00>)
 80101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d6:	2000      	movs	r0, #0
 80101d8:	4604      	mov	r4, r0
 80101da:	460d      	mov	r5, r1
 80101dc:	f7f0 fa14 	bl	8000608 <__aeabi_dmul>
 80101e0:	ec53 2b19 	vmov	r2, r3, d9
 80101e4:	4606      	mov	r6, r0
 80101e6:	460f      	mov	r7, r1
 80101e8:	4620      	mov	r0, r4
 80101ea:	4629      	mov	r1, r5
 80101ec:	f7f0 f854 	bl	8000298 <__aeabi_dsub>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4640      	mov	r0, r8
 80101f6:	4649      	mov	r1, r9
 80101f8:	f7f0 f84e 	bl	8000298 <__aeabi_dsub>
 80101fc:	a372      	add	r3, pc, #456	; (adr r3, 80103c8 <__ieee754_pow+0xa08>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 fa01 	bl	8000608 <__aeabi_dmul>
 8010206:	a372      	add	r3, pc, #456	; (adr r3, 80103d0 <__ieee754_pow+0xa10>)
 8010208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020c:	4680      	mov	r8, r0
 801020e:	4689      	mov	r9, r1
 8010210:	4620      	mov	r0, r4
 8010212:	4629      	mov	r1, r5
 8010214:	f7f0 f9f8 	bl	8000608 <__aeabi_dmul>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7f0 f83c 	bl	800029c <__adddf3>
 8010224:	4604      	mov	r4, r0
 8010226:	460d      	mov	r5, r1
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4630      	mov	r0, r6
 801022e:	4639      	mov	r1, r7
 8010230:	f7f0 f834 	bl	800029c <__adddf3>
 8010234:	4632      	mov	r2, r6
 8010236:	463b      	mov	r3, r7
 8010238:	4680      	mov	r8, r0
 801023a:	4689      	mov	r9, r1
 801023c:	f7f0 f82c 	bl	8000298 <__aeabi_dsub>
 8010240:	4602      	mov	r2, r0
 8010242:	460b      	mov	r3, r1
 8010244:	4620      	mov	r0, r4
 8010246:	4629      	mov	r1, r5
 8010248:	f7f0 f826 	bl	8000298 <__aeabi_dsub>
 801024c:	4642      	mov	r2, r8
 801024e:	4606      	mov	r6, r0
 8010250:	460f      	mov	r7, r1
 8010252:	464b      	mov	r3, r9
 8010254:	4640      	mov	r0, r8
 8010256:	4649      	mov	r1, r9
 8010258:	f7f0 f9d6 	bl	8000608 <__aeabi_dmul>
 801025c:	a35e      	add	r3, pc, #376	; (adr r3, 80103d8 <__ieee754_pow+0xa18>)
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010262:	4604      	mov	r4, r0
 8010264:	460d      	mov	r5, r1
 8010266:	f7f0 f9cf 	bl	8000608 <__aeabi_dmul>
 801026a:	a35d      	add	r3, pc, #372	; (adr r3, 80103e0 <__ieee754_pow+0xa20>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 f812 	bl	8000298 <__aeabi_dsub>
 8010274:	4622      	mov	r2, r4
 8010276:	462b      	mov	r3, r5
 8010278:	f7f0 f9c6 	bl	8000608 <__aeabi_dmul>
 801027c:	a35a      	add	r3, pc, #360	; (adr r3, 80103e8 <__ieee754_pow+0xa28>)
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	f7f0 f80b 	bl	800029c <__adddf3>
 8010286:	4622      	mov	r2, r4
 8010288:	462b      	mov	r3, r5
 801028a:	f7f0 f9bd 	bl	8000608 <__aeabi_dmul>
 801028e:	a358      	add	r3, pc, #352	; (adr r3, 80103f0 <__ieee754_pow+0xa30>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	f7f0 f800 	bl	8000298 <__aeabi_dsub>
 8010298:	4622      	mov	r2, r4
 801029a:	462b      	mov	r3, r5
 801029c:	f7f0 f9b4 	bl	8000608 <__aeabi_dmul>
 80102a0:	a355      	add	r3, pc, #340	; (adr r3, 80103f8 <__ieee754_pow+0xa38>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7ef fff9 	bl	800029c <__adddf3>
 80102aa:	4622      	mov	r2, r4
 80102ac:	462b      	mov	r3, r5
 80102ae:	f7f0 f9ab 	bl	8000608 <__aeabi_dmul>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7ef ffed 	bl	8000298 <__aeabi_dsub>
 80102be:	4604      	mov	r4, r0
 80102c0:	460d      	mov	r5, r1
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4640      	mov	r0, r8
 80102c8:	4649      	mov	r1, r9
 80102ca:	f7f0 f99d 	bl	8000608 <__aeabi_dmul>
 80102ce:	2200      	movs	r2, #0
 80102d0:	ec41 0b19 	vmov	d9, r0, r1
 80102d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102d8:	4620      	mov	r0, r4
 80102da:	4629      	mov	r1, r5
 80102dc:	f7ef ffdc 	bl	8000298 <__aeabi_dsub>
 80102e0:	4602      	mov	r2, r0
 80102e2:	460b      	mov	r3, r1
 80102e4:	ec51 0b19 	vmov	r0, r1, d9
 80102e8:	f7f0 fab8 	bl	800085c <__aeabi_ddiv>
 80102ec:	4632      	mov	r2, r6
 80102ee:	4604      	mov	r4, r0
 80102f0:	460d      	mov	r5, r1
 80102f2:	463b      	mov	r3, r7
 80102f4:	4640      	mov	r0, r8
 80102f6:	4649      	mov	r1, r9
 80102f8:	f7f0 f986 	bl	8000608 <__aeabi_dmul>
 80102fc:	4632      	mov	r2, r6
 80102fe:	463b      	mov	r3, r7
 8010300:	f7ef ffcc 	bl	800029c <__adddf3>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4620      	mov	r0, r4
 801030a:	4629      	mov	r1, r5
 801030c:	f7ef ffc4 	bl	8000298 <__aeabi_dsub>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	f7ef ffc0 	bl	8000298 <__aeabi_dsub>
 8010318:	460b      	mov	r3, r1
 801031a:	4602      	mov	r2, r0
 801031c:	493a      	ldr	r1, [pc, #232]	; (8010408 <__ieee754_pow+0xa48>)
 801031e:	2000      	movs	r0, #0
 8010320:	f7ef ffba 	bl	8000298 <__aeabi_dsub>
 8010324:	ec41 0b10 	vmov	d0, r0, r1
 8010328:	ee10 3a90 	vmov	r3, s1
 801032c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010334:	da2b      	bge.n	801038e <__ieee754_pow+0x9ce>
 8010336:	4650      	mov	r0, sl
 8010338:	f000 f966 	bl	8010608 <scalbn>
 801033c:	ec51 0b10 	vmov	r0, r1, d0
 8010340:	ec53 2b18 	vmov	r2, r3, d8
 8010344:	f7ff bbed 	b.w	800fb22 <__ieee754_pow+0x162>
 8010348:	4b30      	ldr	r3, [pc, #192]	; (801040c <__ieee754_pow+0xa4c>)
 801034a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801034e:	429e      	cmp	r6, r3
 8010350:	f77f af0c 	ble.w	801016c <__ieee754_pow+0x7ac>
 8010354:	4b2e      	ldr	r3, [pc, #184]	; (8010410 <__ieee754_pow+0xa50>)
 8010356:	440b      	add	r3, r1
 8010358:	4303      	orrs	r3, r0
 801035a:	d009      	beq.n	8010370 <__ieee754_pow+0x9b0>
 801035c:	ec51 0b18 	vmov	r0, r1, d8
 8010360:	2200      	movs	r2, #0
 8010362:	2300      	movs	r3, #0
 8010364:	f7f0 fbc2 	bl	8000aec <__aeabi_dcmplt>
 8010368:	3800      	subs	r0, #0
 801036a:	bf18      	it	ne
 801036c:	2001      	movne	r0, #1
 801036e:	e447      	b.n	800fc00 <__ieee754_pow+0x240>
 8010370:	4622      	mov	r2, r4
 8010372:	462b      	mov	r3, r5
 8010374:	f7ef ff90 	bl	8000298 <__aeabi_dsub>
 8010378:	4642      	mov	r2, r8
 801037a:	464b      	mov	r3, r9
 801037c:	f7f0 fbca 	bl	8000b14 <__aeabi_dcmpge>
 8010380:	2800      	cmp	r0, #0
 8010382:	f43f aef3 	beq.w	801016c <__ieee754_pow+0x7ac>
 8010386:	e7e9      	b.n	801035c <__ieee754_pow+0x99c>
 8010388:	f04f 0a00 	mov.w	sl, #0
 801038c:	e71a      	b.n	80101c4 <__ieee754_pow+0x804>
 801038e:	ec51 0b10 	vmov	r0, r1, d0
 8010392:	4619      	mov	r1, r3
 8010394:	e7d4      	b.n	8010340 <__ieee754_pow+0x980>
 8010396:	491c      	ldr	r1, [pc, #112]	; (8010408 <__ieee754_pow+0xa48>)
 8010398:	2000      	movs	r0, #0
 801039a:	f7ff bb30 	b.w	800f9fe <__ieee754_pow+0x3e>
 801039e:	2000      	movs	r0, #0
 80103a0:	2100      	movs	r1, #0
 80103a2:	f7ff bb2c 	b.w	800f9fe <__ieee754_pow+0x3e>
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7ff bb28 	b.w	800f9fe <__ieee754_pow+0x3e>
 80103ae:	9204      	str	r2, [sp, #16]
 80103b0:	f7ff bb7a 	b.w	800faa8 <__ieee754_pow+0xe8>
 80103b4:	2300      	movs	r3, #0
 80103b6:	f7ff bb64 	b.w	800fa82 <__ieee754_pow+0xc2>
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w
 80103c0:	00000000 	.word	0x00000000
 80103c4:	3fe62e43 	.word	0x3fe62e43
 80103c8:	fefa39ef 	.word	0xfefa39ef
 80103cc:	3fe62e42 	.word	0x3fe62e42
 80103d0:	0ca86c39 	.word	0x0ca86c39
 80103d4:	be205c61 	.word	0xbe205c61
 80103d8:	72bea4d0 	.word	0x72bea4d0
 80103dc:	3e663769 	.word	0x3e663769
 80103e0:	c5d26bf1 	.word	0xc5d26bf1
 80103e4:	3ebbbd41 	.word	0x3ebbbd41
 80103e8:	af25de2c 	.word	0xaf25de2c
 80103ec:	3f11566a 	.word	0x3f11566a
 80103f0:	16bebd93 	.word	0x16bebd93
 80103f4:	3f66c16c 	.word	0x3f66c16c
 80103f8:	5555553e 	.word	0x5555553e
 80103fc:	3fc55555 	.word	0x3fc55555
 8010400:	3fe00000 	.word	0x3fe00000
 8010404:	000fffff 	.word	0x000fffff
 8010408:	3ff00000 	.word	0x3ff00000
 801040c:	4090cbff 	.word	0x4090cbff
 8010410:	3f6f3400 	.word	0x3f6f3400
 8010414:	652b82fe 	.word	0x652b82fe
 8010418:	3c971547 	.word	0x3c971547

0801041c <__ieee754_sqrt>:
 801041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010420:	ec55 4b10 	vmov	r4, r5, d0
 8010424:	4e55      	ldr	r6, [pc, #340]	; (801057c <__ieee754_sqrt+0x160>)
 8010426:	43ae      	bics	r6, r5
 8010428:	ee10 0a10 	vmov	r0, s0
 801042c:	ee10 3a10 	vmov	r3, s0
 8010430:	462a      	mov	r2, r5
 8010432:	4629      	mov	r1, r5
 8010434:	d110      	bne.n	8010458 <__ieee754_sqrt+0x3c>
 8010436:	ee10 2a10 	vmov	r2, s0
 801043a:	462b      	mov	r3, r5
 801043c:	f7f0 f8e4 	bl	8000608 <__aeabi_dmul>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4620      	mov	r0, r4
 8010446:	4629      	mov	r1, r5
 8010448:	f7ef ff28 	bl	800029c <__adddf3>
 801044c:	4604      	mov	r4, r0
 801044e:	460d      	mov	r5, r1
 8010450:	ec45 4b10 	vmov	d0, r4, r5
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	2d00      	cmp	r5, #0
 801045a:	dc10      	bgt.n	801047e <__ieee754_sqrt+0x62>
 801045c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010460:	4330      	orrs	r0, r6
 8010462:	d0f5      	beq.n	8010450 <__ieee754_sqrt+0x34>
 8010464:	b15d      	cbz	r5, 801047e <__ieee754_sqrt+0x62>
 8010466:	ee10 2a10 	vmov	r2, s0
 801046a:	462b      	mov	r3, r5
 801046c:	ee10 0a10 	vmov	r0, s0
 8010470:	f7ef ff12 	bl	8000298 <__aeabi_dsub>
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	f7f0 f9f0 	bl	800085c <__aeabi_ddiv>
 801047c:	e7e6      	b.n	801044c <__ieee754_sqrt+0x30>
 801047e:	1512      	asrs	r2, r2, #20
 8010480:	d074      	beq.n	801056c <__ieee754_sqrt+0x150>
 8010482:	07d4      	lsls	r4, r2, #31
 8010484:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010488:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010490:	bf5e      	ittt	pl
 8010492:	0fda      	lsrpl	r2, r3, #31
 8010494:	005b      	lslpl	r3, r3, #1
 8010496:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801049a:	2400      	movs	r4, #0
 801049c:	0fda      	lsrs	r2, r3, #31
 801049e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80104a2:	107f      	asrs	r7, r7, #1
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	2516      	movs	r5, #22
 80104a8:	4620      	mov	r0, r4
 80104aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80104ae:	1886      	adds	r6, r0, r2
 80104b0:	428e      	cmp	r6, r1
 80104b2:	bfde      	ittt	le
 80104b4:	1b89      	suble	r1, r1, r6
 80104b6:	18b0      	addle	r0, r6, r2
 80104b8:	18a4      	addle	r4, r4, r2
 80104ba:	0049      	lsls	r1, r1, #1
 80104bc:	3d01      	subs	r5, #1
 80104be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80104c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80104c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104ca:	d1f0      	bne.n	80104ae <__ieee754_sqrt+0x92>
 80104cc:	462a      	mov	r2, r5
 80104ce:	f04f 0e20 	mov.w	lr, #32
 80104d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80104d6:	4281      	cmp	r1, r0
 80104d8:	eb06 0c05 	add.w	ip, r6, r5
 80104dc:	dc02      	bgt.n	80104e4 <__ieee754_sqrt+0xc8>
 80104de:	d113      	bne.n	8010508 <__ieee754_sqrt+0xec>
 80104e0:	459c      	cmp	ip, r3
 80104e2:	d811      	bhi.n	8010508 <__ieee754_sqrt+0xec>
 80104e4:	f1bc 0f00 	cmp.w	ip, #0
 80104e8:	eb0c 0506 	add.w	r5, ip, r6
 80104ec:	da43      	bge.n	8010576 <__ieee754_sqrt+0x15a>
 80104ee:	2d00      	cmp	r5, #0
 80104f0:	db41      	blt.n	8010576 <__ieee754_sqrt+0x15a>
 80104f2:	f100 0801 	add.w	r8, r0, #1
 80104f6:	1a09      	subs	r1, r1, r0
 80104f8:	459c      	cmp	ip, r3
 80104fa:	bf88      	it	hi
 80104fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010500:	eba3 030c 	sub.w	r3, r3, ip
 8010504:	4432      	add	r2, r6
 8010506:	4640      	mov	r0, r8
 8010508:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801050c:	f1be 0e01 	subs.w	lr, lr, #1
 8010510:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010518:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801051c:	d1db      	bne.n	80104d6 <__ieee754_sqrt+0xba>
 801051e:	430b      	orrs	r3, r1
 8010520:	d006      	beq.n	8010530 <__ieee754_sqrt+0x114>
 8010522:	1c50      	adds	r0, r2, #1
 8010524:	bf13      	iteet	ne
 8010526:	3201      	addne	r2, #1
 8010528:	3401      	addeq	r4, #1
 801052a:	4672      	moveq	r2, lr
 801052c:	f022 0201 	bicne.w	r2, r2, #1
 8010530:	1063      	asrs	r3, r4, #1
 8010532:	0852      	lsrs	r2, r2, #1
 8010534:	07e1      	lsls	r1, r4, #31
 8010536:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801053a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801053e:	bf48      	it	mi
 8010540:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010544:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010548:	4614      	mov	r4, r2
 801054a:	e781      	b.n	8010450 <__ieee754_sqrt+0x34>
 801054c:	0ad9      	lsrs	r1, r3, #11
 801054e:	3815      	subs	r0, #21
 8010550:	055b      	lsls	r3, r3, #21
 8010552:	2900      	cmp	r1, #0
 8010554:	d0fa      	beq.n	801054c <__ieee754_sqrt+0x130>
 8010556:	02cd      	lsls	r5, r1, #11
 8010558:	d50a      	bpl.n	8010570 <__ieee754_sqrt+0x154>
 801055a:	f1c2 0420 	rsb	r4, r2, #32
 801055e:	fa23 f404 	lsr.w	r4, r3, r4
 8010562:	1e55      	subs	r5, r2, #1
 8010564:	4093      	lsls	r3, r2
 8010566:	4321      	orrs	r1, r4
 8010568:	1b42      	subs	r2, r0, r5
 801056a:	e78a      	b.n	8010482 <__ieee754_sqrt+0x66>
 801056c:	4610      	mov	r0, r2
 801056e:	e7f0      	b.n	8010552 <__ieee754_sqrt+0x136>
 8010570:	0049      	lsls	r1, r1, #1
 8010572:	3201      	adds	r2, #1
 8010574:	e7ef      	b.n	8010556 <__ieee754_sqrt+0x13a>
 8010576:	4680      	mov	r8, r0
 8010578:	e7bd      	b.n	80104f6 <__ieee754_sqrt+0xda>
 801057a:	bf00      	nop
 801057c:	7ff00000 	.word	0x7ff00000

08010580 <with_errno>:
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	4604      	mov	r4, r0
 8010584:	460d      	mov	r5, r1
 8010586:	4616      	mov	r6, r2
 8010588:	f7fb fd32 	bl	800bff0 <__errno>
 801058c:	4629      	mov	r1, r5
 801058e:	6006      	str	r6, [r0, #0]
 8010590:	4620      	mov	r0, r4
 8010592:	bd70      	pop	{r4, r5, r6, pc}

08010594 <xflow>:
 8010594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010596:	4614      	mov	r4, r2
 8010598:	461d      	mov	r5, r3
 801059a:	b108      	cbz	r0, 80105a0 <xflow+0xc>
 801059c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80105a0:	e9cd 2300 	strd	r2, r3, [sp]
 80105a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a8:	4620      	mov	r0, r4
 80105aa:	4629      	mov	r1, r5
 80105ac:	f7f0 f82c 	bl	8000608 <__aeabi_dmul>
 80105b0:	2222      	movs	r2, #34	; 0x22
 80105b2:	b003      	add	sp, #12
 80105b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105b8:	f7ff bfe2 	b.w	8010580 <with_errno>

080105bc <__math_uflow>:
 80105bc:	b508      	push	{r3, lr}
 80105be:	2200      	movs	r2, #0
 80105c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80105c4:	f7ff ffe6 	bl	8010594 <xflow>
 80105c8:	ec41 0b10 	vmov	d0, r0, r1
 80105cc:	bd08      	pop	{r3, pc}

080105ce <__math_oflow>:
 80105ce:	b508      	push	{r3, lr}
 80105d0:	2200      	movs	r2, #0
 80105d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80105d6:	f7ff ffdd 	bl	8010594 <xflow>
 80105da:	ec41 0b10 	vmov	d0, r0, r1
 80105de:	bd08      	pop	{r3, pc}

080105e0 <fabs>:
 80105e0:	ec51 0b10 	vmov	r0, r1, d0
 80105e4:	ee10 2a10 	vmov	r2, s0
 80105e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80105ec:	ec43 2b10 	vmov	d0, r2, r3
 80105f0:	4770      	bx	lr

080105f2 <finite>:
 80105f2:	b082      	sub	sp, #8
 80105f4:	ed8d 0b00 	vstr	d0, [sp]
 80105f8:	9801      	ldr	r0, [sp, #4]
 80105fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80105fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010602:	0fc0      	lsrs	r0, r0, #31
 8010604:	b002      	add	sp, #8
 8010606:	4770      	bx	lr

08010608 <scalbn>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	ec55 4b10 	vmov	r4, r5, d0
 801060e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010612:	4606      	mov	r6, r0
 8010614:	462b      	mov	r3, r5
 8010616:	b99a      	cbnz	r2, 8010640 <scalbn+0x38>
 8010618:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801061c:	4323      	orrs	r3, r4
 801061e:	d036      	beq.n	801068e <scalbn+0x86>
 8010620:	4b39      	ldr	r3, [pc, #228]	; (8010708 <scalbn+0x100>)
 8010622:	4629      	mov	r1, r5
 8010624:	ee10 0a10 	vmov	r0, s0
 8010628:	2200      	movs	r2, #0
 801062a:	f7ef ffed 	bl	8000608 <__aeabi_dmul>
 801062e:	4b37      	ldr	r3, [pc, #220]	; (801070c <scalbn+0x104>)
 8010630:	429e      	cmp	r6, r3
 8010632:	4604      	mov	r4, r0
 8010634:	460d      	mov	r5, r1
 8010636:	da10      	bge.n	801065a <scalbn+0x52>
 8010638:	a32b      	add	r3, pc, #172	; (adr r3, 80106e8 <scalbn+0xe0>)
 801063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063e:	e03a      	b.n	80106b6 <scalbn+0xae>
 8010640:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010644:	428a      	cmp	r2, r1
 8010646:	d10c      	bne.n	8010662 <scalbn+0x5a>
 8010648:	ee10 2a10 	vmov	r2, s0
 801064c:	4620      	mov	r0, r4
 801064e:	4629      	mov	r1, r5
 8010650:	f7ef fe24 	bl	800029c <__adddf3>
 8010654:	4604      	mov	r4, r0
 8010656:	460d      	mov	r5, r1
 8010658:	e019      	b.n	801068e <scalbn+0x86>
 801065a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801065e:	460b      	mov	r3, r1
 8010660:	3a36      	subs	r2, #54	; 0x36
 8010662:	4432      	add	r2, r6
 8010664:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010668:	428a      	cmp	r2, r1
 801066a:	dd08      	ble.n	801067e <scalbn+0x76>
 801066c:	2d00      	cmp	r5, #0
 801066e:	a120      	add	r1, pc, #128	; (adr r1, 80106f0 <scalbn+0xe8>)
 8010670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010674:	da1c      	bge.n	80106b0 <scalbn+0xa8>
 8010676:	a120      	add	r1, pc, #128	; (adr r1, 80106f8 <scalbn+0xf0>)
 8010678:	e9d1 0100 	ldrd	r0, r1, [r1]
 801067c:	e018      	b.n	80106b0 <scalbn+0xa8>
 801067e:	2a00      	cmp	r2, #0
 8010680:	dd08      	ble.n	8010694 <scalbn+0x8c>
 8010682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801068a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801068e:	ec45 4b10 	vmov	d0, r4, r5
 8010692:	bd70      	pop	{r4, r5, r6, pc}
 8010694:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010698:	da19      	bge.n	80106ce <scalbn+0xc6>
 801069a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801069e:	429e      	cmp	r6, r3
 80106a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80106a4:	dd0a      	ble.n	80106bc <scalbn+0xb4>
 80106a6:	a112      	add	r1, pc, #72	; (adr r1, 80106f0 <scalbn+0xe8>)
 80106a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e2      	bne.n	8010676 <scalbn+0x6e>
 80106b0:	a30f      	add	r3, pc, #60	; (adr r3, 80106f0 <scalbn+0xe8>)
 80106b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b6:	f7ef ffa7 	bl	8000608 <__aeabi_dmul>
 80106ba:	e7cb      	b.n	8010654 <scalbn+0x4c>
 80106bc:	a10a      	add	r1, pc, #40	; (adr r1, 80106e8 <scalbn+0xe0>)
 80106be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d0b8      	beq.n	8010638 <scalbn+0x30>
 80106c6:	a10e      	add	r1, pc, #56	; (adr r1, 8010700 <scalbn+0xf8>)
 80106c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106cc:	e7b4      	b.n	8010638 <scalbn+0x30>
 80106ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80106d2:	3236      	adds	r2, #54	; 0x36
 80106d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80106d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80106dc:	4620      	mov	r0, r4
 80106de:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <scalbn+0x108>)
 80106e0:	2200      	movs	r2, #0
 80106e2:	e7e8      	b.n	80106b6 <scalbn+0xae>
 80106e4:	f3af 8000 	nop.w
 80106e8:	c2f8f359 	.word	0xc2f8f359
 80106ec:	01a56e1f 	.word	0x01a56e1f
 80106f0:	8800759c 	.word	0x8800759c
 80106f4:	7e37e43c 	.word	0x7e37e43c
 80106f8:	8800759c 	.word	0x8800759c
 80106fc:	fe37e43c 	.word	0xfe37e43c
 8010700:	c2f8f359 	.word	0xc2f8f359
 8010704:	81a56e1f 	.word	0x81a56e1f
 8010708:	43500000 	.word	0x43500000
 801070c:	ffff3cb0 	.word	0xffff3cb0
 8010710:	3c900000 	.word	0x3c900000

08010714 <_init>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	bf00      	nop
 8010718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071a:	bc08      	pop	{r3}
 801071c:	469e      	mov	lr, r3
 801071e:	4770      	bx	lr

08010720 <_fini>:
 8010720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010722:	bf00      	nop
 8010724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010726:	bc08      	pop	{r3}
 8010728:	469e      	mov	lr, r3
 801072a:	4770      	bx	lr
