
delta_f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010134  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080102d8  080102d8  000202d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107a0  080107a0  00030240  2**0
                  CONTENTS
  4 .ARM          00000008  080107a0  080107a0  000207a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107a8  080107a8  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107a8  080107a8  000207a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080107ac  080107ac  000207ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  080107b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000240  080109f0  00030240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  080109f0  000308ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132a6  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3f  00000000  00000000  00043516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00046158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00047088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018288  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001448b  00000000  00000000  00060108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a60  00000000  00000000  00074593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105ff3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  00106044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102bc 	.word	0x080102bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	080102bc 	.word	0x080102bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b9aa 	b.w	8000f14 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f83c 	bl	8000c44 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2lz>:
 8000bd8:	b538      	push	{r3, r4, r5, lr}
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4604      	mov	r4, r0
 8000be0:	460d      	mov	r5, r1
 8000be2:	f7ff ff83 	bl	8000aec <__aeabi_dcmplt>
 8000be6:	b928      	cbnz	r0, 8000bf4 <__aeabi_d2lz+0x1c>
 8000be8:	4620      	mov	r0, r4
 8000bea:	4629      	mov	r1, r5
 8000bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf0:	f000 b80a 	b.w	8000c08 <__aeabi_d2ulz>
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bfa:	f000 f805 	bl	8000c08 <__aeabi_d2ulz>
 8000bfe:	4240      	negs	r0, r0
 8000c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2ulz>:
 8000c08:	b5d0      	push	{r4, r6, r7, lr}
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__aeabi_d2ulz+0x34>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4606      	mov	r6, r0
 8000c10:	460f      	mov	r7, r1
 8000c12:	f7ff fcf9 	bl	8000608 <__aeabi_dmul>
 8000c16:	f7ff ffa7 	bl	8000b68 <__aeabi_d2uiz>
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	f7ff fc7a 	bl	8000514 <__aeabi_ui2d>
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <__aeabi_d2ulz+0x38>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f7ff fcf0 	bl	8000608 <__aeabi_dmul>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	4639      	mov	r1, r7
 8000c30:	f7ff fb32 	bl	8000298 <__aeabi_dsub>
 8000c34:	f7ff ff98 	bl	8000b68 <__aeabi_d2uiz>
 8000c38:	4621      	mov	r1, r4
 8000c3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c3c:	3df00000 	.word	0x3df00000
 8000c40:	41f00000 	.word	0x41f00000

08000c44 <__udivmoddi4>:
 8000c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	9d08      	ldr	r5, [sp, #32]
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	468e      	mov	lr, r1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d14d      	bne.n	8000cee <__udivmoddi4+0xaa>
 8000c52:	428a      	cmp	r2, r1
 8000c54:	4694      	mov	ip, r2
 8000c56:	d969      	bls.n	8000d2c <__udivmoddi4+0xe8>
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	b152      	cbz	r2, 8000c74 <__udivmoddi4+0x30>
 8000c5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c62:	f1c2 0120 	rsb	r1, r2, #32
 8000c66:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c72:	4094      	lsls	r4, r2
 8000c74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c78:	0c21      	lsrs	r1, r4, #16
 8000c7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c7e:	fa1f f78c 	uxth.w	r7, ip
 8000c82:	fb08 e316 	mls	r3, r8, r6, lr
 8000c86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8a:	fb06 f107 	mul.w	r1, r6, r7
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x64>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9a:	f080 811f 	bcs.w	8000edc <__udivmoddi4+0x298>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 811c 	bls.w	8000edc <__udivmoddi4+0x298>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 f707 	mul.w	r7, r0, r7
 8000cbc:	42a7      	cmp	r7, r4
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x92>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc8:	f080 810a 	bcs.w	8000ee0 <__udivmoddi4+0x29c>
 8000ccc:	42a7      	cmp	r7, r4
 8000cce:	f240 8107 	bls.w	8000ee0 <__udivmoddi4+0x29c>
 8000cd2:	4464      	add	r4, ip
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cda:	1be4      	subs	r4, r4, r7
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa4>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0xc2>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80ef 	beq.w	8000ed6 <__udivmoddi4+0x292>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x160>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xd4>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80f9 	bhi.w	8000f0a <__udivmoddi4+0x2c6>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	469e      	mov	lr, r3
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0e0      	beq.n	8000ce8 <__udivmoddi4+0xa4>
 8000d26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2a:	e7dd      	b.n	8000ce8 <__udivmoddi4+0xa4>
 8000d2c:	b902      	cbnz	r2, 8000d30 <__udivmoddi4+0xec>
 8000d2e:	deff      	udf	#255	; 0xff
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f040 8092 	bne.w	8000e5e <__udivmoddi4+0x21a>
 8000d3a:	eba1 010c 	sub.w	r1, r1, ip
 8000d3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	2601      	movs	r6, #1
 8000d48:	0c20      	lsrs	r0, r4, #16
 8000d4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	fb0e f003 	mul.w	r0, lr, r3
 8000d5a:	4288      	cmp	r0, r1
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x12c>
 8000d5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x12a>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f200 80cb 	bhi.w	8000f04 <__udivmoddi4+0x2c0>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	1a09      	subs	r1, r1, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d78:	fb07 1110 	mls	r1, r7, r0, r1
 8000d7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d80:	fb0e fe00 	mul.w	lr, lr, r0
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x156>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x154>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f200 80bb 	bhi.w	8000f0e <__udivmoddi4+0x2ca>
 8000d98:	4608      	mov	r0, r1
 8000d9a:	eba4 040e 	sub.w	r4, r4, lr
 8000d9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da2:	e79c      	b.n	8000cde <__udivmoddi4+0x9a>
 8000da4:	f1c6 0720 	rsb	r7, r6, #32
 8000da8:	40b3      	lsls	r3, r6
 8000daa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db2:	fa20 f407 	lsr.w	r4, r0, r7
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	40f9      	lsrs	r1, r7
 8000dbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dca:	0c20      	lsrs	r0, r4, #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	fa02 f206 	lsl.w	r2, r2, r6
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b8>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dec:	f080 8088 	bcs.w	8000f00 <__udivmoddi4+0x2bc>
 8000df0:	4288      	cmp	r0, r1
 8000df2:	f240 8085 	bls.w	8000f00 <__udivmoddi4+0x2bc>
 8000df6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	1a09      	subs	r1, r1, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e04:	fb09 1110 	mls	r1, r9, r0, r1
 8000e08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	458e      	cmp	lr, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1e2>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e1c:	d26c      	bcs.n	8000ef8 <__udivmoddi4+0x2b4>
 8000e1e:	458e      	cmp	lr, r1
 8000e20:	d96a      	bls.n	8000ef8 <__udivmoddi4+0x2b4>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e2e:	eba1 010e 	sub.w	r1, r1, lr
 8000e32:	42a1      	cmp	r1, r4
 8000e34:	46c8      	mov	r8, r9
 8000e36:	46a6      	mov	lr, r4
 8000e38:	d356      	bcc.n	8000ee8 <__udivmoddi4+0x2a4>
 8000e3a:	d053      	beq.n	8000ee4 <__udivmoddi4+0x2a0>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x212>
 8000e3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e42:	eb61 010e 	sbc.w	r1, r1, lr
 8000e46:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e4e:	40f1      	lsrs	r1, r6
 8000e50:	431f      	orrs	r7, r3
 8000e52:	e9c5 7100 	strd	r7, r1, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	f1c2 0320 	rsb	r3, r2, #32
 8000e62:	40d8      	lsrs	r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	4301      	orrs	r1, r0
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e80:	0c0b      	lsrs	r3, r1, #16
 8000e82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e86:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8a:	429e      	cmp	r6, r3
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x260>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9a:	d22f      	bcs.n	8000efc <__udivmoddi4+0x2b8>
 8000e9c:	429e      	cmp	r6, r3
 8000e9e:	d92d      	bls.n	8000efc <__udivmoddi4+0x2b8>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1b9b      	subs	r3, r3, r6
 8000ea6:	b289      	uxth	r1, r1
 8000ea8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eac:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x28a>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec4:	d216      	bcs.n	8000ef4 <__udivmoddi4+0x2b0>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d914      	bls.n	8000ef4 <__udivmoddi4+0x2b0>
 8000eca:	3e02      	subs	r6, #2
 8000ecc:	4461      	add	r1, ip
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed4:	e738      	b.n	8000d48 <__udivmoddi4+0x104>
 8000ed6:	462e      	mov	r6, r5
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e705      	b.n	8000ce8 <__udivmoddi4+0xa4>
 8000edc:	4606      	mov	r6, r0
 8000ede:	e6e3      	b.n	8000ca8 <__udivmoddi4+0x64>
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	e6f8      	b.n	8000cd6 <__udivmoddi4+0x92>
 8000ee4:	454b      	cmp	r3, r9
 8000ee6:	d2a9      	bcs.n	8000e3c <__udivmoddi4+0x1f8>
 8000ee8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef0:	3801      	subs	r0, #1
 8000ef2:	e7a3      	b.n	8000e3c <__udivmoddi4+0x1f8>
 8000ef4:	4646      	mov	r6, r8
 8000ef6:	e7ea      	b.n	8000ece <__udivmoddi4+0x28a>
 8000ef8:	4620      	mov	r0, r4
 8000efa:	e794      	b.n	8000e26 <__udivmoddi4+0x1e2>
 8000efc:	4640      	mov	r0, r8
 8000efe:	e7d1      	b.n	8000ea4 <__udivmoddi4+0x260>
 8000f00:	46d0      	mov	r8, sl
 8000f02:	e77b      	b.n	8000dfc <__udivmoddi4+0x1b8>
 8000f04:	3b02      	subs	r3, #2
 8000f06:	4461      	add	r1, ip
 8000f08:	e732      	b.n	8000d70 <__udivmoddi4+0x12c>
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	e709      	b.n	8000d22 <__udivmoddi4+0xde>
 8000f0e:	4464      	add	r4, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e742      	b.n	8000d9a <__udivmoddi4+0x156>

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <homing>:
#define TIME_OFFSET 1100
double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000f1c:	4bd4      	ldr	r3, [pc, #848]	; (8001270 <homing+0x358>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000f22:	4bd4      	ldr	r3, [pc, #848]	; (8001274 <homing+0x35c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000f28:	4bd3      	ldr	r3, [pc, #844]	; (8001278 <homing+0x360>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000f2e:	4bd3      	ldr	r3, [pc, #844]	; (800127c <homing+0x364>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000f34:	4bd2      	ldr	r3, [pc, #840]	; (8001280 <homing+0x368>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	48d1      	ldr	r0, [pc, #836]	; (8001284 <homing+0x36c>)
 8000f40:	f007 fe4e 	bl	8008be0 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000f44:	2200      	movs	r2, #0
 8000f46:	2102      	movs	r1, #2
 8000f48:	48cf      	ldr	r0, [pc, #828]	; (8001288 <homing+0x370>)
 8000f4a:	f007 fe49 	bl	8008be0 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	48cd      	ldr	r0, [pc, #820]	; (8001288 <homing+0x370>)
 8000f54:	f007 fe44 	bl	8008be0 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f007 fbf8 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f007 fbf5 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000f64:	2008      	movs	r0, #8
 8000f66:	f007 fbf2 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000f6a:	2009      	movs	r0, #9
 8000f6c:	f007 fbef 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000f70:	200a      	movs	r0, #10
 8000f72:	f007 fbec 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000f76:	2017      	movs	r0, #23
 8000f78:	f007 fbe9 	bl	800874e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000f7c:	2028      	movs	r0, #40	; 0x28
 8000f7e:	f007 fbe6 	bl	800874e <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000f82:	2100      	movs	r1, #0
 8000f84:	48c1      	ldr	r0, [pc, #772]	; (800128c <homing+0x374>)
 8000f86:	f008 fe6b 	bl	8009c60 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	48c0      	ldr	r0, [pc, #768]	; (8001290 <homing+0x378>)
 8000f8e:	f008 fe67 	bl	8009c60 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000f92:	2100      	movs	r1, #0
 8000f94:	48bf      	ldr	r0, [pc, #764]	; (8001294 <homing+0x37c>)
 8000f96:	f008 fe63 	bl	8009c60 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm));
 8000f9a:	4bbf      	ldr	r3, [pc, #764]	; (8001298 <homing+0x380>)
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fab8 	bl	8000514 <__aeabi_ui2d>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4bbc      	ldr	r3, [pc, #752]	; (800129c <homing+0x384>)
 8000faa:	f7ff f977 	bl	800029c <__adddf3>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	a1ad      	add	r1, pc, #692	; (adr r1, 8001268 <homing+0x350>)
 8000fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fb8:	f7ff fc50 	bl	800085c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	4bb6      	ldr	r3, [pc, #728]	; (80012a0 <homing+0x388>)
 8000fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4bb5      	ldr	r3, [pc, #724]	; (80012a4 <homing+0x38c>)
 8000fd0:	f7ff fb1a 	bl	8000608 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	49b2      	ldr	r1, [pc, #712]	; (80012a8 <homing+0x390>)
 8000fde:	f7ff fc3d 	bl	800085c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fb0d 	bl	8000608 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	4ba8      	ldr	r3, [pc, #672]	; (800129c <homing+0x384>)
 8000ffc:	f7ff f94c 	bl	8000298 <__aeabi_dsub>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	49a1      	ldr	r1, [pc, #644]	; (800128c <homing+0x374>)
 8001006:	680c      	ldr	r4, [r1, #0]
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdac 	bl	8000b68 <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <homing+0x380>)
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa7b 	bl	8000514 <__aeabi_ui2d>
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b9e      	ldr	r3, [pc, #632]	; (800129c <homing+0x384>)
 8001024:	f7ff f93a 	bl	800029c <__adddf3>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	a18e      	add	r1, pc, #568	; (adr r1, 8001268 <homing+0x350>)
 800102e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001032:	f7ff fc13 	bl	800085c <__aeabi_ddiv>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4614      	mov	r4, r2
 800103c:	461d      	mov	r5, r3
 800103e:	4b98      	ldr	r3, [pc, #608]	; (80012a0 <homing+0x388>)
 8001040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <homing+0x38c>)
 800104a:	f7ff fadd 	bl	8000608 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4994      	ldr	r1, [pc, #592]	; (80012a8 <homing+0x390>)
 8001058:	f7ff fc00 	bl	800085c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff fad0 	bl	8000608 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b89      	ldr	r3, [pc, #548]	; (800129c <homing+0x384>)
 8001076:	f7ff f90f 	bl	8000298 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd71 	bl	8000b68 <__aeabi_d2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	4a80      	ldr	r2, [pc, #512]	; (800128c <homing+0x374>)
 800108a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm));
 800108c:	4b82      	ldr	r3, [pc, #520]	; (8001298 <homing+0x380>)
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa3f 	bl	8000514 <__aeabi_ui2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b80      	ldr	r3, [pc, #512]	; (800129c <homing+0x384>)
 800109c:	f7ff f8fe 	bl	800029c <__adddf3>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	a170      	add	r1, pc, #448	; (adr r1, 8001268 <homing+0x350>)
 80010a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010aa:	f7ff fbd7 	bl	800085c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <homing+0x388>)
 80010b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <homing+0x38c>)
 80010c2:	f7ff faa1 	bl	8000608 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4976      	ldr	r1, [pc, #472]	; (80012a8 <homing+0x390>)
 80010d0:	f7ff fbc4 	bl	800085c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fa94 	bl	8000608 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b6b      	ldr	r3, [pc, #428]	; (800129c <homing+0x384>)
 80010ee:	f7ff f8d3 	bl	8000298 <__aeabi_dsub>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4966      	ldr	r1, [pc, #408]	; (8001290 <homing+0x378>)
 80010f8:	680c      	ldr	r4, [r1, #0]
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd33 	bl	8000b68 <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001106:	4b64      	ldr	r3, [pc, #400]	; (8001298 <homing+0x380>)
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa02 	bl	8000514 <__aeabi_ui2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b61      	ldr	r3, [pc, #388]	; (800129c <homing+0x384>)
 8001116:	f7ff f8c1 	bl	800029c <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	a152      	add	r1, pc, #328	; (adr r1, 8001268 <homing+0x350>)
 8001120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001124:	f7ff fb9a 	bl	800085c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <homing+0x388>)
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b5a      	ldr	r3, [pc, #360]	; (80012a4 <homing+0x38c>)
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4957      	ldr	r1, [pc, #348]	; (80012a8 <homing+0x390>)
 800114a:	f7ff fb87 	bl	800085c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4620      	mov	r0, r4
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff fa57 	bl	8000608 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b4d      	ldr	r3, [pc, #308]	; (800129c <homing+0x384>)
 8001168:	f7ff f896 	bl	8000298 <__aeabi_dsub>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fcf8 	bl	8000b68 <__aeabi_d2uiz>
 8001178:	4603      	mov	r3, r0
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <homing+0x378>)
 800117c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm));
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <homing+0x380>)
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9c6 	bl	8000514 <__aeabi_ui2d>
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <homing+0x384>)
 800118e:	f7ff f885 	bl	800029c <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	a134      	add	r1, pc, #208	; (adr r1, 8001268 <homing+0x350>)
 8001198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800119c:	f7ff fb5e 	bl	800085c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <homing+0x388>)
 80011aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <homing+0x38c>)
 80011b4:	f7ff fa28 	bl	8000608 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	4939      	ldr	r1, [pc, #228]	; (80012a8 <homing+0x390>)
 80011c2:	f7ff fb4b 	bl	800085c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff fa1b 	bl	8000608 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <homing+0x384>)
 80011e0:	f7ff f85a 	bl	8000298 <__aeabi_dsub>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	492a      	ldr	r1, [pc, #168]	; (8001294 <homing+0x37c>)
 80011ea:	680c      	ldr	r4, [r1, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcba 	bl	8000b68 <__aeabi_d2uiz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <homing+0x380>)
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f989 	bl	8000514 <__aeabi_ui2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <homing+0x384>)
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	a115      	add	r1, pc, #84	; (adr r1, 8001268 <homing+0x350>)
 8001212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001216:	f7ff fb21 	bl	800085c <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	461d      	mov	r5, r3
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <homing+0x388>)
 8001224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <homing+0x38c>)
 800122e:	f7ff f9eb 	bl	8000608 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	491b      	ldr	r1, [pc, #108]	; (80012a8 <homing+0x390>)
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f9de 	bl	8000608 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <homing+0x384>)
 800125a:	f7ff f81d 	bl	8000298 <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	e024      	b.n	80012ac <homing+0x394>
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	00000000 	.word	0x00000000
 800126c:	418e8480 	.word	0x418e8480
 8001270:	2000025c 	.word	0x2000025c
 8001274:	2000025d 	.word	0x2000025d
 8001278:	200005d8 	.word	0x200005d8
 800127c:	20000620 	.word	0x20000620
 8001280:	20000668 	.word	0x20000668
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	20000350 	.word	0x20000350
 8001290:	200003e0 	.word	0x200003e0
 8001294:	20000428 	.word	0x20000428
 8001298:	40010000 	.word	0x40010000
 800129c:	3ff00000 	.word	0x3ff00000
 80012a0:	20000000 	.word	0x20000000
 80012a4:	40bf4000 	.word	0x40bf4000
 80012a8:	404e0000 	.word	0x404e0000
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc59 	bl	8000b68 <__aeabi_d2uiz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4ab0      	ldr	r2, [pc, #704]	; (800157c <homing+0x664>)
 80012ba:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <homing+0x668>)
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f927 	bl	8000514 <__aeabi_ui2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ce:	f7ff fac5 	bl	800085c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4caa      	ldr	r4, [pc, #680]	; (8001580 <homing+0x668>)
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc44 	bl	8000b68 <__aeabi_d2uiz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 80012e4:	4ba7      	ldr	r3, [pc, #668]	; (8001584 <homing+0x66c>)
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f913 	bl	8000514 <__aeabi_ui2d>
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	f7ff fab1 	bl	800085c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4ca1      	ldr	r4, [pc, #644]	; (8001584 <homing+0x66c>)
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc30 	bl	8000b68 <__aeabi_d2uiz>
 8001308:	4603      	mov	r3, r0
 800130a:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 800130c:	4b9e      	ldr	r3, [pc, #632]	; (8001588 <homing+0x670>)
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8ff 	bl	8000514 <__aeabi_ui2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131e:	f7ff fa9d 	bl	800085c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4c98      	ldr	r4, [pc, #608]	; (8001588 <homing+0x670>)
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc1c 	bl	8000b68 <__aeabi_d2uiz>
 8001330:	4603      	mov	r3, r0
 8001332:	6363      	str	r3, [r4, #52]	; 0x34


    while(homAprox){
 8001334:	e04b      	b.n	80013ce <homing+0x4b6>

        Start_PWM_MOTOR_1;
 8001336:	2100      	movs	r1, #0
 8001338:	4894      	ldr	r0, [pc, #592]	; (800158c <homing+0x674>)
 800133a:	f008 fbe1 	bl	8009b00 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 800133e:	2100      	movs	r1, #0
 8001340:	4893      	ldr	r0, [pc, #588]	; (8001590 <homing+0x678>)
 8001342:	f008 fbdd 	bl	8009b00 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8001346:	2100      	movs	r1, #0
 8001348:	488c      	ldr	r0, [pc, #560]	; (800157c <homing+0x664>)
 800134a:	f008 fbd9 	bl	8009b00 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800134e:	2110      	movs	r1, #16
 8001350:	4890      	ldr	r0, [pc, #576]	; (8001594 <homing+0x67c>)
 8001352:	f007 fc2d 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00f      	beq.n	800137c <homing+0x464>
 800135c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001360:	488d      	ldr	r0, [pc, #564]	; (8001598 <homing+0x680>)
 8001362:	f007 fc25 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <homing+0x464>
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4889      	ldr	r0, [pc, #548]	; (8001598 <homing+0x680>)
 8001372:	f007 fc1d 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d128      	bne.n	80013ce <homing+0x4b6>
            HAL_Delay(DELAY_FC_SENSOR);
 800137c:	201e      	movs	r0, #30
 800137e:	f007 f899 	bl	80084b4 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001382:	2110      	movs	r1, #16
 8001384:	4883      	ldr	r0, [pc, #524]	; (8001594 <homing+0x67c>)
 8001386:	f007 fc13 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00f      	beq.n	80013b0 <homing+0x498>
 8001390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001394:	4880      	ldr	r0, [pc, #512]	; (8001598 <homing+0x680>)
 8001396:	f007 fc0b 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <homing+0x498>
 80013a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a4:	487c      	ldr	r0, [pc, #496]	; (8001598 <homing+0x680>)
 80013a6:	f007 fc03 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10e      	bne.n	80013ce <homing+0x4b6>

                Stop_PWM_MOTOR_1;
 80013b0:	2100      	movs	r1, #0
 80013b2:	4876      	ldr	r0, [pc, #472]	; (800158c <homing+0x674>)
 80013b4:	f008 fc54 	bl	8009c60 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 80013b8:	2100      	movs	r1, #0
 80013ba:	4875      	ldr	r0, [pc, #468]	; (8001590 <homing+0x678>)
 80013bc:	f008 fc50 	bl	8009c60 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 80013c0:	2100      	movs	r1, #0
 80013c2:	486e      	ldr	r0, [pc, #440]	; (800157c <homing+0x664>)
 80013c4:	f008 fc4c 	bl	8009c60 <HAL_TIM_PWM_Stop>

                homAprox = false;
 80013c8:	4b74      	ldr	r3, [pc, #464]	; (800159c <homing+0x684>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 80013ce:	4b73      	ldr	r3, [pc, #460]	; (800159c <homing+0x684>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1af      	bne.n	8001336 <homing+0x41e>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80013d6:	e14b      	b.n	8001670 <homing+0x758>

        if (ES1s_PRESSED && !motor1.hom) {
 80013d8:	2110      	movs	r1, #16
 80013da:	486e      	ldr	r0, [pc, #440]	; (8001594 <homing+0x67c>)
 80013dc:	f007 fbe8 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d156      	bne.n	8001494 <homing+0x57c>
 80013e6:	4b6e      	ldr	r3, [pc, #440]	; (80015a0 <homing+0x688>)
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d152      	bne.n	8001494 <homing+0x57c>

            Stop_PWM_MOTOR_2;
 80013ee:	2100      	movs	r1, #0
 80013f0:	4867      	ldr	r0, [pc, #412]	; (8001590 <homing+0x678>)
 80013f2:	f008 fc35 	bl	8009c60 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80013f6:	2100      	movs	r1, #0
 80013f8:	4860      	ldr	r0, [pc, #384]	; (800157c <homing+0x664>)
 80013fa:	f008 fc31 	bl	8009c60 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80013fe:	201e      	movs	r0, #30
 8001400:	f007 f858 	bl	80084b4 <HAL_Delay>

            while(ES1s_PRESSED){
 8001404:	e00f      	b.n	8001426 <homing+0x50e>

                negative_Dir_MOTOR_1;
 8001406:	2201      	movs	r2, #1
 8001408:	2101      	movs	r1, #1
 800140a:	4862      	ldr	r0, [pc, #392]	; (8001594 <homing+0x67c>)
 800140c:	f007 fbe8 	bl	8008be0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 8001410:	2000      	movs	r0, #0
 8001412:	f007 f84f 	bl	80084b4 <HAL_Delay>
                Start_PWM_MOTOR_1;
 8001416:	2100      	movs	r1, #0
 8001418:	485c      	ldr	r0, [pc, #368]	; (800158c <homing+0x674>)
 800141a:	f008 fb71 	bl	8009b00 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 800141e:	f240 404c 	movw	r0, #1100	; 0x44c
 8001422:	f007 f847 	bl	80084b4 <HAL_Delay>
            while(ES1s_PRESSED){
 8001426:	2110      	movs	r1, #16
 8001428:	485a      	ldr	r0, [pc, #360]	; (8001594 <homing+0x67c>)
 800142a:	f007 fbc1 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0e8      	beq.n	8001406 <homing+0x4ee>

            }

            Stop_PWM_MOTOR_1;
 8001434:	2100      	movs	r1, #0
 8001436:	4855      	ldr	r0, [pc, #340]	; (800158c <homing+0x674>)
 8001438:	f008 fc12 	bl	8009c60 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <homing+0x688>)
 800143e:	2201      	movs	r2, #1
 8001440:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F1\n", 4, 100);
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	2204      	movs	r2, #4
 8001446:	4957      	ldr	r1, [pc, #348]	; (80015a4 <homing+0x68c>)
 8001448:	4857      	ldr	r0, [pc, #348]	; (80015a8 <homing+0x690>)
 800144a:	f009 fe98 	bl	800b17e <HAL_UART_Transmit>
            HAL_Delay(DELAY_FC_SENSOR);
 800144e:	201e      	movs	r0, #30
 8001450:	f007 f830 	bl	80084b4 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	484f      	ldr	r0, [pc, #316]	; (8001598 <homing+0x680>)
 800145a:	f007 fba9 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <homing+0x55c>
 8001464:	4b51      	ldr	r3, [pc, #324]	; (80015ac <homing+0x694>)
 8001466:	7e1b      	ldrb	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <homing+0x55c>
 800146c:	2100      	movs	r1, #0
 800146e:	4848      	ldr	r0, [pc, #288]	; (8001590 <homing+0x678>)
 8001470:	f008 fb46 	bl	8009b00 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001478:	4847      	ldr	r0, [pc, #284]	; (8001598 <homing+0x680>)
 800147a:	f007 fb99 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <homing+0x57c>
 8001484:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <homing+0x698>)
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <homing+0x57c>
 800148c:	2100      	movs	r1, #0
 800148e:	483b      	ldr	r0, [pc, #236]	; (800157c <homing+0x664>)
 8001490:	f008 fb36 	bl	8009b00 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001498:	483f      	ldr	r0, [pc, #252]	; (8001598 <homing+0x680>)
 800149a:	f007 fb89 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d156      	bne.n	8001552 <homing+0x63a>
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <homing+0x694>)
 80014a6:	7e1b      	ldrb	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d152      	bne.n	8001552 <homing+0x63a>

            Stop_PWM_MOTOR_1;
 80014ac:	2100      	movs	r1, #0
 80014ae:	4837      	ldr	r0, [pc, #220]	; (800158c <homing+0x674>)
 80014b0:	f008 fbd6 	bl	8009c60 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80014b4:	2100      	movs	r1, #0
 80014b6:	4831      	ldr	r0, [pc, #196]	; (800157c <homing+0x664>)
 80014b8:	f008 fbd2 	bl	8009c60 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES2s
 80014bc:	201e      	movs	r0, #30
 80014be:	f006 fff9 	bl	80084b4 <HAL_Delay>

            while(ES2s_PRESSED){
 80014c2:	e00f      	b.n	80014e4 <homing+0x5cc>

                negative_Dir_MOTOR_2;
 80014c4:	2201      	movs	r2, #1
 80014c6:	2102      	movs	r1, #2
 80014c8:	4833      	ldr	r0, [pc, #204]	; (8001598 <homing+0x680>)
 80014ca:	f007 fb89 	bl	8008be0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f006 fff0 	bl	80084b4 <HAL_Delay>
                Start_PWM_MOTOR_2;
 80014d4:	2100      	movs	r1, #0
 80014d6:	482e      	ldr	r0, [pc, #184]	; (8001590 <homing+0x678>)
 80014d8:	f008 fb12 	bl	8009b00 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 80014dc:	f240 404c 	movw	r0, #1100	; 0x44c
 80014e0:	f006 ffe8 	bl	80084b4 <HAL_Delay>
            while(ES2s_PRESSED){
 80014e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e8:	482b      	ldr	r0, [pc, #172]	; (8001598 <homing+0x680>)
 80014ea:	f007 fb61 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0e7      	beq.n	80014c4 <homing+0x5ac>

            }

            Stop_PWM_MOTOR_2;
 80014f4:	2100      	movs	r1, #0
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <homing+0x678>)
 80014f8:	f008 fbb2 	bl	8009c60 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <homing+0x694>)
 80014fe:	2201      	movs	r2, #1
 8001500:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F2\n", 4, 100);
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	2204      	movs	r2, #4
 8001506:	492b      	ldr	r1, [pc, #172]	; (80015b4 <homing+0x69c>)
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <homing+0x690>)
 800150a:	f009 fe38 	bl	800b17e <HAL_UART_Transmit>
            HAL_Delay(DELAY_FC_SENSOR);
 800150e:	201e      	movs	r0, #30
 8001510:	f006 ffd0 	bl	80084b4 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 8001514:	2110      	movs	r1, #16
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <homing+0x67c>)
 8001518:	f007 fb4a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <homing+0x61a>
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <homing+0x688>)
 8001524:	7e1b      	ldrb	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <homing+0x61a>
 800152a:	2100      	movs	r1, #0
 800152c:	4817      	ldr	r0, [pc, #92]	; (800158c <homing+0x674>)
 800152e:	f008 fae7 	bl	8009b00 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <homing+0x680>)
 8001538:	f007 fb3a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <homing+0x63a>
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <homing+0x698>)
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d103      	bne.n	8001552 <homing+0x63a>
 800154a:	2100      	movs	r1, #0
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <homing+0x664>)
 800154e:	f008 fad7 	bl	8009b00 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	4810      	ldr	r0, [pc, #64]	; (8001598 <homing+0x680>)
 8001558:	f007 fb2a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d171      	bne.n	8001646 <homing+0x72e>

            Stop_PWM_MOTOR_1;
 8001562:	2100      	movs	r1, #0
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <homing+0x674>)
 8001566:	f008 fb7b 	bl	8009c60 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <homing+0x678>)
 800156e:	f008 fb77 	bl	8009c60 <HAL_TIM_PWM_Stop>

            HAL_Delay(DELAY_FC_SENSOR);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001572:	201e      	movs	r0, #30
 8001574:	f006 ff9e 	bl	80084b4 <HAL_Delay>

            while(ES3s_PRESSED){
 8001578:	e02e      	b.n	80015d8 <homing+0x6c0>
 800157a:	bf00      	nop
 800157c:	20000428 	.word	0x20000428
 8001580:	40010000 	.word	0x40010000
 8001584:	40000400 	.word	0x40000400
 8001588:	40000800 	.word	0x40000800
 800158c:	20000350 	.word	0x20000350
 8001590:	200003e0 	.word	0x200003e0
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	2000025c 	.word	0x2000025c
 80015a0:	200005d8 	.word	0x200005d8
 80015a4:	080102d8 	.word	0x080102d8
 80015a8:	20000590 	.word	0x20000590
 80015ac:	20000620 	.word	0x20000620
 80015b0:	20000668 	.word	0x20000668
 80015b4:	080102dc 	.word	0x080102dc

                negative_Dir_MOTOR_3;
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	4830      	ldr	r0, [pc, #192]	; (8001680 <homing+0x768>)
 80015be:	f007 fb0f 	bl	8008be0 <HAL_GPIO_WritePin>
                HAL_Delay(DELAY_DIR);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f006 ff76 	bl	80084b4 <HAL_Delay>
                Start_PWM_MOTOR_3;
 80015c8:	2100      	movs	r1, #0
 80015ca:	482e      	ldr	r0, [pc, #184]	; (8001684 <homing+0x76c>)
 80015cc:	f008 fa98 	bl	8009b00 <HAL_TIM_PWM_Start>
                HAL_Delay(TIME_OFFSET);
 80015d0:	f240 404c 	movw	r0, #1100	; 0x44c
 80015d4:	f006 ff6e 	bl	80084b4 <HAL_Delay>
            while(ES3s_PRESSED){
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <homing+0x768>)
 80015de:	f007 fae7 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0e7      	beq.n	80015b8 <homing+0x6a0>
            }

            Stop_PWM_MOTOR_3;
 80015e8:	2100      	movs	r1, #0
 80015ea:	4826      	ldr	r0, [pc, #152]	; (8001684 <homing+0x76c>)
 80015ec:	f008 fb38 	bl	8009c60 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <homing+0x770>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart2,(uint8_t *)"F3\n", 4, 100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	2204      	movs	r2, #4
 80015fa:	4924      	ldr	r1, [pc, #144]	; (800168c <homing+0x774>)
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <homing+0x778>)
 80015fe:	f009 fdbe 	bl	800b17e <HAL_UART_Transmit>
			HAL_Delay(DELAY_FC_SENSOR);
 8001602:	201e      	movs	r0, #30
 8001604:	f006 ff56 	bl	80084b4 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 8001608:	2110      	movs	r1, #16
 800160a:	4822      	ldr	r0, [pc, #136]	; (8001694 <homing+0x77c>)
 800160c:	f007 fad0 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <homing+0x70e>
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <homing+0x780>)
 8001618:	7e1b      	ldrb	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <homing+0x70e>
 800161e:	2100      	movs	r1, #0
 8001620:	481e      	ldr	r0, [pc, #120]	; (800169c <homing+0x784>)
 8001622:	f008 fa6d 	bl	8009b00 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162a:	4815      	ldr	r0, [pc, #84]	; (8001680 <homing+0x768>)
 800162c:	f007 fac0 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <homing+0x72e>
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <homing+0x788>)
 8001638:	7e1b      	ldrb	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <homing+0x72e>
 800163e:	2100      	movs	r1, #0
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <homing+0x78c>)
 8001642:	f008 fa5d 	bl	8009b00 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <homing+0x780>)
 8001648:	7e1b      	ldrb	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d010      	beq.n	8001670 <homing+0x758>
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <homing+0x788>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00c      	beq.n	8001670 <homing+0x758>
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <homing+0x770>)
 8001658:	7e1b      	ldrb	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <homing+0x758>
        	homFin=true;
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <homing+0x790>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart2,(uint8_t *)"FH\n", 4, 100);
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	2204      	movs	r2, #4
 8001668:	4910      	ldr	r1, [pc, #64]	; (80016ac <homing+0x794>)
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <homing+0x778>)
 800166c:	f009 fd87 	bl	800b17e <HAL_UART_Transmit>
    while (!homFin){
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <homing+0x790>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f43f aeaf 	beq.w	80013d8 <homing+0x4c0>
        }
       }


    }
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	40020800 	.word	0x40020800
 8001684:	20000428 	.word	0x20000428
 8001688:	20000668 	.word	0x20000668
 800168c:	080102e0 	.word	0x080102e0
 8001690:	20000590 	.word	0x20000590
 8001694:	40020400 	.word	0x40020400
 8001698:	200005d8 	.word	0x200005d8
 800169c:	20000350 	.word	0x20000350
 80016a0:	20000620 	.word	0x20000620
 80016a4:	200003e0 	.word	0x200003e0
 80016a8:	200006ba 	.word	0x200006ba
 80016ac:	080102e4 	.word	0x080102e4

080016b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
}
 80016b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <__NVIC_SystemReset+0x24>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016c2:	4904      	ldr	r1, [pc, #16]	; (80016d4 <__NVIC_SystemReset+0x24>)
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_SystemReset+0x28>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016ca:	f3bf 8f4f 	dsb	sy
}
 80016ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <__NVIC_SystemReset+0x20>
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	05fa0004 	.word	0x05fa0004

080016dc <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80016e2:	4b94      	ldr	r3, [pc, #592]	; (8001934 <interpretaComando+0x258>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b48      	subs	r3, #72	; 0x48
 80016e8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ea:	f200 816f 	bhi.w	80019cc <interpretaComando+0x2f0>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <interpretaComando+0x18>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	080017a1 	.word	0x080017a1
 80016f8:	080019cd 	.word	0x080019cd
 80016fc:	080019cd 	.word	0x080019cd
 8001700:	080019cd 	.word	0x080019cd
 8001704:	080019cd 	.word	0x080019cd
 8001708:	080019cd 	.word	0x080019cd
 800170c:	080019cd 	.word	0x080019cd
 8001710:	080019cd 	.word	0x080019cd
 8001714:	080017a9 	.word	0x080017a9
 8001718:	080019cd 	.word	0x080019cd
 800171c:	080019bd 	.word	0x080019bd
 8001720:	080019cd 	.word	0x080019cd
 8001724:	080019cd 	.word	0x080019cd
 8001728:	080019cd 	.word	0x080019cd
 800172c:	080019cd 	.word	0x080019cd
 8001730:	080019cd 	.word	0x080019cd
 8001734:	080019cd 	.word	0x080019cd
 8001738:	080019cd 	.word	0x080019cd
 800173c:	080019cd 	.word	0x080019cd
 8001740:	080019cd 	.word	0x080019cd
 8001744:	080019cd 	.word	0x080019cd
 8001748:	080019cd 	.word	0x080019cd
 800174c:	080019cd 	.word	0x080019cd
 8001750:	080019cd 	.word	0x080019cd
 8001754:	080019cd 	.word	0x080019cd
 8001758:	080019cd 	.word	0x080019cd
 800175c:	080019cd 	.word	0x080019cd
 8001760:	080019cd 	.word	0x080019cd
 8001764:	080019cd 	.word	0x080019cd
 8001768:	080019cd 	.word	0x080019cd
 800176c:	080019cd 	.word	0x080019cd
 8001770:	080019cd 	.word	0x080019cd
 8001774:	080017a1 	.word	0x080017a1
 8001778:	080019cd 	.word	0x080019cd
 800177c:	080019cd 	.word	0x080019cd
 8001780:	080019cd 	.word	0x080019cd
 8001784:	080019cd 	.word	0x080019cd
 8001788:	080019cd 	.word	0x080019cd
 800178c:	080019cd 	.word	0x080019cd
 8001790:	080019cd 	.word	0x080019cd
 8001794:	080017a9 	.word	0x080017a9
 8001798:	080019cd 	.word	0x080019cd
 800179c:	080019bd 	.word	0x080019bd


	case 'H':
	case 'h':
		state = HOME;
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <interpretaComando+0x25c>)
 80017a2:	2203      	movs	r2, #3
 80017a4:	701a      	strb	r2, [r3, #0]
	break;
 80017a6:	e112      	b.n	80019ce <interpretaComando+0x2f2>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 80017a8:	4b64      	ldr	r3, [pc, #400]	; (800193c <interpretaComando+0x260>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
		j = 0;
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <interpretaComando+0x264>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 80017b4:	e0f3      	b.n	800199e <interpretaComando+0x2c2>
			if(rx_buffer[i] == 'x'){
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <interpretaComando+0x260>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <interpretaComando+0x258>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	2b78      	cmp	r3, #120	; 0x78
 80017c0:	d13d      	bne.n	800183e <interpretaComando+0x162>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80017c2:	e012      	b.n	80017ea <interpretaComando+0x10e>
					auxString[j] = rx_buffer[i+1];
 80017c4:	4b5d      	ldr	r3, [pc, #372]	; (800193c <interpretaComando+0x260>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <interpretaComando+0x264>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4959      	ldr	r1, [pc, #356]	; (8001934 <interpretaComando+0x258>)
 80017d0:	5c89      	ldrb	r1, [r1, r2]
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <interpretaComando+0x268>)
 80017d4:	54d1      	strb	r1, [r2, r3]
					j++;
 80017d6:	4b5a      	ldr	r3, [pc, #360]	; (8001940 <interpretaComando+0x264>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	4a58      	ldr	r2, [pc, #352]	; (8001940 <interpretaComando+0x264>)
 80017de:	6013      	str	r3, [r2, #0]
					i++;
 80017e0:	4b56      	ldr	r3, [pc, #344]	; (800193c <interpretaComando+0x260>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a55      	ldr	r2, [pc, #340]	; (800193c <interpretaComando+0x260>)
 80017e8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <interpretaComando+0x260>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <interpretaComando+0x258>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d1e5      	bne.n	80017c4 <interpretaComando+0xe8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4852      	ldr	r0, [pc, #328]	; (8001944 <interpretaComando+0x268>)
 80017fc:	f00b fb36 	bl	800ce6c <strtod>
 8001800:	eeb0 7a40 	vmov.f32	s14, s0
 8001804:	eef0 7a60 	vmov.f32	s15, s1
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <interpretaComando+0x26c>)
 800180a:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e007      	b.n	8001824 <interpretaComando+0x148>
					auxString[k] = 0;
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <interpretaComando+0x268>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	ddf4      	ble.n	8001814 <interpretaComando+0x138>
				}
				j=0;
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <interpretaComando+0x264>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *)"Px_ok\n", 7, 100);
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	2207      	movs	r2, #7
 8001834:	4945      	ldr	r1, [pc, #276]	; (800194c <interpretaComando+0x270>)
 8001836:	4846      	ldr	r0, [pc, #280]	; (8001950 <interpretaComando+0x274>)
 8001838:	f009 fca1 	bl	800b17e <HAL_UART_Transmit>
 800183c:	e0aa      	b.n	8001994 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'y'){
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <interpretaComando+0x260>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <interpretaComando+0x258>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	2b79      	cmp	r3, #121	; 0x79
 8001848:	d13d      	bne.n	80018c6 <interpretaComando+0x1ea>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800184a:	e012      	b.n	8001872 <interpretaComando+0x196>
					auxString[j] = rx_buffer[i+1];
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <interpretaComando+0x260>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <interpretaComando+0x264>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4937      	ldr	r1, [pc, #220]	; (8001934 <interpretaComando+0x258>)
 8001858:	5c89      	ldrb	r1, [r1, r2]
 800185a:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <interpretaComando+0x268>)
 800185c:	54d1      	strb	r1, [r2, r3]
					j++;
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <interpretaComando+0x264>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a36      	ldr	r2, [pc, #216]	; (8001940 <interpretaComando+0x264>)
 8001866:	6013      	str	r3, [r2, #0]
					i++;
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <interpretaComando+0x260>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a33      	ldr	r2, [pc, #204]	; (800193c <interpretaComando+0x260>)
 8001870:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <interpretaComando+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <interpretaComando+0x258>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	2b20      	cmp	r3, #32
 800187e:	d1e5      	bne.n	800184c <interpretaComando+0x170>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001880:	2100      	movs	r1, #0
 8001882:	4830      	ldr	r0, [pc, #192]	; (8001944 <interpretaComando+0x268>)
 8001884:	f00b faf2 	bl	800ce6c <strtod>
 8001888:	eeb0 7a40 	vmov.f32	s14, s0
 800188c:	eef0 7a60 	vmov.f32	s15, s1
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <interpretaComando+0x26c>)
 8001892:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e007      	b.n	80018ac <interpretaComando+0x1d0>
					auxString[k] = 0;
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <interpretaComando+0x268>)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4413      	add	r3, r2
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	ddf4      	ble.n	800189c <interpretaComando+0x1c0>
				}
				j=0;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <interpretaComando+0x264>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Py_ok\n", 7, 100);
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	2207      	movs	r2, #7
 80018bc:	4925      	ldr	r1, [pc, #148]	; (8001954 <interpretaComando+0x278>)
 80018be:	4824      	ldr	r0, [pc, #144]	; (8001950 <interpretaComando+0x274>)
 80018c0:	f009 fc5d 	bl	800b17e <HAL_UART_Transmit>
 80018c4:	e066      	b.n	8001994 <interpretaComando+0x2b8>
			}
			else if(rx_buffer[i] == 'z'){
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <interpretaComando+0x260>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <interpretaComando+0x258>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	2b7a      	cmp	r3, #122	; 0x7a
 80018d0:	d160      	bne.n	8001994 <interpretaComando+0x2b8>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018d2:	e012      	b.n	80018fa <interpretaComando+0x21e>
					auxString[j] = rx_buffer[i+1];
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <interpretaComando+0x260>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <interpretaComando+0x264>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4915      	ldr	r1, [pc, #84]	; (8001934 <interpretaComando+0x258>)
 80018e0:	5c89      	ldrb	r1, [r1, r2]
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <interpretaComando+0x268>)
 80018e4:	54d1      	strb	r1, [r2, r3]
					j++;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <interpretaComando+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <interpretaComando+0x264>)
 80018ee:	6013      	str	r3, [r2, #0]
					i++;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <interpretaComando+0x260>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <interpretaComando+0x260>)
 80018f8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <interpretaComando+0x260>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <interpretaComando+0x258>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	2b0a      	cmp	r3, #10
 8001906:	d006      	beq.n	8001916 <interpretaComando+0x23a>
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <interpretaComando+0x260>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <interpretaComando+0x258>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1de      	bne.n	80018d4 <interpretaComando+0x1f8>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8001916:	2100      	movs	r1, #0
 8001918:	480a      	ldr	r0, [pc, #40]	; (8001944 <interpretaComando+0x268>)
 800191a:	f00b faa7 	bl	800ce6c <strtod>
 800191e:	eeb0 7a40 	vmov.f32	s14, s0
 8001922:	eef0 7a60 	vmov.f32	s15, s1
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <interpretaComando+0x26c>)
 8001928:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e01a      	b.n	8001968 <interpretaComando+0x28c>
 8001932:	bf00      	nop
 8001934:	200007f4 	.word	0x200007f4
 8001938:	200006b9 	.word	0x200006b9
 800193c:	2000026c 	.word	0x2000026c
 8001940:	20000270 	.word	0x20000270
 8001944:	20000260 	.word	0x20000260
 8001948:	20000718 	.word	0x20000718
 800194c:	080102e8 	.word	0x080102e8
 8001950:	20000590 	.word	0x20000590
 8001954:	080102f0 	.word	0x080102f0
					auxString[k] = 0;
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <interpretaComando+0x2fc>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b0a      	cmp	r3, #10
 800196c:	ddf4      	ble.n	8001958 <interpretaComando+0x27c>
				}
				j=0;
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <interpretaComando+0x300>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2,(uint8_t *)"Pz_ok\n", 7, 100);
 8001974:	2364      	movs	r3, #100	; 0x64
 8001976:	2207      	movs	r2, #7
 8001978:	4919      	ldr	r1, [pc, #100]	; (80019e0 <interpretaComando+0x304>)
 800197a:	481a      	ldr	r0, [pc, #104]	; (80019e4 <interpretaComando+0x308>)
 800197c:	f009 fbff 	bl	800b17e <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <interpretaComando+0x30c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <interpretaComando+0x310>)
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	2b0a      	cmp	r3, #10
 800198c:	d102      	bne.n	8001994 <interpretaComando+0x2b8>
				    newline_detected = true;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <interpretaComando+0x314>)
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <interpretaComando+0x30c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <interpretaComando+0x30c>)
 800199c:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <interpretaComando+0x30c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <interpretaComando+0x310>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <interpretaComando+0x2d8>
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <interpretaComando+0x314>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f43f af01 	beq.w	80017b6 <interpretaComando+0xda>
		}

		receptionFlag = true;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <interpretaComando+0x318>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
		break;
 80019ba:	e008      	b.n	80019ce <interpretaComando+0x2f2>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart2, (uint8_t *)"Resetting...\n", 14, 100);
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	220e      	movs	r2, #14
 80019c0:	490d      	ldr	r1, [pc, #52]	; (80019f8 <interpretaComando+0x31c>)
 80019c2:	4808      	ldr	r0, [pc, #32]	; (80019e4 <interpretaComando+0x308>)
 80019c4:	f009 fbdb 	bl	800b17e <HAL_UART_Transmit>
		NVIC_SystemReset();
 80019c8:	f7ff fe72 	bl	80016b0 <__NVIC_SystemReset>

		break;


	default:break;
 80019cc:	bf00      	nop


	}

}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000260 	.word	0x20000260
 80019dc:	20000270 	.word	0x20000270
 80019e0:	080102f8 	.word	0x080102f8
 80019e4:	20000590 	.word	0x20000590
 80019e8:	2000026c 	.word	0x2000026c
 80019ec:	200007f4 	.word	0x200007f4
 80019f0:	2000025e 	.word	0x2000025e
 80019f4:	20000813 	.word	0x20000813
 80019f8:	08010300 	.word	0x08010300
 80019fc:	00000000 	.word	0x00000000

08001a00 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b090      	sub	sp, #64	; 0x40
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	eeb0 5a40 	vmov.f32	s10, s0
 8001a0c:	eef0 5a60 	vmov.f32	s11, s1
 8001a10:	eeb0 6a41 	vmov.f32	s12, s2
 8001a14:	eef0 6a61 	vmov.f32	s13, s3
 8001a18:	eeb0 7a42 	vmov.f32	s14, s4
 8001a1c:	eef0 7a62 	vmov.f32	s15, s5
 8001a20:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001a24:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001a28:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001a2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a30:	a3f3      	add	r3, pc, #972	; (adr r3, 8001e00 <inverseKinematic+0x400>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fc2f 	bl	8000298 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	a3ed      	add	r3, pc, #948	; (adr r3, 8001df8 <inverseKinematic+0x3f8>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe fc28 	bl	800029c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001a5c:	f7fe fdd4 	bl	8000608 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4614      	mov	r4, r2
 8001a66:	461d      	mov	r5, r3
 8001a68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	f7fe fc14 	bl	800029c <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe feee 	bl	800085c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	ec43 2b17 	vmov	d7, r2, r3
 8001a88:	ed9f 1bcf 	vldr	d1, [pc, #828]	; 8001dc8 <inverseKinematic+0x3c8>
 8001a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a90:	eef0 0a67 	vmov.f32	s1, s15
 8001a94:	f00d fab8 	bl	800f008 <pow>
 8001a98:	ec51 0b10 	vmov	r0, r1, d0
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4be1      	ldr	r3, [pc, #900]	; (8001e28 <inverseKinematic+0x428>)
 8001aa2:	f7fe fbfb 	bl	800029c <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	4bdf      	ldr	r3, [pc, #892]	; (8001e2c <inverseKinematic+0x42c>)
 8001ab0:	e9c3 0100 	strd	r0, r1, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001ab4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab8:	a3c5      	add	r3, pc, #788	; (adr r3, 8001dd0 <inverseKinematic+0x3d0>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fbed 	bl	800029c <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	a3c3      	add	r3, pc, #780	; (adr r3, 8001dd8 <inverseKinematic+0x3d8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fd9a 	bl	8000608 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	a1c1      	add	r1, pc, #772	; (adr r1, 8001de0 <inverseKinematic+0x3e0>)
 8001ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ade:	f7fe fbdb 	bl	8000298 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001aee:	a3be      	add	r3, pc, #760	; (adr r3, 8001de8 <inverseKinematic+0x3e8>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fbd2 	bl	800029c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	f7fe fbca 	bl	800029c <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fbc2 	bl	8000298 <__aeabi_dsub>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	f7fe fbba 	bl	800029c <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fe94 	bl	800085c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	ec43 2b17 	vmov	d7, r2, r3
 8001b3c:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8001dc8 <inverseKinematic+0x3c8>
 8001b40:	eeb0 0a47 	vmov.f32	s0, s14
 8001b44:	eef0 0a67 	vmov.f32	s1, s15
 8001b48:	f00d fa5e 	bl	800f008 <pow>
 8001b4c:	ec51 0b10 	vmov	r0, r1, d0
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4bb6      	ldr	r3, [pc, #728]	; (8001e30 <inverseKinematic+0x430>)
 8001b56:	f7fe fba1 	bl	800029c <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	4bb4      	ldr	r3, [pc, #720]	; (8001e34 <inverseKinematic+0x434>)
 8001b64:	e9c3 0100 	strd	r0, r1, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001b68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b6c:	a398      	add	r3, pc, #608	; (adr r3, 8001dd0 <inverseKinematic+0x3d0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fb91 	bl	8000298 <__aeabi_dsub>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a396      	add	r3, pc, #600	; (adr r3, 8001dd8 <inverseKinematic+0x3d8>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd40 	bl	8000608 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b94:	a394      	add	r3, pc, #592	; (adr r3, 8001de8 <inverseKinematic+0x3e8>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fb7f 	bl	800029c <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	f7fe fb77 	bl	800029c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe fb6f 	bl	8000298 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	a38b      	add	r3, pc, #556	; (adr r3, 8001df0 <inverseKinematic+0x3f0>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fb68 	bl	800029c <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	a388      	add	r3, pc, #544	; (adr r3, 8001df8 <inverseKinematic+0x3f8>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fb5f 	bl	800029c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
 8001be6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	f7fe fb55 	bl	800029c <__adddf3>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fe2f 	bl	800085c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	ec43 2b17 	vmov	d7, r2, r3
 8001c06:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001dc8 <inverseKinematic+0x3c8>
 8001c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0e:	eef0 0a67 	vmov.f32	s1, s15
 8001c12:	f00d f9f9 	bl	800f008 <pow>
 8001c16:	ec51 0b10 	vmov	r0, r1, d0
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <inverseKinematic+0x430>)
 8001c20:	f7fe fb3c 	bl	800029c <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <inverseKinematic+0x438>)
 8001c2e:	e9c3 0100 	strd	r0, r1, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001c32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c36:	a372      	add	r3, pc, #456	; (adr r3, 8001e00 <inverseKinematic+0x400>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe fb2c 	bl	8000298 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	a36b      	add	r3, pc, #428	; (adr r3, 8001df8 <inverseKinematic+0x3f8>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c62:	f7fe fcd1 	bl	8000608 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	f7fe fb11 	bl	800029c <__adddf3>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fdeb 	bl	800085c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	f7fe fb03 	bl	800029c <__adddf3>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4690      	mov	r8, r2
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ca2:	a357      	add	r3, pc, #348	; (adr r3, 8001e00 <inverseKinematic+0x400>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe faf6 	bl	8000298 <__aeabi_dsub>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	ec43 2b17 	vmov	d7, r2, r3
 8001cb4:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001dc8 <inverseKinematic+0x3c8>
 8001cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbc:	eef0 0a67 	vmov.f32	s1, s15
 8001cc0:	f00d f9a2 	bl	800f008 <pow>
 8001cc4:	ec51 0b10 	vmov	r0, r1, d0
 8001cc8:	a34f      	add	r3, pc, #316	; (adr r3, 8001e08 <inverseKinematic+0x408>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fae5 	bl	800029c <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	461d      	mov	r5, r3
 8001cda:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001cde:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001dc8 <inverseKinematic+0x3c8>
 8001ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce6:	eef0 0a67 	vmov.f32	s1, s15
 8001cea:	f00d f98d 	bl	800f008 <pow>
 8001cee:	ec53 2b10 	vmov	r2, r3, d0
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fad1 	bl	800029c <__adddf3>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a343      	add	r3, pc, #268	; (adr r3, 8001e10 <inverseKinematic+0x410>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fac6 	bl	8000298 <__aeabi_dsub>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001d18:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001dc8 <inverseKinematic+0x3c8>
 8001d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d20:	eef0 0a67 	vmov.f32	s1, s15
 8001d24:	f00d f970 	bl	800f008 <pow>
 8001d28:	ec53 2b10 	vmov	r2, r3, d0
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe fab4 	bl	800029c <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f7fe faaa 	bl	800029c <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fd84 	bl	800085c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	f7fe fc54 	bl	8000608 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	a32b      	add	r3, pc, #172	; (adr r3, 8001e18 <inverseKinematic+0x418>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fa95 	bl	800029c <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <inverseKinematic+0x43c>)
 8001d7c:	e9c3 0100 	strd	r0, r1, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001d80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d84:	a312      	add	r3, pc, #72	; (adr r3, 8001dd0 <inverseKinematic+0x3d0>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fa87 	bl	800029c <__adddf3>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	a322      	add	r3, pc, #136	; (adr r3, 8001e20 <inverseKinematic+0x420>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc34 	bl	8000608 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dac:	a30e      	add	r3, pc, #56	; (adr r3, 8001de8 <inverseKinematic+0x3e8>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fa73 	bl	800029c <__adddf3>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e03d      	b.n	8001e40 <inverseKinematic+0x440>
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40000000 	.word	0x40000000
 8001dd0:	5625749b 	.word	0x5625749b
 8001dd4:	3faf09d1 	.word	0x3faf09d1
 8001dd8:	e8584caa 	.word	0xe8584caa
 8001ddc:	400bb67a 	.word	0x400bb67a
 8001de0:	24dd2f1d 	.word	0x24dd2f1d
 8001de4:	3fe58106 	.word	0x3fe58106
 8001de8:	1eb851ec 	.word	0x1eb851ec
 8001dec:	3fa1eb85 	.word	0x3fa1eb85
 8001df0:	9ba5e356 	.word	0x9ba5e356
 8001df4:	3fe020c4 	.word	0x3fe020c4
 8001df8:	24dd2f1b 	.word	0x24dd2f1b
 8001dfc:	3fc58106 	.word	0x3fc58106
 8001e00:	1eb851ec 	.word	0x1eb851ec
 8001e04:	3fb1eb85 	.word	0x3fb1eb85
 8001e08:	f705857e 	.word	0xf705857e
 8001e0c:	3f881e03 	.word	0x3f881e03
 8001e10:	70a3d70a 	.word	0x70a3d70a
 8001e14:	3fd70a3d 	.word	0x3fd70a3d
 8001e18:	24dd2f1b 	.word	0x24dd2f1b
 8001e1c:	3fd58106 	.word	0x3fd58106
 8001e20:	e8584caa 	.word	0xe8584caa
 8001e24:	c00bb67a 	.word	0xc00bb67a
 8001e28:	3ff00000 	.word	0x3ff00000
 8001e2c:	20000278 	.word	0x20000278
 8001e30:	40100000 	.word	0x40100000
 8001e34:	200002c0 	.word	0x200002c0
 8001e38:	20000308 	.word	0x20000308
 8001e3c:	20000280 	.word	0x20000280
 8001e40:	f7fe fa2c 	bl	800029c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fa24 	bl	8000298 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fa1c 	bl	800029c <__adddf3>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	f7fe fa12 	bl	800029c <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fcec 	bl	800085c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	f7fe fa04 	bl	800029c <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4690      	mov	r8, r2
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ea0:	a3ed      	add	r3, pc, #948	; (adr r3, 8002258 <inverseKinematic+0x858>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe f9f9 	bl	800029c <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b17 	vmov	d7, r2, r3
 8001eb2:	ed9f 1be7 	vldr	d1, [pc, #924]	; 8002250 <inverseKinematic+0x850>
 8001eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eba:	eef0 0a67 	vmov.f32	s1, s15
 8001ebe:	f00d f8a3 	bl	800f008 <pow>
 8001ec2:	ec51 0b10 	vmov	r0, r1, d0
 8001ec6:	a3fa      	add	r3, pc, #1000	; (adr r3, 80022b0 <inverseKinematic+0x8b0>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe f9e6 	bl	800029c <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001edc:	a3e2      	add	r3, pc, #904	; (adr r3, 8002268 <inverseKinematic+0x868>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe f9db 	bl	800029c <__adddf3>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ec43 2b17 	vmov	d7, r2, r3
 8001eee:	ed9f 1bd8 	vldr	d1, [pc, #864]	; 8002250 <inverseKinematic+0x850>
 8001ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef6:	eef0 0a67 	vmov.f32	s1, s15
 8001efa:	f00d f885 	bl	800f008 <pow>
 8001efe:	ec53 2b10 	vmov	r2, r3, d0
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe f9c9 	bl	800029c <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4614      	mov	r4, r2
 8001f10:	461d      	mov	r5, r3
 8001f12:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001f16:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8002250 <inverseKinematic+0x850>
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	eef0 0a67 	vmov.f32	s1, s15
 8001f22:	f00d f871 	bl	800f008 <pow>
 8001f26:	ec53 2b10 	vmov	r2, r3, d0
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f7fe f9b5 	bl	800029c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	a3d1      	add	r3, pc, #836	; (adr r3, 8002280 <inverseKinematic+0x880>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe f9aa 	bl	8000298 <__aeabi_dsub>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	f7fe f9a2 	bl	800029c <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe fc7c 	bl	800085c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe fb4c 	bl	8000608 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	a3c7      	add	r3, pc, #796	; (adr r3, 8002298 <inverseKinematic+0x898>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe f98b 	bl	8000298 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4bc7      	ldr	r3, [pc, #796]	; (80022a8 <inverseKinematic+0x8a8>)
 8001f8c:	e9c3 0100 	strd	r0, r1, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001f90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f94:	a3b0      	add	r3, pc, #704	; (adr r3, 8002258 <inverseKinematic+0x858>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe f97d 	bl	8000298 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	a3ae      	add	r3, pc, #696	; (adr r3, 8002260 <inverseKinematic+0x860>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fb2c 	bl	8000608 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fbc:	a3aa      	add	r3, pc, #680	; (adr r3, 8002268 <inverseKinematic+0x868>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe f96b 	bl	800029c <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	f7fe f963 	bl	800029c <__adddf3>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe f95b 	bl	8000298 <__aeabi_dsub>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	a3a1      	add	r3, pc, #644	; (adr r3, 8002270 <inverseKinematic+0x870>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe f954 	bl	800029c <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	a39e      	add	r3, pc, #632	; (adr r3, 8002278 <inverseKinematic+0x878>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe f94b 	bl	800029c <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	f7fe f941 	bl	800029c <__adddf3>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe fc1b 	bl	800085c <__aeabi_ddiv>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f7fe f933 	bl	800029c <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4690      	mov	r8, r2
 800203c:	4699      	mov	r9, r3
 800203e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002042:	a385      	add	r3, pc, #532	; (adr r3, 8002258 <inverseKinematic+0x858>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe f926 	bl	8000298 <__aeabi_dsub>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	ec43 2b17 	vmov	d7, r2, r3
 8002054:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8002250 <inverseKinematic+0x850>
 8002058:	eeb0 0a47 	vmov.f32	s0, s14
 800205c:	eef0 0a67 	vmov.f32	s1, s15
 8002060:	f00c ffd2 	bl	800f008 <pow>
 8002064:	ec55 4b10 	vmov	r4, r5, d0
 8002068:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800206c:	a37e      	add	r3, pc, #504	; (adr r3, 8002268 <inverseKinematic+0x868>)
 800206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002072:	f7fe f913 	bl	800029c <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	ec43 2b17 	vmov	d7, r2, r3
 800207e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002250 <inverseKinematic+0x850>
 8002082:	eeb0 0a47 	vmov.f32	s0, s14
 8002086:	eef0 0a67 	vmov.f32	s1, s15
 800208a:	f00c ffbd 	bl	800f008 <pow>
 800208e:	ec53 2b10 	vmov	r2, r3, d0
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f901 	bl	800029c <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80020a6:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8002250 <inverseKinematic+0x850>
 80020aa:	eeb0 0a47 	vmov.f32	s0, s14
 80020ae:	eef0 0a67 	vmov.f32	s1, s15
 80020b2:	f00c ffa9 	bl	800f008 <pow>
 80020b6:	ec53 2b10 	vmov	r2, r3, d0
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7fe f8ed 	bl	800029c <__adddf3>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	a36d      	add	r3, pc, #436	; (adr r3, 8002280 <inverseKinematic+0x880>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe f8e2 	bl	8000298 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	a36a      	add	r3, pc, #424	; (adr r3, 8002288 <inverseKinematic+0x888>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe f8d9 	bl	8000298 <__aeabi_dsub>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	a368      	add	r3, pc, #416	; (adr r3, 8002290 <inverseKinematic+0x890>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe f8d2 	bl	800029c <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	f7fe f8c8 	bl	800029c <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe fba2 	bl	800085c <__aeabi_ddiv>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f7fe fa72 	bl	8000608 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	a35a      	add	r3, pc, #360	; (adr r3, 8002298 <inverseKinematic+0x898>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f8b1 	bl	8000298 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <inverseKinematic+0x8ac>)
 8002140:	e9c3 0100 	strd	r0, r1, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8002144:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002148:	a355      	add	r3, pc, #340	; (adr r3, 80022a0 <inverseKinematic+0x8a0>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe f8a3 	bl	8000298 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ec43 2b17 	vmov	d7, r2, r3
 800215a:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002250 <inverseKinematic+0x850>
 800215e:	eeb0 0a47 	vmov.f32	s0, s14
 8002162:	eef0 0a67 	vmov.f32	s1, s15
 8002166:	f00c ff4f 	bl	800f008 <pow>
 800216a:	ec55 4b10 	vmov	r4, r5, d0
 800216e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002172:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8002250 <inverseKinematic+0x850>
 8002176:	eeb0 0a47 	vmov.f32	s0, s14
 800217a:	eef0 0a67 	vmov.f32	s1, s15
 800217e:	f00c ff43 	bl	800f008 <pow>
 8002182:	ec53 2b10 	vmov	r2, r3, d0
 8002186:	4620      	mov	r0, r4
 8002188:	4629      	mov	r1, r5
 800218a:	f7fe f887 	bl	800029c <__adddf3>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a33a      	add	r3, pc, #232	; (adr r3, 8002280 <inverseKinematic+0x880>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f87c 	bl	8000298 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80021ac:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002250 <inverseKinematic+0x850>
 80021b0:	eeb0 0a47 	vmov.f32	s0, s14
 80021b4:	eef0 0a67 	vmov.f32	s1, s15
 80021b8:	f00c ff26 	bl	800f008 <pow>
 80021bc:	ec53 2b10 	vmov	r2, r3, d0
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f86a 	bl	800029c <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002288 <inverseKinematic+0x888>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe f85f 	bl	8000298 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	a32b      	add	r3, pc, #172	; (adr r3, 8002290 <inverseKinematic+0x890>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f858 	bl	800029c <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	f7fe f84e 	bl	800029c <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fb28 	bl	800085c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	ec43 2b17 	vmov	d7, r2, r3
 8002214:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002250 <inverseKinematic+0x850>
 8002218:	eeb0 0a47 	vmov.f32	s0, s14
 800221c:	eef0 0a67 	vmov.f32	s1, s15
 8002220:	f00c fef2 	bl	800f008 <pow>
 8002224:	ec51 0b10 	vmov	r0, r1, d0
 8002228:	a319      	add	r3, pc, #100	; (adr r3, 8002290 <inverseKinematic+0x890>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f833 	bl	8000298 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	a313      	add	r3, pc, #76	; (adr r3, 8002288 <inverseKinematic+0x888>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f82c 	bl	800029c <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	e036      	b.n	80022b8 <inverseKinematic+0x8b8>
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	00000000 	.word	0x00000000
 8002254:	40000000 	.word	0x40000000
 8002258:	5625749b 	.word	0x5625749b
 800225c:	3faf09d1 	.word	0x3faf09d1
 8002260:	e8584caa 	.word	0xe8584caa
 8002264:	400bb67a 	.word	0x400bb67a
 8002268:	1eb851ec 	.word	0x1eb851ec
 800226c:	3fa1eb85 	.word	0x3fa1eb85
 8002270:	9ba5e356 	.word	0x9ba5e356
 8002274:	3fe020c4 	.word	0x3fe020c4
 8002278:	24dd2f1b 	.word	0x24dd2f1b
 800227c:	3fc58106 	.word	0x3fc58106
 8002280:	70a3d70a 	.word	0x70a3d70a
 8002284:	3fd70a3d 	.word	0x3fd70a3d
 8002288:	93d96639 	.word	0x93d96639
 800228c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002290:	47ae147c 	.word	0x47ae147c
 8002294:	3fa47ae1 	.word	0x3fa47ae1
 8002298:	24dd2f1d 	.word	0x24dd2f1d
 800229c:	3fe58106 	.word	0x3fe58106
 80022a0:	1eb851ec 	.word	0x1eb851ec
 80022a4:	3fb1eb85 	.word	0x3fb1eb85
 80022a8:	200002c8 	.word	0x200002c8
 80022ac:	20000310 	.word	0x20000310
 80022b0:	f705857e 	.word	0xf705857e
 80022b4:	3f881e03 	.word	0x3f881e03
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	4bde      	ldr	r3, [pc, #888]	; (8002638 <inverseKinematic+0xc38>)
 80022be:	e9c3 0100 	strd	r0, r1, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 80022c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022c6:	a3ce      	add	r3, pc, #824	; (adr r3, 8002600 <inverseKinematic+0xc00>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fd ffe6 	bl	800029c <__adddf3>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	ec43 2b17 	vmov	d7, r2, r3
 80022d8:	ed9f 1bcb 	vldr	d1, [pc, #812]	; 8002608 <inverseKinematic+0xc08>
 80022dc:	eeb0 0a47 	vmov.f32	s0, s14
 80022e0:	eef0 0a67 	vmov.f32	s1, s15
 80022e4:	f00c fe90 	bl	800f008 <pow>
 80022e8:	ec51 0b10 	vmov	r0, r1, d0
 80022ec:	a3c8      	add	r3, pc, #800	; (adr r3, 8002610 <inverseKinematic+0xc10>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fd ffd3 	bl	800029c <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
 80022fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002302:	a3c5      	add	r3, pc, #788	; (adr r3, 8002618 <inverseKinematic+0xc18>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fd ffc8 	bl	800029c <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b17 	vmov	d7, r2, r3
 8002314:	ed9f 1bbc 	vldr	d1, [pc, #752]	; 8002608 <inverseKinematic+0xc08>
 8002318:	eeb0 0a47 	vmov.f32	s0, s14
 800231c:	eef0 0a67 	vmov.f32	s1, s15
 8002320:	f00c fe72 	bl	800f008 <pow>
 8002324:	ec53 2b10 	vmov	r2, r3, d0
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffb6 	bl	800029c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4614      	mov	r4, r2
 8002336:	461d      	mov	r5, r3
 8002338:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800233c:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8002608 <inverseKinematic+0xc08>
 8002340:	eeb0 0a47 	vmov.f32	s0, s14
 8002344:	eef0 0a67 	vmov.f32	s1, s15
 8002348:	f00c fe5e 	bl	800f008 <pow>
 800234c:	ec53 2b10 	vmov	r2, r3, d0
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ffa2 	bl	800029c <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	a3af      	add	r3, pc, #700	; (adr r3, 8002620 <inverseKinematic+0xc20>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fd ff97 	bl	8000298 <__aeabi_dsub>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461d      	mov	r5, r3
 8002372:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	f7fd ff8f 	bl	800029c <__adddf3>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	f7fe fa69 	bl	800085c <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	ec43 2b17 	vmov	d7, r2, r3
 8002392:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 8002608 <inverseKinematic+0xc08>
 8002396:	eeb0 0a47 	vmov.f32	s0, s14
 800239a:	eef0 0a67 	vmov.f32	s1, s15
 800239e:	f00c fe33 	bl	800f008 <pow>
 80023a2:	ec51 0b10 	vmov	r0, r1, d0
 80023a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002610 <inverseKinematic+0xc10>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fd ff74 	bl	8000298 <__aeabi_dsub>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	4ba0      	ldr	r3, [pc, #640]	; (800263c <inverseKinematic+0xc3c>)
 80023ba:	e9c3 0100 	strd	r0, r1, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 80023be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023c2:	a38f      	add	r3, pc, #572	; (adr r3, 8002600 <inverseKinematic+0xc00>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd ff66 	bl	8000298 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	ec43 2b17 	vmov	d7, r2, r3
 80023d4:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8002608 <inverseKinematic+0xc08>
 80023d8:	eeb0 0a47 	vmov.f32	s0, s14
 80023dc:	eef0 0a67 	vmov.f32	s1, s15
 80023e0:	f00c fe12 	bl	800f008 <pow>
 80023e4:	ec55 4b10 	vmov	r4, r5, d0
 80023e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80023ec:	a38a      	add	r3, pc, #552	; (adr r3, 8002618 <inverseKinematic+0xc18>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fd ff53 	bl	800029c <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b17 	vmov	d7, r2, r3
 80023fe:	ed9f 1b82 	vldr	d1, [pc, #520]	; 8002608 <inverseKinematic+0xc08>
 8002402:	eeb0 0a47 	vmov.f32	s0, s14
 8002406:	eef0 0a67 	vmov.f32	s1, s15
 800240a:	f00c fdfd 	bl	800f008 <pow>
 800240e:	ec53 2b10 	vmov	r2, r3, d0
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f7fd ff41 	bl	800029c <__adddf3>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4614      	mov	r4, r2
 8002420:	461d      	mov	r5, r3
 8002422:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002426:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8002608 <inverseKinematic+0xc08>
 800242a:	eeb0 0a47 	vmov.f32	s0, s14
 800242e:	eef0 0a67 	vmov.f32	s1, s15
 8002432:	f00c fde9 	bl	800f008 <pow>
 8002436:	ec53 2b10 	vmov	r2, r3, d0
 800243a:	4620      	mov	r0, r4
 800243c:	4629      	mov	r1, r5
 800243e:	f7fd ff2d 	bl	800029c <__adddf3>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	a375      	add	r3, pc, #468	; (adr r3, 8002620 <inverseKinematic+0xc20>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fd ff22 	bl	8000298 <__aeabi_dsub>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	a372      	add	r3, pc, #456	; (adr r3, 8002628 <inverseKinematic+0xc28>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fd ff19 	bl	8000298 <__aeabi_dsub>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	a370      	add	r3, pc, #448	; (adr r3, 8002630 <inverseKinematic+0xc30>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	f7fd ff12 	bl	800029c <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4614      	mov	r4, r2
 800247e:	461d      	mov	r5, r3
 8002480:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	f7fd ff08 	bl	800029c <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f9e2 	bl	800085c <__aeabi_ddiv>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	ec43 2b17 	vmov	d7, r2, r3
 80024a0:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8002608 <inverseKinematic+0xc08>
 80024a4:	eeb0 0a47 	vmov.f32	s0, s14
 80024a8:	eef0 0a67 	vmov.f32	s1, s15
 80024ac:	f00c fdac 	bl	800f008 <pow>
 80024b0:	ec51 0b10 	vmov	r0, r1, d0
 80024b4:	a356      	add	r3, pc, #344	; (adr r3, 8002610 <inverseKinematic+0xc10>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fd feed 	bl	8000298 <__aeabi_dsub>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <inverseKinematic+0xc40>)
 80024c8:	e9c3 0100 	strd	r0, r1, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80024cc:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <inverseKinematic+0xc44>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	4692      	mov	sl, r2
 80024d4:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80024d8:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <inverseKinematic+0xc44>)
 80024da:	ed93 7b00 	vldr	d7, [r3]
 80024de:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8002608 <inverseKinematic+0xc08>
 80024e2:	eeb0 0a47 	vmov.f32	s0, s14
 80024e6:	eef0 0a67 	vmov.f32	s1, s15
 80024ea:	f00c fd8d 	bl	800f008 <pow>
 80024ee:	ec55 4b10 	vmov	r4, r5, d0
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <inverseKinematic+0xc48>)
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <inverseKinematic+0xc4c>)
 80024fe:	f7fe f883 	bl	8000608 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <inverseKinematic+0xc38>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f87a 	bl	8000608 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fd febc 	bl	8000298 <__aeabi_dsub>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	ec43 2b17 	vmov	d7, r2, r3
 8002528:	eeb0 0a47 	vmov.f32	s0, s14
 800252c:	eef0 0a67 	vmov.f32	s1, s15
 8002530:	f00c fdda 	bl	800f0e8 <sqrt>
 8002534:	ec53 2b10 	vmov	r2, r3, d0
 8002538:	4650      	mov	r0, sl
 800253a:	4659      	mov	r1, fp
 800253c:	f7fd feac 	bl	8000298 <__aeabi_dsub>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <inverseKinematic+0xc48>)
 800254a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	f7fd fea3 	bl	800029c <__adddf3>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f97d 	bl	800085c <__aeabi_ddiv>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	493a      	ldr	r1, [pc, #232]	; (8002650 <inverseKinematic+0xc50>)
 8002568:	e9c1 2300 	strd	r2, r3, [r1]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <inverseKinematic+0xc44>)
 800256e:	ed93 7b00 	vldr	d7, [r3]
 8002572:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8002608 <inverseKinematic+0xc08>
 8002576:	eeb0 0a47 	vmov.f32	s0, s14
 800257a:	eef0 0a67 	vmov.f32	s1, s15
 800257e:	f00c fd43 	bl	800f008 <pow>
 8002582:	ec55 4b10 	vmov	r4, r5, d0
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <inverseKinematic+0xc48>)
 8002588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <inverseKinematic+0xc4c>)
 8002592:	f7fe f839 	bl	8000608 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <inverseKinematic+0xc38>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f830 	bl	8000608 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd fe72 	bl	8000298 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	ec43 2b17 	vmov	d7, r2, r3
 80025bc:	eeb0 0a47 	vmov.f32	s0, s14
 80025c0:	eef0 0a67 	vmov.f32	s1, s15
 80025c4:	f00c fd90 	bl	800f0e8 <sqrt>
 80025c8:	ec51 0b10 	vmov	r0, r1, d0
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <inverseKinematic+0xc44>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd fe61 	bl	8000298 <__aeabi_dsub>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4614      	mov	r4, r2
 80025dc:	461d      	mov	r5, r3
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <inverseKinematic+0xc48>)
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	f7fd fe58 	bl	800029c <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4620      	mov	r0, r4
 80025f2:	4629      	mov	r1, r5
 80025f4:	f7fe f932 	bl	800085c <__aeabi_ddiv>
 80025f8:	4602      	mov	r2, r0
 80025fa:	e02b      	b.n	8002654 <inverseKinematic+0xc54>
 80025fc:	f3af 8000 	nop.w
 8002600:	5625749b 	.word	0x5625749b
 8002604:	3faf09d1 	.word	0x3faf09d1
 8002608:	00000000 	.word	0x00000000
 800260c:	40000000 	.word	0x40000000
 8002610:	f705857e 	.word	0xf705857e
 8002614:	3f881e03 	.word	0x3f881e03
 8002618:	1eb851ec 	.word	0x1eb851ec
 800261c:	3fa1eb85 	.word	0x3fa1eb85
 8002620:	70a3d70a 	.word	0x70a3d70a
 8002624:	3fd70a3d 	.word	0x3fd70a3d
 8002628:	93d96639 	.word	0x93d96639
 800262c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002630:	47ae147c 	.word	0x47ae147c
 8002634:	3fa47ae1 	.word	0x3fa47ae1
 8002638:	20000288 	.word	0x20000288
 800263c:	200002d0 	.word	0x200002d0
 8002640:	20000318 	.word	0x20000318
 8002644:	20000280 	.word	0x20000280
 8002648:	20000278 	.word	0x20000278
 800264c:	40100000 	.word	0x40100000
 8002650:	200002a0 	.word	0x200002a0
 8002654:	460b      	mov	r3, r1
 8002656:	49c6      	ldr	r1, [pc, #792]	; (8002970 <inverseKinematic+0xf70>)
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800265c:	4bc5      	ldr	r3, [pc, #788]	; (8002974 <inverseKinematic+0xf74>)
 800265e:	ed93 7b00 	vldr	d7, [r3]
 8002662:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 8002958 <inverseKinematic+0xf58>
 8002666:	eeb0 0a47 	vmov.f32	s0, s14
 800266a:	eef0 0a67 	vmov.f32	s1, s15
 800266e:	f00c fccb 	bl	800f008 <pow>
 8002672:	ec55 4b10 	vmov	r4, r5, d0
 8002676:	4bc0      	ldr	r3, [pc, #768]	; (8002978 <inverseKinematic+0xf78>)
 8002678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4bbe      	ldr	r3, [pc, #760]	; (800297c <inverseKinematic+0xf7c>)
 8002682:	f7fd ffc1 	bl	8000608 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	4bbc      	ldr	r3, [pc, #752]	; (8002980 <inverseKinematic+0xf80>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ffb8 	bl	8000608 <__aeabi_dmul>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4620      	mov	r0, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	f7fd fdfa 	bl	8000298 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	ec43 2b17 	vmov	d7, r2, r3
 80026ac:	eeb0 0a47 	vmov.f32	s0, s14
 80026b0:	eef0 0a67 	vmov.f32	s1, s15
 80026b4:	f00c fd18 	bl	800f0e8 <sqrt>
 80026b8:	ec51 0b10 	vmov	r0, r1, d0
 80026bc:	4bad      	ldr	r3, [pc, #692]	; (8002974 <inverseKinematic+0xf74>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd fde9 	bl	8000298 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	461d      	mov	r5, r3
 80026ce:	4baa      	ldr	r3, [pc, #680]	; (8002978 <inverseKinematic+0xf78>)
 80026d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	f7fd fde0 	bl	800029c <__adddf3>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	f7fe f8ba 	bl	800085c <__aeabi_ddiv>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	49a5      	ldr	r1, [pc, #660]	; (8002984 <inverseKinematic+0xf84>)
 80026ee:	e9c1 2300 	strd	r2, r3, [r1]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80026f2:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <inverseKinematic+0xf74>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	623a      	str	r2, [r7, #32]
 80026fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	4b9c      	ldr	r3, [pc, #624]	; (8002974 <inverseKinematic+0xf74>)
 8002702:	ed93 7b00 	vldr	d7, [r3]
 8002706:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002958 <inverseKinematic+0xf58>
 800270a:	eeb0 0a47 	vmov.f32	s0, s14
 800270e:	eef0 0a67 	vmov.f32	s1, s15
 8002712:	f00c fc79 	bl	800f008 <pow>
 8002716:	ec55 4b10 	vmov	r4, r5, d0
 800271a:	4b97      	ldr	r3, [pc, #604]	; (8002978 <inverseKinematic+0xf78>)
 800271c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	4b95      	ldr	r3, [pc, #596]	; (800297c <inverseKinematic+0xf7c>)
 8002726:	f7fd ff6f 	bl	8000608 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4b93      	ldr	r3, [pc, #588]	; (8002980 <inverseKinematic+0xf80>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fd ff66 	bl	8000608 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f7fd fda8 	bl	8000298 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	ec43 2b17 	vmov	d7, r2, r3
 8002750:	eeb0 0a47 	vmov.f32	s0, s14
 8002754:	eef0 0a67 	vmov.f32	s1, s15
 8002758:	f00c fcc6 	bl	800f0e8 <sqrt>
 800275c:	ec53 2b10 	vmov	r2, r3, d0
 8002760:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002764:	f7fd fd98 	bl	8000298 <__aeabi_dsub>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4614      	mov	r4, r2
 800276e:	461d      	mov	r5, r3
 8002770:	4b81      	ldr	r3, [pc, #516]	; (8002978 <inverseKinematic+0xf78>)
 8002772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	f7fd fd8f 	bl	800029c <__adddf3>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fe f869 	bl	800085c <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	497e      	ldr	r1, [pc, #504]	; (8002988 <inverseKinematic+0xf88>)
 8002790:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8002794:	4b7d      	ldr	r3, [pc, #500]	; (800298c <inverseKinematic+0xf8c>)
 8002796:	ed93 7b00 	vldr	d7, [r3]
 800279a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002958 <inverseKinematic+0xf58>
 800279e:	eeb0 0a47 	vmov.f32	s0, s14
 80027a2:	eef0 0a67 	vmov.f32	s1, s15
 80027a6:	f00c fc2f 	bl	800f008 <pow>
 80027aa:	ec55 4b10 	vmov	r4, r5, d0
 80027ae:	4b78      	ldr	r3, [pc, #480]	; (8002990 <inverseKinematic+0xf90>)
 80027b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	4b70      	ldr	r3, [pc, #448]	; (800297c <inverseKinematic+0xf7c>)
 80027ba:	f7fd ff25 	bl	8000608 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	4b73      	ldr	r3, [pc, #460]	; (8002994 <inverseKinematic+0xf94>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd ff1c 	bl	8000608 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd5e 	bl	8000298 <__aeabi_dsub>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	ec43 2b17 	vmov	d7, r2, r3
 80027e4:	eeb0 0a47 	vmov.f32	s0, s14
 80027e8:	eef0 0a67 	vmov.f32	s1, s15
 80027ec:	f00c fc7c 	bl	800f0e8 <sqrt>
 80027f0:	ec51 0b10 	vmov	r0, r1, d0
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <inverseKinematic+0xf8c>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fd4d 	bl	8000298 <__aeabi_dsub>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	4b62      	ldr	r3, [pc, #392]	; (8002990 <inverseKinematic+0xf90>)
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	f7fd fd44 	bl	800029c <__adddf3>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fe f81e 	bl	800085c <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	495c      	ldr	r1, [pc, #368]	; (8002998 <inverseKinematic+0xf98>)
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <inverseKinematic+0xf8c>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	61ba      	str	r2, [r7, #24]
 8002832:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	4b54      	ldr	r3, [pc, #336]	; (800298c <inverseKinematic+0xf8c>)
 800283a:	ed93 7b00 	vldr	d7, [r3]
 800283e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002958 <inverseKinematic+0xf58>
 8002842:	eeb0 0a47 	vmov.f32	s0, s14
 8002846:	eef0 0a67 	vmov.f32	s1, s15
 800284a:	f00c fbdd 	bl	800f008 <pow>
 800284e:	ec55 4b10 	vmov	r4, r5, d0
 8002852:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <inverseKinematic+0xf90>)
 8002854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	4b47      	ldr	r3, [pc, #284]	; (800297c <inverseKinematic+0xf7c>)
 800285e:	f7fd fed3 	bl	8000608 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <inverseKinematic+0xf94>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f7fd feca 	bl	8000608 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd fd0c 	bl	8000298 <__aeabi_dsub>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	ec43 2b17 	vmov	d7, r2, r3
 8002888:	eeb0 0a47 	vmov.f32	s0, s14
 800288c:	eef0 0a67 	vmov.f32	s1, s15
 8002890:	f00c fc2a 	bl	800f0e8 <sqrt>
 8002894:	ec53 2b10 	vmov	r2, r3, d0
 8002898:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800289c:	f7fd fcfc 	bl	8000298 <__aeabi_dsub>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <inverseKinematic+0xf90>)
 80028aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	f7fd fcf3 	bl	800029c <__adddf3>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd ffcd 	bl	800085c <__aeabi_ddiv>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4935      	ldr	r1, [pc, #212]	; (800299c <inverseKinematic+0xf9c>)
 80028c8:	e9c1 2300 	strd	r2, r3, [r1]

	XJ1_1 = 0;
 80028cc:	4934      	ldr	r1, [pc, #208]	; (80029a0 <inverseKinematic+0xfa0>)
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 80028da:	4932      	ldr	r1, [pc, #200]	; (80029a4 <inverseKinematic+0xfa4>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <inverseKinematic+0xf84>)
 80028ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002960 <inverseKinematic+0xf60>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe88 	bl	8000608 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	492a      	ldr	r1, [pc, #168]	; (80029a8 <inverseKinematic+0xfa8>)
 80028fe:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_2 = sqrt(3) * YJ2_2;
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <inverseKinematic+0xf88>)
 8002904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002908:	a315      	add	r3, pc, #84	; (adr r3, 8002960 <inverseKinematic+0xf60>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd fe7b 	bl	8000608 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4925      	ldr	r1, [pc, #148]	; (80029ac <inverseKinematic+0xfac>)
 8002918:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_1 = -sqrt(3) * YJ3_1;
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <inverseKinematic+0xf98>)
 800291e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002922:	a311      	add	r3, pc, #68	; (adr r3, 8002968 <inverseKinematic+0xf68>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fe6e 	bl	8000608 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	491f      	ldr	r1, [pc, #124]	; (80029b0 <inverseKinematic+0xfb0>)
 8002932:	e9c1 2300 	strd	r2, r3, [r1]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <inverseKinematic+0xf9c>)
 8002938:	e9d3 0100 	ldrd	r0, r1, [r3]
 800293c:	a30a      	add	r3, pc, #40	; (adr r3, 8002968 <inverseKinematic+0xf68>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fd fe61 	bl	8000608 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	491a      	ldr	r1, [pc, #104]	; (80029b4 <inverseKinematic+0xfb4>)
 800294c:	e9c1 2300 	strd	r2, r3, [r1]
 8002950:	e032      	b.n	80029b8 <inverseKinematic+0xfb8>
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	00000000 	.word	0x00000000
 800295c:	40000000 	.word	0x40000000
 8002960:	e8584caa 	.word	0xe8584caa
 8002964:	3ffbb67a 	.word	0x3ffbb67a
 8002968:	e8584caa 	.word	0xe8584caa
 800296c:	bffbb67a 	.word	0xbffbb67a
 8002970:	200002a8 	.word	0x200002a8
 8002974:	200002c8 	.word	0x200002c8
 8002978:	200002c0 	.word	0x200002c0
 800297c:	40100000 	.word	0x40100000
 8002980:	200002d0 	.word	0x200002d0
 8002984:	200002e8 	.word	0x200002e8
 8002988:	200002f0 	.word	0x200002f0
 800298c:	20000310 	.word	0x20000310
 8002990:	20000308 	.word	0x20000308
 8002994:	20000318 	.word	0x20000318
 8002998:	20000330 	.word	0x20000330
 800299c:	20000338 	.word	0x20000338
 80029a0:	20000290 	.word	0x20000290
 80029a4:	20000298 	.word	0x20000298
 80029a8:	200002d8 	.word	0x200002d8
 80029ac:	200002e0 	.word	0x200002e0
 80029b0:	20000320 	.word	0x20000320
 80029b4:	20000328 	.word	0x20000328

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80029b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80029bc:	a3e2      	add	r3, pc, #904	; (adr r3, 8002d48 <inverseKinematic+0x1348>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd fc69 	bl	8000298 <__aeabi_dsub>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	a3e8      	add	r3, pc, #928	; (adr r3, 8002d70 <inverseKinematic+0x1370>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f7fd fc62 	bl	800029c <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80029e8:	f7fd fe0e 	bl	8000608 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4614      	mov	r4, r2
 80029f2:	461d      	mov	r5, r3
 80029f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f7fd fc4e 	bl	800029c <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd ff28 	bl	800085c <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	4be2      	ldr	r3, [pc, #904]	; (8002da0 <inverseKinematic+0x13a0>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fdf5 	bl	8000608 <__aeabi_dmul>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4690      	mov	r8, r2
 8002a24:	4699      	mov	r9, r3
 8002a26:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a2a:	a3c7      	add	r3, pc, #796	; (adr r3, 8002d48 <inverseKinematic+0x1348>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f7fd fc32 	bl	8000298 <__aeabi_dsub>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	ec43 2b17 	vmov	d7, r2, r3
 8002a3c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 8002d50 <inverseKinematic+0x1350>
 8002a40:	eeb0 0a47 	vmov.f32	s0, s14
 8002a44:	eef0 0a67 	vmov.f32	s1, s15
 8002a48:	f00c fade 	bl	800f008 <pow>
 8002a4c:	ec55 4b10 	vmov	r4, r5, d0
 8002a50:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a54:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8002d50 <inverseKinematic+0x1350>
 8002a58:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5c:	eef0 0a67 	vmov.f32	s1, s15
 8002a60:	f00c fad2 	bl	800f008 <pow>
 8002a64:	ec53 2b10 	vmov	r2, r3, d0
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fc16 	bl	800029c <__adddf3>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	a3b7      	add	r3, pc, #732	; (adr r3, 8002d58 <inverseKinematic+0x1358>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fc0b 	bl	8000298 <__aeabi_dsub>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002a8e:	ed9f 1bb0 	vldr	d1, [pc, #704]	; 8002d50 <inverseKinematic+0x1350>
 8002a92:	eeb0 0a47 	vmov.f32	s0, s14
 8002a96:	eef0 0a67 	vmov.f32	s1, s15
 8002a9a:	f00c fab5 	bl	800f008 <pow>
 8002a9e:	ec53 2b10 	vmov	r2, r3, d0
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	f7fd fbf9 	bl	800029c <__adddf3>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	a3ab      	add	r3, pc, #684	; (adr r3, 8002d60 <inverseKinematic+0x1360>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fbee 	bl	8000298 <__aeabi_dsub>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002d68 <inverseKinematic+0x1368>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fbe7 	bl	800029c <__adddf3>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	f7fd fbdd 	bl	800029c <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd feb7 	bl	800085c <__aeabi_ddiv>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4640      	mov	r0, r8
 8002af4:	4649      	mov	r1, r9
 8002af6:	f7fd fbd1 	bl	800029c <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	49a9      	ldr	r1, [pc, #676]	; (8002da4 <inverseKinematic+0x13a4>)
 8002b00:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002b04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b08:	a38f      	add	r3, pc, #572	; (adr r3, 8002d48 <inverseKinematic+0x1348>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fbc3 	bl	8000298 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	a395      	add	r3, pc, #596	; (adr r3, 8002d70 <inverseKinematic+0x1370>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fbbc 	bl	800029c <__adddf3>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002b34:	f7fd fd68 	bl	8000608 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	f7fd fba8 	bl	800029c <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fe82 	bl	800085c <__aeabi_ddiv>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <inverseKinematic+0x13a8>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd4f 	bl	8000608 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4690      	mov	r8, r2
 8002b70:	4699      	mov	r9, r3
 8002b72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b76:	a374      	add	r3, pc, #464	; (adr r3, 8002d48 <inverseKinematic+0x1348>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fb8c 	bl	8000298 <__aeabi_dsub>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	ec43 2b17 	vmov	d7, r2, r3
 8002b88:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002d50 <inverseKinematic+0x1350>
 8002b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b90:	eef0 0a67 	vmov.f32	s1, s15
 8002b94:	f00c fa38 	bl	800f008 <pow>
 8002b98:	ec55 4b10 	vmov	r4, r5, d0
 8002b9c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002ba0:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002d50 <inverseKinematic+0x1350>
 8002ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba8:	eef0 0a67 	vmov.f32	s1, s15
 8002bac:	f00c fa2c 	bl	800f008 <pow>
 8002bb0:	ec53 2b10 	vmov	r2, r3, d0
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd fb70 	bl	800029c <__adddf3>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	a364      	add	r3, pc, #400	; (adr r3, 8002d58 <inverseKinematic+0x1358>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fb65 	bl	8000298 <__aeabi_dsub>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002bda:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002d50 <inverseKinematic+0x1350>
 8002bde:	eeb0 0a47 	vmov.f32	s0, s14
 8002be2:	eef0 0a67 	vmov.f32	s1, s15
 8002be6:	f00c fa0f 	bl	800f008 <pow>
 8002bea:	ec53 2b10 	vmov	r2, r3, d0
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fb53 	bl	800029c <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	a358      	add	r3, pc, #352	; (adr r3, 8002d60 <inverseKinematic+0x1360>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fb48 	bl	8000298 <__aeabi_dsub>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	a355      	add	r3, pc, #340	; (adr r3, 8002d68 <inverseKinematic+0x1368>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fb41 	bl	800029c <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	f7fd fb37 	bl	800029c <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f7fd fe11 	bl	800085c <__aeabi_ddiv>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	f7fd fb2b 	bl	800029c <__adddf3>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4958      	ldr	r1, [pc, #352]	; (8002dac <inverseKinematic+0x13ac>)
 8002c4c:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002c50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c54:	a348      	add	r3, pc, #288	; (adr r3, 8002d78 <inverseKinematic+0x1378>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fb1f 	bl	800029c <__adddf3>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	a346      	add	r3, pc, #280	; (adr r3, 8002d80 <inverseKinematic+0x1380>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fccc 	bl	8000608 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c7c:	a342      	add	r3, pc, #264	; (adr r3, 8002d88 <inverseKinematic+0x1388>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fb0b 	bl	800029c <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	f7fd fb03 	bl	800029c <__adddf3>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fafb 	bl	8000298 <__aeabi_dsub>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	a339      	add	r3, pc, #228	; (adr r3, 8002d90 <inverseKinematic+0x1390>)
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f7fd faf4 	bl	800029c <__adddf3>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	f7fd faea 	bl	800029c <__adddf3>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f7fd fdc4 	bl	800085c <__aeabi_ddiv>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <inverseKinematic+0x13b0>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fc91 	bl	8000608 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cf2:	a321      	add	r3, pc, #132	; (adr r3, 8002d78 <inverseKinematic+0x1378>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fad0 	bl	800029c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	ec43 2b17 	vmov	d7, r2, r3
 8002d04:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002d50 <inverseKinematic+0x1350>
 8002d08:	eeb0 0a47 	vmov.f32	s0, s14
 8002d0c:	eef0 0a67 	vmov.f32	s1, s15
 8002d10:	f00c f97a 	bl	800f008 <pow>
 8002d14:	ec51 0b10 	vmov	r0, r1, d0
 8002d18:	a31f      	add	r3, pc, #124	; (adr r3, 8002d98 <inverseKinematic+0x1398>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fabd 	bl	800029c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d2e:	a316      	add	r3, pc, #88	; (adr r3, 8002d88 <inverseKinematic+0x1388>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fab2 	bl	800029c <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	ec43 2b17 	vmov	d7, r2, r3
 8002d40:	e038      	b.n	8002db4 <inverseKinematic+0x13b4>
 8002d42:	bf00      	nop
 8002d44:	f3af 8000 	nop.w
 8002d48:	1eb851ec 	.word	0x1eb851ec
 8002d4c:	3fb1eb85 	.word	0x3fb1eb85
 8002d50:	00000000 	.word	0x00000000
 8002d54:	40000000 	.word	0x40000000
 8002d58:	70a3d70a 	.word	0x70a3d70a
 8002d5c:	3fd70a3d 	.word	0x3fd70a3d
 8002d60:	93d96639 	.word	0x93d96639
 8002d64:	3f9ce6c0 	.word	0x3f9ce6c0
 8002d68:	47ae147c 	.word	0x47ae147c
 8002d6c:	3fa47ae1 	.word	0x3fa47ae1
 8002d70:	24dd2f1b 	.word	0x24dd2f1b
 8002d74:	3fc58106 	.word	0x3fc58106
 8002d78:	5625749b 	.word	0x5625749b
 8002d7c:	3faf09d1 	.word	0x3faf09d1
 8002d80:	e8584caa 	.word	0xe8584caa
 8002d84:	c00bb67a 	.word	0xc00bb67a
 8002d88:	1eb851ec 	.word	0x1eb851ec
 8002d8c:	3fa1eb85 	.word	0x3fa1eb85
 8002d90:	24dd2f1d 	.word	0x24dd2f1d
 8002d94:	3fe58106 	.word	0x3fe58106
 8002d98:	f705857e 	.word	0xf705857e
 8002d9c:	3f881e03 	.word	0x3f881e03
 8002da0:	200002a0 	.word	0x200002a0
 8002da4:	200002b0 	.word	0x200002b0
 8002da8:	200002a8 	.word	0x200002a8
 8002dac:	200002b8 	.word	0x200002b8
 8002db0:	200002e8 	.word	0x200002e8
 8002db4:	ed9f 1be0 	vldr	d1, [pc, #896]	; 8003138 <inverseKinematic+0x1738>
 8002db8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dbc:	eef0 0a67 	vmov.f32	s1, s15
 8002dc0:	f00c f922 	bl	800f008 <pow>
 8002dc4:	ec53 2b10 	vmov	r2, r3, d0
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fa66 	bl	800029c <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002ddc:	ed9f 1bd6 	vldr	d1, [pc, #856]	; 8003138 <inverseKinematic+0x1738>
 8002de0:	eeb0 0a47 	vmov.f32	s0, s14
 8002de4:	eef0 0a67 	vmov.f32	s1, s15
 8002de8:	f00c f90e 	bl	800f008 <pow>
 8002dec:	ec53 2b10 	vmov	r2, r3, d0
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd fa52 	bl	800029c <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	a3d9      	add	r3, pc, #868	; (adr r3, 8003168 <inverseKinematic+0x1768>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fa47 	bl	8000298 <__aeabi_dsub>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4614      	mov	r4, r2
 8002e10:	461d      	mov	r5, r3
 8002e12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	f7fd fa3f 	bl	800029c <__adddf3>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fd19 	bl	800085c <__aeabi_ddiv>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4640      	mov	r0, r8
 8002e30:	4649      	mov	r1, r9
 8002e32:	f7fd fa33 	bl	800029c <__adddf3>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	49d7      	ldr	r1, [pc, #860]	; (8003198 <inverseKinematic+0x1798>)
 8002e3c:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002e40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e44:	a3be      	add	r3, pc, #760	; (adr r3, 8003140 <inverseKinematic+0x1740>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fa27 	bl	800029c <__adddf3>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	a3bc      	add	r3, pc, #752	; (adr r3, 8003148 <inverseKinematic+0x1748>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fbd4 	bl	8000608 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e6c:	a3b8      	add	r3, pc, #736	; (adr r3, 8003150 <inverseKinematic+0x1750>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fa13 	bl	800029c <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	f7fd fa0b 	bl	800029c <__adddf3>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7fd fa03 	bl	8000298 <__aeabi_dsub>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	a3af      	add	r3, pc, #700	; (adr r3, 8003158 <inverseKinematic+0x1758>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd f9fc 	bl	800029c <__adddf3>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	f7fd f9f2 	bl	800029c <__adddf3>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd fccc 	bl	800085c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4bb3      	ldr	r3, [pc, #716]	; (800319c <inverseKinematic+0x179c>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fb99 	bl	8000608 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4690      	mov	r8, r2
 8002edc:	4699      	mov	r9, r3
 8002ede:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ee2:	a397      	add	r3, pc, #604	; (adr r3, 8003140 <inverseKinematic+0x1740>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd f9d8 	bl	800029c <__adddf3>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	ec43 2b17 	vmov	d7, r2, r3
 8002ef4:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8003138 <inverseKinematic+0x1738>
 8002ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8002efc:	eef0 0a67 	vmov.f32	s1, s15
 8002f00:	f00c f882 	bl	800f008 <pow>
 8002f04:	ec51 0b10 	vmov	r0, r1, d0
 8002f08:	a395      	add	r3, pc, #596	; (adr r3, 8003160 <inverseKinematic+0x1760>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd f9c5 	bl	800029c <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4614      	mov	r4, r2
 8002f18:	461d      	mov	r5, r3
 8002f1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f1e:	a38c      	add	r3, pc, #560	; (adr r3, 8003150 <inverseKinematic+0x1750>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd f9ba 	bl	800029c <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	ec43 2b17 	vmov	d7, r2, r3
 8002f30:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8003138 <inverseKinematic+0x1738>
 8002f34:	eeb0 0a47 	vmov.f32	s0, s14
 8002f38:	eef0 0a67 	vmov.f32	s1, s15
 8002f3c:	f00c f864 	bl	800f008 <pow>
 8002f40:	ec53 2b10 	vmov	r2, r3, d0
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f9a8 	bl	800029c <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4614      	mov	r4, r2
 8002f52:	461d      	mov	r5, r3
 8002f54:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002f58:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003138 <inverseKinematic+0x1738>
 8002f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f60:	eef0 0a67 	vmov.f32	s1, s15
 8002f64:	f00c f850 	bl	800f008 <pow>
 8002f68:	ec53 2b10 	vmov	r2, r3, d0
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	4629      	mov	r1, r5
 8002f70:	f7fd f994 	bl	800029c <__adddf3>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	a37a      	add	r3, pc, #488	; (adr r3, 8003168 <inverseKinematic+0x1768>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd f989 	bl	8000298 <__aeabi_dsub>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4614      	mov	r4, r2
 8002f8c:	461d      	mov	r5, r3
 8002f8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	f7fd f981 	bl	800029c <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7fd fc5b 	bl	800085c <__aeabi_ddiv>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4640      	mov	r0, r8
 8002fac:	4649      	mov	r1, r9
 8002fae:	f7fd f975 	bl	800029c <__adddf3>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	497a      	ldr	r1, [pc, #488]	; (80031a0 <inverseKinematic+0x17a0>)
 8002fb8:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8002fbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fc0:	a35f      	add	r3, pc, #380	; (adr r3, 8003140 <inverseKinematic+0x1740>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd f967 	bl	8000298 <__aeabi_dsub>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	a367      	add	r3, pc, #412	; (adr r3, 8003170 <inverseKinematic+0x1770>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb16 	bl	8000608 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fe8:	a359      	add	r3, pc, #356	; (adr r3, 8003150 <inverseKinematic+0x1750>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd f955 	bl	800029c <__adddf3>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	f7fd f94d 	bl	800029c <__adddf3>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd f945 	bl	8000298 <__aeabi_dsub>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	a358      	add	r3, pc, #352	; (adr r3, 8003178 <inverseKinematic+0x1778>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd f93e 	bl	800029c <__adddf3>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	a355      	add	r3, pc, #340	; (adr r3, 8003180 <inverseKinematic+0x1780>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd f935 	bl	800029c <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4614      	mov	r4, r2
 8003038:	461d      	mov	r5, r3
 800303a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	f7fd f92b 	bl	800029c <__adddf3>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4620      	mov	r0, r4
 800304c:	4629      	mov	r1, r5
 800304e:	f7fd fc05 	bl	800085c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <inverseKinematic+0x17a4>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fad2 	bl	8000608 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4690      	mov	r8, r2
 800306a:	4699      	mov	r9, r3
 800306c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003070:	a333      	add	r3, pc, #204	; (adr r3, 8003140 <inverseKinematic+0x1740>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd f90f 	bl	8000298 <__aeabi_dsub>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	ec43 2b17 	vmov	d7, r2, r3
 8003082:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8003138 <inverseKinematic+0x1738>
 8003086:	eeb0 0a47 	vmov.f32	s0, s14
 800308a:	eef0 0a67 	vmov.f32	s1, s15
 800308e:	f00b ffbb 	bl	800f008 <pow>
 8003092:	ec55 4b10 	vmov	r4, r5, d0
 8003096:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800309a:	a32d      	add	r3, pc, #180	; (adr r3, 8003150 <inverseKinematic+0x1750>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd f8fc 	bl	800029c <__adddf3>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	ec43 2b17 	vmov	d7, r2, r3
 80030ac:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8003138 <inverseKinematic+0x1738>
 80030b0:	eeb0 0a47 	vmov.f32	s0, s14
 80030b4:	eef0 0a67 	vmov.f32	s1, s15
 80030b8:	f00b ffa6 	bl	800f008 <pow>
 80030bc:	ec53 2b10 	vmov	r2, r3, d0
 80030c0:	4620      	mov	r0, r4
 80030c2:	4629      	mov	r1, r5
 80030c4:	f7fd f8ea 	bl	800029c <__adddf3>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	461d      	mov	r5, r3
 80030d0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80030d4:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003138 <inverseKinematic+0x1738>
 80030d8:	eeb0 0a47 	vmov.f32	s0, s14
 80030dc:	eef0 0a67 	vmov.f32	s1, s15
 80030e0:	f00b ff92 	bl	800f008 <pow>
 80030e4:	ec53 2b10 	vmov	r2, r3, d0
 80030e8:	4620      	mov	r0, r4
 80030ea:	4629      	mov	r1, r5
 80030ec:	f7fd f8d6 	bl	800029c <__adddf3>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	a31b      	add	r3, pc, #108	; (adr r3, 8003168 <inverseKinematic+0x1768>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f7fd f8cb 	bl	8000298 <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	a31f      	add	r3, pc, #124	; (adr r3, 8003188 <inverseKinematic+0x1788>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd f8c2 	bl	8000298 <__aeabi_dsub>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	a31c      	add	r3, pc, #112	; (adr r3, 8003190 <inverseKinematic+0x1790>)
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f7fd f8bb 	bl	800029c <__adddf3>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4614      	mov	r4, r2
 800312c:	461d      	mov	r5, r3
 800312e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	e037      	b.n	80031a8 <inverseKinematic+0x17a8>
 8003138:	00000000 	.word	0x00000000
 800313c:	40000000 	.word	0x40000000
 8003140:	5625749b 	.word	0x5625749b
 8003144:	3faf09d1 	.word	0x3faf09d1
 8003148:	e8584caa 	.word	0xe8584caa
 800314c:	c00bb67a 	.word	0xc00bb67a
 8003150:	1eb851ec 	.word	0x1eb851ec
 8003154:	3fa1eb85 	.word	0x3fa1eb85
 8003158:	24dd2f1d 	.word	0x24dd2f1d
 800315c:	3fe58106 	.word	0x3fe58106
 8003160:	f705857e 	.word	0xf705857e
 8003164:	3f881e03 	.word	0x3f881e03
 8003168:	70a3d70a 	.word	0x70a3d70a
 800316c:	3fd70a3d 	.word	0x3fd70a3d
 8003170:	e8584caa 	.word	0xe8584caa
 8003174:	400bb67a 	.word	0x400bb67a
 8003178:	9ba5e356 	.word	0x9ba5e356
 800317c:	3fe020c4 	.word	0x3fe020c4
 8003180:	24dd2f1b 	.word	0x24dd2f1b
 8003184:	3fc58106 	.word	0x3fc58106
 8003188:	93d96639 	.word	0x93d96639
 800318c:	3f9ce6c0 	.word	0x3f9ce6c0
 8003190:	47ae147c 	.word	0x47ae147c
 8003194:	3fa47ae1 	.word	0x3fa47ae1
 8003198:	200002f8 	.word	0x200002f8
 800319c:	200002f0 	.word	0x200002f0
 80031a0:	20000300 	.word	0x20000300
 80031a4:	20000330 	.word	0x20000330
 80031a8:	f7fd f878 	bl	800029c <__adddf3>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd fb52 	bl	800085c <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4640      	mov	r0, r8
 80031be:	4649      	mov	r1, r9
 80031c0:	f7fd f86c 	bl	800029c <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	49cf      	ldr	r1, [pc, #828]	; (8003508 <inverseKinematic+0x1b08>)
 80031ca:	e9c1 2300 	strd	r2, r3, [r1]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80031ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031d2:	a3b7      	add	r3, pc, #732	; (adr r3, 80034b0 <inverseKinematic+0x1ab0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd f85e 	bl	8000298 <__aeabi_dsub>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	a3b4      	add	r3, pc, #720	; (adr r3, 80034b8 <inverseKinematic+0x1ab8>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd fa0d 	bl	8000608 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	461d      	mov	r5, r3
 80031f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031fa:	a3b1      	add	r3, pc, #708	; (adr r3, 80034c0 <inverseKinematic+0x1ac0>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd f84c 	bl	800029c <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	f7fd f844 	bl	800029c <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4620      	mov	r0, r4
 800321a:	4629      	mov	r1, r5
 800321c:	f7fd f83c 	bl	8000298 <__aeabi_dsub>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	a3a7      	add	r3, pc, #668	; (adr r3, 80034c8 <inverseKinematic+0x1ac8>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fd f835 	bl	800029c <__adddf3>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	a3a5      	add	r3, pc, #660	; (adr r3, 80034d0 <inverseKinematic+0x1ad0>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f7fd f82c 	bl	800029c <__adddf3>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	f7fd f822 	bl	800029c <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fd fafc 	bl	800085c <__aeabi_ddiv>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	4ba7      	ldr	r3, [pc, #668]	; (800350c <inverseKinematic+0x1b0c>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd f9c9 	bl	8000608 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4690      	mov	r8, r2
 800327c:	4699      	mov	r9, r3
 800327e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003282:	a38b      	add	r3, pc, #556	; (adr r3, 80034b0 <inverseKinematic+0x1ab0>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fd f806 	bl	8000298 <__aeabi_dsub>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	ec43 2b17 	vmov	d7, r2, r3
 8003294:	ed9f 1b90 	vldr	d1, [pc, #576]	; 80034d8 <inverseKinematic+0x1ad8>
 8003298:	eeb0 0a47 	vmov.f32	s0, s14
 800329c:	eef0 0a67 	vmov.f32	s1, s15
 80032a0:	f00b feb2 	bl	800f008 <pow>
 80032a4:	ec55 4b10 	vmov	r4, r5, d0
 80032a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032ac:	a384      	add	r3, pc, #528	; (adr r3, 80034c0 <inverseKinematic+0x1ac0>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f7fc fff3 	bl	800029c <__adddf3>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	ec43 2b17 	vmov	d7, r2, r3
 80032be:	ed9f 1b86 	vldr	d1, [pc, #536]	; 80034d8 <inverseKinematic+0x1ad8>
 80032c2:	eeb0 0a47 	vmov.f32	s0, s14
 80032c6:	eef0 0a67 	vmov.f32	s1, s15
 80032ca:	f00b fe9d 	bl	800f008 <pow>
 80032ce:	ec53 2b10 	vmov	r2, r3, d0
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fc ffe1 	bl	800029c <__adddf3>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80032e6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 80034d8 <inverseKinematic+0x1ad8>
 80032ea:	eeb0 0a47 	vmov.f32	s0, s14
 80032ee:	eef0 0a67 	vmov.f32	s1, s15
 80032f2:	f00b fe89 	bl	800f008 <pow>
 80032f6:	ec53 2b10 	vmov	r2, r3, d0
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f7fc ffcd 	bl	800029c <__adddf3>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	a375      	add	r3, pc, #468	; (adr r3, 80034e0 <inverseKinematic+0x1ae0>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fc ffc2 	bl	8000298 <__aeabi_dsub>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	a372      	add	r3, pc, #456	; (adr r3, 80034e8 <inverseKinematic+0x1ae8>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fc ffb9 	bl	8000298 <__aeabi_dsub>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	a370      	add	r3, pc, #448	; (adr r3, 80034f0 <inverseKinematic+0x1af0>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fc ffb2 	bl	800029c <__adddf3>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	f7fc ffa8 	bl	800029c <__adddf3>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4620      	mov	r0, r4
 8003352:	4629      	mov	r1, r5
 8003354:	f7fd fa82 	bl	800085c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4640      	mov	r0, r8
 800335e:	4649      	mov	r1, r9
 8003360:	f7fc ff9c 	bl	800029c <__adddf3>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4969      	ldr	r1, [pc, #420]	; (8003510 <inverseKinematic+0x1b10>)
 800336a:	e9c1 2300 	strd	r2, r3, [r1]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800336e:	4b69      	ldr	r3, [pc, #420]	; (8003514 <inverseKinematic+0x1b14>)
 8003370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003374:	a360      	add	r3, pc, #384	; (adr r3, 80034f8 <inverseKinematic+0x1af8>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd fa6f 	bl	800085c <__aeabi_ddiv>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	ec43 2b17 	vmov	d7, r2, r3
 8003386:	eeb0 0a47 	vmov.f32	s0, s14
 800338a:	eef0 0a67 	vmov.f32	s1, s15
 800338e:	f00b fe07 	bl	800efa0 <asin>
 8003392:	ec53 2b10 	vmov	r2, r3, d0
 8003396:	613a      	str	r2, [r7, #16]
 8003398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <inverseKinematic+0x1b18>)
 80033a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80033a4:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80033a8:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <inverseKinematic+0x1b18>)
 80033aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4b5a      	ldr	r3, [pc, #360]	; (800351c <inverseKinematic+0x1b1c>)
 80033b4:	f7fd f928 	bl	8000608 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	a34f      	add	r3, pc, #316	; (adr r3, 8003500 <inverseKinematic+0x1b00>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f7fd fa49 	bl	800085c <__aeabi_ddiv>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4952      	ldr	r1, [pc, #328]	; (8003518 <inverseKinematic+0x1b18>)
 80033d0:	e9c1 2300 	strd	r2, r3, [r1]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80033d4:	4b52      	ldr	r3, [pc, #328]	; (8003520 <inverseKinematic+0x1b20>)
 80033d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033da:	a347      	add	r3, pc, #284	; (adr r3, 80034f8 <inverseKinematic+0x1af8>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fd fa3c 	bl	800085c <__aeabi_ddiv>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	ec43 2b17 	vmov	d7, r2, r3
 80033ec:	eeb0 0a47 	vmov.f32	s0, s14
 80033f0:	eef0 0a67 	vmov.f32	s1, s15
 80033f4:	f00b fdd4 	bl	800efa0 <asin>
 80033f8:	ec53 2b10 	vmov	r2, r3, d0
 80033fc:	60ba      	str	r2, [r7, #8]
 80033fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	4b47      	ldr	r3, [pc, #284]	; (8003524 <inverseKinematic+0x1b24>)
 8003406:	ed97 7b02 	vldr	d7, [r7, #8]
 800340a:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <inverseKinematic+0x1b24>)
 8003410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b40      	ldr	r3, [pc, #256]	; (800351c <inverseKinematic+0x1b1c>)
 800341a:	f7fd f8f5 	bl	8000608 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	a336      	add	r3, pc, #216	; (adr r3, 8003500 <inverseKinematic+0x1b00>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fd fa16 	bl	800085c <__aeabi_ddiv>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	493b      	ldr	r1, [pc, #236]	; (8003524 <inverseKinematic+0x1b24>)
 8003436:	e9c1 2300 	strd	r2, r3, [r1]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <inverseKinematic+0x1b08>)
 800343c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003440:	a32d      	add	r3, pc, #180	; (adr r3, 80034f8 <inverseKinematic+0x1af8>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd fa09 	bl	800085c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	ec43 2b17 	vmov	d7, r2, r3
 8003452:	eeb0 0a47 	vmov.f32	s0, s14
 8003456:	eef0 0a67 	vmov.f32	s1, s15
 800345a:	f00b fda1 	bl	800efa0 <asin>
 800345e:	ec53 2b10 	vmov	r2, r3, d0
 8003462:	603a      	str	r2, [r7, #0]
 8003464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <inverseKinematic+0x1b28>)
 800346c:	ed97 7b00 	vldr	d7, [r7]
 8003470:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8003474:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <inverseKinematic+0x1b28>)
 8003476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <inverseKinematic+0x1b1c>)
 8003480:	f7fd f8c2 	bl	8000608 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	a31c      	add	r3, pc, #112	; (adr r3, 8003500 <inverseKinematic+0x1b00>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd f9e3 	bl	800085c <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4923      	ldr	r1, [pc, #140]	; (8003528 <inverseKinematic+0x1b28>)
 800349c:	e9c1 2300 	strd	r2, r3, [r1]
}
 80034a0:	bf00      	nop
 80034a2:	3740      	adds	r7, #64	; 0x40
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	f3af 8000 	nop.w
 80034b0:	5625749b 	.word	0x5625749b
 80034b4:	3faf09d1 	.word	0x3faf09d1
 80034b8:	e8584caa 	.word	0xe8584caa
 80034bc:	400bb67a 	.word	0x400bb67a
 80034c0:	1eb851ec 	.word	0x1eb851ec
 80034c4:	3fa1eb85 	.word	0x3fa1eb85
 80034c8:	9ba5e356 	.word	0x9ba5e356
 80034cc:	3fe020c4 	.word	0x3fe020c4
 80034d0:	24dd2f1b 	.word	0x24dd2f1b
 80034d4:	3fc58106 	.word	0x3fc58106
 80034d8:	00000000 	.word	0x00000000
 80034dc:	40000000 	.word	0x40000000
 80034e0:	70a3d70a 	.word	0x70a3d70a
 80034e4:	3fd70a3d 	.word	0x3fd70a3d
 80034e8:	93d96639 	.word	0x93d96639
 80034ec:	3f9ce6c0 	.word	0x3f9ce6c0
 80034f0:	47ae147c 	.word	0x47ae147c
 80034f4:	3fa47ae1 	.word	0x3fa47ae1
 80034f8:	9999999a 	.word	0x9999999a
 80034fc:	3fc99999 	.word	0x3fc99999
 8003500:	54442eea 	.word	0x54442eea
 8003504:	400921fb 	.word	0x400921fb
 8003508:	20000340 	.word	0x20000340
 800350c:	20000338 	.word	0x20000338
 8003510:	20000348 	.word	0x20000348
 8003514:	200002b0 	.word	0x200002b0
 8003518:	200005d8 	.word	0x200005d8
 800351c:	40668000 	.word	0x40668000
 8003520:	200002f8 	.word	0x200002f8
 8003524:	20000620 	.word	0x20000620
 8003528:	20000668 	.word	0x20000668

0800352c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003530:	f004 ff4e 	bl	80083d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003534:	f000 f818 	bl	8003568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003538:	f000 fbbe 	bl	8003cb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800353c:	f000 fb92 	bl	8003c64 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003540:	f000 f87e 	bl	8003640 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003544:	f000 f91c 	bl	8003780 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003548:	f000 f966 	bl	8003818 <MX_TIM3_Init>
  MX_TIM5_Init();
 800354c:	f000 fa50 	bl	80039f0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8003550:	f000 fabe 	bl	8003ad0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003554:	f000 faf6 	bl	8003b44 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003558:	f000 fb3c 	bl	8003bd4 <MX_TIM11_Init>
  MX_TIM4_Init();
 800355c:	f000 f9d2 	bl	8003904 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statesMachineLoop();
 8003560:	f000 fff2 	bl	8004548 <statesMachineLoop>
 8003564:	e7fc      	b.n	8003560 <main+0x34>
	...

08003568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b094      	sub	sp, #80	; 0x50
 800356c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800356e:	f107 0320 	add.w	r3, r7, #32
 8003572:	2230      	movs	r2, #48	; 0x30
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f008 fe4c 	bl	800c214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <SystemClock_Config+0xd0>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a28      	ldr	r2, [pc, #160]	; (8003638 <SystemClock_Config+0xd0>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	; 0x40
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <SystemClock_Config+0xd0>)
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a8:	2300      	movs	r3, #0
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <SystemClock_Config+0xd4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <SystemClock_Config+0xd4>)
 80035b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <SystemClock_Config+0xd4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80035c4:	2303      	movs	r3, #3
 80035c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80035c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035d2:	2310      	movs	r3, #16
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035d6:	2302      	movs	r3, #2
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035da:	2300      	movs	r3, #0
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035de:	2308      	movs	r3, #8
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80035e2:	2340      	movs	r3, #64	; 0x40
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035e6:	2302      	movs	r3, #2
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035ea:	2304      	movs	r3, #4
 80035ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ee:	f107 0320 	add.w	r3, r7, #32
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 fb40 	bl	8008c78 <HAL_RCC_OscConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80035fe:	f000 fec9 	bl	8004394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003602:	230f      	movs	r3, #15
 8003604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003606:	2302      	movs	r3, #2
 8003608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800360e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	2102      	movs	r1, #2
 800361e:	4618      	mov	r0, r3
 8003620:	f005 fda2 	bl	8009168 <HAL_RCC_ClockConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800362a:	f000 feb3 	bl	8004394 <Error_Handler>
  }
}
 800362e:	bf00      	nop
 8003630:	3750      	adds	r7, #80	; 0x50
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40007000 	.word	0x40007000

08003640 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b096      	sub	sp, #88	; 0x58
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	611a      	str	r2, [r3, #16]
 800366e:	615a      	str	r2, [r3, #20]
 8003670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	2220      	movs	r2, #32
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f008 fdcb 	bl	800c214 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <MX_TIM1_Init+0x138>)
 8003680:	4a3e      	ldr	r2, [pc, #248]	; (800377c <MX_TIM1_Init+0x13c>)
 8003682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8003684:	4b3c      	ldr	r3, [pc, #240]	; (8003778 <MX_TIM1_Init+0x138>)
 8003686:	223f      	movs	r2, #63	; 0x3f
 8003688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <MX_TIM1_Init+0x138>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <MX_TIM1_Init+0x138>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003696:	4b38      	ldr	r3, [pc, #224]	; (8003778 <MX_TIM1_Init+0x138>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800369c:	4b36      	ldr	r3, [pc, #216]	; (8003778 <MX_TIM1_Init+0x138>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a2:	4b35      	ldr	r3, [pc, #212]	; (8003778 <MX_TIM1_Init+0x138>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036a8:	4833      	ldr	r0, [pc, #204]	; (8003778 <MX_TIM1_Init+0x138>)
 80036aa:	f006 f86d 	bl	8009788 <HAL_TIM_Base_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80036b4:	f000 fe6e 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036c2:	4619      	mov	r1, r3
 80036c4:	482c      	ldr	r0, [pc, #176]	; (8003778 <MX_TIM1_Init+0x138>)
 80036c6:	f006 ff69 	bl	800a59c <HAL_TIM_ConfigClockSource>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80036d0:	f000 fe60 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036d4:	4828      	ldr	r0, [pc, #160]	; (8003778 <MX_TIM1_Init+0x138>)
 80036d6:	f006 f9ba 	bl	8009a4e <HAL_TIM_PWM_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80036e0:	f000 fe58 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036f0:	4619      	mov	r1, r3
 80036f2:	4821      	ldr	r0, [pc, #132]	; (8003778 <MX_TIM1_Init+0x138>)
 80036f4:	f007 fc22 	bl	800af3c <HAL_TIMEx_MasterConfigSynchronization>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80036fe:	f000 fe49 	bl	8004394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003702:	2360      	movs	r3, #96	; 0x60
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800370e:	2300      	movs	r3, #0
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800371e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003722:	2200      	movs	r2, #0
 8003724:	4619      	mov	r1, r3
 8003726:	4814      	ldr	r0, [pc, #80]	; (8003778 <MX_TIM1_Init+0x138>)
 8003728:	f006 fe76 	bl	800a418 <HAL_TIM_PWM_ConfigChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003732:	f000 fe2f 	bl	8004394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800374a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800374e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4807      	ldr	r0, [pc, #28]	; (8003778 <MX_TIM1_Init+0x138>)
 800375a:	f007 fc5d 	bl	800b018 <HAL_TIMEx_ConfigBreakDeadTime>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003764:	f000 fe16 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003768:	4803      	ldr	r0, [pc, #12]	; (8003778 <MX_TIM1_Init+0x138>)
 800376a:	f002 f82b 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 800376e:	bf00      	nop
 8003770:	3758      	adds	r7, #88	; 0x58
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000350 	.word	0x20000350
 800377c:	40010000 	.word	0x40010000

08003780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003794:	463b      	mov	r3, r7
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <MX_TIM2_Init+0x94>)
 800379e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <MX_TIM2_Init+0x94>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <MX_TIM2_Init+0x94>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <MX_TIM2_Init+0x94>)
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
 80037b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <MX_TIM2_Init+0x94>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_TIM2_Init+0x94>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037c4:	4813      	ldr	r0, [pc, #76]	; (8003814 <MX_TIM2_Init+0x94>)
 80037c6:	f005 ffdf 	bl	8009788 <HAL_TIM_Base_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037d0:	f000 fde0 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4619      	mov	r1, r3
 80037e0:	480c      	ldr	r0, [pc, #48]	; (8003814 <MX_TIM2_Init+0x94>)
 80037e2:	f006 fedb 	bl	800a59c <HAL_TIM_ConfigClockSource>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037ec:	f000 fdd2 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037f8:	463b      	mov	r3, r7
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <MX_TIM2_Init+0x94>)
 80037fe:	f007 fb9d 	bl	800af3c <HAL_TIMEx_MasterConfigSynchronization>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003808:	f000 fdc4 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000398 	.word	0x20000398

08003818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	; 0x38
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800381e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800382c:	f107 0320 	add.w	r3, r7, #32
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]
 8003846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <MX_TIM3_Init+0xe4>)
 800384a:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <MX_TIM3_Init+0xe8>)
 800384c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <MX_TIM3_Init+0xe4>)
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <MX_TIM3_Init+0xe4>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800385a:	4b28      	ldr	r3, [pc, #160]	; (80038fc <MX_TIM3_Init+0xe4>)
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <MX_TIM3_Init+0xe4>)
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <MX_TIM3_Init+0xe4>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800386c:	4823      	ldr	r0, [pc, #140]	; (80038fc <MX_TIM3_Init+0xe4>)
 800386e:	f005 ff8b 	bl	8009788 <HAL_TIM_Base_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003878:	f000 fd8c 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800387c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003886:	4619      	mov	r1, r3
 8003888:	481c      	ldr	r0, [pc, #112]	; (80038fc <MX_TIM3_Init+0xe4>)
 800388a:	f006 fe87 	bl	800a59c <HAL_TIM_ConfigClockSource>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003894:	f000 fd7e 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003898:	4818      	ldr	r0, [pc, #96]	; (80038fc <MX_TIM3_Init+0xe4>)
 800389a:	f006 f8d8 	bl	8009a4e <HAL_TIM_PWM_Init>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80038a4:	f000 fd76 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038b0:	f107 0320 	add.w	r3, r7, #32
 80038b4:	4619      	mov	r1, r3
 80038b6:	4811      	ldr	r0, [pc, #68]	; (80038fc <MX_TIM3_Init+0xe4>)
 80038b8:	f007 fb40 	bl	800af3c <HAL_TIMEx_MasterConfigSynchronization>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80038c2:	f000 fd67 	bl	8004394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038c6:	2360      	movs	r3, #96	; 0x60
 80038c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	2200      	movs	r2, #0
 80038da:	4619      	mov	r1, r3
 80038dc:	4807      	ldr	r0, [pc, #28]	; (80038fc <MX_TIM3_Init+0xe4>)
 80038de:	f006 fd9b 	bl	800a418 <HAL_TIM_PWM_ConfigChannel>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80038e8:	f000 fd54 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80038ec:	4803      	ldr	r0, [pc, #12]	; (80038fc <MX_TIM3_Init+0xe4>)
 80038ee:	f001 ff69 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 80038f2:	bf00      	nop
 80038f4:	3738      	adds	r7, #56	; 0x38
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200003e0 	.word	0x200003e0
 8003900:	40000400 	.word	0x40000400

08003904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	; 0x38
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003918:	f107 0320 	add.w	r3, r7, #32
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
 8003930:	615a      	str	r2, [r3, #20]
 8003932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <MX_TIM4_Init+0xe8>)
 8003938:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 800393a:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <MX_TIM4_Init+0xe4>)
 800393c:	223f      	movs	r2, #63	; 0x3f
 800393e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003940:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003942:	2200      	movs	r2, #0
 8003944:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000;
 8003946:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003948:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800394c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800395a:	4823      	ldr	r0, [pc, #140]	; (80039e8 <MX_TIM4_Init+0xe4>)
 800395c:	f005 ff14 	bl	8009788 <HAL_TIM_Base_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003966:	f000 fd15 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800396a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003974:	4619      	mov	r1, r3
 8003976:	481c      	ldr	r0, [pc, #112]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003978:	f006 fe10 	bl	800a59c <HAL_TIM_ConfigClockSource>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003982:	f000 fd07 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003986:	4818      	ldr	r0, [pc, #96]	; (80039e8 <MX_TIM4_Init+0xe4>)
 8003988:	f006 f861 	bl	8009a4e <HAL_TIM_PWM_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003992:	f000 fcff 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800399e:	f107 0320 	add.w	r3, r7, #32
 80039a2:	4619      	mov	r1, r3
 80039a4:	4810      	ldr	r0, [pc, #64]	; (80039e8 <MX_TIM4_Init+0xe4>)
 80039a6:	f007 fac9 	bl	800af3c <HAL_TIMEx_MasterConfigSynchronization>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80039b0:	f000 fcf0 	bl	8004394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b4:	2360      	movs	r3, #96	; 0x60
 80039b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	2200      	movs	r2, #0
 80039c8:	4619      	mov	r1, r3
 80039ca:	4807      	ldr	r0, [pc, #28]	; (80039e8 <MX_TIM4_Init+0xe4>)
 80039cc:	f006 fd24 	bl	800a418 <HAL_TIM_PWM_ConfigChannel>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80039d6:	f000 fcdd 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039da:	4803      	ldr	r0, [pc, #12]	; (80039e8 <MX_TIM4_Init+0xe4>)
 80039dc:	f001 fef2 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 80039e0:	bf00      	nop
 80039e2:	3738      	adds	r7, #56	; 0x38
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000428 	.word	0x20000428
 80039ec:	40000800 	.word	0x40000800

080039f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f6:	f107 0318 	add.w	r3, r7, #24
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003a0e:	463b      	mov	r3, r7
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <MX_TIM5_Init+0xdc>)
 8003a1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003a20:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003a2c:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a40:	4821      	ldr	r0, [pc, #132]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a42:	f005 fea1 	bl	8009788 <HAL_TIM_Base_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003a4c:	f000 fca2 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a54:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a56:	f107 0318 	add.w	r3, r7, #24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	481a      	ldr	r0, [pc, #104]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a5e:	f006 fd9d 	bl	800a59c <HAL_TIM_ConfigClockSource>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003a68:	f000 fc94 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003a6c:	4816      	ldr	r0, [pc, #88]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a6e:	f006 f95b 	bl	8009d28 <HAL_TIM_IC_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003a78:	f000 fc8c 	bl	8004394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a84:	f107 0310 	add.w	r3, r7, #16
 8003a88:	4619      	mov	r1, r3
 8003a8a:	480f      	ldr	r0, [pc, #60]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003a8c:	f007 fa56 	bl	800af3c <HAL_TIMEx_MasterConfigSynchronization>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8003a96:	f000 fc7d 	bl	8004394 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003aaa:	463b      	mov	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_TIM5_Init+0xd8>)
 8003ab2:	f006 fc15 	bl	800a2e0 <HAL_TIM_IC_ConfigChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8003abc:	f000 fc6a 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000470 	.word	0x20000470
 8003acc:	40000c00 	.word	0x40000c00

08003ad0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <MX_TIM9_Init+0x70>)
 8003ae6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64000;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003af6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003afa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b08:	480c      	ldr	r0, [pc, #48]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003b0a:	f005 fe3d 	bl	8009788 <HAL_TIM_Base_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003b14:	f000 fc3e 	bl	8004394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b1e:	463b      	mov	r3, r7
 8003b20:	4619      	mov	r1, r3
 8003b22:	4806      	ldr	r0, [pc, #24]	; (8003b3c <MX_TIM9_Init+0x6c>)
 8003b24:	f006 fd3a 	bl	800a59c <HAL_TIM_ConfigClockSource>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003b2e:	f000 fc31 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200004b8 	.word	0x200004b8
 8003b40:	40014000 	.word	0x40014000

08003b44 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <MX_TIM10_Init+0x8c>)
 8003b5a:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003b7c:	4813      	ldr	r0, [pc, #76]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b7e:	f005 fe03 	bl	8009788 <HAL_TIM_Base_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8003b88:	f000 fc04 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8003b8c:	480f      	ldr	r0, [pc, #60]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003b8e:	f006 f8cb 	bl	8009d28 <HAL_TIM_IC_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8003b98:	f000 fbfc 	bl	8004394 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003bac:	463b      	mov	r3, r7
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4806      	ldr	r0, [pc, #24]	; (8003bcc <MX_TIM10_Init+0x88>)
 8003bb4:	f006 fb94 	bl	800a2e0 <HAL_TIM_IC_ConfigChannel>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8003bbe:	f000 fbe9 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000500 	.word	0x20000500
 8003bd0:	40014400 	.word	0x40014400

08003bd4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003bda:	463b      	mov	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <MX_TIM11_Init+0x8c>)
 8003bea:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003bf8:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bfe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c0c:	4813      	ldr	r0, [pc, #76]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003c0e:	f005 fdbb 	bl	8009788 <HAL_TIM_Base_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8003c18:	f000 fbbc 	bl	8004394 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8003c1c:	480f      	ldr	r0, [pc, #60]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003c1e:	f006 f883 	bl	8009d28 <HAL_TIM_IC_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8003c28:	f000 fbb4 	bl	8004394 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c30:	2301      	movs	r3, #1
 8003c32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4619      	mov	r1, r3
 8003c42:	4806      	ldr	r0, [pc, #24]	; (8003c5c <MX_TIM11_Init+0x88>)
 8003c44:	f006 fb4c 	bl	800a2e0 <HAL_TIM_IC_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8003c4e:	f000 fba1 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000548 	.word	0x20000548
 8003c60:	40014800 	.word	0x40014800

08003c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <MX_USART2_UART_Init+0x50>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <MX_USART2_UART_Init+0x4c>)
 8003c9c:	f007 fa22 	bl	800b0e4 <HAL_UART_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ca6:	f000 fb75 	bl	8004394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000590 	.word	0x20000590
 8003cb4:	40004400 	.word	0x40004400

08003cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a62      	ldr	r2, [pc, #392]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b60      	ldr	r3, [pc, #384]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b52      	ldr	r3, [pc, #328]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d48:	f043 0308 	orr.w	r3, r3, #8
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <MX_GPIO_Init+0x1c4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f240 1163 	movw	r1, #355	; 0x163
 8003d60:	4847      	ldr	r0, [pc, #284]	; (8003e80 <MX_GPIO_Init+0x1c8>)
 8003d62:	f004 ff3d 	bl	8008be0 <HAL_GPIO_WritePin>
                          |S_Enable_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4846      	ldr	r0, [pc, #280]	; (8003e84 <MX_GPIO_Init+0x1cc>)
 8003d6c:	f004 ff38 	bl	8008be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4619      	mov	r1, r3
 8003d86:	483e      	ldr	r0, [pc, #248]	; (8003e80 <MX_GPIO_Init+0x1c8>)
 8003d88:	f004 fd8e 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S_DirPaP3_Pin S_DirPaP2_Pin S_Enable_3_Pin S_Enable_2_Pin
                           S_Enable_1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP3_Pin|S_DirPaP2_Pin|S_Enable_3_Pin|S_Enable_2_Pin
 8003d8c:	f240 1363 	movw	r3, #355	; 0x163
 8003d90:	617b      	str	r3, [r7, #20]
                          |S_Enable_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	4619      	mov	r1, r3
 8003da4:	4836      	ldr	r0, [pc, #216]	; (8003e80 <MX_GPIO_Init+0x1c8>)
 8003da6:	f004 fd7f 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : faultDriver3_Pin */
  GPIO_InitStruct.Pin = faultDriver3_Pin;
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(faultDriver3_GPIO_Port, &GPIO_InitStruct);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4832      	ldr	r0, [pc, #200]	; (8003e88 <MX_GPIO_Init+0x1d0>)
 8003dc0:	f004 fd72 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_DirPaP1_Pin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_DirPaP1_GPIO_Port, &GPIO_InitStruct);
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	4619      	mov	r1, r3
 8003dda:	482a      	ldr	r0, [pc, #168]	; (8003e84 <MX_GPIO_Init+0x1cc>)
 8003ddc:	f004 fd64 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : faultDriver2_Pin faultDriver1_Pin E_EndStop1_Sup_Pin E_EndStop1_Inf_Pin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
 8003de0:	f24c 0330 	movw	r3, #49200	; 0xc030
 8003de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003de6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4619      	mov	r1, r3
 8003df6:	4823      	ldr	r0, [pc, #140]	; (8003e84 <MX_GPIO_Init+0x1cc>)
 8003df8:	f004 fd56 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_EndStop3_Sup_Pin E_EndStop2_Sup_Pin E_EndStop3_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop2_Sup_Pin|E_EndStop3_Inf_Pin;
 8003dfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4619      	mov	r1, r3
 8003e12:	481b      	ldr	r0, [pc, #108]	; (8003e80 <MX_GPIO_Init+0x1c8>)
 8003e14:	f004 fd48 	bl	80088a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_EndStop2_Inf_Pin */
  GPIO_InitStruct.Pin = E_EndStop2_Inf_Pin;
 8003e18:	2304      	movs	r3, #4
 8003e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_EndStop2_Inf_GPIO_Port, &GPIO_InitStruct);
 8003e26:	f107 0314 	add.w	r3, r7, #20
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4817      	ldr	r0, [pc, #92]	; (8003e8c <MX_GPIO_Init+0x1d4>)
 8003e2e:	f004 fd3b 	bl	80088a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2101      	movs	r1, #1
 8003e36:	2008      	movs	r0, #8
 8003e38:	f004 fc5f 	bl	80086fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003e3c:	2008      	movs	r0, #8
 8003e3e:	f004 fc78 	bl	8008732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2101      	movs	r1, #1
 8003e46:	200a      	movs	r0, #10
 8003e48:	f004 fc57 	bl	80086fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003e4c:	200a      	movs	r0, #10
 8003e4e:	f004 fc70 	bl	8008732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2101      	movs	r1, #1
 8003e56:	2017      	movs	r0, #23
 8003e58:	f004 fc4f 	bl	80086fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e5c:	2017      	movs	r0, #23
 8003e5e:	f004 fc68 	bl	8008732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2101      	movs	r1, #1
 8003e66:	2028      	movs	r0, #40	; 0x28
 8003e68:	f004 fc47 	bl	80086fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e6c:	2028      	movs	r0, #40	; 0x28
 8003e6e:	f004 fc60 	bl	8008732 <HAL_NVIC_EnableIRQ>

}
 8003e72:	bf00      	nop
 8003e74:	3728      	adds	r7, #40	; 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020c00 	.word	0x40020c00

08003e90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]

	switch( GPIO_Pin){
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea0:	f000 8128 	beq.w	80040f4 <HAL_GPIO_EXTI_Callback+0x264>
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea8:	f300 8138 	bgt.w	800411c <HAL_GPIO_EXTI_Callback+0x28c>
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	f000 80ca 	beq.w	8004048 <HAL_GPIO_EXTI_Callback+0x1b8>
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	f300 8130 	bgt.w	800411c <HAL_GPIO_EXTI_Callback+0x28c>
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec0:	f000 8097 	beq.w	8003ff2 <HAL_GPIO_EXTI_Callback+0x162>
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	f300 8128 	bgt.w	800411c <HAL_GPIO_EXTI_Callback+0x28c>
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	f000 80e5 	beq.w	800409e <HAL_GPIO_EXTI_Callback+0x20e>
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	f300 8120 	bgt.w	800411c <HAL_GPIO_EXTI_Callback+0x28c>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d007      	beq.n	8003ef0 <HAL_GPIO_EXTI_Callback+0x60>
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	f300 811b 	bgt.w	800411c <HAL_GPIO_EXTI_Callback+0x28c>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d058      	beq.n	8003f9c <HAL_GPIO_EXTI_Callback+0x10c>
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d02b      	beq.n	8003f46 <HAL_GPIO_EXTI_Callback+0xb6>
//			 //manualTrigger = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8003eee:	e115      	b.n	800411c <HAL_GPIO_EXTI_Callback+0x28c>
			 Stop_PWM_MOTOR_1;
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	488d      	ldr	r0, [pc, #564]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 8003ef4:	f005 feb4 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003ef8:	2100      	movs	r1, #0
 8003efa:	488c      	ldr	r0, [pc, #560]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003efc:	f005 feb0 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003f00:	2100      	movs	r1, #0
 8003f02:	488b      	ldr	r0, [pc, #556]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003f04:	f005 feac 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003f08:	488a      	ldr	r0, [pc, #552]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003f0a:	f005 fd71 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003f0e:	488a      	ldr	r0, [pc, #552]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f10:	f005 fce4 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003f14:	2100      	movs	r1, #0
 8003f16:	4889      	ldr	r0, [pc, #548]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f18:	f005 ff5f 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4888      	ldr	r0, [pc, #544]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003f20:	f005 ff5b 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003f24:	2100      	movs	r1, #0
 8003f26:	4887      	ldr	r0, [pc, #540]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003f28:	f005 ff57 	bl	8009dda <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8003f32:	2364      	movs	r3, #100	; 0x64
 8003f34:	220d      	movs	r2, #13
 8003f36:	4985      	ldr	r1, [pc, #532]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003f38:	4885      	ldr	r0, [pc, #532]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8003f3a:	f007 f920 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 8003f3e:	4b85      	ldr	r3, [pc, #532]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8003f40:	2204      	movs	r2, #4
 8003f42:	701a      	strb	r2, [r3, #0]
			 break;
 8003f44:	e0eb      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8003f46:	2100      	movs	r1, #0
 8003f48:	4877      	ldr	r0, [pc, #476]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 8003f4a:	f005 fe89 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4876      	ldr	r0, [pc, #472]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003f52:	f005 fe85 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003f56:	2100      	movs	r1, #0
 8003f58:	4875      	ldr	r0, [pc, #468]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003f5a:	f005 fe81 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003f5e:	4875      	ldr	r0, [pc, #468]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003f60:	f005 fd46 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003f64:	4874      	ldr	r0, [pc, #464]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003f66:	f005 fcb9 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4873      	ldr	r0, [pc, #460]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003f6e:	f005 ff34 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003f72:	2100      	movs	r1, #0
 8003f74:	4872      	ldr	r0, [pc, #456]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003f76:	f005 ff30 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4871      	ldr	r0, [pc, #452]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003f7e:	f005 ff2c 	bl	8009dda <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8003f88:	2364      	movs	r3, #100	; 0x64
 8003f8a:	220d      	movs	r2, #13
 8003f8c:	496f      	ldr	r1, [pc, #444]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003f8e:	4870      	ldr	r0, [pc, #448]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8003f90:	f007 f8f5 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8003f96:	2204      	movs	r2, #4
 8003f98:	701a      	strb	r2, [r3, #0]
			 break;
 8003f9a:	e0c0      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4862      	ldr	r0, [pc, #392]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 8003fa0:	f005 fe5e 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4861      	ldr	r0, [pc, #388]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003fa8:	f005 fe5a 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8003fac:	2100      	movs	r1, #0
 8003fae:	4860      	ldr	r0, [pc, #384]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003fb0:	f005 fe56 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8003fb4:	485f      	ldr	r0, [pc, #380]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003fb6:	f005 fd1b 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8003fba:	485f      	ldr	r0, [pc, #380]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003fbc:	f005 fc8e 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	485e      	ldr	r0, [pc, #376]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003fc4:	f005 ff09 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	485d      	ldr	r0, [pc, #372]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003fcc:	f005 ff05 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	485c      	ldr	r0, [pc, #368]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003fd4:	f005 ff01 	bl	8009dda <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8003fd8:	4b5b      	ldr	r3, [pc, #364]	; (8004148 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8003fde:	2364      	movs	r3, #100	; 0x64
 8003fe0:	220d      	movs	r2, #13
 8003fe2:	495a      	ldr	r1, [pc, #360]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003fe4:	485a      	ldr	r0, [pc, #360]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8003fe6:	f007 f8ca 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 8003fea:	4b5a      	ldr	r3, [pc, #360]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8003fec:	2204      	movs	r2, #4
 8003fee:	701a      	strb	r2, [r3, #0]
			 break;
 8003ff0:	e095      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	484c      	ldr	r0, [pc, #304]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 8003ff6:	f005 fe33 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	484b      	ldr	r0, [pc, #300]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003ffe:	f005 fe2f 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8004002:	2100      	movs	r1, #0
 8004004:	484a      	ldr	r0, [pc, #296]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8004006:	f005 fe2b 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 800400a:	484a      	ldr	r0, [pc, #296]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800400c:	f005 fcf0 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004010:	4849      	ldr	r0, [pc, #292]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8004012:	f005 fc63 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004016:	2100      	movs	r1, #0
 8004018:	4848      	ldr	r0, [pc, #288]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800401a:	f005 fede 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 800401e:	2100      	movs	r1, #0
 8004020:	4847      	ldr	r0, [pc, #284]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8004022:	f005 feda 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8004026:	2100      	movs	r1, #0
 8004028:	4846      	ldr	r0, [pc, #280]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800402a:	f005 fed6 	bl	8009dda <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 8004034:	2364      	movs	r3, #100	; 0x64
 8004036:	220d      	movs	r2, #13
 8004038:	4944      	ldr	r1, [pc, #272]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800403a:	4845      	ldr	r0, [pc, #276]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800403c:	f007 f89f 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 8004040:	4b44      	ldr	r3, [pc, #272]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8004042:	2204      	movs	r2, #4
 8004044:	701a      	strb	r2, [r3, #0]
			 break;
 8004046:	e06a      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 8004048:	2100      	movs	r1, #0
 800404a:	4837      	ldr	r0, [pc, #220]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 800404c:	f005 fe08 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8004050:	2100      	movs	r1, #0
 8004052:	4836      	ldr	r0, [pc, #216]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 8004054:	f005 fe04 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8004058:	2100      	movs	r1, #0
 800405a:	4835      	ldr	r0, [pc, #212]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800405c:	f005 fe00 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 8004060:	4834      	ldr	r0, [pc, #208]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8004062:	f005 fcc5 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 8004066:	4834      	ldr	r0, [pc, #208]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8004068:	f005 fc38 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 800406c:	2100      	movs	r1, #0
 800406e:	4833      	ldr	r0, [pc, #204]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8004070:	f005 feb3 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 8004074:	2100      	movs	r1, #0
 8004076:	4832      	ldr	r0, [pc, #200]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8004078:	f005 feaf 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 800407c:	2100      	movs	r1, #0
 800407e:	4831      	ldr	r0, [pc, #196]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8004080:	f005 feab 	bl	8009dda <HAL_TIM_IC_Stop>
			 lowerESalarm = true;
 8004084:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 800408a:	2364      	movs	r3, #100	; 0x64
 800408c:	220d      	movs	r2, #13
 800408e:	492f      	ldr	r1, [pc, #188]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8004090:	482f      	ldr	r0, [pc, #188]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8004092:	f007 f874 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8004098:	2204      	movs	r2, #4
 800409a:	701a      	strb	r2, [r3, #0]
			 break;
 800409c:	e03f      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 Stop_PWM_MOTOR_1;
 800409e:	2100      	movs	r1, #0
 80040a0:	4821      	ldr	r0, [pc, #132]	; (8004128 <HAL_GPIO_EXTI_Callback+0x298>)
 80040a2:	f005 fddd 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80040a6:	2100      	movs	r1, #0
 80040a8:	4820      	ldr	r0, [pc, #128]	; (800412c <HAL_GPIO_EXTI_Callback+0x29c>)
 80040aa:	f005 fdd9 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80040ae:	2100      	movs	r1, #0
 80040b0:	481f      	ldr	r0, [pc, #124]	; (8004130 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80040b2:	f005 fdd5 	bl	8009c60 <HAL_TIM_PWM_Stop>
			 HAL_TIM_Base_Stop_IT(&htim9);
 80040b6:	481f      	ldr	r0, [pc, #124]	; (8004134 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80040b8:	f005 fc9a 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim2);
 80040bc:	481e      	ldr	r0, [pc, #120]	; (8004138 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80040be:	f005 fc0d 	bl	80098dc <HAL_TIM_Base_Stop>
			 HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 80040c2:	2100      	movs	r1, #0
 80040c4:	481d      	ldr	r0, [pc, #116]	; (800413c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80040c6:	f005 fe88 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80040ca:	2100      	movs	r1, #0
 80040cc:	481c      	ldr	r0, [pc, #112]	; (8004140 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80040ce:	f005 fe84 	bl	8009dda <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80040d2:	2100      	movs	r1, #0
 80040d4:	481b      	ldr	r0, [pc, #108]	; (8004144 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80040d6:	f005 fe80 	bl	8009dda <HAL_TIM_IC_Stop>
			 upperESalarm = true;
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*)"S5\n", 13, 100);
 80040e0:	2364      	movs	r3, #100	; 0x64
 80040e2:	220d      	movs	r2, #13
 80040e4:	4919      	ldr	r1, [pc, #100]	; (800414c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80040e6:	481a      	ldr	r0, [pc, #104]	; (8004150 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80040e8:	f007 f849 	bl	800b17e <HAL_UART_Transmit>
			 state = FAULT;
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80040ee:	2204      	movs	r2, #4
 80040f0:	701a      	strb	r2, [r3, #0]
			 break;
 80040f2:	e014      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 if (!upperESalarm && !lowerESalarm && !faultDrivers){
 80040f4:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_GPIO_EXTI_Callback+0x284>
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d107      	bne.n	8004114 <HAL_GPIO_EXTI_Callback+0x284>
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <HAL_GPIO_EXTI_Callback+0x284>
				 manualTrigger = false;
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
			 break;
 8004112:	e004      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
			 }else{manualTrigger = true;}
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
			 break;
 800411a:	e000      	b.n	800411e <HAL_GPIO_EXTI_Callback+0x28e>
		 default: break;
 800411c:	bf00      	nop


	}


}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000350 	.word	0x20000350
 800412c:	200003e0 	.word	0x200003e0
 8004130:	20000428 	.word	0x20000428
 8004134:	200004b8 	.word	0x200004b8
 8004138:	20000398 	.word	0x20000398
 800413c:	20000470 	.word	0x20000470
 8004140:	20000500 	.word	0x20000500
 8004144:	20000548 	.word	0x20000548
 8004148:	200006be 	.word	0x200006be
 800414c:	08010310 	.word	0x08010310
 8004150:	20000590 	.word	0x20000590
 8004154:	200006b9 	.word	0x200006b9
 8004158:	200006bd 	.word	0x200006bd
 800415c:	200006bf 	.word	0x200006bf
 8004160:	200006c0 	.word	0x200006c0

08004164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_UART_RxCpltCallback+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d14d      	bne.n	8004212 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_UART_RxCpltCallback+0xd4>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b3a      	cmp	r3, #58	; 0x3a
 8004180:	d006      	beq.n	8004190 <HAL_UART_RxCpltCallback+0x2c>
 8004182:	2b3a      	cmp	r3, #58	; 0x3a
 8004184:	dc36      	bgt.n	80041f4 <HAL_UART_RxCpltCallback+0x90>
 8004186:	2b08      	cmp	r3, #8
 8004188:	d009      	beq.n	800419e <HAL_UART_RxCpltCallback+0x3a>
 800418a:	2b0d      	cmp	r3, #13
 800418c:	d01e      	beq.n	80041cc <HAL_UART_RxCpltCallback+0x68>
 800418e:	e031      	b.n	80041f4 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_UART_RxCpltCallback+0xdc>)
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
			break;
 800419c:	e040      	b.n	8004220 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 800419e:	4b27      	ldr	r3, [pc, #156]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d037      	beq.n	8004216 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041b0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80041b2:	e030      	b.n	8004216 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_UART_RxCpltCallback+0xe0>)
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]
				rx_index++;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041ca:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b1e      	cmp	r3, #30
 80041d2:	d1ef      	bne.n	80041b4 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_UART_RxCpltCallback+0xdc>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11e      	bne.n	800421a <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_UART_RxCpltCallback+0xe0>)
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 80041e8:	f7fd fa78 	bl	80016dc <interpretaComando>
				cm0 = 0;
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_UART_RxCpltCallback+0xdc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]

			}
			break;
 80041f2:	e012      	b.n	800421a <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b1d      	cmp	r3, #29
 80041fa:	d810      	bhi.n	800421e <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	b2d1      	uxtb	r1, r2
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_UART_RxCpltCallback+0xd8>)
 8004206:	7011      	strb	r1, [r2, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <HAL_UART_RxCpltCallback+0xe0>)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	5453      	strb	r3, [r2, r1]
			}
			break;
 8004210:	e005      	b.n	800421e <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8004212:	bf00      	nop
 8004214:	e004      	b.n	8004220 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8004216:	bf00      	nop
 8004218:	e002      	b.n	8004220 <HAL_UART_RxCpltCallback+0xbc>
			break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <HAL_UART_RxCpltCallback+0xbc>
			break;
 800421e:	bf00      	nop
	HAL_UART_Receive_IT(&huart2, &rx_data, 1); //Receive data (one character only)
 8004220:	2201      	movs	r2, #1
 8004222:	4905      	ldr	r1, [pc, #20]	; (8004238 <HAL_UART_RxCpltCallback+0xd4>)
 8004224:	4808      	ldr	r0, [pc, #32]	; (8004248 <HAL_UART_RxCpltCallback+0xe4>)
 8004226:	f007 f83c 	bl	800b2a2 <HAL_UART_Receive_IT>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40004400 	.word	0x40004400
 8004238:	20000812 	.word	0x20000812
 800423c:	200007f1 	.word	0x200007f1
 8004240:	200006b8 	.word	0x200006b8
 8004244:	200007f4 	.word	0x200007f4
 8004248:	20000590 	.word	0x20000590

0800424c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	__NOP();
 8004254:	bf00      	nop
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10f      	bne.n	8004296 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	429a      	cmp	r2, r3
 8004280:	d103      	bne.n	800428a <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004284:	2201      	movs	r2, #1
 8004286:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8004288:	e02e      	b.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	3301      	adds	r3, #1
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8004292:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004294:	e028      	b.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM10){
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_TIM_IC_CaptureCallback+0x98>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10f      	bne.n	80042c0 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a4:	4b16      	ldr	r3, [pc, #88]	; (8004300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d103      	bne.n	80042b4 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	765a      	strb	r2, [r3, #25]
}
 80042b2:	e019      	b.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042be:	e013      	b.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM11){
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d103      	bne.n	80042de <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80042d8:	2201      	movs	r2, #1
 80042da:	765a      	strb	r2, [r3, #25]
}
 80042dc:	e004      	b.n	80042e8 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80042e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40000c00 	.word	0x40000c00
 80042f8:	200005d8 	.word	0x200005d8
 80042fc:	40014400 	.word	0x40014400
 8004300:	20000620 	.word	0x20000620
 8004304:	40014800 	.word	0x40014800
 8004308:	20000668 	.word	0x20000668
 800430c:	00000000 	.word	0x00000000

08004310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004310:	b5b0      	push	{r4, r5, r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

	if (htim == &htim9) {  //Timer that update velocity'curve. It interrups every 10 ms
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d129      	bne.n	8004374 <HAL_TIM_PeriodElapsedCallback+0x64>

		if (!timeFlag) {
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_TIM_PeriodElapsedCallback+0x26>
			timeFlag = true;
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
			TIM2->CNT = 0;	//We start counting from here
 800432e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004332:	2200      	movs	r2, #0
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM2->CNT)) * ((double)(TIM2->PSC + 1) / FCL));
 8004336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f8e9 	bl	8000514 <__aeabi_ui2d>
 8004342:	4604      	mov	r4, r0
 8004344:	460d      	mov	r5, r1
 8004346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	3301      	adds	r3, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc f8e0 	bl	8000514 <__aeabi_ui2d>
 8004354:	a30a      	add	r3, pc, #40	; (adr r3, 8004380 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fc fa7f 	bl	800085c <__aeabi_ddiv>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4620      	mov	r0, r4
 8004364:	4629      	mov	r1, r5
 8004366:	f7fc f94f 	bl	8000608 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4908      	ldr	r1, [pc, #32]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004370:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bdb0      	pop	{r4, r5, r7, pc}
 800437c:	f3af 8000 	nop.w
 8004380:	00000000 	.word	0x00000000
 8004384:	418e8480 	.word	0x418e8480
 8004388:	200004b8 	.word	0x200004b8
 800438c:	200007f0 	.word	0x200007f0
 8004390:	200006b0 	.word	0x200006b0

08004394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004398:	b672      	cpsid	i
}
 800439a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800439c:	e7fe      	b.n	800439c <Error_Handler+0x8>
	...

080043a0 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 80043a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043be:	f7fc fba9 	bl	8000b14 <__aeabi_dcmpge>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d02a      	beq.n	800441e <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043d4:	f7fb ff60 	bl	8000298 <__aeabi_dsub>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <configMotor+0x5c>
 80043f2:	2201      	movs	r2, #1
 80043f4:	2101      	movs	r1, #1
 80043f6:	484e      	ldr	r0, [pc, #312]	; (8004530 <configMotor+0x190>)
 80043f8:	f004 fbf2 	bl	8008be0 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d104      	bne.n	800440c <configMotor+0x6c>
 8004402:	2201      	movs	r2, #1
 8004404:	2102      	movs	r1, #2
 8004406:	484b      	ldr	r0, [pc, #300]	; (8004534 <configMotor+0x194>)
 8004408:	f004 fbea 	bl	8008be0 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d12f      	bne.n	8004472 <configMotor+0xd2>
 8004412:	2201      	movs	r2, #1
 8004414:	2101      	movs	r1, #1
 8004416:	4847      	ldr	r0, [pc, #284]	; (8004534 <configMotor+0x194>)
 8004418:	f004 fbe2 	bl	8008be0 <HAL_GPIO_WritePin>
 800441c:	e029      	b.n	8004472 <configMotor+0xd2>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fb ff35 	bl	8000298 <__aeabi_dsub>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	e9c7 2302 	strd	r2, r3, [r7, #8]
		motor->currentAngle = motor->theta;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <configMotor+0xb2>
 8004448:	2200      	movs	r2, #0
 800444a:	2101      	movs	r1, #1
 800444c:	4838      	ldr	r0, [pc, #224]	; (8004530 <configMotor+0x190>)
 800444e:	f004 fbc7 	bl	8008be0 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d104      	bne.n	8004462 <configMotor+0xc2>
 8004458:	2200      	movs	r2, #0
 800445a:	2102      	movs	r1, #2
 800445c:	4835      	ldr	r0, [pc, #212]	; (8004534 <configMotor+0x194>)
 800445e:	f004 fbbf 	bl	8008be0 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d104      	bne.n	8004472 <configMotor+0xd2>
 8004468:	2200      	movs	r2, #0
 800446a:	2101      	movs	r1, #1
 800446c:	4831      	ldr	r0, [pc, #196]	; (8004534 <configMotor+0x194>)
 800446e:	f004 fbb7 	bl	8008be0 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8004472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <configMotor+0x198>)
 800447c:	f7fc f8c4 	bl	8000608 <__aeabi_dmul>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	4b2b      	ldr	r3, [pc, #172]	; (800453c <configMotor+0x19c>)
 800448e:	f7fc f9e5 	bl	800085c <__aeabi_ddiv>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc fb5f 	bl	8000b68 <__aeabi_d2uiz>
 80044aa:	4602      	mov	r2, r0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fc f827 	bl	8000514 <__aeabi_ui2d>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fb fee3 	bl	8000298 <__aeabi_dsub>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fb fedf 	bl	800029c <__adddf3>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	if (motor->remainder >= 1) {
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <configMotor+0x1a0>)
 80044f4:	f7fc fb0e 	bl	8000b14 <__aeabi_dcmpge>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d100      	bne.n	8004500 <configMotor+0x160>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 80044fe:	e011      	b.n	8004524 <configMotor+0x184>
		motor->remainder -= 1;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <configMotor+0x1a0>)
 800450c:	f7fb fec4 	bl	8000298 <__aeabi_dsub>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		motor->numStep += 1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800452e:	bf00      	nop
 8004530:	40020400 	.word	0x40020400
 8004534:	40020800 	.word	0x40020800
 8004538:	40bf4000 	.word	0x40bf4000
 800453c:	40768000 	.word	0x40768000
 8004540:	3ff00000 	.word	0x3ff00000
 8004544:	00000000 	.word	0x00000000

08004548 <statesMachineLoop>:
uint8_t message2[]="done\n";

bool receptionFlag=false;


void statesMachineLoop(void){
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	ed2d 8b04 	vpush	{d8-d9}
 800454e:	af00      	add	r7, sp, #0



 	switch (state){
 8004550:	4b83      	ldr	r3, [pc, #524]	; (8004760 <statesMachineLoop+0x218>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	f200 877f 	bhi.w	8005458 <statesMachineLoop+0xf10>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <statesMachineLoop+0x18>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004575 	.word	0x08004575
 8004564:	08004ac1 	.word	0x08004ac1
 8004568:	0800470f 	.word	0x0800470f
 800456c:	0800461b 	.word	0x0800461b
 8004570:	08004dad 	.word	0x08004dad

	case INIT:

		HAL_UART_Transmit(&huart2,(uint8_t*)"S1\n", 4, 100);
 8004574:	2364      	movs	r3, #100	; 0x64
 8004576:	2204      	movs	r2, #4
 8004578:	497a      	ldr	r1, [pc, #488]	; (8004764 <statesMachineLoop+0x21c>)
 800457a:	487b      	ldr	r0, [pc, #492]	; (8004768 <statesMachineLoop+0x220>)
 800457c:	f006 fdff 	bl	800b17e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8004580:	2201      	movs	r2, #1
 8004582:	497a      	ldr	r1, [pc, #488]	; (800476c <statesMachineLoop+0x224>)
 8004584:	4878      	ldr	r0, [pc, #480]	; (8004768 <statesMachineLoop+0x220>)
 8004586:	f006 fe8c 	bl	800b2a2 <HAL_UART_Receive_IT>

		HAL_TIM_Base_Start(&htim1);
 800458a:	4879      	ldr	r0, [pc, #484]	; (8004770 <statesMachineLoop+0x228>)
 800458c:	f005 f94c 	bl	8009828 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim3);
 8004590:	4878      	ldr	r0, [pc, #480]	; (8004774 <statesMachineLoop+0x22c>)
 8004592:	f005 f949 	bl	8009828 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim4);
 8004596:	4878      	ldr	r0, [pc, #480]	; (8004778 <statesMachineLoop+0x230>)
 8004598:	f005 f946 	bl	8009828 <HAL_TIM_Base_Start>

		//Enable drivers motores (0 es habilitado)
		ENABLE_PIN_RESET_1;
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045a2:	4876      	ldr	r0, [pc, #472]	; (800477c <statesMachineLoop+0x234>)
 80045a4:	f004 fb1c 	bl	8008be0 <HAL_GPIO_WritePin>
		ENABLE_PIN_RESET_2;
 80045a8:	2200      	movs	r2, #0
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	4873      	ldr	r0, [pc, #460]	; (800477c <statesMachineLoop+0x234>)
 80045ae:	f004 fb17 	bl	8008be0 <HAL_GPIO_WritePin>
		ENABLE_PIN_RESET_3;
 80045b2:	2200      	movs	r2, #0
 80045b4:	2120      	movs	r1, #32
 80045b6:	4871      	ldr	r0, [pc, #452]	; (800477c <statesMachineLoop+0x234>)
 80045b8:	f004 fb12 	bl	8008be0 <HAL_GPIO_WritePin>

		HAL_Delay(DELAY_ENABLE);
 80045bc:	2032      	movs	r0, #50	; 0x32
 80045be:	f003 ff79 	bl	80084b4 <HAL_Delay>

		//Se estable la direccion horario por defecto
		positive_Dir_MOTOR_1;
 80045c2:	2200      	movs	r2, #0
 80045c4:	2101      	movs	r1, #1
 80045c6:	486e      	ldr	r0, [pc, #440]	; (8004780 <statesMachineLoop+0x238>)
 80045c8:	f004 fb0a 	bl	8008be0 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_2;
 80045cc:	2200      	movs	r2, #0
 80045ce:	2102      	movs	r1, #2
 80045d0:	486a      	ldr	r0, [pc, #424]	; (800477c <statesMachineLoop+0x234>)
 80045d2:	f004 fb05 	bl	8008be0 <HAL_GPIO_WritePin>
		positive_Dir_MOTOR_3;
 80045d6:	2200      	movs	r2, #0
 80045d8:	2101      	movs	r1, #1
 80045da:	4868      	ldr	r0, [pc, #416]	; (800477c <statesMachineLoop+0x234>)
 80045dc:	f004 fb00 	bl	8008be0 <HAL_GPIO_WritePin>

		motor1.stepReached = false;
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <statesMachineLoop+0x23c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	765a      	strb	r2, [r3, #25]
		motor2.stepReached = false;
 80045e6:	4b68      	ldr	r3, [pc, #416]	; (8004788 <statesMachineLoop+0x240>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	765a      	strb	r2, [r3, #25]
		motor3.stepReached = false;
 80045ec:	4b67      	ldr	r3, [pc, #412]	; (800478c <statesMachineLoop+0x244>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	765a      	strb	r2, [r3, #25]


		HAL_UART_Transmit(&huart2, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 80045f2:	2364      	movs	r3, #100	; 0x64
 80045f4:	2220      	movs	r2, #32
 80045f6:	4966      	ldr	r1, [pc, #408]	; (8004790 <statesMachineLoop+0x248>)
 80045f8:	485b      	ldr	r0, [pc, #364]	; (8004768 <statesMachineLoop+0x220>)
 80045fa:	f006 fdc0 	bl	800b17e <HAL_UART_Transmit>
		HAL_Delay(100);
 80045fe:	2064      	movs	r0, #100	; 0x64
 8004600:	f003 ff58 	bl	80084b4 <HAL_Delay>
		HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 4, 100);
 8004604:	2364      	movs	r3, #100	; 0x64
 8004606:	2204      	movs	r2, #4
 8004608:	4962      	ldr	r1, [pc, #392]	; (8004794 <statesMachineLoop+0x24c>)
 800460a:	4857      	ldr	r0, [pc, #348]	; (8004768 <statesMachineLoop+0x220>)
 800460c:	f006 fdb7 	bl	800b17e <HAL_UART_Transmit>
		state = READY;
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <statesMachineLoop+0x218>)
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]

		break;
 8004616:	f000 bf26 	b.w	8005466 <statesMachineLoop+0xf1e>

	case HOME:

		HAL_UART_Transmit(&huart2,(uint8_t*)"S3\n", 4, 100);
 800461a:	2364      	movs	r3, #100	; 0x64
 800461c:	2204      	movs	r2, #4
 800461e:	495e      	ldr	r1, [pc, #376]	; (8004798 <statesMachineLoop+0x250>)
 8004620:	4851      	ldr	r0, [pc, #324]	; (8004768 <statesMachineLoop+0x220>)
 8004622:	f006 fdac 	bl	800b17e <HAL_UART_Transmit>
		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <statesMachineLoop+0x254>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]

		homing();
 800462c:	f7fc fc74 	bl	8000f18 <homing>

        if(homFin){
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <statesMachineLoop+0x258>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8711 	beq.w	800545c <statesMachineLoop+0xf14>

        	homFin = false;
 800463a:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <statesMachineLoop+0x258>)
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8004640:	2006      	movs	r0, #6
 8004642:	f004 f876 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8004646:	2007      	movs	r0, #7
 8004648:	f004 f873 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 800464c:	2008      	movs	r0, #8
 800464e:	f004 f870 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8004652:	2009      	movs	r0, #9
 8004654:	f004 f86d 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8004658:	200a      	movs	r0, #10
 800465a:	f004 f86a 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 800465e:	2017      	movs	r0, #23
 8004660:	f004 f867 	bl	8008732 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8004664:	2028      	movs	r0, #40	; 0x28
 8004666:	f004 f864 	bl	8008732 <HAL_NVIC_EnableIRQ>

        	HAL_Delay(10);
 800466a:	200a      	movs	r0, #10
 800466c:	f003 ff22 	bl	80084b4 <HAL_Delay>

			Pini.x=0;
 8004670:	494c      	ldr	r1, [pc, #304]	; (80047a4 <statesMachineLoop+0x25c>)
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 800467e:	4949      	ldr	r1, [pc, #292]	; (80047a4 <statesMachineLoop+0x25c>)
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 800468c:	4945      	ldr	r1, [pc, #276]	; (80047a4 <statesMachineLoop+0x25c>)
 800468e:	a332      	add	r3, pc, #200	; (adr r3, 8004758 <statesMachineLoop+0x210>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8004698:	493a      	ldr	r1, [pc, #232]	; (8004784 <statesMachineLoop+0x23c>)
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 80046a6:	4938      	ldr	r1, [pc, #224]	; (8004788 <statesMachineLoop+0x240>)
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 80046b4:	4935      	ldr	r1, [pc, #212]	; (800478c <statesMachineLoop+0x244>)
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 80046c2:	4930      	ldr	r1, [pc, #192]	; (8004784 <statesMachineLoop+0x23c>)
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 80046d0:	492d      	ldr	r1, [pc, #180]	; (8004788 <statesMachineLoop+0x240>)
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 80046de:	492b      	ldr	r1, [pc, #172]	; (800478c <statesMachineLoop+0x244>)
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9c1 2308 	strd	r2, r3, [r1, #32]

			upperESalarm = false;
 80046ec:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <statesMachineLoop+0x260>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
			lowerESalarm = false;
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <statesMachineLoop+0x264>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 4, 100);
 80046f8:	2364      	movs	r3, #100	; 0x64
 80046fa:	2204      	movs	r2, #4
 80046fc:	4925      	ldr	r1, [pc, #148]	; (8004794 <statesMachineLoop+0x24c>)
 80046fe:	481a      	ldr	r0, [pc, #104]	; (8004768 <statesMachineLoop+0x220>)
 8004700:	f006 fd3d 	bl	800b17e <HAL_UART_Transmit>
			state = READY;
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <statesMachineLoop+0x218>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]

        }

		break;
 800470a:	f000 bea7 	b.w	800545c <statesMachineLoop+0xf14>

	case WORKING:

		receptionFlag = false;
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <statesMachineLoop+0x254>)
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2,(uint8_t*)"S4\n", 4, 100);

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8004714:	e13d      	b.n	8004992 <statesMachineLoop+0x44a>

			if (state==FAULT)break;
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <statesMachineLoop+0x218>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b04      	cmp	r3, #4
 800471c:	f000 8149 	beq.w	80049b2 <statesMachineLoop+0x46a>

			if (motor1.stepReached) {
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <statesMachineLoop+0x23c>)
 8004722:	7e5b      	ldrb	r3, [r3, #25]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <statesMachineLoop+0x1f2>
				Stop_PWM_MOTOR_1;
 8004728:	2100      	movs	r1, #0
 800472a:	4811      	ldr	r0, [pc, #68]	; (8004770 <statesMachineLoop+0x228>)
 800472c:	f005 fa98 	bl	8009c60 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim5, TIM_CHANNEL_1);
 8004730:	2100      	movs	r1, #0
 8004732:	481f      	ldr	r0, [pc, #124]	; (80047b0 <statesMachineLoop+0x268>)
 8004734:	f005 fb51 	bl	8009dda <HAL_TIM_IC_Stop>
 8004738:	e04a      	b.n	80047d0 <statesMachineLoop+0x288>
			}else if (motor2.stepReached) {
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <statesMachineLoop+0x240>)
 800473c:	7e5b      	ldrb	r3, [r3, #25]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03a      	beq.n	80047b8 <statesMachineLoop+0x270>
				Stop_PWM_MOTOR_2;
 8004742:	2100      	movs	r1, #0
 8004744:	480b      	ldr	r0, [pc, #44]	; (8004774 <statesMachineLoop+0x22c>)
 8004746:	f005 fa8b 	bl	8009c60 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_2);
 800474a:	2104      	movs	r1, #4
 800474c:	4819      	ldr	r0, [pc, #100]	; (80047b4 <statesMachineLoop+0x26c>)
 800474e:	f005 fb44 	bl	8009dda <HAL_TIM_IC_Stop>
 8004752:	e03d      	b.n	80047d0 <statesMachineLoop+0x288>
 8004754:	f3af 8000 	nop.w
 8004758:	c2f837b5 	.word	0xc2f837b5
 800475c:	bfe0aa64 	.word	0xbfe0aa64
 8004760:	200006b9 	.word	0x200006b9
 8004764:	08010314 	.word	0x08010314
 8004768:	20000590 	.word	0x20000590
 800476c:	20000812 	.word	0x20000812
 8004770:	20000350 	.word	0x20000350
 8004774:	200003e0 	.word	0x200003e0
 8004778:	20000428 	.word	0x20000428
 800477c:	40020800 	.word	0x40020800
 8004780:	40020400 	.word	0x40020400
 8004784:	200005d8 	.word	0x200005d8
 8004788:	20000620 	.word	0x20000620
 800478c:	20000668 	.word	0x20000668
 8004790:	20000038 	.word	0x20000038
 8004794:	08010318 	.word	0x08010318
 8004798:	0801031c 	.word	0x0801031c
 800479c:	20000813 	.word	0x20000813
 80047a0:	200006ba 	.word	0x200006ba
 80047a4:	20000700 	.word	0x20000700
 80047a8:	200006bd 	.word	0x200006bd
 80047ac:	200006be 	.word	0x200006be
 80047b0:	20000470 	.word	0x20000470
 80047b4:	20000500 	.word	0x20000500
			}else if (motor3.stepReached){
 80047b8:	4ba7      	ldr	r3, [pc, #668]	; (8004a58 <statesMachineLoop+0x510>)
 80047ba:	7e5b      	ldrb	r3, [r3, #25]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <statesMachineLoop+0x288>
				Stop_PWM_MOTOR_3;
 80047c0:	2100      	movs	r1, #0
 80047c2:	48a6      	ldr	r0, [pc, #664]	; (8004a5c <statesMachineLoop+0x514>)
 80047c4:	f005 fa4c 	bl	8009c60 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_3);
 80047c8:	2108      	movs	r1, #8
 80047ca:	48a5      	ldr	r0, [pc, #660]	; (8004a60 <statesMachineLoop+0x518>)
 80047cc:	f005 fb05 	bl	8009dda <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,temp1*DEG_TO_RAD,motor1.theta*DEG_TO_RAD,arrayParams1);
 80047d0:	4ba4      	ldr	r3, [pc, #656]	; (8004a64 <statesMachineLoop+0x51c>)
 80047d2:	ed93 8b00 	vldr	d8, [r3]
 80047d6:	4ba4      	ldr	r3, [pc, #656]	; (8004a68 <statesMachineLoop+0x520>)
 80047d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047dc:	a39c      	add	r3, pc, #624	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb ff11 	bl	8000608 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	4b9e      	ldr	r3, [pc, #632]	; (8004a6c <statesMachineLoop+0x524>)
 80047f4:	f7fc f832 	bl	800085c <__aeabi_ddiv>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	ec43 2b19 	vmov	d9, r2, r3
 8004800:	4b9b      	ldr	r3, [pc, #620]	; (8004a70 <statesMachineLoop+0x528>)
 8004802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004806:	a392      	add	r3, pc, #584	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f7fb fefc 	bl	8000608 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	4b93      	ldr	r3, [pc, #588]	; (8004a6c <statesMachineLoop+0x524>)
 800481e:	f7fc f81d 	bl	800085c <__aeabi_ddiv>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	ec43 2b17 	vmov	d7, r2, r3
 800482a:	4892      	ldr	r0, [pc, #584]	; (8004a74 <statesMachineLoop+0x52c>)
 800482c:	eeb0 2a47 	vmov.f32	s4, s14
 8004830:	eef0 2a67 	vmov.f32	s5, s15
 8004834:	eeb0 1a49 	vmov.f32	s2, s18
 8004838:	eef0 1a69 	vmov.f32	s3, s19
 800483c:	eeb0 0a48 	vmov.f32	s0, s16
 8004840:	eef0 0a68 	vmov.f32	s1, s17
 8004844:	f001 fa10 	bl	8005c68 <get_Straj>
 8004848:	eeb0 7a40 	vmov.f32	s14, s0
 800484c:	eef0 7a60 	vmov.f32	s15, s1
 8004850:	4b87      	ldr	r3, [pc, #540]	; (8004a70 <statesMachineLoop+0x528>)
 8004852:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,temp2*DEG_TO_RAD,motor2.theta*DEG_TO_RAD,arrayParams2);
 8004856:	4b83      	ldr	r3, [pc, #524]	; (8004a64 <statesMachineLoop+0x51c>)
 8004858:	ed93 8b00 	vldr	d8, [r3]
 800485c:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <statesMachineLoop+0x530>)
 800485e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004862:	a37b      	add	r3, pc, #492	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f7fb fece 	bl	8000608 <__aeabi_dmul>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	4b7c      	ldr	r3, [pc, #496]	; (8004a6c <statesMachineLoop+0x524>)
 800487a:	f7fb ffef 	bl	800085c <__aeabi_ddiv>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	ec43 2b19 	vmov	d9, r2, r3
 8004886:	4b7d      	ldr	r3, [pc, #500]	; (8004a7c <statesMachineLoop+0x534>)
 8004888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800488c:	a370      	add	r3, pc, #448	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f7fb feb9 	bl	8000608 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	4b72      	ldr	r3, [pc, #456]	; (8004a6c <statesMachineLoop+0x524>)
 80048a4:	f7fb ffda 	bl	800085c <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	ec43 2b17 	vmov	d7, r2, r3
 80048b0:	4873      	ldr	r0, [pc, #460]	; (8004a80 <statesMachineLoop+0x538>)
 80048b2:	eeb0 2a47 	vmov.f32	s4, s14
 80048b6:	eef0 2a67 	vmov.f32	s5, s15
 80048ba:	eeb0 1a49 	vmov.f32	s2, s18
 80048be:	eef0 1a69 	vmov.f32	s3, s19
 80048c2:	eeb0 0a48 	vmov.f32	s0, s16
 80048c6:	eef0 0a68 	vmov.f32	s1, s17
 80048ca:	f001 f9cd 	bl	8005c68 <get_Straj>
 80048ce:	eeb0 7a40 	vmov.f32	s14, s0
 80048d2:	eef0 7a60 	vmov.f32	s15, s1
 80048d6:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <statesMachineLoop+0x534>)
 80048d8:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,temp3*DEG_TO_RAD,motor3.theta*DEG_TO_RAD,arrayParams3);
 80048dc:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <statesMachineLoop+0x51c>)
 80048de:	ed93 8b00 	vldr	d8, [r3]
 80048e2:	4b68      	ldr	r3, [pc, #416]	; (8004a84 <statesMachineLoop+0x53c>)
 80048e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048e8:	a359      	add	r3, pc, #356	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb fe8b 	bl	8000608 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4b5b      	ldr	r3, [pc, #364]	; (8004a6c <statesMachineLoop+0x524>)
 8004900:	f7fb ffac 	bl	800085c <__aeabi_ddiv>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	ec43 2b19 	vmov	d9, r2, r3
 800490c:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <statesMachineLoop+0x510>)
 800490e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004912:	a34f      	add	r3, pc, #316	; (adr r3, 8004a50 <statesMachineLoop+0x508>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fe76 	bl	8000608 <__aeabi_dmul>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <statesMachineLoop+0x524>)
 800492a:	f7fb ff97 	bl	800085c <__aeabi_ddiv>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	ec43 2b17 	vmov	d7, r2, r3
 8004936:	4854      	ldr	r0, [pc, #336]	; (8004a88 <statesMachineLoop+0x540>)
 8004938:	eeb0 2a47 	vmov.f32	s4, s14
 800493c:	eef0 2a67 	vmov.f32	s5, s15
 8004940:	eeb0 1a49 	vmov.f32	s2, s18
 8004944:	eef0 1a69 	vmov.f32	s3, s19
 8004948:	eeb0 0a48 	vmov.f32	s0, s16
 800494c:	eef0 0a68 	vmov.f32	s1, s17
 8004950:	f001 f98a 	bl	8005c68 <get_Straj>
 8004954:	eeb0 7a40 	vmov.f32	s14, s0
 8004958:	eef0 7a60 	vmov.f32	s15, s1
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <statesMachineLoop+0x510>)
 800495e:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8004962:	f003 fb69 	bl	8008038 <setProfilTimer>

			if(startMotors){
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <statesMachineLoop+0x544>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <statesMachineLoop+0x444>
				startMotors = false;
 800496e:	4b47      	ldr	r3, [pc, #284]	; (8004a8c <statesMachineLoop+0x544>)
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8004974:	2100      	movs	r1, #0
 8004976:	4846      	ldr	r0, [pc, #280]	; (8004a90 <statesMachineLoop+0x548>)
 8004978:	f005 f8c2 	bl	8009b00 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 800497c:	2100      	movs	r1, #0
 800497e:	4845      	ldr	r0, [pc, #276]	; (8004a94 <statesMachineLoop+0x54c>)
 8004980:	f005 f8be 	bl	8009b00 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8004984:	2100      	movs	r1, #0
 8004986:	4835      	ldr	r0, [pc, #212]	; (8004a5c <statesMachineLoop+0x514>)
 8004988:	f005 f8ba 	bl	8009b00 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800498c:	4b42      	ldr	r3, [pc, #264]	; (8004a98 <statesMachineLoop+0x550>)
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <statesMachineLoop+0x528>)
 8004994:	7e5b      	ldrb	r3, [r3, #25]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f43f aebd 	beq.w	8004716 <statesMachineLoop+0x1ce>
 800499c:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <statesMachineLoop+0x534>)
 800499e:	7e5b      	ldrb	r3, [r3, #25]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f43f aeb8 	beq.w	8004716 <statesMachineLoop+0x1ce>
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <statesMachineLoop+0x510>)
 80049a8:	7e5b      	ldrb	r3, [r3, #25]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f43f aeb3 	beq.w	8004716 <statesMachineLoop+0x1ce>
 80049b0:	e000      	b.n	80049b4 <statesMachineLoop+0x46c>
			if (state==FAULT)break;
 80049b2:	bf00      	nop

		}// End while

		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 80049b4:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <statesMachineLoop+0x550>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d026      	beq.n	8004a0a <statesMachineLoop+0x4c2>

			startMotors = false;
 80049bc:	4b33      	ldr	r3, [pc, #204]	; (8004a8c <statesMachineLoop+0x544>)
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim5,  TIM_CHANNEL_1);
 80049c2:	2100      	movs	r1, #0
 80049c4:	4835      	ldr	r0, [pc, #212]	; (8004a9c <statesMachineLoop+0x554>)
 80049c6:	f005 fa08 	bl	8009dda <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim10, TIM_CHANNEL_1);
 80049ca:	2100      	movs	r1, #0
 80049cc:	4834      	ldr	r0, [pc, #208]	; (8004aa0 <statesMachineLoop+0x558>)
 80049ce:	f005 fa04 	bl	8009dda <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 80049d2:	2100      	movs	r1, #0
 80049d4:	4822      	ldr	r0, [pc, #136]	; (8004a60 <statesMachineLoop+0x518>)
 80049d6:	f005 fa00 	bl	8009dda <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <statesMachineLoop+0x528>)
 80049dc:	7e5b      	ldrb	r3, [r3, #25]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <statesMachineLoop+0x4a2>
 80049e2:	2100      	movs	r1, #0
 80049e4:	482a      	ldr	r0, [pc, #168]	; (8004a90 <statesMachineLoop+0x548>)
 80049e6:	f005 f93b 	bl	8009c60 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <statesMachineLoop+0x534>)
 80049ec:	7e5b      	ldrb	r3, [r3, #25]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <statesMachineLoop+0x4b2>
 80049f2:	2100      	movs	r1, #0
 80049f4:	4827      	ldr	r0, [pc, #156]	; (8004a94 <statesMachineLoop+0x54c>)
 80049f6:	f005 f933 	bl	8009c60 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80049fa:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <statesMachineLoop+0x510>)
 80049fc:	7e5b      	ldrb	r3, [r3, #25]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <statesMachineLoop+0x4c2>
 8004a02:	2100      	movs	r1, #0
 8004a04:	4815      	ldr	r0, [pc, #84]	; (8004a5c <statesMachineLoop+0x514>)
 8004a06:	f005 f92b 	bl	8009c60 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <statesMachineLoop+0x55c>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	4925      	ldr	r1, [pc, #148]	; (8004aa8 <statesMachineLoop+0x560>)
 8004a12:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 8004a16:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <statesMachineLoop+0x55c>)
 8004a18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a1c:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <statesMachineLoop+0x560>)
 8004a1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 8004a22:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <statesMachineLoop+0x55c>)
 8004a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a28:	491f      	ldr	r1, [pc, #124]	; (8004aa8 <statesMachineLoop+0x560>)
 8004a2a:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_UART_Transmit(&huart2, message2, sizeof(message2), 100);
 8004a2e:	2364      	movs	r3, #100	; 0x64
 8004a30:	2206      	movs	r2, #6
 8004a32:	491e      	ldr	r1, [pc, #120]	; (8004aac <statesMachineLoop+0x564>)
 8004a34:	481e      	ldr	r0, [pc, #120]	; (8004ab0 <statesMachineLoop+0x568>)
 8004a36:	f006 fba2 	bl	800b17e <HAL_UART_Transmit>

		HAL_TIM_Base_Stop_IT(&htim9);
 8004a3a:	481e      	ldr	r0, [pc, #120]	; (8004ab4 <statesMachineLoop+0x56c>)
 8004a3c:	f004 ffd8 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim2);
 8004a40:	481d      	ldr	r0, [pc, #116]	; (8004ab8 <statesMachineLoop+0x570>)
 8004a42:	f004 ff4b 	bl	80098dc <HAL_TIM_Base_Stop>

		state = READY;
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <statesMachineLoop+0x574>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]

		break;
 8004a4c:	f000 bd0b 	b.w	8005466 <statesMachineLoop+0xf1e>
 8004a50:	54442eea 	.word	0x54442eea
 8004a54:	400921fb 	.word	0x400921fb
 8004a58:	20000668 	.word	0x20000668
 8004a5c:	20000428 	.word	0x20000428
 8004a60:	20000548 	.word	0x20000548
 8004a64:	200006b0 	.word	0x200006b0
 8004a68:	20000730 	.word	0x20000730
 8004a6c:	40668000 	.word	0x40668000
 8004a70:	200005d8 	.word	0x200005d8
 8004a74:	20000748 	.word	0x20000748
 8004a78:	20000738 	.word	0x20000738
 8004a7c:	20000620 	.word	0x20000620
 8004a80:	20000780 	.word	0x20000780
 8004a84:	20000740 	.word	0x20000740
 8004a88:	200007b8 	.word	0x200007b8
 8004a8c:	200006bb 	.word	0x200006bb
 8004a90:	20000350 	.word	0x20000350
 8004a94:	200003e0 	.word	0x200003e0
 8004a98:	200006bc 	.word	0x200006bc
 8004a9c:	20000470 	.word	0x20000470
 8004aa0:	20000500 	.word	0x20000500
 8004aa4:	20000718 	.word	0x20000718
 8004aa8:	20000700 	.word	0x20000700
 8004aac:	20000058 	.word	0x20000058
 8004ab0:	20000590 	.word	0x20000590
 8004ab4:	200004b8 	.word	0x200004b8
 8004ab8:	20000398 	.word	0x20000398
 8004abc:	200006b9 	.word	0x200006b9

	case READY:

		if (receptionFlag){
 8004ac0:	4b9f      	ldr	r3, [pc, #636]	; (8004d40 <statesMachineLoop+0x7f8>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 84cb 	beq.w	8005460 <statesMachineLoop+0xf18>

			receptionFlag = false;
 8004aca:	4b9d      	ldr	r3, [pc, #628]	; (8004d40 <statesMachineLoop+0x7f8>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 8004ad0:	4b9c      	ldr	r3, [pc, #624]	; (8004d44 <statesMachineLoop+0x7fc>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	489b      	ldr	r0, [pc, #620]	; (8004d48 <statesMachineLoop+0x800>)
 8004ada:	f005 f9df 	bl	8009e9c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim10, TIM_CHANNEL_1);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	489a      	ldr	r0, [pc, #616]	; (8004d4c <statesMachineLoop+0x804>)
 8004ae2:	f005 f9db 	bl	8009e9c <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4899      	ldr	r0, [pc, #612]	; (8004d50 <statesMachineLoop+0x808>)
 8004aea:	f005 f9d7 	bl	8009e9c <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 8004aee:	4b99      	ldr	r3, [pc, #612]	; (8004d54 <statesMachineLoop+0x80c>)
 8004af0:	ed93 5b00 	vldr	d5, [r3]
 8004af4:	ed93 6b02 	vldr	d6, [r3, #8]
 8004af8:	ed93 7b04 	vldr	d7, [r3, #16]
 8004afc:	eeb0 0a45 	vmov.f32	s0, s10
 8004b00:	eef0 0a65 	vmov.f32	s1, s11
 8004b04:	eeb0 1a46 	vmov.f32	s2, s12
 8004b08:	eef0 1a66 	vmov.f32	s3, s13
 8004b0c:	eeb0 2a47 	vmov.f32	s4, s14
 8004b10:	eef0 2a67 	vmov.f32	s5, s15
 8004b14:	f7fc ff74 	bl	8001a00 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle*DEG_TO_RAD, motor1.theta*DEG_TO_RAD, vi, vf, vmax, amax, jmax, arrayParams1);
 8004b18:	4b8f      	ldr	r3, [pc, #572]	; (8004d58 <statesMachineLoop+0x810>)
 8004b1a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004b1e:	a386      	add	r3, pc, #536	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fd70 	bl	8000608 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <statesMachineLoop+0x814>)
 8004b36:	f7fb fe91 	bl	800085c <__aeabi_ddiv>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	ec43 2b18 	vmov	d8, r2, r3
 8004b42:	4b85      	ldr	r3, [pc, #532]	; (8004d58 <statesMachineLoop+0x810>)
 8004b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b48:	a37b      	add	r3, pc, #492	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f7fb fd5b 	bl	8000608 <__aeabi_dmul>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	4b7f      	ldr	r3, [pc, #508]	; (8004d5c <statesMachineLoop+0x814>)
 8004b60:	f7fb fe7c 	bl	800085c <__aeabi_ddiv>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	ec43 2b11 	vmov	d1, r2, r3
 8004b6c:	4b7c      	ldr	r3, [pc, #496]	; (8004d60 <statesMachineLoop+0x818>)
 8004b6e:	ed93 7b00 	vldr	d7, [r3]
 8004b72:	4b7c      	ldr	r3, [pc, #496]	; (8004d64 <statesMachineLoop+0x81c>)
 8004b74:	ed93 3b00 	vldr	d3, [r3]
 8004b78:	4b7b      	ldr	r3, [pc, #492]	; (8004d68 <statesMachineLoop+0x820>)
 8004b7a:	ed93 4b00 	vldr	d4, [r3]
 8004b7e:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <statesMachineLoop+0x824>)
 8004b80:	ed93 5b00 	vldr	d5, [r3]
 8004b84:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <statesMachineLoop+0x828>)
 8004b86:	ed93 6b00 	vldr	d6, [r3]
 8004b8a:	487a      	ldr	r0, [pc, #488]	; (8004d74 <statesMachineLoop+0x82c>)
 8004b8c:	eeb0 2a47 	vmov.f32	s4, s14
 8004b90:	eef0 2a67 	vmov.f32	s5, s15
 8004b94:	eeb0 0a48 	vmov.f32	s0, s16
 8004b98:	eef0 0a68 	vmov.f32	s1, s17
 8004b9c:	f002 f9b4 	bl	8006f08 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle*DEG_TO_RAD, motor2.theta*DEG_TO_RAD, vi, vf, vmax, amax, jmax, arrayParams2);
 8004ba0:	4b75      	ldr	r3, [pc, #468]	; (8004d78 <statesMachineLoop+0x830>)
 8004ba2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ba6:	a364      	add	r3, pc, #400	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f7fb fd2c 	bl	8000608 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	4b67      	ldr	r3, [pc, #412]	; (8004d5c <statesMachineLoop+0x814>)
 8004bbe:	f7fb fe4d 	bl	800085c <__aeabi_ddiv>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	ec43 2b18 	vmov	d8, r2, r3
 8004bca:	4b6b      	ldr	r3, [pc, #428]	; (8004d78 <statesMachineLoop+0x830>)
 8004bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bd0:	a359      	add	r3, pc, #356	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fd17 	bl	8000608 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	4b5d      	ldr	r3, [pc, #372]	; (8004d5c <statesMachineLoop+0x814>)
 8004be8:	f7fb fe38 	bl	800085c <__aeabi_ddiv>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	ec43 2b11 	vmov	d1, r2, r3
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <statesMachineLoop+0x818>)
 8004bf6:	ed93 7b00 	vldr	d7, [r3]
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <statesMachineLoop+0x81c>)
 8004bfc:	ed93 3b00 	vldr	d3, [r3]
 8004c00:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <statesMachineLoop+0x820>)
 8004c02:	ed93 4b00 	vldr	d4, [r3]
 8004c06:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <statesMachineLoop+0x824>)
 8004c08:	ed93 5b00 	vldr	d5, [r3]
 8004c0c:	4b58      	ldr	r3, [pc, #352]	; (8004d70 <statesMachineLoop+0x828>)
 8004c0e:	ed93 6b00 	vldr	d6, [r3]
 8004c12:	485a      	ldr	r0, [pc, #360]	; (8004d7c <statesMachineLoop+0x834>)
 8004c14:	eeb0 2a47 	vmov.f32	s4, s14
 8004c18:	eef0 2a67 	vmov.f32	s5, s15
 8004c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c20:	eef0 0a68 	vmov.f32	s1, s17
 8004c24:	f002 f970 	bl	8006f08 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle*DEG_TO_RAD, motor3.theta*DEG_TO_RAD, vi, vf, vmax, amax, jmax, arrayParams3);
 8004c28:	4b55      	ldr	r3, [pc, #340]	; (8004d80 <statesMachineLoop+0x838>)
 8004c2a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004c2e:	a342      	add	r3, pc, #264	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb fce8 	bl	8000608 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <statesMachineLoop+0x814>)
 8004c46:	f7fb fe09 	bl	800085c <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	ec43 2b18 	vmov	d8, r2, r3
 8004c52:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <statesMachineLoop+0x838>)
 8004c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c58:	a337      	add	r3, pc, #220	; (adr r3, 8004d38 <statesMachineLoop+0x7f0>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fcd3 	bl	8000608 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <statesMachineLoop+0x814>)
 8004c70:	f7fb fdf4 	bl	800085c <__aeabi_ddiv>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	ec43 2b11 	vmov	d1, r2, r3
 8004c7c:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <statesMachineLoop+0x818>)
 8004c7e:	ed93 7b00 	vldr	d7, [r3]
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <statesMachineLoop+0x81c>)
 8004c84:	ed93 3b00 	vldr	d3, [r3]
 8004c88:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <statesMachineLoop+0x820>)
 8004c8a:	ed93 4b00 	vldr	d4, [r3]
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <statesMachineLoop+0x824>)
 8004c90:	ed93 5b00 	vldr	d5, [r3]
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <statesMachineLoop+0x828>)
 8004c96:	ed93 6b00 	vldr	d6, [r3]
 8004c9a:	483a      	ldr	r0, [pc, #232]	; (8004d84 <statesMachineLoop+0x83c>)
 8004c9c:	eeb0 2a47 	vmov.f32	s4, s14
 8004ca0:	eef0 2a67 	vmov.f32	s5, s15
 8004ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ca8:	eef0 0a68 	vmov.f32	s1, s17
 8004cac:	f002 f92c 	bl	8006f08 <update_ScurveTraj>

			temp1=motor1.currentAngle;
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <statesMachineLoop+0x810>)
 8004cb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cb6:	4934      	ldr	r1, [pc, #208]	; (8004d88 <statesMachineLoop+0x840>)
 8004cb8:	e9c1 2300 	strd	r2, r3, [r1]
			temp2=motor2.currentAngle;
 8004cbc:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <statesMachineLoop+0x830>)
 8004cbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cc2:	4932      	ldr	r1, [pc, #200]	; (8004d8c <statesMachineLoop+0x844>)
 8004cc4:	e9c1 2300 	strd	r2, r3, [r1]
			temp3=motor3.currentAngle;
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <statesMachineLoop+0x838>)
 8004cca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cce:	4930      	ldr	r1, [pc, #192]	; (8004d90 <statesMachineLoop+0x848>)
 8004cd0:	e9c1 2300 	strd	r2, r3, [r1]

			configMotor(&motor1,1);
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	4820      	ldr	r0, [pc, #128]	; (8004d58 <statesMachineLoop+0x810>)
 8004cd8:	f7ff fb62 	bl	80043a0 <configMotor>
			configMotor(&motor2,2);
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4826      	ldr	r0, [pc, #152]	; (8004d78 <statesMachineLoop+0x830>)
 8004ce0:	f7ff fb5e 	bl	80043a0 <configMotor>
			configMotor(&motor3,3);
 8004ce4:	2103      	movs	r1, #3
 8004ce6:	4826      	ldr	r0, [pc, #152]	; (8004d80 <statesMachineLoop+0x838>)
 8004ce8:	f7ff fb5a 	bl	80043a0 <configMotor>

			timeFlag = false;
 8004cec:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <statesMachineLoop+0x84c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <statesMachineLoop+0x810>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8004cf8:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <statesMachineLoop+0x830>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <statesMachineLoop+0x838>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <statesMachineLoop+0x810>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <statesMachineLoop+0x830>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <statesMachineLoop+0x838>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start_IT(&htim9);
 8004d16:	4820      	ldr	r0, [pc, #128]	; (8004d98 <statesMachineLoop+0x850>)
 8004d18:	f004 fe08 	bl	800992c <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8004d1c:	481f      	ldr	r0, [pc, #124]	; (8004d9c <statesMachineLoop+0x854>)
 8004d1e:	f004 fd83 	bl	8009828 <HAL_TIM_Base_Start>

			HAL_UART_Transmit(&huart2,(uint8_t*)"S4\n", 4, 100);
 8004d22:	2364      	movs	r3, #100	; 0x64
 8004d24:	2204      	movs	r2, #4
 8004d26:	491e      	ldr	r1, [pc, #120]	; (8004da0 <statesMachineLoop+0x858>)
 8004d28:	481e      	ldr	r0, [pc, #120]	; (8004da4 <statesMachineLoop+0x85c>)
 8004d2a:	f006 fa28 	bl	800b17e <HAL_UART_Transmit>
			state = WORKING;
 8004d2e:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <statesMachineLoop+0x860>)
 8004d30:	2202      	movs	r2, #2
 8004d32:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004d34:	e394      	b.n	8005460 <statesMachineLoop+0xf18>
 8004d36:	bf00      	nop
 8004d38:	54442eea 	.word	0x54442eea
 8004d3c:	400921fb 	.word	0x400921fb
 8004d40:	20000813 	.word	0x20000813
 8004d44:	200006bb 	.word	0x200006bb
 8004d48:	20000470 	.word	0x20000470
 8004d4c:	20000500 	.word	0x20000500
 8004d50:	20000548 	.word	0x20000548
 8004d54:	20000718 	.word	0x20000718
 8004d58:	200005d8 	.word	0x200005d8
 8004d5c:	40668000 	.word	0x40668000
 8004d60:	20000010 	.word	0x20000010
 8004d64:	20000018 	.word	0x20000018
 8004d68:	20000008 	.word	0x20000008
 8004d6c:	20000020 	.word	0x20000020
 8004d70:	20000028 	.word	0x20000028
 8004d74:	20000748 	.word	0x20000748
 8004d78:	20000620 	.word	0x20000620
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000668 	.word	0x20000668
 8004d84:	200007b8 	.word	0x200007b8
 8004d88:	20000730 	.word	0x20000730
 8004d8c:	20000738 	.word	0x20000738
 8004d90:	20000740 	.word	0x20000740
 8004d94:	200007f0 	.word	0x200007f0
 8004d98:	200004b8 	.word	0x200004b8
 8004d9c:	20000398 	.word	0x20000398
 8004da0:	08010320 	.word	0x08010320
 8004da4:	20000590 	.word	0x20000590
 8004da8:	200006b9 	.word	0x200006b9

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim1,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8004dac:	4bd2      	ldr	r3, [pc, #840]	; (80050f8 <statesMachineLoop+0xbb0>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fbaf 	bl	8000514 <__aeabi_ui2d>
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	4bd0      	ldr	r3, [pc, #832]	; (80050fc <statesMachineLoop+0xbb4>)
 8004dbc:	f7fb fa6e 	bl	800029c <__adddf3>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	a1ca      	add	r1, pc, #808	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8004dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dca:	f7fb fd47 	bl	800085c <__aeabi_ddiv>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	461d      	mov	r5, r3
 8004dd6:	4bca      	ldr	r3, [pc, #808]	; (8005100 <statesMachineLoop+0xbb8>)
 8004dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	4bc8      	ldr	r3, [pc, #800]	; (8005104 <statesMachineLoop+0xbbc>)
 8004de2:	f7fb fc11 	bl	8000608 <__aeabi_dmul>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	49c6      	ldr	r1, [pc, #792]	; (8005108 <statesMachineLoop+0xbc0>)
 8004df0:	f7fb fd34 	bl	800085c <__aeabi_ddiv>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb fc04 	bl	8000608 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	4bbb      	ldr	r3, [pc, #748]	; (80050fc <statesMachineLoop+0xbb4>)
 8004e0e:	f7fb fa43 	bl	8000298 <__aeabi_dsub>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	49bd      	ldr	r1, [pc, #756]	; (800510c <statesMachineLoop+0xbc4>)
 8004e18:	680c      	ldr	r4, [r1, #0]
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f7fb fea3 	bl	8000b68 <__aeabi_d2uiz>
 8004e22:	4603      	mov	r3, r0
 8004e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e26:	4bb4      	ldr	r3, [pc, #720]	; (80050f8 <statesMachineLoop+0xbb0>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fb fb72 	bl	8000514 <__aeabi_ui2d>
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	4bb1      	ldr	r3, [pc, #708]	; (80050fc <statesMachineLoop+0xbb4>)
 8004e36:	f7fb fa31 	bl	800029c <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	a1ac      	add	r1, pc, #688	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8004e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e44:	f7fb fd0a 	bl	800085c <__aeabi_ddiv>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	461d      	mov	r5, r3
 8004e50:	4bab      	ldr	r3, [pc, #684]	; (8005100 <statesMachineLoop+0xbb8>)
 8004e52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	4baa      	ldr	r3, [pc, #680]	; (8005104 <statesMachineLoop+0xbbc>)
 8004e5c:	f7fb fbd4 	bl	8000608 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	49a7      	ldr	r1, [pc, #668]	; (8005108 <statesMachineLoop+0xbc0>)
 8004e6a:	f7fb fcf7 	bl	800085c <__aeabi_ddiv>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fbc7 	bl	8000608 <__aeabi_dmul>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b9d      	ldr	r3, [pc, #628]	; (80050fc <statesMachineLoop+0xbb4>)
 8004e88:	f7fb fa06 	bl	8000298 <__aeabi_dsub>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7fb fe68 	bl	8000b68 <__aeabi_d2uiz>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4a9c      	ldr	r2, [pc, #624]	; (800510c <statesMachineLoop+0xbc4>)
 8004e9c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3,COUNTERPERIOD(rpm_fault));
 8004e9e:	4b96      	ldr	r3, [pc, #600]	; (80050f8 <statesMachineLoop+0xbb0>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb36 	bl	8000514 <__aeabi_ui2d>
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	4b93      	ldr	r3, [pc, #588]	; (80050fc <statesMachineLoop+0xbb4>)
 8004eae:	f7fb f9f5 	bl	800029c <__adddf3>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	a18e      	add	r1, pc, #568	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8004eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ebc:	f7fb fcce 	bl	800085c <__aeabi_ddiv>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <statesMachineLoop+0xbb8>)
 8004eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	4b8c      	ldr	r3, [pc, #560]	; (8005104 <statesMachineLoop+0xbbc>)
 8004ed4:	f7fb fb98 	bl	8000608 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	4989      	ldr	r1, [pc, #548]	; (8005108 <statesMachineLoop+0xbc0>)
 8004ee2:	f7fb fcbb 	bl	800085c <__aeabi_ddiv>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb fb8b 	bl	8000608 <__aeabi_dmul>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	4b7f      	ldr	r3, [pc, #508]	; (80050fc <statesMachineLoop+0xbb4>)
 8004f00:	f7fb f9ca 	bl	8000298 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4981      	ldr	r1, [pc, #516]	; (8005110 <statesMachineLoop+0xbc8>)
 8004f0a:	680c      	ldr	r4, [r1, #0]
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f7fb fe2a 	bl	8000b68 <__aeabi_d2uiz>
 8004f14:	4603      	mov	r3, r0
 8004f16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f18:	4b77      	ldr	r3, [pc, #476]	; (80050f8 <statesMachineLoop+0xbb0>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb faf9 	bl	8000514 <__aeabi_ui2d>
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	4b75      	ldr	r3, [pc, #468]	; (80050fc <statesMachineLoop+0xbb4>)
 8004f28:	f7fb f9b8 	bl	800029c <__adddf3>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	a16f      	add	r1, pc, #444	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8004f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f36:	f7fb fc91 	bl	800085c <__aeabi_ddiv>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4614      	mov	r4, r2
 8004f40:	461d      	mov	r5, r3
 8004f42:	4b6f      	ldr	r3, [pc, #444]	; (8005100 <statesMachineLoop+0xbb8>)
 8004f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	4b6d      	ldr	r3, [pc, #436]	; (8005104 <statesMachineLoop+0xbbc>)
 8004f4e:	f7fb fb5b 	bl	8000608 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	496b      	ldr	r1, [pc, #428]	; (8005108 <statesMachineLoop+0xbc0>)
 8004f5c:	f7fb fc7e 	bl	800085c <__aeabi_ddiv>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb fb4e 	bl	8000608 <__aeabi_dmul>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b60      	ldr	r3, [pc, #384]	; (80050fc <statesMachineLoop+0xbb4>)
 8004f7a:	f7fb f98d 	bl	8000298 <__aeabi_dsub>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fb fdef 	bl	8000b68 <__aeabi_d2uiz>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4a60      	ldr	r2, [pc, #384]	; (8005110 <statesMachineLoop+0xbc8>)
 8004f8e:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4,COUNTERPERIOD(rpm_fault));
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <statesMachineLoop+0xbb0>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fabd 	bl	8000514 <__aeabi_ui2d>
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	4b57      	ldr	r3, [pc, #348]	; (80050fc <statesMachineLoop+0xbb4>)
 8004fa0:	f7fb f97c 	bl	800029c <__adddf3>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	a151      	add	r1, pc, #324	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8004faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fae:	f7fb fc55 	bl	800085c <__aeabi_ddiv>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	461d      	mov	r5, r3
 8004fba:	4b51      	ldr	r3, [pc, #324]	; (8005100 <statesMachineLoop+0xbb8>)
 8004fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <statesMachineLoop+0xbbc>)
 8004fc6:	f7fb fb1f 	bl	8000608 <__aeabi_dmul>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	494d      	ldr	r1, [pc, #308]	; (8005108 <statesMachineLoop+0xbc0>)
 8004fd4:	f7fb fc42 	bl	800085c <__aeabi_ddiv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4620      	mov	r0, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	f7fb fb12 	bl	8000608 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	4b42      	ldr	r3, [pc, #264]	; (80050fc <statesMachineLoop+0xbb4>)
 8004ff2:	f7fb f951 	bl	8000298 <__aeabi_dsub>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4946      	ldr	r1, [pc, #280]	; (8005114 <statesMachineLoop+0xbcc>)
 8004ffc:	680c      	ldr	r4, [r1, #0]
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f7fb fdb1 	bl	8000b68 <__aeabi_d2uiz>
 8005006:	4603      	mov	r3, r0
 8005008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <statesMachineLoop+0xbb0>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb fa80 	bl	8000514 <__aeabi_ui2d>
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	4b38      	ldr	r3, [pc, #224]	; (80050fc <statesMachineLoop+0xbb4>)
 800501a:	f7fb f93f 	bl	800029c <__adddf3>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	a133      	add	r1, pc, #204	; (adr r1, 80050f0 <statesMachineLoop+0xba8>)
 8005024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005028:	f7fb fc18 	bl	800085c <__aeabi_ddiv>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4614      	mov	r4, r2
 8005032:	461d      	mov	r5, r3
 8005034:	4b32      	ldr	r3, [pc, #200]	; (8005100 <statesMachineLoop+0xbb8>)
 8005036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <statesMachineLoop+0xbbc>)
 8005040:	f7fb fae2 	bl	8000608 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	f04f 0000 	mov.w	r0, #0
 800504c:	492e      	ldr	r1, [pc, #184]	; (8005108 <statesMachineLoop+0xbc0>)
 800504e:	f7fb fc05 	bl	800085c <__aeabi_ddiv>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4620      	mov	r0, r4
 8005058:	4629      	mov	r1, r5
 800505a:	f7fb fad5 	bl	8000608 <__aeabi_dmul>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <statesMachineLoop+0xbb4>)
 800506c:	f7fb f914 	bl	8000298 <__aeabi_dsub>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	f7fb fd76 	bl	8000b68 <__aeabi_d2uiz>
 800507c:	4603      	mov	r3, r0
 800507e:	4a25      	ldr	r2, [pc, #148]	; (8005114 <statesMachineLoop+0xbcc>)
 8005080:	60d3      	str	r3, [r2, #12]

		TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 8005082:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <statesMachineLoop+0xbb0>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa44 	bl	8000514 <__aeabi_ui2d>
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005094:	f7fb fbe2 	bl	800085c <__aeabi_ddiv>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4c16      	ldr	r4, [pc, #88]	; (80050f8 <statesMachineLoop+0xbb0>)
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7fb fd61 	bl	8000b68 <__aeabi_d2uiz>
 80050a6:	4603      	mov	r3, r0
 80050a8:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 80050aa:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <statesMachineLoop+0xbd0>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fa30 	bl	8000514 <__aeabi_ui2d>
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050bc:	f7fb fbce 	bl	800085c <__aeabi_ddiv>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4c14      	ldr	r4, [pc, #80]	; (8005118 <statesMachineLoop+0xbd0>)
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	f7fb fd4d 	bl	8000b68 <__aeabi_d2uiz>
 80050ce:	4603      	mov	r3, r0
 80050d0:	6363      	str	r3, [r4, #52]	; 0x34
		TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <statesMachineLoop+0xbd4>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb fa1c 	bl	8000514 <__aeabi_ui2d>
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050e4:	f7fb fbba 	bl	800085c <__aeabi_ddiv>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e018      	b.n	8005120 <statesMachineLoop+0xbd8>
 80050ee:	bf00      	nop
 80050f0:	00000000 	.word	0x00000000
 80050f4:	418e8480 	.word	0x418e8480
 80050f8:	40010000 	.word	0x40010000
 80050fc:	3ff00000 	.word	0x3ff00000
 8005100:	20000030 	.word	0x20000030
 8005104:	40bf4000 	.word	0x40bf4000
 8005108:	404e0000 	.word	0x404e0000
 800510c:	20000350 	.word	0x20000350
 8005110:	200003e0 	.word	0x200003e0
 8005114:	20000428 	.word	0x20000428
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	4cb4      	ldr	r4, [pc, #720]	; (80053f4 <statesMachineLoop+0xeac>)
 8005122:	4610      	mov	r0, r2
 8005124:	4619      	mov	r1, r3
 8005126:	f7fb fd1f 	bl	8000b68 <__aeabi_d2uiz>
 800512a:	4603      	mov	r3, r0
 800512c:	6363      	str	r3, [r4, #52]	; 0x34

		while((upperESalarm || lowerESalarm) && manualTrigger){
 800512e:	e152      	b.n	80053d6 <statesMachineLoop+0xe8e>


			 if (ES1i_PRESSED){
 8005130:	2120      	movs	r1, #32
 8005132:	48b1      	ldr	r0, [pc, #708]	; (80053f8 <statesMachineLoop+0xeb0>)
 8005134:	f003 fd3c 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11d      	bne.n	800517a <statesMachineLoop+0xc32>
				 HAL_Delay(DELAY_FC_SENSOR);
 800513e:	201e      	movs	r0, #30
 8005140:	f003 f9b8 	bl	80084b4 <HAL_Delay>
				 if (ES1i_PRESSED){
 8005144:	2120      	movs	r1, #32
 8005146:	48ac      	ldr	r0, [pc, #688]	; (80053f8 <statesMachineLoop+0xeb0>)
 8005148:	f003 fd32 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d113      	bne.n	800517a <statesMachineLoop+0xc32>
					 positive_Dir_MOTOR_1;
 8005152:	2200      	movs	r2, #0
 8005154:	2101      	movs	r1, #1
 8005156:	48a8      	ldr	r0, [pc, #672]	; (80053f8 <statesMachineLoop+0xeb0>)
 8005158:	f003 fd42 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 800515c:	2000      	movs	r0, #0
 800515e:	f003 f9a9 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8005162:	2100      	movs	r1, #0
 8005164:	48a5      	ldr	r0, [pc, #660]	; (80053fc <statesMachineLoop+0xeb4>)
 8005166:	f004 fccb 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800516a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800516e:	f003 f9a1 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8005172:	2100      	movs	r1, #0
 8005174:	48a1      	ldr	r0, [pc, #644]	; (80053fc <statesMachineLoop+0xeb4>)
 8005176:	f004 fd73 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 800517a:	2110      	movs	r1, #16
 800517c:	489e      	ldr	r0, [pc, #632]	; (80053f8 <statesMachineLoop+0xeb0>)
 800517e:	f003 fd17 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11d      	bne.n	80051c4 <statesMachineLoop+0xc7c>
				 HAL_Delay(DELAY_FC_SENSOR);
 8005188:	201e      	movs	r0, #30
 800518a:	f003 f993 	bl	80084b4 <HAL_Delay>
				 if (ES1s_PRESSED){
 800518e:	2110      	movs	r1, #16
 8005190:	4899      	ldr	r0, [pc, #612]	; (80053f8 <statesMachineLoop+0xeb0>)
 8005192:	f003 fd0d 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <statesMachineLoop+0xc7c>
					 negative_Dir_MOTOR_1;
 800519c:	2201      	movs	r2, #1
 800519e:	2101      	movs	r1, #1
 80051a0:	4895      	ldr	r0, [pc, #596]	; (80053f8 <statesMachineLoop+0xeb0>)
 80051a2:	f003 fd1d 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR); 							//delay cambio de dir
 80051a6:	2000      	movs	r0, #0
 80051a8:	f003 f984 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 80051ac:	2100      	movs	r1, #0
 80051ae:	4893      	ldr	r0, [pc, #588]	; (80053fc <statesMachineLoop+0xeb4>)
 80051b0:	f004 fca6 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80051b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b8:	f003 f97c 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80051bc:	2100      	movs	r1, #0
 80051be:	488f      	ldr	r0, [pc, #572]	; (80053fc <statesMachineLoop+0xeb4>)
 80051c0:	f004 fd4e 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2i_PRESSED){
 80051c4:	2104      	movs	r1, #4
 80051c6:	488e      	ldr	r0, [pc, #568]	; (8005400 <statesMachineLoop+0xeb8>)
 80051c8:	f003 fcf2 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d11d      	bne.n	800520e <statesMachineLoop+0xcc6>
				 HAL_Delay(DELAY_FC_SENSOR);
 80051d2:	201e      	movs	r0, #30
 80051d4:	f003 f96e 	bl	80084b4 <HAL_Delay>
				 if (ES2i_PRESSED){
 80051d8:	2104      	movs	r1, #4
 80051da:	4889      	ldr	r0, [pc, #548]	; (8005400 <statesMachineLoop+0xeb8>)
 80051dc:	f003 fce8 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d113      	bne.n	800520e <statesMachineLoop+0xcc6>
					 positive_Dir_MOTOR_2;
 80051e6:	2200      	movs	r2, #0
 80051e8:	2102      	movs	r1, #2
 80051ea:	4886      	ldr	r0, [pc, #536]	; (8005404 <statesMachineLoop+0xebc>)
 80051ec:	f003 fcf8 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f003 f95f 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 80051f6:	2100      	movs	r1, #0
 80051f8:	4883      	ldr	r0, [pc, #524]	; (8005408 <statesMachineLoop+0xec0>)
 80051fa:	f004 fc81 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80051fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005202:	f003 f957 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8005206:	2100      	movs	r1, #0
 8005208:	487f      	ldr	r0, [pc, #508]	; (8005408 <statesMachineLoop+0xec0>)
 800520a:	f004 fd29 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 800520e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005212:	487c      	ldr	r0, [pc, #496]	; (8005404 <statesMachineLoop+0xebc>)
 8005214:	f003 fccc 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11e      	bne.n	800525c <statesMachineLoop+0xd14>
				 HAL_Delay(DELAY_FC_SENSOR);
 800521e:	201e      	movs	r0, #30
 8005220:	f003 f948 	bl	80084b4 <HAL_Delay>
				 if (ES2s_PRESSED){
 8005224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005228:	4876      	ldr	r0, [pc, #472]	; (8005404 <statesMachineLoop+0xebc>)
 800522a:	f003 fcc1 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <statesMachineLoop+0xd14>
					 negative_Dir_MOTOR_2;
 8005234:	2201      	movs	r2, #1
 8005236:	2102      	movs	r1, #2
 8005238:	4872      	ldr	r0, [pc, #456]	; (8005404 <statesMachineLoop+0xebc>)
 800523a:	f003 fcd1 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR);
 800523e:	2000      	movs	r0, #0
 8005240:	f003 f938 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8005244:	2100      	movs	r1, #0
 8005246:	4870      	ldr	r0, [pc, #448]	; (8005408 <statesMachineLoop+0xec0>)
 8005248:	f004 fc5a 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800524c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005250:	f003 f930 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8005254:	2100      	movs	r1, #0
 8005256:	486c      	ldr	r0, [pc, #432]	; (8005408 <statesMachineLoop+0xec0>)
 8005258:	f004 fd02 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 800525c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005260:	4868      	ldr	r0, [pc, #416]	; (8005404 <statesMachineLoop+0xebc>)
 8005262:	f003 fca5 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11e      	bne.n	80052aa <statesMachineLoop+0xd62>
				 HAL_Delay(DELAY_FC_SENSOR);
 800526c:	201e      	movs	r0, #30
 800526e:	f003 f921 	bl	80084b4 <HAL_Delay>
				 if (ES3i_PRESSED){
 8005272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005276:	4863      	ldr	r0, [pc, #396]	; (8005404 <statesMachineLoop+0xebc>)
 8005278:	f003 fc9a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d113      	bne.n	80052aa <statesMachineLoop+0xd62>
					 positive_Dir_MOTOR_3;
 8005282:	2200      	movs	r2, #0
 8005284:	2101      	movs	r1, #1
 8005286:	485f      	ldr	r0, [pc, #380]	; (8005404 <statesMachineLoop+0xebc>)
 8005288:	f003 fcaa 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR);
 800528c:	2000      	movs	r0, #0
 800528e:	f003 f911 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8005292:	2100      	movs	r1, #0
 8005294:	485d      	ldr	r0, [pc, #372]	; (800540c <statesMachineLoop+0xec4>)
 8005296:	f004 fc33 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 800529a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800529e:	f003 f909 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80052a2:	2100      	movs	r1, #0
 80052a4:	4859      	ldr	r0, [pc, #356]	; (800540c <statesMachineLoop+0xec4>)
 80052a6:	f004 fcdb 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 80052aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052ae:	4855      	ldr	r0, [pc, #340]	; (8005404 <statesMachineLoop+0xebc>)
 80052b0:	f003 fc7e 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11e      	bne.n	80052f8 <statesMachineLoop+0xdb0>
				 HAL_Delay(DELAY_FC_SENSOR);
 80052ba:	201e      	movs	r0, #30
 80052bc:	f003 f8fa 	bl	80084b4 <HAL_Delay>
				 if (ES3s_PRESSED){
 80052c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052c4:	484f      	ldr	r0, [pc, #316]	; (8005404 <statesMachineLoop+0xebc>)
 80052c6:	f003 fc73 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d113      	bne.n	80052f8 <statesMachineLoop+0xdb0>
					 negative_Dir_MOTOR_3;
 80052d0:	2201      	movs	r2, #1
 80052d2:	2101      	movs	r1, #1
 80052d4:	484b      	ldr	r0, [pc, #300]	; (8005404 <statesMachineLoop+0xebc>)
 80052d6:	f003 fc83 	bl	8008be0 <HAL_GPIO_WritePin>
					 HAL_Delay(DELAY_DIR);
 80052da:	2000      	movs	r0, #0
 80052dc:	f003 f8ea 	bl	80084b4 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80052e0:	2100      	movs	r1, #0
 80052e2:	484a      	ldr	r0, [pc, #296]	; (800540c <statesMachineLoop+0xec4>)
 80052e4:	f004 fc0c 	bl	8009b00 <HAL_TIM_PWM_Start>
					 HAL_Delay(DELAY_FAULT);
 80052e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052ec:	f003 f8e2 	bl	80084b4 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80052f0:	2100      	movs	r1, #0
 80052f2:	4846      	ldr	r0, [pc, #280]	; (800540c <statesMachineLoop+0xec4>)
 80052f4:	f004 fcb4 	bl	8009c60 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80052f8:	2110      	movs	r1, #16
 80052fa:	483f      	ldr	r0, [pc, #252]	; (80053f8 <statesMachineLoop+0xeb0>)
 80052fc:	f003 fc58 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d067      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800530a:	483e      	ldr	r0, [pc, #248]	; (8005404 <statesMachineLoop+0xebc>)
 800530c:	f003 fc50 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d05f      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800531a:	483a      	ldr	r0, [pc, #232]	; (8005404 <statesMachineLoop+0xebc>)
 800531c:	f003 fc48 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d057      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005326:	2120      	movs	r1, #32
 8005328:	4833      	ldr	r0, [pc, #204]	; (80053f8 <statesMachineLoop+0xeb0>)
 800532a:	f003 fc41 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d050      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005334:	2104      	movs	r1, #4
 8005336:	4832      	ldr	r0, [pc, #200]	; (8005400 <statesMachineLoop+0xeb8>)
 8005338:	f003 fc3a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d049      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005346:	482f      	ldr	r0, [pc, #188]	; (8005404 <statesMachineLoop+0xebc>)
 8005348:	f003 fc32 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d041      	beq.n	80053d6 <statesMachineLoop+0xe8e>
				 HAL_Delay(DELAY_FC_SENSOR);
 8005352:	201e      	movs	r0, #30
 8005354:	f003 f8ae 	bl	80084b4 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8005358:	2110      	movs	r1, #16
 800535a:	4827      	ldr	r0, [pc, #156]	; (80053f8 <statesMachineLoop+0xeb0>)
 800535c:	f003 fc28 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d037      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800536a:	4826      	ldr	r0, [pc, #152]	; (8005404 <statesMachineLoop+0xebc>)
 800536c:	f003 fc20 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02f      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800537a:	4822      	ldr	r0, [pc, #136]	; (8005404 <statesMachineLoop+0xebc>)
 800537c:	f003 fc18 	bl	8008bb0 <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d027      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005386:	2120      	movs	r1, #32
 8005388:	481b      	ldr	r0, [pc, #108]	; (80053f8 <statesMachineLoop+0xeb0>)
 800538a:	f003 fc11 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 8005394:	2104      	movs	r1, #4
 8005396:	481a      	ldr	r0, [pc, #104]	; (8005400 <statesMachineLoop+0xeb8>)
 8005398:	f003 fc0a 	bl	8008bb0 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d019      	beq.n	80053d6 <statesMachineLoop+0xe8e>
 80053a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053a6:	4817      	ldr	r0, [pc, #92]	; (8005404 <statesMachineLoop+0xebc>)
 80053a8:	f003 fc02 	bl	8008bb0 <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <statesMachineLoop+0xe8e>

					 upperESalarm = false;
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <statesMachineLoop+0xec8>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
					 lowerESalarm = false;
 80053b8:	4b16      	ldr	r3, [pc, #88]	; (8005414 <statesMachineLoop+0xecc>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
					 manualTrigger = false;
 80053be:	4b16      	ldr	r3, [pc, #88]	; (8005418 <statesMachineLoop+0xed0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 13, 100);
 80053c4:	2364      	movs	r3, #100	; 0x64
 80053c6:	220d      	movs	r2, #13
 80053c8:	4914      	ldr	r1, [pc, #80]	; (800541c <statesMachineLoop+0xed4>)
 80053ca:	4815      	ldr	r0, [pc, #84]	; (8005420 <statesMachineLoop+0xed8>)
 80053cc:	f005 fed7 	bl	800b17e <HAL_UART_Transmit>
					 state = READY;
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <statesMachineLoop+0xedc>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
		while((upperESalarm || lowerESalarm) && manualTrigger){
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <statesMachineLoop+0xec8>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <statesMachineLoop+0xe9e>
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <statesMachineLoop+0xecc>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02f      	beq.n	8005446 <statesMachineLoop+0xefe>
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <statesMachineLoop+0xed0>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f47f aea0 	bne.w	8005130 <statesMachineLoop+0xbe8>
				 }
			 }

		}//End while

		while(faultDrivers && manualTrigger){
 80053f0:	e029      	b.n	8005446 <statesMachineLoop+0xefe>
 80053f2:	bf00      	nop
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40020400 	.word	0x40020400
 80053fc:	20000350 	.word	0x20000350
 8005400:	40020c00 	.word	0x40020c00
 8005404:	40020800 	.word	0x40020800
 8005408:	200003e0 	.word	0x200003e0
 800540c:	20000428 	.word	0x20000428
 8005410:	200006bd 	.word	0x200006bd
 8005414:	200006be 	.word	0x200006be
 8005418:	200006c0 	.word	0x200006c0
 800541c:	08010318 	.word	0x08010318
 8005420:	20000590 	.word	0x20000590
 8005424:	200006b9 	.word	0x200006b9

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <statesMachineLoop+0xf28>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
			manualTrigger = false;
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <statesMachineLoop+0xf2c>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart2,(uint8_t*)"S2\n", 13, 100);
 8005434:	2364      	movs	r3, #100	; 0x64
 8005436:	220d      	movs	r2, #13
 8005438:	490f      	ldr	r1, [pc, #60]	; (8005478 <statesMachineLoop+0xf30>)
 800543a:	4810      	ldr	r0, [pc, #64]	; (800547c <statesMachineLoop+0xf34>)
 800543c:	f005 fe9f 	bl	800b17e <HAL_UART_Transmit>
			state = READY;
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <statesMachineLoop+0xf38>)
 8005442:	2201      	movs	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && manualTrigger){
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <statesMachineLoop+0xf28>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <statesMachineLoop+0xf1c>
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <statesMachineLoop+0xf2c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e8      	bne.n	8005428 <statesMachineLoop+0xee0>

		}//End while


		break;
 8005456:	e005      	b.n	8005464 <statesMachineLoop+0xf1c>


	default:break;
 8005458:	bf00      	nop
 800545a:	e004      	b.n	8005466 <statesMachineLoop+0xf1e>
		break;
 800545c:	bf00      	nop
 800545e:	e002      	b.n	8005466 <statesMachineLoop+0xf1e>
		break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <statesMachineLoop+0xf1e>
		break;
 8005464:	bf00      	nop
	}
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	ecbd 8b04 	vpop	{d8-d9}
 800546e:	bdb0      	pop	{r4, r5, r7, pc}
 8005470:	200006bf 	.word	0x200006bf
 8005474:	200006c0 	.word	0x200006c0
 8005478:	08010318 	.word	0x08010318
 800547c:	20000590 	.word	0x20000590
 8005480:	200006b9 	.word	0x200006b9

08005484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <HAL_MspInit+0x5c>)
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <HAL_MspInit+0x5c>)
 8005494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005498:	6453      	str	r3, [r2, #68]	; 0x44
 800549a:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <HAL_MspInit+0x5c>)
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <HAL_MspInit+0x5c>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <HAL_MspInit+0x5c>)
 80054b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b4:	6413      	str	r3, [r2, #64]	; 0x40
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_MspInit+0x5c>)
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80054c2:	2005      	movs	r0, #5
 80054c4:	f003 f90e 	bl	80086e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	2001      	movs	r0, #1
 80054ce:	f003 f914 	bl	80086fa <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80054d2:	2001      	movs	r0, #1
 80054d4:	f003 f92d 	bl	8008732 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800

080054e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b098      	sub	sp, #96	; 0x60
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]
 80054fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	611a      	str	r2, [r3, #16]
 800550c:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4aa2      	ldr	r2, [pc, #648]	; (800579c <HAL_TIM_Base_MspInit+0x2b8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d126      	bne.n	8005566 <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005518:	2300      	movs	r3, #0
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
 800551c:	4ba0      	ldr	r3, [pc, #640]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	4a9f      	ldr	r2, [pc, #636]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6453      	str	r3, [r2, #68]	; 0x44
 8005528:	4b9d      	ldr	r3, [pc, #628]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	633b      	str	r3, [r7, #48]	; 0x30
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005534:	2200      	movs	r2, #0
 8005536:	2100      	movs	r1, #0
 8005538:	2018      	movs	r0, #24
 800553a:	f003 f8de 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800553e:	2018      	movs	r0, #24
 8005540:	f003 f8f7 	bl	8008732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005544:	2200      	movs	r2, #0
 8005546:	2102      	movs	r1, #2
 8005548:	2019      	movs	r0, #25
 800554a:	f003 f8d6 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800554e:	2019      	movs	r0, #25
 8005550:	f003 f8ef 	bl	8008732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8005554:	2200      	movs	r2, #0
 8005556:	2102      	movs	r1, #2
 8005558:	201a      	movs	r0, #26
 800555a:	f003 f8ce 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800555e:	201a      	movs	r0, #26
 8005560:	f003 f8e7 	bl	8008732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005564:	e115      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d10e      	bne.n	800558e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005570:	2300      	movs	r3, #0
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005574:	4b8a      	ldr	r3, [pc, #552]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	4a89      	ldr	r2, [pc, #548]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6413      	str	r3, [r2, #64]	; 0x40
 8005580:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800558c:	e101      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM3)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a84      	ldr	r2, [pc, #528]	; (80057a4 <HAL_TIM_Base_MspInit+0x2c0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005598:	2300      	movs	r3, #0
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
 800559c:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	4a7f      	ldr	r2, [pc, #508]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055a2:	f043 0302 	orr.w	r3, r3, #2
 80055a6:	6413      	str	r3, [r2, #64]	; 0x40
 80055a8:	4b7d      	ldr	r3, [pc, #500]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80055b4:	e0ed      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM4)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7b      	ldr	r2, [pc, #492]	; (80057a8 <HAL_TIM_Base_MspInit+0x2c4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10e      	bne.n	80055de <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	4b76      	ldr	r3, [pc, #472]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	4a75      	ldr	r2, [pc, #468]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055ca:	f043 0304 	orr.w	r3, r3, #4
 80055ce:	6413      	str	r3, [r2, #64]	; 0x40
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055dc:	e0d9      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM5)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a72      	ldr	r2, [pc, #456]	; (80057ac <HAL_TIM_Base_MspInit+0x2c8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d134      	bne.n	8005652 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	4a6b      	ldr	r2, [pc, #428]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055f2:	f043 0308 	orr.w	r3, r3, #8
 80055f6:	6413      	str	r3, [r2, #64]	; 0x40
 80055f8:	4b69      	ldr	r3, [pc, #420]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005604:	2300      	movs	r3, #0
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	4a64      	ldr	r2, [pc, #400]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	6313      	str	r3, [r2, #48]	; 0x30
 8005614:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 8005620:	2301      	movs	r3, #1
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562c:	2300      	movs	r3, #0
 800562e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005630:	2302      	movs	r3, #2
 8005632:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 8005634:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005638:	4619      	mov	r1, r3
 800563a:	485d      	ldr	r0, [pc, #372]	; (80057b0 <HAL_TIM_Base_MspInit+0x2cc>)
 800563c:	f003 f934 	bl	80088a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	2102      	movs	r1, #2
 8005644:	2032      	movs	r0, #50	; 0x32
 8005646:	f003 f858 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800564a:	2032      	movs	r0, #50	; 0x32
 800564c:	f003 f871 	bl	8008732 <HAL_NVIC_EnableIRQ>
}
 8005650:	e09f      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM9)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a57      	ldr	r2, [pc, #348]	; (80057b4 <HAL_TIM_Base_MspInit+0x2d0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d116      	bne.n	800568a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566a:	6453      	str	r3, [r2, #68]	; 0x44
 800566c:	4b4c      	ldr	r3, [pc, #304]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	2018      	movs	r0, #24
 800567e:	f003 f83c 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005682:	2018      	movs	r0, #24
 8005684:	f003 f855 	bl	8008732 <HAL_NVIC_EnableIRQ>
}
 8005688:	e083      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM10)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a4a      	ldr	r2, [pc, #296]	; (80057b8 <HAL_TIM_Base_MspInit+0x2d4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d135      	bne.n	8005700 <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800569e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a2:	6453      	str	r3, [r2, #68]	; 0x44
 80056a4:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80056ba:	f043 0302 	orr.w	r3, r3, #2
 80056be:	6313      	str	r3, [r2, #48]	; 0x30
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 80056cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2302      	movs	r3, #2
 80056d4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056da:	2300      	movs	r3, #0
 80056dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80056de:	2303      	movs	r3, #3
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 80056e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80056e6:	4619      	mov	r1, r3
 80056e8:	4834      	ldr	r0, [pc, #208]	; (80057bc <HAL_TIM_Base_MspInit+0x2d8>)
 80056ea:	f003 f8dd 	bl	80088a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80056ee:	2200      	movs	r2, #0
 80056f0:	2102      	movs	r1, #2
 80056f2:	2019      	movs	r0, #25
 80056f4:	f003 f801 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80056f8:	2019      	movs	r0, #25
 80056fa:	f003 f81a 	bl	8008732 <HAL_NVIC_EnableIRQ>
}
 80056fe:	e048      	b.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
  else if(htim_base->Instance==TIM11)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <HAL_TIM_Base_MspInit+0x2dc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d143      	bne.n	8005792 <HAL_TIM_Base_MspInit+0x2ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800570a:	2302      	movs	r3, #2
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800570e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005718:	4618      	mov	r0, r3
 800571a:	f003 ff45 	bl	80095a8 <HAL_RCCEx_PeriphCLKConfig>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_TIM_Base_MspInit+0x244>
      Error_Handler();
 8005724:	f7fe fe36 	bl	8004394 <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005736:	6453      	str	r3, [r2, #68]	; 0x44
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	6313      	str	r3, [r2, #48]	; 0x30
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_TIM_Base_MspInit+0x2bc>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 8005760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005764:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005766:	2302      	movs	r3, #2
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576a:	2300      	movs	r3, #0
 800576c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576e:	2300      	movs	r3, #0
 8005770:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005772:	2303      	movs	r3, #3
 8005774:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8005776:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800577a:	4619      	mov	r1, r3
 800577c:	480f      	ldr	r0, [pc, #60]	; (80057bc <HAL_TIM_Base_MspInit+0x2d8>)
 800577e:	f003 f893 	bl	80088a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8005782:	2200      	movs	r2, #0
 8005784:	2102      	movs	r1, #2
 8005786:	201a      	movs	r0, #26
 8005788:	f002 ffb7 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800578c:	201a      	movs	r0, #26
 800578e:	f002 ffd0 	bl	8008732 <HAL_NVIC_EnableIRQ>
}
 8005792:	bf00      	nop
 8005794:	3760      	adds	r7, #96	; 0x60
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40020000 	.word	0x40020000
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40014800 	.word	0x40014800

080057c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a36      	ldr	r2, [pc, #216]	; (80058bc <HAL_TIM_MspPostInit+0xf8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d11f      	bne.n	8005826 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	4a34      	ldr	r2, [pc, #208]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	6313      	str	r3, [r2, #48]	; 0x30
 80057f6:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = S_PulsePaP1_Pin;
 8005802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005808:	2302      	movs	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005814:	2301      	movs	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP1_GPIO_Port, &GPIO_InitStruct);
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	4619      	mov	r1, r3
 800581e:	4829      	ldr	r0, [pc, #164]	; (80058c4 <HAL_TIM_MspPostInit+0x100>)
 8005820:	f003 f842 	bl	80088a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005824:	e046      	b.n	80058b4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <HAL_TIM_MspPostInit+0x104>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d11e      	bne.n	800586e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6313      	str	r3, [r2, #48]	; 0x30
 8005840:	4b1f      	ldr	r3, [pc, #124]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsePaP2_Pin;
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005858:	2300      	movs	r3, #0
 800585a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800585c:	2302      	movs	r3, #2
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP2_GPIO_Port, &GPIO_InitStruct);
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4619      	mov	r1, r3
 8005866:	4817      	ldr	r0, [pc, #92]	; (80058c4 <HAL_TIM_MspPostInit+0x100>)
 8005868:	f003 f81e 	bl	80088a8 <HAL_GPIO_Init>
}
 800586c:	e022      	b.n	80058b4 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <HAL_TIM_MspPostInit+0x108>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d11d      	bne.n	80058b4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005878:	2300      	movs	r3, #0
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 8005882:	f043 0302 	orr.w	r3, r3, #2
 8005886:	6313      	str	r3, [r2, #48]	; 0x30
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <HAL_TIM_MspPostInit+0xfc>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsePaP3_Pin;
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005898:	2302      	movs	r3, #2
 800589a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a0:	2300      	movs	r3, #0
 80058a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80058a4:	2302      	movs	r3, #2
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsePaP3_GPIO_Port, &GPIO_InitStruct);
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	4619      	mov	r1, r3
 80058ae:	4808      	ldr	r0, [pc, #32]	; (80058d0 <HAL_TIM_MspPostInit+0x10c>)
 80058b0:	f002 fffa 	bl	80088a8 <HAL_GPIO_Init>
}
 80058b4:	bf00      	nop
 80058b6:	3728      	adds	r7, #40	; 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40020000 	.word	0x40020000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40020400 	.word	0x40020400

080058d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <HAL_UART_MspInit+0x94>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d133      	bne.n	800595e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <HAL_UART_MspInit+0x98>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_UART_MspInit+0x98>)
 8005900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005904:	6413      	str	r3, [r2, #64]	; 0x40
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_UART_MspInit+0x98>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_UART_MspInit+0x98>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_UART_MspInit+0x98>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6313      	str	r3, [r2, #48]	; 0x30
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_UART_MspInit+0x98>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800592e:	230c      	movs	r3, #12
 8005930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593a:	2303      	movs	r3, #3
 800593c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800593e:	2307      	movs	r3, #7
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005942:	f107 0314 	add.w	r3, r7, #20
 8005946:	4619      	mov	r1, r3
 8005948:	4809      	ldr	r0, [pc, #36]	; (8005970 <HAL_UART_MspInit+0x9c>)
 800594a:	f002 ffad 	bl	80088a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	2101      	movs	r1, #1
 8005952:	2026      	movs	r0, #38	; 0x26
 8005954:	f002 fed1 	bl	80086fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005958:	2026      	movs	r0, #38	; 0x26
 800595a:	f002 feea 	bl	8008732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	; 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40004400 	.word	0x40004400
 800596c:	40023800 	.word	0x40023800
 8005970:	40020000 	.word	0x40020000

08005974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005978:	e7fe      	b.n	8005978 <NMI_Handler+0x4>

0800597a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800597a:	b480      	push	{r7}
 800597c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800597e:	e7fe      	b.n	800597e <HardFault_Handler+0x4>

08005980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005984:	e7fe      	b.n	8005984 <MemManage_Handler+0x4>

08005986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800598a:	e7fe      	b.n	800598a <BusFault_Handler+0x4>

0800598c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005990:	e7fe      	b.n	8005990 <UsageFault_Handler+0x4>

08005992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059c0:	f002 fd58 	bl	8008474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80059cc:	f003 f93a 	bl	8008c44 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80059d0:	bf00      	nop
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 80059d8:	2004      	movs	r0, #4
 80059da:	f003 f91b 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 80059e6:	2010      	movs	r0, #16
 80059e8:	f003 f914 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 80059f4:	2020      	movs	r0, #32
 80059f6:	f003 f90d 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 80059fa:	2080      	movs	r0, #128	; 0x80
 80059fc:	f003 f90a 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a08:	4803      	ldr	r0, [pc, #12]	; (8005a18 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8005a0a:	f004 fb61 	bl	800a0d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8005a0e:	4803      	ldr	r0, [pc, #12]	; (8005a1c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8005a10:	f004 fb5e 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000350 	.word	0x20000350
 8005a1c:	200004b8 	.word	0x200004b8

08005a20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a24:	4803      	ldr	r0, [pc, #12]	; (8005a34 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005a26:	f004 fb53 	bl	800a0d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005a2a:	4803      	ldr	r0, [pc, #12]	; (8005a38 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005a2c:	f004 fb50 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000350 	.word	0x20000350
 8005a38:	20000500 	.word	0x20000500

08005a3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a40:	4803      	ldr	r0, [pc, #12]	; (8005a50 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005a42:	f004 fb45 	bl	800a0d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005a46:	4803      	ldr	r0, [pc, #12]	; (8005a54 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005a48:	f004 fb42 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000350 	.word	0x20000350
 8005a54:	20000548 	.word	0x20000548

08005a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <USART2_IRQHandler+0x10>)
 8005a5e:	f005 fc51 	bl	800b304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000590 	.word	0x20000590

08005a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8005a70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a74:	f003 f8ce 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8005a78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a7c:	f003 f8ca 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8005a80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a84:	f003 f8c6 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8005a88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a8c:	f003 f8c2 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8005a90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a94:	f003 f8be 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8005a98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a9c:	f003 f8ba 	bl	8008c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005aa0:	bf00      	nop
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005aa8:	4802      	ldr	r0, [pc, #8]	; (8005ab4 <TIM5_IRQHandler+0x10>)
 8005aaa:	f004 fb11 	bl	800a0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000470 	.word	0x20000470

08005ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
	return 1;
 8005abc:	2301      	movs	r3, #1
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <_kill>:

int _kill(int pid, int sig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ad2:	f006 fb75 	bl	800c1c0 <__errno>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2216      	movs	r2, #22
 8005ada:	601a      	str	r2, [r3, #0]
	return -1;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_exit>:

void _exit (int status)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005af0:	f04f 31ff 	mov.w	r1, #4294967295
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff ffe7 	bl	8005ac8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005afa:	e7fe      	b.n	8005afa <_exit+0x12>

08005afc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e00a      	b.n	8005b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b0e:	f3af 8000 	nop.w
 8005b12:	4601      	mov	r1, r0
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	60ba      	str	r2, [r7, #8]
 8005b1a:	b2ca      	uxtb	r2, r1
 8005b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	3301      	adds	r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	dbf0      	blt.n	8005b0e <_read+0x12>
	}

return len;
 8005b2c:	687b      	ldr	r3, [r7, #4]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e009      	b.n	8005b5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	60ba      	str	r2, [r7, #8]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	dbf1      	blt.n	8005b48 <_write+0x12>
	}
	return len;
 8005b64:	687b      	ldr	r3, [r7, #4]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <_close>:

int _close(int file)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
	return -1;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b96:	605a      	str	r2, [r3, #4]
	return 0;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <_isatty>:

int _isatty(int file)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	return 1;
 8005bae:	2301      	movs	r3, #1
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <_sbrk+0x5c>)
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <_sbrk+0x60>)
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bec:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <_sbrk+0x64>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <_sbrk+0x64>)
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <_sbrk+0x68>)
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <_sbrk+0x64>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d207      	bcs.n	8005c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c08:	f006 fada 	bl	800c1c0 <__errno>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	220c      	movs	r2, #12
 8005c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c12:	f04f 33ff 	mov.w	r3, #4294967295
 8005c16:	e009      	b.n	8005c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c18:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <_sbrk+0x64>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c1e:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <_sbrk+0x64>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <_sbrk+0x64>)
 8005c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20020000 	.word	0x20020000
 8005c38:	00000400 	.word	0x00000400
 8005c3c:	20000814 	.word	0x20000814
 8005c40:	200008b0 	.word	0x200008b0

08005c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <SystemInit+0x20>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	4a05      	ldr	r2, [pc, #20]	; (8005c64 <SystemInit+0x20>)
 8005c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8005c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c6c:	b094      	sub	sp, #80	; 0x50
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 8005c74:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
 8005c78:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 8005c7c:	62f8      	str	r0, [r7, #44]	; 0x2c

	double SIGN = SIGN_FUNC(_qf,_qi);
 8005c7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005c86:	f7fa fb07 	bl	8000298 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	f7fa ff45 	bl	8000b28 <__aeabi_dcmpgt>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <get_Straj+0x44>
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <get_Straj+0x74>)
 8005caa:	e01f      	b.n	8005cec <get_Straj+0x84>
 8005cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005cb4:	f7fa faf0 	bl	8000298 <__aeabi_dsub>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	f7fa ff10 	bl	8000aec <__aeabi_dcmplt>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <get_Straj+0x7c>
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <get_Straj+0x78>)
 8005cd8:	e008      	b.n	8005cec <get_Straj+0x84>
 8005cda:	bf00      	nop
 8005cdc:	3ff00000 	.word	0x3ff00000
 8005ce0:	bff00000 	.word	0xbff00000
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	amin=-amax;
 8005cf0:	4bb8      	ldr	r3, [pc, #736]	; (8005fd4 <get_Straj+0x36c>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	4614      	mov	r4, r2
 8005cf8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005cfc:	4bb6      	ldr	r3, [pc, #728]	; (8005fd8 <get_Straj+0x370>)
 8005cfe:	e9c3 4500 	strd	r4, r5, [r3]
	jmin=-jmax;
 8005d02:	4bb6      	ldr	r3, [pc, #728]	; (8005fdc <get_Straj+0x374>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	4690      	mov	r8, r2
 8005d0a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8005d0e:	4bb4      	ldr	r3, [pc, #720]	; (8005fe0 <get_Straj+0x378>)
 8005d10:	e9c3 8900 	strd	r8, r9, [r3]
	vmin=-vmax;
 8005d14:	4bb3      	ldr	r3, [pc, #716]	; (8005fe4 <get_Straj+0x37c>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	4692      	mov	sl, r2
 8005d1c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8005d20:	4bb1      	ldr	r3, [pc, #708]	; (8005fe8 <get_Straj+0x380>)
 8005d22:	e9c3 ab00 	strd	sl, fp, [r3]

	Tj1 = params[0];
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	49af      	ldr	r1, [pc, #700]	; (8005fec <get_Straj+0x384>)
 8005d2e:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005d38:	49ad      	ldr	r1, [pc, #692]	; (8005ff0 <get_Straj+0x388>)
 8005d3a:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d44:	49ab      	ldr	r1, [pc, #684]	; (8005ff4 <get_Straj+0x38c>)
 8005d46:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005d50:	49a9      	ldr	r1, [pc, #676]	; (8005ff8 <get_Straj+0x390>)
 8005d52:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d5c:	49a7      	ldr	r1, [pc, #668]	; (8005ffc <get_Straj+0x394>)
 8005d5e:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005d68:	49a5      	ldr	r1, [pc, #660]	; (8006000 <get_Straj+0x398>)
 8005d6a:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005d74:	49a3      	ldr	r1, [pc, #652]	; (8006004 <get_Straj+0x39c>)
 8005d76:	e9c1 2300 	strd	r2, r3, [r1]

	qi = SIGN*_qi;
 8005d7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d82:	f7fa fc41 	bl	8000608 <__aeabi_dmul>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	499f      	ldr	r1, [pc, #636]	; (8006008 <get_Straj+0x3a0>)
 8005d8c:	e9c1 2300 	strd	r2, r3, [r1]
	qf = SIGN*_qf;
 8005d90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d94:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d98:	f7fa fc36 	bl	8000608 <__aeabi_dmul>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	499a      	ldr	r1, [pc, #616]	; (800600c <get_Straj+0x3a4>)
 8005da2:	e9c1 2300 	strd	r2, r3, [r1]
    //vi = SIGN*vi;
    //vf = SIGN*vf;

	vmax = ((SIGN+1)/2)*vmax + ((SIGN-1)/2)*vmin;
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	4b99      	ldr	r3, [pc, #612]	; (8006010 <get_Straj+0x3a8>)
 8005dac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005db0:	f7fa fa74 	bl	800029c <__adddf3>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4610      	mov	r0, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dc4:	f7fa fd4a 	bl	800085c <__aeabi_ddiv>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <get_Straj+0x37c>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc17 	bl	8000608 <__aeabi_dmul>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4614      	mov	r4, r2
 8005de0:	461d      	mov	r5, r3
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	4b8a      	ldr	r3, [pc, #552]	; (8006010 <get_Straj+0x3a8>)
 8005de8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dec:	f7fa fa54 	bl	8000298 <__aeabi_dsub>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4610      	mov	r0, r2
 8005df6:	4619      	mov	r1, r3
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e00:	f7fa fd2c 	bl	800085c <__aeabi_ddiv>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4b76      	ldr	r3, [pc, #472]	; (8005fe8 <get_Straj+0x380>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fbf9 	bl	8000608 <__aeabi_dmul>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa fa3d 	bl	800029c <__adddf3>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	496f      	ldr	r1, [pc, #444]	; (8005fe4 <get_Straj+0x37c>)
 8005e28:	e9c1 2300 	strd	r2, r3, [r1]
	vmin = ((SIGN+1)/2)*vmin + ((SIGN-1)/2)*vmax;
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	4b77      	ldr	r3, [pc, #476]	; (8006010 <get_Straj+0x3a8>)
 8005e32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e36:	f7fa fa31 	bl	800029c <__adddf3>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e4a:	f7fa fd07 	bl	800085c <__aeabi_ddiv>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4b64      	ldr	r3, [pc, #400]	; (8005fe8 <get_Straj+0x380>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fbd4 	bl	8000608 <__aeabi_dmul>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	4b68      	ldr	r3, [pc, #416]	; (8006010 <get_Straj+0x3a8>)
 8005e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e72:	f7fa fa11 	bl	8000298 <__aeabi_dsub>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e86:	f7fa fce9 	bl	800085c <__aeabi_ddiv>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	4b54      	ldr	r3, [pc, #336]	; (8005fe4 <get_Straj+0x37c>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa fbb6 	bl	8000608 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f9fa 	bl	800029c <__adddf3>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	494e      	ldr	r1, [pc, #312]	; (8005fe8 <get_Straj+0x380>)
 8005eae:	e9c1 2300 	strd	r2, r3, [r1]

	amax = ((SIGN+1)/2)*amax + ((SIGN-1)/2)*amin;
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	4b56      	ldr	r3, [pc, #344]	; (8006010 <get_Straj+0x3a8>)
 8005eb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ebc:	f7fa f9ee 	bl	800029c <__adddf3>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ed0:	f7fa fcc4 	bl	800085c <__aeabi_ddiv>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4619      	mov	r1, r3
 8005edc:	4b3d      	ldr	r3, [pc, #244]	; (8005fd4 <get_Straj+0x36c>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa fb91 	bl	8000608 <__aeabi_dmul>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4614      	mov	r4, r2
 8005eec:	461d      	mov	r5, r3
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <get_Straj+0x3a8>)
 8005ef4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ef8:	f7fa f9ce 	bl	8000298 <__aeabi_dsub>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4610      	mov	r0, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f0c:	f7fa fca6 	bl	800085c <__aeabi_ddiv>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <get_Straj+0x370>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fb73 	bl	8000608 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa f9b7 	bl	800029c <__adddf3>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4928      	ldr	r1, [pc, #160]	; (8005fd4 <get_Straj+0x36c>)
 8005f34:	e9c1 2300 	strd	r2, r3, [r1]
	amin = ((SIGN+1)/2)*amin + ((SIGN-1)/2)*amax;
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	4b34      	ldr	r3, [pc, #208]	; (8006010 <get_Straj+0x3a8>)
 8005f3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f42:	f7fa f9ab 	bl	800029c <__adddf3>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f56:	f7fa fc81 	bl	800085c <__aeabi_ddiv>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <get_Straj+0x370>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fb4e 	bl	8000608 <__aeabi_dmul>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4614      	mov	r4, r2
 8005f72:	461d      	mov	r5, r3
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <get_Straj+0x3a8>)
 8005f7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f7e:	f7fa f98b 	bl	8000298 <__aeabi_dsub>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f92:	f7fa fc63 	bl	800085c <__aeabi_ddiv>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <get_Straj+0x36c>)
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa fb30 	bl	8000608 <__aeabi_dmul>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	f7fa f974 	bl	800029c <__adddf3>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4907      	ldr	r1, [pc, #28]	; (8005fd8 <get_Straj+0x370>)
 8005fba:	e9c1 2300 	strd	r2, r3, [r1]

	jmax = ((SIGN+1)/2)*jmax + ((SIGN-1)/2)*jmin;
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <get_Straj+0x3a8>)
 8005fc4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fc8:	f7fa f968 	bl	800029c <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	e01f      	b.n	8006014 <get_Straj+0x3ac>
 8005fd4:	20000020 	.word	0x20000020
 8005fd8:	200006f0 	.word	0x200006f0
 8005fdc:	20000028 	.word	0x20000028
 8005fe0:	200006f8 	.word	0x200006f8
 8005fe4:	20000008 	.word	0x20000008
 8005fe8:	200006e8 	.word	0x200006e8
 8005fec:	20000868 	.word	0x20000868
 8005ff0:	20000870 	.word	0x20000870
 8005ff4:	20000878 	.word	0x20000878
 8005ff8:	20000850 	.word	0x20000850
 8005ffc:	20000858 	.word	0x20000858
 8006000:	20000860 	.word	0x20000860
 8006004:	20000848 	.word	0x20000848
 8006008:	20000888 	.word	0x20000888
 800600c:	20000890 	.word	0x20000890
 8006010:	3ff00000 	.word	0x3ff00000
 8006014:	4619      	mov	r1, r3
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800601e:	f7fa fc1d 	bl	800085c <__aeabi_ddiv>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	4b9f      	ldr	r3, [pc, #636]	; (80062a8 <get_Straj+0x640>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa faea 	bl	8000608 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4614      	mov	r4, r2
 800603a:	461d      	mov	r5, r3
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	4b9a      	ldr	r3, [pc, #616]	; (80062ac <get_Straj+0x644>)
 8006042:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006046:	f7fa f927 	bl	8000298 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800605a:	f7fa fbff 	bl	800085c <__aeabi_ddiv>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	4b92      	ldr	r3, [pc, #584]	; (80062b0 <get_Straj+0x648>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa facc 	bl	8000608 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa f910 	bl	800029c <__adddf3>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4989      	ldr	r1, [pc, #548]	; (80062a8 <get_Straj+0x640>)
 8006082:	e9c1 2300 	strd	r2, r3, [r1]
	jmin = ((SIGN+1)/2)*jmin + ((SIGN-1)/2)*jmax;
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	4b88      	ldr	r3, [pc, #544]	; (80062ac <get_Straj+0x644>)
 800608c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006090:	f7fa f904 	bl	800029c <__adddf3>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4610      	mov	r0, r2
 800609a:	4619      	mov	r1, r3
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060a4:	f7fa fbda 	bl	800085c <__aeabi_ddiv>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	4b7f      	ldr	r3, [pc, #508]	; (80062b0 <get_Straj+0x648>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa faa7 	bl	8000608 <__aeabi_dmul>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4614      	mov	r4, r2
 80060c0:	461d      	mov	r5, r3
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	4b79      	ldr	r3, [pc, #484]	; (80062ac <get_Straj+0x644>)
 80060c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060cc:	f7fa f8e4 	bl	8000298 <__aeabi_dsub>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060e0:	f7fa fbbc 	bl	800085c <__aeabi_ddiv>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4610      	mov	r0, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	4b6e      	ldr	r3, [pc, #440]	; (80062a8 <get_Straj+0x640>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa fa89 	bl	8000608 <__aeabi_dmul>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4620      	mov	r0, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7fa f8cd 	bl	800029c <__adddf3>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	496a      	ldr	r1, [pc, #424]	; (80062b0 <get_Straj+0x648>)
 8006108:	e9c1 2300 	strd	r2, r3, [r1]

    alima = jmax*Tj1;
 800610c:	4b66      	ldr	r3, [pc, #408]	; (80062a8 <get_Straj+0x640>)
 800610e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006112:	4b68      	ldr	r3, [pc, #416]	; (80062b4 <get_Straj+0x64c>)
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4965      	ldr	r1, [pc, #404]	; (80062b8 <get_Straj+0x650>)
 8006122:	e9c1 2300 	strd	r2, r3, [r1]
    alimd = -jmax*Tj2;
 8006126:	4b60      	ldr	r3, [pc, #384]	; (80062a8 <get_Straj+0x640>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	623a      	str	r2, [r7, #32]
 800612e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
 8006134:	4b61      	ldr	r3, [pc, #388]	; (80062bc <get_Straj+0x654>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800613e:	f7fa fa63 	bl	8000608 <__aeabi_dmul>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	495e      	ldr	r1, [pc, #376]	; (80062c0 <get_Straj+0x658>)
 8006148:	e9c1 2300 	strd	r2, r3, [r1]
    vlim = vi+(Ta-Tj1)*alima;
 800614c:	4b5d      	ldr	r3, [pc, #372]	; (80062c4 <get_Straj+0x65c>)
 800614e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006152:	4b58      	ldr	r3, [pc, #352]	; (80062b4 <get_Straj+0x64c>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f89e 	bl	8000298 <__aeabi_dsub>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	4b54      	ldr	r3, [pc, #336]	; (80062b8 <get_Straj+0x650>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa fa4d 	bl	8000608 <__aeabi_dmul>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4610      	mov	r0, r2
 8006174:	4619      	mov	r1, r3
 8006176:	4b54      	ldr	r3, [pc, #336]	; (80062c8 <get_Straj+0x660>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa f88e 	bl	800029c <__adddf3>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4951      	ldr	r1, [pc, #324]	; (80062cc <get_Straj+0x664>)
 8006186:	e9c1 2300 	strd	r2, r3, [r1]

    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006196:	f7fa fcbd 	bl	8000b14 <__aeabi_dcmpge>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80a3 	beq.w	80062e8 <get_Straj+0x680>
 80061a2:	4b44      	ldr	r3, [pc, #272]	; (80062b4 <get_Straj+0x64c>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80061ac:	f7fa fca8 	bl	8000b00 <__aeabi_dcmple>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8098 	beq.w	80062e8 <get_Straj+0x680>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <get_Straj+0x660>)
 80061ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061c2:	f7fa fa21 	bl	8000608 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	4b40      	ldr	r3, [pc, #256]	; (80062d0 <get_Straj+0x668>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f862 	bl	800029c <__adddf3>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	461d      	mov	r5, r3
 80061e0:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8006298 <get_Straj+0x630>
 80061e4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80061e8:	f008 ff0e 	bl	800f008 <pow>
 80061ec:	ec51 0b10 	vmov	r0, r1, d0
 80061f0:	4b2d      	ldr	r3, [pc, #180]	; (80062a8 <get_Straj+0x640>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa fa07 	bl	8000608 <__aeabi_dmul>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	4b33      	ldr	r3, [pc, #204]	; (80062d4 <get_Straj+0x66c>)
 8006208:	f7fa fb28 	bl	800085c <__aeabi_ddiv>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7fa f842 	bl	800029c <__adddf3>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	492e      	ldr	r1, [pc, #184]	; (80062d8 <get_Straj+0x670>)
 800621e:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+jmax*pow(t,2)/2;
 8006222:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80062a0 <get_Straj+0x638>
 8006226:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800622a:	f008 feed 	bl	800f008 <pow>
 800622e:	ec51 0b10 	vmov	r0, r1, d0
 8006232:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <get_Straj+0x640>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f9e6 	bl	8000608 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4610      	mov	r0, r2
 8006242:	4619      	mov	r1, r3
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800624c:	f7fa fb06 	bl	800085c <__aeabi_ddiv>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <get_Straj+0x660>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa f81d 	bl	800029c <__adddf3>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	491d      	ldr	r1, [pc, #116]	; (80062dc <get_Straj+0x674>)
 8006268:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*t;
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <get_Straj+0x640>)
 800626e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006276:	f7fa f9c7 	bl	8000608 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4918      	ldr	r1, [pc, #96]	; (80062e0 <get_Straj+0x678>)
 8006280:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <get_Straj+0x640>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	4916      	ldr	r1, [pc, #88]	; (80062e4 <get_Straj+0x67c>)
 800628c:	e9c1 2300 	strd	r2, r3, [r1]
 8006290:	f000 bddf 	b.w	8006e52 <get_Straj+0x11ea>
 8006294:	f3af 8000 	nop.w
 8006298:	00000000 	.word	0x00000000
 800629c:	40080000 	.word	0x40080000
 80062a0:	00000000 	.word	0x00000000
 80062a4:	40000000 	.word	0x40000000
 80062a8:	20000028 	.word	0x20000028
 80062ac:	3ff00000 	.word	0x3ff00000
 80062b0:	200006f8 	.word	0x200006f8
 80062b4:	20000868 	.word	0x20000868
 80062b8:	20000830 	.word	0x20000830
 80062bc:	20000870 	.word	0x20000870
 80062c0:	20000838 	.word	0x20000838
 80062c4:	20000850 	.word	0x20000850
 80062c8:	20000010 	.word	0x20000010
 80062cc:	20000840 	.word	0x20000840
 80062d0:	20000888 	.word	0x20000888
 80062d4:	40180000 	.word	0x40180000
 80062d8:	200006c8 	.word	0x200006c8
 80062dc:	200006d0 	.word	0x200006d0
 80062e0:	200006d8 	.word	0x200006d8
 80062e4:	200006e0 	.word	0x200006e0
    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 80062e8:	4b65      	ldr	r3, [pc, #404]	; (8006480 <get_Straj+0x818>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80062f2:	f7fa fc19 	bl	8000b28 <__aeabi_dcmpgt>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80d9 	beq.w	80064b0 <get_Straj+0x848>
 80062fe:	4b61      	ldr	r3, [pc, #388]	; (8006484 <get_Straj+0x81c>)
 8006300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006304:	4b5e      	ldr	r3, [pc, #376]	; (8006480 <get_Straj+0x818>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ffc5 	bl	8000298 <__aeabi_dsub>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006316:	f7fa fbf3 	bl	8000b00 <__aeabi_dcmple>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80c7 	beq.w	80064b0 <get_Straj+0x848>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8006322:	4b59      	ldr	r3, [pc, #356]	; (8006488 <get_Straj+0x820>)
 8006324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006328:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800632c:	f7fa f96c 	bl	8000608 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	4b54      	ldr	r3, [pc, #336]	; (800648c <get_Straj+0x824>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f7f9 ffad 	bl	800029c <__adddf3>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4614      	mov	r4, r2
 8006348:	461d      	mov	r5, r3
 800634a:	4b51      	ldr	r3, [pc, #324]	; (8006490 <get_Straj+0x828>)
 800634c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	4b4f      	ldr	r3, [pc, #316]	; (8006494 <get_Straj+0x82c>)
 8006356:	f7fa fa81 	bl	800085c <__aeabi_ddiv>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4690      	mov	r8, r2
 8006360:	4699      	mov	r9, r3
 8006362:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8006478 <get_Straj+0x810>
 8006366:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800636a:	f008 fe4d 	bl	800f008 <pow>
 800636e:	ec51 0b10 	vmov	r0, r1, d0
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	4b48      	ldr	r3, [pc, #288]	; (8006498 <get_Straj+0x830>)
 8006378:	f7fa f946 	bl	8000608 <__aeabi_dmul>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4692      	mov	sl, r2
 8006382:	469b      	mov	fp, r3
 8006384:	4b3e      	ldr	r3, [pc, #248]	; (8006480 <get_Straj+0x818>)
 8006386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	4b42      	ldr	r3, [pc, #264]	; (8006498 <get_Straj+0x830>)
 8006390:	f7fa f93a 	bl	8000608 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063a0:	f7fa f932 	bl	8000608 <__aeabi_dmul>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4650      	mov	r0, sl
 80063aa:	4659      	mov	r1, fp
 80063ac:	f7f9 ff74 	bl	8000298 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4692      	mov	sl, r2
 80063b6:	469b      	mov	fp, r3
 80063b8:	4b31      	ldr	r3, [pc, #196]	; (8006480 <get_Straj+0x818>)
 80063ba:	ed93 7b00 	vldr	d7, [r3]
 80063be:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8006478 <get_Straj+0x810>
 80063c2:	eeb0 0a47 	vmov.f32	s0, s14
 80063c6:	eef0 0a67 	vmov.f32	s1, s15
 80063ca:	f008 fe1d 	bl	800f008 <pow>
 80063ce:	ec53 2b10 	vmov	r2, r3, d0
 80063d2:	4650      	mov	r0, sl
 80063d4:	4659      	mov	r1, fp
 80063d6:	f7f9 ff61 	bl	800029c <__adddf3>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f7fa f911 	bl	8000608 <__aeabi_dmul>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7f9 ff55 	bl	800029c <__adddf3>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4929      	ldr	r1, [pc, #164]	; (800649c <get_Straj+0x834>)
 80063f8:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vi+alima*(t-Tj1/2);
 80063fc:	4b20      	ldr	r3, [pc, #128]	; (8006480 <get_Straj+0x818>)
 80063fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800640a:	f7fa fa27 	bl	800085c <__aeabi_ddiv>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006416:	f7f9 ff3f 	bl	8000298 <__aeabi_dsub>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4610      	mov	r0, r2
 8006420:	4619      	mov	r1, r3
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <get_Straj+0x828>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7fa f8ee 	bl	8000608 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <get_Straj+0x820>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 ff2f 	bl	800029c <__adddf3>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4917      	ldr	r1, [pc, #92]	; (80064a0 <get_Straj+0x838>)
 8006444:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = jmax*Tj1;
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <get_Straj+0x83c>)
 800644a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <get_Straj+0x818>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f7fa f8d8 	bl	8000608 <__aeabi_dmul>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4912      	ldr	r1, [pc, #72]	; (80064a8 <get_Straj+0x840>)
 800645e:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006462:	4912      	ldr	r1, [pc, #72]	; (80064ac <get_Straj+0x844>)
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9c1 2300 	strd	r2, r3, [r1]
 8006470:	f000 bcef 	b.w	8006e52 <get_Straj+0x11ea>
 8006474:	f3af 8000 	nop.w
 8006478:	00000000 	.word	0x00000000
 800647c:	40000000 	.word	0x40000000
 8006480:	20000868 	.word	0x20000868
 8006484:	20000850 	.word	0x20000850
 8006488:	20000010 	.word	0x20000010
 800648c:	20000888 	.word	0x20000888
 8006490:	20000830 	.word	0x20000830
 8006494:	40180000 	.word	0x40180000
 8006498:	40080000 	.word	0x40080000
 800649c:	200006c8 	.word	0x200006c8
 80064a0:	200006d0 	.word	0x200006d0
 80064a4:	20000028 	.word	0x20000028
 80064a8:	200006d8 	.word	0x200006d8
 80064ac:	200006e0 	.word	0x200006e0
    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 80064b0:	4bad      	ldr	r3, [pc, #692]	; (8006768 <get_Straj+0xb00>)
 80064b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064b6:	4bad      	ldr	r3, [pc, #692]	; (800676c <get_Straj+0xb04>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7f9 feec 	bl	8000298 <__aeabi_dsub>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80064c8:	f7fa fb2e 	bl	8000b28 <__aeabi_dcmpgt>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80cd 	beq.w	800666e <get_Straj+0xa06>
 80064d4:	4ba4      	ldr	r3, [pc, #656]	; (8006768 <get_Straj+0xb00>)
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80064de:	f7fa fb0f 	bl	8000b00 <__aeabi_dcmple>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80c2 	beq.w	800666e <get_Straj+0xa06>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 80064ea:	4ba1      	ldr	r3, [pc, #644]	; (8006770 <get_Straj+0xb08>)
 80064ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064f0:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <get_Straj+0xb0c>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fed1 	bl	800029c <__adddf3>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	4b99      	ldr	r3, [pc, #612]	; (8006768 <get_Straj+0xb00>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7fa f87e 	bl	8000608 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800651c:	f7fa f99e 	bl	800085c <__aeabi_ddiv>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	4b93      	ldr	r3, [pc, #588]	; (8006778 <get_Straj+0xb10>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 feb5 	bl	800029c <__adddf3>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4614      	mov	r4, r2
 8006538:	461d      	mov	r5, r3
 800653a:	4b8b      	ldr	r3, [pc, #556]	; (8006768 <get_Straj+0xb00>)
 800653c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006544:	f7f9 fea8 	bl	8000298 <__aeabi_dsub>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	4b87      	ldr	r3, [pc, #540]	; (8006770 <get_Straj+0xb08>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7fa f857 	bl	8000608 <__aeabi_dmul>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7f9 fe99 	bl	8000298 <__aeabi_dsub>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4614      	mov	r4, r2
 800656c:	461d      	mov	r5, r3
 800656e:	4b7e      	ldr	r3, [pc, #504]	; (8006768 <get_Straj+0xb00>)
 8006570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006574:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006578:	f7f9 fe8e 	bl	8000298 <__aeabi_dsub>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	ec43 2b17 	vmov	d7, r2, r3
 8006584:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8006758 <get_Straj+0xaf0>
 8006588:	eeb0 0a47 	vmov.f32	s0, s14
 800658c:	eef0 0a67 	vmov.f32	s1, s15
 8006590:	f008 fd3a 	bl	800f008 <pow>
 8006594:	ec51 0b10 	vmov	r0, r1, d0
 8006598:	4b78      	ldr	r3, [pc, #480]	; (800677c <get_Straj+0xb14>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7fa f833 	bl	8000608 <__aeabi_dmul>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	4b74      	ldr	r3, [pc, #464]	; (8006780 <get_Straj+0xb18>)
 80065b0:	f7fa f954 	bl	800085c <__aeabi_ddiv>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7f9 fe6c 	bl	8000298 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	496f      	ldr	r1, [pc, #444]	; (8006784 <get_Straj+0xb1c>)
 80065c6:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 80065ca:	4b67      	ldr	r3, [pc, #412]	; (8006768 <get_Straj+0xb00>)
 80065cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065d4:	f7f9 fe60 	bl	8000298 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	ec43 2b17 	vmov	d7, r2, r3
 80065e0:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8006760 <get_Straj+0xaf8>
 80065e4:	eeb0 0a47 	vmov.f32	s0, s14
 80065e8:	eef0 0a67 	vmov.f32	s1, s15
 80065ec:	f008 fd0c 	bl	800f008 <pow>
 80065f0:	ec51 0b10 	vmov	r0, r1, d0
 80065f4:	4b61      	ldr	r3, [pc, #388]	; (800677c <get_Straj+0xb14>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7fa f805 	bl	8000608 <__aeabi_dmul>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800660e:	f7fa f925 	bl	800085c <__aeabi_ddiv>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	4b55      	ldr	r3, [pc, #340]	; (8006770 <get_Straj+0xb08>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fe3c 	bl	800029c <__adddf3>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4957      	ldr	r1, [pc, #348]	; (8006788 <get_Straj+0xb20>)
 800662a:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmin*(Ta-t);
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <get_Straj+0xb14>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	61ba      	str	r2, [r7, #24]
 8006636:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <get_Straj+0xb00>)
 800663e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006646:	f7f9 fe27 	bl	8000298 <__aeabi_dsub>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006652:	f7f9 ffd9 	bl	8000608 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	494c      	ldr	r1, [pc, #304]	; (800678c <get_Straj+0xb24>)
 800665c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmin;
 8006660:	4b46      	ldr	r3, [pc, #280]	; (800677c <get_Straj+0xb14>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	494a      	ldr	r1, [pc, #296]	; (8006790 <get_Straj+0xb28>)
 8006668:	e9c1 2300 	strd	r2, r3, [r1]
 800666c:	e3f1      	b.n	8006e52 <get_Straj+0x11ea>
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 800666e:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <get_Straj+0xb00>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006678:	f7fa fa56 	bl	8000b28 <__aeabi_dcmpgt>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 808a 	beq.w	8006798 <get_Straj+0xb30>
 8006684:	4b38      	ldr	r3, [pc, #224]	; (8006768 <get_Straj+0xb00>)
 8006686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800668a:	4b42      	ldr	r3, [pc, #264]	; (8006794 <get_Straj+0xb2c>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 fe04 	bl	800029c <__adddf3>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800669c:	f7fa fa30 	bl	8000b00 <__aeabi_dcmple>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d078      	beq.n	8006798 <get_Straj+0xb30>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 80066a6:	4b32      	ldr	r3, [pc, #200]	; (8006770 <get_Straj+0xb08>)
 80066a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ac:	4b31      	ldr	r3, [pc, #196]	; (8006774 <get_Straj+0xb0c>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fdf3 	bl	800029c <__adddf3>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	4b2a      	ldr	r3, [pc, #168]	; (8006768 <get_Straj+0xb00>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 ffa0 	bl	8000608 <__aeabi_dmul>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4610      	mov	r0, r2
 80066ce:	4619      	mov	r1, r3
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d8:	f7fa f8c0 	bl	800085c <__aeabi_ddiv>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4610      	mov	r0, r2
 80066e2:	4619      	mov	r1, r3
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <get_Straj+0xb10>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 fdd7 	bl	800029c <__adddf3>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4614      	mov	r4, r2
 80066f4:	461d      	mov	r5, r3
 80066f6:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <get_Straj+0xb00>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006700:	f7f9 fdca 	bl	8000298 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	4b18      	ldr	r3, [pc, #96]	; (8006770 <get_Straj+0xb08>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4620      	mov	r0, r4
 800671c:	4629      	mov	r1, r5
 800671e:	f7f9 fdbd 	bl	800029c <__adddf3>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4917      	ldr	r1, [pc, #92]	; (8006784 <get_Straj+0xb1c>)
 8006728:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vlim;
 800672c:	4b10      	ldr	r3, [pc, #64]	; (8006770 <get_Straj+0xb08>)
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	4915      	ldr	r1, [pc, #84]	; (8006788 <get_Straj+0xb20>)
 8006734:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8006738:	4914      	ldr	r1, [pc, #80]	; (800678c <get_Straj+0xb24>)
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006746:	4912      	ldr	r1, [pc, #72]	; (8006790 <get_Straj+0xb28>)
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9c1 2300 	strd	r2, r3, [r1]
 8006754:	e37d      	b.n	8006e52 <get_Straj+0x11ea>
 8006756:	bf00      	nop
 8006758:	00000000 	.word	0x00000000
 800675c:	40080000 	.word	0x40080000
 8006760:	00000000 	.word	0x00000000
 8006764:	40000000 	.word	0x40000000
 8006768:	20000850 	.word	0x20000850
 800676c:	20000868 	.word	0x20000868
 8006770:	20000840 	.word	0x20000840
 8006774:	20000010 	.word	0x20000010
 8006778:	20000888 	.word	0x20000888
 800677c:	200006f8 	.word	0x200006f8
 8006780:	40180000 	.word	0x40180000
 8006784:	200006c8 	.word	0x200006c8
 8006788:	200006d0 	.word	0x200006d0
 800678c:	200006d8 	.word	0x200006d8
 8006790:	200006e0 	.word	0x200006e0
 8006794:	20000860 	.word	0x20000860
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8006798:	4b8d      	ldr	r3, [pc, #564]	; (80069d0 <get_Straj+0xd68>)
 800679a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800679e:	4b8d      	ldr	r3, [pc, #564]	; (80069d4 <get_Straj+0xd6c>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f7f9 fd78 	bl	8000298 <__aeabi_dsub>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067b0:	f7fa f9b0 	bl	8000b14 <__aeabi_dcmpge>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8124 	beq.w	8006a04 <get_Straj+0xd9c>
 80067bc:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <get_Straj+0xd68>)
 80067be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067c2:	4b84      	ldr	r3, [pc, #528]	; (80069d4 <get_Straj+0xd6c>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 fd66 	bl	8000298 <__aeabi_dsub>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4610      	mov	r0, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	4b80      	ldr	r3, [pc, #512]	; (80069d8 <get_Straj+0xd70>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7f9 fd5f 	bl	800029c <__adddf3>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067e6:	f7fa f98b 	bl	8000b00 <__aeabi_dcmple>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8109 	beq.w	8006a04 <get_Straj+0xd9c>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 80067f2:	4b7a      	ldr	r3, [pc, #488]	; (80069dc <get_Straj+0xd74>)
 80067f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80067f8:	4b79      	ldr	r3, [pc, #484]	; (80069e0 <get_Straj+0xd78>)
 80067fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067fe:	4b79      	ldr	r3, [pc, #484]	; (80069e4 <get_Straj+0xd7c>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f7f9 fd4a 	bl	800029c <__adddf3>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	4b70      	ldr	r3, [pc, #448]	; (80069d4 <get_Straj+0xd6c>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 fef7 	bl	8000608 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800682a:	f7fa f817 	bl	800085c <__aeabi_ddiv>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4620      	mov	r0, r4
 8006834:	4629      	mov	r1, r5
 8006836:	f7f9 fd2f 	bl	8000298 <__aeabi_dsub>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4614      	mov	r4, r2
 8006840:	461d      	mov	r5, r3
 8006842:	4b63      	ldr	r3, [pc, #396]	; (80069d0 <get_Straj+0xd68>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800684c:	f7f9 fd24 	bl	8000298 <__aeabi_dsub>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4610      	mov	r0, r2
 8006856:	4619      	mov	r1, r3
 8006858:	4b5e      	ldr	r3, [pc, #376]	; (80069d4 <get_Straj+0xd6c>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fd1d 	bl	800029c <__adddf3>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	4b5d      	ldr	r3, [pc, #372]	; (80069e0 <get_Straj+0xd78>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 feca 	bl	8000608 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fd0e 	bl	800029c <__adddf3>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4b51      	ldr	r3, [pc, #324]	; (80069d0 <get_Straj+0xd68>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006892:	f7f9 fd01 	bl	8000298 <__aeabi_dsub>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4610      	mov	r0, r2
 800689c:	4619      	mov	r1, r3
 800689e:	4b4d      	ldr	r3, [pc, #308]	; (80069d4 <get_Straj+0xd6c>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fcfa 	bl	800029c <__adddf3>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	ec43 2b17 	vmov	d7, r2, r3
 80068b0:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80069c0 <get_Straj+0xd58>
 80068b4:	eeb0 0a47 	vmov.f32	s0, s14
 80068b8:	eef0 0a67 	vmov.f32	s1, s15
 80068bc:	f008 fba4 	bl	800f008 <pow>
 80068c0:	ec51 0b10 	vmov	r0, r1, d0
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	4b47      	ldr	r3, [pc, #284]	; (80069e8 <get_Straj+0xd80>)
 80068ca:	f7f9 ffc7 	bl	800085c <__aeabi_ddiv>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4610      	mov	r0, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	4b45      	ldr	r3, [pc, #276]	; (80069ec <get_Straj+0xd84>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fcd6 	bl	8000298 <__aeabi_dsub>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	493f      	ldr	r1, [pc, #252]	; (80069f0 <get_Straj+0xd88>)
 80068f2:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 80068f6:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <get_Straj+0xd78>)
 80068f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068fc:	4b34      	ldr	r3, [pc, #208]	; (80069d0 <get_Straj+0xd68>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006906:	f7f9 fcc7 	bl	8000298 <__aeabi_dsub>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4610      	mov	r0, r2
 8006910:	4619      	mov	r1, r3
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <get_Straj+0xd6c>)
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f7f9 fcc0 	bl	800029c <__adddf3>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	ec43 2b17 	vmov	d7, r2, r3
 8006924:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80069c8 <get_Straj+0xd60>
 8006928:	eeb0 0a47 	vmov.f32	s0, s14
 800692c:	eef0 0a67 	vmov.f32	s1, s15
 8006930:	f008 fb6a 	bl	800f008 <pow>
 8006934:	ec51 0b10 	vmov	r0, r1, d0
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006940:	f7f9 ff8c 	bl	800085c <__aeabi_ddiv>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <get_Straj+0xd84>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fe59 	bl	8000608 <__aeabi_dmul>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4620      	mov	r0, r4
 800695c:	4629      	mov	r1, r5
 800695e:	f7f9 fc9b 	bl	8000298 <__aeabi_dsub>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4923      	ldr	r1, [pc, #140]	; (80069f4 <get_Straj+0xd8c>)
 8006968:	e9c1 2300 	strd	r2, r3, [r1]
        qdd=-jmax*(t-T+Td);
 800696c:	4b1f      	ldr	r3, [pc, #124]	; (80069ec <get_Straj+0xd84>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	613a      	str	r2, [r7, #16]
 8006974:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <get_Straj+0xd68>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006984:	f7f9 fc88 	bl	8000298 <__aeabi_dsub>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <get_Straj+0xd6c>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fc81 	bl	800029c <__adddf3>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069a2:	f7f9 fe31 	bl	8000608 <__aeabi_dmul>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4913      	ldr	r1, [pc, #76]	; (80069f8 <get_Straj+0xd90>)
 80069ac:	e9c1 2300 	strd	r2, r3, [r1]
        qddd=jmin;
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <get_Straj+0xd94>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	4912      	ldr	r1, [pc, #72]	; (8006a00 <get_Straj+0xd98>)
 80069b8:	e9c1 2300 	strd	r2, r3, [r1]
 80069bc:	e249      	b.n	8006e52 <get_Straj+0x11ea>
 80069be:	bf00      	nop
 80069c0:	00000000 	.word	0x00000000
 80069c4:	40080000 	.word	0x40080000
 80069c8:	00000000 	.word	0x00000000
 80069cc:	40000000 	.word	0x40000000
 80069d0:	20000848 	.word	0x20000848
 80069d4:	20000858 	.word	0x20000858
 80069d8:	20000870 	.word	0x20000870
 80069dc:	20000890 	.word	0x20000890
 80069e0:	20000840 	.word	0x20000840
 80069e4:	20000018 	.word	0x20000018
 80069e8:	40180000 	.word	0x40180000
 80069ec:	20000028 	.word	0x20000028
 80069f0:	200006c8 	.word	0x200006c8
 80069f4:	200006d0 	.word	0x200006d0
 80069f8:	200006d8 	.word	0x200006d8
 80069fc:	200006f8 	.word	0x200006f8
 8006a00:	200006e0 	.word	0x200006e0
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8006a04:	4ba8      	ldr	r3, [pc, #672]	; (8006ca8 <get_Straj+0x1040>)
 8006a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a0a:	4ba8      	ldr	r3, [pc, #672]	; (8006cac <get_Straj+0x1044>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fc42 	bl	8000298 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4ba4      	ldr	r3, [pc, #656]	; (8006cb0 <get_Straj+0x1048>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fc3b 	bl	800029c <__adddf3>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a2e:	f7fa f87b 	bl	8000b28 <__aeabi_dcmpgt>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8153 	beq.w	8006ce0 <get_Straj+0x1078>
 8006a3a:	4b9b      	ldr	r3, [pc, #620]	; (8006ca8 <get_Straj+0x1040>)
 8006a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a40:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <get_Straj+0x1048>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fc27 	bl	8000298 <__aeabi_dsub>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006a52:	f7fa f855 	bl	8000b00 <__aeabi_dcmple>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8141 	beq.w	8006ce0 <get_Straj+0x1078>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8006a5e:	4b95      	ldr	r3, [pc, #596]	; (8006cb4 <get_Straj+0x104c>)
 8006a60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a64:	4b94      	ldr	r3, [pc, #592]	; (8006cb8 <get_Straj+0x1050>)
 8006a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a6a:	4b94      	ldr	r3, [pc, #592]	; (8006cbc <get_Straj+0x1054>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fc14 	bl	800029c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4b8b      	ldr	r3, [pc, #556]	; (8006cac <get_Straj+0x1044>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fdc1 	bl	8000608 <__aeabi_dmul>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a96:	f7f9 fee1 	bl	800085c <__aeabi_ddiv>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fbf9 	bl	8000298 <__aeabi_dsub>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4614      	mov	r4, r2
 8006aac:	461d      	mov	r5, r3
 8006aae:	4b7e      	ldr	r3, [pc, #504]	; (8006ca8 <get_Straj+0x1040>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ab8:	f7f9 fbee 	bl	8000298 <__aeabi_dsub>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b79      	ldr	r3, [pc, #484]	; (8006cac <get_Straj+0x1044>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fbe7 	bl	800029c <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4b78      	ldr	r3, [pc, #480]	; (8006cb8 <get_Straj+0x1050>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 fd94 	bl	8000608 <__aeabi_dmul>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f7f9 fbd8 	bl	800029c <__adddf3>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4690      	mov	r8, r2
 8006af2:	4699      	mov	r9, r3
 8006af4:	4b72      	ldr	r3, [pc, #456]	; (8006cc0 <get_Straj+0x1058>)
 8006af6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <get_Straj+0x105c>)
 8006b00:	f7f9 feac 	bl	800085c <__aeabi_ddiv>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4692      	mov	sl, r2
 8006b0a:	469b      	mov	fp, r3
 8006b0c:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <get_Straj+0x1040>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b16:	f7f9 fbbf 	bl	8000298 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	4b62      	ldr	r3, [pc, #392]	; (8006cac <get_Straj+0x1044>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fbb8 	bl	800029c <__adddf3>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	ec43 2b17 	vmov	d7, r2, r3
 8006b34:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8006ca0 <get_Straj+0x1038>
 8006b38:	eeb0 0a47 	vmov.f32	s0, s14
 8006b3c:	eef0 0a67 	vmov.f32	s1, s15
 8006b40:	f008 fa62 	bl	800f008 <pow>
 8006b44:	ec51 0b10 	vmov	r0, r1, d0
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	4b5e      	ldr	r3, [pc, #376]	; (8006cc8 <get_Straj+0x1060>)
 8006b4e:	f7f9 fd5b 	bl	8000608 <__aeabi_dmul>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006b5a:	4b55      	ldr	r3, [pc, #340]	; (8006cb0 <get_Straj+0x1048>)
 8006b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	4b58      	ldr	r3, [pc, #352]	; (8006cc8 <get_Straj+0x1060>)
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4614      	mov	r4, r2
 8006b70:	461d      	mov	r5, r3
 8006b72:	4b4d      	ldr	r3, [pc, #308]	; (8006ca8 <get_Straj+0x1040>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	4b48      	ldr	r3, [pc, #288]	; (8006cac <get_Straj+0x1044>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb85 	bl	800029c <__adddf3>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	f7f9 fd35 	bl	8000608 <__aeabi_dmul>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ba6:	f7f9 fb77 	bl	8000298 <__aeabi_dsub>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4614      	mov	r4, r2
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <get_Straj+0x1048>)
 8006bb4:	ed93 7b00 	vldr	d7, [r3]
 8006bb8:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8006ca0 <get_Straj+0x1038>
 8006bbc:	eeb0 0a47 	vmov.f32	s0, s14
 8006bc0:	eef0 0a67 	vmov.f32	s1, s15
 8006bc4:	f008 fa20 	bl	800f008 <pow>
 8006bc8:	ec53 2b10 	vmov	r2, r3, d0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fb64 	bl	800029c <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	f7f9 fd14 	bl	8000608 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 fb58 	bl	800029c <__adddf3>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4936      	ldr	r1, [pc, #216]	; (8006ccc <get_Straj+0x1064>)
 8006bf2:	e9c1 2300 	strd	r2, r3, [r1]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <get_Straj+0x1040>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006c00:	f7f9 fb4a 	bl	8000298 <__aeabi_dsub>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4b27      	ldr	r3, [pc, #156]	; (8006cac <get_Straj+0x1044>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb43 	bl	800029c <__adddf3>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <get_Straj+0x1048>)
 8006c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c2c:	f7f9 fe16 	bl	800085c <__aeabi_ddiv>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7f9 fb2e 	bl	8000298 <__aeabi_dsub>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4610      	mov	r0, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <get_Straj+0x1058>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fcdd 	bl	8000608 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <get_Straj+0x1050>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fb1e 	bl	800029c <__adddf3>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	491a      	ldr	r1, [pc, #104]	; (8006cd0 <get_Straj+0x1068>)
 8006c66:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*Tj2;
 8006c6a:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <get_Straj+0x106c>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	60ba      	str	r2, [r7, #8]
 8006c72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <get_Straj+0x1048>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c82:	f7f9 fcc1 	bl	8000608 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4913      	ldr	r1, [pc, #76]	; (8006cd8 <get_Straj+0x1070>)
 8006c8c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8006c90:	4912      	ldr	r1, [pc, #72]	; (8006cdc <get_Straj+0x1074>)
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	e9c1 2300 	strd	r2, r3, [r1]
 8006c9e:	e0d8      	b.n	8006e52 <get_Straj+0x11ea>
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	40000000 	.word	0x40000000
 8006ca8:	20000848 	.word	0x20000848
 8006cac:	20000858 	.word	0x20000858
 8006cb0:	20000870 	.word	0x20000870
 8006cb4:	20000890 	.word	0x20000890
 8006cb8:	20000840 	.word	0x20000840
 8006cbc:	20000018 	.word	0x20000018
 8006cc0:	20000838 	.word	0x20000838
 8006cc4:	40180000 	.word	0x40180000
 8006cc8:	40080000 	.word	0x40080000
 8006ccc:	200006c8 	.word	0x200006c8
 8006cd0:	200006d0 	.word	0x200006d0
 8006cd4:	20000028 	.word	0x20000028
 8006cd8:	200006d8 	.word	0x200006d8
 8006cdc:	200006e0 	.word	0x200006e0
    } else if (t>T-Tj2 && t<=T){
 8006ce0:	4b7f      	ldr	r3, [pc, #508]	; (8006ee0 <get_Straj+0x1278>)
 8006ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ce6:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <get_Straj+0x127c>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fad4 	bl	8000298 <__aeabi_dsub>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006cf8:	f7f9 ff16 	bl	8000b28 <__aeabi_dcmpgt>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 80a7 	beq.w	8006e52 <get_Straj+0x11ea>
 8006d04:	4b76      	ldr	r3, [pc, #472]	; (8006ee0 <get_Straj+0x1278>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d0e:	f7f9 fef7 	bl	8000b00 <__aeabi_dcmple>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 809c 	beq.w	8006e52 <get_Straj+0x11ea>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8006d1a:	4b73      	ldr	r3, [pc, #460]	; (8006ee8 <get_Straj+0x1280>)
 8006d1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006d20:	4b6f      	ldr	r3, [pc, #444]	; (8006ee0 <get_Straj+0x1278>)
 8006d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d2a:	f7f9 fab5 	bl	8000298 <__aeabi_dsub>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	4b6d      	ldr	r3, [pc, #436]	; (8006eec <get_Straj+0x1284>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	f7f9 fc64 	bl	8000608 <__aeabi_dmul>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 faa6 	bl	8000298 <__aeabi_dsub>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	461d      	mov	r5, r3
 8006d54:	4b62      	ldr	r3, [pc, #392]	; (8006ee0 <get_Straj+0x1278>)
 8006d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d5e:	f7f9 fa9b 	bl	8000298 <__aeabi_dsub>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	ec43 2b17 	vmov	d7, r2, r3
 8006d6a:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8006ed0 <get_Straj+0x1268>
 8006d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8006d72:	eef0 0a67 	vmov.f32	s1, s15
 8006d76:	f008 f947 	bl	800f008 <pow>
 8006d7a:	ec51 0b10 	vmov	r0, r1, d0
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	4b5b      	ldr	r3, [pc, #364]	; (8006ef0 <get_Straj+0x1288>)
 8006d84:	f7f9 fd6a 	bl	800085c <__aeabi_ddiv>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4b58      	ldr	r3, [pc, #352]	; (8006ef4 <get_Straj+0x128c>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fc37 	bl	8000608 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa79 	bl	8000298 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4953      	ldr	r1, [pc, #332]	; (8006ef8 <get_Straj+0x1290>)
 8006dac:	e9c1 2300 	strd	r2, r3, [r1]
        qd = vf+jmax*(pow(T-t,2))/2;
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <get_Straj+0x1278>)
 8006db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dba:	f7f9 fa6d 	bl	8000298 <__aeabi_dsub>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	ec43 2b17 	vmov	d7, r2, r3
 8006dc6:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8006ed8 <get_Straj+0x1270>
 8006dca:	eeb0 0a47 	vmov.f32	s0, s14
 8006dce:	eef0 0a67 	vmov.f32	s1, s15
 8006dd2:	f008 f919 	bl	800f008 <pow>
 8006dd6:	ec51 0b10 	vmov	r0, r1, d0
 8006dda:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <get_Straj+0x128c>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4610      	mov	r0, r2
 8006dea:	4619      	mov	r1, r3
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006df4:	f7f9 fd32 	bl	800085c <__aeabi_ddiv>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <get_Straj+0x1284>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fa49 	bl	800029c <__adddf3>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	493b      	ldr	r1, [pc, #236]	; (8006efc <get_Straj+0x1294>)
 8006e10:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = -jmax*(T-t);
 8006e14:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <get_Straj+0x128c>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	603a      	str	r2, [r7, #0]
 8006e1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <get_Straj+0x1278>)
 8006e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e2c:	f7f9 fa34 	bl	8000298 <__aeabi_dsub>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e38:	f7f9 fbe6 	bl	8000608 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	492f      	ldr	r1, [pc, #188]	; (8006f00 <get_Straj+0x1298>)
 8006e42:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = jmax;
 8006e46:	4b2b      	ldr	r3, [pc, #172]	; (8006ef4 <get_Straj+0x128c>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	492d      	ldr	r1, [pc, #180]	; (8006f04 <get_Straj+0x129c>)
 8006e4e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    q = SIGN * q;
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <get_Straj+0x1290>)
 8006e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e5c:	f7f9 fbd4 	bl	8000608 <__aeabi_dmul>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4924      	ldr	r1, [pc, #144]	; (8006ef8 <get_Straj+0x1290>)
 8006e66:	e9c1 2300 	strd	r2, r3, [r1]
    qd = SIGN * qd;
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <get_Straj+0x1294>)
 8006e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e74:	f7f9 fbc8 	bl	8000608 <__aeabi_dmul>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	491f      	ldr	r1, [pc, #124]	; (8006efc <get_Straj+0x1294>)
 8006e7e:	e9c1 2300 	strd	r2, r3, [r1]
    qdd = SIGN * qdd;
 8006e82:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <get_Straj+0x1298>)
 8006e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e8c:	f7f9 fbbc 	bl	8000608 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	491a      	ldr	r1, [pc, #104]	; (8006f00 <get_Straj+0x1298>)
 8006e96:	e9c1 2300 	strd	r2, r3, [r1]
    qddd = SIGN * qddd;
 8006e9a:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <get_Straj+0x129c>)
 8006e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ea4:	f7f9 fbb0 	bl	8000608 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4915      	ldr	r1, [pc, #84]	; (8006f04 <get_Straj+0x129c>)
 8006eae:	e9c1 2300 	strd	r2, r3, [r1]


    return qd;
 8006eb2:	4b12      	ldr	r3, [pc, #72]	; (8006efc <get_Straj+0x1294>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8006ec0:	eef0 0a67 	vmov.f32	s1, s15
 8006ec4:	3750      	adds	r7, #80	; 0x50
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	40080000 	.word	0x40080000
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	40000000 	.word	0x40000000
 8006ee0:	20000848 	.word	0x20000848
 8006ee4:	20000870 	.word	0x20000870
 8006ee8:	20000890 	.word	0x20000890
 8006eec:	20000018 	.word	0x20000018
 8006ef0:	40180000 	.word	0x40180000
 8006ef4:	20000028 	.word	0x20000028
 8006ef8:	200006c8 	.word	0x200006c8
 8006efc:	200006d0 	.word	0x200006d0
 8006f00:	200006d8 	.word	0x200006d8
 8006f04:	200006e0 	.word	0x200006e0

08006f08 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8006f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f0c:	b096      	sub	sp, #88	; 0x58
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
 8006f14:	ed87 1b10 	vstr	d1, [r7, #64]	; 0x40
 8006f18:	ed87 2b0e 	vstr	d2, [r7, #56]	; 0x38
 8006f1c:	ed87 3b0c 	vstr	d3, [r7, #48]	; 0x30
 8006f20:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 8006f24:	ed87 5b08 	vstr	d5, [r7, #32]
 8006f28:	ed87 6b06 	vstr	d6, [r7, #24]
 8006f2c:	6178      	str	r0, [r7, #20]

	double SIGN = SIGN_FUNC(_qf,_qi);
 8006f2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f36:	f7f9 f9af 	bl	8000298 <__aeabi_dsub>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	f7f9 fded 	bl	8000b28 <__aeabi_dcmpgt>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <update_ScurveTraj+0x54>
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <update_ScurveTraj+0x84>)
 8006f5a:	e01f      	b.n	8006f9c <update_ScurveTraj+0x94>
 8006f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f64:	f7f9 f998 	bl	8000298 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	f7f9 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <update_ScurveTraj+0x8c>
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <update_ScurveTraj+0x88>)
 8006f88:	e008      	b.n	8006f9c <update_ScurveTraj+0x94>
 8006f8a:	bf00      	nop
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	bff00000 	.word	0xbff00000
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	amin = -amax;
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	4bca      	ldr	r3, [pc, #808]	; (80072d8 <update_ScurveTraj+0x3d0>)
 8006fae:	ed97 7b02 	vldr	d7, [r7, #8]
 8006fb2:	ed83 7b00 	vstr	d7, [r3]
	jmin = -jmax;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	4bc6      	ldr	r3, [pc, #792]	; (80072dc <update_ScurveTraj+0x3d4>)
 8006fc4:	ed97 7b00 	vldr	d7, [r7]
 8006fc8:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8006fcc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006fd4:	4bc2      	ldr	r3, [pc, #776]	; (80072e0 <update_ScurveTraj+0x3d8>)
 8006fd6:	e9c3 4500 	strd	r4, r5, [r3]

	qi = SIGN*_qi;
 8006fda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	49be      	ldr	r1, [pc, #760]	; (80072e4 <update_ScurveTraj+0x3dc>)
 8006fec:	e9c1 2300 	strd	r2, r3, [r1]
	qf = SIGN*_qf;
 8006ff0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ff4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	49b9      	ldr	r1, [pc, #740]	; (80072e8 <update_ScurveTraj+0x3e0>)
 8007002:	e9c1 2300 	strd	r2, r3, [r1]
    //vi = SIGN*vi;
    //vf = SIGN*vf;

	vmax = ((SIGN+1)/2)*vmax + ((SIGN-1)/2)*vmin;
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	4bb8      	ldr	r3, [pc, #736]	; (80072ec <update_ScurveTraj+0x3e4>)
 800700c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007010:	f7f9 f944 	bl	800029c <__adddf3>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4610      	mov	r0, r2
 800701a:	4619      	mov	r1, r3
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007024:	f7f9 fc1a 	bl	800085c <__aeabi_ddiv>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4610      	mov	r0, r2
 800702e:	4619      	mov	r1, r3
 8007030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007034:	f7f9 fae8 	bl	8000608 <__aeabi_dmul>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4614      	mov	r4, r2
 800703e:	461d      	mov	r5, r3
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	4ba9      	ldr	r3, [pc, #676]	; (80072ec <update_ScurveTraj+0x3e4>)
 8007046:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800704a:	f7f9 f925 	bl	8000298 <__aeabi_dsub>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4610      	mov	r0, r2
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800705e:	f7f9 fbfd 	bl	800085c <__aeabi_ddiv>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4610      	mov	r0, r2
 8007068:	4619      	mov	r1, r3
 800706a:	4b9d      	ldr	r3, [pc, #628]	; (80072e0 <update_ScurveTraj+0x3d8>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 faca 	bl	8000608 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4620      	mov	r0, r4
 800707a:	4629      	mov	r1, r5
 800707c:	f7f9 f90e 	bl	800029c <__adddf3>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	vmin = ((SIGN+1)/2)*vmin + ((SIGN-1)/2)*vmax;
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	4b97      	ldr	r3, [pc, #604]	; (80072ec <update_ScurveTraj+0x3e4>)
 800708e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007092:	f7f9 f903 	bl	800029c <__adddf3>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070a6:	f7f9 fbd9 	bl	800085c <__aeabi_ddiv>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4610      	mov	r0, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	4b8b      	ldr	r3, [pc, #556]	; (80072e0 <update_ScurveTraj+0x3d8>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 faa6 	bl	8000608 <__aeabi_dmul>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4614      	mov	r4, r2
 80070c2:	461d      	mov	r5, r3
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	4b88      	ldr	r3, [pc, #544]	; (80072ec <update_ScurveTraj+0x3e4>)
 80070ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80070ce:	f7f9 f8e3 	bl	8000298 <__aeabi_dsub>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070e2:	f7f9 fbbb 	bl	800085c <__aeabi_ddiv>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070f2:	f7f9 fa89 	bl	8000608 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 f8cd 	bl	800029c <__adddf3>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4976      	ldr	r1, [pc, #472]	; (80072e0 <update_ScurveTraj+0x3d8>)
 8007108:	e9c1 2300 	strd	r2, r3, [r1]
	amax = ((SIGN+1)/2)*amax + ((SIGN-1)/2)*amin;
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	4b76      	ldr	r3, [pc, #472]	; (80072ec <update_ScurveTraj+0x3e4>)
 8007112:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007116:	f7f9 f8c1 	bl	800029c <__adddf3>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800712a:	f7f9 fb97 	bl	800085c <__aeabi_ddiv>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800713a:	f7f9 fa65 	bl	8000608 <__aeabi_dmul>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4614      	mov	r4, r2
 8007144:	461d      	mov	r5, r3
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	4b68      	ldr	r3, [pc, #416]	; (80072ec <update_ScurveTraj+0x3e4>)
 800714c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007150:	f7f9 f8a2 	bl	8000298 <__aeabi_dsub>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4610      	mov	r0, r2
 800715a:	4619      	mov	r1, r3
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007164:	f7f9 fb7a 	bl	800085c <__aeabi_ddiv>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	4b59      	ldr	r3, [pc, #356]	; (80072d8 <update_ScurveTraj+0x3d0>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 fa47 	bl	8000608 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 f88b 	bl	800029c <__adddf3>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	amin = ((SIGN+1)/2)*amin + ((SIGN-1)/2)*amax;
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	4b56      	ldr	r3, [pc, #344]	; (80072ec <update_ScurveTraj+0x3e4>)
 8007194:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007198:	f7f9 f880 	bl	800029c <__adddf3>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4610      	mov	r0, r2
 80071a2:	4619      	mov	r1, r3
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071ac:	f7f9 fb56 	bl	800085c <__aeabi_ddiv>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4610      	mov	r0, r2
 80071b6:	4619      	mov	r1, r3
 80071b8:	4b47      	ldr	r3, [pc, #284]	; (80072d8 <update_ScurveTraj+0x3d0>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 fa23 	bl	8000608 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4614      	mov	r4, r2
 80071c8:	461d      	mov	r5, r3
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	4b47      	ldr	r3, [pc, #284]	; (80072ec <update_ScurveTraj+0x3e4>)
 80071d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80071d4:	f7f9 f860 	bl	8000298 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e8:	f7f9 fb38 	bl	800085c <__aeabi_ddiv>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4610      	mov	r0, r2
 80071f2:	4619      	mov	r1, r3
 80071f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071f8:	f7f9 fa06 	bl	8000608 <__aeabi_dmul>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4620      	mov	r0, r4
 8007202:	4629      	mov	r1, r5
 8007204:	f7f9 f84a 	bl	800029c <__adddf3>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4932      	ldr	r1, [pc, #200]	; (80072d8 <update_ScurveTraj+0x3d0>)
 800720e:	e9c1 2300 	strd	r2, r3, [r1]
	jmax = ((SIGN+1)/2)*jmax + ((SIGN-1)/2)*jmin;
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	4b35      	ldr	r3, [pc, #212]	; (80072ec <update_ScurveTraj+0x3e4>)
 8007218:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800721c:	f7f9 f83e 	bl	800029c <__adddf3>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007230:	f7f9 fb14 	bl	800085c <__aeabi_ddiv>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4610      	mov	r0, r2
 800723a:	4619      	mov	r1, r3
 800723c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007240:	f7f9 f9e2 	bl	8000608 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4614      	mov	r4, r2
 800724a:	461d      	mov	r5, r3
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	4b26      	ldr	r3, [pc, #152]	; (80072ec <update_ScurveTraj+0x3e4>)
 8007252:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007256:	f7f9 f81f 	bl	8000298 <__aeabi_dsub>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800726a:	f7f9 faf7 	bl	800085c <__aeabi_ddiv>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	4b19      	ldr	r3, [pc, #100]	; (80072dc <update_ScurveTraj+0x3d4>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f9 f9c4 	bl	8000608 <__aeabi_dmul>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	f7f9 f808 	bl	800029c <__adddf3>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	e9c7 2306 	strd	r2, r3, [r7, #24]
	jmin = ((SIGN+1)/2)*jmin + ((SIGN-1)/2)*jmax;
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <update_ScurveTraj+0x3e4>)
 800729a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800729e:	f7f8 fffd 	bl	800029c <__adddf3>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4610      	mov	r0, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072b2:	f7f9 fad3 	bl	800085c <__aeabi_ddiv>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4610      	mov	r0, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <update_ScurveTraj+0x3d4>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f7f9 f9a0 	bl	8000608 <__aeabi_dmul>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4614      	mov	r4, r2
 80072ce:	461d      	mov	r5, r3
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <update_ScurveTraj+0x3e4>)
 80072d6:	e00b      	b.n	80072f0 <update_ScurveTraj+0x3e8>
 80072d8:	200006f0 	.word	0x200006f0
 80072dc:	200006f8 	.word	0x200006f8
 80072e0:	200006e8 	.word	0x200006e8
 80072e4:	20000888 	.word	0x20000888
 80072e8:	20000890 	.word	0x20000890
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072f4:	f7f8 ffd0 	bl	8000298 <__aeabi_dsub>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007308:	f7f9 faa8 	bl	800085c <__aeabi_ddiv>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007318:	f7f9 f976 	bl	8000608 <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4620      	mov	r0, r4
 8007322:	4629      	mov	r1, r5
 8007324:	f7f8 ffba 	bl	800029c <__adddf3>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4966      	ldr	r1, [pc, #408]	; (80074c8 <update_ScurveTraj+0x5c0>)
 800732e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	*/


	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8007332:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800733a:	f7f8 ffad 	bl	8000298 <__aeabi_dsub>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4610      	mov	r0, r2
 8007344:	4619      	mov	r1, r3
 8007346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800734a:	f7f9 f95d 	bl	8000608 <__aeabi_dmul>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4614      	mov	r4, r2
 8007354:	461d      	mov	r5, r3
 8007356:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 80074c0 <update_ScurveTraj+0x5b8>
 800735a:	ed97 0b08 	vldr	d0, [r7, #32]
 800735e:	f007 fe53 	bl	800f008 <pow>
 8007362:	ec53 2b10 	vmov	r2, r3, d0
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02e      	beq.n	80073d2 <update_ScurveTraj+0x4ca>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8007374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007378:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800737c:	f7f8 ff8c 	bl	8000298 <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4692      	mov	sl, r2
 8007386:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800738a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800738e:	4650      	mov	r0, sl
 8007390:	4659      	mov	r1, fp
 8007392:	f7f9 fa63 	bl	800085c <__aeabi_ddiv>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	ec43 2b17 	vmov	d7, r2, r3
 800739e:	eeb0 0a47 	vmov.f32	s0, s14
 80073a2:	eef0 0a67 	vmov.f32	s1, s15
 80073a6:	f007 fe9f 	bl	800f0e8 <sqrt>
 80073aa:	eeb0 7a40 	vmov.f32	s14, s0
 80073ae:	eef0 7a60 	vmov.f32	s15, s1
 80073b2:	4b46      	ldr	r3, [pc, #280]	; (80074cc <update_ScurveTraj+0x5c4>)
 80073b4:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 80073b8:	4b44      	ldr	r3, [pc, #272]	; (80074cc <update_ScurveTraj+0x5c4>)
 80073ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	f7f8 ff6b 	bl	800029c <__adddf3>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4941      	ldr	r1, [pc, #260]	; (80074d0 <update_ScurveTraj+0x5c8>)
 80073cc:	e9c1 2300 	strd	r2, r3, [r1]
 80073d0:	e026      	b.n	8007420 <update_ScurveTraj+0x518>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 80073d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073da:	f7f9 fa3f 	bl	800085c <__aeabi_ddiv>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	493a      	ldr	r1, [pc, #232]	; (80074cc <update_ScurveTraj+0x5c4>)
 80073e4:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=Tj1+(vmax-vi)/amax;
 80073e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80073f0:	f7f8 ff52 	bl	8000298 <__aeabi_dsub>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4610      	mov	r0, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007400:	f7f9 fa2c 	bl	800085c <__aeabi_ddiv>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <update_ScurveTraj+0x5c4>)
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f8 ff43 	bl	800029c <__adddf3>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	492d      	ldr	r1, [pc, #180]	; (80074d0 <update_ScurveTraj+0x5c8>)
 800741c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8007420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007424:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007428:	f7f8 ff36 	bl	8000298 <__aeabi_dsub>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4610      	mov	r0, r2
 8007432:	4619      	mov	r1, r3
 8007434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007438:	f7f9 f8e6 	bl	8000608 <__aeabi_dmul>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80074c0 <update_ScurveTraj+0x5b8>
 8007448:	ed97 0b08 	vldr	d0, [r7, #32]
 800744c:	f007 fddc 	bl	800f008 <pow>
 8007450:	ec53 2b10 	vmov	r2, r3, d0
 8007454:	4620      	mov	r0, r4
 8007456:	4629      	mov	r1, r5
 8007458:	f7f9 fb48 	bl	8000aec <__aeabi_dcmplt>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d03c      	beq.n	80074dc <update_ScurveTraj+0x5d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8007462:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800746a:	f7f8 ff15 	bl	8000298 <__aeabi_dsub>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	4690      	mov	r8, r2
 8007474:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800747c:	4640      	mov	r0, r8
 800747e:	4649      	mov	r1, r9
 8007480:	f7f9 f9ec 	bl	800085c <__aeabi_ddiv>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	ec43 2b17 	vmov	d7, r2, r3
 800748c:	eeb0 0a47 	vmov.f32	s0, s14
 8007490:	eef0 0a67 	vmov.f32	s1, s15
 8007494:	f007 fe28 	bl	800f0e8 <sqrt>
 8007498:	eeb0 7a40 	vmov.f32	s14, s0
 800749c:	eef0 7a60 	vmov.f32	s15, s1
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <update_ScurveTraj+0x5cc>)
 80074a2:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <update_ScurveTraj+0x5cc>)
 80074a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	f7f8 fef4 	bl	800029c <__adddf3>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <update_ScurveTraj+0x5d0>)
 80074ba:	e9c1 2300 	strd	r2, r3, [r1]
 80074be:	e034      	b.n	800752a <update_ScurveTraj+0x622>
 80074c0:	00000000 	.word	0x00000000
 80074c4:	40000000 	.word	0x40000000
 80074c8:	200006f8 	.word	0x200006f8
 80074cc:	20000868 	.word	0x20000868
 80074d0:	20000850 	.word	0x20000850
 80074d4:	20000870 	.word	0x20000870
 80074d8:	20000858 	.word	0x20000858
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 80074dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80074e4:	f7f9 f9ba 	bl	800085c <__aeabi_ddiv>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	49cc      	ldr	r1, [pc, #816]	; (8007820 <update_ScurveTraj+0x918>)
 80074ee:	e9c1 2300 	strd	r2, r3, [r1]
		Td=Tj2+(vmax-vf)/amax;
 80074f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80074f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80074fa:	f7f8 fecd 	bl	8000298 <__aeabi_dsub>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800750a:	f7f9 f9a7 	bl	800085c <__aeabi_ddiv>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	4bc2      	ldr	r3, [pc, #776]	; (8007820 <update_ScurveTraj+0x918>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f7f8 febe 	bl	800029c <__adddf3>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	49bf      	ldr	r1, [pc, #764]	; (8007824 <update_ScurveTraj+0x91c>)
 8007526:	e9c1 2300 	strd	r2, r3, [r1]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 800752a:	4bbf      	ldr	r3, [pc, #764]	; (8007828 <update_ScurveTraj+0x920>)
 800752c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007530:	4bbe      	ldr	r3, [pc, #760]	; (800782c <update_ScurveTraj+0x924>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f7f8 feaf 	bl	8000298 <__aeabi_dsub>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007546:	f7f9 f989 	bl	800085c <__aeabi_ddiv>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4614      	mov	r4, r2
 8007550:	461d      	mov	r5, r3
 8007552:	4bb7      	ldr	r3, [pc, #732]	; (8007830 <update_ScurveTraj+0x928>)
 8007554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007560:	f7f9 f97c 	bl	800085c <__aeabi_ddiv>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4690      	mov	r8, r2
 800756a:	4699      	mov	r9, r3
 800756c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007570:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007574:	f7f9 f972 	bl	800085c <__aeabi_ddiv>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4610      	mov	r0, r2
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	4bab      	ldr	r3, [pc, #684]	; (8007834 <update_ScurveTraj+0x92c>)
 8007586:	f7f8 fe89 	bl	800029c <__adddf3>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f9 f839 	bl	8000608 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4614      	mov	r4, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	4b9e      	ldr	r3, [pc, #632]	; (8007824 <update_ScurveTraj+0x91c>)
 80075ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075b8:	f7f9 f950 	bl	800085c <__aeabi_ddiv>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4690      	mov	r8, r2
 80075c2:	4699      	mov	r9, r3
 80075c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80075cc:	f7f9 f946 	bl	800085c <__aeabi_ddiv>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4610      	mov	r0, r2
 80075d6:	4619      	mov	r1, r3
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	4b95      	ldr	r3, [pc, #596]	; (8007834 <update_ScurveTraj+0x92c>)
 80075de:	f7f8 fe5d 	bl	800029c <__adddf3>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f9 f80d 	bl	8000608 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f8 fe4f 	bl	8000298 <__aeabi_dsub>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	498e      	ldr	r1, [pc, #568]	; (8007838 <update_ScurveTraj+0x930>)
 8007600:	e9c1 2300 	strd	r2, r3, [r1]

	if (Tv>0){
 8007604:	4b8c      	ldr	r3, [pc, #560]	; (8007838 <update_ScurveTraj+0x930>)
 8007606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	f04f 0300 	mov.w	r3, #0
 8007612:	f7f9 fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 84a1 	bne.w	8007f60 <update_ScurveTraj+0x1058>
		//printf("CASE 1\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800761e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007622:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007626:	f7f9 f919 	bl	800085c <__aeabi_ddiv>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4983      	ldr	r1, [pc, #524]	; (800783c <update_ScurveTraj+0x934>)
 8007630:	e9c1 2300 	strd	r2, r3, [r1]
		Tj2=Tj1;
 8007634:	4b81      	ldr	r3, [pc, #516]	; (800783c <update_ScurveTraj+0x934>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	4979      	ldr	r1, [pc, #484]	; (8007820 <update_ScurveTraj+0x918>)
 800763c:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 8007640:	4b7e      	ldr	r3, [pc, #504]	; (800783c <update_ScurveTraj+0x934>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	497e      	ldr	r1, [pc, #504]	; (8007840 <update_ScurveTraj+0x938>)
 8007648:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 800764c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8007810 <update_ScurveTraj+0x908>
 8007650:	ed97 0b08 	vldr	d0, [r7, #32]
 8007654:	f007 fcd8 	bl	800f008 <pow>
 8007658:	ec55 4b10 	vmov	r4, r5, d0
 800765c:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8007818 <update_ScurveTraj+0x910>
 8007660:	ed97 0b06 	vldr	d0, [r7, #24]
 8007664:	f007 fcd0 	bl	800f008 <pow>
 8007668:	ec53 2b10 	vmov	r2, r3, d0
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f9 f8f4 	bl	800085c <__aeabi_ddiv>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4614      	mov	r4, r2
 800767a:	461d      	mov	r5, r3
 800767c:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8007818 <update_ScurveTraj+0x910>
 8007680:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8007684:	f007 fcc0 	bl	800f008 <pow>
 8007688:	ec59 8b10 	vmov	r8, r9, d0
 800768c:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8007818 <update_ScurveTraj+0x910>
 8007690:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8007694:	f007 fcb8 	bl	800f008 <pow>
 8007698:	ec53 2b10 	vmov	r2, r3, d0
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f8 fdfc 	bl	800029c <__adddf3>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	f7f8 fdf4 	bl	800029c <__adddf3>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4620      	mov	r0, r4
 80076ba:	4629      	mov	r1, r5
 80076bc:	f7f8 fdee 	bl	800029c <__adddf3>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	461d      	mov	r5, r3
 80076c8:	4b57      	ldr	r3, [pc, #348]	; (8007828 <update_ScurveTraj+0x920>)
 80076ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076ce:	4b57      	ldr	r3, [pc, #348]	; (800782c <update_ScurveTraj+0x924>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fde0 	bl	8000298 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4610      	mov	r0, r2
 80076de:	4619      	mov	r1, r3
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	4b57      	ldr	r3, [pc, #348]	; (8007844 <update_ScurveTraj+0x93c>)
 80076e6:	f7f8 ff8f 	bl	8000608 <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4690      	mov	r8, r2
 80076f0:	4699      	mov	r9, r3
 80076f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076fa:	f7f9 f8af 	bl	800085c <__aeabi_ddiv>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	f7f8 fdc7 	bl	800029c <__adddf3>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4692      	mov	sl, r2
 8007714:	469b      	mov	fp, r3
 8007716:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800771a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800771e:	f7f8 fdbd 	bl	800029c <__adddf3>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 ff6d 	bl	8000608 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fdaf 	bl	8000298 <__aeabi_dsub>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007746:	f7f8 ff5f 	bl	8000608 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fda3 	bl	800029c <__adddf3>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	493b      	ldr	r1, [pc, #236]	; (8007848 <update_ScurveTraj+0x940>)
 800775c:	e9c1 2300 	strd	r2, r3, [r1]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8007760:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8007818 <update_ScurveTraj+0x910>
 8007764:	ed97 0b08 	vldr	d0, [r7, #32]
 8007768:	f007 fc4e 	bl	800f008 <pow>
 800776c:	ec51 0b10 	vmov	r0, r1, d0
 8007770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007774:	f7f9 f872 	bl	800085c <__aeabi_ddiv>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4614      	mov	r4, r2
 800777e:	461d      	mov	r5, r3
 8007780:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	f7f8 fd88 	bl	800029c <__adddf3>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4620      	mov	r0, r4
 8007792:	4629      	mov	r1, r5
 8007794:	f7f8 fd80 	bl	8000298 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4614      	mov	r4, r2
 800779e:	461d      	mov	r5, r3
 80077a0:	4b29      	ldr	r3, [pc, #164]	; (8007848 <update_ScurveTraj+0x940>)
 80077a2:	ed93 7b00 	vldr	d7, [r3]
 80077a6:	eeb0 0a47 	vmov.f32	s0, s14
 80077aa:	eef0 0a67 	vmov.f32	s1, s15
 80077ae:	f007 fc9b 	bl	800f0e8 <sqrt>
 80077b2:	ec53 2b10 	vmov	r2, r3, d0
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7f8 fd6f 	bl	800029c <__adddf3>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4614      	mov	r4, r2
 80077c4:	461d      	mov	r5, r3
 80077c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	f7f8 fd65 	bl	800029c <__adddf3>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f9 f83f 	bl	800085c <__aeabi_ddiv>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4913      	ldr	r1, [pc, #76]	; (8007830 <update_ScurveTraj+0x928>)
 80077e4:	e9c1 2300 	strd	r2, r3, [r1]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80077e8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8007818 <update_ScurveTraj+0x910>
 80077ec:	ed97 0b08 	vldr	d0, [r7, #32]
 80077f0:	f007 fc0a 	bl	800f008 <pow>
 80077f4:	ec51 0b10 	vmov	r0, r1, d0
 80077f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077fc:	f7f9 f82e 	bl	800085c <__aeabi_ddiv>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	e020      	b.n	800784c <update_ScurveTraj+0x944>
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w
 8007810:	00000000 	.word	0x00000000
 8007814:	40100000 	.word	0x40100000
 8007818:	00000000 	.word	0x00000000
 800781c:	40000000 	.word	0x40000000
 8007820:	20000870 	.word	0x20000870
 8007824:	20000858 	.word	0x20000858
 8007828:	20000890 	.word	0x20000890
 800782c:	20000888 	.word	0x20000888
 8007830:	20000850 	.word	0x20000850
 8007834:	3ff00000 	.word	0x3ff00000
 8007838:	20000860 	.word	0x20000860
 800783c:	20000868 	.word	0x20000868
 8007840:	20000878 	.word	0x20000878
 8007844:	40100000 	.word	0x40100000
 8007848:	20000880 	.word	0x20000880
 800784c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	f7f8 fd22 	bl	800029c <__adddf3>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f8 fd1a 	bl	8000298 <__aeabi_dsub>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4614      	mov	r4, r2
 800786a:	461d      	mov	r5, r3
 800786c:	4b29      	ldr	r3, [pc, #164]	; (8007914 <update_ScurveTraj+0xa0c>)
 800786e:	ed93 7b00 	vldr	d7, [r3]
 8007872:	eeb0 0a47 	vmov.f32	s0, s14
 8007876:	eef0 0a67 	vmov.f32	s1, s15
 800787a:	f007 fc35 	bl	800f0e8 <sqrt>
 800787e:	ec53 2b10 	vmov	r2, r3, d0
 8007882:	4620      	mov	r0, r4
 8007884:	4629      	mov	r1, r5
 8007886:	f7f8 fd09 	bl	800029c <__adddf3>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4614      	mov	r4, r2
 8007890:	461d      	mov	r5, r3
 8007892:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	f7f8 fcff 	bl	800029c <__adddf3>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4620      	mov	r0, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7f8 ffd9 	bl	800085c <__aeabi_ddiv>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	491a      	ldr	r1, [pc, #104]	; (8007918 <update_ScurveTraj+0xa10>)
 80078b0:	e9c1 2300 	strd	r2, r3, [r1]
		Tv=0;
 80078b4:	4919      	ldr	r1, [pc, #100]	; (800791c <update_ScurveTraj+0xa14>)
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	f04f 0300 	mov.w	r3, #0
 80078be:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <update_ScurveTraj+0xa18>)
 80078c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	f7f8 fce6 	bl	800029c <__adddf3>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4610      	mov	r0, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	4b12      	ldr	r3, [pc, #72]	; (8007924 <update_ScurveTraj+0xa1c>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f9 f923 	bl	8000b28 <__aeabi_dcmpgt>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 8301 	bne.w	8007eec <update_ScurveTraj+0xfe4>
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <update_ScurveTraj+0xa18>)
 80078ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	f7f8 fcd2 	bl	800029c <__adddf3>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <update_ScurveTraj+0xa10>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f9 f90f 	bl	8000b28 <__aeabi_dcmpgt>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8327 	beq.w	8007f60 <update_ScurveTraj+0x1058>
			while (!(Ta>2*Tj && Td>2*Tj)){
 8007912:	e2eb      	b.n	8007eec <update_ScurveTraj+0xfe4>
 8007914:	20000880 	.word	0x20000880
 8007918:	20000858 	.word	0x20000858
 800791c:	20000860 	.word	0x20000860
 8007920:	20000878 	.word	0x20000878
 8007924:	20000850 	.word	0x20000850

				amax=amax*0.99;
 8007928:	a3e3      	add	r3, pc, #908	; (adr r3, 8007cb8 <update_ScurveTraj+0xdb0>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Tj=amax/jmax;
 800793e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007942:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007946:	f7f8 ff89 	bl	800085c <__aeabi_ddiv>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	49d2      	ldr	r1, [pc, #840]	; (8007c98 <update_ScurveTraj+0xd90>)
 8007950:	e9c1 2300 	strd	r2, r3, [r1]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8007954:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 8007c88 <update_ScurveTraj+0xd80>
 8007958:	ed97 0b08 	vldr	d0, [r7, #32]
 800795c:	f007 fb54 	bl	800f008 <pow>
 8007960:	ec55 4b10 	vmov	r4, r5, d0
 8007964:	ed9f 1bca 	vldr	d1, [pc, #808]	; 8007c90 <update_ScurveTraj+0xd88>
 8007968:	ed97 0b06 	vldr	d0, [r7, #24]
 800796c:	f007 fb4c 	bl	800f008 <pow>
 8007970:	ec53 2b10 	vmov	r2, r3, d0
 8007974:	4620      	mov	r0, r4
 8007976:	4629      	mov	r1, r5
 8007978:	f7f8 ff70 	bl	800085c <__aeabi_ddiv>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4614      	mov	r4, r2
 8007982:	461d      	mov	r5, r3
 8007984:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8007c90 <update_ScurveTraj+0xd88>
 8007988:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800798c:	f007 fb3c 	bl	800f008 <pow>
 8007990:	ec59 8b10 	vmov	r8, r9, d0
 8007994:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 8007c90 <update_ScurveTraj+0xd88>
 8007998:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800799c:	f007 fb34 	bl	800f008 <pow>
 80079a0:	ec53 2b10 	vmov	r2, r3, d0
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f8 fc78 	bl	800029c <__adddf3>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4610      	mov	r0, r2
 80079b2:	4619      	mov	r1, r3
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	f7f8 fc70 	bl	800029c <__adddf3>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f8 fc6a 	bl	800029c <__adddf3>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4614      	mov	r4, r2
 80079ce:	461d      	mov	r5, r3
 80079d0:	4bb2      	ldr	r3, [pc, #712]	; (8007c9c <update_ScurveTraj+0xd94>)
 80079d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079d6:	4bb2      	ldr	r3, [pc, #712]	; (8007ca0 <update_ScurveTraj+0xd98>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc5c 	bl	8000298 <__aeabi_dsub>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4610      	mov	r0, r2
 80079e6:	4619      	mov	r1, r3
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	4bad      	ldr	r3, [pc, #692]	; (8007ca4 <update_ScurveTraj+0xd9c>)
 80079ee:	f7f8 fe0b 	bl	8000608 <__aeabi_dmul>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4690      	mov	r8, r2
 80079f8:	4699      	mov	r9, r3
 80079fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a02:	f7f8 ff2b 	bl	800085c <__aeabi_ddiv>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	f7f8 fc43 	bl	800029c <__adddf3>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4692      	mov	sl, r2
 8007a1c:	469b      	mov	fp, r3
 8007a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a26:	f7f8 fc39 	bl	800029c <__adddf3>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4650      	mov	r0, sl
 8007a30:	4659      	mov	r1, fp
 8007a32:	f7f8 fde9 	bl	8000608 <__aeabi_dmul>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fc2b 	bl	8000298 <__aeabi_dsub>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a4e:	f7f8 fddb 	bl	8000608 <__aeabi_dmul>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7f8 fc1f 	bl	800029c <__adddf3>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4991      	ldr	r1, [pc, #580]	; (8007ca8 <update_ScurveTraj+0xda0>)
 8007a64:	e9c1 2300 	strd	r2, r3, [r1]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8007a68:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8007c90 <update_ScurveTraj+0xd88>
 8007a6c:	ed97 0b08 	vldr	d0, [r7, #32]
 8007a70:	f007 faca 	bl	800f008 <pow>
 8007a74:	ec51 0b10 	vmov	r0, r1, d0
 8007a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a7c:	f7f8 feee 	bl	800085c <__aeabi_ddiv>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	461d      	mov	r5, r3
 8007a88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	f7f8 fc04 	bl	800029c <__adddf3>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fbfc 	bl	8000298 <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	4b7f      	ldr	r3, [pc, #508]	; (8007ca8 <update_ScurveTraj+0xda0>)
 8007aaa:	ed93 7b00 	vldr	d7, [r3]
 8007aae:	eeb0 0a47 	vmov.f32	s0, s14
 8007ab2:	eef0 0a67 	vmov.f32	s1, s15
 8007ab6:	f007 fb17 	bl	800f0e8 <sqrt>
 8007aba:	ec53 2b10 	vmov	r2, r3, d0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7f8 fbeb 	bl	800029c <__adddf3>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4614      	mov	r4, r2
 8007acc:	461d      	mov	r5, r3
 8007ace:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	f7f8 fbe1 	bl	800029c <__adddf3>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 febb 	bl	800085c <__aeabi_ddiv>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4970      	ldr	r1, [pc, #448]	; (8007cac <update_ScurveTraj+0xda4>)
 8007aec:	e9c1 2300 	strd	r2, r3, [r1]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8007af0:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8007c90 <update_ScurveTraj+0xd88>
 8007af4:	ed97 0b08 	vldr	d0, [r7, #32]
 8007af8:	f007 fa86 	bl	800f008 <pow>
 8007afc:	ec51 0b10 	vmov	r0, r1, d0
 8007b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b04:	f7f8 feaa 	bl	800085c <__aeabi_ddiv>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	f7f8 fbc0 	bl	800029c <__adddf3>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fbb8 	bl	8000298 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	461d      	mov	r5, r3
 8007b30:	4b5d      	ldr	r3, [pc, #372]	; (8007ca8 <update_ScurveTraj+0xda0>)
 8007b32:	ed93 7b00 	vldr	d7, [r3]
 8007b36:	eeb0 0a47 	vmov.f32	s0, s14
 8007b3a:	eef0 0a67 	vmov.f32	s1, s15
 8007b3e:	f007 fad3 	bl	800f0e8 <sqrt>
 8007b42:	ec53 2b10 	vmov	r2, r3, d0
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fba7 	bl	800029c <__adddf3>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4614      	mov	r4, r2
 8007b54:	461d      	mov	r5, r3
 8007b56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	f7f8 fb9d 	bl	800029c <__adddf3>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4620      	mov	r0, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7f8 fe77 	bl	800085c <__aeabi_ddiv>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	494f      	ldr	r1, [pc, #316]	; (8007cb0 <update_ScurveTraj+0xda8>)
 8007b74:	e9c1 2300 	strd	r2, r3, [r1]

				if (Ta<0){
 8007b78:	4b4c      	ldr	r3, [pc, #304]	; (8007cac <update_ScurveTraj+0xda4>)
 8007b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	f7f8 ffb1 	bl	8000aec <__aeabi_dcmplt>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80df 	beq.w	8007d50 <update_ScurveTraj+0xe48>
					Ta=0;
 8007b92:	4946      	ldr	r1, [pc, #280]	; (8007cac <update_ScurveTraj+0xda4>)
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8007ba0:	4944      	ldr	r1, [pc, #272]	; (8007cb4 <update_ScurveTraj+0xdac>)
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8007bae:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <update_ScurveTraj+0xd94>)
 8007bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bb4:	4b3a      	ldr	r3, [pc, #232]	; (8007ca0 <update_ScurveTraj+0xd98>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f7f8 fb6d 	bl	8000298 <__aeabi_dsub>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	461d      	mov	r5, r3
 8007bc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007bce:	f7f8 fb65 	bl	800029c <__adddf3>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fe3f 	bl	800085c <__aeabi_ddiv>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4610      	mov	r0, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	f7f8 fb57 	bl	800029c <__adddf3>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	492f      	ldr	r1, [pc, #188]	; (8007cb0 <update_ScurveTraj+0xda8>)
 8007bf4:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007bf8:	4b28      	ldr	r3, [pc, #160]	; (8007c9c <update_ScurveTraj+0xd94>)
 8007bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bfe:	4b28      	ldr	r3, [pc, #160]	; (8007ca0 <update_ScurveTraj+0xd98>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fb48 	bl	8000298 <__aeabi_dsub>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c14:	f7f8 fcf8 	bl	8000608 <__aeabi_dmul>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	461d      	mov	r5, r3
 8007c20:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <update_ScurveTraj+0xd94>)
 8007c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c26:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <update_ScurveTraj+0xd98>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f7f8 fb34 	bl	8000298 <__aeabi_dsub>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	ec43 2b17 	vmov	d7, r2, r3
 8007c38:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8007c90 <update_ScurveTraj+0xd88>
 8007c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8007c40:	eef0 0a67 	vmov.f32	s1, s15
 8007c44:	f007 f9e0 	bl	800f008 <pow>
 8007c48:	ec51 0b10 	vmov	r0, r1, d0
 8007c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c50:	f7f8 fcda 	bl	8000608 <__aeabi_dmul>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4690      	mov	r8, r2
 8007c5a:	4699      	mov	r9, r3
 8007c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007c64:	f7f8 fb1a 	bl	800029c <__adddf3>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	ec43 2b17 	vmov	d7, r2, r3
 8007c70:	ed9f 1b07 	vldr	d1, [pc, #28]	; 8007c90 <update_ScurveTraj+0xd88>
 8007c74:	eeb0 0a47 	vmov.f32	s0, s14
 8007c78:	eef0 0a67 	vmov.f32	s1, s15
 8007c7c:	f007 f9c4 	bl	800f008 <pow>
 8007c80:	ec5b ab10 	vmov	sl, fp, d0
 8007c84:	e01c      	b.n	8007cc0 <update_ScurveTraj+0xdb8>
 8007c86:	bf00      	nop
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	40100000 	.word	0x40100000
 8007c90:	00000000 	.word	0x00000000
 8007c94:	40000000 	.word	0x40000000
 8007c98:	20000878 	.word	0x20000878
 8007c9c:	20000890 	.word	0x20000890
 8007ca0:	20000888 	.word	0x20000888
 8007ca4:	40100000 	.word	0x40100000
 8007ca8:	20000880 	.word	0x20000880
 8007cac:	20000850 	.word	0x20000850
 8007cb0:	20000858 	.word	0x20000858
 8007cb4:	20000868 	.word	0x20000868
 8007cb8:	7ae147ae 	.word	0x7ae147ae
 8007cbc:	3fefae14 	.word	0x3fefae14
 8007cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007cc8:	f7f8 fae6 	bl	8000298 <__aeabi_dsub>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	f7f8 fc98 	bl	8000608 <__aeabi_dmul>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f8 fadc 	bl	800029c <__adddf3>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4619      	mov	r1, r3
 8007cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cf0:	f7f8 fc8a 	bl	8000608 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	ec43 2b17 	vmov	d7, r2, r3
 8007cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8007d00:	eef0 0a67 	vmov.f32	s1, s15
 8007d04:	f007 f9f0 	bl	800f0e8 <sqrt>
 8007d08:	ec53 2b10 	vmov	r2, r3, d0
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f8 fac2 	bl	8000298 <__aeabi_dsub>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	461d      	mov	r5, r3
 8007d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d20:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d24:	f7f8 faba 	bl	800029c <__adddf3>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4619      	mov	r1, r3
 8007d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d34:	f7f8 fc68 	bl	8000608 <__aeabi_dmul>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fd8c 	bl	800085c <__aeabi_ddiv>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	49b1      	ldr	r1, [pc, #708]	; (8008010 <update_ScurveTraj+0x1108>)
 8007d4a:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007d4e:	e107      	b.n	8007f60 <update_ScurveTraj+0x1058>
				}
				if (Td<0){
 8007d50:	4bb0      	ldr	r3, [pc, #704]	; (8008014 <update_ScurveTraj+0x110c>)
 8007d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	f7f8 fec5 	bl	8000aec <__aeabi_dcmplt>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d100      	bne.n	8007d6a <update_ScurveTraj+0xe62>
 8007d68:	e0c0      	b.n	8007eec <update_ScurveTraj+0xfe4>
					Td=0;
 8007d6a:	49aa      	ldr	r1, [pc, #680]	; (8008014 <update_ScurveTraj+0x110c>)
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8007d78:	4ba7      	ldr	r3, [pc, #668]	; (8008018 <update_ScurveTraj+0x1110>)
 8007d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d7e:	4ba7      	ldr	r3, [pc, #668]	; (800801c <update_ScurveTraj+0x1114>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fa88 	bl	8000298 <__aeabi_dsub>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	461d      	mov	r5, r3
 8007d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007d98:	f7f8 fa80 	bl	800029c <__adddf3>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4620      	mov	r0, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7f8 fd5a 	bl	800085c <__aeabi_ddiv>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4610      	mov	r0, r2
 8007dae:	4619      	mov	r1, r3
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	f7f8 fa72 	bl	800029c <__adddf3>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4998      	ldr	r1, [pc, #608]	; (8008020 <update_ScurveTraj+0x1118>)
 8007dbe:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8007dc2:	4b95      	ldr	r3, [pc, #596]	; (8008018 <update_ScurveTraj+0x1110>)
 8007dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dc8:	4b94      	ldr	r3, [pc, #592]	; (800801c <update_ScurveTraj+0x1114>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa63 	bl	8000298 <__aeabi_dsub>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4614      	mov	r4, r2
 8007de8:	461d      	mov	r5, r3
 8007dea:	4b8b      	ldr	r3, [pc, #556]	; (8008018 <update_ScurveTraj+0x1110>)
 8007dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007df0:	4b8a      	ldr	r3, [pc, #552]	; (800801c <update_ScurveTraj+0x1114>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fa4f 	bl	8000298 <__aeabi_dsub>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	ec43 2b17 	vmov	d7, r2, r3
 8007e02:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8008008 <update_ScurveTraj+0x1100>
 8007e06:	eeb0 0a47 	vmov.f32	s0, s14
 8007e0a:	eef0 0a67 	vmov.f32	s1, s15
 8007e0e:	f007 f8fb 	bl	800f008 <pow>
 8007e12:	ec51 0b10 	vmov	r0, r1, d0
 8007e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e1a:	f7f8 fbf5 	bl	8000608 <__aeabi_dmul>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4690      	mov	r8, r2
 8007e24:	4699      	mov	r9, r3
 8007e26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e2e:	f7f8 fa35 	bl	800029c <__adddf3>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	ec43 2b17 	vmov	d7, r2, r3
 8007e3a:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8008008 <update_ScurveTraj+0x1100>
 8007e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8007e42:	eef0 0a67 	vmov.f32	s1, s15
 8007e46:	f007 f8df 	bl	800f008 <pow>
 8007e4a:	ec5b ab10 	vmov	sl, fp, d0
 8007e4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007e56:	f7f8 fa1f 	bl	8000298 <__aeabi_dsub>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fbd1 	bl	8000608 <__aeabi_dmul>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	f7f8 fa13 	bl	8000298 <__aeabi_dsub>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4610      	mov	r0, r2
 8007e78:	4619      	mov	r1, r3
 8007e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	ec43 2b17 	vmov	d7, r2, r3
 8007e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8007e8e:	eef0 0a67 	vmov.f32	s1, s15
 8007e92:	f007 f929 	bl	800f0e8 <sqrt>
 8007e96:	ec53 2b10 	vmov	r2, r3, d0
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 f9fb 	bl	8000298 <__aeabi_dsub>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	461d      	mov	r5, r3
 8007eaa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007eae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007eb2:	f7f8 f9f3 	bl	800029c <__adddf3>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ec2:	f7f8 fba1 	bl	8000608 <__aeabi_dmul>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 fcc5 	bl	800085c <__aeabi_ddiv>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4953      	ldr	r1, [pc, #332]	; (8008024 <update_ScurveTraj+0x111c>)
 8007ed8:	e9c1 2300 	strd	r2, r3, [r1]
					Tj2=0;
 8007edc:	494c      	ldr	r1, [pc, #304]	; (8008010 <update_ScurveTraj+0x1108>)
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8007eea:	e039      	b.n	8007f60 <update_ScurveTraj+0x1058>
			while (!(Ta>2*Tj && Td>2*Tj)){
 8007eec:	4b4e      	ldr	r3, [pc, #312]	; (8008028 <update_ScurveTraj+0x1120>)
 8007eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	f7f8 f9d1 	bl	800029c <__adddf3>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4610      	mov	r0, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	4b47      	ldr	r3, [pc, #284]	; (8008020 <update_ScurveTraj+0x1118>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	2401      	movs	r4, #1
 8007f0a:	f7f8 fdef 	bl	8000aec <__aeabi_dcmplt>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <update_ScurveTraj+0x1010>
 8007f14:	2300      	movs	r3, #0
 8007f16:	461c      	mov	r4, r3
 8007f18:	b2e3      	uxtb	r3, r4
 8007f1a:	f083 0301 	eor.w	r3, r3, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f ad01 	bne.w	8007928 <update_ScurveTraj+0xa20>
 8007f26:	4b40      	ldr	r3, [pc, #256]	; (8008028 <update_ScurveTraj+0x1120>)
 8007f28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	f7f8 f9b4 	bl	800029c <__adddf3>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4b35      	ldr	r3, [pc, #212]	; (8008014 <update_ScurveTraj+0x110c>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	2401      	movs	r4, #1
 8007f44:	f7f8 fdd2 	bl	8000aec <__aeabi_dcmplt>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <update_ScurveTraj+0x104a>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	461c      	mov	r4, r3
 8007f52:	b2e3      	uxtb	r3, r4
 8007f54:	f083 0301 	eor.w	r3, r3, #1
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f47f ace4 	bne.w	8007928 <update_ScurveTraj+0xa20>
				}
			}
		}
	}

	T=Ta+Td+Tv;
 8007f60:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <update_ScurveTraj+0x1118>)
 8007f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f66:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <update_ScurveTraj+0x110c>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f7f8 f996 	bl	800029c <__adddf3>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4610      	mov	r0, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	4b2c      	ldr	r3, [pc, #176]	; (800802c <update_ScurveTraj+0x1124>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f98d 	bl	800029c <__adddf3>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	492a      	ldr	r1, [pc, #168]	; (8008030 <update_ScurveTraj+0x1128>)
 8007f88:	e9c1 2300 	strd	r2, r3, [r1]

	*(params)=Tj1;
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <update_ScurveTraj+0x111c>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f103 0108 	add.w	r1, r3, #8
 8007f9e:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <update_ScurveTraj+0x1108>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f103 0110 	add.w	r1, r3, #16
 8007fae:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <update_ScurveTraj+0x1120>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f103 0118 	add.w	r1, r3, #24
 8007fbe:	4b18      	ldr	r3, [pc, #96]	; (8008020 <update_ScurveTraj+0x1118>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f103 0120 	add.w	r1, r3, #32
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <update_ScurveTraj+0x110c>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <update_ScurveTraj+0x1124>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fee:	4b10      	ldr	r3, [pc, #64]	; (8008030 <update_ScurveTraj+0x1128>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	e9c1 2300 	strd	r2, r3, [r1]

}
 8007ff8:	bf00      	nop
 8007ffa:	3758      	adds	r7, #88	; 0x58
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008002:	bf00      	nop
 8008004:	f3af 8000 	nop.w
 8008008:	00000000 	.word	0x00000000
 800800c:	40000000 	.word	0x40000000
 8008010:	20000870 	.word	0x20000870
 8008014:	20000858 	.word	0x20000858
 8008018:	20000890 	.word	0x20000890
 800801c:	20000888 	.word	0x20000888
 8008020:	20000850 	.word	0x20000850
 8008024:	20000868 	.word	0x20000868
 8008028:	20000878 	.word	0x20000878
 800802c:	20000860 	.word	0x20000860
 8008030:	20000848 	.word	0x20000848
 8008034:	00000000 	.word	0x00000000

08008038 <setProfilTimer>:


void setProfilTimer(void){
 8008038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8008040:	4bc1      	ldr	r3, [pc, #772]	; (8008348 <setProfilTimer+0x310>)
 8008042:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008046:	a3bc      	add	r3, pc, #752	; (adr r3, 8008338 <setProfilTimer+0x300>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 fadc 	bl	8000608 <__aeabi_dmul>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	49bc      	ldr	r1, [pc, #752]	; (8008348 <setProfilTimer+0x310>)
 8008056:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 800805a:	4bbc      	ldr	r3, [pc, #752]	; (800834c <setProfilTimer+0x314>)
 800805c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008060:	a3b5      	add	r3, pc, #724	; (adr r3, 8008338 <setProfilTimer+0x300>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 facf 	bl	8000608 <__aeabi_dmul>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	49b7      	ldr	r1, [pc, #732]	; (800834c <setProfilTimer+0x314>)
 8008070:	e9c1 2304 	strd	r2, r3, [r1, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8008074:	4bb6      	ldr	r3, [pc, #728]	; (8008350 <setProfilTimer+0x318>)
 8008076:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800807a:	a3af      	add	r3, pc, #700	; (adr r3, 8008338 <setProfilTimer+0x300>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 fac2 	bl	8000608 <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	49b1      	ldr	r1, [pc, #708]	; (8008350 <setProfilTimer+0x318>)
 800808a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    period[0] = COUNTERPERIOD(fabs(motor1.rpm));
 800808e:	4bb1      	ldr	r3, [pc, #708]	; (8008354 <setProfilTimer+0x31c>)
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 fa3e 	bl	8000514 <__aeabi_ui2d>
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	4bae      	ldr	r3, [pc, #696]	; (8008358 <setProfilTimer+0x320>)
 800809e:	f7f8 f8fd 	bl	800029c <__adddf3>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	a1a6      	add	r1, pc, #664	; (adr r1, 8008340 <setProfilTimer+0x308>)
 80080a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ac:	f7f8 fbd6 	bl	800085c <__aeabi_ddiv>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	e9c7 2300 	strd	r2, r3, [r7]
 80080b8:	4ba3      	ldr	r3, [pc, #652]	; (8008348 <setProfilTimer+0x310>)
 80080ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80080be:	4692      	mov	sl, r2
 80080c0:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	4ba4      	ldr	r3, [pc, #656]	; (800835c <setProfilTimer+0x324>)
 80080ca:	4650      	mov	r0, sl
 80080cc:	4659      	mov	r1, fp
 80080ce:	f7f8 fa9b 	bl	8000608 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	f04f 0000 	mov.w	r0, #0
 80080da:	49a1      	ldr	r1, [pc, #644]	; (8008360 <setProfilTimer+0x328>)
 80080dc:	f7f8 fbbe 	bl	800085c <__aeabi_ddiv>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e8:	f7f8 fa8e 	bl	8000608 <__aeabi_dmul>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	4b97      	ldr	r3, [pc, #604]	; (8008358 <setProfilTimer+0x320>)
 80080fa:	f7f8 f8cd 	bl	8000298 <__aeabi_dsub>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4610      	mov	r0, r2
 8008104:	4619      	mov	r1, r3
 8008106:	f7f8 fd2f 	bl	8000b68 <__aeabi_d2uiz>
 800810a:	4603      	mov	r3, r0
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 fa01 	bl	8000514 <__aeabi_ui2d>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4993      	ldr	r1, [pc, #588]	; (8008364 <setProfilTimer+0x32c>)
 8008118:	e9c1 2300 	strd	r2, r3, [r1]
    period[1] = COUNTERPERIOD(fabs(motor2.rpm));
 800811c:	4b8d      	ldr	r3, [pc, #564]	; (8008354 <setProfilTimer+0x31c>)
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	4618      	mov	r0, r3
 8008122:	f7f8 f9f7 	bl	8000514 <__aeabi_ui2d>
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	4b8b      	ldr	r3, [pc, #556]	; (8008358 <setProfilTimer+0x320>)
 800812c:	f7f8 f8b6 	bl	800029c <__adddf3>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	a182      	add	r1, pc, #520	; (adr r1, 8008340 <setProfilTimer+0x308>)
 8008136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813a:	f7f8 fb8f 	bl	800085c <__aeabi_ddiv>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4692      	mov	sl, r2
 8008144:	469b      	mov	fp, r3
 8008146:	4b81      	ldr	r3, [pc, #516]	; (800834c <setProfilTimer+0x314>)
 8008148:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800814c:	4690      	mov	r8, r2
 800814e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	4b81      	ldr	r3, [pc, #516]	; (800835c <setProfilTimer+0x324>)
 8008158:	4640      	mov	r0, r8
 800815a:	4649      	mov	r1, r9
 800815c:	f7f8 fa54 	bl	8000608 <__aeabi_dmul>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	f04f 0000 	mov.w	r0, #0
 8008168:	497d      	ldr	r1, [pc, #500]	; (8008360 <setProfilTimer+0x328>)
 800816a:	f7f8 fb77 	bl	800085c <__aeabi_ddiv>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4650      	mov	r0, sl
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4610      	mov	r0, r2
 8008180:	4619      	mov	r1, r3
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	4b74      	ldr	r3, [pc, #464]	; (8008358 <setProfilTimer+0x320>)
 8008188:	f7f8 f886 	bl	8000298 <__aeabi_dsub>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4610      	mov	r0, r2
 8008192:	4619      	mov	r1, r3
 8008194:	f7f8 fce8 	bl	8000b68 <__aeabi_d2uiz>
 8008198:	4603      	mov	r3, r0
 800819a:	4618      	mov	r0, r3
 800819c:	f7f8 f9ba 	bl	8000514 <__aeabi_ui2d>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	496f      	ldr	r1, [pc, #444]	; (8008364 <setProfilTimer+0x32c>)
 80081a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    period[2] = COUNTERPERIOD(fabs(motor3.rpm));
 80081aa:	4b6a      	ldr	r3, [pc, #424]	; (8008354 <setProfilTimer+0x31c>)
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f8 f9b0 	bl	8000514 <__aeabi_ui2d>
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	4b67      	ldr	r3, [pc, #412]	; (8008358 <setProfilTimer+0x320>)
 80081ba:	f7f8 f86f 	bl	800029c <__adddf3>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	a15f      	add	r1, pc, #380	; (adr r1, 8008340 <setProfilTimer+0x308>)
 80081c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c8:	f7f8 fb48 	bl	800085c <__aeabi_ddiv>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4690      	mov	r8, r2
 80081d2:	4699      	mov	r9, r3
 80081d4:	4b5e      	ldr	r3, [pc, #376]	; (8008350 <setProfilTimer+0x318>)
 80081d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081da:	4614      	mov	r4, r2
 80081dc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	4b5d      	ldr	r3, [pc, #372]	; (800835c <setProfilTimer+0x324>)
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 fa0d 	bl	8000608 <__aeabi_dmul>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	495a      	ldr	r1, [pc, #360]	; (8008360 <setProfilTimer+0x328>)
 80081f8:	f7f8 fb30 	bl	800085c <__aeabi_ddiv>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fa00 	bl	8000608 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4610      	mov	r0, r2
 800820e:	4619      	mov	r1, r3
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	4b50      	ldr	r3, [pc, #320]	; (8008358 <setProfilTimer+0x320>)
 8008216:	f7f8 f83f 	bl	8000298 <__aeabi_dsub>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4610      	mov	r0, r2
 8008220:	4619      	mov	r1, r3
 8008222:	f7f8 fca1 	bl	8000b68 <__aeabi_d2uiz>
 8008226:	4603      	mov	r3, r0
 8008228:	4618      	mov	r0, r3
 800822a:	f7f8 f973 	bl	8000514 <__aeabi_ui2d>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	494c      	ldr	r1, [pc, #304]	; (8008364 <setProfilTimer+0x32c>)
 8008234:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	*/

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim1,period[0]);
 8008238:	4b4a      	ldr	r3, [pc, #296]	; (8008364 <setProfilTimer+0x32c>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	494a      	ldr	r1, [pc, #296]	; (8008368 <setProfilTimer+0x330>)
 8008240:	680c      	ldr	r4, [r1, #0]
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	f7f8 fc8f 	bl	8000b68 <__aeabi_d2uiz>
 800824a:	4603      	mov	r3, r0
 800824c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800824e:	4b45      	ldr	r3, [pc, #276]	; (8008364 <setProfilTimer+0x32c>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	f7f8 fc86 	bl	8000b68 <__aeabi_d2uiz>
 800825c:	4603      	mov	r3, r0
 800825e:	4a42      	ldr	r2, [pc, #264]	; (8008368 <setProfilTimer+0x330>)
 8008260:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3,period[1]);
 8008262:	4b40      	ldr	r3, [pc, #256]	; (8008364 <setProfilTimer+0x32c>)
 8008264:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008268:	4940      	ldr	r1, [pc, #256]	; (800836c <setProfilTimer+0x334>)
 800826a:	680c      	ldr	r4, [r1, #0]
 800826c:	4610      	mov	r0, r2
 800826e:	4619      	mov	r1, r3
 8008270:	f7f8 fc7a 	bl	8000b68 <__aeabi_d2uiz>
 8008274:	4603      	mov	r3, r0
 8008276:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008278:	4b3a      	ldr	r3, [pc, #232]	; (8008364 <setProfilTimer+0x32c>)
 800827a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	f7f8 fc71 	bl	8000b68 <__aeabi_d2uiz>
 8008286:	4603      	mov	r3, r0
 8008288:	4a38      	ldr	r2, [pc, #224]	; (800836c <setProfilTimer+0x334>)
 800828a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim4,period[2]);
 800828c:	4b35      	ldr	r3, [pc, #212]	; (8008364 <setProfilTimer+0x32c>)
 800828e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008292:	4937      	ldr	r1, [pc, #220]	; (8008370 <setProfilTimer+0x338>)
 8008294:	680c      	ldr	r4, [r1, #0]
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7f8 fc65 	bl	8000b68 <__aeabi_d2uiz>
 800829e:	4603      	mov	r3, r0
 80082a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082a2:	4b30      	ldr	r3, [pc, #192]	; (8008364 <setProfilTimer+0x32c>)
 80082a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	f7f8 fc5c 	bl	8000b68 <__aeabi_d2uiz>
 80082b0:	4603      	mov	r3, r0
 80082b2:	4a2f      	ldr	r2, [pc, #188]	; (8008370 <setProfilTimer+0x338>)
 80082b4:	60d3      	str	r3, [r2, #12]

	TIM1->CCR1 = (uint32_t)((double)(TIM1->ARR) / 2.0);
 80082b6:	4b27      	ldr	r3, [pc, #156]	; (8008354 <setProfilTimer+0x31c>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7f8 f92a 	bl	8000514 <__aeabi_ui2d>
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082c8:	f7f8 fac8 	bl	800085c <__aeabi_ddiv>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4c20      	ldr	r4, [pc, #128]	; (8008354 <setProfilTimer+0x31c>)
 80082d2:	4610      	mov	r0, r2
 80082d4:	4619      	mov	r1, r3
 80082d6:	f7f8 fc47 	bl	8000b68 <__aeabi_d2uiz>
 80082da:	4603      	mov	r3, r0
 80082dc:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR1 = (uint32_t)((double)(TIM3->ARR) / 2.0);
 80082de:	4b25      	ldr	r3, [pc, #148]	; (8008374 <setProfilTimer+0x33c>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f8 f916 	bl	8000514 <__aeabi_ui2d>
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082f0:	f7f8 fab4 	bl	800085c <__aeabi_ddiv>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4c1e      	ldr	r4, [pc, #120]	; (8008374 <setProfilTimer+0x33c>)
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	f7f8 fc33 	bl	8000b68 <__aeabi_d2uiz>
 8008302:	4603      	mov	r3, r0
 8008304:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR1 = (uint32_t)((double)(TIM4->ARR) / 2.0);
 8008306:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <setProfilTimer+0x340>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	4618      	mov	r0, r3
 800830c:	f7f8 f902 	bl	8000514 <__aeabi_ui2d>
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008318:	f7f8 faa0 	bl	800085c <__aeabi_ddiv>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4c15      	ldr	r4, [pc, #84]	; (8008378 <setProfilTimer+0x340>)
 8008322:	4610      	mov	r0, r2
 8008324:	4619      	mov	r1, r3
 8008326:	f7f8 fc1f 	bl	8000b68 <__aeabi_d2uiz>
 800832a:	4603      	mov	r3, r0
 800832c:	6363      	str	r3, [r4, #52]	; 0x34


}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008338:	66ed2a99 	.word	0x66ed2a99
 800833c:	4023193d 	.word	0x4023193d
 8008340:	00000000 	.word	0x00000000
 8008344:	418e8480 	.word	0x418e8480
 8008348:	200005d8 	.word	0x200005d8
 800834c:	20000620 	.word	0x20000620
 8008350:	20000668 	.word	0x20000668
 8008354:	40010000 	.word	0x40010000
 8008358:	3ff00000 	.word	0x3ff00000
 800835c:	40bf4000 	.word	0x40bf4000
 8008360:	404e0000 	.word	0x404e0000
 8008364:	20000818 	.word	0x20000818
 8008368:	20000350 	.word	0x20000350
 800836c:	200003e0 	.word	0x200003e0
 8008370:	20000428 	.word	0x20000428
 8008374:	40000400 	.word	0x40000400
 8008378:	40000800 	.word	0x40000800

0800837c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800837c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008380:	480d      	ldr	r0, [pc, #52]	; (80083b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008382:	490e      	ldr	r1, [pc, #56]	; (80083bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008384:	4a0e      	ldr	r2, [pc, #56]	; (80083c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008388:	e002      	b.n	8008390 <LoopCopyDataInit>

0800838a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800838a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800838c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800838e:	3304      	adds	r3, #4

08008390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008394:	d3f9      	bcc.n	800838a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008396:	4a0b      	ldr	r2, [pc, #44]	; (80083c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008398:	4c0b      	ldr	r4, [pc, #44]	; (80083c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800839a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800839c:	e001      	b.n	80083a2 <LoopFillZerobss>

0800839e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800839e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083a0:	3204      	adds	r2, #4

080083a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083a4:	d3fb      	bcc.n	800839e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80083a6:	f7fd fc4d 	bl	8005c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083aa:	f003 ff0f 	bl	800c1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083ae:	f7fb f8bd 	bl	800352c <main>
  bx  lr    
 80083b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80083b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083bc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80083c0:	080107b0 	.word	0x080107b0
  ldr r2, =_sbss
 80083c4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80083c8:	200008ac 	.word	0x200008ac

080083cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083cc:	e7fe      	b.n	80083cc <ADC_IRQHandler>
	...

080083d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <HAL_Init+0x40>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a0d      	ldr	r2, [pc, #52]	; (8008410 <HAL_Init+0x40>)
 80083da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80083e0:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <HAL_Init+0x40>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <HAL_Init+0x40>)
 80083e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <HAL_Init+0x40>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a07      	ldr	r2, [pc, #28]	; (8008410 <HAL_Init+0x40>)
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083f8:	2003      	movs	r0, #3
 80083fa:	f000 f973 	bl	80086e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083fe:	2000      	movs	r0, #0
 8008400:	f000 f808 	bl	8008414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008404:	f7fd f83e 	bl	8005484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40023c00 	.word	0x40023c00

08008414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_InitTick+0x54>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b12      	ldr	r3, [pc, #72]	; (800846c <HAL_InitTick+0x58>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800842a:	fbb3 f3f1 	udiv	r3, r3, r1
 800842e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f999 	bl	800876a <HAL_SYSTICK_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e00e      	b.n	8008460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b0f      	cmp	r3, #15
 8008446:	d80a      	bhi.n	800845e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008448:	2200      	movs	r2, #0
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	f000 f953 	bl	80086fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008454:	4a06      	ldr	r2, [pc, #24]	; (8008470 <HAL_InitTick+0x5c>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000060 	.word	0x20000060
 800846c:	20000068 	.word	0x20000068
 8008470:	20000064 	.word	0x20000064

08008474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <HAL_IncTick+0x20>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <HAL_IncTick+0x24>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4413      	add	r3, r2
 8008484:	4a04      	ldr	r2, [pc, #16]	; (8008498 <HAL_IncTick+0x24>)
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20000068 	.word	0x20000068
 8008498:	20000898 	.word	0x20000898

0800849c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  return uwTick;
 80084a0:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <HAL_GetTick+0x14>)
 80084a2:	681b      	ldr	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000898 	.word	0x20000898

080084b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084bc:	f7ff ffee 	bl	800849c <HAL_GetTick>
 80084c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d005      	beq.n	80084da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084ce:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <HAL_Delay+0x44>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80084da:	bf00      	nop
 80084dc:	f7ff ffde 	bl	800849c <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d8f7      	bhi.n	80084dc <HAL_Delay+0x28>
  {
  }
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000068 	.word	0x20000068

080084fc <__NVIC_SetPriorityGrouping>:
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800850c:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <__NVIC_SetPriorityGrouping+0x44>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008518:	4013      	ands	r3, r2
 800851a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800852c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800852e:	4a04      	ldr	r2, [pc, #16]	; (8008540 <__NVIC_SetPriorityGrouping+0x44>)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	60d3      	str	r3, [r2, #12]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	e000ed00 	.word	0xe000ed00

08008544 <__NVIC_GetPriorityGrouping>:
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__NVIC_GetPriorityGrouping+0x18>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	0a1b      	lsrs	r3, r3, #8
 800854e:	f003 0307 	and.w	r3, r3, #7
}
 8008552:	4618      	mov	r0, r3
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	e000ed00 	.word	0xe000ed00

08008560 <__NVIC_EnableIRQ>:
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800856a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800856e:	2b00      	cmp	r3, #0
 8008570:	db0b      	blt.n	800858a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	f003 021f 	and.w	r2, r3, #31
 8008578:	4907      	ldr	r1, [pc, #28]	; (8008598 <__NVIC_EnableIRQ+0x38>)
 800857a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	2001      	movs	r0, #1
 8008582:	fa00 f202 	lsl.w	r2, r0, r2
 8008586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	e000e100 	.word	0xe000e100

0800859c <__NVIC_DisableIRQ>:
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	4603      	mov	r3, r0
 80085a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	db12      	blt.n	80085d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	f003 021f 	and.w	r2, r3, #31
 80085b4:	490a      	ldr	r1, [pc, #40]	; (80085e0 <__NVIC_DisableIRQ+0x44>)
 80085b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	2001      	movs	r0, #1
 80085be:	fa00 f202 	lsl.w	r2, r0, r2
 80085c2:	3320      	adds	r3, #32
 80085c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80085c8:	f3bf 8f4f 	dsb	sy
}
 80085cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085ce:	f3bf 8f6f 	isb	sy
}
 80085d2:	bf00      	nop
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	e000e100 	.word	0xe000e100

080085e4 <__NVIC_SetPriority>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db0a      	blt.n	800860e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	490c      	ldr	r1, [pc, #48]	; (8008630 <__NVIC_SetPriority+0x4c>)
 80085fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008602:	0112      	lsls	r2, r2, #4
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	440b      	add	r3, r1
 8008608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800860c:	e00a      	b.n	8008624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	4908      	ldr	r1, [pc, #32]	; (8008634 <__NVIC_SetPriority+0x50>)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	3b04      	subs	r3, #4
 800861c:	0112      	lsls	r2, r2, #4
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	440b      	add	r3, r1
 8008622:	761a      	strb	r2, [r3, #24]
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	e000e100 	.word	0xe000e100
 8008634:	e000ed00 	.word	0xe000ed00

08008638 <NVIC_EncodePriority>:
{
 8008638:	b480      	push	{r7}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f1c3 0307 	rsb	r3, r3, #7
 8008652:	2b04      	cmp	r3, #4
 8008654:	bf28      	it	cs
 8008656:	2304      	movcs	r3, #4
 8008658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	3304      	adds	r3, #4
 800865e:	2b06      	cmp	r3, #6
 8008660:	d902      	bls.n	8008668 <NVIC_EncodePriority+0x30>
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	3b03      	subs	r3, #3
 8008666:	e000      	b.n	800866a <NVIC_EncodePriority+0x32>
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	43da      	mvns	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	401a      	ands	r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008680:	f04f 31ff 	mov.w	r1, #4294967295
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	fa01 f303 	lsl.w	r3, r1, r3
 800868a:	43d9      	mvns	r1, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008690:	4313      	orrs	r3, r2
}
 8008692:	4618      	mov	r0, r3
 8008694:	3724      	adds	r7, #36	; 0x24
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b0:	d301      	bcc.n	80086b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086b2:	2301      	movs	r3, #1
 80086b4:	e00f      	b.n	80086d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086b6:	4a0a      	ldr	r2, [pc, #40]	; (80086e0 <SysTick_Config+0x40>)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086be:	210f      	movs	r1, #15
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	f7ff ff8e 	bl	80085e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <SysTick_Config+0x40>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086ce:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <SysTick_Config+0x40>)
 80086d0:	2207      	movs	r2, #7
 80086d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	e000e010 	.word	0xe000e010

080086e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ff05 	bl	80084fc <__NVIC_SetPriorityGrouping>
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	4603      	mov	r3, r0
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800870c:	f7ff ff1a 	bl	8008544 <__NVIC_GetPriorityGrouping>
 8008710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	6978      	ldr	r0, [r7, #20]
 8008718:	f7ff ff8e 	bl	8008638 <NVIC_EncodePriority>
 800871c:	4602      	mov	r2, r0
 800871e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff ff5d 	bl	80085e4 <__NVIC_SetPriority>
}
 800872a:	bf00      	nop
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	4603      	mov	r3, r0
 800873a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800873c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff ff0d 	bl	8008560 <__NVIC_EnableIRQ>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	4603      	mov	r3, r0
 8008756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ff1d 	bl	800859c <__NVIC_DisableIRQ>
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff ff94 	bl	80086a0 <SysTick_Config>
 8008778:	4603      	mov	r3, r0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008790:	f7ff fe84 	bl	800849c <HAL_GetTick>
 8008794:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d008      	beq.n	80087b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2280      	movs	r2, #128	; 0x80
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e052      	b.n	800885a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0216 	bic.w	r2, r2, #22
 80087c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <HAL_DMA_Abort+0x62>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0208 	bic.w	r2, r2, #8
 80087f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008804:	e013      	b.n	800882e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008806:	f7ff fe49 	bl	800849c <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	2b05      	cmp	r3, #5
 8008812:	d90c      	bls.n	800882e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2203      	movs	r2, #3
 800881e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e015      	b.n	800885a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e4      	bne.n	8008806 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008840:	223f      	movs	r2, #63	; 0x3f
 8008842:	409a      	lsls	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d004      	beq.n	8008880 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2280      	movs	r2, #128	; 0x80
 800887a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e00c      	b.n	800889a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2205      	movs	r2, #5
 8008884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b089      	sub	sp, #36	; 0x24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088be:	2300      	movs	r3, #0
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	e159      	b.n	8008b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80088c4:	2201      	movs	r2, #1
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4013      	ands	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	429a      	cmp	r2, r3
 80088de:	f040 8148 	bne.w	8008b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d005      	beq.n	80088fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d130      	bne.n	800895c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	2203      	movs	r2, #3
 8008906:	fa02 f303 	lsl.w	r3, r2, r3
 800890a:	43db      	mvns	r3, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4013      	ands	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	fa02 f303 	lsl.w	r3, r2, r3
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	4313      	orrs	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008930:	2201      	movs	r2, #1
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	fa02 f303 	lsl.w	r3, r2, r3
 8008938:	43db      	mvns	r3, r3
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	4013      	ands	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	091b      	lsrs	r3, r3, #4
 8008946:	f003 0201 	and.w	r2, r3, #1
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	4313      	orrs	r3, r2
 8008954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	2b03      	cmp	r3, #3
 8008966:	d017      	beq.n	8008998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	2203      	movs	r2, #3
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	43db      	mvns	r3, r3
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	4013      	ands	r3, r2
 800897e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	4313      	orrs	r3, r2
 8008990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d123      	bne.n	80089ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	08da      	lsrs	r2, r3, #3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3208      	adds	r2, #8
 80089ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	220f      	movs	r2, #15
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	43db      	mvns	r3, r3
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	4013      	ands	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4313      	orrs	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	08da      	lsrs	r2, r3, #3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3208      	adds	r2, #8
 80089e6:	69b9      	ldr	r1, [r7, #24]
 80089e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	2203      	movs	r2, #3
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	43db      	mvns	r3, r3
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	4013      	ands	r3, r2
 8008a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f003 0203 	and.w	r2, r3, #3
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a2 	beq.w	8008b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	4b57      	ldr	r3, [pc, #348]	; (8008b90 <HAL_GPIO_Init+0x2e8>)
 8008a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a36:	4a56      	ldr	r2, [pc, #344]	; (8008b90 <HAL_GPIO_Init+0x2e8>)
 8008a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a3e:	4b54      	ldr	r3, [pc, #336]	; (8008b90 <HAL_GPIO_Init+0x2e8>)
 8008a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a4a:	4a52      	ldr	r2, [pc, #328]	; (8008b94 <HAL_GPIO_Init+0x2ec>)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	089b      	lsrs	r3, r3, #2
 8008a50:	3302      	adds	r3, #2
 8008a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	220f      	movs	r2, #15
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a49      	ldr	r2, [pc, #292]	; (8008b98 <HAL_GPIO_Init+0x2f0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d019      	beq.n	8008aaa <HAL_GPIO_Init+0x202>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a48      	ldr	r2, [pc, #288]	; (8008b9c <HAL_GPIO_Init+0x2f4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <HAL_GPIO_Init+0x1fe>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a47      	ldr	r2, [pc, #284]	; (8008ba0 <HAL_GPIO_Init+0x2f8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00d      	beq.n	8008aa2 <HAL_GPIO_Init+0x1fa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <HAL_GPIO_Init+0x2fc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d007      	beq.n	8008a9e <HAL_GPIO_Init+0x1f6>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a45      	ldr	r2, [pc, #276]	; (8008ba8 <HAL_GPIO_Init+0x300>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d101      	bne.n	8008a9a <HAL_GPIO_Init+0x1f2>
 8008a96:	2304      	movs	r3, #4
 8008a98:	e008      	b.n	8008aac <HAL_GPIO_Init+0x204>
 8008a9a:	2307      	movs	r3, #7
 8008a9c:	e006      	b.n	8008aac <HAL_GPIO_Init+0x204>
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e004      	b.n	8008aac <HAL_GPIO_Init+0x204>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e002      	b.n	8008aac <HAL_GPIO_Init+0x204>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <HAL_GPIO_Init+0x204>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	f002 0203 	and.w	r2, r2, #3
 8008ab2:	0092      	lsls	r2, r2, #2
 8008ab4:	4093      	lsls	r3, r2
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008abc:	4935      	ldr	r1, [pc, #212]	; (8008b94 <HAL_GPIO_Init+0x2ec>)
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	089b      	lsrs	r3, r3, #2
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008aca:	4b38      	ldr	r3, [pc, #224]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aee:	4a2f      	ldr	r2, [pc, #188]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008af4:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	43db      	mvns	r3, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4013      	ands	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b18:	4a24      	ldr	r2, [pc, #144]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008b1e:	4b23      	ldr	r3, [pc, #140]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	43db      	mvns	r3, r3
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b42:	4a1a      	ldr	r2, [pc, #104]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4013      	ands	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b6c:	4a0f      	ldr	r2, [pc, #60]	; (8008bac <HAL_GPIO_Init+0x304>)
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	3301      	adds	r3, #1
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	2b0f      	cmp	r3, #15
 8008b7c:	f67f aea2 	bls.w	80088c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	3724      	adds	r7, #36	; 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40023800 	.word	0x40023800
 8008b94:	40013800 	.word	0x40013800
 8008b98:	40020000 	.word	0x40020000
 8008b9c:	40020400 	.word	0x40020400
 8008ba0:	40020800 	.word	0x40020800
 8008ba4:	40020c00 	.word	0x40020c00
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	40013c00 	.word	0x40013c00

08008bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	887b      	ldrh	r3, [r7, #2]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e001      	b.n	8008bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	807b      	strh	r3, [r7, #2]
 8008bec:	4613      	mov	r3, r2
 8008bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bf0:	787b      	ldrb	r3, [r7, #1]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bf6:	887a      	ldrh	r2, [r7, #2]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008bfc:	e003      	b.n	8008c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	041a      	lsls	r2, r3, #16
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	619a      	str	r2, [r3, #24]
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
	...

08008c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008c1e:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c20:	695a      	ldr	r2, [r3, #20]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	4013      	ands	r3, r2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d006      	beq.n	8008c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c2a:	4a05      	ldr	r2, [pc, #20]	; (8008c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c2c:	88fb      	ldrh	r3, [r7, #6]
 8008c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fb f92c 	bl	8003e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c38:	bf00      	nop
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	40013c00 	.word	0x40013c00

08008c44 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008c48:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008c54:	f000 f808 	bl	8008c68 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c5e:	615a      	str	r2, [r3, #20]
  }
}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40013c00 	.word	0x40013c00

08008c68 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008c6c:	bf00      	nop
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e267      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d075      	beq.n	8008d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c96:	4b88      	ldr	r3, [pc, #544]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 030c 	and.w	r3, r3, #12
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d00c      	beq.n	8008cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ca2:	4b85      	ldr	r3, [pc, #532]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d112      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cae:	4b82      	ldr	r3, [pc, #520]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cba:	d10b      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cbc:	4b7e      	ldr	r3, [pc, #504]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d05b      	beq.n	8008d80 <HAL_RCC_OscConfig+0x108>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d157      	bne.n	8008d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e242      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d106      	bne.n	8008cec <HAL_RCC_OscConfig+0x74>
 8008cde:	4b76      	ldr	r3, [pc, #472]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a75      	ldr	r2, [pc, #468]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	e01d      	b.n	8008d28 <HAL_RCC_OscConfig+0xb0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cf4:	d10c      	bne.n	8008d10 <HAL_RCC_OscConfig+0x98>
 8008cf6:	4b70      	ldr	r3, [pc, #448]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a6f      	ldr	r2, [pc, #444]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4b6d      	ldr	r3, [pc, #436]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a6c      	ldr	r2, [pc, #432]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	e00b      	b.n	8008d28 <HAL_RCC_OscConfig+0xb0>
 8008d10:	4b69      	ldr	r3, [pc, #420]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a68      	ldr	r2, [pc, #416]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b66      	ldr	r3, [pc, #408]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a65      	ldr	r2, [pc, #404]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d30:	f7ff fbb4 	bl	800849c <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d38:	f7ff fbb0 	bl	800849c <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	; 0x64
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e207      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4a:	4b5b      	ldr	r3, [pc, #364]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0xc0>
 8008d56:	e014      	b.n	8008d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d58:	f7ff fba0 	bl	800849c <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d60:	f7ff fb9c 	bl	800849c <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b64      	cmp	r3, #100	; 0x64
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e1f3      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d72:	4b51      	ldr	r3, [pc, #324]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1f0      	bne.n	8008d60 <HAL_RCC_OscConfig+0xe8>
 8008d7e:	e000      	b.n	8008d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d063      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d8e:	4b4a      	ldr	r3, [pc, #296]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 030c 	and.w	r3, r3, #12
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d9a:	4b47      	ldr	r3, [pc, #284]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d11c      	bne.n	8008de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008da6:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d116      	bne.n	8008de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008db2:	4b41      	ldr	r3, [pc, #260]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_RCC_OscConfig+0x152>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d001      	beq.n	8008dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e1c7      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dca:	4b3b      	ldr	r3, [pc, #236]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4937      	ldr	r1, [pc, #220]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dde:	e03a      	b.n	8008e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d020      	beq.n	8008e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008de8:	4b34      	ldr	r3, [pc, #208]	; (8008ebc <HAL_RCC_OscConfig+0x244>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dee:	f7ff fb55 	bl	800849c <HAL_GetTick>
 8008df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008df4:	e008      	b.n	8008e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008df6:	f7ff fb51 	bl	800849c <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e1a8      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e08:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e14:	4b28      	ldr	r3, [pc, #160]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4925      	ldr	r1, [pc, #148]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	600b      	str	r3, [r1, #0]
 8008e28:	e015      	b.n	8008e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e2a:	4b24      	ldr	r3, [pc, #144]	; (8008ebc <HAL_RCC_OscConfig+0x244>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7ff fb34 	bl	800849c <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e38:	f7ff fb30 	bl	800849c <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e187      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d036      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e6a:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <HAL_RCC_OscConfig+0x248>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e70:	f7ff fb14 	bl	800849c <HAL_GetTick>
 8008e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e78:	f7ff fb10 	bl	800849c <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e167      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f0      	beq.n	8008e78 <HAL_RCC_OscConfig+0x200>
 8008e96:	e01b      	b.n	8008ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <HAL_RCC_OscConfig+0x248>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e9e:	f7ff fafd 	bl	800849c <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ea4:	e00e      	b.n	8008ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ea6:	f7ff faf9 	bl	800849c <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d907      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e150      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	42470000 	.word	0x42470000
 8008ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ec4:	4b88      	ldr	r3, [pc, #544]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1ea      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 8097 	beq.w	800900c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee2:	4b81      	ldr	r3, [pc, #516]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10f      	bne.n	8008f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	4b7d      	ldr	r3, [pc, #500]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	4a7c      	ldr	r2, [pc, #496]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efc:	6413      	str	r3, [r2, #64]	; 0x40
 8008efe:	4b7a      	ldr	r3, [pc, #488]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f0e:	4b77      	ldr	r3, [pc, #476]	; (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d118      	bne.n	8008f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f1a:	4b74      	ldr	r3, [pc, #464]	; (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a73      	ldr	r2, [pc, #460]	; (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f26:	f7ff fab9 	bl	800849c <HAL_GetTick>
 8008f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2e:	f7ff fab5 	bl	800849c <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e10c      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f40:	4b6a      	ldr	r3, [pc, #424]	; (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d106      	bne.n	8008f62 <HAL_RCC_OscConfig+0x2ea>
 8008f54:	4b64      	ldr	r3, [pc, #400]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f58:	4a63      	ldr	r2, [pc, #396]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f60:	e01c      	b.n	8008f9c <HAL_RCC_OscConfig+0x324>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b05      	cmp	r3, #5
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCC_OscConfig+0x30c>
 8008f6a:	4b5f      	ldr	r3, [pc, #380]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	4a5e      	ldr	r2, [pc, #376]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f70:	f043 0304 	orr.w	r3, r3, #4
 8008f74:	6713      	str	r3, [r2, #112]	; 0x70
 8008f76:	4b5c      	ldr	r3, [pc, #368]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7a:	4a5b      	ldr	r2, [pc, #364]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	6713      	str	r3, [r2, #112]	; 0x70
 8008f82:	e00b      	b.n	8008f9c <HAL_RCC_OscConfig+0x324>
 8008f84:	4b58      	ldr	r3, [pc, #352]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f88:	4a57      	ldr	r2, [pc, #348]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f8a:	f023 0301 	bic.w	r3, r3, #1
 8008f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f90:	4b55      	ldr	r3, [pc, #340]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f94:	4a54      	ldr	r2, [pc, #336]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f96:	f023 0304 	bic.w	r3, r3, #4
 8008f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d015      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa4:	f7ff fa7a 	bl	800849c <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008faa:	e00a      	b.n	8008fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fac:	f7ff fa76 	bl	800849c <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e0cb      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc2:	4b49      	ldr	r3, [pc, #292]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ee      	beq.n	8008fac <HAL_RCC_OscConfig+0x334>
 8008fce:	e014      	b.n	8008ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd0:	f7ff fa64 	bl	800849c <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fd6:	e00a      	b.n	8008fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fd8:	f7ff fa60 	bl	800849c <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e0b5      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fee:	4b3e      	ldr	r3, [pc, #248]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1ee      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d105      	bne.n	800900c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009000:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	4a38      	ldr	r2, [pc, #224]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800900a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a1 	beq.w	8009158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009016:	4b34      	ldr	r3, [pc, #208]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 030c 	and.w	r3, r3, #12
 800901e:	2b08      	cmp	r3, #8
 8009020:	d05c      	beq.n	80090dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d141      	bne.n	80090ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <HAL_RCC_OscConfig+0x478>)
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009030:	f7ff fa34 	bl	800849c <HAL_GetTick>
 8009034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009036:	e008      	b.n	800904a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009038:	f7ff fa30 	bl	800849c <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e087      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800904a:	4b27      	ldr	r3, [pc, #156]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1f0      	bne.n	8009038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69da      	ldr	r2, [r3, #28]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	019b      	lsls	r3, r3, #6
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	3b01      	subs	r3, #1
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	491b      	ldr	r1, [pc, #108]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <HAL_RCC_OscConfig+0x478>)
 8009082:	2201      	movs	r2, #1
 8009084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009086:	f7ff fa09 	bl	800849c <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800908e:	f7ff fa05 	bl	800849c <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e05c      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x416>
 80090ac:	e054      	b.n	8009158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ae:	4b10      	ldr	r3, [pc, #64]	; (80090f0 <HAL_RCC_OscConfig+0x478>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b4:	f7ff f9f2 	bl	800849c <HAL_GetTick>
 80090b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ba:	e008      	b.n	80090ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090bc:	f7ff f9ee 	bl	800849c <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e045      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <HAL_RCC_OscConfig+0x470>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f0      	bne.n	80090bc <HAL_RCC_OscConfig+0x444>
 80090da:	e03d      	b.n	8009158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e038      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
 80090e8:	40023800 	.word	0x40023800
 80090ec:	40007000 	.word	0x40007000
 80090f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090f4:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <HAL_RCC_OscConfig+0x4ec>)
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d028      	beq.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800910c:	429a      	cmp	r2, r3
 800910e:	d121      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800911a:	429a      	cmp	r2, r3
 800911c:	d11a      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009124:	4013      	ands	r3, r2
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800912a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800912c:	4293      	cmp	r3, r2
 800912e:	d111      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	3b01      	subs	r3, #1
 800913e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009140:	429a      	cmp	r2, r3
 8009142:	d107      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009150:	429a      	cmp	r2, r3
 8009152:	d001      	beq.n	8009158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e000      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40023800 	.word	0x40023800

08009168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0cc      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800917c:	4b68      	ldr	r3, [pc, #416]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d90c      	bls.n	80091a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918a:	4b65      	ldr	r3, [pc, #404]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009192:	4b63      	ldr	r3, [pc, #396]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d001      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0b8      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d020      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091bc:	4b59      	ldr	r3, [pc, #356]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4a58      	ldr	r2, [pc, #352]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091d4:	4b53      	ldr	r3, [pc, #332]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	4a52      	ldr	r2, [pc, #328]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e0:	4b50      	ldr	r3, [pc, #320]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	494d      	ldr	r1, [pc, #308]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d044      	beq.n	8009288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009206:	4b47      	ldr	r3, [pc, #284]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d119      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e07f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d003      	beq.n	8009226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009222:	2b03      	cmp	r3, #3
 8009224:	d107      	bne.n	8009236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009226:	4b3f      	ldr	r3, [pc, #252]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e06f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009236:	4b3b      	ldr	r3, [pc, #236]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e067      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009246:	4b37      	ldr	r3, [pc, #220]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 0203 	bic.w	r2, r3, #3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4934      	ldr	r1, [pc, #208]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009254:	4313      	orrs	r3, r2
 8009256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009258:	f7ff f920 	bl	800849c <HAL_GetTick>
 800925c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925e:	e00a      	b.n	8009276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009260:	f7ff f91c 	bl	800849c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f241 3288 	movw	r2, #5000	; 0x1388
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e04f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009276:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 020c 	and.w	r2, r3, #12
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	429a      	cmp	r2, r3
 8009286:	d1eb      	bne.n	8009260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009288:	4b25      	ldr	r3, [pc, #148]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d20c      	bcs.n	80092b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009296:	4b22      	ldr	r3, [pc, #136]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800929e:	4b20      	ldr	r3, [pc, #128]	; (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d001      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e032      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4916      	ldr	r1, [pc, #88]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	490e      	ldr	r1, [pc, #56]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092ee:	f000 f821 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	490a      	ldr	r1, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x1c0>)
 8009300:	5ccb      	ldrb	r3, [r1, r3]
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	4a09      	ldr	r2, [pc, #36]	; (800932c <HAL_RCC_ClockConfig+0x1c4>)
 8009308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <HAL_RCC_ClockConfig+0x1c8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff f880 	bl	8008414 <HAL_InitTick>

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40023c00 	.word	0x40023c00
 8009324:	40023800 	.word	0x40023800
 8009328:	08010324 	.word	0x08010324
 800932c:	20000060 	.word	0x20000060
 8009330:	20000064 	.word	0x20000064

08009334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009338:	b094      	sub	sp, #80	; 0x50
 800933a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	647b      	str	r3, [r7, #68]	; 0x44
 8009340:	2300      	movs	r3, #0
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009344:	2300      	movs	r3, #0
 8009346:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800934c:	4b79      	ldr	r3, [pc, #484]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 030c 	and.w	r3, r3, #12
 8009354:	2b08      	cmp	r3, #8
 8009356:	d00d      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x40>
 8009358:	2b08      	cmp	r3, #8
 800935a:	f200 80e1 	bhi.w	8009520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_RCC_GetSysClockFreq+0x34>
 8009362:	2b04      	cmp	r3, #4
 8009364:	d003      	beq.n	800936e <HAL_RCC_GetSysClockFreq+0x3a>
 8009366:	e0db      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009368:	4b73      	ldr	r3, [pc, #460]	; (8009538 <HAL_RCC_GetSysClockFreq+0x204>)
 800936a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800936c:	e0db      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800936e:	4b73      	ldr	r3, [pc, #460]	; (800953c <HAL_RCC_GetSysClockFreq+0x208>)
 8009370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009372:	e0d8      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009374:	4b6f      	ldr	r3, [pc, #444]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800937c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800937e:	4b6d      	ldr	r3, [pc, #436]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d063      	beq.n	8009452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800938a:	4b6a      	ldr	r3, [pc, #424]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	099b      	lsrs	r3, r3, #6
 8009390:	2200      	movs	r2, #0
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
 8009394:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939c:	633b      	str	r3, [r7, #48]	; 0x30
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34
 80093a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	f04f 0000 	mov.w	r0, #0
 80093ae:	f04f 0100 	mov.w	r1, #0
 80093b2:	0159      	lsls	r1, r3, #5
 80093b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093b8:	0150      	lsls	r0, r2, #5
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4621      	mov	r1, r4
 80093c0:	1a51      	subs	r1, r2, r1
 80093c2:	6139      	str	r1, [r7, #16]
 80093c4:	4629      	mov	r1, r5
 80093c6:	eb63 0301 	sbc.w	r3, r3, r1
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093d8:	4659      	mov	r1, fp
 80093da:	018b      	lsls	r3, r1, #6
 80093dc:	4651      	mov	r1, sl
 80093de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093e2:	4651      	mov	r1, sl
 80093e4:	018a      	lsls	r2, r1, #6
 80093e6:	4651      	mov	r1, sl
 80093e8:	ebb2 0801 	subs.w	r8, r2, r1
 80093ec:	4659      	mov	r1, fp
 80093ee:	eb63 0901 	sbc.w	r9, r3, r1
 80093f2:	f04f 0200 	mov.w	r2, #0
 80093f6:	f04f 0300 	mov.w	r3, #0
 80093fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009406:	4690      	mov	r8, r2
 8009408:	4699      	mov	r9, r3
 800940a:	4623      	mov	r3, r4
 800940c:	eb18 0303 	adds.w	r3, r8, r3
 8009410:	60bb      	str	r3, [r7, #8]
 8009412:	462b      	mov	r3, r5
 8009414:	eb49 0303 	adc.w	r3, r9, r3
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009426:	4629      	mov	r1, r5
 8009428:	024b      	lsls	r3, r1, #9
 800942a:	4621      	mov	r1, r4
 800942c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009430:	4621      	mov	r1, r4
 8009432:	024a      	lsls	r2, r1, #9
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943a:	2200      	movs	r2, #0
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
 800943e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009444:	f7f7 fbb0 	bl	8000ba8 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4613      	mov	r3, r2
 800944e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009450:	e058      	b.n	8009504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009452:	4b38      	ldr	r3, [pc, #224]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	099b      	lsrs	r3, r3, #6
 8009458:	2200      	movs	r2, #0
 800945a:	4618      	mov	r0, r3
 800945c:	4611      	mov	r1, r2
 800945e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009462:	623b      	str	r3, [r7, #32]
 8009464:	2300      	movs	r3, #0
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
 8009468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	f04f 0000 	mov.w	r0, #0
 8009474:	f04f 0100 	mov.w	r1, #0
 8009478:	0159      	lsls	r1, r3, #5
 800947a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800947e:	0150      	lsls	r0, r2, #5
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4641      	mov	r1, r8
 8009486:	ebb2 0a01 	subs.w	sl, r2, r1
 800948a:	4649      	mov	r1, r9
 800948c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800949c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80094a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80094a4:	ebb2 040a 	subs.w	r4, r2, sl
 80094a8:	eb63 050b 	sbc.w	r5, r3, fp
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	00eb      	lsls	r3, r5, #3
 80094b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094ba:	00e2      	lsls	r2, r4, #3
 80094bc:	4614      	mov	r4, r2
 80094be:	461d      	mov	r5, r3
 80094c0:	4643      	mov	r3, r8
 80094c2:	18e3      	adds	r3, r4, r3
 80094c4:	603b      	str	r3, [r7, #0]
 80094c6:	464b      	mov	r3, r9
 80094c8:	eb45 0303 	adc.w	r3, r5, r3
 80094cc:	607b      	str	r3, [r7, #4]
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80094da:	4629      	mov	r1, r5
 80094dc:	028b      	lsls	r3, r1, #10
 80094de:	4621      	mov	r1, r4
 80094e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094e4:	4621      	mov	r1, r4
 80094e6:	028a      	lsls	r2, r1, #10
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ee:	2200      	movs	r2, #0
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	61fa      	str	r2, [r7, #28]
 80094f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094f8:	f7f7 fb56 	bl	8000ba8 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4613      	mov	r3, r2
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	3301      	adds	r3, #1
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800951e:	e002      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <HAL_RCC_GetSysClockFreq+0x204>)
 8009522:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009528:	4618      	mov	r0, r3
 800952a:	3750      	adds	r7, #80	; 0x50
 800952c:	46bd      	mov	sp, r7
 800952e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009532:	bf00      	nop
 8009534:	40023800 	.word	0x40023800
 8009538:	00f42400 	.word	0x00f42400
 800953c:	007a1200 	.word	0x007a1200

08009540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <HAL_RCC_GetHCLKFreq+0x14>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	4618      	mov	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20000060 	.word	0x20000060

08009558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800955c:	f7ff fff0 	bl	8009540 <HAL_RCC_GetHCLKFreq>
 8009560:	4602      	mov	r2, r0
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	0a9b      	lsrs	r3, r3, #10
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	4903      	ldr	r1, [pc, #12]	; (800957c <HAL_RCC_GetPCLK1Freq+0x24>)
 800956e:	5ccb      	ldrb	r3, [r1, r3]
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009574:	4618      	mov	r0, r3
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40023800 	.word	0x40023800
 800957c:	08010334 	.word	0x08010334

08009580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009584:	f7ff ffdc 	bl	8009540 <HAL_RCC_GetHCLKFreq>
 8009588:	4602      	mov	r2, r0
 800958a:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	0b5b      	lsrs	r3, r3, #13
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	4903      	ldr	r1, [pc, #12]	; (80095a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009596:	5ccb      	ldrb	r3, [r1, r3]
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40023800 	.word	0x40023800
 80095a4:	08010334 	.word	0x08010334

080095a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d038      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095d0:	4b68      	ldr	r3, [pc, #416]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095d6:	f7fe ff61 	bl	800849c <HAL_GetTick>
 80095da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095dc:	e008      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095de:	f7fe ff5d 	bl	800849c <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d901      	bls.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e0bd      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095f0:	4b61      	ldr	r3, [pc, #388]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f0      	bne.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	019b      	lsls	r3, r3, #6
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	495a      	ldr	r1, [pc, #360]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009610:	4313      	orrs	r3, r2
 8009612:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009616:	4b57      	ldr	r3, [pc, #348]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009618:	2201      	movs	r2, #1
 800961a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800961c:	f7fe ff3e 	bl	800849c <HAL_GetTick>
 8009620:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009622:	e008      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009624:	f7fe ff3a 	bl	800849c <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b02      	cmp	r3, #2
 8009630:	d901      	bls.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e09a      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009636:	4b50      	ldr	r3, [pc, #320]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0f0      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 8083 	beq.w	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	4b48      	ldr	r3, [pc, #288]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	4a47      	ldr	r2, [pc, #284]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800965a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800965e:	6413      	str	r3, [r2, #64]	; 0x40
 8009660:	4b45      	ldr	r3, [pc, #276]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800966c:	4b43      	ldr	r3, [pc, #268]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a42      	ldr	r2, [pc, #264]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009676:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009678:	f7fe ff10 	bl	800849c <HAL_GetTick>
 800967c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800967e:	e008      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009680:	f7fe ff0c 	bl	800849c <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d901      	bls.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e06c      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009692:	4b3a      	ldr	r3, [pc, #232]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0f0      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d02f      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d028      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096bc:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096c6:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096cc:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80096d2:	4a29      	ldr	r2, [pc, #164]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096d8:	4b27      	ldr	r3, [pc, #156]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d114      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80096e4:	f7fe feda 	bl	800849c <HAL_GetTick>
 80096e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096ea:	e00a      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096ec:	f7fe fed6 	bl	800849c <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d901      	bls.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e034      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0ee      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800971a:	d10d      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800972c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009730:	4911      	ldr	r1, [pc, #68]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009732:	4313      	orrs	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
 8009736:	e005      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4a0e      	ldr	r2, [pc, #56]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009742:	6093      	str	r3, [r2, #8]
 8009744:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009750:	4909      	ldr	r1, [pc, #36]	; (8009778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009752:	4313      	orrs	r3, r2
 8009754:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7d1a      	ldrb	r2, [r3, #20]
 8009766:	4b07      	ldr	r3, [pc, #28]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009768:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	42470068 	.word	0x42470068
 8009778:	40023800 	.word	0x40023800
 800977c:	40007000 	.word	0x40007000
 8009780:	42470e40 	.word	0x42470e40
 8009784:	424711e0 	.word	0x424711e0

08009788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e041      	b.n	800981e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb fe98 	bl	80054e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f000 ffce 	bl	800a768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b01      	cmp	r3, #1
 800983a:	d001      	beq.n	8009840 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e03c      	b.n	80098ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1e      	ldr	r2, [pc, #120]	; (80098c8 <HAL_TIM_Base_Start+0xa0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d018      	beq.n	8009884 <HAL_TIM_Base_Start+0x5c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985a:	d013      	beq.n	8009884 <HAL_TIM_Base_Start+0x5c>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1a      	ldr	r2, [pc, #104]	; (80098cc <HAL_TIM_Base_Start+0xa4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00e      	beq.n	8009884 <HAL_TIM_Base_Start+0x5c>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a19      	ldr	r2, [pc, #100]	; (80098d0 <HAL_TIM_Base_Start+0xa8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d009      	beq.n	8009884 <HAL_TIM_Base_Start+0x5c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a17      	ldr	r2, [pc, #92]	; (80098d4 <HAL_TIM_Base_Start+0xac>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_TIM_Base_Start+0x5c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a16      	ldr	r2, [pc, #88]	; (80098d8 <HAL_TIM_Base_Start+0xb0>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d111      	bne.n	80098a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b06      	cmp	r3, #6
 8009894:	d010      	beq.n	80098b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0201 	orr.w	r2, r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a6:	e007      	b.n	80098b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0201 	orr.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40010000 	.word	0x40010000
 80098cc:	40000400 	.word	0x40000400
 80098d0:	40000800 	.word	0x40000800
 80098d4:	40000c00 	.word	0x40000c00
 80098d8:	40014000 	.word	0x40014000

080098dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10f      	bne.n	8009914 <HAL_TIM_Base_Stop+0x38>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6a1a      	ldr	r2, [r3, #32]
 80098fa:	f240 4344 	movw	r3, #1092	; 0x444
 80098fe:	4013      	ands	r3, r2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <HAL_TIM_Base_Stop+0x38>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0201 	bic.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	d001      	beq.n	8009944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e044      	b.n	80099ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0201 	orr.w	r2, r2, #1
 800995a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <HAL_TIM_Base_Start_IT+0xb0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d018      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x6c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996e:	d013      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x6c>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a1a      	ldr	r2, [pc, #104]	; (80099e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00e      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x6c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a19      	ldr	r2, [pc, #100]	; (80099e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d009      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x6c>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a17      	ldr	r2, [pc, #92]	; (80099e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d004      	beq.n	8009998 <HAL_TIM_Base_Start_IT+0x6c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a16      	ldr	r2, [pc, #88]	; (80099ec <HAL_TIM_Base_Start_IT+0xc0>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d111      	bne.n	80099bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b06      	cmp	r3, #6
 80099a8:	d010      	beq.n	80099cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f042 0201 	orr.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ba:	e007      	b.n	80099cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f042 0201 	orr.w	r2, r2, #1
 80099ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	40010000 	.word	0x40010000
 80099e0:	40000400 	.word	0x40000400
 80099e4:	40000800 	.word	0x40000800
 80099e8:	40000c00 	.word	0x40000c00
 80099ec:	40014000 	.word	0x40014000

080099f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6a1a      	ldr	r2, [r3, #32]
 8009a0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10f      	bne.n	8009a38 <HAL_TIM_Base_Stop_IT+0x48>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	f240 4344 	movw	r3, #1092	; 0x444
 8009a22:	4013      	ands	r3, r2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_Base_Stop_IT+0x48>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e041      	b.n	8009ae4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f839 	bl	8009aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f000 fe6b 	bl	800a768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d109      	bne.n	8009b24 <HAL_TIM_PWM_Start+0x24>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	bf14      	ite	ne
 8009b1c:	2301      	movne	r3, #1
 8009b1e:	2300      	moveq	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	e022      	b.n	8009b6a <HAL_TIM_PWM_Start+0x6a>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d109      	bne.n	8009b3e <HAL_TIM_PWM_Start+0x3e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	bf14      	ite	ne
 8009b36:	2301      	movne	r3, #1
 8009b38:	2300      	moveq	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	e015      	b.n	8009b6a <HAL_TIM_PWM_Start+0x6a>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	d109      	bne.n	8009b58 <HAL_TIM_PWM_Start+0x58>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	bf14      	ite	ne
 8009b50:	2301      	movne	r3, #1
 8009b52:	2300      	moveq	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	e008      	b.n	8009b6a <HAL_TIM_PWM_Start+0x6a>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	bf14      	ite	ne
 8009b64:	2301      	movne	r3, #1
 8009b66:	2300      	moveq	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e068      	b.n	8009c44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <HAL_TIM_PWM_Start+0x82>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b80:	e013      	b.n	8009baa <HAL_TIM_PWM_Start+0xaa>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d104      	bne.n	8009b92 <HAL_TIM_PWM_Start+0x92>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b90:	e00b      	b.n	8009baa <HAL_TIM_PWM_Start+0xaa>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d104      	bne.n	8009ba2 <HAL_TIM_PWM_Start+0xa2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ba0:	e003      	b.n	8009baa <HAL_TIM_PWM_Start+0xaa>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 f99c 	bl	800aef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a23      	ldr	r2, [pc, #140]	; (8009c4c <HAL_TIM_PWM_Start+0x14c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d107      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a1d      	ldr	r2, [pc, #116]	; (8009c4c <HAL_TIM_PWM_Start+0x14c>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d018      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x10e>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be4:	d013      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x10e>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a19      	ldr	r2, [pc, #100]	; (8009c50 <HAL_TIM_PWM_Start+0x150>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00e      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x10e>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a17      	ldr	r2, [pc, #92]	; (8009c54 <HAL_TIM_PWM_Start+0x154>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d009      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x10e>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a16      	ldr	r2, [pc, #88]	; (8009c58 <HAL_TIM_PWM_Start+0x158>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d004      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x10e>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a14      	ldr	r2, [pc, #80]	; (8009c5c <HAL_TIM_PWM_Start+0x15c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d111      	bne.n	8009c32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b06      	cmp	r3, #6
 8009c1e:	d010      	beq.n	8009c42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c30:	e007      	b.n	8009c42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40000400 	.word	0x40000400
 8009c54:	40000800 	.word	0x40000800
 8009c58:	40000c00 	.word	0x40000c00
 8009c5c:	40014000 	.word	0x40014000

08009c60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 f93c 	bl	800aef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a29      	ldr	r2, [pc, #164]	; (8009d24 <HAL_TIM_PWM_Stop+0xc4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d117      	bne.n	8009cb2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a1a      	ldr	r2, [r3, #32]
 8009c88:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10f      	bne.n	8009cb2 <HAL_TIM_PWM_Stop+0x52>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a1a      	ldr	r2, [r3, #32]
 8009c98:	f240 4344 	movw	r3, #1092	; 0x444
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d107      	bne.n	8009cb2 <HAL_TIM_PWM_Stop+0x52>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6a1a      	ldr	r2, [r3, #32]
 8009cb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10f      	bne.n	8009ce2 <HAL_TIM_PWM_Stop+0x82>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6a1a      	ldr	r2, [r3, #32]
 8009cc8:	f240 4344 	movw	r3, #1092	; 0x444
 8009ccc:	4013      	ands	r3, r2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d107      	bne.n	8009ce2 <HAL_TIM_PWM_Stop+0x82>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_PWM_Stop+0x92>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cf0:	e013      	b.n	8009d1a <HAL_TIM_PWM_Stop+0xba>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d104      	bne.n	8009d02 <HAL_TIM_PWM_Stop+0xa2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d00:	e00b      	b.n	8009d1a <HAL_TIM_PWM_Stop+0xba>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d104      	bne.n	8009d12 <HAL_TIM_PWM_Stop+0xb2>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d10:	e003      	b.n	8009d1a <HAL_TIM_PWM_Stop+0xba>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40010000 	.word	0x40010000

08009d28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e041      	b.n	8009dbe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f839 	bl	8009dc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f000 fcfe 	bl	800a768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2200      	movs	r2, #0
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 f87f 	bl	800aef0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a1a      	ldr	r2, [r3, #32]
 8009df8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10f      	bne.n	8009e22 <HAL_TIM_IC_Stop+0x48>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6a1a      	ldr	r2, [r3, #32]
 8009e08:	f240 4344 	movw	r3, #1092	; 0x444
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d107      	bne.n	8009e22 <HAL_TIM_IC_Stop+0x48>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0201 	bic.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <HAL_TIM_IC_Stop+0x58>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e30:	e013      	b.n	8009e5a <HAL_TIM_IC_Stop+0x80>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d104      	bne.n	8009e42 <HAL_TIM_IC_Stop+0x68>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e40:	e00b      	b.n	8009e5a <HAL_TIM_IC_Stop+0x80>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d104      	bne.n	8009e52 <HAL_TIM_IC_Stop+0x78>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e50:	e003      	b.n	8009e5a <HAL_TIM_IC_Stop+0x80>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <HAL_TIM_IC_Stop+0x90>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e68:	e013      	b.n	8009e92 <HAL_TIM_IC_Stop+0xb8>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d104      	bne.n	8009e7a <HAL_TIM_IC_Stop+0xa0>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e78:	e00b      	b.n	8009e92 <HAL_TIM_IC_Stop+0xb8>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d104      	bne.n	8009e8a <HAL_TIM_IC_Stop+0xb0>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e88:	e003      	b.n	8009e92 <HAL_TIM_IC_Stop+0xb8>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d104      	bne.n	8009eba <HAL_TIM_IC_Start_IT+0x1e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	e013      	b.n	8009ee2 <HAL_TIM_IC_Start_IT+0x46>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d104      	bne.n	8009eca <HAL_TIM_IC_Start_IT+0x2e>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	e00b      	b.n	8009ee2 <HAL_TIM_IC_Start_IT+0x46>
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b08      	cmp	r3, #8
 8009ece:	d104      	bne.n	8009eda <HAL_TIM_IC_Start_IT+0x3e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	e003      	b.n	8009ee2 <HAL_TIM_IC_Start_IT+0x46>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d104      	bne.n	8009ef4 <HAL_TIM_IC_Start_IT+0x58>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	e013      	b.n	8009f1c <HAL_TIM_IC_Start_IT+0x80>
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d104      	bne.n	8009f04 <HAL_TIM_IC_Start_IT+0x68>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	e00b      	b.n	8009f1c <HAL_TIM_IC_Start_IT+0x80>
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	d104      	bne.n	8009f14 <HAL_TIM_IC_Start_IT+0x78>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	e003      	b.n	8009f1c <HAL_TIM_IC_Start_IT+0x80>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d102      	bne.n	8009f2a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f24:	7b7b      	ldrb	r3, [r7, #13]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d001      	beq.n	8009f2e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e0c2      	b.n	800a0b4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d104      	bne.n	8009f3e <HAL_TIM_IC_Start_IT+0xa2>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2202      	movs	r2, #2
 8009f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f3c:	e013      	b.n	8009f66 <HAL_TIM_IC_Start_IT+0xca>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d104      	bne.n	8009f4e <HAL_TIM_IC_Start_IT+0xb2>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f4c:	e00b      	b.n	8009f66 <HAL_TIM_IC_Start_IT+0xca>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d104      	bne.n	8009f5e <HAL_TIM_IC_Start_IT+0xc2>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f5c:	e003      	b.n	8009f66 <HAL_TIM_IC_Start_IT+0xca>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2202      	movs	r2, #2
 8009f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <HAL_TIM_IC_Start_IT+0xda>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f74:	e013      	b.n	8009f9e <HAL_TIM_IC_Start_IT+0x102>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d104      	bne.n	8009f86 <HAL_TIM_IC_Start_IT+0xea>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f84:	e00b      	b.n	8009f9e <HAL_TIM_IC_Start_IT+0x102>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d104      	bne.n	8009f96 <HAL_TIM_IC_Start_IT+0xfa>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f94:	e003      	b.n	8009f9e <HAL_TIM_IC_Start_IT+0x102>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b0c      	cmp	r3, #12
 8009fa2:	d841      	bhi.n	800a028 <HAL_TIM_IC_Start_IT+0x18c>
 8009fa4:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <HAL_TIM_IC_Start_IT+0x110>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	08009fe1 	.word	0x08009fe1
 8009fb0:	0800a029 	.word	0x0800a029
 8009fb4:	0800a029 	.word	0x0800a029
 8009fb8:	0800a029 	.word	0x0800a029
 8009fbc:	08009ff3 	.word	0x08009ff3
 8009fc0:	0800a029 	.word	0x0800a029
 8009fc4:	0800a029 	.word	0x0800a029
 8009fc8:	0800a029 	.word	0x0800a029
 8009fcc:	0800a005 	.word	0x0800a005
 8009fd0:	0800a029 	.word	0x0800a029
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	0800a029 	.word	0x0800a029
 8009fdc:	0800a017 	.word	0x0800a017
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0202 	orr.w	r2, r2, #2
 8009fee:	60da      	str	r2, [r3, #12]
      break;
 8009ff0:	e01d      	b.n	800a02e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f042 0204 	orr.w	r2, r2, #4
 800a000:	60da      	str	r2, [r3, #12]
      break;
 800a002:	e014      	b.n	800a02e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f042 0208 	orr.w	r2, r2, #8
 800a012:	60da      	str	r2, [r3, #12]
      break;
 800a014:	e00b      	b.n	800a02e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68da      	ldr	r2, [r3, #12]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f042 0210 	orr.w	r2, r2, #16
 800a024:	60da      	str	r2, [r3, #12]
      break;
 800a026:	e002      	b.n	800a02e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
      break;
 800a02c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d13e      	bne.n	800a0b2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2201      	movs	r2, #1
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 ff57 	bl	800aef0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_TIM_IC_Start_IT+0x220>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_TIM_IC_Start_IT+0x1e2>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a054:	d013      	beq.n	800a07e <HAL_TIM_IC_Start_IT+0x1e2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <HAL_TIM_IC_Start_IT+0x224>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_TIM_IC_Start_IT+0x1e2>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a17      	ldr	r2, [pc, #92]	; (800a0c4 <HAL_TIM_IC_Start_IT+0x228>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_TIM_IC_Start_IT+0x1e2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_TIM_IC_Start_IT+0x22c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_TIM_IC_Start_IT+0x1e2>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <HAL_TIM_IC_Start_IT+0x230>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d111      	bne.n	800a0a2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d010      	beq.n	800a0b2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a0:	e007      	b.n	800a0b2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0201 	orr.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40014000 	.word	0x40014000

0800a0d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d122      	bne.n	800a12c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d11b      	bne.n	800a12c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f06f 0202 	mvn.w	r2, #2
 800a0fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7fa f8a6 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 800a118:	e005      	b.n	800a126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb05 	bl	800a72a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fb0c 	bl	800a73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b04      	cmp	r3, #4
 800a138:	d122      	bne.n	800a180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b04      	cmp	r3, #4
 800a146:	d11b      	bne.n	800a180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f06f 0204 	mvn.w	r2, #4
 800a150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2202      	movs	r2, #2
 800a156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7fa f87c 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 800a16c:	e005      	b.n	800a17a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fadb 	bl	800a72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fae2 	bl	800a73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d122      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d11b      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f06f 0208 	mvn.w	r2, #8
 800a1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fa f852 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 800a1c0:	e005      	b.n	800a1ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fab1 	bl	800a72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fab8 	bl	800a73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0310 	and.w	r3, r3, #16
 800a1de:	2b10      	cmp	r3, #16
 800a1e0:	d122      	bne.n	800a228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b10      	cmp	r3, #16
 800a1ee:	d11b      	bne.n	800a228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0210 	mvn.w	r2, #16
 800a1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7fa f828 	bl	8004264 <HAL_TIM_IC_CaptureCallback>
 800a214:	e005      	b.n	800a222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa87 	bl	800a72a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa8e 	bl	800a73e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b01      	cmp	r3, #1
 800a234:	d10e      	bne.n	800a254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d107      	bne.n	800a254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0201 	mvn.w	r2, #1
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7fa f85e 	bl	8004310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25e:	2b80      	cmp	r3, #128	; 0x80
 800a260:	d10e      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26c:	2b80      	cmp	r3, #128	; 0x80
 800a26e:	d107      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 ff28 	bl	800b0d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	2b40      	cmp	r3, #64	; 0x40
 800a28c:	d10e      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a298:	2b40      	cmp	r3, #64	; 0x40
 800a29a:	d107      	bne.n	800a2ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fa53 	bl	800a752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d10e      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d107      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f06f 0220 	mvn.w	r2, #32
 800a2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fef2 	bl	800b0bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d101      	bne.n	800a2fe <HAL_TIM_IC_ConfigChannel+0x1e>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e088      	b.n	800a410 <HAL_TIM_IC_ConfigChannel+0x130>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d11b      	bne.n	800a344 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6819      	ldr	r1, [r3, #0]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f000 fc30 	bl	800ab80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699a      	ldr	r2, [r3, #24]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 020c 	bic.w	r2, r2, #12
 800a32e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6999      	ldr	r1, [r3, #24]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	430a      	orrs	r2, r1
 800a340:	619a      	str	r2, [r3, #24]
 800a342:	e060      	b.n	800a406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b04      	cmp	r3, #4
 800a348:	d11c      	bne.n	800a384 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f000 fca8 	bl	800acae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a36c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6999      	ldr	r1, [r3, #24]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	021a      	lsls	r2, r3, #8
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	619a      	str	r2, [r3, #24]
 800a382:	e040      	b.n	800a406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b08      	cmp	r3, #8
 800a388:	d11b      	bne.n	800a3c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6819      	ldr	r1, [r3, #0]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f000 fcf5 	bl	800ad88 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	69da      	ldr	r2, [r3, #28]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 020c 	bic.w	r2, r2, #12
 800a3ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69d9      	ldr	r1, [r3, #28]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	61da      	str	r2, [r3, #28]
 800a3c0:	e021      	b.n	800a406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b0c      	cmp	r3, #12
 800a3c6:	d11c      	bne.n	800a402 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f000 fd12 	bl	800ae00 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69da      	ldr	r2, [r3, #28]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a3ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69d9      	ldr	r1, [r3, #28]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	021a      	lsls	r2, r3, #8
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	61da      	str	r2, [r3, #28]
 800a400:	e001      	b.n	800a406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d101      	bne.n	800a436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a432:	2302      	movs	r3, #2
 800a434:	e0ae      	b.n	800a594 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b0c      	cmp	r3, #12
 800a442:	f200 809f 	bhi.w	800a584 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a446:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a481 	.word	0x0800a481
 800a450:	0800a585 	.word	0x0800a585
 800a454:	0800a585 	.word	0x0800a585
 800a458:	0800a585 	.word	0x0800a585
 800a45c:	0800a4c1 	.word	0x0800a4c1
 800a460:	0800a585 	.word	0x0800a585
 800a464:	0800a585 	.word	0x0800a585
 800a468:	0800a585 	.word	0x0800a585
 800a46c:	0800a503 	.word	0x0800a503
 800a470:	0800a585 	.word	0x0800a585
 800a474:	0800a585 	.word	0x0800a585
 800a478:	0800a585 	.word	0x0800a585
 800a47c:	0800a543 	.word	0x0800a543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68b9      	ldr	r1, [r7, #8]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f9ee 	bl	800a868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	699a      	ldr	r2, [r3, #24]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0208 	orr.w	r2, r2, #8
 800a49a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699a      	ldr	r2, [r3, #24]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0204 	bic.w	r2, r2, #4
 800a4aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6999      	ldr	r1, [r3, #24]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	691a      	ldr	r2, [r3, #16]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	619a      	str	r2, [r3, #24]
      break;
 800a4be:	e064      	b.n	800a58a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fa34 	bl	800a934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	699a      	ldr	r2, [r3, #24]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699a      	ldr	r2, [r3, #24]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6999      	ldr	r1, [r3, #24]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	021a      	lsls	r2, r3, #8
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	619a      	str	r2, [r3, #24]
      break;
 800a500:	e043      	b.n	800a58a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fa7f 	bl	800aa0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69da      	ldr	r2, [r3, #28]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f042 0208 	orr.w	r2, r2, #8
 800a51c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69da      	ldr	r2, [r3, #28]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0204 	bic.w	r2, r2, #4
 800a52c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69d9      	ldr	r1, [r3, #28]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	61da      	str	r2, [r3, #28]
      break;
 800a540:	e023      	b.n	800a58a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 fac9 	bl	800aae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a55c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	69da      	ldr	r2, [r3, #28]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a56c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69d9      	ldr	r1, [r3, #28]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	021a      	lsls	r2, r3, #8
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	61da      	str	r2, [r3, #28]
      break;
 800a582:	e002      	b.n	800a58a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	75fb      	strb	r3, [r7, #23]
      break;
 800a588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a592:	7dfb      	ldrb	r3, [r7, #23]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_TIM_ConfigClockSource+0x1c>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e0b4      	b.n	800a722 <HAL_TIM_ConfigClockSource+0x186>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f0:	d03e      	beq.n	800a670 <HAL_TIM_ConfigClockSource+0xd4>
 800a5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f6:	f200 8087 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a5fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5fe:	f000 8086 	beq.w	800a70e <HAL_TIM_ConfigClockSource+0x172>
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d87f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a608:	2b70      	cmp	r3, #112	; 0x70
 800a60a:	d01a      	beq.n	800a642 <HAL_TIM_ConfigClockSource+0xa6>
 800a60c:	2b70      	cmp	r3, #112	; 0x70
 800a60e:	d87b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a610:	2b60      	cmp	r3, #96	; 0x60
 800a612:	d050      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0x11a>
 800a614:	2b60      	cmp	r3, #96	; 0x60
 800a616:	d877      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a618:	2b50      	cmp	r3, #80	; 0x50
 800a61a:	d03c      	beq.n	800a696 <HAL_TIM_ConfigClockSource+0xfa>
 800a61c:	2b50      	cmp	r3, #80	; 0x50
 800a61e:	d873      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d058      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x13a>
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d86f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a628:	2b30      	cmp	r3, #48	; 0x30
 800a62a:	d064      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a62c:	2b30      	cmp	r3, #48	; 0x30
 800a62e:	d86b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b20      	cmp	r3, #32
 800a632:	d060      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a634:	2b20      	cmp	r3, #32
 800a636:	d867      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d05c      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a63c:	2b10      	cmp	r3, #16
 800a63e:	d05a      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a640:	e062      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6899      	ldr	r1, [r3, #8]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f000 fc2d 	bl	800aeb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	609a      	str	r2, [r3, #8]
      break;
 800a66e:	e04f      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6899      	ldr	r1, [r3, #8]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f000 fc16 	bl	800aeb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a692:	609a      	str	r2, [r3, #8]
      break;
 800a694:	e03c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6859      	ldr	r1, [r3, #4]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f000 fad4 	bl	800ac50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2150      	movs	r1, #80	; 0x50
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fbe3 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a6b4:	e02c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f000 fb30 	bl	800ad28 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2160      	movs	r1, #96	; 0x60
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fbd3 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a6d4:	e01c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 fab4 	bl	800ac50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2140      	movs	r1, #64	; 0x40
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fbc3 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e00c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f000 fbba 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a706:	e003      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	e000      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a70e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
	...

0800a768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a34      	ldr	r2, [pc, #208]	; (800a84c <TIM_Base_SetConfig+0xe4>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00f      	beq.n	800a7a0 <TIM_Base_SetConfig+0x38>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a786:	d00b      	beq.n	800a7a0 <TIM_Base_SetConfig+0x38>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a31      	ldr	r2, [pc, #196]	; (800a850 <TIM_Base_SetConfig+0xe8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d007      	beq.n	800a7a0 <TIM_Base_SetConfig+0x38>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a30      	ldr	r2, [pc, #192]	; (800a854 <TIM_Base_SetConfig+0xec>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d003      	beq.n	800a7a0 <TIM_Base_SetConfig+0x38>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a2f      	ldr	r2, [pc, #188]	; (800a858 <TIM_Base_SetConfig+0xf0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d108      	bne.n	800a7b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a25      	ldr	r2, [pc, #148]	; (800a84c <TIM_Base_SetConfig+0xe4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01b      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c0:	d017      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a22      	ldr	r2, [pc, #136]	; (800a850 <TIM_Base_SetConfig+0xe8>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d013      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a21      	ldr	r2, [pc, #132]	; (800a854 <TIM_Base_SetConfig+0xec>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00f      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a20      	ldr	r2, [pc, #128]	; (800a858 <TIM_Base_SetConfig+0xf0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00b      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1f      	ldr	r2, [pc, #124]	; (800a85c <TIM_Base_SetConfig+0xf4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d007      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1e      	ldr	r2, [pc, #120]	; (800a860 <TIM_Base_SetConfig+0xf8>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d003      	beq.n	800a7f2 <TIM_Base_SetConfig+0x8a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a1d      	ldr	r2, [pc, #116]	; (800a864 <TIM_Base_SetConfig+0xfc>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d108      	bne.n	800a804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a08      	ldr	r2, [pc, #32]	; (800a84c <TIM_Base_SetConfig+0xe4>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d103      	bne.n	800a838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	691a      	ldr	r2, [r3, #16]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	615a      	str	r2, [r3, #20]
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40010000 	.word	0x40010000
 800a850:	40000400 	.word	0x40000400
 800a854:	40000800 	.word	0x40000800
 800a858:	40000c00 	.word	0x40000c00
 800a85c:	40014000 	.word	0x40014000
 800a860:	40014400 	.word	0x40014400
 800a864:	40014800 	.word	0x40014800

0800a868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 0303 	bic.w	r3, r3, #3
 800a89e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f023 0302 	bic.w	r3, r3, #2
 800a8b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a1c      	ldr	r2, [pc, #112]	; (800a930 <TIM_OC1_SetConfig+0xc8>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d10c      	bne.n	800a8de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f023 0308 	bic.w	r3, r3, #8
 800a8ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f023 0304 	bic.w	r3, r3, #4
 800a8dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a13      	ldr	r2, [pc, #76]	; (800a930 <TIM_OC1_SetConfig+0xc8>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d111      	bne.n	800a90a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	621a      	str	r2, [r3, #32]
}
 800a924:	bf00      	nop
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40010000 	.word	0x40010000

0800a934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0210 	bic.w	r2, r3, #16
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f023 0320 	bic.w	r3, r3, #32
 800a97e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <TIM_OC2_SetConfig+0xd4>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d10d      	bne.n	800a9b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <TIM_OC2_SetConfig+0xd4>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d113      	bne.n	800a9e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	699b      	ldr	r3, [r3, #24]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	621a      	str	r2, [r3, #32]
}
 800a9fa:	bf00      	nop
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40010000 	.word	0x40010000

0800aa0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <TIM_OC3_SetConfig+0xd0>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d10d      	bne.n	800aa86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	021b      	lsls	r3, r3, #8
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a14      	ldr	r2, [pc, #80]	; (800aadc <TIM_OC3_SetConfig+0xd0>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d113      	bne.n	800aab6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	011b      	lsls	r3, r3, #4
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	621a      	str	r2, [r3, #32]
}
 800aad0:	bf00      	nop
 800aad2:	371c      	adds	r7, #28
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	40010000 	.word	0x40010000

0800aae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	031b      	lsls	r3, r3, #12
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a10      	ldr	r2, [pc, #64]	; (800ab7c <TIM_OC4_SetConfig+0x9c>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d109      	bne.n	800ab54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	019b      	lsls	r3, r3, #6
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	40010000 	.word	0x40010000

0800ab80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
 800ab8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	f023 0201 	bic.w	r2, r3, #1
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4a24      	ldr	r2, [pc, #144]	; (800ac3c <TIM_TI1_SetConfig+0xbc>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d013      	beq.n	800abd6 <TIM_TI1_SetConfig+0x56>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb4:	d00f      	beq.n	800abd6 <TIM_TI1_SetConfig+0x56>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4a21      	ldr	r2, [pc, #132]	; (800ac40 <TIM_TI1_SetConfig+0xc0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00b      	beq.n	800abd6 <TIM_TI1_SetConfig+0x56>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a20      	ldr	r2, [pc, #128]	; (800ac44 <TIM_TI1_SetConfig+0xc4>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d007      	beq.n	800abd6 <TIM_TI1_SetConfig+0x56>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4a1f      	ldr	r2, [pc, #124]	; (800ac48 <TIM_TI1_SetConfig+0xc8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_TI1_SetConfig+0x56>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4a1e      	ldr	r2, [pc, #120]	; (800ac4c <TIM_TI1_SetConfig+0xcc>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d101      	bne.n	800abda <TIM_TI1_SetConfig+0x5a>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <TIM_TI1_SetConfig+0x5c>
 800abda:	2300      	movs	r3, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f023 0303 	bic.w	r3, r3, #3
 800abe6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4313      	orrs	r3, r2
 800abee:	617b      	str	r3, [r7, #20]
 800abf0:	e003      	b.n	800abfa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f043 0301 	orr.w	r3, r3, #1
 800abf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	011b      	lsls	r3, r3, #4
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f023 030a 	bic.w	r3, r3, #10
 800ac14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f003 030a 	and.w	r3, r3, #10
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	621a      	str	r2, [r3, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	371c      	adds	r7, #28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010000 	.word	0x40010000
 800ac40:	40000400 	.word	0x40000400
 800ac44:	40000800 	.word	0x40000800
 800ac48:	40000c00 	.word	0x40000c00
 800ac4c:	40014000 	.word	0x40014000

0800ac50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	f023 0201 	bic.w	r2, r3, #1
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f023 030a 	bic.w	r3, r3, #10
 800ac8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	621a      	str	r2, [r3, #32]
}
 800aca2:	bf00      	nop
 800aca4:	371c      	adds	r7, #28
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800acae:	b480      	push	{r7}
 800acb0:	b087      	sub	sp, #28
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	f023 0210 	bic.w	r2, r3, #16
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	031b      	lsls	r3, r3, #12
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	011b      	lsls	r3, r3, #4
 800ad06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	621a      	str	r2, [r3, #32]
}
 800ad1c:	bf00      	nop
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a1b      	ldr	r3, [r3, #32]
 800ad38:	f023 0210 	bic.w	r2, r3, #16
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	031b      	lsls	r3, r3, #12
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	621a      	str	r2, [r3, #32]
}
 800ad7c:	bf00      	nop
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4313      	orrs	r3, r2
 800adbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800add8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	621a      	str	r2, [r3, #32]
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	031b      	lsls	r3, r3, #12
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ae52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	031b      	lsls	r3, r3, #12
 800ae58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	621a      	str	r2, [r3, #32]
}
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b085      	sub	sp, #20
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	f043 0307 	orr.w	r3, r3, #7
 800ae9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	021a      	lsls	r2, r3, #8
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	431a      	orrs	r2, r3
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	609a      	str	r2, [r3, #8]
}
 800aee4:	bf00      	nop
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f003 031f 	and.w	r3, r3, #31
 800af02:	2201      	movs	r2, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1a      	ldr	r2, [r3, #32]
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	43db      	mvns	r3, r3
 800af12:	401a      	ands	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6a1a      	ldr	r2, [r3, #32]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f003 031f 	and.w	r3, r3, #31
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	fa01 f303 	lsl.w	r3, r1, r3
 800af28:	431a      	orrs	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
	...

0800af3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af50:	2302      	movs	r3, #2
 800af52:	e050      	b.n	800aff6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a1c      	ldr	r2, [pc, #112]	; (800b004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d018      	beq.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa0:	d013      	beq.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a18      	ldr	r2, [pc, #96]	; (800b008 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d00e      	beq.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a16      	ldr	r2, [pc, #88]	; (800b00c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d009      	beq.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a15      	ldr	r2, [pc, #84]	; (800b010 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d004      	beq.n	800afca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a13      	ldr	r2, [pc, #76]	; (800b014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d10c      	bne.n	800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40010000 	.word	0x40010000
 800b008:	40000400 	.word	0x40000400
 800b00c:	40000800 	.word	0x40000800
 800b010:	40000c00 	.word	0x40000c00
 800b014:	40014000 	.word	0x40014000

0800b018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b030:	2302      	movs	r3, #2
 800b032:	e03d      	b.n	800b0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4313      	orrs	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e03f      	b.n	800b176 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7fa fbe2 	bl	80058d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2224      	movs	r2, #36	; 0x24
 800b114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fdd5 	bl	800bcd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b13c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695a      	ldr	r2, [r3, #20]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b14c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b15c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2220      	movs	r2, #32
 800b170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08a      	sub	sp, #40	; 0x28
 800b182:	af02      	add	r7, sp, #8
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d17c      	bne.n	800b298 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <HAL_UART_Transmit+0x2c>
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e075      	b.n	800b29a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d101      	bne.n	800b1bc <HAL_UART_Transmit+0x3e>
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e06e      	b.n	800b29a <HAL_UART_Transmit+0x11c>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2221      	movs	r2, #33	; 0x21
 800b1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1d2:	f7fd f963 	bl	800849c <HAL_GetTick>
 800b1d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	88fa      	ldrh	r2, [r7, #6]
 800b1dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ec:	d108      	bne.n	800b200 <HAL_UART_Transmit+0x82>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d104      	bne.n	800b200 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	e003      	b.n	800b208 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b210:	e02a      	b.n	800b268 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2200      	movs	r2, #0
 800b21a:	2180      	movs	r1, #128	; 0x80
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 fb15 	bl	800b84c <UART_WaitOnFlagUntilTimeout>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e036      	b.n	800b29a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10b      	bne.n	800b24a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	3302      	adds	r3, #2
 800b246:	61bb      	str	r3, [r7, #24]
 800b248:	e007      	b.n	800b25a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	781a      	ldrb	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	3301      	adds	r3, #1
 800b258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b25e:	b29b      	uxth	r3, r3
 800b260:	3b01      	subs	r3, #1
 800b262:	b29a      	uxth	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1cf      	bne.n	800b212 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2200      	movs	r2, #0
 800b27a:	2140      	movs	r1, #64	; 0x40
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f000 fae5 	bl	800b84c <UART_WaitOnFlagUntilTimeout>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b288:	2303      	movs	r3, #3
 800b28a:	e006      	b.n	800b29a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2220      	movs	r2, #32
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e000      	b.n	800b29a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d11d      	bne.n	800b2f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_UART_Receive_IT+0x26>
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e016      	b.n	800b2fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d101      	bne.n	800b2da <HAL_UART_Receive_IT+0x38>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e00f      	b.n	800b2fa <HAL_UART_Receive_IT+0x58>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b2e8:	88fb      	ldrh	r3, [r7, #6]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	68b9      	ldr	r1, [r7, #8]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 fb1a 	bl	800b928 <UART_Start_Receive_IT>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	e000      	b.n	800b2fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b2f8:	2302      	movs	r3, #2
  }
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
	...

0800b304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b0ba      	sub	sp, #232	; 0xe8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10f      	bne.n	800b36a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34e:	f003 0320 	and.w	r3, r3, #32
 800b352:	2b00      	cmp	r3, #0
 800b354:	d009      	beq.n	800b36a <HAL_UART_IRQHandler+0x66>
 800b356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35a:	f003 0320 	and.w	r3, r3, #32
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fbfd 	bl	800bb62 <UART_Receive_IT>
      return;
 800b368:	e256      	b.n	800b818 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b36a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 80de 	beq.w	800b530 <HAL_UART_IRQHandler+0x22c>
 800b374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d106      	bne.n	800b38e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 80d1 	beq.w	800b530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <HAL_UART_IRQHandler+0xae>
 800b39a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b39e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3aa:	f043 0201 	orr.w	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00b      	beq.n	800b3d6 <HAL_UART_IRQHandler+0xd2>
 800b3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d005      	beq.n	800b3d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ce:	f043 0202 	orr.w	r2, r3, #2
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3da:	f003 0302 	and.w	r3, r3, #2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <HAL_UART_IRQHandler+0xf6>
 800b3e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	f043 0204 	orr.w	r2, r3, #4
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3fe:	f003 0308 	and.w	r3, r3, #8
 800b402:	2b00      	cmp	r3, #0
 800b404:	d011      	beq.n	800b42a <HAL_UART_IRQHandler+0x126>
 800b406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d105      	bne.n	800b41e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b422:	f043 0208 	orr.w	r2, r3, #8
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 81ed 	beq.w	800b80e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <HAL_UART_IRQHandler+0x14e>
 800b440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b444:	f003 0320 	and.w	r3, r3, #32
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fb88 	bl	800bb62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	bf0c      	ite	eq
 800b460:	2301      	moveq	r3, #1
 800b462:	2300      	movne	r3, #0
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46e:	f003 0308 	and.w	r3, r3, #8
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <HAL_UART_IRQHandler+0x17a>
 800b476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d04f      	beq.n	800b51e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa90 	bl	800b9a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b40      	cmp	r3, #64	; 0x40
 800b490:	d141      	bne.n	800b516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3314      	adds	r3, #20
 800b498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4a0:	e853 3f00 	ldrex	r3, [r3]
 800b4a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b4d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1d9      	bne.n	800b492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d013      	beq.n	800b50e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	4a7d      	ldr	r2, [pc, #500]	; (800b6e0 <HAL_UART_IRQHandler+0x3dc>)
 800b4ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd f9b5 	bl	8008862 <HAL_DMA_Abort_IT>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d016      	beq.n	800b52c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b50c:	e00e      	b.n	800b52c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f986 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b514:	e00a      	b.n	800b52c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f982 	bl	800b820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b51c:	e006      	b.n	800b52c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f97e 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b52a:	e170      	b.n	800b80e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b52c:	bf00      	nop
    return;
 800b52e:	e16e      	b.n	800b80e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b534:	2b01      	cmp	r3, #1
 800b536:	f040 814a 	bne.w	800b7ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53e:	f003 0310 	and.w	r3, r3, #16
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8143 	beq.w	800b7ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 813c 	beq.w	800b7ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60bb      	str	r3, [r7, #8]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	60bb      	str	r3, [r7, #8]
 800b56a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	f040 80b4 	bne.w	800b6e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8140 	beq.w	800b812 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b59a:	429a      	cmp	r2, r3
 800b59c:	f080 8139 	bcs.w	800b812 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b2:	f000 8088 	beq.w	800b6c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b5cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	330c      	adds	r3, #12
 800b5de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b5e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b5ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b5fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1d9      	bne.n	800b5b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3314      	adds	r3, #20
 800b608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b614:	f023 0301 	bic.w	r3, r3, #1
 800b618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3314      	adds	r3, #20
 800b622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b62a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b62e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1e1      	bne.n	800b602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3314      	adds	r3, #20
 800b644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3314      	adds	r3, #20
 800b65e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b662:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e3      	bne.n	800b63e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	330c      	adds	r3, #12
 800b68a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b696:	f023 0310 	bic.w	r3, r3, #16
 800b69a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	330c      	adds	r3, #12
 800b6a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b6a8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e3      	bne.n	800b684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fd f85e 	bl	8008782 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f8ac 	bl	800b834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6dc:	e099      	b.n	800b812 <HAL_UART_IRQHandler+0x50e>
 800b6de:	bf00      	nop
 800b6e0:	0800ba6b 	.word	0x0800ba6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 808b 	beq.w	800b816 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 8086 	beq.w	800b816 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	330c      	adds	r3, #12
 800b710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	330c      	adds	r3, #12
 800b72a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b72e:	647a      	str	r2, [r7, #68]	; 0x44
 800b730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e3      	bne.n	800b70a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3314      	adds	r3, #20
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	623b      	str	r3, [r7, #32]
   return(result);
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	f023 0301 	bic.w	r3, r3, #1
 800b758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3314      	adds	r3, #20
 800b762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b766:	633a      	str	r2, [r7, #48]	; 0x30
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e3      	bne.n	800b742 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	330c      	adds	r3, #12
 800b78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	60fb      	str	r3, [r7, #12]
   return(result);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0310 	bic.w	r3, r3, #16
 800b79e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	330c      	adds	r3, #12
 800b7a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b7ac:	61fa      	str	r2, [r7, #28]
 800b7ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	69b9      	ldr	r1, [r7, #24]
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e3      	bne.n	800b788 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f834 	bl	800b834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b7cc:	e023      	b.n	800b816 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <HAL_UART_IRQHandler+0x4ea>
 800b7da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f953 	bl	800ba92 <UART_Transmit_IT>
    return;
 800b7ec:	e014      	b.n	800b818 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00e      	beq.n	800b818 <HAL_UART_IRQHandler+0x514>
 800b7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d008      	beq.n	800b818 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f993 	bl	800bb32 <UART_EndTransmit_IT>
    return;
 800b80c:	e004      	b.n	800b818 <HAL_UART_IRQHandler+0x514>
    return;
 800b80e:	bf00      	nop
 800b810:	e002      	b.n	800b818 <HAL_UART_IRQHandler+0x514>
      return;
 800b812:	bf00      	nop
 800b814:	e000      	b.n	800b818 <HAL_UART_IRQHandler+0x514>
      return;
 800b816:	bf00      	nop
  }
}
 800b818:	37e8      	adds	r7, #232	; 0xe8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop

0800b820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b090      	sub	sp, #64	; 0x40
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	603b      	str	r3, [r7, #0]
 800b858:	4613      	mov	r3, r2
 800b85a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b85c:	e050      	b.n	800b900 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b864:	d04c      	beq.n	800b900 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d007      	beq.n	800b87c <UART_WaitOnFlagUntilTimeout+0x30>
 800b86c:	f7fc fe16 	bl	800849c <HAL_GetTick>
 800b870:	4602      	mov	r2, r0
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b878:	429a      	cmp	r2, r3
 800b87a:	d241      	bcs.n	800b900 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	330c      	adds	r3, #12
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	e853 3f00 	ldrex	r3, [r3]
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	330c      	adds	r3, #12
 800b89a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b89c:	637a      	str	r2, [r7, #52]	; 0x34
 800b89e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e5      	bne.n	800b87c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3314      	adds	r3, #20
 800b8b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3314      	adds	r3, #20
 800b8ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8d0:	623a      	str	r2, [r7, #32]
 800b8d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	69f9      	ldr	r1, [r7, #28]
 800b8d6:	6a3a      	ldr	r2, [r7, #32]
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e5      	bne.n	800b8b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e00f      	b.n	800b920 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	4013      	ands	r3, r2
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	bf0c      	ite	eq
 800b910:	2301      	moveq	r3, #1
 800b912:	2300      	movne	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d09f      	beq.n	800b85e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3740      	adds	r7, #64	; 0x40
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	88fa      	ldrh	r2, [r7, #6]
 800b940:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	88fa      	ldrh	r2, [r7, #6]
 800b946:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2222      	movs	r2, #34	; 0x22
 800b952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b974:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	695a      	ldr	r2, [r3, #20]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f042 0201 	orr.w	r2, r2, #1
 800b984:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f042 0220 	orr.w	r2, r2, #32
 800b994:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b095      	sub	sp, #84	; 0x54
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9cc:	643a      	str	r2, [r7, #64]	; 0x40
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e5      	bne.n	800b9ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3314      	adds	r3, #20
 800b9e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	f023 0301 	bic.w	r3, r3, #1
 800b9f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3314      	adds	r3, #20
 800b9fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e5      	bne.n	800b9e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d119      	bne.n	800ba50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	330c      	adds	r3, #12
 800ba22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f023 0310 	bic.w	r3, r3, #16
 800ba32:	647b      	str	r3, [r7, #68]	; 0x44
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	330c      	adds	r3, #12
 800ba3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba3c:	61ba      	str	r2, [r7, #24]
 800ba3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6979      	ldr	r1, [r7, #20]
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	613b      	str	r3, [r7, #16]
   return(result);
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e5      	bne.n	800ba1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba5e:	bf00      	nop
 800ba60:	3754      	adds	r7, #84	; 0x54
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7ff fecb 	bl	800b820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b085      	sub	sp, #20
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b21      	cmp	r3, #33	; 0x21
 800baa4:	d13e      	bne.n	800bb24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baae:	d114      	bne.n	800bada <UART_Transmit_IT+0x48>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d110      	bne.n	800bada <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bacc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	1c9a      	adds	r2, r3, #2
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	621a      	str	r2, [r3, #32]
 800bad8:	e008      	b.n	800baec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	1c59      	adds	r1, r3, #1
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	6211      	str	r1, [r2, #32]
 800bae4:	781a      	ldrb	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	3b01      	subs	r3, #1
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	4619      	mov	r1, r3
 800bafa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10f      	bne.n	800bb20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	e000      	b.n	800bb26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb24:	2302      	movs	r3, #2
  }
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68da      	ldr	r2, [r3, #12]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7f8 fb7a 	bl	800424c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b08c      	sub	sp, #48	; 0x30
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b22      	cmp	r3, #34	; 0x22
 800bb74:	f040 80ab 	bne.w	800bcce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb80:	d117      	bne.n	800bbb2 <UART_Receive_IT+0x50>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d113      	bne.n	800bbb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbaa:	1c9a      	adds	r2, r3, #2
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	629a      	str	r2, [r3, #40]	; 0x28
 800bbb0:	e026      	b.n	800bc00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbc4:	d007      	beq.n	800bbd6 <UART_Receive_IT+0x74>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <UART_Receive_IT+0x82>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e008      	b.n	800bbf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d15a      	bne.n	800bcca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68da      	ldr	r2, [r3, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f022 0220 	bic.w	r2, r2, #32
 800bc22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695a      	ldr	r2, [r3, #20]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0201 	bic.w	r2, r2, #1
 800bc42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d135      	bne.n	800bcc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	330c      	adds	r3, #12
 800bc60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	e853 3f00 	ldrex	r3, [r3]
 800bc68:	613b      	str	r3, [r7, #16]
   return(result);
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f023 0310 	bic.w	r3, r3, #16
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	330c      	adds	r3, #12
 800bc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7a:	623a      	str	r2, [r7, #32]
 800bc7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	69f9      	ldr	r1, [r7, #28]
 800bc80:	6a3a      	ldr	r2, [r7, #32]
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e5      	bne.n	800bc5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0310 	and.w	r3, r3, #16
 800bc98:	2b10      	cmp	r3, #16
 800bc9a:	d10a      	bne.n	800bcb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fdbb 	bl	800b834 <HAL_UARTEx_RxEventCallback>
 800bcbe:	e002      	b.n	800bcc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7f8 fa4f 	bl	8004164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e002      	b.n	800bcd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e000      	b.n	800bcd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bcce:	2302      	movs	r3, #2
  }
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3730      	adds	r7, #48	; 0x30
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcdc:	b0c0      	sub	sp, #256	; 0x100
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf4:	68d9      	ldr	r1, [r3, #12]
 800bcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	ea40 0301 	orr.w	r3, r0, r1
 800bd00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd06:	689a      	ldr	r2, [r3, #8]
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	431a      	orrs	r2, r3
 800bd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd30:	f021 010c 	bic.w	r1, r1, #12
 800bd34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd52:	6999      	ldr	r1, [r3, #24]
 800bd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	ea40 0301 	orr.w	r3, r0, r1
 800bd5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	4b8f      	ldr	r3, [pc, #572]	; (800bfa4 <UART_SetConfig+0x2cc>)
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d005      	beq.n	800bd78 <UART_SetConfig+0xa0>
 800bd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b8d      	ldr	r3, [pc, #564]	; (800bfa8 <UART_SetConfig+0x2d0>)
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d104      	bne.n	800bd82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd78:	f7fd fc02 	bl	8009580 <HAL_RCC_GetPCLK2Freq>
 800bd7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd80:	e003      	b.n	800bd8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd82:	f7fd fbe9 	bl	8009558 <HAL_RCC_GetPCLK1Freq>
 800bd86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd94:	f040 810c 	bne.w	800bfb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bda2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bda6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bdaa:	4622      	mov	r2, r4
 800bdac:	462b      	mov	r3, r5
 800bdae:	1891      	adds	r1, r2, r2
 800bdb0:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdb2:	415b      	adcs	r3, r3
 800bdb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdba:	4621      	mov	r1, r4
 800bdbc:	eb12 0801 	adds.w	r8, r2, r1
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	eb43 0901 	adc.w	r9, r3, r1
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdda:	4690      	mov	r8, r2
 800bddc:	4699      	mov	r9, r3
 800bdde:	4623      	mov	r3, r4
 800bde0:	eb18 0303 	adds.w	r3, r8, r3
 800bde4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bde8:	462b      	mov	r3, r5
 800bdea:	eb49 0303 	adc.w	r3, r9, r3
 800bdee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800be02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be06:	460b      	mov	r3, r1
 800be08:	18db      	adds	r3, r3, r3
 800be0a:	653b      	str	r3, [r7, #80]	; 0x50
 800be0c:	4613      	mov	r3, r2
 800be0e:	eb42 0303 	adc.w	r3, r2, r3
 800be12:	657b      	str	r3, [r7, #84]	; 0x54
 800be14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be1c:	f7f4 fec4 	bl	8000ba8 <__aeabi_uldivmod>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4b61      	ldr	r3, [pc, #388]	; (800bfac <UART_SetConfig+0x2d4>)
 800be26:	fba3 2302 	umull	r2, r3, r3, r2
 800be2a:	095b      	lsrs	r3, r3, #5
 800be2c:	011c      	lsls	r4, r3, #4
 800be2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be32:	2200      	movs	r2, #0
 800be34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be40:	4642      	mov	r2, r8
 800be42:	464b      	mov	r3, r9
 800be44:	1891      	adds	r1, r2, r2
 800be46:	64b9      	str	r1, [r7, #72]	; 0x48
 800be48:	415b      	adcs	r3, r3
 800be4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be50:	4641      	mov	r1, r8
 800be52:	eb12 0a01 	adds.w	sl, r2, r1
 800be56:	4649      	mov	r1, r9
 800be58:	eb43 0b01 	adc.w	fp, r3, r1
 800be5c:	f04f 0200 	mov.w	r2, #0
 800be60:	f04f 0300 	mov.w	r3, #0
 800be64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be70:	4692      	mov	sl, r2
 800be72:	469b      	mov	fp, r3
 800be74:	4643      	mov	r3, r8
 800be76:	eb1a 0303 	adds.w	r3, sl, r3
 800be7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be7e:	464b      	mov	r3, r9
 800be80:	eb4b 0303 	adc.w	r3, fp, r3
 800be84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be9c:	460b      	mov	r3, r1
 800be9e:	18db      	adds	r3, r3, r3
 800bea0:	643b      	str	r3, [r7, #64]	; 0x40
 800bea2:	4613      	mov	r3, r2
 800bea4:	eb42 0303 	adc.w	r3, r2, r3
 800bea8:	647b      	str	r3, [r7, #68]	; 0x44
 800beaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800beb2:	f7f4 fe79 	bl	8000ba8 <__aeabi_uldivmod>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	4b3b      	ldr	r3, [pc, #236]	; (800bfac <UART_SetConfig+0x2d4>)
 800bebe:	fba3 2301 	umull	r2, r3, r3, r1
 800bec2:	095b      	lsrs	r3, r3, #5
 800bec4:	2264      	movs	r2, #100	; 0x64
 800bec6:	fb02 f303 	mul.w	r3, r2, r3
 800beca:	1acb      	subs	r3, r1, r3
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bed2:	4b36      	ldr	r3, [pc, #216]	; (800bfac <UART_SetConfig+0x2d4>)
 800bed4:	fba3 2302 	umull	r2, r3, r3, r2
 800bed8:	095b      	lsrs	r3, r3, #5
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bee0:	441c      	add	r4, r3
 800bee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800beec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bef0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bef4:	4642      	mov	r2, r8
 800bef6:	464b      	mov	r3, r9
 800bef8:	1891      	adds	r1, r2, r2
 800befa:	63b9      	str	r1, [r7, #56]	; 0x38
 800befc:	415b      	adcs	r3, r3
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf04:	4641      	mov	r1, r8
 800bf06:	1851      	adds	r1, r2, r1
 800bf08:	6339      	str	r1, [r7, #48]	; 0x30
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	414b      	adcs	r3, r1
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf10:	f04f 0200 	mov.w	r2, #0
 800bf14:	f04f 0300 	mov.w	r3, #0
 800bf18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf1c:	4659      	mov	r1, fp
 800bf1e:	00cb      	lsls	r3, r1, #3
 800bf20:	4651      	mov	r1, sl
 800bf22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf26:	4651      	mov	r1, sl
 800bf28:	00ca      	lsls	r2, r1, #3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4642      	mov	r2, r8
 800bf32:	189b      	adds	r3, r3, r2
 800bf34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf38:	464b      	mov	r3, r9
 800bf3a:	460a      	mov	r2, r1
 800bf3c:	eb42 0303 	adc.w	r3, r2, r3
 800bf40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf58:	460b      	mov	r3, r1
 800bf5a:	18db      	adds	r3, r3, r3
 800bf5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf5e:	4613      	mov	r3, r2
 800bf60:	eb42 0303 	adc.w	r3, r2, r3
 800bf64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf6e:	f7f4 fe1b 	bl	8000ba8 <__aeabi_uldivmod>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <UART_SetConfig+0x2d4>)
 800bf78:	fba3 1302 	umull	r1, r3, r3, r2
 800bf7c:	095b      	lsrs	r3, r3, #5
 800bf7e:	2164      	movs	r1, #100	; 0x64
 800bf80:	fb01 f303 	mul.w	r3, r1, r3
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	3332      	adds	r3, #50	; 0x32
 800bf8a:	4a08      	ldr	r2, [pc, #32]	; (800bfac <UART_SetConfig+0x2d4>)
 800bf8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf90:	095b      	lsrs	r3, r3, #5
 800bf92:	f003 0207 	and.w	r2, r3, #7
 800bf96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4422      	add	r2, r4
 800bf9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bfa0:	e105      	b.n	800c1ae <UART_SetConfig+0x4d6>
 800bfa2:	bf00      	nop
 800bfa4:	40011000 	.word	0x40011000
 800bfa8:	40011400 	.word	0x40011400
 800bfac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bfbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bfc2:	4642      	mov	r2, r8
 800bfc4:	464b      	mov	r3, r9
 800bfc6:	1891      	adds	r1, r2, r2
 800bfc8:	6239      	str	r1, [r7, #32]
 800bfca:	415b      	adcs	r3, r3
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfd2:	4641      	mov	r1, r8
 800bfd4:	1854      	adds	r4, r2, r1
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	eb43 0501 	adc.w	r5, r3, r1
 800bfdc:	f04f 0200 	mov.w	r2, #0
 800bfe0:	f04f 0300 	mov.w	r3, #0
 800bfe4:	00eb      	lsls	r3, r5, #3
 800bfe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfea:	00e2      	lsls	r2, r4, #3
 800bfec:	4614      	mov	r4, r2
 800bfee:	461d      	mov	r5, r3
 800bff0:	4643      	mov	r3, r8
 800bff2:	18e3      	adds	r3, r4, r3
 800bff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bff8:	464b      	mov	r3, r9
 800bffa:	eb45 0303 	adc.w	r3, r5, r3
 800bffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c00e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c012:	f04f 0200 	mov.w	r2, #0
 800c016:	f04f 0300 	mov.w	r3, #0
 800c01a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c01e:	4629      	mov	r1, r5
 800c020:	008b      	lsls	r3, r1, #2
 800c022:	4621      	mov	r1, r4
 800c024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c028:	4621      	mov	r1, r4
 800c02a:	008a      	lsls	r2, r1, #2
 800c02c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c030:	f7f4 fdba 	bl	8000ba8 <__aeabi_uldivmod>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4b60      	ldr	r3, [pc, #384]	; (800c1bc <UART_SetConfig+0x4e4>)
 800c03a:	fba3 2302 	umull	r2, r3, r3, r2
 800c03e:	095b      	lsrs	r3, r3, #5
 800c040:	011c      	lsls	r4, r3, #4
 800c042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c046:	2200      	movs	r2, #0
 800c048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c04c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c054:	4642      	mov	r2, r8
 800c056:	464b      	mov	r3, r9
 800c058:	1891      	adds	r1, r2, r2
 800c05a:	61b9      	str	r1, [r7, #24]
 800c05c:	415b      	adcs	r3, r3
 800c05e:	61fb      	str	r3, [r7, #28]
 800c060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c064:	4641      	mov	r1, r8
 800c066:	1851      	adds	r1, r2, r1
 800c068:	6139      	str	r1, [r7, #16]
 800c06a:	4649      	mov	r1, r9
 800c06c:	414b      	adcs	r3, r1
 800c06e:	617b      	str	r3, [r7, #20]
 800c070:	f04f 0200 	mov.w	r2, #0
 800c074:	f04f 0300 	mov.w	r3, #0
 800c078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c07c:	4659      	mov	r1, fp
 800c07e:	00cb      	lsls	r3, r1, #3
 800c080:	4651      	mov	r1, sl
 800c082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c086:	4651      	mov	r1, sl
 800c088:	00ca      	lsls	r2, r1, #3
 800c08a:	4610      	mov	r0, r2
 800c08c:	4619      	mov	r1, r3
 800c08e:	4603      	mov	r3, r0
 800c090:	4642      	mov	r2, r8
 800c092:	189b      	adds	r3, r3, r2
 800c094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c098:	464b      	mov	r3, r9
 800c09a:	460a      	mov	r2, r1
 800c09c:	eb42 0303 	adc.w	r3, r2, r3
 800c0a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0bc:	4649      	mov	r1, r9
 800c0be:	008b      	lsls	r3, r1, #2
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	008a      	lsls	r2, r1, #2
 800c0ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0ce:	f7f4 fd6b 	bl	8000ba8 <__aeabi_uldivmod>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <UART_SetConfig+0x4e4>)
 800c0d8:	fba3 1302 	umull	r1, r3, r3, r2
 800c0dc:	095b      	lsrs	r3, r3, #5
 800c0de:	2164      	movs	r1, #100	; 0x64
 800c0e0:	fb01 f303 	mul.w	r3, r1, r3
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	011b      	lsls	r3, r3, #4
 800c0e8:	3332      	adds	r3, #50	; 0x32
 800c0ea:	4a34      	ldr	r2, [pc, #208]	; (800c1bc <UART_SetConfig+0x4e4>)
 800c0ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f0:	095b      	lsrs	r3, r3, #5
 800c0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0f6:	441c      	add	r4, r3
 800c0f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c100:	677a      	str	r2, [r7, #116]	; 0x74
 800c102:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c106:	4642      	mov	r2, r8
 800c108:	464b      	mov	r3, r9
 800c10a:	1891      	adds	r1, r2, r2
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	415b      	adcs	r3, r3
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c116:	4641      	mov	r1, r8
 800c118:	1851      	adds	r1, r2, r1
 800c11a:	6039      	str	r1, [r7, #0]
 800c11c:	4649      	mov	r1, r9
 800c11e:	414b      	adcs	r3, r1
 800c120:	607b      	str	r3, [r7, #4]
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c12e:	4659      	mov	r1, fp
 800c130:	00cb      	lsls	r3, r1, #3
 800c132:	4651      	mov	r1, sl
 800c134:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c138:	4651      	mov	r1, sl
 800c13a:	00ca      	lsls	r2, r1, #3
 800c13c:	4610      	mov	r0, r2
 800c13e:	4619      	mov	r1, r3
 800c140:	4603      	mov	r3, r0
 800c142:	4642      	mov	r2, r8
 800c144:	189b      	adds	r3, r3, r2
 800c146:	66bb      	str	r3, [r7, #104]	; 0x68
 800c148:	464b      	mov	r3, r9
 800c14a:	460a      	mov	r2, r1
 800c14c:	eb42 0303 	adc.w	r3, r2, r3
 800c150:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	663b      	str	r3, [r7, #96]	; 0x60
 800c15c:	667a      	str	r2, [r7, #100]	; 0x64
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	f04f 0300 	mov.w	r3, #0
 800c166:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c16a:	4649      	mov	r1, r9
 800c16c:	008b      	lsls	r3, r1, #2
 800c16e:	4641      	mov	r1, r8
 800c170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c174:	4641      	mov	r1, r8
 800c176:	008a      	lsls	r2, r1, #2
 800c178:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c17c:	f7f4 fd14 	bl	8000ba8 <__aeabi_uldivmod>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4b0d      	ldr	r3, [pc, #52]	; (800c1bc <UART_SetConfig+0x4e4>)
 800c186:	fba3 1302 	umull	r1, r3, r3, r2
 800c18a:	095b      	lsrs	r3, r3, #5
 800c18c:	2164      	movs	r1, #100	; 0x64
 800c18e:	fb01 f303 	mul.w	r3, r1, r3
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	3332      	adds	r3, #50	; 0x32
 800c198:	4a08      	ldr	r2, [pc, #32]	; (800c1bc <UART_SetConfig+0x4e4>)
 800c19a:	fba2 2303 	umull	r2, r3, r2, r3
 800c19e:	095b      	lsrs	r3, r3, #5
 800c1a0:	f003 020f 	and.w	r2, r3, #15
 800c1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4422      	add	r2, r4
 800c1ac:	609a      	str	r2, [r3, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1ba:	bf00      	nop
 800c1bc:	51eb851f 	.word	0x51eb851f

0800c1c0 <__errno>:
 800c1c0:	4b01      	ldr	r3, [pc, #4]	; (800c1c8 <__errno+0x8>)
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	2000006c 	.word	0x2000006c

0800c1cc <__libc_init_array>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	4d0d      	ldr	r5, [pc, #52]	; (800c204 <__libc_init_array+0x38>)
 800c1d0:	4c0d      	ldr	r4, [pc, #52]	; (800c208 <__libc_init_array+0x3c>)
 800c1d2:	1b64      	subs	r4, r4, r5
 800c1d4:	10a4      	asrs	r4, r4, #2
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	42a6      	cmp	r6, r4
 800c1da:	d109      	bne.n	800c1f0 <__libc_init_array+0x24>
 800c1dc:	4d0b      	ldr	r5, [pc, #44]	; (800c20c <__libc_init_array+0x40>)
 800c1de:	4c0c      	ldr	r4, [pc, #48]	; (800c210 <__libc_init_array+0x44>)
 800c1e0:	f004 f86c 	bl	80102bc <_init>
 800c1e4:	1b64      	subs	r4, r4, r5
 800c1e6:	10a4      	asrs	r4, r4, #2
 800c1e8:	2600      	movs	r6, #0
 800c1ea:	42a6      	cmp	r6, r4
 800c1ec:	d105      	bne.n	800c1fa <__libc_init_array+0x2e>
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}
 800c1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1f4:	4798      	blx	r3
 800c1f6:	3601      	adds	r6, #1
 800c1f8:	e7ee      	b.n	800c1d8 <__libc_init_array+0xc>
 800c1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1fe:	4798      	blx	r3
 800c200:	3601      	adds	r6, #1
 800c202:	e7f2      	b.n	800c1ea <__libc_init_array+0x1e>
 800c204:	080107a8 	.word	0x080107a8
 800c208:	080107a8 	.word	0x080107a8
 800c20c:	080107a8 	.word	0x080107a8
 800c210:	080107ac 	.word	0x080107ac

0800c214 <memset>:
 800c214:	4402      	add	r2, r0
 800c216:	4603      	mov	r3, r0
 800c218:	4293      	cmp	r3, r2
 800c21a:	d100      	bne.n	800c21e <memset+0xa>
 800c21c:	4770      	bx	lr
 800c21e:	f803 1b01 	strb.w	r1, [r3], #1
 800c222:	e7f9      	b.n	800c218 <memset+0x4>

0800c224 <sulp>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	460d      	mov	r5, r1
 800c22a:	ec45 4b10 	vmov	d0, r4, r5
 800c22e:	4616      	mov	r6, r2
 800c230:	f001 fd2a 	bl	800dc88 <__ulp>
 800c234:	ec51 0b10 	vmov	r0, r1, d0
 800c238:	b17e      	cbz	r6, 800c25a <sulp+0x36>
 800c23a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c23e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd09      	ble.n	800c25a <sulp+0x36>
 800c246:	051b      	lsls	r3, r3, #20
 800c248:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c24c:	2400      	movs	r4, #0
 800c24e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c252:	4622      	mov	r2, r4
 800c254:	462b      	mov	r3, r5
 800c256:	f7f4 f9d7 	bl	8000608 <__aeabi_dmul>
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	0000      	movs	r0, r0
	...

0800c260 <_strtod_l>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	ed2d 8b02 	vpush	{d8}
 800c268:	b09d      	sub	sp, #116	; 0x74
 800c26a:	461f      	mov	r7, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	9318      	str	r3, [sp, #96]	; 0x60
 800c270:	4ba2      	ldr	r3, [pc, #648]	; (800c4fc <_strtod_l+0x29c>)
 800c272:	9213      	str	r2, [sp, #76]	; 0x4c
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	4604      	mov	r4, r0
 800c27a:	4618      	mov	r0, r3
 800c27c:	4688      	mov	r8, r1
 800c27e:	f7f3 ffaf 	bl	80001e0 <strlen>
 800c282:	f04f 0a00 	mov.w	sl, #0
 800c286:	4605      	mov	r5, r0
 800c288:	f04f 0b00 	mov.w	fp, #0
 800c28c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	2a2b      	cmp	r2, #43	; 0x2b
 800c296:	d04e      	beq.n	800c336 <_strtod_l+0xd6>
 800c298:	d83b      	bhi.n	800c312 <_strtod_l+0xb2>
 800c29a:	2a0d      	cmp	r2, #13
 800c29c:	d834      	bhi.n	800c308 <_strtod_l+0xa8>
 800c29e:	2a08      	cmp	r2, #8
 800c2a0:	d834      	bhi.n	800c30c <_strtod_l+0xac>
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d03e      	beq.n	800c324 <_strtod_l+0xc4>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c2ac:	7833      	ldrb	r3, [r6, #0]
 800c2ae:	2b30      	cmp	r3, #48	; 0x30
 800c2b0:	f040 80b0 	bne.w	800c414 <_strtod_l+0x1b4>
 800c2b4:	7873      	ldrb	r3, [r6, #1]
 800c2b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2ba:	2b58      	cmp	r3, #88	; 0x58
 800c2bc:	d168      	bne.n	800c390 <_strtod_l+0x130>
 800c2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	ab18      	add	r3, sp, #96	; 0x60
 800c2c4:	9702      	str	r7, [sp, #8]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4a8d      	ldr	r2, [pc, #564]	; (800c500 <_strtod_l+0x2a0>)
 800c2ca:	ab19      	add	r3, sp, #100	; 0x64
 800c2cc:	a917      	add	r1, sp, #92	; 0x5c
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 fe40 	bl	800cf54 <__gethex>
 800c2d4:	f010 0707 	ands.w	r7, r0, #7
 800c2d8:	4605      	mov	r5, r0
 800c2da:	d005      	beq.n	800c2e8 <_strtod_l+0x88>
 800c2dc:	2f06      	cmp	r7, #6
 800c2de:	d12c      	bne.n	800c33a <_strtod_l+0xda>
 800c2e0:	3601      	adds	r6, #1
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f040 8590 	bne.w	800ce10 <_strtod_l+0xbb0>
 800c2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2f2:	b1eb      	cbz	r3, 800c330 <_strtod_l+0xd0>
 800c2f4:	4652      	mov	r2, sl
 800c2f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c2fa:	ec43 2b10 	vmov	d0, r2, r3
 800c2fe:	b01d      	add	sp, #116	; 0x74
 800c300:	ecbd 8b02 	vpop	{d8}
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c308:	2a20      	cmp	r2, #32
 800c30a:	d1cc      	bne.n	800c2a6 <_strtod_l+0x46>
 800c30c:	3301      	adds	r3, #1
 800c30e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c310:	e7be      	b.n	800c290 <_strtod_l+0x30>
 800c312:	2a2d      	cmp	r2, #45	; 0x2d
 800c314:	d1c7      	bne.n	800c2a6 <_strtod_l+0x46>
 800c316:	2201      	movs	r2, #1
 800c318:	920a      	str	r2, [sp, #40]	; 0x28
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c31e:	785b      	ldrb	r3, [r3, #1]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1c2      	bne.n	800c2aa <_strtod_l+0x4a>
 800c324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c326:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f040 856e 	bne.w	800ce0c <_strtod_l+0xbac>
 800c330:	4652      	mov	r2, sl
 800c332:	465b      	mov	r3, fp
 800c334:	e7e1      	b.n	800c2fa <_strtod_l+0x9a>
 800c336:	2200      	movs	r2, #0
 800c338:	e7ee      	b.n	800c318 <_strtod_l+0xb8>
 800c33a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c33c:	b13a      	cbz	r2, 800c34e <_strtod_l+0xee>
 800c33e:	2135      	movs	r1, #53	; 0x35
 800c340:	a81a      	add	r0, sp, #104	; 0x68
 800c342:	f001 fdac 	bl	800de9e <__copybits>
 800c346:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 f96b 	bl	800d624 <_Bfree>
 800c34e:	3f01      	subs	r7, #1
 800c350:	2f04      	cmp	r7, #4
 800c352:	d806      	bhi.n	800c362 <_strtod_l+0x102>
 800c354:	e8df f007 	tbb	[pc, r7]
 800c358:	1714030a 	.word	0x1714030a
 800c35c:	0a          	.byte	0x0a
 800c35d:	00          	.byte	0x00
 800c35e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c362:	0728      	lsls	r0, r5, #28
 800c364:	d5c0      	bpl.n	800c2e8 <_strtod_l+0x88>
 800c366:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c36a:	e7bd      	b.n	800c2e8 <_strtod_l+0x88>
 800c36c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c37a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c37e:	e7f0      	b.n	800c362 <_strtod_l+0x102>
 800c380:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c504 <_strtod_l+0x2a4>
 800c384:	e7ed      	b.n	800c362 <_strtod_l+0x102>
 800c386:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c38a:	f04f 3aff 	mov.w	sl, #4294967295
 800c38e:	e7e8      	b.n	800c362 <_strtod_l+0x102>
 800c390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	9217      	str	r2, [sp, #92]	; 0x5c
 800c396:	785b      	ldrb	r3, [r3, #1]
 800c398:	2b30      	cmp	r3, #48	; 0x30
 800c39a:	d0f9      	beq.n	800c390 <_strtod_l+0x130>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0a3      	beq.n	800c2e8 <_strtod_l+0x88>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	f04f 0900 	mov.w	r9, #0
 800c3a6:	9304      	str	r3, [sp, #16]
 800c3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3aa:	9308      	str	r3, [sp, #32]
 800c3ac:	f8cd 901c 	str.w	r9, [sp, #28]
 800c3b0:	464f      	mov	r7, r9
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c3b6:	7806      	ldrb	r6, [r0, #0]
 800c3b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c3bc:	b2d9      	uxtb	r1, r3
 800c3be:	2909      	cmp	r1, #9
 800c3c0:	d92a      	bls.n	800c418 <_strtod_l+0x1b8>
 800c3c2:	9905      	ldr	r1, [sp, #20]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	f001 fe73 	bl	800e0b0 <strncmp>
 800c3ca:	b398      	cbz	r0, 800c434 <_strtod_l+0x1d4>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	463d      	mov	r5, r7
 800c3d2:	9005      	str	r0, [sp, #20]
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2a65      	cmp	r2, #101	; 0x65
 800c3d8:	d001      	beq.n	800c3de <_strtod_l+0x17e>
 800c3da:	2a45      	cmp	r2, #69	; 0x45
 800c3dc:	d118      	bne.n	800c410 <_strtod_l+0x1b0>
 800c3de:	b91d      	cbnz	r5, 800c3e8 <_strtod_l+0x188>
 800c3e0:	9a04      	ldr	r2, [sp, #16]
 800c3e2:	4302      	orrs	r2, r0
 800c3e4:	d09e      	beq.n	800c324 <_strtod_l+0xc4>
 800c3e6:	2500      	movs	r5, #0
 800c3e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c3ec:	f108 0201 	add.w	r2, r8, #1
 800c3f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c3f6:	2a2b      	cmp	r2, #43	; 0x2b
 800c3f8:	d075      	beq.n	800c4e6 <_strtod_l+0x286>
 800c3fa:	2a2d      	cmp	r2, #45	; 0x2d
 800c3fc:	d07b      	beq.n	800c4f6 <_strtod_l+0x296>
 800c3fe:	f04f 0c00 	mov.w	ip, #0
 800c402:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c406:	2909      	cmp	r1, #9
 800c408:	f240 8082 	bls.w	800c510 <_strtod_l+0x2b0>
 800c40c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c410:	2600      	movs	r6, #0
 800c412:	e09d      	b.n	800c550 <_strtod_l+0x2f0>
 800c414:	2300      	movs	r3, #0
 800c416:	e7c4      	b.n	800c3a2 <_strtod_l+0x142>
 800c418:	2f08      	cmp	r7, #8
 800c41a:	bfd8      	it	le
 800c41c:	9907      	ldrle	r1, [sp, #28]
 800c41e:	f100 0001 	add.w	r0, r0, #1
 800c422:	bfda      	itte	le
 800c424:	fb02 3301 	mlale	r3, r2, r1, r3
 800c428:	9307      	strle	r3, [sp, #28]
 800c42a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c42e:	3701      	adds	r7, #1
 800c430:	9017      	str	r0, [sp, #92]	; 0x5c
 800c432:	e7bf      	b.n	800c3b4 <_strtod_l+0x154>
 800c434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c436:	195a      	adds	r2, r3, r5
 800c438:	9217      	str	r2, [sp, #92]	; 0x5c
 800c43a:	5d5a      	ldrb	r2, [r3, r5]
 800c43c:	2f00      	cmp	r7, #0
 800c43e:	d037      	beq.n	800c4b0 <_strtod_l+0x250>
 800c440:	9005      	str	r0, [sp, #20]
 800c442:	463d      	mov	r5, r7
 800c444:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c448:	2b09      	cmp	r3, #9
 800c44a:	d912      	bls.n	800c472 <_strtod_l+0x212>
 800c44c:	2301      	movs	r3, #1
 800c44e:	e7c2      	b.n	800c3d6 <_strtod_l+0x176>
 800c450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	9217      	str	r2, [sp, #92]	; 0x5c
 800c456:	785a      	ldrb	r2, [r3, #1]
 800c458:	3001      	adds	r0, #1
 800c45a:	2a30      	cmp	r2, #48	; 0x30
 800c45c:	d0f8      	beq.n	800c450 <_strtod_l+0x1f0>
 800c45e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c462:	2b08      	cmp	r3, #8
 800c464:	f200 84d9 	bhi.w	800ce1a <_strtod_l+0xbba>
 800c468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c46a:	9005      	str	r0, [sp, #20]
 800c46c:	2000      	movs	r0, #0
 800c46e:	9308      	str	r3, [sp, #32]
 800c470:	4605      	mov	r5, r0
 800c472:	3a30      	subs	r2, #48	; 0x30
 800c474:	f100 0301 	add.w	r3, r0, #1
 800c478:	d014      	beq.n	800c4a4 <_strtod_l+0x244>
 800c47a:	9905      	ldr	r1, [sp, #20]
 800c47c:	4419      	add	r1, r3
 800c47e:	9105      	str	r1, [sp, #20]
 800c480:	462b      	mov	r3, r5
 800c482:	eb00 0e05 	add.w	lr, r0, r5
 800c486:	210a      	movs	r1, #10
 800c488:	4573      	cmp	r3, lr
 800c48a:	d113      	bne.n	800c4b4 <_strtod_l+0x254>
 800c48c:	182b      	adds	r3, r5, r0
 800c48e:	2b08      	cmp	r3, #8
 800c490:	f105 0501 	add.w	r5, r5, #1
 800c494:	4405      	add	r5, r0
 800c496:	dc1c      	bgt.n	800c4d2 <_strtod_l+0x272>
 800c498:	9907      	ldr	r1, [sp, #28]
 800c49a:	230a      	movs	r3, #10
 800c49c:	fb03 2301 	mla	r3, r3, r1, r2
 800c4a0:	9307      	str	r3, [sp, #28]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c4a6:	1c51      	adds	r1, r2, #1
 800c4a8:	9117      	str	r1, [sp, #92]	; 0x5c
 800c4aa:	7852      	ldrb	r2, [r2, #1]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	e7c9      	b.n	800c444 <_strtod_l+0x1e4>
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	e7d2      	b.n	800c45a <_strtod_l+0x1fa>
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	dc04      	bgt.n	800c4c2 <_strtod_l+0x262>
 800c4b8:	9e07      	ldr	r6, [sp, #28]
 800c4ba:	434e      	muls	r6, r1
 800c4bc:	9607      	str	r6, [sp, #28]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	e7e2      	b.n	800c488 <_strtod_l+0x228>
 800c4c2:	f103 0c01 	add.w	ip, r3, #1
 800c4c6:	f1bc 0f10 	cmp.w	ip, #16
 800c4ca:	bfd8      	it	le
 800c4cc:	fb01 f909 	mulle.w	r9, r1, r9
 800c4d0:	e7f5      	b.n	800c4be <_strtod_l+0x25e>
 800c4d2:	2d10      	cmp	r5, #16
 800c4d4:	bfdc      	itt	le
 800c4d6:	230a      	movle	r3, #10
 800c4d8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c4dc:	e7e1      	b.n	800c4a2 <_strtod_l+0x242>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9305      	str	r3, [sp, #20]
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e77c      	b.n	800c3e0 <_strtod_l+0x180>
 800c4e6:	f04f 0c00 	mov.w	ip, #0
 800c4ea:	f108 0202 	add.w	r2, r8, #2
 800c4ee:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c4f4:	e785      	b.n	800c402 <_strtod_l+0x1a2>
 800c4f6:	f04f 0c01 	mov.w	ip, #1
 800c4fa:	e7f6      	b.n	800c4ea <_strtod_l+0x28a>
 800c4fc:	08010418 	.word	0x08010418
 800c500:	0801034c 	.word	0x0801034c
 800c504:	7ff00000 	.word	0x7ff00000
 800c508:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c50a:	1c51      	adds	r1, r2, #1
 800c50c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c50e:	7852      	ldrb	r2, [r2, #1]
 800c510:	2a30      	cmp	r2, #48	; 0x30
 800c512:	d0f9      	beq.n	800c508 <_strtod_l+0x2a8>
 800c514:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c518:	2908      	cmp	r1, #8
 800c51a:	f63f af79 	bhi.w	800c410 <_strtod_l+0x1b0>
 800c51e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c522:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c524:	9206      	str	r2, [sp, #24]
 800c526:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c528:	1c51      	adds	r1, r2, #1
 800c52a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c52c:	7852      	ldrb	r2, [r2, #1]
 800c52e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c532:	2e09      	cmp	r6, #9
 800c534:	d937      	bls.n	800c5a6 <_strtod_l+0x346>
 800c536:	9e06      	ldr	r6, [sp, #24]
 800c538:	1b89      	subs	r1, r1, r6
 800c53a:	2908      	cmp	r1, #8
 800c53c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c540:	dc02      	bgt.n	800c548 <_strtod_l+0x2e8>
 800c542:	4576      	cmp	r6, lr
 800c544:	bfa8      	it	ge
 800c546:	4676      	movge	r6, lr
 800c548:	f1bc 0f00 	cmp.w	ip, #0
 800c54c:	d000      	beq.n	800c550 <_strtod_l+0x2f0>
 800c54e:	4276      	negs	r6, r6
 800c550:	2d00      	cmp	r5, #0
 800c552:	d14d      	bne.n	800c5f0 <_strtod_l+0x390>
 800c554:	9904      	ldr	r1, [sp, #16]
 800c556:	4301      	orrs	r1, r0
 800c558:	f47f aec6 	bne.w	800c2e8 <_strtod_l+0x88>
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f47f aee1 	bne.w	800c324 <_strtod_l+0xc4>
 800c562:	2a69      	cmp	r2, #105	; 0x69
 800c564:	d027      	beq.n	800c5b6 <_strtod_l+0x356>
 800c566:	dc24      	bgt.n	800c5b2 <_strtod_l+0x352>
 800c568:	2a49      	cmp	r2, #73	; 0x49
 800c56a:	d024      	beq.n	800c5b6 <_strtod_l+0x356>
 800c56c:	2a4e      	cmp	r2, #78	; 0x4e
 800c56e:	f47f aed9 	bne.w	800c324 <_strtod_l+0xc4>
 800c572:	499f      	ldr	r1, [pc, #636]	; (800c7f0 <_strtod_l+0x590>)
 800c574:	a817      	add	r0, sp, #92	; 0x5c
 800c576:	f000 ff45 	bl	800d404 <__match>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f43f aed2 	beq.w	800c324 <_strtod_l+0xc4>
 800c580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b28      	cmp	r3, #40	; 0x28
 800c586:	d12d      	bne.n	800c5e4 <_strtod_l+0x384>
 800c588:	499a      	ldr	r1, [pc, #616]	; (800c7f4 <_strtod_l+0x594>)
 800c58a:	aa1a      	add	r2, sp, #104	; 0x68
 800c58c:	a817      	add	r0, sp, #92	; 0x5c
 800c58e:	f000 ff4d 	bl	800d42c <__hexnan>
 800c592:	2805      	cmp	r0, #5
 800c594:	d126      	bne.n	800c5e4 <_strtod_l+0x384>
 800c596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c598:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c59c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c5a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c5a4:	e6a0      	b.n	800c2e8 <_strtod_l+0x88>
 800c5a6:	210a      	movs	r1, #10
 800c5a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c5ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c5b0:	e7b9      	b.n	800c526 <_strtod_l+0x2c6>
 800c5b2:	2a6e      	cmp	r2, #110	; 0x6e
 800c5b4:	e7db      	b.n	800c56e <_strtod_l+0x30e>
 800c5b6:	4990      	ldr	r1, [pc, #576]	; (800c7f8 <_strtod_l+0x598>)
 800c5b8:	a817      	add	r0, sp, #92	; 0x5c
 800c5ba:	f000 ff23 	bl	800d404 <__match>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f aeb0 	beq.w	800c324 <_strtod_l+0xc4>
 800c5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5c6:	498d      	ldr	r1, [pc, #564]	; (800c7fc <_strtod_l+0x59c>)
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	a817      	add	r0, sp, #92	; 0x5c
 800c5cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5ce:	f000 ff19 	bl	800d404 <__match>
 800c5d2:	b910      	cbnz	r0, 800c5da <_strtod_l+0x37a>
 800c5d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c80c <_strtod_l+0x5ac>
 800c5de:	f04f 0a00 	mov.w	sl, #0
 800c5e2:	e681      	b.n	800c2e8 <_strtod_l+0x88>
 800c5e4:	4886      	ldr	r0, [pc, #536]	; (800c800 <_strtod_l+0x5a0>)
 800c5e6:	f001 fd4b 	bl	800e080 <nan>
 800c5ea:	ec5b ab10 	vmov	sl, fp, d0
 800c5ee:	e67b      	b.n	800c2e8 <_strtod_l+0x88>
 800c5f0:	9b05      	ldr	r3, [sp, #20]
 800c5f2:	9807      	ldr	r0, [sp, #28]
 800c5f4:	1af3      	subs	r3, r6, r3
 800c5f6:	2f00      	cmp	r7, #0
 800c5f8:	bf08      	it	eq
 800c5fa:	462f      	moveq	r7, r5
 800c5fc:	2d10      	cmp	r5, #16
 800c5fe:	9306      	str	r3, [sp, #24]
 800c600:	46a8      	mov	r8, r5
 800c602:	bfa8      	it	ge
 800c604:	f04f 0810 	movge.w	r8, #16
 800c608:	f7f3 ff84 	bl	8000514 <__aeabi_ui2d>
 800c60c:	2d09      	cmp	r5, #9
 800c60e:	4682      	mov	sl, r0
 800c610:	468b      	mov	fp, r1
 800c612:	dd13      	ble.n	800c63c <_strtod_l+0x3dc>
 800c614:	4b7b      	ldr	r3, [pc, #492]	; (800c804 <_strtod_l+0x5a4>)
 800c616:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c61a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c61e:	f7f3 fff3 	bl	8000608 <__aeabi_dmul>
 800c622:	4682      	mov	sl, r0
 800c624:	4648      	mov	r0, r9
 800c626:	468b      	mov	fp, r1
 800c628:	f7f3 ff74 	bl	8000514 <__aeabi_ui2d>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	f7f3 fe32 	bl	800029c <__adddf3>
 800c638:	4682      	mov	sl, r0
 800c63a:	468b      	mov	fp, r1
 800c63c:	2d0f      	cmp	r5, #15
 800c63e:	dc38      	bgt.n	800c6b2 <_strtod_l+0x452>
 800c640:	9b06      	ldr	r3, [sp, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f43f ae50 	beq.w	800c2e8 <_strtod_l+0x88>
 800c648:	dd24      	ble.n	800c694 <_strtod_l+0x434>
 800c64a:	2b16      	cmp	r3, #22
 800c64c:	dc0b      	bgt.n	800c666 <_strtod_l+0x406>
 800c64e:	496d      	ldr	r1, [pc, #436]	; (800c804 <_strtod_l+0x5a4>)
 800c650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c654:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c658:	4652      	mov	r2, sl
 800c65a:	465b      	mov	r3, fp
 800c65c:	f7f3 ffd4 	bl	8000608 <__aeabi_dmul>
 800c660:	4682      	mov	sl, r0
 800c662:	468b      	mov	fp, r1
 800c664:	e640      	b.n	800c2e8 <_strtod_l+0x88>
 800c666:	9a06      	ldr	r2, [sp, #24]
 800c668:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c66c:	4293      	cmp	r3, r2
 800c66e:	db20      	blt.n	800c6b2 <_strtod_l+0x452>
 800c670:	4c64      	ldr	r4, [pc, #400]	; (800c804 <_strtod_l+0x5a4>)
 800c672:	f1c5 050f 	rsb	r5, r5, #15
 800c676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c67a:	4652      	mov	r2, sl
 800c67c:	465b      	mov	r3, fp
 800c67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c682:	f7f3 ffc1 	bl	8000608 <__aeabi_dmul>
 800c686:	9b06      	ldr	r3, [sp, #24]
 800c688:	1b5d      	subs	r5, r3, r5
 800c68a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c68e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c692:	e7e3      	b.n	800c65c <_strtod_l+0x3fc>
 800c694:	9b06      	ldr	r3, [sp, #24]
 800c696:	3316      	adds	r3, #22
 800c698:	db0b      	blt.n	800c6b2 <_strtod_l+0x452>
 800c69a:	9b05      	ldr	r3, [sp, #20]
 800c69c:	1b9e      	subs	r6, r3, r6
 800c69e:	4b59      	ldr	r3, [pc, #356]	; (800c804 <_strtod_l+0x5a4>)
 800c6a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c6a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	4659      	mov	r1, fp
 800c6ac:	f7f4 f8d6 	bl	800085c <__aeabi_ddiv>
 800c6b0:	e7d6      	b.n	800c660 <_strtod_l+0x400>
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	eba5 0808 	sub.w	r8, r5, r8
 800c6b8:	4498      	add	r8, r3
 800c6ba:	f1b8 0f00 	cmp.w	r8, #0
 800c6be:	dd74      	ble.n	800c7aa <_strtod_l+0x54a>
 800c6c0:	f018 030f 	ands.w	r3, r8, #15
 800c6c4:	d00a      	beq.n	800c6dc <_strtod_l+0x47c>
 800c6c6:	494f      	ldr	r1, [pc, #316]	; (800c804 <_strtod_l+0x5a4>)
 800c6c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d4:	f7f3 ff98 	bl	8000608 <__aeabi_dmul>
 800c6d8:	4682      	mov	sl, r0
 800c6da:	468b      	mov	fp, r1
 800c6dc:	f038 080f 	bics.w	r8, r8, #15
 800c6e0:	d04f      	beq.n	800c782 <_strtod_l+0x522>
 800c6e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c6e6:	dd22      	ble.n	800c72e <_strtod_l+0x4ce>
 800c6e8:	2500      	movs	r5, #0
 800c6ea:	462e      	mov	r6, r5
 800c6ec:	9507      	str	r5, [sp, #28]
 800c6ee:	9505      	str	r5, [sp, #20]
 800c6f0:	2322      	movs	r3, #34	; 0x22
 800c6f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c80c <_strtod_l+0x5ac>
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	f04f 0a00 	mov.w	sl, #0
 800c6fc:	9b07      	ldr	r3, [sp, #28]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f43f adf2 	beq.w	800c2e8 <_strtod_l+0x88>
 800c704:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c706:	4620      	mov	r0, r4
 800c708:	f000 ff8c 	bl	800d624 <_Bfree>
 800c70c:	9905      	ldr	r1, [sp, #20]
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 ff88 	bl	800d624 <_Bfree>
 800c714:	4631      	mov	r1, r6
 800c716:	4620      	mov	r0, r4
 800c718:	f000 ff84 	bl	800d624 <_Bfree>
 800c71c:	9907      	ldr	r1, [sp, #28]
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 ff80 	bl	800d624 <_Bfree>
 800c724:	4629      	mov	r1, r5
 800c726:	4620      	mov	r0, r4
 800c728:	f000 ff7c 	bl	800d624 <_Bfree>
 800c72c:	e5dc      	b.n	800c2e8 <_strtod_l+0x88>
 800c72e:	4b36      	ldr	r3, [pc, #216]	; (800c808 <_strtod_l+0x5a8>)
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	2300      	movs	r3, #0
 800c734:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c738:	4650      	mov	r0, sl
 800c73a:	4659      	mov	r1, fp
 800c73c:	4699      	mov	r9, r3
 800c73e:	f1b8 0f01 	cmp.w	r8, #1
 800c742:	dc21      	bgt.n	800c788 <_strtod_l+0x528>
 800c744:	b10b      	cbz	r3, 800c74a <_strtod_l+0x4ea>
 800c746:	4682      	mov	sl, r0
 800c748:	468b      	mov	fp, r1
 800c74a:	4b2f      	ldr	r3, [pc, #188]	; (800c808 <_strtod_l+0x5a8>)
 800c74c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c750:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c754:	4652      	mov	r2, sl
 800c756:	465b      	mov	r3, fp
 800c758:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c75c:	f7f3 ff54 	bl	8000608 <__aeabi_dmul>
 800c760:	4b2a      	ldr	r3, [pc, #168]	; (800c80c <_strtod_l+0x5ac>)
 800c762:	460a      	mov	r2, r1
 800c764:	400b      	ands	r3, r1
 800c766:	492a      	ldr	r1, [pc, #168]	; (800c810 <_strtod_l+0x5b0>)
 800c768:	428b      	cmp	r3, r1
 800c76a:	4682      	mov	sl, r0
 800c76c:	d8bc      	bhi.n	800c6e8 <_strtod_l+0x488>
 800c76e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c772:	428b      	cmp	r3, r1
 800c774:	bf86      	itte	hi
 800c776:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c814 <_strtod_l+0x5b4>
 800c77a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c77e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c782:	2300      	movs	r3, #0
 800c784:	9304      	str	r3, [sp, #16]
 800c786:	e084      	b.n	800c892 <_strtod_l+0x632>
 800c788:	f018 0f01 	tst.w	r8, #1
 800c78c:	d005      	beq.n	800c79a <_strtod_l+0x53a>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 ff38 	bl	8000608 <__aeabi_dmul>
 800c798:	2301      	movs	r3, #1
 800c79a:	9a04      	ldr	r2, [sp, #16]
 800c79c:	3208      	adds	r2, #8
 800c79e:	f109 0901 	add.w	r9, r9, #1
 800c7a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7a6:	9204      	str	r2, [sp, #16]
 800c7a8:	e7c9      	b.n	800c73e <_strtod_l+0x4de>
 800c7aa:	d0ea      	beq.n	800c782 <_strtod_l+0x522>
 800c7ac:	f1c8 0800 	rsb	r8, r8, #0
 800c7b0:	f018 020f 	ands.w	r2, r8, #15
 800c7b4:	d00a      	beq.n	800c7cc <_strtod_l+0x56c>
 800c7b6:	4b13      	ldr	r3, [pc, #76]	; (800c804 <_strtod_l+0x5a4>)
 800c7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7bc:	4650      	mov	r0, sl
 800c7be:	4659      	mov	r1, fp
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f4 f84a 	bl	800085c <__aeabi_ddiv>
 800c7c8:	4682      	mov	sl, r0
 800c7ca:	468b      	mov	fp, r1
 800c7cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c7d0:	d0d7      	beq.n	800c782 <_strtod_l+0x522>
 800c7d2:	f1b8 0f1f 	cmp.w	r8, #31
 800c7d6:	dd1f      	ble.n	800c818 <_strtod_l+0x5b8>
 800c7d8:	2500      	movs	r5, #0
 800c7da:	462e      	mov	r6, r5
 800c7dc:	9507      	str	r5, [sp, #28]
 800c7de:	9505      	str	r5, [sp, #20]
 800c7e0:	2322      	movs	r3, #34	; 0x22
 800c7e2:	f04f 0a00 	mov.w	sl, #0
 800c7e6:	f04f 0b00 	mov.w	fp, #0
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	e786      	b.n	800c6fc <_strtod_l+0x49c>
 800c7ee:	bf00      	nop
 800c7f0:	08010349 	.word	0x08010349
 800c7f4:	08010360 	.word	0x08010360
 800c7f8:	08010340 	.word	0x08010340
 800c7fc:	08010343 	.word	0x08010343
 800c800:	080105d7 	.word	0x080105d7
 800c804:	080104c8 	.word	0x080104c8
 800c808:	080104a0 	.word	0x080104a0
 800c80c:	7ff00000 	.word	0x7ff00000
 800c810:	7ca00000 	.word	0x7ca00000
 800c814:	7fefffff 	.word	0x7fefffff
 800c818:	f018 0310 	ands.w	r3, r8, #16
 800c81c:	bf18      	it	ne
 800c81e:	236a      	movne	r3, #106	; 0x6a
 800c820:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cbd0 <_strtod_l+0x970>
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	4650      	mov	r0, sl
 800c828:	4659      	mov	r1, fp
 800c82a:	2300      	movs	r3, #0
 800c82c:	f018 0f01 	tst.w	r8, #1
 800c830:	d004      	beq.n	800c83c <_strtod_l+0x5dc>
 800c832:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c836:	f7f3 fee7 	bl	8000608 <__aeabi_dmul>
 800c83a:	2301      	movs	r3, #1
 800c83c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c840:	f109 0908 	add.w	r9, r9, #8
 800c844:	d1f2      	bne.n	800c82c <_strtod_l+0x5cc>
 800c846:	b10b      	cbz	r3, 800c84c <_strtod_l+0x5ec>
 800c848:	4682      	mov	sl, r0
 800c84a:	468b      	mov	fp, r1
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	b1c3      	cbz	r3, 800c882 <_strtod_l+0x622>
 800c850:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c854:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c858:	2b00      	cmp	r3, #0
 800c85a:	4659      	mov	r1, fp
 800c85c:	dd11      	ble.n	800c882 <_strtod_l+0x622>
 800c85e:	2b1f      	cmp	r3, #31
 800c860:	f340 8124 	ble.w	800caac <_strtod_l+0x84c>
 800c864:	2b34      	cmp	r3, #52	; 0x34
 800c866:	bfde      	ittt	le
 800c868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c86c:	f04f 33ff 	movle.w	r3, #4294967295
 800c870:	fa03 f202 	lslle.w	r2, r3, r2
 800c874:	f04f 0a00 	mov.w	sl, #0
 800c878:	bfcc      	ite	gt
 800c87a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c87e:	ea02 0b01 	andle.w	fp, r2, r1
 800c882:	2200      	movs	r2, #0
 800c884:	2300      	movs	r3, #0
 800c886:	4650      	mov	r0, sl
 800c888:	4659      	mov	r1, fp
 800c88a:	f7f4 f925 	bl	8000ad8 <__aeabi_dcmpeq>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d1a2      	bne.n	800c7d8 <_strtod_l+0x578>
 800c892:	9b07      	ldr	r3, [sp, #28]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	9908      	ldr	r1, [sp, #32]
 800c898:	462b      	mov	r3, r5
 800c89a:	463a      	mov	r2, r7
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 ff29 	bl	800d6f4 <__s2b>
 800c8a2:	9007      	str	r0, [sp, #28]
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f43f af1f 	beq.w	800c6e8 <_strtod_l+0x488>
 800c8aa:	9b05      	ldr	r3, [sp, #20]
 800c8ac:	1b9e      	subs	r6, r3, r6
 800c8ae:	9b06      	ldr	r3, [sp, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bfb4      	ite	lt
 800c8b4:	4633      	movlt	r3, r6
 800c8b6:	2300      	movge	r3, #0
 800c8b8:	930c      	str	r3, [sp, #48]	; 0x30
 800c8ba:	9b06      	ldr	r3, [sp, #24]
 800c8bc:	2500      	movs	r5, #0
 800c8be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8c2:	9312      	str	r3, [sp, #72]	; 0x48
 800c8c4:	462e      	mov	r6, r5
 800c8c6:	9b07      	ldr	r3, [sp, #28]
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	6859      	ldr	r1, [r3, #4]
 800c8cc:	f000 fe6a 	bl	800d5a4 <_Balloc>
 800c8d0:	9005      	str	r0, [sp, #20]
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f43f af0c 	beq.w	800c6f0 <_strtod_l+0x490>
 800c8d8:	9b07      	ldr	r3, [sp, #28]
 800c8da:	691a      	ldr	r2, [r3, #16]
 800c8dc:	3202      	adds	r2, #2
 800c8de:	f103 010c 	add.w	r1, r3, #12
 800c8e2:	0092      	lsls	r2, r2, #2
 800c8e4:	300c      	adds	r0, #12
 800c8e6:	f000 fe4f 	bl	800d588 <memcpy>
 800c8ea:	ec4b ab10 	vmov	d0, sl, fp
 800c8ee:	aa1a      	add	r2, sp, #104	; 0x68
 800c8f0:	a919      	add	r1, sp, #100	; 0x64
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f001 fa44 	bl	800dd80 <__d2b>
 800c8f8:	ec4b ab18 	vmov	d8, sl, fp
 800c8fc:	9018      	str	r0, [sp, #96]	; 0x60
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f43f aef6 	beq.w	800c6f0 <_strtod_l+0x490>
 800c904:	2101      	movs	r1, #1
 800c906:	4620      	mov	r0, r4
 800c908:	f000 ff8e 	bl	800d828 <__i2b>
 800c90c:	4606      	mov	r6, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	f43f aeee 	beq.w	800c6f0 <_strtod_l+0x490>
 800c914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c916:	9904      	ldr	r1, [sp, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfab      	itete	ge
 800c91c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c91e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c920:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c922:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c926:	bfac      	ite	ge
 800c928:	eb03 0902 	addge.w	r9, r3, r2
 800c92c:	1ad7      	sublt	r7, r2, r3
 800c92e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c930:	eba3 0801 	sub.w	r8, r3, r1
 800c934:	4490      	add	r8, r2
 800c936:	4ba1      	ldr	r3, [pc, #644]	; (800cbbc <_strtod_l+0x95c>)
 800c938:	f108 38ff 	add.w	r8, r8, #4294967295
 800c93c:	4598      	cmp	r8, r3
 800c93e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c942:	f280 80c7 	bge.w	800cad4 <_strtod_l+0x874>
 800c946:	eba3 0308 	sub.w	r3, r3, r8
 800c94a:	2b1f      	cmp	r3, #31
 800c94c:	eba2 0203 	sub.w	r2, r2, r3
 800c950:	f04f 0101 	mov.w	r1, #1
 800c954:	f300 80b1 	bgt.w	800caba <_strtod_l+0x85a>
 800c958:	fa01 f303 	lsl.w	r3, r1, r3
 800c95c:	930d      	str	r3, [sp, #52]	; 0x34
 800c95e:	2300      	movs	r3, #0
 800c960:	9308      	str	r3, [sp, #32]
 800c962:	eb09 0802 	add.w	r8, r9, r2
 800c966:	9b04      	ldr	r3, [sp, #16]
 800c968:	45c1      	cmp	r9, r8
 800c96a:	4417      	add	r7, r2
 800c96c:	441f      	add	r7, r3
 800c96e:	464b      	mov	r3, r9
 800c970:	bfa8      	it	ge
 800c972:	4643      	movge	r3, r8
 800c974:	42bb      	cmp	r3, r7
 800c976:	bfa8      	it	ge
 800c978:	463b      	movge	r3, r7
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bfc2      	ittt	gt
 800c97e:	eba8 0803 	subgt.w	r8, r8, r3
 800c982:	1aff      	subgt	r7, r7, r3
 800c984:	eba9 0903 	subgt.w	r9, r9, r3
 800c988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	dd17      	ble.n	800c9be <_strtod_l+0x75e>
 800c98e:	4631      	mov	r1, r6
 800c990:	461a      	mov	r2, r3
 800c992:	4620      	mov	r0, r4
 800c994:	f001 f808 	bl	800d9a8 <__pow5mult>
 800c998:	4606      	mov	r6, r0
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f43f aea8 	beq.w	800c6f0 <_strtod_l+0x490>
 800c9a0:	4601      	mov	r1, r0
 800c9a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 ff55 	bl	800d854 <__multiply>
 800c9aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	f43f ae9f 	beq.w	800c6f0 <_strtod_l+0x490>
 800c9b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f000 fe35 	bl	800d624 <_Bfree>
 800c9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9bc:	9318      	str	r3, [sp, #96]	; 0x60
 800c9be:	f1b8 0f00 	cmp.w	r8, #0
 800c9c2:	f300 808c 	bgt.w	800cade <_strtod_l+0x87e>
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	dd08      	ble.n	800c9de <_strtod_l+0x77e>
 800c9cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9ce:	9905      	ldr	r1, [sp, #20]
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 ffe9 	bl	800d9a8 <__pow5mult>
 800c9d6:	9005      	str	r0, [sp, #20]
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f ae89 	beq.w	800c6f0 <_strtod_l+0x490>
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	dd08      	ble.n	800c9f4 <_strtod_l+0x794>
 800c9e2:	9905      	ldr	r1, [sp, #20]
 800c9e4:	463a      	mov	r2, r7
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f001 f838 	bl	800da5c <__lshift>
 800c9ec:	9005      	str	r0, [sp, #20]
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f43f ae7e 	beq.w	800c6f0 <_strtod_l+0x490>
 800c9f4:	f1b9 0f00 	cmp.w	r9, #0
 800c9f8:	dd08      	ble.n	800ca0c <_strtod_l+0x7ac>
 800c9fa:	4631      	mov	r1, r6
 800c9fc:	464a      	mov	r2, r9
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f001 f82c 	bl	800da5c <__lshift>
 800ca04:	4606      	mov	r6, r0
 800ca06:	2800      	cmp	r0, #0
 800ca08:	f43f ae72 	beq.w	800c6f0 <_strtod_l+0x490>
 800ca0c:	9a05      	ldr	r2, [sp, #20]
 800ca0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca10:	4620      	mov	r0, r4
 800ca12:	f001 f8af 	bl	800db74 <__mdiff>
 800ca16:	4605      	mov	r5, r0
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f43f ae69 	beq.w	800c6f0 <_strtod_l+0x490>
 800ca1e:	68c3      	ldr	r3, [r0, #12]
 800ca20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca22:	2300      	movs	r3, #0
 800ca24:	60c3      	str	r3, [r0, #12]
 800ca26:	4631      	mov	r1, r6
 800ca28:	f001 f888 	bl	800db3c <__mcmp>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	da60      	bge.n	800caf2 <_strtod_l+0x892>
 800ca30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca32:	ea53 030a 	orrs.w	r3, r3, sl
 800ca36:	f040 8082 	bne.w	800cb3e <_strtod_l+0x8de>
 800ca3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d17d      	bne.n	800cb3e <_strtod_l+0x8de>
 800ca42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca46:	0d1b      	lsrs	r3, r3, #20
 800ca48:	051b      	lsls	r3, r3, #20
 800ca4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca4e:	d976      	bls.n	800cb3e <_strtod_l+0x8de>
 800ca50:	696b      	ldr	r3, [r5, #20]
 800ca52:	b913      	cbnz	r3, 800ca5a <_strtod_l+0x7fa>
 800ca54:	692b      	ldr	r3, [r5, #16]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	dd71      	ble.n	800cb3e <_strtod_l+0x8de>
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fffc 	bl	800da5c <__lshift>
 800ca64:	4631      	mov	r1, r6
 800ca66:	4605      	mov	r5, r0
 800ca68:	f001 f868 	bl	800db3c <__mcmp>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dd66      	ble.n	800cb3e <_strtod_l+0x8de>
 800ca70:	9904      	ldr	r1, [sp, #16]
 800ca72:	4a53      	ldr	r2, [pc, #332]	; (800cbc0 <_strtod_l+0x960>)
 800ca74:	465b      	mov	r3, fp
 800ca76:	2900      	cmp	r1, #0
 800ca78:	f000 8081 	beq.w	800cb7e <_strtod_l+0x91e>
 800ca7c:	ea02 010b 	and.w	r1, r2, fp
 800ca80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca84:	dc7b      	bgt.n	800cb7e <_strtod_l+0x91e>
 800ca86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca8a:	f77f aea9 	ble.w	800c7e0 <_strtod_l+0x580>
 800ca8e:	4b4d      	ldr	r3, [pc, #308]	; (800cbc4 <_strtod_l+0x964>)
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	2200      	movs	r2, #0
 800ca96:	f7f3 fdb7 	bl	8000608 <__aeabi_dmul>
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4303      	orrs	r3, r0
 800ca9e:	bf08      	it	eq
 800caa0:	2322      	moveq	r3, #34	; 0x22
 800caa2:	4682      	mov	sl, r0
 800caa4:	468b      	mov	fp, r1
 800caa6:	bf08      	it	eq
 800caa8:	6023      	streq	r3, [r4, #0]
 800caaa:	e62b      	b.n	800c704 <_strtod_l+0x4a4>
 800caac:	f04f 32ff 	mov.w	r2, #4294967295
 800cab0:	fa02 f303 	lsl.w	r3, r2, r3
 800cab4:	ea03 0a0a 	and.w	sl, r3, sl
 800cab8:	e6e3      	b.n	800c882 <_strtod_l+0x622>
 800caba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cabe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cac2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cac6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800caca:	fa01 f308 	lsl.w	r3, r1, r8
 800cace:	9308      	str	r3, [sp, #32]
 800cad0:	910d      	str	r1, [sp, #52]	; 0x34
 800cad2:	e746      	b.n	800c962 <_strtod_l+0x702>
 800cad4:	2300      	movs	r3, #0
 800cad6:	9308      	str	r3, [sp, #32]
 800cad8:	2301      	movs	r3, #1
 800cada:	930d      	str	r3, [sp, #52]	; 0x34
 800cadc:	e741      	b.n	800c962 <_strtod_l+0x702>
 800cade:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cae0:	4642      	mov	r2, r8
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 ffba 	bl	800da5c <__lshift>
 800cae8:	9018      	str	r0, [sp, #96]	; 0x60
 800caea:	2800      	cmp	r0, #0
 800caec:	f47f af6b 	bne.w	800c9c6 <_strtod_l+0x766>
 800caf0:	e5fe      	b.n	800c6f0 <_strtod_l+0x490>
 800caf2:	465f      	mov	r7, fp
 800caf4:	d16e      	bne.n	800cbd4 <_strtod_l+0x974>
 800caf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cafc:	b342      	cbz	r2, 800cb50 <_strtod_l+0x8f0>
 800cafe:	4a32      	ldr	r2, [pc, #200]	; (800cbc8 <_strtod_l+0x968>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d128      	bne.n	800cb56 <_strtod_l+0x8f6>
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	4651      	mov	r1, sl
 800cb08:	b1eb      	cbz	r3, 800cb46 <_strtod_l+0x8e6>
 800cb0a:	4b2d      	ldr	r3, [pc, #180]	; (800cbc0 <_strtod_l+0x960>)
 800cb0c:	403b      	ands	r3, r7
 800cb0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb12:	f04f 32ff 	mov.w	r2, #4294967295
 800cb16:	d819      	bhi.n	800cb4c <_strtod_l+0x8ec>
 800cb18:	0d1b      	lsrs	r3, r3, #20
 800cb1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb22:	4299      	cmp	r1, r3
 800cb24:	d117      	bne.n	800cb56 <_strtod_l+0x8f6>
 800cb26:	4b29      	ldr	r3, [pc, #164]	; (800cbcc <_strtod_l+0x96c>)
 800cb28:	429f      	cmp	r7, r3
 800cb2a:	d102      	bne.n	800cb32 <_strtod_l+0x8d2>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	f43f addf 	beq.w	800c6f0 <_strtod_l+0x490>
 800cb32:	4b23      	ldr	r3, [pc, #140]	; (800cbc0 <_strtod_l+0x960>)
 800cb34:	403b      	ands	r3, r7
 800cb36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cb3a:	f04f 0a00 	mov.w	sl, #0
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1a4      	bne.n	800ca8e <_strtod_l+0x82e>
 800cb44:	e5de      	b.n	800c704 <_strtod_l+0x4a4>
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4a:	e7ea      	b.n	800cb22 <_strtod_l+0x8c2>
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	e7e8      	b.n	800cb22 <_strtod_l+0x8c2>
 800cb50:	ea53 030a 	orrs.w	r3, r3, sl
 800cb54:	d08c      	beq.n	800ca70 <_strtod_l+0x810>
 800cb56:	9b08      	ldr	r3, [sp, #32]
 800cb58:	b1db      	cbz	r3, 800cb92 <_strtod_l+0x932>
 800cb5a:	423b      	tst	r3, r7
 800cb5c:	d0ef      	beq.n	800cb3e <_strtod_l+0x8de>
 800cb5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb60:	9a04      	ldr	r2, [sp, #16]
 800cb62:	4650      	mov	r0, sl
 800cb64:	4659      	mov	r1, fp
 800cb66:	b1c3      	cbz	r3, 800cb9a <_strtod_l+0x93a>
 800cb68:	f7ff fb5c 	bl	800c224 <sulp>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	ec51 0b18 	vmov	r0, r1, d8
 800cb74:	f7f3 fb92 	bl	800029c <__adddf3>
 800cb78:	4682      	mov	sl, r0
 800cb7a:	468b      	mov	fp, r1
 800cb7c:	e7df      	b.n	800cb3e <_strtod_l+0x8de>
 800cb7e:	4013      	ands	r3, r2
 800cb80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb8c:	f04f 3aff 	mov.w	sl, #4294967295
 800cb90:	e7d5      	b.n	800cb3e <_strtod_l+0x8de>
 800cb92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb94:	ea13 0f0a 	tst.w	r3, sl
 800cb98:	e7e0      	b.n	800cb5c <_strtod_l+0x8fc>
 800cb9a:	f7ff fb43 	bl	800c224 <sulp>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	ec51 0b18 	vmov	r0, r1, d8
 800cba6:	f7f3 fb77 	bl	8000298 <__aeabi_dsub>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2300      	movs	r3, #0
 800cbae:	4682      	mov	sl, r0
 800cbb0:	468b      	mov	fp, r1
 800cbb2:	f7f3 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0c1      	beq.n	800cb3e <_strtod_l+0x8de>
 800cbba:	e611      	b.n	800c7e0 <_strtod_l+0x580>
 800cbbc:	fffffc02 	.word	0xfffffc02
 800cbc0:	7ff00000 	.word	0x7ff00000
 800cbc4:	39500000 	.word	0x39500000
 800cbc8:	000fffff 	.word	0x000fffff
 800cbcc:	7fefffff 	.word	0x7fefffff
 800cbd0:	08010378 	.word	0x08010378
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f001 f92e 	bl	800de38 <__ratio>
 800cbdc:	ec59 8b10 	vmov	r8, r9, d0
 800cbe0:	ee10 0a10 	vmov	r0, s0
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbea:	4649      	mov	r1, r9
 800cbec:	f7f3 ff88 	bl	8000b00 <__aeabi_dcmple>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d07a      	beq.n	800ccea <_strtod_l+0xa8a>
 800cbf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d04a      	beq.n	800cc90 <_strtod_l+0xa30>
 800cbfa:	4b95      	ldr	r3, [pc, #596]	; (800ce50 <_strtod_l+0xbf0>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ce50 <_strtod_l+0xbf0>
 800cc06:	f04f 0800 	mov.w	r8, #0
 800cc0a:	4b92      	ldr	r3, [pc, #584]	; (800ce54 <_strtod_l+0xbf4>)
 800cc0c:	403b      	ands	r3, r7
 800cc0e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc12:	4b91      	ldr	r3, [pc, #580]	; (800ce58 <_strtod_l+0xbf8>)
 800cc14:	429a      	cmp	r2, r3
 800cc16:	f040 80b0 	bne.w	800cd7a <_strtod_l+0xb1a>
 800cc1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cc22:	ec4b ab10 	vmov	d0, sl, fp
 800cc26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc2a:	f001 f82d 	bl	800dc88 <__ulp>
 800cc2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc32:	ec53 2b10 	vmov	r2, r3, d0
 800cc36:	f7f3 fce7 	bl	8000608 <__aeabi_dmul>
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	f7f3 fb2d 	bl	800029c <__adddf3>
 800cc42:	460b      	mov	r3, r1
 800cc44:	4983      	ldr	r1, [pc, #524]	; (800ce54 <_strtod_l+0xbf4>)
 800cc46:	4a85      	ldr	r2, [pc, #532]	; (800ce5c <_strtod_l+0xbfc>)
 800cc48:	4019      	ands	r1, r3
 800cc4a:	4291      	cmp	r1, r2
 800cc4c:	4682      	mov	sl, r0
 800cc4e:	d960      	bls.n	800cd12 <_strtod_l+0xab2>
 800cc50:	ee18 3a90 	vmov	r3, s17
 800cc54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d104      	bne.n	800cc66 <_strtod_l+0xa06>
 800cc5c:	ee18 3a10 	vmov	r3, s16
 800cc60:	3301      	adds	r3, #1
 800cc62:	f43f ad45 	beq.w	800c6f0 <_strtod_l+0x490>
 800cc66:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ce68 <_strtod_l+0xc08>
 800cc6a:	f04f 3aff 	mov.w	sl, #4294967295
 800cc6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 fcd7 	bl	800d624 <_Bfree>
 800cc76:	9905      	ldr	r1, [sp, #20]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 fcd3 	bl	800d624 <_Bfree>
 800cc7e:	4631      	mov	r1, r6
 800cc80:	4620      	mov	r0, r4
 800cc82:	f000 fccf 	bl	800d624 <_Bfree>
 800cc86:	4629      	mov	r1, r5
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 fccb 	bl	800d624 <_Bfree>
 800cc8e:	e61a      	b.n	800c8c6 <_strtod_l+0x666>
 800cc90:	f1ba 0f00 	cmp.w	sl, #0
 800cc94:	d11b      	bne.n	800ccce <_strtod_l+0xa6e>
 800cc96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc9a:	b9f3      	cbnz	r3, 800ccda <_strtod_l+0xa7a>
 800cc9c:	4b6c      	ldr	r3, [pc, #432]	; (800ce50 <_strtod_l+0xbf0>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4640      	mov	r0, r8
 800cca2:	4649      	mov	r1, r9
 800cca4:	f7f3 ff22 	bl	8000aec <__aeabi_dcmplt>
 800cca8:	b9d0      	cbnz	r0, 800cce0 <_strtod_l+0xa80>
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4649      	mov	r1, r9
 800ccae:	4b6c      	ldr	r3, [pc, #432]	; (800ce60 <_strtod_l+0xc00>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f7f3 fca9 	bl	8000608 <__aeabi_dmul>
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	4689      	mov	r9, r1
 800ccba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ccbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ccc2:	9315      	str	r3, [sp, #84]	; 0x54
 800ccc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ccc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cccc:	e79d      	b.n	800cc0a <_strtod_l+0x9aa>
 800ccce:	f1ba 0f01 	cmp.w	sl, #1
 800ccd2:	d102      	bne.n	800ccda <_strtod_l+0xa7a>
 800ccd4:	2f00      	cmp	r7, #0
 800ccd6:	f43f ad83 	beq.w	800c7e0 <_strtod_l+0x580>
 800ccda:	4b62      	ldr	r3, [pc, #392]	; (800ce64 <_strtod_l+0xc04>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	e78e      	b.n	800cbfe <_strtod_l+0x99e>
 800cce0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ce60 <_strtod_l+0xc00>
 800cce4:	f04f 0800 	mov.w	r8, #0
 800cce8:	e7e7      	b.n	800ccba <_strtod_l+0xa5a>
 800ccea:	4b5d      	ldr	r3, [pc, #372]	; (800ce60 <_strtod_l+0xc00>)
 800ccec:	4640      	mov	r0, r8
 800ccee:	4649      	mov	r1, r9
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f7f3 fc89 	bl	8000608 <__aeabi_dmul>
 800ccf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4689      	mov	r9, r1
 800ccfc:	b933      	cbnz	r3, 800cd0c <_strtod_l+0xaac>
 800ccfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd02:	900e      	str	r0, [sp, #56]	; 0x38
 800cd04:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cd0a:	e7dd      	b.n	800ccc8 <_strtod_l+0xa68>
 800cd0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cd10:	e7f9      	b.n	800cd06 <_strtod_l+0xaa6>
 800cd12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cd16:	9b04      	ldr	r3, [sp, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1a8      	bne.n	800cc6e <_strtod_l+0xa0e>
 800cd1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd22:	0d1b      	lsrs	r3, r3, #20
 800cd24:	051b      	lsls	r3, r3, #20
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d1a1      	bne.n	800cc6e <_strtod_l+0xa0e>
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	f7f3 ff53 	bl	8000bd8 <__aeabi_d2lz>
 800cd32:	f7f3 fc3b 	bl	80005ac <__aeabi_l2d>
 800cd36:	4602      	mov	r2, r0
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4640      	mov	r0, r8
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	f7f3 faab 	bl	8000298 <__aeabi_dsub>
 800cd42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd48:	ea43 030a 	orr.w	r3, r3, sl
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	4680      	mov	r8, r0
 800cd50:	4689      	mov	r9, r1
 800cd52:	d055      	beq.n	800ce00 <_strtod_l+0xba0>
 800cd54:	a336      	add	r3, pc, #216	; (adr r3, 800ce30 <_strtod_l+0xbd0>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fec7 	bl	8000aec <__aeabi_dcmplt>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	f47f acd0 	bne.w	800c704 <_strtod_l+0x4a4>
 800cd64:	a334      	add	r3, pc, #208	; (adr r3, 800ce38 <_strtod_l+0xbd8>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f7f3 fedb 	bl	8000b28 <__aeabi_dcmpgt>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	f43f af7b 	beq.w	800cc6e <_strtod_l+0xa0e>
 800cd78:	e4c4      	b.n	800c704 <_strtod_l+0x4a4>
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	b333      	cbz	r3, 800cdcc <_strtod_l+0xb6c>
 800cd7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd84:	d822      	bhi.n	800cdcc <_strtod_l+0xb6c>
 800cd86:	a32e      	add	r3, pc, #184	; (adr r3, 800ce40 <_strtod_l+0xbe0>)
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f7f3 feb6 	bl	8000b00 <__aeabi_dcmple>
 800cd94:	b1a0      	cbz	r0, 800cdc0 <_strtod_l+0xb60>
 800cd96:	4649      	mov	r1, r9
 800cd98:	4640      	mov	r0, r8
 800cd9a:	f7f3 fee5 	bl	8000b68 <__aeabi_d2uiz>
 800cd9e:	2801      	cmp	r0, #1
 800cda0:	bf38      	it	cc
 800cda2:	2001      	movcc	r0, #1
 800cda4:	f7f3 fbb6 	bl	8000514 <__aeabi_ui2d>
 800cda8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdaa:	4680      	mov	r8, r0
 800cdac:	4689      	mov	r9, r1
 800cdae:	bb23      	cbnz	r3, 800cdfa <_strtod_l+0xb9a>
 800cdb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdb4:	9010      	str	r0, [sp, #64]	; 0x40
 800cdb6:	9311      	str	r3, [sp, #68]	; 0x44
 800cdb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	9309      	str	r3, [sp, #36]	; 0x24
 800cdcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdd0:	eeb0 0a48 	vmov.f32	s0, s16
 800cdd4:	eef0 0a68 	vmov.f32	s1, s17
 800cdd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cddc:	f000 ff54 	bl	800dc88 <__ulp>
 800cde0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cde4:	ec53 2b10 	vmov	r2, r3, d0
 800cde8:	f7f3 fc0e 	bl	8000608 <__aeabi_dmul>
 800cdec:	ec53 2b18 	vmov	r2, r3, d8
 800cdf0:	f7f3 fa54 	bl	800029c <__adddf3>
 800cdf4:	4682      	mov	sl, r0
 800cdf6:	468b      	mov	fp, r1
 800cdf8:	e78d      	b.n	800cd16 <_strtod_l+0xab6>
 800cdfa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cdfe:	e7db      	b.n	800cdb8 <_strtod_l+0xb58>
 800ce00:	a311      	add	r3, pc, #68	; (adr r3, 800ce48 <_strtod_l+0xbe8>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	f7f3 fe71 	bl	8000aec <__aeabi_dcmplt>
 800ce0a:	e7b2      	b.n	800cd72 <_strtod_l+0xb12>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	f7ff ba6b 	b.w	800c2f0 <_strtod_l+0x90>
 800ce1a:	2a65      	cmp	r2, #101	; 0x65
 800ce1c:	f43f ab5f 	beq.w	800c4de <_strtod_l+0x27e>
 800ce20:	2a45      	cmp	r2, #69	; 0x45
 800ce22:	f43f ab5c 	beq.w	800c4de <_strtod_l+0x27e>
 800ce26:	2301      	movs	r3, #1
 800ce28:	f7ff bb94 	b.w	800c554 <_strtod_l+0x2f4>
 800ce2c:	f3af 8000 	nop.w
 800ce30:	94a03595 	.word	0x94a03595
 800ce34:	3fdfffff 	.word	0x3fdfffff
 800ce38:	35afe535 	.word	0x35afe535
 800ce3c:	3fe00000 	.word	0x3fe00000
 800ce40:	ffc00000 	.word	0xffc00000
 800ce44:	41dfffff 	.word	0x41dfffff
 800ce48:	94a03595 	.word	0x94a03595
 800ce4c:	3fcfffff 	.word	0x3fcfffff
 800ce50:	3ff00000 	.word	0x3ff00000
 800ce54:	7ff00000 	.word	0x7ff00000
 800ce58:	7fe00000 	.word	0x7fe00000
 800ce5c:	7c9fffff 	.word	0x7c9fffff
 800ce60:	3fe00000 	.word	0x3fe00000
 800ce64:	bff00000 	.word	0xbff00000
 800ce68:	7fefffff 	.word	0x7fefffff

0800ce6c <strtod>:
 800ce6c:	460a      	mov	r2, r1
 800ce6e:	4601      	mov	r1, r0
 800ce70:	4802      	ldr	r0, [pc, #8]	; (800ce7c <strtod+0x10>)
 800ce72:	4b03      	ldr	r3, [pc, #12]	; (800ce80 <strtod+0x14>)
 800ce74:	6800      	ldr	r0, [r0, #0]
 800ce76:	f7ff b9f3 	b.w	800c260 <_strtod_l>
 800ce7a:	bf00      	nop
 800ce7c:	2000006c 	.word	0x2000006c
 800ce80:	200000d4 	.word	0x200000d4

0800ce84 <rshift>:
 800ce84:	6903      	ldr	r3, [r0, #16]
 800ce86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce92:	f100 0414 	add.w	r4, r0, #20
 800ce96:	dd45      	ble.n	800cf24 <rshift+0xa0>
 800ce98:	f011 011f 	ands.w	r1, r1, #31
 800ce9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cea0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cea4:	d10c      	bne.n	800cec0 <rshift+0x3c>
 800cea6:	f100 0710 	add.w	r7, r0, #16
 800ceaa:	4629      	mov	r1, r5
 800ceac:	42b1      	cmp	r1, r6
 800ceae:	d334      	bcc.n	800cf1a <rshift+0x96>
 800ceb0:	1a9b      	subs	r3, r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	1eea      	subs	r2, r5, #3
 800ceb6:	4296      	cmp	r6, r2
 800ceb8:	bf38      	it	cc
 800ceba:	2300      	movcc	r3, #0
 800cebc:	4423      	add	r3, r4
 800cebe:	e015      	b.n	800ceec <rshift+0x68>
 800cec0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cec4:	f1c1 0820 	rsb	r8, r1, #32
 800cec8:	40cf      	lsrs	r7, r1
 800ceca:	f105 0e04 	add.w	lr, r5, #4
 800cece:	46a1      	mov	r9, r4
 800ced0:	4576      	cmp	r6, lr
 800ced2:	46f4      	mov	ip, lr
 800ced4:	d815      	bhi.n	800cf02 <rshift+0x7e>
 800ced6:	1a9a      	subs	r2, r3, r2
 800ced8:	0092      	lsls	r2, r2, #2
 800ceda:	3a04      	subs	r2, #4
 800cedc:	3501      	adds	r5, #1
 800cede:	42ae      	cmp	r6, r5
 800cee0:	bf38      	it	cc
 800cee2:	2200      	movcc	r2, #0
 800cee4:	18a3      	adds	r3, r4, r2
 800cee6:	50a7      	str	r7, [r4, r2]
 800cee8:	b107      	cbz	r7, 800ceec <rshift+0x68>
 800ceea:	3304      	adds	r3, #4
 800ceec:	1b1a      	subs	r2, r3, r4
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cef4:	bf08      	it	eq
 800cef6:	2300      	moveq	r3, #0
 800cef8:	6102      	str	r2, [r0, #16]
 800cefa:	bf08      	it	eq
 800cefc:	6143      	streq	r3, [r0, #20]
 800cefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf02:	f8dc c000 	ldr.w	ip, [ip]
 800cf06:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf0a:	ea4c 0707 	orr.w	r7, ip, r7
 800cf0e:	f849 7b04 	str.w	r7, [r9], #4
 800cf12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf16:	40cf      	lsrs	r7, r1
 800cf18:	e7da      	b.n	800ced0 <rshift+0x4c>
 800cf1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf22:	e7c3      	b.n	800ceac <rshift+0x28>
 800cf24:	4623      	mov	r3, r4
 800cf26:	e7e1      	b.n	800ceec <rshift+0x68>

0800cf28 <__hexdig_fun>:
 800cf28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf2c:	2b09      	cmp	r3, #9
 800cf2e:	d802      	bhi.n	800cf36 <__hexdig_fun+0xe>
 800cf30:	3820      	subs	r0, #32
 800cf32:	b2c0      	uxtb	r0, r0
 800cf34:	4770      	bx	lr
 800cf36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d801      	bhi.n	800cf42 <__hexdig_fun+0x1a>
 800cf3e:	3847      	subs	r0, #71	; 0x47
 800cf40:	e7f7      	b.n	800cf32 <__hexdig_fun+0xa>
 800cf42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf46:	2b05      	cmp	r3, #5
 800cf48:	d801      	bhi.n	800cf4e <__hexdig_fun+0x26>
 800cf4a:	3827      	subs	r0, #39	; 0x27
 800cf4c:	e7f1      	b.n	800cf32 <__hexdig_fun+0xa>
 800cf4e:	2000      	movs	r0, #0
 800cf50:	4770      	bx	lr
	...

0800cf54 <__gethex>:
 800cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	ed2d 8b02 	vpush	{d8}
 800cf5c:	b089      	sub	sp, #36	; 0x24
 800cf5e:	ee08 0a10 	vmov	s16, r0
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	4bb4      	ldr	r3, [pc, #720]	; (800d238 <__gethex+0x2e4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	468b      	mov	fp, r1
 800cf6e:	4690      	mov	r8, r2
 800cf70:	f7f3 f936 	bl	80001e0 <strlen>
 800cf74:	9b01      	ldr	r3, [sp, #4]
 800cf76:	f8db 2000 	ldr.w	r2, [fp]
 800cf7a:	4403      	add	r3, r0
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	1c93      	adds	r3, r2, #2
 800cf86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf8e:	32fe      	adds	r2, #254	; 0xfe
 800cf90:	18d1      	adds	r1, r2, r3
 800cf92:	461f      	mov	r7, r3
 800cf94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf98:	9100      	str	r1, [sp, #0]
 800cf9a:	2830      	cmp	r0, #48	; 0x30
 800cf9c:	d0f8      	beq.n	800cf90 <__gethex+0x3c>
 800cf9e:	f7ff ffc3 	bl	800cf28 <__hexdig_fun>
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d13a      	bne.n	800d01e <__gethex+0xca>
 800cfa8:	9901      	ldr	r1, [sp, #4]
 800cfaa:	4652      	mov	r2, sl
 800cfac:	4638      	mov	r0, r7
 800cfae:	f001 f87f 	bl	800e0b0 <strncmp>
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d168      	bne.n	800d08a <__gethex+0x136>
 800cfb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cfbc:	eb07 060a 	add.w	r6, r7, sl
 800cfc0:	f7ff ffb2 	bl	800cf28 <__hexdig_fun>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d062      	beq.n	800d08e <__gethex+0x13a>
 800cfc8:	4633      	mov	r3, r6
 800cfca:	7818      	ldrb	r0, [r3, #0]
 800cfcc:	2830      	cmp	r0, #48	; 0x30
 800cfce:	461f      	mov	r7, r3
 800cfd0:	f103 0301 	add.w	r3, r3, #1
 800cfd4:	d0f9      	beq.n	800cfca <__gethex+0x76>
 800cfd6:	f7ff ffa7 	bl	800cf28 <__hexdig_fun>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	fab0 f480 	clz	r4, r0
 800cfe0:	0964      	lsrs	r4, r4, #5
 800cfe2:	4635      	mov	r5, r6
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	463a      	mov	r2, r7
 800cfe8:	4616      	mov	r6, r2
 800cfea:	3201      	adds	r2, #1
 800cfec:	7830      	ldrb	r0, [r6, #0]
 800cfee:	f7ff ff9b 	bl	800cf28 <__hexdig_fun>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d1f8      	bne.n	800cfe8 <__gethex+0x94>
 800cff6:	9901      	ldr	r1, [sp, #4]
 800cff8:	4652      	mov	r2, sl
 800cffa:	4630      	mov	r0, r6
 800cffc:	f001 f858 	bl	800e0b0 <strncmp>
 800d000:	b980      	cbnz	r0, 800d024 <__gethex+0xd0>
 800d002:	b94d      	cbnz	r5, 800d018 <__gethex+0xc4>
 800d004:	eb06 050a 	add.w	r5, r6, sl
 800d008:	462a      	mov	r2, r5
 800d00a:	4616      	mov	r6, r2
 800d00c:	3201      	adds	r2, #1
 800d00e:	7830      	ldrb	r0, [r6, #0]
 800d010:	f7ff ff8a 	bl	800cf28 <__hexdig_fun>
 800d014:	2800      	cmp	r0, #0
 800d016:	d1f8      	bne.n	800d00a <__gethex+0xb6>
 800d018:	1bad      	subs	r5, r5, r6
 800d01a:	00ad      	lsls	r5, r5, #2
 800d01c:	e004      	b.n	800d028 <__gethex+0xd4>
 800d01e:	2400      	movs	r4, #0
 800d020:	4625      	mov	r5, r4
 800d022:	e7e0      	b.n	800cfe6 <__gethex+0x92>
 800d024:	2d00      	cmp	r5, #0
 800d026:	d1f7      	bne.n	800d018 <__gethex+0xc4>
 800d028:	7833      	ldrb	r3, [r6, #0]
 800d02a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d02e:	2b50      	cmp	r3, #80	; 0x50
 800d030:	d13b      	bne.n	800d0aa <__gethex+0x156>
 800d032:	7873      	ldrb	r3, [r6, #1]
 800d034:	2b2b      	cmp	r3, #43	; 0x2b
 800d036:	d02c      	beq.n	800d092 <__gethex+0x13e>
 800d038:	2b2d      	cmp	r3, #45	; 0x2d
 800d03a:	d02e      	beq.n	800d09a <__gethex+0x146>
 800d03c:	1c71      	adds	r1, r6, #1
 800d03e:	f04f 0900 	mov.w	r9, #0
 800d042:	7808      	ldrb	r0, [r1, #0]
 800d044:	f7ff ff70 	bl	800cf28 <__hexdig_fun>
 800d048:	1e43      	subs	r3, r0, #1
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b18      	cmp	r3, #24
 800d04e:	d82c      	bhi.n	800d0aa <__gethex+0x156>
 800d050:	f1a0 0210 	sub.w	r2, r0, #16
 800d054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d058:	f7ff ff66 	bl	800cf28 <__hexdig_fun>
 800d05c:	1e43      	subs	r3, r0, #1
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b18      	cmp	r3, #24
 800d062:	d91d      	bls.n	800d0a0 <__gethex+0x14c>
 800d064:	f1b9 0f00 	cmp.w	r9, #0
 800d068:	d000      	beq.n	800d06c <__gethex+0x118>
 800d06a:	4252      	negs	r2, r2
 800d06c:	4415      	add	r5, r2
 800d06e:	f8cb 1000 	str.w	r1, [fp]
 800d072:	b1e4      	cbz	r4, 800d0ae <__gethex+0x15a>
 800d074:	9b00      	ldr	r3, [sp, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	bf14      	ite	ne
 800d07a:	2700      	movne	r7, #0
 800d07c:	2706      	moveq	r7, #6
 800d07e:	4638      	mov	r0, r7
 800d080:	b009      	add	sp, #36	; 0x24
 800d082:	ecbd 8b02 	vpop	{d8}
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08a:	463e      	mov	r6, r7
 800d08c:	4625      	mov	r5, r4
 800d08e:	2401      	movs	r4, #1
 800d090:	e7ca      	b.n	800d028 <__gethex+0xd4>
 800d092:	f04f 0900 	mov.w	r9, #0
 800d096:	1cb1      	adds	r1, r6, #2
 800d098:	e7d3      	b.n	800d042 <__gethex+0xee>
 800d09a:	f04f 0901 	mov.w	r9, #1
 800d09e:	e7fa      	b.n	800d096 <__gethex+0x142>
 800d0a0:	230a      	movs	r3, #10
 800d0a2:	fb03 0202 	mla	r2, r3, r2, r0
 800d0a6:	3a10      	subs	r2, #16
 800d0a8:	e7d4      	b.n	800d054 <__gethex+0x100>
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	e7df      	b.n	800d06e <__gethex+0x11a>
 800d0ae:	1bf3      	subs	r3, r6, r7
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	2b07      	cmp	r3, #7
 800d0b6:	dc0b      	bgt.n	800d0d0 <__gethex+0x17c>
 800d0b8:	ee18 0a10 	vmov	r0, s16
 800d0bc:	f000 fa72 	bl	800d5a4 <_Balloc>
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	b940      	cbnz	r0, 800d0d6 <__gethex+0x182>
 800d0c4:	4b5d      	ldr	r3, [pc, #372]	; (800d23c <__gethex+0x2e8>)
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	21de      	movs	r1, #222	; 0xde
 800d0ca:	485d      	ldr	r0, [pc, #372]	; (800d240 <__gethex+0x2ec>)
 800d0cc:	f001 f812 	bl	800e0f4 <__assert_func>
 800d0d0:	3101      	adds	r1, #1
 800d0d2:	105b      	asrs	r3, r3, #1
 800d0d4:	e7ee      	b.n	800d0b4 <__gethex+0x160>
 800d0d6:	f100 0914 	add.w	r9, r0, #20
 800d0da:	f04f 0b00 	mov.w	fp, #0
 800d0de:	f1ca 0301 	rsb	r3, sl, #1
 800d0e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0e6:	f8cd b000 	str.w	fp, [sp]
 800d0ea:	9306      	str	r3, [sp, #24]
 800d0ec:	42b7      	cmp	r7, r6
 800d0ee:	d340      	bcc.n	800d172 <__gethex+0x21e>
 800d0f0:	9802      	ldr	r0, [sp, #8]
 800d0f2:	9b00      	ldr	r3, [sp, #0]
 800d0f4:	f840 3b04 	str.w	r3, [r0], #4
 800d0f8:	eba0 0009 	sub.w	r0, r0, r9
 800d0fc:	1080      	asrs	r0, r0, #2
 800d0fe:	0146      	lsls	r6, r0, #5
 800d100:	6120      	str	r0, [r4, #16]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 fb40 	bl	800d788 <__hi0bits>
 800d108:	1a30      	subs	r0, r6, r0
 800d10a:	f8d8 6000 	ldr.w	r6, [r8]
 800d10e:	42b0      	cmp	r0, r6
 800d110:	dd63      	ble.n	800d1da <__gethex+0x286>
 800d112:	1b87      	subs	r7, r0, r6
 800d114:	4639      	mov	r1, r7
 800d116:	4620      	mov	r0, r4
 800d118:	f000 fee4 	bl	800dee4 <__any_on>
 800d11c:	4682      	mov	sl, r0
 800d11e:	b1a8      	cbz	r0, 800d14c <__gethex+0x1f8>
 800d120:	1e7b      	subs	r3, r7, #1
 800d122:	1159      	asrs	r1, r3, #5
 800d124:	f003 021f 	and.w	r2, r3, #31
 800d128:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d12c:	f04f 0a01 	mov.w	sl, #1
 800d130:	fa0a f202 	lsl.w	r2, sl, r2
 800d134:	420a      	tst	r2, r1
 800d136:	d009      	beq.n	800d14c <__gethex+0x1f8>
 800d138:	4553      	cmp	r3, sl
 800d13a:	dd05      	ble.n	800d148 <__gethex+0x1f4>
 800d13c:	1eb9      	subs	r1, r7, #2
 800d13e:	4620      	mov	r0, r4
 800d140:	f000 fed0 	bl	800dee4 <__any_on>
 800d144:	2800      	cmp	r0, #0
 800d146:	d145      	bne.n	800d1d4 <__gethex+0x280>
 800d148:	f04f 0a02 	mov.w	sl, #2
 800d14c:	4639      	mov	r1, r7
 800d14e:	4620      	mov	r0, r4
 800d150:	f7ff fe98 	bl	800ce84 <rshift>
 800d154:	443d      	add	r5, r7
 800d156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d15a:	42ab      	cmp	r3, r5
 800d15c:	da4c      	bge.n	800d1f8 <__gethex+0x2a4>
 800d15e:	ee18 0a10 	vmov	r0, s16
 800d162:	4621      	mov	r1, r4
 800d164:	f000 fa5e 	bl	800d624 <_Bfree>
 800d168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d16a:	2300      	movs	r3, #0
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	27a3      	movs	r7, #163	; 0xa3
 800d170:	e785      	b.n	800d07e <__gethex+0x12a>
 800d172:	1e73      	subs	r3, r6, #1
 800d174:	9a05      	ldr	r2, [sp, #20]
 800d176:	9303      	str	r3, [sp, #12]
 800d178:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d019      	beq.n	800d1b4 <__gethex+0x260>
 800d180:	f1bb 0f20 	cmp.w	fp, #32
 800d184:	d107      	bne.n	800d196 <__gethex+0x242>
 800d186:	9b02      	ldr	r3, [sp, #8]
 800d188:	9a00      	ldr	r2, [sp, #0]
 800d18a:	f843 2b04 	str.w	r2, [r3], #4
 800d18e:	9302      	str	r3, [sp, #8]
 800d190:	2300      	movs	r3, #0
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	469b      	mov	fp, r3
 800d196:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d19a:	f7ff fec5 	bl	800cf28 <__hexdig_fun>
 800d19e:	9b00      	ldr	r3, [sp, #0]
 800d1a0:	f000 000f 	and.w	r0, r0, #15
 800d1a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d1a8:	4303      	orrs	r3, r0
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	f10b 0b04 	add.w	fp, fp, #4
 800d1b0:	9b03      	ldr	r3, [sp, #12]
 800d1b2:	e00d      	b.n	800d1d0 <__gethex+0x27c>
 800d1b4:	9b03      	ldr	r3, [sp, #12]
 800d1b6:	9a06      	ldr	r2, [sp, #24]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	42bb      	cmp	r3, r7
 800d1bc:	d3e0      	bcc.n	800d180 <__gethex+0x22c>
 800d1be:	4618      	mov	r0, r3
 800d1c0:	9901      	ldr	r1, [sp, #4]
 800d1c2:	9307      	str	r3, [sp, #28]
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	f000 ff73 	bl	800e0b0 <strncmp>
 800d1ca:	9b07      	ldr	r3, [sp, #28]
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1d7      	bne.n	800d180 <__gethex+0x22c>
 800d1d0:	461e      	mov	r6, r3
 800d1d2:	e78b      	b.n	800d0ec <__gethex+0x198>
 800d1d4:	f04f 0a03 	mov.w	sl, #3
 800d1d8:	e7b8      	b.n	800d14c <__gethex+0x1f8>
 800d1da:	da0a      	bge.n	800d1f2 <__gethex+0x29e>
 800d1dc:	1a37      	subs	r7, r6, r0
 800d1de:	4621      	mov	r1, r4
 800d1e0:	ee18 0a10 	vmov	r0, s16
 800d1e4:	463a      	mov	r2, r7
 800d1e6:	f000 fc39 	bl	800da5c <__lshift>
 800d1ea:	1bed      	subs	r5, r5, r7
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	f100 0914 	add.w	r9, r0, #20
 800d1f2:	f04f 0a00 	mov.w	sl, #0
 800d1f6:	e7ae      	b.n	800d156 <__gethex+0x202>
 800d1f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1fc:	42a8      	cmp	r0, r5
 800d1fe:	dd72      	ble.n	800d2e6 <__gethex+0x392>
 800d200:	1b45      	subs	r5, r0, r5
 800d202:	42ae      	cmp	r6, r5
 800d204:	dc36      	bgt.n	800d274 <__gethex+0x320>
 800d206:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d02a      	beq.n	800d264 <__gethex+0x310>
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d02c      	beq.n	800d26c <__gethex+0x318>
 800d212:	2b01      	cmp	r3, #1
 800d214:	d11c      	bne.n	800d250 <__gethex+0x2fc>
 800d216:	42ae      	cmp	r6, r5
 800d218:	d11a      	bne.n	800d250 <__gethex+0x2fc>
 800d21a:	2e01      	cmp	r6, #1
 800d21c:	d112      	bne.n	800d244 <__gethex+0x2f0>
 800d21e:	9a04      	ldr	r2, [sp, #16]
 800d220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	2301      	movs	r3, #1
 800d228:	6123      	str	r3, [r4, #16]
 800d22a:	f8c9 3000 	str.w	r3, [r9]
 800d22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d230:	2762      	movs	r7, #98	; 0x62
 800d232:	601c      	str	r4, [r3, #0]
 800d234:	e723      	b.n	800d07e <__gethex+0x12a>
 800d236:	bf00      	nop
 800d238:	08010418 	.word	0x08010418
 800d23c:	080103a0 	.word	0x080103a0
 800d240:	080103b1 	.word	0x080103b1
 800d244:	1e71      	subs	r1, r6, #1
 800d246:	4620      	mov	r0, r4
 800d248:	f000 fe4c 	bl	800dee4 <__any_on>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d1e6      	bne.n	800d21e <__gethex+0x2ca>
 800d250:	ee18 0a10 	vmov	r0, s16
 800d254:	4621      	mov	r1, r4
 800d256:	f000 f9e5 	bl	800d624 <_Bfree>
 800d25a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d25c:	2300      	movs	r3, #0
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	2750      	movs	r7, #80	; 0x50
 800d262:	e70c      	b.n	800d07e <__gethex+0x12a>
 800d264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f2      	bne.n	800d250 <__gethex+0x2fc>
 800d26a:	e7d8      	b.n	800d21e <__gethex+0x2ca>
 800d26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1d5      	bne.n	800d21e <__gethex+0x2ca>
 800d272:	e7ed      	b.n	800d250 <__gethex+0x2fc>
 800d274:	1e6f      	subs	r7, r5, #1
 800d276:	f1ba 0f00 	cmp.w	sl, #0
 800d27a:	d131      	bne.n	800d2e0 <__gethex+0x38c>
 800d27c:	b127      	cbz	r7, 800d288 <__gethex+0x334>
 800d27e:	4639      	mov	r1, r7
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fe2f 	bl	800dee4 <__any_on>
 800d286:	4682      	mov	sl, r0
 800d288:	117b      	asrs	r3, r7, #5
 800d28a:	2101      	movs	r1, #1
 800d28c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d290:	f007 071f 	and.w	r7, r7, #31
 800d294:	fa01 f707 	lsl.w	r7, r1, r7
 800d298:	421f      	tst	r7, r3
 800d29a:	4629      	mov	r1, r5
 800d29c:	4620      	mov	r0, r4
 800d29e:	bf18      	it	ne
 800d2a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800d2a4:	1b76      	subs	r6, r6, r5
 800d2a6:	f7ff fded 	bl	800ce84 <rshift>
 800d2aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2ae:	2702      	movs	r7, #2
 800d2b0:	f1ba 0f00 	cmp.w	sl, #0
 800d2b4:	d048      	beq.n	800d348 <__gethex+0x3f4>
 800d2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d015      	beq.n	800d2ea <__gethex+0x396>
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	d017      	beq.n	800d2f2 <__gethex+0x39e>
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d109      	bne.n	800d2da <__gethex+0x386>
 800d2c6:	f01a 0f02 	tst.w	sl, #2
 800d2ca:	d006      	beq.n	800d2da <__gethex+0x386>
 800d2cc:	f8d9 0000 	ldr.w	r0, [r9]
 800d2d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800d2d4:	f01a 0f01 	tst.w	sl, #1
 800d2d8:	d10e      	bne.n	800d2f8 <__gethex+0x3a4>
 800d2da:	f047 0710 	orr.w	r7, r7, #16
 800d2de:	e033      	b.n	800d348 <__gethex+0x3f4>
 800d2e0:	f04f 0a01 	mov.w	sl, #1
 800d2e4:	e7d0      	b.n	800d288 <__gethex+0x334>
 800d2e6:	2701      	movs	r7, #1
 800d2e8:	e7e2      	b.n	800d2b0 <__gethex+0x35c>
 800d2ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2ec:	f1c3 0301 	rsb	r3, r3, #1
 800d2f0:	9315      	str	r3, [sp, #84]	; 0x54
 800d2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0f0      	beq.n	800d2da <__gethex+0x386>
 800d2f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2fc:	f104 0314 	add.w	r3, r4, #20
 800d300:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d304:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d308:	f04f 0c00 	mov.w	ip, #0
 800d30c:	4618      	mov	r0, r3
 800d30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d312:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d316:	d01c      	beq.n	800d352 <__gethex+0x3fe>
 800d318:	3201      	adds	r2, #1
 800d31a:	6002      	str	r2, [r0, #0]
 800d31c:	2f02      	cmp	r7, #2
 800d31e:	f104 0314 	add.w	r3, r4, #20
 800d322:	d13f      	bne.n	800d3a4 <__gethex+0x450>
 800d324:	f8d8 2000 	ldr.w	r2, [r8]
 800d328:	3a01      	subs	r2, #1
 800d32a:	42b2      	cmp	r2, r6
 800d32c:	d10a      	bne.n	800d344 <__gethex+0x3f0>
 800d32e:	1171      	asrs	r1, r6, #5
 800d330:	2201      	movs	r2, #1
 800d332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d336:	f006 061f 	and.w	r6, r6, #31
 800d33a:	fa02 f606 	lsl.w	r6, r2, r6
 800d33e:	421e      	tst	r6, r3
 800d340:	bf18      	it	ne
 800d342:	4617      	movne	r7, r2
 800d344:	f047 0720 	orr.w	r7, r7, #32
 800d348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d34a:	601c      	str	r4, [r3, #0]
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	601d      	str	r5, [r3, #0]
 800d350:	e695      	b.n	800d07e <__gethex+0x12a>
 800d352:	4299      	cmp	r1, r3
 800d354:	f843 cc04 	str.w	ip, [r3, #-4]
 800d358:	d8d8      	bhi.n	800d30c <__gethex+0x3b8>
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	459b      	cmp	fp, r3
 800d35e:	db19      	blt.n	800d394 <__gethex+0x440>
 800d360:	6861      	ldr	r1, [r4, #4]
 800d362:	ee18 0a10 	vmov	r0, s16
 800d366:	3101      	adds	r1, #1
 800d368:	f000 f91c 	bl	800d5a4 <_Balloc>
 800d36c:	4681      	mov	r9, r0
 800d36e:	b918      	cbnz	r0, 800d378 <__gethex+0x424>
 800d370:	4b1a      	ldr	r3, [pc, #104]	; (800d3dc <__gethex+0x488>)
 800d372:	4602      	mov	r2, r0
 800d374:	2184      	movs	r1, #132	; 0x84
 800d376:	e6a8      	b.n	800d0ca <__gethex+0x176>
 800d378:	6922      	ldr	r2, [r4, #16]
 800d37a:	3202      	adds	r2, #2
 800d37c:	f104 010c 	add.w	r1, r4, #12
 800d380:	0092      	lsls	r2, r2, #2
 800d382:	300c      	adds	r0, #12
 800d384:	f000 f900 	bl	800d588 <memcpy>
 800d388:	4621      	mov	r1, r4
 800d38a:	ee18 0a10 	vmov	r0, s16
 800d38e:	f000 f949 	bl	800d624 <_Bfree>
 800d392:	464c      	mov	r4, r9
 800d394:	6923      	ldr	r3, [r4, #16]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d39c:	6122      	str	r2, [r4, #16]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	615a      	str	r2, [r3, #20]
 800d3a2:	e7bb      	b.n	800d31c <__gethex+0x3c8>
 800d3a4:	6922      	ldr	r2, [r4, #16]
 800d3a6:	455a      	cmp	r2, fp
 800d3a8:	dd0b      	ble.n	800d3c2 <__gethex+0x46e>
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f7ff fd69 	bl	800ce84 <rshift>
 800d3b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3b6:	3501      	adds	r5, #1
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	f6ff aed0 	blt.w	800d15e <__gethex+0x20a>
 800d3be:	2701      	movs	r7, #1
 800d3c0:	e7c0      	b.n	800d344 <__gethex+0x3f0>
 800d3c2:	f016 061f 	ands.w	r6, r6, #31
 800d3c6:	d0fa      	beq.n	800d3be <__gethex+0x46a>
 800d3c8:	4453      	add	r3, sl
 800d3ca:	f1c6 0620 	rsb	r6, r6, #32
 800d3ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3d2:	f000 f9d9 	bl	800d788 <__hi0bits>
 800d3d6:	42b0      	cmp	r0, r6
 800d3d8:	dbe7      	blt.n	800d3aa <__gethex+0x456>
 800d3da:	e7f0      	b.n	800d3be <__gethex+0x46a>
 800d3dc:	080103a0 	.word	0x080103a0

0800d3e0 <L_shift>:
 800d3e0:	f1c2 0208 	rsb	r2, r2, #8
 800d3e4:	0092      	lsls	r2, r2, #2
 800d3e6:	b570      	push	{r4, r5, r6, lr}
 800d3e8:	f1c2 0620 	rsb	r6, r2, #32
 800d3ec:	6843      	ldr	r3, [r0, #4]
 800d3ee:	6804      	ldr	r4, [r0, #0]
 800d3f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d3f4:	432c      	orrs	r4, r5
 800d3f6:	40d3      	lsrs	r3, r2
 800d3f8:	6004      	str	r4, [r0, #0]
 800d3fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3fe:	4288      	cmp	r0, r1
 800d400:	d3f4      	bcc.n	800d3ec <L_shift+0xc>
 800d402:	bd70      	pop	{r4, r5, r6, pc}

0800d404 <__match>:
 800d404:	b530      	push	{r4, r5, lr}
 800d406:	6803      	ldr	r3, [r0, #0]
 800d408:	3301      	adds	r3, #1
 800d40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d40e:	b914      	cbnz	r4, 800d416 <__match+0x12>
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	2001      	movs	r0, #1
 800d414:	bd30      	pop	{r4, r5, pc}
 800d416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d41e:	2d19      	cmp	r5, #25
 800d420:	bf98      	it	ls
 800d422:	3220      	addls	r2, #32
 800d424:	42a2      	cmp	r2, r4
 800d426:	d0f0      	beq.n	800d40a <__match+0x6>
 800d428:	2000      	movs	r0, #0
 800d42a:	e7f3      	b.n	800d414 <__match+0x10>

0800d42c <__hexnan>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	680b      	ldr	r3, [r1, #0]
 800d432:	115e      	asrs	r6, r3, #5
 800d434:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d438:	f013 031f 	ands.w	r3, r3, #31
 800d43c:	b087      	sub	sp, #28
 800d43e:	bf18      	it	ne
 800d440:	3604      	addne	r6, #4
 800d442:	2500      	movs	r5, #0
 800d444:	1f37      	subs	r7, r6, #4
 800d446:	4690      	mov	r8, r2
 800d448:	6802      	ldr	r2, [r0, #0]
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	4682      	mov	sl, r0
 800d44e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d452:	46b9      	mov	r9, r7
 800d454:	463c      	mov	r4, r7
 800d456:	9502      	str	r5, [sp, #8]
 800d458:	46ab      	mov	fp, r5
 800d45a:	7851      	ldrb	r1, [r2, #1]
 800d45c:	1c53      	adds	r3, r2, #1
 800d45e:	9303      	str	r3, [sp, #12]
 800d460:	b341      	cbz	r1, 800d4b4 <__hexnan+0x88>
 800d462:	4608      	mov	r0, r1
 800d464:	9205      	str	r2, [sp, #20]
 800d466:	9104      	str	r1, [sp, #16]
 800d468:	f7ff fd5e 	bl	800cf28 <__hexdig_fun>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d14f      	bne.n	800d510 <__hexnan+0xe4>
 800d470:	9904      	ldr	r1, [sp, #16]
 800d472:	9a05      	ldr	r2, [sp, #20]
 800d474:	2920      	cmp	r1, #32
 800d476:	d818      	bhi.n	800d4aa <__hexnan+0x7e>
 800d478:	9b02      	ldr	r3, [sp, #8]
 800d47a:	459b      	cmp	fp, r3
 800d47c:	dd13      	ble.n	800d4a6 <__hexnan+0x7a>
 800d47e:	454c      	cmp	r4, r9
 800d480:	d206      	bcs.n	800d490 <__hexnan+0x64>
 800d482:	2d07      	cmp	r5, #7
 800d484:	dc04      	bgt.n	800d490 <__hexnan+0x64>
 800d486:	462a      	mov	r2, r5
 800d488:	4649      	mov	r1, r9
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7ff ffa8 	bl	800d3e0 <L_shift>
 800d490:	4544      	cmp	r4, r8
 800d492:	d950      	bls.n	800d536 <__hexnan+0x10a>
 800d494:	2300      	movs	r3, #0
 800d496:	f1a4 0904 	sub.w	r9, r4, #4
 800d49a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d49e:	f8cd b008 	str.w	fp, [sp, #8]
 800d4a2:	464c      	mov	r4, r9
 800d4a4:	461d      	mov	r5, r3
 800d4a6:	9a03      	ldr	r2, [sp, #12]
 800d4a8:	e7d7      	b.n	800d45a <__hexnan+0x2e>
 800d4aa:	2929      	cmp	r1, #41	; 0x29
 800d4ac:	d156      	bne.n	800d55c <__hexnan+0x130>
 800d4ae:	3202      	adds	r2, #2
 800d4b0:	f8ca 2000 	str.w	r2, [sl]
 800d4b4:	f1bb 0f00 	cmp.w	fp, #0
 800d4b8:	d050      	beq.n	800d55c <__hexnan+0x130>
 800d4ba:	454c      	cmp	r4, r9
 800d4bc:	d206      	bcs.n	800d4cc <__hexnan+0xa0>
 800d4be:	2d07      	cmp	r5, #7
 800d4c0:	dc04      	bgt.n	800d4cc <__hexnan+0xa0>
 800d4c2:	462a      	mov	r2, r5
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff ff8a 	bl	800d3e0 <L_shift>
 800d4cc:	4544      	cmp	r4, r8
 800d4ce:	d934      	bls.n	800d53a <__hexnan+0x10e>
 800d4d0:	f1a8 0204 	sub.w	r2, r8, #4
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4da:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4de:	429f      	cmp	r7, r3
 800d4e0:	d2f9      	bcs.n	800d4d6 <__hexnan+0xaa>
 800d4e2:	1b3b      	subs	r3, r7, r4
 800d4e4:	f023 0303 	bic.w	r3, r3, #3
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	3401      	adds	r4, #1
 800d4ec:	3e03      	subs	r6, #3
 800d4ee:	42b4      	cmp	r4, r6
 800d4f0:	bf88      	it	hi
 800d4f2:	2304      	movhi	r3, #4
 800d4f4:	4443      	add	r3, r8
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f843 2b04 	str.w	r2, [r3], #4
 800d4fc:	429f      	cmp	r7, r3
 800d4fe:	d2fb      	bcs.n	800d4f8 <__hexnan+0xcc>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	b91b      	cbnz	r3, 800d50c <__hexnan+0xe0>
 800d504:	4547      	cmp	r7, r8
 800d506:	d127      	bne.n	800d558 <__hexnan+0x12c>
 800d508:	2301      	movs	r3, #1
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	2005      	movs	r0, #5
 800d50e:	e026      	b.n	800d55e <__hexnan+0x132>
 800d510:	3501      	adds	r5, #1
 800d512:	2d08      	cmp	r5, #8
 800d514:	f10b 0b01 	add.w	fp, fp, #1
 800d518:	dd06      	ble.n	800d528 <__hexnan+0xfc>
 800d51a:	4544      	cmp	r4, r8
 800d51c:	d9c3      	bls.n	800d4a6 <__hexnan+0x7a>
 800d51e:	2300      	movs	r3, #0
 800d520:	f844 3c04 	str.w	r3, [r4, #-4]
 800d524:	2501      	movs	r5, #1
 800d526:	3c04      	subs	r4, #4
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	f000 000f 	and.w	r0, r0, #15
 800d52e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d532:	6022      	str	r2, [r4, #0]
 800d534:	e7b7      	b.n	800d4a6 <__hexnan+0x7a>
 800d536:	2508      	movs	r5, #8
 800d538:	e7b5      	b.n	800d4a6 <__hexnan+0x7a>
 800d53a:	9b01      	ldr	r3, [sp, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0df      	beq.n	800d500 <__hexnan+0xd4>
 800d540:	f04f 32ff 	mov.w	r2, #4294967295
 800d544:	f1c3 0320 	rsb	r3, r3, #32
 800d548:	fa22 f303 	lsr.w	r3, r2, r3
 800d54c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d550:	401a      	ands	r2, r3
 800d552:	f846 2c04 	str.w	r2, [r6, #-4]
 800d556:	e7d3      	b.n	800d500 <__hexnan+0xd4>
 800d558:	3f04      	subs	r7, #4
 800d55a:	e7d1      	b.n	800d500 <__hexnan+0xd4>
 800d55c:	2004      	movs	r0, #4
 800d55e:	b007      	add	sp, #28
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d564 <__ascii_mbtowc>:
 800d564:	b082      	sub	sp, #8
 800d566:	b901      	cbnz	r1, 800d56a <__ascii_mbtowc+0x6>
 800d568:	a901      	add	r1, sp, #4
 800d56a:	b142      	cbz	r2, 800d57e <__ascii_mbtowc+0x1a>
 800d56c:	b14b      	cbz	r3, 800d582 <__ascii_mbtowc+0x1e>
 800d56e:	7813      	ldrb	r3, [r2, #0]
 800d570:	600b      	str	r3, [r1, #0]
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	1e10      	subs	r0, r2, #0
 800d576:	bf18      	it	ne
 800d578:	2001      	movne	r0, #1
 800d57a:	b002      	add	sp, #8
 800d57c:	4770      	bx	lr
 800d57e:	4610      	mov	r0, r2
 800d580:	e7fb      	b.n	800d57a <__ascii_mbtowc+0x16>
 800d582:	f06f 0001 	mvn.w	r0, #1
 800d586:	e7f8      	b.n	800d57a <__ascii_mbtowc+0x16>

0800d588 <memcpy>:
 800d588:	440a      	add	r2, r1
 800d58a:	4291      	cmp	r1, r2
 800d58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d590:	d100      	bne.n	800d594 <memcpy+0xc>
 800d592:	4770      	bx	lr
 800d594:	b510      	push	{r4, lr}
 800d596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d59e:	4291      	cmp	r1, r2
 800d5a0:	d1f9      	bne.n	800d596 <memcpy+0xe>
 800d5a2:	bd10      	pop	{r4, pc}

0800d5a4 <_Balloc>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	b976      	cbnz	r6, 800d5cc <_Balloc+0x28>
 800d5ae:	2010      	movs	r0, #16
 800d5b0:	f000 fdd0 	bl	800e154 <malloc>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	6260      	str	r0, [r4, #36]	; 0x24
 800d5b8:	b920      	cbnz	r0, 800d5c4 <_Balloc+0x20>
 800d5ba:	4b18      	ldr	r3, [pc, #96]	; (800d61c <_Balloc+0x78>)
 800d5bc:	4818      	ldr	r0, [pc, #96]	; (800d620 <_Balloc+0x7c>)
 800d5be:	2166      	movs	r1, #102	; 0x66
 800d5c0:	f000 fd98 	bl	800e0f4 <__assert_func>
 800d5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5c8:	6006      	str	r6, [r0, #0]
 800d5ca:	60c6      	str	r6, [r0, #12]
 800d5cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5ce:	68f3      	ldr	r3, [r6, #12]
 800d5d0:	b183      	cbz	r3, 800d5f4 <_Balloc+0x50>
 800d5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5da:	b9b8      	cbnz	r0, 800d60c <_Balloc+0x68>
 800d5dc:	2101      	movs	r1, #1
 800d5de:	fa01 f605 	lsl.w	r6, r1, r5
 800d5e2:	1d72      	adds	r2, r6, #5
 800d5e4:	0092      	lsls	r2, r2, #2
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 fc9d 	bl	800df26 <_calloc_r>
 800d5ec:	b160      	cbz	r0, 800d608 <_Balloc+0x64>
 800d5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5f2:	e00e      	b.n	800d612 <_Balloc+0x6e>
 800d5f4:	2221      	movs	r2, #33	; 0x21
 800d5f6:	2104      	movs	r1, #4
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 fc94 	bl	800df26 <_calloc_r>
 800d5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d600:	60f0      	str	r0, [r6, #12]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d1e4      	bne.n	800d5d2 <_Balloc+0x2e>
 800d608:	2000      	movs	r0, #0
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	6802      	ldr	r2, [r0, #0]
 800d60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d612:	2300      	movs	r3, #0
 800d614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d618:	e7f7      	b.n	800d60a <_Balloc+0x66>
 800d61a:	bf00      	nop
 800d61c:	0801042c 	.word	0x0801042c
 800d620:	08010443 	.word	0x08010443

0800d624 <_Bfree>:
 800d624:	b570      	push	{r4, r5, r6, lr}
 800d626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d628:	4605      	mov	r5, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	b976      	cbnz	r6, 800d64c <_Bfree+0x28>
 800d62e:	2010      	movs	r0, #16
 800d630:	f000 fd90 	bl	800e154 <malloc>
 800d634:	4602      	mov	r2, r0
 800d636:	6268      	str	r0, [r5, #36]	; 0x24
 800d638:	b920      	cbnz	r0, 800d644 <_Bfree+0x20>
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <_Bfree+0x3c>)
 800d63c:	4809      	ldr	r0, [pc, #36]	; (800d664 <_Bfree+0x40>)
 800d63e:	218a      	movs	r1, #138	; 0x8a
 800d640:	f000 fd58 	bl	800e0f4 <__assert_func>
 800d644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d648:	6006      	str	r6, [r0, #0]
 800d64a:	60c6      	str	r6, [r0, #12]
 800d64c:	b13c      	cbz	r4, 800d65e <_Bfree+0x3a>
 800d64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d650:	6862      	ldr	r2, [r4, #4]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d658:	6021      	str	r1, [r4, #0]
 800d65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	0801042c 	.word	0x0801042c
 800d664:	08010443 	.word	0x08010443

0800d668 <__multadd>:
 800d668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66c:	690d      	ldr	r5, [r1, #16]
 800d66e:	4607      	mov	r7, r0
 800d670:	460c      	mov	r4, r1
 800d672:	461e      	mov	r6, r3
 800d674:	f101 0c14 	add.w	ip, r1, #20
 800d678:	2000      	movs	r0, #0
 800d67a:	f8dc 3000 	ldr.w	r3, [ip]
 800d67e:	b299      	uxth	r1, r3
 800d680:	fb02 6101 	mla	r1, r2, r1, r6
 800d684:	0c1e      	lsrs	r6, r3, #16
 800d686:	0c0b      	lsrs	r3, r1, #16
 800d688:	fb02 3306 	mla	r3, r2, r6, r3
 800d68c:	b289      	uxth	r1, r1
 800d68e:	3001      	adds	r0, #1
 800d690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d694:	4285      	cmp	r5, r0
 800d696:	f84c 1b04 	str.w	r1, [ip], #4
 800d69a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d69e:	dcec      	bgt.n	800d67a <__multadd+0x12>
 800d6a0:	b30e      	cbz	r6, 800d6e6 <__multadd+0x7e>
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	42ab      	cmp	r3, r5
 800d6a6:	dc19      	bgt.n	800d6dc <__multadd+0x74>
 800d6a8:	6861      	ldr	r1, [r4, #4]
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	3101      	adds	r1, #1
 800d6ae:	f7ff ff79 	bl	800d5a4 <_Balloc>
 800d6b2:	4680      	mov	r8, r0
 800d6b4:	b928      	cbnz	r0, 800d6c2 <__multadd+0x5a>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <__multadd+0x84>)
 800d6ba:	480d      	ldr	r0, [pc, #52]	; (800d6f0 <__multadd+0x88>)
 800d6bc:	21b5      	movs	r1, #181	; 0xb5
 800d6be:	f000 fd19 	bl	800e0f4 <__assert_func>
 800d6c2:	6922      	ldr	r2, [r4, #16]
 800d6c4:	3202      	adds	r2, #2
 800d6c6:	f104 010c 	add.w	r1, r4, #12
 800d6ca:	0092      	lsls	r2, r2, #2
 800d6cc:	300c      	adds	r0, #12
 800d6ce:	f7ff ff5b 	bl	800d588 <memcpy>
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	4638      	mov	r0, r7
 800d6d6:	f7ff ffa5 	bl	800d624 <_Bfree>
 800d6da:	4644      	mov	r4, r8
 800d6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6e0:	3501      	adds	r5, #1
 800d6e2:	615e      	str	r6, [r3, #20]
 800d6e4:	6125      	str	r5, [r4, #16]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ec:	080103a0 	.word	0x080103a0
 800d6f0:	08010443 	.word	0x08010443

0800d6f4 <__s2b>:
 800d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	4615      	mov	r5, r2
 800d6fc:	461f      	mov	r7, r3
 800d6fe:	2209      	movs	r2, #9
 800d700:	3308      	adds	r3, #8
 800d702:	4606      	mov	r6, r0
 800d704:	fb93 f3f2 	sdiv	r3, r3, r2
 800d708:	2100      	movs	r1, #0
 800d70a:	2201      	movs	r2, #1
 800d70c:	429a      	cmp	r2, r3
 800d70e:	db09      	blt.n	800d724 <__s2b+0x30>
 800d710:	4630      	mov	r0, r6
 800d712:	f7ff ff47 	bl	800d5a4 <_Balloc>
 800d716:	b940      	cbnz	r0, 800d72a <__s2b+0x36>
 800d718:	4602      	mov	r2, r0
 800d71a:	4b19      	ldr	r3, [pc, #100]	; (800d780 <__s2b+0x8c>)
 800d71c:	4819      	ldr	r0, [pc, #100]	; (800d784 <__s2b+0x90>)
 800d71e:	21ce      	movs	r1, #206	; 0xce
 800d720:	f000 fce8 	bl	800e0f4 <__assert_func>
 800d724:	0052      	lsls	r2, r2, #1
 800d726:	3101      	adds	r1, #1
 800d728:	e7f0      	b.n	800d70c <__s2b+0x18>
 800d72a:	9b08      	ldr	r3, [sp, #32]
 800d72c:	6143      	str	r3, [r0, #20]
 800d72e:	2d09      	cmp	r5, #9
 800d730:	f04f 0301 	mov.w	r3, #1
 800d734:	6103      	str	r3, [r0, #16]
 800d736:	dd16      	ble.n	800d766 <__s2b+0x72>
 800d738:	f104 0909 	add.w	r9, r4, #9
 800d73c:	46c8      	mov	r8, r9
 800d73e:	442c      	add	r4, r5
 800d740:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d744:	4601      	mov	r1, r0
 800d746:	3b30      	subs	r3, #48	; 0x30
 800d748:	220a      	movs	r2, #10
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff ff8c 	bl	800d668 <__multadd>
 800d750:	45a0      	cmp	r8, r4
 800d752:	d1f5      	bne.n	800d740 <__s2b+0x4c>
 800d754:	f1a5 0408 	sub.w	r4, r5, #8
 800d758:	444c      	add	r4, r9
 800d75a:	1b2d      	subs	r5, r5, r4
 800d75c:	1963      	adds	r3, r4, r5
 800d75e:	42bb      	cmp	r3, r7
 800d760:	db04      	blt.n	800d76c <__s2b+0x78>
 800d762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d766:	340a      	adds	r4, #10
 800d768:	2509      	movs	r5, #9
 800d76a:	e7f6      	b.n	800d75a <__s2b+0x66>
 800d76c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d770:	4601      	mov	r1, r0
 800d772:	3b30      	subs	r3, #48	; 0x30
 800d774:	220a      	movs	r2, #10
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff76 	bl	800d668 <__multadd>
 800d77c:	e7ee      	b.n	800d75c <__s2b+0x68>
 800d77e:	bf00      	nop
 800d780:	080103a0 	.word	0x080103a0
 800d784:	08010443 	.word	0x08010443

0800d788 <__hi0bits>:
 800d788:	0c03      	lsrs	r3, r0, #16
 800d78a:	041b      	lsls	r3, r3, #16
 800d78c:	b9d3      	cbnz	r3, 800d7c4 <__hi0bits+0x3c>
 800d78e:	0400      	lsls	r0, r0, #16
 800d790:	2310      	movs	r3, #16
 800d792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d796:	bf04      	itt	eq
 800d798:	0200      	lsleq	r0, r0, #8
 800d79a:	3308      	addeq	r3, #8
 800d79c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7a0:	bf04      	itt	eq
 800d7a2:	0100      	lsleq	r0, r0, #4
 800d7a4:	3304      	addeq	r3, #4
 800d7a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7aa:	bf04      	itt	eq
 800d7ac:	0080      	lsleq	r0, r0, #2
 800d7ae:	3302      	addeq	r3, #2
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	db05      	blt.n	800d7c0 <__hi0bits+0x38>
 800d7b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7b8:	f103 0301 	add.w	r3, r3, #1
 800d7bc:	bf08      	it	eq
 800d7be:	2320      	moveq	r3, #32
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	4770      	bx	lr
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	e7e4      	b.n	800d792 <__hi0bits+0xa>

0800d7c8 <__lo0bits>:
 800d7c8:	6803      	ldr	r3, [r0, #0]
 800d7ca:	f013 0207 	ands.w	r2, r3, #7
 800d7ce:	4601      	mov	r1, r0
 800d7d0:	d00b      	beq.n	800d7ea <__lo0bits+0x22>
 800d7d2:	07da      	lsls	r2, r3, #31
 800d7d4:	d423      	bmi.n	800d81e <__lo0bits+0x56>
 800d7d6:	0798      	lsls	r0, r3, #30
 800d7d8:	bf49      	itett	mi
 800d7da:	085b      	lsrmi	r3, r3, #1
 800d7dc:	089b      	lsrpl	r3, r3, #2
 800d7de:	2001      	movmi	r0, #1
 800d7e0:	600b      	strmi	r3, [r1, #0]
 800d7e2:	bf5c      	itt	pl
 800d7e4:	600b      	strpl	r3, [r1, #0]
 800d7e6:	2002      	movpl	r0, #2
 800d7e8:	4770      	bx	lr
 800d7ea:	b298      	uxth	r0, r3
 800d7ec:	b9a8      	cbnz	r0, 800d81a <__lo0bits+0x52>
 800d7ee:	0c1b      	lsrs	r3, r3, #16
 800d7f0:	2010      	movs	r0, #16
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	b90a      	cbnz	r2, 800d7fa <__lo0bits+0x32>
 800d7f6:	3008      	adds	r0, #8
 800d7f8:	0a1b      	lsrs	r3, r3, #8
 800d7fa:	071a      	lsls	r2, r3, #28
 800d7fc:	bf04      	itt	eq
 800d7fe:	091b      	lsreq	r3, r3, #4
 800d800:	3004      	addeq	r0, #4
 800d802:	079a      	lsls	r2, r3, #30
 800d804:	bf04      	itt	eq
 800d806:	089b      	lsreq	r3, r3, #2
 800d808:	3002      	addeq	r0, #2
 800d80a:	07da      	lsls	r2, r3, #31
 800d80c:	d403      	bmi.n	800d816 <__lo0bits+0x4e>
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	f100 0001 	add.w	r0, r0, #1
 800d814:	d005      	beq.n	800d822 <__lo0bits+0x5a>
 800d816:	600b      	str	r3, [r1, #0]
 800d818:	4770      	bx	lr
 800d81a:	4610      	mov	r0, r2
 800d81c:	e7e9      	b.n	800d7f2 <__lo0bits+0x2a>
 800d81e:	2000      	movs	r0, #0
 800d820:	4770      	bx	lr
 800d822:	2020      	movs	r0, #32
 800d824:	4770      	bx	lr
	...

0800d828 <__i2b>:
 800d828:	b510      	push	{r4, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	2101      	movs	r1, #1
 800d82e:	f7ff feb9 	bl	800d5a4 <_Balloc>
 800d832:	4602      	mov	r2, r0
 800d834:	b928      	cbnz	r0, 800d842 <__i2b+0x1a>
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <__i2b+0x24>)
 800d838:	4805      	ldr	r0, [pc, #20]	; (800d850 <__i2b+0x28>)
 800d83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d83e:	f000 fc59 	bl	800e0f4 <__assert_func>
 800d842:	2301      	movs	r3, #1
 800d844:	6144      	str	r4, [r0, #20]
 800d846:	6103      	str	r3, [r0, #16]
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	bf00      	nop
 800d84c:	080103a0 	.word	0x080103a0
 800d850:	08010443 	.word	0x08010443

0800d854 <__multiply>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	4691      	mov	r9, r2
 800d85a:	690a      	ldr	r2, [r1, #16]
 800d85c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d860:	429a      	cmp	r2, r3
 800d862:	bfb8      	it	lt
 800d864:	460b      	movlt	r3, r1
 800d866:	460c      	mov	r4, r1
 800d868:	bfbc      	itt	lt
 800d86a:	464c      	movlt	r4, r9
 800d86c:	4699      	movlt	r9, r3
 800d86e:	6927      	ldr	r7, [r4, #16]
 800d870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d874:	68a3      	ldr	r3, [r4, #8]
 800d876:	6861      	ldr	r1, [r4, #4]
 800d878:	eb07 060a 	add.w	r6, r7, sl
 800d87c:	42b3      	cmp	r3, r6
 800d87e:	b085      	sub	sp, #20
 800d880:	bfb8      	it	lt
 800d882:	3101      	addlt	r1, #1
 800d884:	f7ff fe8e 	bl	800d5a4 <_Balloc>
 800d888:	b930      	cbnz	r0, 800d898 <__multiply+0x44>
 800d88a:	4602      	mov	r2, r0
 800d88c:	4b44      	ldr	r3, [pc, #272]	; (800d9a0 <__multiply+0x14c>)
 800d88e:	4845      	ldr	r0, [pc, #276]	; (800d9a4 <__multiply+0x150>)
 800d890:	f240 115d 	movw	r1, #349	; 0x15d
 800d894:	f000 fc2e 	bl	800e0f4 <__assert_func>
 800d898:	f100 0514 	add.w	r5, r0, #20
 800d89c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	4543      	cmp	r3, r8
 800d8a6:	d321      	bcc.n	800d8ec <__multiply+0x98>
 800d8a8:	f104 0314 	add.w	r3, r4, #20
 800d8ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d8b0:	f109 0314 	add.w	r3, r9, #20
 800d8b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8b8:	9202      	str	r2, [sp, #8]
 800d8ba:	1b3a      	subs	r2, r7, r4
 800d8bc:	3a15      	subs	r2, #21
 800d8be:	f022 0203 	bic.w	r2, r2, #3
 800d8c2:	3204      	adds	r2, #4
 800d8c4:	f104 0115 	add.w	r1, r4, #21
 800d8c8:	428f      	cmp	r7, r1
 800d8ca:	bf38      	it	cc
 800d8cc:	2204      	movcc	r2, #4
 800d8ce:	9201      	str	r2, [sp, #4]
 800d8d0:	9a02      	ldr	r2, [sp, #8]
 800d8d2:	9303      	str	r3, [sp, #12]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d80c      	bhi.n	800d8f2 <__multiply+0x9e>
 800d8d8:	2e00      	cmp	r6, #0
 800d8da:	dd03      	ble.n	800d8e4 <__multiply+0x90>
 800d8dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d05a      	beq.n	800d99a <__multiply+0x146>
 800d8e4:	6106      	str	r6, [r0, #16]
 800d8e6:	b005      	add	sp, #20
 800d8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ec:	f843 2b04 	str.w	r2, [r3], #4
 800d8f0:	e7d8      	b.n	800d8a4 <__multiply+0x50>
 800d8f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8f6:	f1ba 0f00 	cmp.w	sl, #0
 800d8fa:	d024      	beq.n	800d946 <__multiply+0xf2>
 800d8fc:	f104 0e14 	add.w	lr, r4, #20
 800d900:	46a9      	mov	r9, r5
 800d902:	f04f 0c00 	mov.w	ip, #0
 800d906:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d90a:	f8d9 1000 	ldr.w	r1, [r9]
 800d90e:	fa1f fb82 	uxth.w	fp, r2
 800d912:	b289      	uxth	r1, r1
 800d914:	fb0a 110b 	mla	r1, sl, fp, r1
 800d918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d91c:	f8d9 2000 	ldr.w	r2, [r9]
 800d920:	4461      	add	r1, ip
 800d922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d926:	fb0a c20b 	mla	r2, sl, fp, ip
 800d92a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d92e:	b289      	uxth	r1, r1
 800d930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d934:	4577      	cmp	r7, lr
 800d936:	f849 1b04 	str.w	r1, [r9], #4
 800d93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d93e:	d8e2      	bhi.n	800d906 <__multiply+0xb2>
 800d940:	9a01      	ldr	r2, [sp, #4]
 800d942:	f845 c002 	str.w	ip, [r5, r2]
 800d946:	9a03      	ldr	r2, [sp, #12]
 800d948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d94c:	3304      	adds	r3, #4
 800d94e:	f1b9 0f00 	cmp.w	r9, #0
 800d952:	d020      	beq.n	800d996 <__multiply+0x142>
 800d954:	6829      	ldr	r1, [r5, #0]
 800d956:	f104 0c14 	add.w	ip, r4, #20
 800d95a:	46ae      	mov	lr, r5
 800d95c:	f04f 0a00 	mov.w	sl, #0
 800d960:	f8bc b000 	ldrh.w	fp, [ip]
 800d964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d968:	fb09 220b 	mla	r2, r9, fp, r2
 800d96c:	4492      	add	sl, r2
 800d96e:	b289      	uxth	r1, r1
 800d970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d974:	f84e 1b04 	str.w	r1, [lr], #4
 800d978:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d97c:	f8be 1000 	ldrh.w	r1, [lr]
 800d980:	0c12      	lsrs	r2, r2, #16
 800d982:	fb09 1102 	mla	r1, r9, r2, r1
 800d986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d98a:	4567      	cmp	r7, ip
 800d98c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d990:	d8e6      	bhi.n	800d960 <__multiply+0x10c>
 800d992:	9a01      	ldr	r2, [sp, #4]
 800d994:	50a9      	str	r1, [r5, r2]
 800d996:	3504      	adds	r5, #4
 800d998:	e79a      	b.n	800d8d0 <__multiply+0x7c>
 800d99a:	3e01      	subs	r6, #1
 800d99c:	e79c      	b.n	800d8d8 <__multiply+0x84>
 800d99e:	bf00      	nop
 800d9a0:	080103a0 	.word	0x080103a0
 800d9a4:	08010443 	.word	0x08010443

0800d9a8 <__pow5mult>:
 800d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	4615      	mov	r5, r2
 800d9ae:	f012 0203 	ands.w	r2, r2, #3
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	d007      	beq.n	800d9c8 <__pow5mult+0x20>
 800d9b8:	4c25      	ldr	r4, [pc, #148]	; (800da50 <__pow5mult+0xa8>)
 800d9ba:	3a01      	subs	r2, #1
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9c2:	f7ff fe51 	bl	800d668 <__multadd>
 800d9c6:	4607      	mov	r7, r0
 800d9c8:	10ad      	asrs	r5, r5, #2
 800d9ca:	d03d      	beq.n	800da48 <__pow5mult+0xa0>
 800d9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9ce:	b97c      	cbnz	r4, 800d9f0 <__pow5mult+0x48>
 800d9d0:	2010      	movs	r0, #16
 800d9d2:	f000 fbbf 	bl	800e154 <malloc>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d9da:	b928      	cbnz	r0, 800d9e8 <__pow5mult+0x40>
 800d9dc:	4b1d      	ldr	r3, [pc, #116]	; (800da54 <__pow5mult+0xac>)
 800d9de:	481e      	ldr	r0, [pc, #120]	; (800da58 <__pow5mult+0xb0>)
 800d9e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9e4:	f000 fb86 	bl	800e0f4 <__assert_func>
 800d9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9ec:	6004      	str	r4, [r0, #0]
 800d9ee:	60c4      	str	r4, [r0, #12]
 800d9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9f8:	b94c      	cbnz	r4, 800da0e <__pow5mult+0x66>
 800d9fa:	f240 2171 	movw	r1, #625	; 0x271
 800d9fe:	4630      	mov	r0, r6
 800da00:	f7ff ff12 	bl	800d828 <__i2b>
 800da04:	2300      	movs	r3, #0
 800da06:	f8c8 0008 	str.w	r0, [r8, #8]
 800da0a:	4604      	mov	r4, r0
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	f04f 0900 	mov.w	r9, #0
 800da12:	07eb      	lsls	r3, r5, #31
 800da14:	d50a      	bpl.n	800da2c <__pow5mult+0x84>
 800da16:	4639      	mov	r1, r7
 800da18:	4622      	mov	r2, r4
 800da1a:	4630      	mov	r0, r6
 800da1c:	f7ff ff1a 	bl	800d854 <__multiply>
 800da20:	4639      	mov	r1, r7
 800da22:	4680      	mov	r8, r0
 800da24:	4630      	mov	r0, r6
 800da26:	f7ff fdfd 	bl	800d624 <_Bfree>
 800da2a:	4647      	mov	r7, r8
 800da2c:	106d      	asrs	r5, r5, #1
 800da2e:	d00b      	beq.n	800da48 <__pow5mult+0xa0>
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	b938      	cbnz	r0, 800da44 <__pow5mult+0x9c>
 800da34:	4622      	mov	r2, r4
 800da36:	4621      	mov	r1, r4
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff ff0b 	bl	800d854 <__multiply>
 800da3e:	6020      	str	r0, [r4, #0]
 800da40:	f8c0 9000 	str.w	r9, [r0]
 800da44:	4604      	mov	r4, r0
 800da46:	e7e4      	b.n	800da12 <__pow5mult+0x6a>
 800da48:	4638      	mov	r0, r7
 800da4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da4e:	bf00      	nop
 800da50:	08010590 	.word	0x08010590
 800da54:	0801042c 	.word	0x0801042c
 800da58:	08010443 	.word	0x08010443

0800da5c <__lshift>:
 800da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da60:	460c      	mov	r4, r1
 800da62:	6849      	ldr	r1, [r1, #4]
 800da64:	6923      	ldr	r3, [r4, #16]
 800da66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da6a:	68a3      	ldr	r3, [r4, #8]
 800da6c:	4607      	mov	r7, r0
 800da6e:	4691      	mov	r9, r2
 800da70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da74:	f108 0601 	add.w	r6, r8, #1
 800da78:	42b3      	cmp	r3, r6
 800da7a:	db0b      	blt.n	800da94 <__lshift+0x38>
 800da7c:	4638      	mov	r0, r7
 800da7e:	f7ff fd91 	bl	800d5a4 <_Balloc>
 800da82:	4605      	mov	r5, r0
 800da84:	b948      	cbnz	r0, 800da9a <__lshift+0x3e>
 800da86:	4602      	mov	r2, r0
 800da88:	4b2a      	ldr	r3, [pc, #168]	; (800db34 <__lshift+0xd8>)
 800da8a:	482b      	ldr	r0, [pc, #172]	; (800db38 <__lshift+0xdc>)
 800da8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da90:	f000 fb30 	bl	800e0f4 <__assert_func>
 800da94:	3101      	adds	r1, #1
 800da96:	005b      	lsls	r3, r3, #1
 800da98:	e7ee      	b.n	800da78 <__lshift+0x1c>
 800da9a:	2300      	movs	r3, #0
 800da9c:	f100 0114 	add.w	r1, r0, #20
 800daa0:	f100 0210 	add.w	r2, r0, #16
 800daa4:	4618      	mov	r0, r3
 800daa6:	4553      	cmp	r3, sl
 800daa8:	db37      	blt.n	800db1a <__lshift+0xbe>
 800daaa:	6920      	ldr	r0, [r4, #16]
 800daac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dab0:	f104 0314 	add.w	r3, r4, #20
 800dab4:	f019 091f 	ands.w	r9, r9, #31
 800dab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dabc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dac0:	d02f      	beq.n	800db22 <__lshift+0xc6>
 800dac2:	f1c9 0e20 	rsb	lr, r9, #32
 800dac6:	468a      	mov	sl, r1
 800dac8:	f04f 0c00 	mov.w	ip, #0
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	fa02 f209 	lsl.w	r2, r2, r9
 800dad2:	ea42 020c 	orr.w	r2, r2, ip
 800dad6:	f84a 2b04 	str.w	r2, [sl], #4
 800dada:	f853 2b04 	ldr.w	r2, [r3], #4
 800dade:	4298      	cmp	r0, r3
 800dae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dae4:	d8f2      	bhi.n	800dacc <__lshift+0x70>
 800dae6:	1b03      	subs	r3, r0, r4
 800dae8:	3b15      	subs	r3, #21
 800daea:	f023 0303 	bic.w	r3, r3, #3
 800daee:	3304      	adds	r3, #4
 800daf0:	f104 0215 	add.w	r2, r4, #21
 800daf4:	4290      	cmp	r0, r2
 800daf6:	bf38      	it	cc
 800daf8:	2304      	movcc	r3, #4
 800dafa:	f841 c003 	str.w	ip, [r1, r3]
 800dafe:	f1bc 0f00 	cmp.w	ip, #0
 800db02:	d001      	beq.n	800db08 <__lshift+0xac>
 800db04:	f108 0602 	add.w	r6, r8, #2
 800db08:	3e01      	subs	r6, #1
 800db0a:	4638      	mov	r0, r7
 800db0c:	612e      	str	r6, [r5, #16]
 800db0e:	4621      	mov	r1, r4
 800db10:	f7ff fd88 	bl	800d624 <_Bfree>
 800db14:	4628      	mov	r0, r5
 800db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db1e:	3301      	adds	r3, #1
 800db20:	e7c1      	b.n	800daa6 <__lshift+0x4a>
 800db22:	3904      	subs	r1, #4
 800db24:	f853 2b04 	ldr.w	r2, [r3], #4
 800db28:	f841 2f04 	str.w	r2, [r1, #4]!
 800db2c:	4298      	cmp	r0, r3
 800db2e:	d8f9      	bhi.n	800db24 <__lshift+0xc8>
 800db30:	e7ea      	b.n	800db08 <__lshift+0xac>
 800db32:	bf00      	nop
 800db34:	080103a0 	.word	0x080103a0
 800db38:	08010443 	.word	0x08010443

0800db3c <__mcmp>:
 800db3c:	b530      	push	{r4, r5, lr}
 800db3e:	6902      	ldr	r2, [r0, #16]
 800db40:	690c      	ldr	r4, [r1, #16]
 800db42:	1b12      	subs	r2, r2, r4
 800db44:	d10e      	bne.n	800db64 <__mcmp+0x28>
 800db46:	f100 0314 	add.w	r3, r0, #20
 800db4a:	3114      	adds	r1, #20
 800db4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db5c:	42a5      	cmp	r5, r4
 800db5e:	d003      	beq.n	800db68 <__mcmp+0x2c>
 800db60:	d305      	bcc.n	800db6e <__mcmp+0x32>
 800db62:	2201      	movs	r2, #1
 800db64:	4610      	mov	r0, r2
 800db66:	bd30      	pop	{r4, r5, pc}
 800db68:	4283      	cmp	r3, r0
 800db6a:	d3f3      	bcc.n	800db54 <__mcmp+0x18>
 800db6c:	e7fa      	b.n	800db64 <__mcmp+0x28>
 800db6e:	f04f 32ff 	mov.w	r2, #4294967295
 800db72:	e7f7      	b.n	800db64 <__mcmp+0x28>

0800db74 <__mdiff>:
 800db74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	4606      	mov	r6, r0
 800db7c:	4611      	mov	r1, r2
 800db7e:	4620      	mov	r0, r4
 800db80:	4690      	mov	r8, r2
 800db82:	f7ff ffdb 	bl	800db3c <__mcmp>
 800db86:	1e05      	subs	r5, r0, #0
 800db88:	d110      	bne.n	800dbac <__mdiff+0x38>
 800db8a:	4629      	mov	r1, r5
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7ff fd09 	bl	800d5a4 <_Balloc>
 800db92:	b930      	cbnz	r0, 800dba2 <__mdiff+0x2e>
 800db94:	4b3a      	ldr	r3, [pc, #232]	; (800dc80 <__mdiff+0x10c>)
 800db96:	4602      	mov	r2, r0
 800db98:	f240 2132 	movw	r1, #562	; 0x232
 800db9c:	4839      	ldr	r0, [pc, #228]	; (800dc84 <__mdiff+0x110>)
 800db9e:	f000 faa9 	bl	800e0f4 <__assert_func>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	bfa4      	itt	ge
 800dbae:	4643      	movge	r3, r8
 800dbb0:	46a0      	movge	r8, r4
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbb8:	bfa6      	itte	ge
 800dbba:	461c      	movge	r4, r3
 800dbbc:	2500      	movge	r5, #0
 800dbbe:	2501      	movlt	r5, #1
 800dbc0:	f7ff fcf0 	bl	800d5a4 <_Balloc>
 800dbc4:	b920      	cbnz	r0, 800dbd0 <__mdiff+0x5c>
 800dbc6:	4b2e      	ldr	r3, [pc, #184]	; (800dc80 <__mdiff+0x10c>)
 800dbc8:	4602      	mov	r2, r0
 800dbca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbce:	e7e5      	b.n	800db9c <__mdiff+0x28>
 800dbd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbd4:	6926      	ldr	r6, [r4, #16]
 800dbd6:	60c5      	str	r5, [r0, #12]
 800dbd8:	f104 0914 	add.w	r9, r4, #20
 800dbdc:	f108 0514 	add.w	r5, r8, #20
 800dbe0:	f100 0e14 	add.w	lr, r0, #20
 800dbe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbec:	f108 0210 	add.w	r2, r8, #16
 800dbf0:	46f2      	mov	sl, lr
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbfc:	fa1f f883 	uxth.w	r8, r3
 800dc00:	fa11 f18b 	uxtah	r1, r1, fp
 800dc04:	0c1b      	lsrs	r3, r3, #16
 800dc06:	eba1 0808 	sub.w	r8, r1, r8
 800dc0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc12:	fa1f f888 	uxth.w	r8, r8
 800dc16:	1419      	asrs	r1, r3, #16
 800dc18:	454e      	cmp	r6, r9
 800dc1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc1e:	f84a 3b04 	str.w	r3, [sl], #4
 800dc22:	d8e7      	bhi.n	800dbf4 <__mdiff+0x80>
 800dc24:	1b33      	subs	r3, r6, r4
 800dc26:	3b15      	subs	r3, #21
 800dc28:	f023 0303 	bic.w	r3, r3, #3
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	3415      	adds	r4, #21
 800dc30:	42a6      	cmp	r6, r4
 800dc32:	bf38      	it	cc
 800dc34:	2304      	movcc	r3, #4
 800dc36:	441d      	add	r5, r3
 800dc38:	4473      	add	r3, lr
 800dc3a:	469e      	mov	lr, r3
 800dc3c:	462e      	mov	r6, r5
 800dc3e:	4566      	cmp	r6, ip
 800dc40:	d30e      	bcc.n	800dc60 <__mdiff+0xec>
 800dc42:	f10c 0203 	add.w	r2, ip, #3
 800dc46:	1b52      	subs	r2, r2, r5
 800dc48:	f022 0203 	bic.w	r2, r2, #3
 800dc4c:	3d03      	subs	r5, #3
 800dc4e:	45ac      	cmp	ip, r5
 800dc50:	bf38      	it	cc
 800dc52:	2200      	movcc	r2, #0
 800dc54:	441a      	add	r2, r3
 800dc56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc5a:	b17b      	cbz	r3, 800dc7c <__mdiff+0x108>
 800dc5c:	6107      	str	r7, [r0, #16]
 800dc5e:	e7a3      	b.n	800dba8 <__mdiff+0x34>
 800dc60:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc64:	fa11 f288 	uxtah	r2, r1, r8
 800dc68:	1414      	asrs	r4, r2, #16
 800dc6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc6e:	b292      	uxth	r2, r2
 800dc70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc74:	f84e 2b04 	str.w	r2, [lr], #4
 800dc78:	1421      	asrs	r1, r4, #16
 800dc7a:	e7e0      	b.n	800dc3e <__mdiff+0xca>
 800dc7c:	3f01      	subs	r7, #1
 800dc7e:	e7ea      	b.n	800dc56 <__mdiff+0xe2>
 800dc80:	080103a0 	.word	0x080103a0
 800dc84:	08010443 	.word	0x08010443

0800dc88 <__ulp>:
 800dc88:	b082      	sub	sp, #8
 800dc8a:	ed8d 0b00 	vstr	d0, [sp]
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	4912      	ldr	r1, [pc, #72]	; (800dcdc <__ulp+0x54>)
 800dc92:	4019      	ands	r1, r3
 800dc94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc98:	2900      	cmp	r1, #0
 800dc9a:	dd05      	ble.n	800dca8 <__ulp+0x20>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	ec43 2b10 	vmov	d0, r2, r3
 800dca4:	b002      	add	sp, #8
 800dca6:	4770      	bx	lr
 800dca8:	4249      	negs	r1, r1
 800dcaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dcae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dcb2:	f04f 0200 	mov.w	r2, #0
 800dcb6:	f04f 0300 	mov.w	r3, #0
 800dcba:	da04      	bge.n	800dcc6 <__ulp+0x3e>
 800dcbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dcc0:	fa41 f300 	asr.w	r3, r1, r0
 800dcc4:	e7ec      	b.n	800dca0 <__ulp+0x18>
 800dcc6:	f1a0 0114 	sub.w	r1, r0, #20
 800dcca:	291e      	cmp	r1, #30
 800dccc:	bfda      	itte	le
 800dcce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcd2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcd6:	2101      	movgt	r1, #1
 800dcd8:	460a      	mov	r2, r1
 800dcda:	e7e1      	b.n	800dca0 <__ulp+0x18>
 800dcdc:	7ff00000 	.word	0x7ff00000

0800dce0 <__b2d>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	6905      	ldr	r5, [r0, #16]
 800dce4:	f100 0714 	add.w	r7, r0, #20
 800dce8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dcec:	1f2e      	subs	r6, r5, #4
 800dcee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff fd48 	bl	800d788 <__hi0bits>
 800dcf8:	f1c0 0320 	rsb	r3, r0, #32
 800dcfc:	280a      	cmp	r0, #10
 800dcfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd7c <__b2d+0x9c>
 800dd02:	600b      	str	r3, [r1, #0]
 800dd04:	dc14      	bgt.n	800dd30 <__b2d+0x50>
 800dd06:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd0a:	fa24 f10e 	lsr.w	r1, r4, lr
 800dd0e:	42b7      	cmp	r7, r6
 800dd10:	ea41 030c 	orr.w	r3, r1, ip
 800dd14:	bf34      	ite	cc
 800dd16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd1a:	2100      	movcs	r1, #0
 800dd1c:	3015      	adds	r0, #21
 800dd1e:	fa04 f000 	lsl.w	r0, r4, r0
 800dd22:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd26:	ea40 0201 	orr.w	r2, r0, r1
 800dd2a:	ec43 2b10 	vmov	d0, r2, r3
 800dd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd30:	42b7      	cmp	r7, r6
 800dd32:	bf3a      	itte	cc
 800dd34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd38:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd3c:	2100      	movcs	r1, #0
 800dd3e:	380b      	subs	r0, #11
 800dd40:	d017      	beq.n	800dd72 <__b2d+0x92>
 800dd42:	f1c0 0c20 	rsb	ip, r0, #32
 800dd46:	fa04 f500 	lsl.w	r5, r4, r0
 800dd4a:	42be      	cmp	r6, r7
 800dd4c:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd50:	ea45 0504 	orr.w	r5, r5, r4
 800dd54:	bf8c      	ite	hi
 800dd56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd5a:	2400      	movls	r4, #0
 800dd5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd60:	fa01 f000 	lsl.w	r0, r1, r0
 800dd64:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd6c:	ea40 0204 	orr.w	r2, r0, r4
 800dd70:	e7db      	b.n	800dd2a <__b2d+0x4a>
 800dd72:	ea44 030c 	orr.w	r3, r4, ip
 800dd76:	460a      	mov	r2, r1
 800dd78:	e7d7      	b.n	800dd2a <__b2d+0x4a>
 800dd7a:	bf00      	nop
 800dd7c:	3ff00000 	.word	0x3ff00000

0800dd80 <__d2b>:
 800dd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd84:	4689      	mov	r9, r1
 800dd86:	2101      	movs	r1, #1
 800dd88:	ec57 6b10 	vmov	r6, r7, d0
 800dd8c:	4690      	mov	r8, r2
 800dd8e:	f7ff fc09 	bl	800d5a4 <_Balloc>
 800dd92:	4604      	mov	r4, r0
 800dd94:	b930      	cbnz	r0, 800dda4 <__d2b+0x24>
 800dd96:	4602      	mov	r2, r0
 800dd98:	4b25      	ldr	r3, [pc, #148]	; (800de30 <__d2b+0xb0>)
 800dd9a:	4826      	ldr	r0, [pc, #152]	; (800de34 <__d2b+0xb4>)
 800dd9c:	f240 310a 	movw	r1, #778	; 0x30a
 800dda0:	f000 f9a8 	bl	800e0f4 <__assert_func>
 800dda4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dda8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddac:	bb35      	cbnz	r5, 800ddfc <__d2b+0x7c>
 800ddae:	2e00      	cmp	r6, #0
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	d028      	beq.n	800de06 <__d2b+0x86>
 800ddb4:	4668      	mov	r0, sp
 800ddb6:	9600      	str	r6, [sp, #0]
 800ddb8:	f7ff fd06 	bl	800d7c8 <__lo0bits>
 800ddbc:	9900      	ldr	r1, [sp, #0]
 800ddbe:	b300      	cbz	r0, 800de02 <__d2b+0x82>
 800ddc0:	9a01      	ldr	r2, [sp, #4]
 800ddc2:	f1c0 0320 	rsb	r3, r0, #32
 800ddc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddca:	430b      	orrs	r3, r1
 800ddcc:	40c2      	lsrs	r2, r0
 800ddce:	6163      	str	r3, [r4, #20]
 800ddd0:	9201      	str	r2, [sp, #4]
 800ddd2:	9b01      	ldr	r3, [sp, #4]
 800ddd4:	61a3      	str	r3, [r4, #24]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	bf14      	ite	ne
 800ddda:	2202      	movne	r2, #2
 800dddc:	2201      	moveq	r2, #1
 800ddde:	6122      	str	r2, [r4, #16]
 800dde0:	b1d5      	cbz	r5, 800de18 <__d2b+0x98>
 800dde2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dde6:	4405      	add	r5, r0
 800dde8:	f8c9 5000 	str.w	r5, [r9]
 800ddec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddf0:	f8c8 0000 	str.w	r0, [r8]
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	b003      	add	sp, #12
 800ddf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de00:	e7d5      	b.n	800ddae <__d2b+0x2e>
 800de02:	6161      	str	r1, [r4, #20]
 800de04:	e7e5      	b.n	800ddd2 <__d2b+0x52>
 800de06:	a801      	add	r0, sp, #4
 800de08:	f7ff fcde 	bl	800d7c8 <__lo0bits>
 800de0c:	9b01      	ldr	r3, [sp, #4]
 800de0e:	6163      	str	r3, [r4, #20]
 800de10:	2201      	movs	r2, #1
 800de12:	6122      	str	r2, [r4, #16]
 800de14:	3020      	adds	r0, #32
 800de16:	e7e3      	b.n	800dde0 <__d2b+0x60>
 800de18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de20:	f8c9 0000 	str.w	r0, [r9]
 800de24:	6918      	ldr	r0, [r3, #16]
 800de26:	f7ff fcaf 	bl	800d788 <__hi0bits>
 800de2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de2e:	e7df      	b.n	800ddf0 <__d2b+0x70>
 800de30:	080103a0 	.word	0x080103a0
 800de34:	08010443 	.word	0x08010443

0800de38 <__ratio>:
 800de38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	4688      	mov	r8, r1
 800de3e:	4669      	mov	r1, sp
 800de40:	4681      	mov	r9, r0
 800de42:	f7ff ff4d 	bl	800dce0 <__b2d>
 800de46:	a901      	add	r1, sp, #4
 800de48:	4640      	mov	r0, r8
 800de4a:	ec55 4b10 	vmov	r4, r5, d0
 800de4e:	f7ff ff47 	bl	800dce0 <__b2d>
 800de52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de5a:	eba3 0c02 	sub.w	ip, r3, r2
 800de5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de68:	ec51 0b10 	vmov	r0, r1, d0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	bfd6      	itet	le
 800de70:	460a      	movle	r2, r1
 800de72:	462a      	movgt	r2, r5
 800de74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de78:	468b      	mov	fp, r1
 800de7a:	462f      	mov	r7, r5
 800de7c:	bfd4      	ite	le
 800de7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de86:	4620      	mov	r0, r4
 800de88:	ee10 2a10 	vmov	r2, s0
 800de8c:	465b      	mov	r3, fp
 800de8e:	4639      	mov	r1, r7
 800de90:	f7f2 fce4 	bl	800085c <__aeabi_ddiv>
 800de94:	ec41 0b10 	vmov	d0, r0, r1
 800de98:	b003      	add	sp, #12
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de9e <__copybits>:
 800de9e:	3901      	subs	r1, #1
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	1149      	asrs	r1, r1, #5
 800dea4:	6914      	ldr	r4, [r2, #16]
 800dea6:	3101      	adds	r1, #1
 800dea8:	f102 0314 	add.w	r3, r2, #20
 800deac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800deb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800deb4:	1f05      	subs	r5, r0, #4
 800deb6:	42a3      	cmp	r3, r4
 800deb8:	d30c      	bcc.n	800ded4 <__copybits+0x36>
 800deba:	1aa3      	subs	r3, r4, r2
 800debc:	3b11      	subs	r3, #17
 800debe:	f023 0303 	bic.w	r3, r3, #3
 800dec2:	3211      	adds	r2, #17
 800dec4:	42a2      	cmp	r2, r4
 800dec6:	bf88      	it	hi
 800dec8:	2300      	movhi	r3, #0
 800deca:	4418      	add	r0, r3
 800decc:	2300      	movs	r3, #0
 800dece:	4288      	cmp	r0, r1
 800ded0:	d305      	bcc.n	800dede <__copybits+0x40>
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	f853 6b04 	ldr.w	r6, [r3], #4
 800ded8:	f845 6f04 	str.w	r6, [r5, #4]!
 800dedc:	e7eb      	b.n	800deb6 <__copybits+0x18>
 800dede:	f840 3b04 	str.w	r3, [r0], #4
 800dee2:	e7f4      	b.n	800dece <__copybits+0x30>

0800dee4 <__any_on>:
 800dee4:	f100 0214 	add.w	r2, r0, #20
 800dee8:	6900      	ldr	r0, [r0, #16]
 800deea:	114b      	asrs	r3, r1, #5
 800deec:	4298      	cmp	r0, r3
 800deee:	b510      	push	{r4, lr}
 800def0:	db11      	blt.n	800df16 <__any_on+0x32>
 800def2:	dd0a      	ble.n	800df0a <__any_on+0x26>
 800def4:	f011 011f 	ands.w	r1, r1, #31
 800def8:	d007      	beq.n	800df0a <__any_on+0x26>
 800defa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800defe:	fa24 f001 	lsr.w	r0, r4, r1
 800df02:	fa00 f101 	lsl.w	r1, r0, r1
 800df06:	428c      	cmp	r4, r1
 800df08:	d10b      	bne.n	800df22 <__any_on+0x3e>
 800df0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df0e:	4293      	cmp	r3, r2
 800df10:	d803      	bhi.n	800df1a <__any_on+0x36>
 800df12:	2000      	movs	r0, #0
 800df14:	bd10      	pop	{r4, pc}
 800df16:	4603      	mov	r3, r0
 800df18:	e7f7      	b.n	800df0a <__any_on+0x26>
 800df1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df1e:	2900      	cmp	r1, #0
 800df20:	d0f5      	beq.n	800df0e <__any_on+0x2a>
 800df22:	2001      	movs	r0, #1
 800df24:	e7f6      	b.n	800df14 <__any_on+0x30>

0800df26 <_calloc_r>:
 800df26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df28:	fba1 2402 	umull	r2, r4, r1, r2
 800df2c:	b94c      	cbnz	r4, 800df42 <_calloc_r+0x1c>
 800df2e:	4611      	mov	r1, r2
 800df30:	9201      	str	r2, [sp, #4]
 800df32:	f000 f82f 	bl	800df94 <_malloc_r>
 800df36:	9a01      	ldr	r2, [sp, #4]
 800df38:	4605      	mov	r5, r0
 800df3a:	b930      	cbnz	r0, 800df4a <_calloc_r+0x24>
 800df3c:	4628      	mov	r0, r5
 800df3e:	b003      	add	sp, #12
 800df40:	bd30      	pop	{r4, r5, pc}
 800df42:	220c      	movs	r2, #12
 800df44:	6002      	str	r2, [r0, #0]
 800df46:	2500      	movs	r5, #0
 800df48:	e7f8      	b.n	800df3c <_calloc_r+0x16>
 800df4a:	4621      	mov	r1, r4
 800df4c:	f7fe f962 	bl	800c214 <memset>
 800df50:	e7f4      	b.n	800df3c <_calloc_r+0x16>
	...

0800df54 <sbrk_aligned>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	4e0e      	ldr	r6, [pc, #56]	; (800df90 <sbrk_aligned+0x3c>)
 800df58:	460c      	mov	r4, r1
 800df5a:	6831      	ldr	r1, [r6, #0]
 800df5c:	4605      	mov	r5, r0
 800df5e:	b911      	cbnz	r1, 800df66 <sbrk_aligned+0x12>
 800df60:	f000 f896 	bl	800e090 <_sbrk_r>
 800df64:	6030      	str	r0, [r6, #0]
 800df66:	4621      	mov	r1, r4
 800df68:	4628      	mov	r0, r5
 800df6a:	f000 f891 	bl	800e090 <_sbrk_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	d00a      	beq.n	800df88 <sbrk_aligned+0x34>
 800df72:	1cc4      	adds	r4, r0, #3
 800df74:	f024 0403 	bic.w	r4, r4, #3
 800df78:	42a0      	cmp	r0, r4
 800df7a:	d007      	beq.n	800df8c <sbrk_aligned+0x38>
 800df7c:	1a21      	subs	r1, r4, r0
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 f886 	bl	800e090 <_sbrk_r>
 800df84:	3001      	adds	r0, #1
 800df86:	d101      	bne.n	800df8c <sbrk_aligned+0x38>
 800df88:	f04f 34ff 	mov.w	r4, #4294967295
 800df8c:	4620      	mov	r0, r4
 800df8e:	bd70      	pop	{r4, r5, r6, pc}
 800df90:	200008a0 	.word	0x200008a0

0800df94 <_malloc_r>:
 800df94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df98:	1ccd      	adds	r5, r1, #3
 800df9a:	f025 0503 	bic.w	r5, r5, #3
 800df9e:	3508      	adds	r5, #8
 800dfa0:	2d0c      	cmp	r5, #12
 800dfa2:	bf38      	it	cc
 800dfa4:	250c      	movcc	r5, #12
 800dfa6:	2d00      	cmp	r5, #0
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	db01      	blt.n	800dfb0 <_malloc_r+0x1c>
 800dfac:	42a9      	cmp	r1, r5
 800dfae:	d905      	bls.n	800dfbc <_malloc_r+0x28>
 800dfb0:	230c      	movs	r3, #12
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	4e2e      	ldr	r6, [pc, #184]	; (800e078 <_malloc_r+0xe4>)
 800dfbe:	f000 f8d1 	bl	800e164 <__malloc_lock>
 800dfc2:	6833      	ldr	r3, [r6, #0]
 800dfc4:	461c      	mov	r4, r3
 800dfc6:	bb34      	cbnz	r4, 800e016 <_malloc_r+0x82>
 800dfc8:	4629      	mov	r1, r5
 800dfca:	4638      	mov	r0, r7
 800dfcc:	f7ff ffc2 	bl	800df54 <sbrk_aligned>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	d14d      	bne.n	800e072 <_malloc_r+0xde>
 800dfd6:	6834      	ldr	r4, [r6, #0]
 800dfd8:	4626      	mov	r6, r4
 800dfda:	2e00      	cmp	r6, #0
 800dfdc:	d140      	bne.n	800e060 <_malloc_r+0xcc>
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	eb04 0803 	add.w	r8, r4, r3
 800dfe8:	f000 f852 	bl	800e090 <_sbrk_r>
 800dfec:	4580      	cmp	r8, r0
 800dfee:	d13a      	bne.n	800e066 <_malloc_r+0xd2>
 800dff0:	6821      	ldr	r1, [r4, #0]
 800dff2:	3503      	adds	r5, #3
 800dff4:	1a6d      	subs	r5, r5, r1
 800dff6:	f025 0503 	bic.w	r5, r5, #3
 800dffa:	3508      	adds	r5, #8
 800dffc:	2d0c      	cmp	r5, #12
 800dffe:	bf38      	it	cc
 800e000:	250c      	movcc	r5, #12
 800e002:	4629      	mov	r1, r5
 800e004:	4638      	mov	r0, r7
 800e006:	f7ff ffa5 	bl	800df54 <sbrk_aligned>
 800e00a:	3001      	adds	r0, #1
 800e00c:	d02b      	beq.n	800e066 <_malloc_r+0xd2>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	442b      	add	r3, r5
 800e012:	6023      	str	r3, [r4, #0]
 800e014:	e00e      	b.n	800e034 <_malloc_r+0xa0>
 800e016:	6822      	ldr	r2, [r4, #0]
 800e018:	1b52      	subs	r2, r2, r5
 800e01a:	d41e      	bmi.n	800e05a <_malloc_r+0xc6>
 800e01c:	2a0b      	cmp	r2, #11
 800e01e:	d916      	bls.n	800e04e <_malloc_r+0xba>
 800e020:	1961      	adds	r1, r4, r5
 800e022:	42a3      	cmp	r3, r4
 800e024:	6025      	str	r5, [r4, #0]
 800e026:	bf18      	it	ne
 800e028:	6059      	strne	r1, [r3, #4]
 800e02a:	6863      	ldr	r3, [r4, #4]
 800e02c:	bf08      	it	eq
 800e02e:	6031      	streq	r1, [r6, #0]
 800e030:	5162      	str	r2, [r4, r5]
 800e032:	604b      	str	r3, [r1, #4]
 800e034:	4638      	mov	r0, r7
 800e036:	f104 060b 	add.w	r6, r4, #11
 800e03a:	f000 f899 	bl	800e170 <__malloc_unlock>
 800e03e:	f026 0607 	bic.w	r6, r6, #7
 800e042:	1d23      	adds	r3, r4, #4
 800e044:	1af2      	subs	r2, r6, r3
 800e046:	d0b6      	beq.n	800dfb6 <_malloc_r+0x22>
 800e048:	1b9b      	subs	r3, r3, r6
 800e04a:	50a3      	str	r3, [r4, r2]
 800e04c:	e7b3      	b.n	800dfb6 <_malloc_r+0x22>
 800e04e:	6862      	ldr	r2, [r4, #4]
 800e050:	42a3      	cmp	r3, r4
 800e052:	bf0c      	ite	eq
 800e054:	6032      	streq	r2, [r6, #0]
 800e056:	605a      	strne	r2, [r3, #4]
 800e058:	e7ec      	b.n	800e034 <_malloc_r+0xa0>
 800e05a:	4623      	mov	r3, r4
 800e05c:	6864      	ldr	r4, [r4, #4]
 800e05e:	e7b2      	b.n	800dfc6 <_malloc_r+0x32>
 800e060:	4634      	mov	r4, r6
 800e062:	6876      	ldr	r6, [r6, #4]
 800e064:	e7b9      	b.n	800dfda <_malloc_r+0x46>
 800e066:	230c      	movs	r3, #12
 800e068:	603b      	str	r3, [r7, #0]
 800e06a:	4638      	mov	r0, r7
 800e06c:	f000 f880 	bl	800e170 <__malloc_unlock>
 800e070:	e7a1      	b.n	800dfb6 <_malloc_r+0x22>
 800e072:	6025      	str	r5, [r4, #0]
 800e074:	e7de      	b.n	800e034 <_malloc_r+0xa0>
 800e076:	bf00      	nop
 800e078:	2000089c 	.word	0x2000089c
 800e07c:	00000000 	.word	0x00000000

0800e080 <nan>:
 800e080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e088 <nan+0x8>
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	00000000 	.word	0x00000000
 800e08c:	7ff80000 	.word	0x7ff80000

0800e090 <_sbrk_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d06      	ldr	r5, [pc, #24]	; (800e0ac <_sbrk_r+0x1c>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7f7 fd9c 	bl	8005bd8 <_sbrk>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_sbrk_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_sbrk_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	200008a4 	.word	0x200008a4

0800e0b0 <strncmp>:
 800e0b0:	b510      	push	{r4, lr}
 800e0b2:	b17a      	cbz	r2, 800e0d4 <strncmp+0x24>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	3901      	subs	r1, #1
 800e0b8:	1884      	adds	r4, r0, r2
 800e0ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e0be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e0c2:	4290      	cmp	r0, r2
 800e0c4:	d101      	bne.n	800e0ca <strncmp+0x1a>
 800e0c6:	42a3      	cmp	r3, r4
 800e0c8:	d101      	bne.n	800e0ce <strncmp+0x1e>
 800e0ca:	1a80      	subs	r0, r0, r2
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d1f3      	bne.n	800e0ba <strncmp+0xa>
 800e0d2:	e7fa      	b.n	800e0ca <strncmp+0x1a>
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	e7f9      	b.n	800e0cc <strncmp+0x1c>

0800e0d8 <__ascii_wctomb>:
 800e0d8:	b149      	cbz	r1, 800e0ee <__ascii_wctomb+0x16>
 800e0da:	2aff      	cmp	r2, #255	; 0xff
 800e0dc:	bf85      	ittet	hi
 800e0de:	238a      	movhi	r3, #138	; 0x8a
 800e0e0:	6003      	strhi	r3, [r0, #0]
 800e0e2:	700a      	strbls	r2, [r1, #0]
 800e0e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0e8:	bf98      	it	ls
 800e0ea:	2001      	movls	r0, #1
 800e0ec:	4770      	bx	lr
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	4770      	bx	lr
	...

0800e0f4 <__assert_func>:
 800e0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0f6:	4614      	mov	r4, r2
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <__assert_func+0x2c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4605      	mov	r5, r0
 800e100:	68d8      	ldr	r0, [r3, #12]
 800e102:	b14c      	cbz	r4, 800e118 <__assert_func+0x24>
 800e104:	4b07      	ldr	r3, [pc, #28]	; (800e124 <__assert_func+0x30>)
 800e106:	9100      	str	r1, [sp, #0]
 800e108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e10c:	4906      	ldr	r1, [pc, #24]	; (800e128 <__assert_func+0x34>)
 800e10e:	462b      	mov	r3, r5
 800e110:	f000 f80e 	bl	800e130 <fiprintf>
 800e114:	f000 fc2c 	bl	800e970 <abort>
 800e118:	4b04      	ldr	r3, [pc, #16]	; (800e12c <__assert_func+0x38>)
 800e11a:	461c      	mov	r4, r3
 800e11c:	e7f3      	b.n	800e106 <__assert_func+0x12>
 800e11e:	bf00      	nop
 800e120:	2000006c 	.word	0x2000006c
 800e124:	0801059c 	.word	0x0801059c
 800e128:	080105a9 	.word	0x080105a9
 800e12c:	080105d7 	.word	0x080105d7

0800e130 <fiprintf>:
 800e130:	b40e      	push	{r1, r2, r3}
 800e132:	b503      	push	{r0, r1, lr}
 800e134:	4601      	mov	r1, r0
 800e136:	ab03      	add	r3, sp, #12
 800e138:	4805      	ldr	r0, [pc, #20]	; (800e150 <fiprintf+0x20>)
 800e13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	f000 f891 	bl	800e268 <_vfiprintf_r>
 800e146:	b002      	add	sp, #8
 800e148:	f85d eb04 	ldr.w	lr, [sp], #4
 800e14c:	b003      	add	sp, #12
 800e14e:	4770      	bx	lr
 800e150:	2000006c 	.word	0x2000006c

0800e154 <malloc>:
 800e154:	4b02      	ldr	r3, [pc, #8]	; (800e160 <malloc+0xc>)
 800e156:	4601      	mov	r1, r0
 800e158:	6818      	ldr	r0, [r3, #0]
 800e15a:	f7ff bf1b 	b.w	800df94 <_malloc_r>
 800e15e:	bf00      	nop
 800e160:	2000006c 	.word	0x2000006c

0800e164 <__malloc_lock>:
 800e164:	4801      	ldr	r0, [pc, #4]	; (800e16c <__malloc_lock+0x8>)
 800e166:	f000 bdc3 	b.w	800ecf0 <__retarget_lock_acquire_recursive>
 800e16a:	bf00      	nop
 800e16c:	200008a8 	.word	0x200008a8

0800e170 <__malloc_unlock>:
 800e170:	4801      	ldr	r0, [pc, #4]	; (800e178 <__malloc_unlock+0x8>)
 800e172:	f000 bdbe 	b.w	800ecf2 <__retarget_lock_release_recursive>
 800e176:	bf00      	nop
 800e178:	200008a8 	.word	0x200008a8

0800e17c <_free_r>:
 800e17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e17e:	2900      	cmp	r1, #0
 800e180:	d044      	beq.n	800e20c <_free_r+0x90>
 800e182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e186:	9001      	str	r0, [sp, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f1a1 0404 	sub.w	r4, r1, #4
 800e18e:	bfb8      	it	lt
 800e190:	18e4      	addlt	r4, r4, r3
 800e192:	f7ff ffe7 	bl	800e164 <__malloc_lock>
 800e196:	4a1e      	ldr	r2, [pc, #120]	; (800e210 <_free_r+0x94>)
 800e198:	9801      	ldr	r0, [sp, #4]
 800e19a:	6813      	ldr	r3, [r2, #0]
 800e19c:	b933      	cbnz	r3, 800e1ac <_free_r+0x30>
 800e19e:	6063      	str	r3, [r4, #4]
 800e1a0:	6014      	str	r4, [r2, #0]
 800e1a2:	b003      	add	sp, #12
 800e1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a8:	f7ff bfe2 	b.w	800e170 <__malloc_unlock>
 800e1ac:	42a3      	cmp	r3, r4
 800e1ae:	d908      	bls.n	800e1c2 <_free_r+0x46>
 800e1b0:	6825      	ldr	r5, [r4, #0]
 800e1b2:	1961      	adds	r1, r4, r5
 800e1b4:	428b      	cmp	r3, r1
 800e1b6:	bf01      	itttt	eq
 800e1b8:	6819      	ldreq	r1, [r3, #0]
 800e1ba:	685b      	ldreq	r3, [r3, #4]
 800e1bc:	1949      	addeq	r1, r1, r5
 800e1be:	6021      	streq	r1, [r4, #0]
 800e1c0:	e7ed      	b.n	800e19e <_free_r+0x22>
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	b10b      	cbz	r3, 800e1cc <_free_r+0x50>
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d9fa      	bls.n	800e1c2 <_free_r+0x46>
 800e1cc:	6811      	ldr	r1, [r2, #0]
 800e1ce:	1855      	adds	r5, r2, r1
 800e1d0:	42a5      	cmp	r5, r4
 800e1d2:	d10b      	bne.n	800e1ec <_free_r+0x70>
 800e1d4:	6824      	ldr	r4, [r4, #0]
 800e1d6:	4421      	add	r1, r4
 800e1d8:	1854      	adds	r4, r2, r1
 800e1da:	42a3      	cmp	r3, r4
 800e1dc:	6011      	str	r1, [r2, #0]
 800e1de:	d1e0      	bne.n	800e1a2 <_free_r+0x26>
 800e1e0:	681c      	ldr	r4, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	6053      	str	r3, [r2, #4]
 800e1e6:	4421      	add	r1, r4
 800e1e8:	6011      	str	r1, [r2, #0]
 800e1ea:	e7da      	b.n	800e1a2 <_free_r+0x26>
 800e1ec:	d902      	bls.n	800e1f4 <_free_r+0x78>
 800e1ee:	230c      	movs	r3, #12
 800e1f0:	6003      	str	r3, [r0, #0]
 800e1f2:	e7d6      	b.n	800e1a2 <_free_r+0x26>
 800e1f4:	6825      	ldr	r5, [r4, #0]
 800e1f6:	1961      	adds	r1, r4, r5
 800e1f8:	428b      	cmp	r3, r1
 800e1fa:	bf04      	itt	eq
 800e1fc:	6819      	ldreq	r1, [r3, #0]
 800e1fe:	685b      	ldreq	r3, [r3, #4]
 800e200:	6063      	str	r3, [r4, #4]
 800e202:	bf04      	itt	eq
 800e204:	1949      	addeq	r1, r1, r5
 800e206:	6021      	streq	r1, [r4, #0]
 800e208:	6054      	str	r4, [r2, #4]
 800e20a:	e7ca      	b.n	800e1a2 <_free_r+0x26>
 800e20c:	b003      	add	sp, #12
 800e20e:	bd30      	pop	{r4, r5, pc}
 800e210:	2000089c 	.word	0x2000089c

0800e214 <__sfputc_r>:
 800e214:	6893      	ldr	r3, [r2, #8]
 800e216:	3b01      	subs	r3, #1
 800e218:	2b00      	cmp	r3, #0
 800e21a:	b410      	push	{r4}
 800e21c:	6093      	str	r3, [r2, #8]
 800e21e:	da08      	bge.n	800e232 <__sfputc_r+0x1e>
 800e220:	6994      	ldr	r4, [r2, #24]
 800e222:	42a3      	cmp	r3, r4
 800e224:	db01      	blt.n	800e22a <__sfputc_r+0x16>
 800e226:	290a      	cmp	r1, #10
 800e228:	d103      	bne.n	800e232 <__sfputc_r+0x1e>
 800e22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e22e:	f000 badf 	b.w	800e7f0 <__swbuf_r>
 800e232:	6813      	ldr	r3, [r2, #0]
 800e234:	1c58      	adds	r0, r3, #1
 800e236:	6010      	str	r0, [r2, #0]
 800e238:	7019      	strb	r1, [r3, #0]
 800e23a:	4608      	mov	r0, r1
 800e23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <__sfputs_r>:
 800e242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e244:	4606      	mov	r6, r0
 800e246:	460f      	mov	r7, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	18d5      	adds	r5, r2, r3
 800e24c:	42ac      	cmp	r4, r5
 800e24e:	d101      	bne.n	800e254 <__sfputs_r+0x12>
 800e250:	2000      	movs	r0, #0
 800e252:	e007      	b.n	800e264 <__sfputs_r+0x22>
 800e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e258:	463a      	mov	r2, r7
 800e25a:	4630      	mov	r0, r6
 800e25c:	f7ff ffda 	bl	800e214 <__sfputc_r>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d1f3      	bne.n	800e24c <__sfputs_r+0xa>
 800e264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e268 <_vfiprintf_r>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	460d      	mov	r5, r1
 800e26e:	b09d      	sub	sp, #116	; 0x74
 800e270:	4614      	mov	r4, r2
 800e272:	4698      	mov	r8, r3
 800e274:	4606      	mov	r6, r0
 800e276:	b118      	cbz	r0, 800e280 <_vfiprintf_r+0x18>
 800e278:	6983      	ldr	r3, [r0, #24]
 800e27a:	b90b      	cbnz	r3, 800e280 <_vfiprintf_r+0x18>
 800e27c:	f000 fc9a 	bl	800ebb4 <__sinit>
 800e280:	4b89      	ldr	r3, [pc, #548]	; (800e4a8 <_vfiprintf_r+0x240>)
 800e282:	429d      	cmp	r5, r3
 800e284:	d11b      	bne.n	800e2be <_vfiprintf_r+0x56>
 800e286:	6875      	ldr	r5, [r6, #4]
 800e288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e28a:	07d9      	lsls	r1, r3, #31
 800e28c:	d405      	bmi.n	800e29a <_vfiprintf_r+0x32>
 800e28e:	89ab      	ldrh	r3, [r5, #12]
 800e290:	059a      	lsls	r2, r3, #22
 800e292:	d402      	bmi.n	800e29a <_vfiprintf_r+0x32>
 800e294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e296:	f000 fd2b 	bl	800ecf0 <__retarget_lock_acquire_recursive>
 800e29a:	89ab      	ldrh	r3, [r5, #12]
 800e29c:	071b      	lsls	r3, r3, #28
 800e29e:	d501      	bpl.n	800e2a4 <_vfiprintf_r+0x3c>
 800e2a0:	692b      	ldr	r3, [r5, #16]
 800e2a2:	b9eb      	cbnz	r3, 800e2e0 <_vfiprintf_r+0x78>
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f000 faf4 	bl	800e894 <__swsetup_r>
 800e2ac:	b1c0      	cbz	r0, 800e2e0 <_vfiprintf_r+0x78>
 800e2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2b0:	07dc      	lsls	r4, r3, #31
 800e2b2:	d50e      	bpl.n	800e2d2 <_vfiprintf_r+0x6a>
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b8:	b01d      	add	sp, #116	; 0x74
 800e2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2be:	4b7b      	ldr	r3, [pc, #492]	; (800e4ac <_vfiprintf_r+0x244>)
 800e2c0:	429d      	cmp	r5, r3
 800e2c2:	d101      	bne.n	800e2c8 <_vfiprintf_r+0x60>
 800e2c4:	68b5      	ldr	r5, [r6, #8]
 800e2c6:	e7df      	b.n	800e288 <_vfiprintf_r+0x20>
 800e2c8:	4b79      	ldr	r3, [pc, #484]	; (800e4b0 <_vfiprintf_r+0x248>)
 800e2ca:	429d      	cmp	r5, r3
 800e2cc:	bf08      	it	eq
 800e2ce:	68f5      	ldreq	r5, [r6, #12]
 800e2d0:	e7da      	b.n	800e288 <_vfiprintf_r+0x20>
 800e2d2:	89ab      	ldrh	r3, [r5, #12]
 800e2d4:	0598      	lsls	r0, r3, #22
 800e2d6:	d4ed      	bmi.n	800e2b4 <_vfiprintf_r+0x4c>
 800e2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2da:	f000 fd0a 	bl	800ecf2 <__retarget_lock_release_recursive>
 800e2de:	e7e9      	b.n	800e2b4 <_vfiprintf_r+0x4c>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2ee:	2330      	movs	r3, #48	; 0x30
 800e2f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e4b4 <_vfiprintf_r+0x24c>
 800e2f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2f8:	f04f 0901 	mov.w	r9, #1
 800e2fc:	4623      	mov	r3, r4
 800e2fe:	469a      	mov	sl, r3
 800e300:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e304:	b10a      	cbz	r2, 800e30a <_vfiprintf_r+0xa2>
 800e306:	2a25      	cmp	r2, #37	; 0x25
 800e308:	d1f9      	bne.n	800e2fe <_vfiprintf_r+0x96>
 800e30a:	ebba 0b04 	subs.w	fp, sl, r4
 800e30e:	d00b      	beq.n	800e328 <_vfiprintf_r+0xc0>
 800e310:	465b      	mov	r3, fp
 800e312:	4622      	mov	r2, r4
 800e314:	4629      	mov	r1, r5
 800e316:	4630      	mov	r0, r6
 800e318:	f7ff ff93 	bl	800e242 <__sfputs_r>
 800e31c:	3001      	adds	r0, #1
 800e31e:	f000 80aa 	beq.w	800e476 <_vfiprintf_r+0x20e>
 800e322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e324:	445a      	add	r2, fp
 800e326:	9209      	str	r2, [sp, #36]	; 0x24
 800e328:	f89a 3000 	ldrb.w	r3, [sl]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 80a2 	beq.w	800e476 <_vfiprintf_r+0x20e>
 800e332:	2300      	movs	r3, #0
 800e334:	f04f 32ff 	mov.w	r2, #4294967295
 800e338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e33c:	f10a 0a01 	add.w	sl, sl, #1
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	9307      	str	r3, [sp, #28]
 800e344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e348:	931a      	str	r3, [sp, #104]	; 0x68
 800e34a:	4654      	mov	r4, sl
 800e34c:	2205      	movs	r2, #5
 800e34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e352:	4858      	ldr	r0, [pc, #352]	; (800e4b4 <_vfiprintf_r+0x24c>)
 800e354:	f7f1 ff4c 	bl	80001f0 <memchr>
 800e358:	9a04      	ldr	r2, [sp, #16]
 800e35a:	b9d8      	cbnz	r0, 800e394 <_vfiprintf_r+0x12c>
 800e35c:	06d1      	lsls	r1, r2, #27
 800e35e:	bf44      	itt	mi
 800e360:	2320      	movmi	r3, #32
 800e362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e366:	0713      	lsls	r3, r2, #28
 800e368:	bf44      	itt	mi
 800e36a:	232b      	movmi	r3, #43	; 0x2b
 800e36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e370:	f89a 3000 	ldrb.w	r3, [sl]
 800e374:	2b2a      	cmp	r3, #42	; 0x2a
 800e376:	d015      	beq.n	800e3a4 <_vfiprintf_r+0x13c>
 800e378:	9a07      	ldr	r2, [sp, #28]
 800e37a:	4654      	mov	r4, sl
 800e37c:	2000      	movs	r0, #0
 800e37e:	f04f 0c0a 	mov.w	ip, #10
 800e382:	4621      	mov	r1, r4
 800e384:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e388:	3b30      	subs	r3, #48	; 0x30
 800e38a:	2b09      	cmp	r3, #9
 800e38c:	d94e      	bls.n	800e42c <_vfiprintf_r+0x1c4>
 800e38e:	b1b0      	cbz	r0, 800e3be <_vfiprintf_r+0x156>
 800e390:	9207      	str	r2, [sp, #28]
 800e392:	e014      	b.n	800e3be <_vfiprintf_r+0x156>
 800e394:	eba0 0308 	sub.w	r3, r0, r8
 800e398:	fa09 f303 	lsl.w	r3, r9, r3
 800e39c:	4313      	orrs	r3, r2
 800e39e:	9304      	str	r3, [sp, #16]
 800e3a0:	46a2      	mov	sl, r4
 800e3a2:	e7d2      	b.n	800e34a <_vfiprintf_r+0xe2>
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	1d19      	adds	r1, r3, #4
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	9103      	str	r1, [sp, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bfbb      	ittet	lt
 800e3b0:	425b      	neglt	r3, r3
 800e3b2:	f042 0202 	orrlt.w	r2, r2, #2
 800e3b6:	9307      	strge	r3, [sp, #28]
 800e3b8:	9307      	strlt	r3, [sp, #28]
 800e3ba:	bfb8      	it	lt
 800e3bc:	9204      	strlt	r2, [sp, #16]
 800e3be:	7823      	ldrb	r3, [r4, #0]
 800e3c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e3c2:	d10c      	bne.n	800e3de <_vfiprintf_r+0x176>
 800e3c4:	7863      	ldrb	r3, [r4, #1]
 800e3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c8:	d135      	bne.n	800e436 <_vfiprintf_r+0x1ce>
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	1d1a      	adds	r2, r3, #4
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	9203      	str	r2, [sp, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	bfb8      	it	lt
 800e3d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3da:	3402      	adds	r4, #2
 800e3dc:	9305      	str	r3, [sp, #20]
 800e3de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4c4 <_vfiprintf_r+0x25c>
 800e3e2:	7821      	ldrb	r1, [r4, #0]
 800e3e4:	2203      	movs	r2, #3
 800e3e6:	4650      	mov	r0, sl
 800e3e8:	f7f1 ff02 	bl	80001f0 <memchr>
 800e3ec:	b140      	cbz	r0, 800e400 <_vfiprintf_r+0x198>
 800e3ee:	2340      	movs	r3, #64	; 0x40
 800e3f0:	eba0 000a 	sub.w	r0, r0, sl
 800e3f4:	fa03 f000 	lsl.w	r0, r3, r0
 800e3f8:	9b04      	ldr	r3, [sp, #16]
 800e3fa:	4303      	orrs	r3, r0
 800e3fc:	3401      	adds	r4, #1
 800e3fe:	9304      	str	r3, [sp, #16]
 800e400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e404:	482c      	ldr	r0, [pc, #176]	; (800e4b8 <_vfiprintf_r+0x250>)
 800e406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e40a:	2206      	movs	r2, #6
 800e40c:	f7f1 fef0 	bl	80001f0 <memchr>
 800e410:	2800      	cmp	r0, #0
 800e412:	d03f      	beq.n	800e494 <_vfiprintf_r+0x22c>
 800e414:	4b29      	ldr	r3, [pc, #164]	; (800e4bc <_vfiprintf_r+0x254>)
 800e416:	bb1b      	cbnz	r3, 800e460 <_vfiprintf_r+0x1f8>
 800e418:	9b03      	ldr	r3, [sp, #12]
 800e41a:	3307      	adds	r3, #7
 800e41c:	f023 0307 	bic.w	r3, r3, #7
 800e420:	3308      	adds	r3, #8
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e426:	443b      	add	r3, r7
 800e428:	9309      	str	r3, [sp, #36]	; 0x24
 800e42a:	e767      	b.n	800e2fc <_vfiprintf_r+0x94>
 800e42c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e430:	460c      	mov	r4, r1
 800e432:	2001      	movs	r0, #1
 800e434:	e7a5      	b.n	800e382 <_vfiprintf_r+0x11a>
 800e436:	2300      	movs	r3, #0
 800e438:	3401      	adds	r4, #1
 800e43a:	9305      	str	r3, [sp, #20]
 800e43c:	4619      	mov	r1, r3
 800e43e:	f04f 0c0a 	mov.w	ip, #10
 800e442:	4620      	mov	r0, r4
 800e444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e448:	3a30      	subs	r2, #48	; 0x30
 800e44a:	2a09      	cmp	r2, #9
 800e44c:	d903      	bls.n	800e456 <_vfiprintf_r+0x1ee>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0c5      	beq.n	800e3de <_vfiprintf_r+0x176>
 800e452:	9105      	str	r1, [sp, #20]
 800e454:	e7c3      	b.n	800e3de <_vfiprintf_r+0x176>
 800e456:	fb0c 2101 	mla	r1, ip, r1, r2
 800e45a:	4604      	mov	r4, r0
 800e45c:	2301      	movs	r3, #1
 800e45e:	e7f0      	b.n	800e442 <_vfiprintf_r+0x1da>
 800e460:	ab03      	add	r3, sp, #12
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	462a      	mov	r2, r5
 800e466:	4b16      	ldr	r3, [pc, #88]	; (800e4c0 <_vfiprintf_r+0x258>)
 800e468:	a904      	add	r1, sp, #16
 800e46a:	4630      	mov	r0, r6
 800e46c:	f3af 8000 	nop.w
 800e470:	4607      	mov	r7, r0
 800e472:	1c78      	adds	r0, r7, #1
 800e474:	d1d6      	bne.n	800e424 <_vfiprintf_r+0x1bc>
 800e476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e478:	07d9      	lsls	r1, r3, #31
 800e47a:	d405      	bmi.n	800e488 <_vfiprintf_r+0x220>
 800e47c:	89ab      	ldrh	r3, [r5, #12]
 800e47e:	059a      	lsls	r2, r3, #22
 800e480:	d402      	bmi.n	800e488 <_vfiprintf_r+0x220>
 800e482:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e484:	f000 fc35 	bl	800ecf2 <__retarget_lock_release_recursive>
 800e488:	89ab      	ldrh	r3, [r5, #12]
 800e48a:	065b      	lsls	r3, r3, #25
 800e48c:	f53f af12 	bmi.w	800e2b4 <_vfiprintf_r+0x4c>
 800e490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e492:	e711      	b.n	800e2b8 <_vfiprintf_r+0x50>
 800e494:	ab03      	add	r3, sp, #12
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	462a      	mov	r2, r5
 800e49a:	4b09      	ldr	r3, [pc, #36]	; (800e4c0 <_vfiprintf_r+0x258>)
 800e49c:	a904      	add	r1, sp, #16
 800e49e:	4630      	mov	r0, r6
 800e4a0:	f000 f880 	bl	800e5a4 <_printf_i>
 800e4a4:	e7e4      	b.n	800e470 <_vfiprintf_r+0x208>
 800e4a6:	bf00      	nop
 800e4a8:	0801072c 	.word	0x0801072c
 800e4ac:	0801074c 	.word	0x0801074c
 800e4b0:	0801070c 	.word	0x0801070c
 800e4b4:	080106d9 	.word	0x080106d9
 800e4b8:	080106e3 	.word	0x080106e3
 800e4bc:	00000000 	.word	0x00000000
 800e4c0:	0800e243 	.word	0x0800e243
 800e4c4:	080106df 	.word	0x080106df

0800e4c8 <_printf_common>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	4616      	mov	r6, r2
 800e4ce:	4699      	mov	r9, r3
 800e4d0:	688a      	ldr	r2, [r1, #8]
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfb8      	it	lt
 800e4dc:	4613      	movlt	r3, r2
 800e4de:	6033      	str	r3, [r6, #0]
 800e4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b10a      	cbz	r2, 800e4ee <_printf_common+0x26>
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	0699      	lsls	r1, r3, #26
 800e4f2:	bf42      	ittt	mi
 800e4f4:	6833      	ldrmi	r3, [r6, #0]
 800e4f6:	3302      	addmi	r3, #2
 800e4f8:	6033      	strmi	r3, [r6, #0]
 800e4fa:	6825      	ldr	r5, [r4, #0]
 800e4fc:	f015 0506 	ands.w	r5, r5, #6
 800e500:	d106      	bne.n	800e510 <_printf_common+0x48>
 800e502:	f104 0a19 	add.w	sl, r4, #25
 800e506:	68e3      	ldr	r3, [r4, #12]
 800e508:	6832      	ldr	r2, [r6, #0]
 800e50a:	1a9b      	subs	r3, r3, r2
 800e50c:	42ab      	cmp	r3, r5
 800e50e:	dc26      	bgt.n	800e55e <_printf_common+0x96>
 800e510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e514:	1e13      	subs	r3, r2, #0
 800e516:	6822      	ldr	r2, [r4, #0]
 800e518:	bf18      	it	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	0692      	lsls	r2, r2, #26
 800e51e:	d42b      	bmi.n	800e578 <_printf_common+0xb0>
 800e520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e524:	4649      	mov	r1, r9
 800e526:	4638      	mov	r0, r7
 800e528:	47c0      	blx	r8
 800e52a:	3001      	adds	r0, #1
 800e52c:	d01e      	beq.n	800e56c <_printf_common+0xa4>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	68e5      	ldr	r5, [r4, #12]
 800e532:	6832      	ldr	r2, [r6, #0]
 800e534:	f003 0306 	and.w	r3, r3, #6
 800e538:	2b04      	cmp	r3, #4
 800e53a:	bf08      	it	eq
 800e53c:	1aad      	subeq	r5, r5, r2
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	6922      	ldr	r2, [r4, #16]
 800e542:	bf0c      	ite	eq
 800e544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e548:	2500      	movne	r5, #0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	bfc4      	itt	gt
 800e54e:	1a9b      	subgt	r3, r3, r2
 800e550:	18ed      	addgt	r5, r5, r3
 800e552:	2600      	movs	r6, #0
 800e554:	341a      	adds	r4, #26
 800e556:	42b5      	cmp	r5, r6
 800e558:	d11a      	bne.n	800e590 <_printf_common+0xc8>
 800e55a:	2000      	movs	r0, #0
 800e55c:	e008      	b.n	800e570 <_printf_common+0xa8>
 800e55e:	2301      	movs	r3, #1
 800e560:	4652      	mov	r2, sl
 800e562:	4649      	mov	r1, r9
 800e564:	4638      	mov	r0, r7
 800e566:	47c0      	blx	r8
 800e568:	3001      	adds	r0, #1
 800e56a:	d103      	bne.n	800e574 <_printf_common+0xac>
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e574:	3501      	adds	r5, #1
 800e576:	e7c6      	b.n	800e506 <_printf_common+0x3e>
 800e578:	18e1      	adds	r1, r4, r3
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	2030      	movs	r0, #48	; 0x30
 800e57e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e582:	4422      	add	r2, r4
 800e584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e58c:	3302      	adds	r3, #2
 800e58e:	e7c7      	b.n	800e520 <_printf_common+0x58>
 800e590:	2301      	movs	r3, #1
 800e592:	4622      	mov	r2, r4
 800e594:	4649      	mov	r1, r9
 800e596:	4638      	mov	r0, r7
 800e598:	47c0      	blx	r8
 800e59a:	3001      	adds	r0, #1
 800e59c:	d0e6      	beq.n	800e56c <_printf_common+0xa4>
 800e59e:	3601      	adds	r6, #1
 800e5a0:	e7d9      	b.n	800e556 <_printf_common+0x8e>
	...

0800e5a4 <_printf_i>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	7e0f      	ldrb	r7, [r1, #24]
 800e5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5ac:	2f78      	cmp	r7, #120	; 0x78
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	469a      	mov	sl, r3
 800e5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5ba:	d807      	bhi.n	800e5cc <_printf_i+0x28>
 800e5bc:	2f62      	cmp	r7, #98	; 0x62
 800e5be:	d80a      	bhi.n	800e5d6 <_printf_i+0x32>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	f000 80d8 	beq.w	800e776 <_printf_i+0x1d2>
 800e5c6:	2f58      	cmp	r7, #88	; 0x58
 800e5c8:	f000 80a3 	beq.w	800e712 <_printf_i+0x16e>
 800e5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5d4:	e03a      	b.n	800e64c <_printf_i+0xa8>
 800e5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5da:	2b15      	cmp	r3, #21
 800e5dc:	d8f6      	bhi.n	800e5cc <_printf_i+0x28>
 800e5de:	a101      	add	r1, pc, #4	; (adr r1, 800e5e4 <_printf_i+0x40>)
 800e5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e5cd 	.word	0x0800e5cd
 800e5f0:	0800e5cd 	.word	0x0800e5cd
 800e5f4:	0800e5cd 	.word	0x0800e5cd
 800e5f8:	0800e5cd 	.word	0x0800e5cd
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e5cd 	.word	0x0800e5cd
 800e604:	0800e5cd 	.word	0x0800e5cd
 800e608:	0800e5cd 	.word	0x0800e5cd
 800e60c:	0800e5cd 	.word	0x0800e5cd
 800e610:	0800e75d 	.word	0x0800e75d
 800e614:	0800e681 	.word	0x0800e681
 800e618:	0800e73f 	.word	0x0800e73f
 800e61c:	0800e5cd 	.word	0x0800e5cd
 800e620:	0800e5cd 	.word	0x0800e5cd
 800e624:	0800e77f 	.word	0x0800e77f
 800e628:	0800e5cd 	.word	0x0800e5cd
 800e62c:	0800e681 	.word	0x0800e681
 800e630:	0800e5cd 	.word	0x0800e5cd
 800e634:	0800e5cd 	.word	0x0800e5cd
 800e638:	0800e747 	.word	0x0800e747
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	602a      	str	r2, [r5, #0]
 800e644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e64c:	2301      	movs	r3, #1
 800e64e:	e0a3      	b.n	800e798 <_printf_i+0x1f4>
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	6829      	ldr	r1, [r5, #0]
 800e654:	0606      	lsls	r6, r0, #24
 800e656:	f101 0304 	add.w	r3, r1, #4
 800e65a:	d50a      	bpl.n	800e672 <_printf_i+0xce>
 800e65c:	680e      	ldr	r6, [r1, #0]
 800e65e:	602b      	str	r3, [r5, #0]
 800e660:	2e00      	cmp	r6, #0
 800e662:	da03      	bge.n	800e66c <_printf_i+0xc8>
 800e664:	232d      	movs	r3, #45	; 0x2d
 800e666:	4276      	negs	r6, r6
 800e668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e66c:	485e      	ldr	r0, [pc, #376]	; (800e7e8 <_printf_i+0x244>)
 800e66e:	230a      	movs	r3, #10
 800e670:	e019      	b.n	800e6a6 <_printf_i+0x102>
 800e672:	680e      	ldr	r6, [r1, #0]
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e67a:	bf18      	it	ne
 800e67c:	b236      	sxthne	r6, r6
 800e67e:	e7ef      	b.n	800e660 <_printf_i+0xbc>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	6820      	ldr	r0, [r4, #0]
 800e684:	1d19      	adds	r1, r3, #4
 800e686:	6029      	str	r1, [r5, #0]
 800e688:	0601      	lsls	r1, r0, #24
 800e68a:	d501      	bpl.n	800e690 <_printf_i+0xec>
 800e68c:	681e      	ldr	r6, [r3, #0]
 800e68e:	e002      	b.n	800e696 <_printf_i+0xf2>
 800e690:	0646      	lsls	r6, r0, #25
 800e692:	d5fb      	bpl.n	800e68c <_printf_i+0xe8>
 800e694:	881e      	ldrh	r6, [r3, #0]
 800e696:	4854      	ldr	r0, [pc, #336]	; (800e7e8 <_printf_i+0x244>)
 800e698:	2f6f      	cmp	r7, #111	; 0x6f
 800e69a:	bf0c      	ite	eq
 800e69c:	2308      	moveq	r3, #8
 800e69e:	230a      	movne	r3, #10
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6a6:	6865      	ldr	r5, [r4, #4]
 800e6a8:	60a5      	str	r5, [r4, #8]
 800e6aa:	2d00      	cmp	r5, #0
 800e6ac:	bfa2      	ittt	ge
 800e6ae:	6821      	ldrge	r1, [r4, #0]
 800e6b0:	f021 0104 	bicge.w	r1, r1, #4
 800e6b4:	6021      	strge	r1, [r4, #0]
 800e6b6:	b90e      	cbnz	r6, 800e6bc <_printf_i+0x118>
 800e6b8:	2d00      	cmp	r5, #0
 800e6ba:	d04d      	beq.n	800e758 <_printf_i+0x1b4>
 800e6bc:	4615      	mov	r5, r2
 800e6be:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6c2:	fb03 6711 	mls	r7, r3, r1, r6
 800e6c6:	5dc7      	ldrb	r7, [r0, r7]
 800e6c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6cc:	4637      	mov	r7, r6
 800e6ce:	42bb      	cmp	r3, r7
 800e6d0:	460e      	mov	r6, r1
 800e6d2:	d9f4      	bls.n	800e6be <_printf_i+0x11a>
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d10b      	bne.n	800e6f0 <_printf_i+0x14c>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	07de      	lsls	r6, r3, #31
 800e6dc:	d508      	bpl.n	800e6f0 <_printf_i+0x14c>
 800e6de:	6923      	ldr	r3, [r4, #16]
 800e6e0:	6861      	ldr	r1, [r4, #4]
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	bfde      	ittt	le
 800e6e6:	2330      	movle	r3, #48	; 0x30
 800e6e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6f0:	1b52      	subs	r2, r2, r5
 800e6f2:	6122      	str	r2, [r4, #16]
 800e6f4:	f8cd a000 	str.w	sl, [sp]
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	aa03      	add	r2, sp, #12
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	4640      	mov	r0, r8
 800e700:	f7ff fee2 	bl	800e4c8 <_printf_common>
 800e704:	3001      	adds	r0, #1
 800e706:	d14c      	bne.n	800e7a2 <_printf_i+0x1fe>
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	b004      	add	sp, #16
 800e70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e712:	4835      	ldr	r0, [pc, #212]	; (800e7e8 <_printf_i+0x244>)
 800e714:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e718:	6829      	ldr	r1, [r5, #0]
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e720:	6029      	str	r1, [r5, #0]
 800e722:	061d      	lsls	r5, r3, #24
 800e724:	d514      	bpl.n	800e750 <_printf_i+0x1ac>
 800e726:	07df      	lsls	r7, r3, #31
 800e728:	bf44      	itt	mi
 800e72a:	f043 0320 	orrmi.w	r3, r3, #32
 800e72e:	6023      	strmi	r3, [r4, #0]
 800e730:	b91e      	cbnz	r6, 800e73a <_printf_i+0x196>
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	f023 0320 	bic.w	r3, r3, #32
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	2310      	movs	r3, #16
 800e73c:	e7b0      	b.n	800e6a0 <_printf_i+0xfc>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	f043 0320 	orr.w	r3, r3, #32
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	2378      	movs	r3, #120	; 0x78
 800e748:	4828      	ldr	r0, [pc, #160]	; (800e7ec <_printf_i+0x248>)
 800e74a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e74e:	e7e3      	b.n	800e718 <_printf_i+0x174>
 800e750:	0659      	lsls	r1, r3, #25
 800e752:	bf48      	it	mi
 800e754:	b2b6      	uxthmi	r6, r6
 800e756:	e7e6      	b.n	800e726 <_printf_i+0x182>
 800e758:	4615      	mov	r5, r2
 800e75a:	e7bb      	b.n	800e6d4 <_printf_i+0x130>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	6826      	ldr	r6, [r4, #0]
 800e760:	6961      	ldr	r1, [r4, #20]
 800e762:	1d18      	adds	r0, r3, #4
 800e764:	6028      	str	r0, [r5, #0]
 800e766:	0635      	lsls	r5, r6, #24
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	d501      	bpl.n	800e770 <_printf_i+0x1cc>
 800e76c:	6019      	str	r1, [r3, #0]
 800e76e:	e002      	b.n	800e776 <_printf_i+0x1d2>
 800e770:	0670      	lsls	r0, r6, #25
 800e772:	d5fb      	bpl.n	800e76c <_printf_i+0x1c8>
 800e774:	8019      	strh	r1, [r3, #0]
 800e776:	2300      	movs	r3, #0
 800e778:	6123      	str	r3, [r4, #16]
 800e77a:	4615      	mov	r5, r2
 800e77c:	e7ba      	b.n	800e6f4 <_printf_i+0x150>
 800e77e:	682b      	ldr	r3, [r5, #0]
 800e780:	1d1a      	adds	r2, r3, #4
 800e782:	602a      	str	r2, [r5, #0]
 800e784:	681d      	ldr	r5, [r3, #0]
 800e786:	6862      	ldr	r2, [r4, #4]
 800e788:	2100      	movs	r1, #0
 800e78a:	4628      	mov	r0, r5
 800e78c:	f7f1 fd30 	bl	80001f0 <memchr>
 800e790:	b108      	cbz	r0, 800e796 <_printf_i+0x1f2>
 800e792:	1b40      	subs	r0, r0, r5
 800e794:	6060      	str	r0, [r4, #4]
 800e796:	6863      	ldr	r3, [r4, #4]
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	2300      	movs	r3, #0
 800e79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a0:	e7a8      	b.n	800e6f4 <_printf_i+0x150>
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	47d0      	blx	sl
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d0ab      	beq.n	800e708 <_printf_i+0x164>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	079b      	lsls	r3, r3, #30
 800e7b4:	d413      	bmi.n	800e7de <_printf_i+0x23a>
 800e7b6:	68e0      	ldr	r0, [r4, #12]
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	4298      	cmp	r0, r3
 800e7bc:	bfb8      	it	lt
 800e7be:	4618      	movlt	r0, r3
 800e7c0:	e7a4      	b.n	800e70c <_printf_i+0x168>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	47d0      	blx	sl
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d09b      	beq.n	800e708 <_printf_i+0x164>
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	68e3      	ldr	r3, [r4, #12]
 800e7d4:	9903      	ldr	r1, [sp, #12]
 800e7d6:	1a5b      	subs	r3, r3, r1
 800e7d8:	42ab      	cmp	r3, r5
 800e7da:	dcf2      	bgt.n	800e7c2 <_printf_i+0x21e>
 800e7dc:	e7eb      	b.n	800e7b6 <_printf_i+0x212>
 800e7de:	2500      	movs	r5, #0
 800e7e0:	f104 0619 	add.w	r6, r4, #25
 800e7e4:	e7f5      	b.n	800e7d2 <_printf_i+0x22e>
 800e7e6:	bf00      	nop
 800e7e8:	080106ea 	.word	0x080106ea
 800e7ec:	080106fb 	.word	0x080106fb

0800e7f0 <__swbuf_r>:
 800e7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f2:	460e      	mov	r6, r1
 800e7f4:	4614      	mov	r4, r2
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	b118      	cbz	r0, 800e802 <__swbuf_r+0x12>
 800e7fa:	6983      	ldr	r3, [r0, #24]
 800e7fc:	b90b      	cbnz	r3, 800e802 <__swbuf_r+0x12>
 800e7fe:	f000 f9d9 	bl	800ebb4 <__sinit>
 800e802:	4b21      	ldr	r3, [pc, #132]	; (800e888 <__swbuf_r+0x98>)
 800e804:	429c      	cmp	r4, r3
 800e806:	d12b      	bne.n	800e860 <__swbuf_r+0x70>
 800e808:	686c      	ldr	r4, [r5, #4]
 800e80a:	69a3      	ldr	r3, [r4, #24]
 800e80c:	60a3      	str	r3, [r4, #8]
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	071a      	lsls	r2, r3, #28
 800e812:	d52f      	bpl.n	800e874 <__swbuf_r+0x84>
 800e814:	6923      	ldr	r3, [r4, #16]
 800e816:	b36b      	cbz	r3, 800e874 <__swbuf_r+0x84>
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	6820      	ldr	r0, [r4, #0]
 800e81c:	1ac0      	subs	r0, r0, r3
 800e81e:	6963      	ldr	r3, [r4, #20]
 800e820:	b2f6      	uxtb	r6, r6
 800e822:	4283      	cmp	r3, r0
 800e824:	4637      	mov	r7, r6
 800e826:	dc04      	bgt.n	800e832 <__swbuf_r+0x42>
 800e828:	4621      	mov	r1, r4
 800e82a:	4628      	mov	r0, r5
 800e82c:	f000 f92e 	bl	800ea8c <_fflush_r>
 800e830:	bb30      	cbnz	r0, 800e880 <__swbuf_r+0x90>
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	3b01      	subs	r3, #1
 800e836:	60a3      	str	r3, [r4, #8]
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	6022      	str	r2, [r4, #0]
 800e83e:	701e      	strb	r6, [r3, #0]
 800e840:	6963      	ldr	r3, [r4, #20]
 800e842:	3001      	adds	r0, #1
 800e844:	4283      	cmp	r3, r0
 800e846:	d004      	beq.n	800e852 <__swbuf_r+0x62>
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	07db      	lsls	r3, r3, #31
 800e84c:	d506      	bpl.n	800e85c <__swbuf_r+0x6c>
 800e84e:	2e0a      	cmp	r6, #10
 800e850:	d104      	bne.n	800e85c <__swbuf_r+0x6c>
 800e852:	4621      	mov	r1, r4
 800e854:	4628      	mov	r0, r5
 800e856:	f000 f919 	bl	800ea8c <_fflush_r>
 800e85a:	b988      	cbnz	r0, 800e880 <__swbuf_r+0x90>
 800e85c:	4638      	mov	r0, r7
 800e85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e860:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <__swbuf_r+0x9c>)
 800e862:	429c      	cmp	r4, r3
 800e864:	d101      	bne.n	800e86a <__swbuf_r+0x7a>
 800e866:	68ac      	ldr	r4, [r5, #8]
 800e868:	e7cf      	b.n	800e80a <__swbuf_r+0x1a>
 800e86a:	4b09      	ldr	r3, [pc, #36]	; (800e890 <__swbuf_r+0xa0>)
 800e86c:	429c      	cmp	r4, r3
 800e86e:	bf08      	it	eq
 800e870:	68ec      	ldreq	r4, [r5, #12]
 800e872:	e7ca      	b.n	800e80a <__swbuf_r+0x1a>
 800e874:	4621      	mov	r1, r4
 800e876:	4628      	mov	r0, r5
 800e878:	f000 f80c 	bl	800e894 <__swsetup_r>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d0cb      	beq.n	800e818 <__swbuf_r+0x28>
 800e880:	f04f 37ff 	mov.w	r7, #4294967295
 800e884:	e7ea      	b.n	800e85c <__swbuf_r+0x6c>
 800e886:	bf00      	nop
 800e888:	0801072c 	.word	0x0801072c
 800e88c:	0801074c 	.word	0x0801074c
 800e890:	0801070c 	.word	0x0801070c

0800e894 <__swsetup_r>:
 800e894:	4b32      	ldr	r3, [pc, #200]	; (800e960 <__swsetup_r+0xcc>)
 800e896:	b570      	push	{r4, r5, r6, lr}
 800e898:	681d      	ldr	r5, [r3, #0]
 800e89a:	4606      	mov	r6, r0
 800e89c:	460c      	mov	r4, r1
 800e89e:	b125      	cbz	r5, 800e8aa <__swsetup_r+0x16>
 800e8a0:	69ab      	ldr	r3, [r5, #24]
 800e8a2:	b913      	cbnz	r3, 800e8aa <__swsetup_r+0x16>
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	f000 f985 	bl	800ebb4 <__sinit>
 800e8aa:	4b2e      	ldr	r3, [pc, #184]	; (800e964 <__swsetup_r+0xd0>)
 800e8ac:	429c      	cmp	r4, r3
 800e8ae:	d10f      	bne.n	800e8d0 <__swsetup_r+0x3c>
 800e8b0:	686c      	ldr	r4, [r5, #4]
 800e8b2:	89a3      	ldrh	r3, [r4, #12]
 800e8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8b8:	0719      	lsls	r1, r3, #28
 800e8ba:	d42c      	bmi.n	800e916 <__swsetup_r+0x82>
 800e8bc:	06dd      	lsls	r5, r3, #27
 800e8be:	d411      	bmi.n	800e8e4 <__swsetup_r+0x50>
 800e8c0:	2309      	movs	r3, #9
 800e8c2:	6033      	str	r3, [r6, #0]
 800e8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ce:	e03e      	b.n	800e94e <__swsetup_r+0xba>
 800e8d0:	4b25      	ldr	r3, [pc, #148]	; (800e968 <__swsetup_r+0xd4>)
 800e8d2:	429c      	cmp	r4, r3
 800e8d4:	d101      	bne.n	800e8da <__swsetup_r+0x46>
 800e8d6:	68ac      	ldr	r4, [r5, #8]
 800e8d8:	e7eb      	b.n	800e8b2 <__swsetup_r+0x1e>
 800e8da:	4b24      	ldr	r3, [pc, #144]	; (800e96c <__swsetup_r+0xd8>)
 800e8dc:	429c      	cmp	r4, r3
 800e8de:	bf08      	it	eq
 800e8e0:	68ec      	ldreq	r4, [r5, #12]
 800e8e2:	e7e6      	b.n	800e8b2 <__swsetup_r+0x1e>
 800e8e4:	0758      	lsls	r0, r3, #29
 800e8e6:	d512      	bpl.n	800e90e <__swsetup_r+0x7a>
 800e8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8ea:	b141      	cbz	r1, 800e8fe <__swsetup_r+0x6a>
 800e8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8f0:	4299      	cmp	r1, r3
 800e8f2:	d002      	beq.n	800e8fa <__swsetup_r+0x66>
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff fc41 	bl	800e17c <_free_r>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	2300      	movs	r3, #0
 800e908:	6063      	str	r3, [r4, #4]
 800e90a:	6923      	ldr	r3, [r4, #16]
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	89a3      	ldrh	r3, [r4, #12]
 800e910:	f043 0308 	orr.w	r3, r3, #8
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	6923      	ldr	r3, [r4, #16]
 800e918:	b94b      	cbnz	r3, 800e92e <__swsetup_r+0x9a>
 800e91a:	89a3      	ldrh	r3, [r4, #12]
 800e91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e924:	d003      	beq.n	800e92e <__swsetup_r+0x9a>
 800e926:	4621      	mov	r1, r4
 800e928:	4630      	mov	r0, r6
 800e92a:	f000 fa09 	bl	800ed40 <__smakebuf_r>
 800e92e:	89a0      	ldrh	r0, [r4, #12]
 800e930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e934:	f010 0301 	ands.w	r3, r0, #1
 800e938:	d00a      	beq.n	800e950 <__swsetup_r+0xbc>
 800e93a:	2300      	movs	r3, #0
 800e93c:	60a3      	str	r3, [r4, #8]
 800e93e:	6963      	ldr	r3, [r4, #20]
 800e940:	425b      	negs	r3, r3
 800e942:	61a3      	str	r3, [r4, #24]
 800e944:	6923      	ldr	r3, [r4, #16]
 800e946:	b943      	cbnz	r3, 800e95a <__swsetup_r+0xc6>
 800e948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e94c:	d1ba      	bne.n	800e8c4 <__swsetup_r+0x30>
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	0781      	lsls	r1, r0, #30
 800e952:	bf58      	it	pl
 800e954:	6963      	ldrpl	r3, [r4, #20]
 800e956:	60a3      	str	r3, [r4, #8]
 800e958:	e7f4      	b.n	800e944 <__swsetup_r+0xb0>
 800e95a:	2000      	movs	r0, #0
 800e95c:	e7f7      	b.n	800e94e <__swsetup_r+0xba>
 800e95e:	bf00      	nop
 800e960:	2000006c 	.word	0x2000006c
 800e964:	0801072c 	.word	0x0801072c
 800e968:	0801074c 	.word	0x0801074c
 800e96c:	0801070c 	.word	0x0801070c

0800e970 <abort>:
 800e970:	b508      	push	{r3, lr}
 800e972:	2006      	movs	r0, #6
 800e974:	f000 fa4c 	bl	800ee10 <raise>
 800e978:	2001      	movs	r0, #1
 800e97a:	f7f7 f8b5 	bl	8005ae8 <_exit>
	...

0800e980 <__sflush_r>:
 800e980:	898a      	ldrh	r2, [r1, #12]
 800e982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e986:	4605      	mov	r5, r0
 800e988:	0710      	lsls	r0, r2, #28
 800e98a:	460c      	mov	r4, r1
 800e98c:	d458      	bmi.n	800ea40 <__sflush_r+0xc0>
 800e98e:	684b      	ldr	r3, [r1, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	dc05      	bgt.n	800e9a0 <__sflush_r+0x20>
 800e994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e996:	2b00      	cmp	r3, #0
 800e998:	dc02      	bgt.n	800e9a0 <__sflush_r+0x20>
 800e99a:	2000      	movs	r0, #0
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9a2:	2e00      	cmp	r6, #0
 800e9a4:	d0f9      	beq.n	800e99a <__sflush_r+0x1a>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9ac:	682f      	ldr	r7, [r5, #0]
 800e9ae:	602b      	str	r3, [r5, #0]
 800e9b0:	d032      	beq.n	800ea18 <__sflush_r+0x98>
 800e9b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	075a      	lsls	r2, r3, #29
 800e9b8:	d505      	bpl.n	800e9c6 <__sflush_r+0x46>
 800e9ba:	6863      	ldr	r3, [r4, #4]
 800e9bc:	1ac0      	subs	r0, r0, r3
 800e9be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9c0:	b10b      	cbz	r3, 800e9c6 <__sflush_r+0x46>
 800e9c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9c4:	1ac0      	subs	r0, r0, r3
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9cc:	6a21      	ldr	r1, [r4, #32]
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	47b0      	blx	r6
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	d106      	bne.n	800e9e6 <__sflush_r+0x66>
 800e9d8:	6829      	ldr	r1, [r5, #0]
 800e9da:	291d      	cmp	r1, #29
 800e9dc:	d82c      	bhi.n	800ea38 <__sflush_r+0xb8>
 800e9de:	4a2a      	ldr	r2, [pc, #168]	; (800ea88 <__sflush_r+0x108>)
 800e9e0:	40ca      	lsrs	r2, r1
 800e9e2:	07d6      	lsls	r6, r2, #31
 800e9e4:	d528      	bpl.n	800ea38 <__sflush_r+0xb8>
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	6062      	str	r2, [r4, #4]
 800e9ea:	04d9      	lsls	r1, r3, #19
 800e9ec:	6922      	ldr	r2, [r4, #16]
 800e9ee:	6022      	str	r2, [r4, #0]
 800e9f0:	d504      	bpl.n	800e9fc <__sflush_r+0x7c>
 800e9f2:	1c42      	adds	r2, r0, #1
 800e9f4:	d101      	bne.n	800e9fa <__sflush_r+0x7a>
 800e9f6:	682b      	ldr	r3, [r5, #0]
 800e9f8:	b903      	cbnz	r3, 800e9fc <__sflush_r+0x7c>
 800e9fa:	6560      	str	r0, [r4, #84]	; 0x54
 800e9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9fe:	602f      	str	r7, [r5, #0]
 800ea00:	2900      	cmp	r1, #0
 800ea02:	d0ca      	beq.n	800e99a <__sflush_r+0x1a>
 800ea04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea08:	4299      	cmp	r1, r3
 800ea0a:	d002      	beq.n	800ea12 <__sflush_r+0x92>
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	f7ff fbb5 	bl	800e17c <_free_r>
 800ea12:	2000      	movs	r0, #0
 800ea14:	6360      	str	r0, [r4, #52]	; 0x34
 800ea16:	e7c1      	b.n	800e99c <__sflush_r+0x1c>
 800ea18:	6a21      	ldr	r1, [r4, #32]
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	47b0      	blx	r6
 800ea20:	1c41      	adds	r1, r0, #1
 800ea22:	d1c7      	bne.n	800e9b4 <__sflush_r+0x34>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0c4      	beq.n	800e9b4 <__sflush_r+0x34>
 800ea2a:	2b1d      	cmp	r3, #29
 800ea2c:	d001      	beq.n	800ea32 <__sflush_r+0xb2>
 800ea2e:	2b16      	cmp	r3, #22
 800ea30:	d101      	bne.n	800ea36 <__sflush_r+0xb6>
 800ea32:	602f      	str	r7, [r5, #0]
 800ea34:	e7b1      	b.n	800e99a <__sflush_r+0x1a>
 800ea36:	89a3      	ldrh	r3, [r4, #12]
 800ea38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	e7ad      	b.n	800e99c <__sflush_r+0x1c>
 800ea40:	690f      	ldr	r7, [r1, #16]
 800ea42:	2f00      	cmp	r7, #0
 800ea44:	d0a9      	beq.n	800e99a <__sflush_r+0x1a>
 800ea46:	0793      	lsls	r3, r2, #30
 800ea48:	680e      	ldr	r6, [r1, #0]
 800ea4a:	bf08      	it	eq
 800ea4c:	694b      	ldreq	r3, [r1, #20]
 800ea4e:	600f      	str	r7, [r1, #0]
 800ea50:	bf18      	it	ne
 800ea52:	2300      	movne	r3, #0
 800ea54:	eba6 0807 	sub.w	r8, r6, r7
 800ea58:	608b      	str	r3, [r1, #8]
 800ea5a:	f1b8 0f00 	cmp.w	r8, #0
 800ea5e:	dd9c      	ble.n	800e99a <__sflush_r+0x1a>
 800ea60:	6a21      	ldr	r1, [r4, #32]
 800ea62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea64:	4643      	mov	r3, r8
 800ea66:	463a      	mov	r2, r7
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b0      	blx	r6
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	dc06      	bgt.n	800ea7e <__sflush_r+0xfe>
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea76:	81a3      	strh	r3, [r4, #12]
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7c:	e78e      	b.n	800e99c <__sflush_r+0x1c>
 800ea7e:	4407      	add	r7, r0
 800ea80:	eba8 0800 	sub.w	r8, r8, r0
 800ea84:	e7e9      	b.n	800ea5a <__sflush_r+0xda>
 800ea86:	bf00      	nop
 800ea88:	20400001 	.word	0x20400001

0800ea8c <_fflush_r>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	690b      	ldr	r3, [r1, #16]
 800ea90:	4605      	mov	r5, r0
 800ea92:	460c      	mov	r4, r1
 800ea94:	b913      	cbnz	r3, 800ea9c <_fflush_r+0x10>
 800ea96:	2500      	movs	r5, #0
 800ea98:	4628      	mov	r0, r5
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	b118      	cbz	r0, 800eaa6 <_fflush_r+0x1a>
 800ea9e:	6983      	ldr	r3, [r0, #24]
 800eaa0:	b90b      	cbnz	r3, 800eaa6 <_fflush_r+0x1a>
 800eaa2:	f000 f887 	bl	800ebb4 <__sinit>
 800eaa6:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <_fflush_r+0x6c>)
 800eaa8:	429c      	cmp	r4, r3
 800eaaa:	d11b      	bne.n	800eae4 <_fflush_r+0x58>
 800eaac:	686c      	ldr	r4, [r5, #4]
 800eaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0ef      	beq.n	800ea96 <_fflush_r+0xa>
 800eab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eab8:	07d0      	lsls	r0, r2, #31
 800eaba:	d404      	bmi.n	800eac6 <_fflush_r+0x3a>
 800eabc:	0599      	lsls	r1, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_fflush_r+0x3a>
 800eac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac2:	f000 f915 	bl	800ecf0 <__retarget_lock_acquire_recursive>
 800eac6:	4628      	mov	r0, r5
 800eac8:	4621      	mov	r1, r4
 800eaca:	f7ff ff59 	bl	800e980 <__sflush_r>
 800eace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ead0:	07da      	lsls	r2, r3, #31
 800ead2:	4605      	mov	r5, r0
 800ead4:	d4e0      	bmi.n	800ea98 <_fflush_r+0xc>
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	059b      	lsls	r3, r3, #22
 800eada:	d4dd      	bmi.n	800ea98 <_fflush_r+0xc>
 800eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eade:	f000 f908 	bl	800ecf2 <__retarget_lock_release_recursive>
 800eae2:	e7d9      	b.n	800ea98 <_fflush_r+0xc>
 800eae4:	4b05      	ldr	r3, [pc, #20]	; (800eafc <_fflush_r+0x70>)
 800eae6:	429c      	cmp	r4, r3
 800eae8:	d101      	bne.n	800eaee <_fflush_r+0x62>
 800eaea:	68ac      	ldr	r4, [r5, #8]
 800eaec:	e7df      	b.n	800eaae <_fflush_r+0x22>
 800eaee:	4b04      	ldr	r3, [pc, #16]	; (800eb00 <_fflush_r+0x74>)
 800eaf0:	429c      	cmp	r4, r3
 800eaf2:	bf08      	it	eq
 800eaf4:	68ec      	ldreq	r4, [r5, #12]
 800eaf6:	e7da      	b.n	800eaae <_fflush_r+0x22>
 800eaf8:	0801072c 	.word	0x0801072c
 800eafc:	0801074c 	.word	0x0801074c
 800eb00:	0801070c 	.word	0x0801070c

0800eb04 <std>:
 800eb04:	2300      	movs	r3, #0
 800eb06:	b510      	push	{r4, lr}
 800eb08:	4604      	mov	r4, r0
 800eb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb12:	6083      	str	r3, [r0, #8]
 800eb14:	8181      	strh	r1, [r0, #12]
 800eb16:	6643      	str	r3, [r0, #100]	; 0x64
 800eb18:	81c2      	strh	r2, [r0, #14]
 800eb1a:	6183      	str	r3, [r0, #24]
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	2208      	movs	r2, #8
 800eb20:	305c      	adds	r0, #92	; 0x5c
 800eb22:	f7fd fb77 	bl	800c214 <memset>
 800eb26:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <std+0x38>)
 800eb28:	6263      	str	r3, [r4, #36]	; 0x24
 800eb2a:	4b05      	ldr	r3, [pc, #20]	; (800eb40 <std+0x3c>)
 800eb2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb2e:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <std+0x40>)
 800eb30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <std+0x44>)
 800eb34:	6224      	str	r4, [r4, #32]
 800eb36:	6323      	str	r3, [r4, #48]	; 0x30
 800eb38:	bd10      	pop	{r4, pc}
 800eb3a:	bf00      	nop
 800eb3c:	0800ee49 	.word	0x0800ee49
 800eb40:	0800ee6b 	.word	0x0800ee6b
 800eb44:	0800eea3 	.word	0x0800eea3
 800eb48:	0800eec7 	.word	0x0800eec7

0800eb4c <_cleanup_r>:
 800eb4c:	4901      	ldr	r1, [pc, #4]	; (800eb54 <_cleanup_r+0x8>)
 800eb4e:	f000 b8af 	b.w	800ecb0 <_fwalk_reent>
 800eb52:	bf00      	nop
 800eb54:	0800ea8d 	.word	0x0800ea8d

0800eb58 <__sfmoreglue>:
 800eb58:	b570      	push	{r4, r5, r6, lr}
 800eb5a:	2268      	movs	r2, #104	; 0x68
 800eb5c:	1e4d      	subs	r5, r1, #1
 800eb5e:	4355      	muls	r5, r2
 800eb60:	460e      	mov	r6, r1
 800eb62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb66:	f7ff fa15 	bl	800df94 <_malloc_r>
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	b140      	cbz	r0, 800eb80 <__sfmoreglue+0x28>
 800eb6e:	2100      	movs	r1, #0
 800eb70:	e9c0 1600 	strd	r1, r6, [r0]
 800eb74:	300c      	adds	r0, #12
 800eb76:	60a0      	str	r0, [r4, #8]
 800eb78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb7c:	f7fd fb4a 	bl	800c214 <memset>
 800eb80:	4620      	mov	r0, r4
 800eb82:	bd70      	pop	{r4, r5, r6, pc}

0800eb84 <__sfp_lock_acquire>:
 800eb84:	4801      	ldr	r0, [pc, #4]	; (800eb8c <__sfp_lock_acquire+0x8>)
 800eb86:	f000 b8b3 	b.w	800ecf0 <__retarget_lock_acquire_recursive>
 800eb8a:	bf00      	nop
 800eb8c:	200008a9 	.word	0x200008a9

0800eb90 <__sfp_lock_release>:
 800eb90:	4801      	ldr	r0, [pc, #4]	; (800eb98 <__sfp_lock_release+0x8>)
 800eb92:	f000 b8ae 	b.w	800ecf2 <__retarget_lock_release_recursive>
 800eb96:	bf00      	nop
 800eb98:	200008a9 	.word	0x200008a9

0800eb9c <__sinit_lock_acquire>:
 800eb9c:	4801      	ldr	r0, [pc, #4]	; (800eba4 <__sinit_lock_acquire+0x8>)
 800eb9e:	f000 b8a7 	b.w	800ecf0 <__retarget_lock_acquire_recursive>
 800eba2:	bf00      	nop
 800eba4:	200008aa 	.word	0x200008aa

0800eba8 <__sinit_lock_release>:
 800eba8:	4801      	ldr	r0, [pc, #4]	; (800ebb0 <__sinit_lock_release+0x8>)
 800ebaa:	f000 b8a2 	b.w	800ecf2 <__retarget_lock_release_recursive>
 800ebae:	bf00      	nop
 800ebb0:	200008aa 	.word	0x200008aa

0800ebb4 <__sinit>:
 800ebb4:	b510      	push	{r4, lr}
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	f7ff fff0 	bl	800eb9c <__sinit_lock_acquire>
 800ebbc:	69a3      	ldr	r3, [r4, #24]
 800ebbe:	b11b      	cbz	r3, 800ebc8 <__sinit+0x14>
 800ebc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc4:	f7ff bff0 	b.w	800eba8 <__sinit_lock_release>
 800ebc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebcc:	6523      	str	r3, [r4, #80]	; 0x50
 800ebce:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <__sinit+0x68>)
 800ebd0:	4a13      	ldr	r2, [pc, #76]	; (800ec20 <__sinit+0x6c>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebd6:	42a3      	cmp	r3, r4
 800ebd8:	bf04      	itt	eq
 800ebda:	2301      	moveq	r3, #1
 800ebdc:	61a3      	streq	r3, [r4, #24]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	f000 f820 	bl	800ec24 <__sfp>
 800ebe4:	6060      	str	r0, [r4, #4]
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 f81c 	bl	800ec24 <__sfp>
 800ebec:	60a0      	str	r0, [r4, #8]
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f000 f818 	bl	800ec24 <__sfp>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	60e0      	str	r0, [r4, #12]
 800ebf8:	2104      	movs	r1, #4
 800ebfa:	6860      	ldr	r0, [r4, #4]
 800ebfc:	f7ff ff82 	bl	800eb04 <std>
 800ec00:	68a0      	ldr	r0, [r4, #8]
 800ec02:	2201      	movs	r2, #1
 800ec04:	2109      	movs	r1, #9
 800ec06:	f7ff ff7d 	bl	800eb04 <std>
 800ec0a:	68e0      	ldr	r0, [r4, #12]
 800ec0c:	2202      	movs	r2, #2
 800ec0e:	2112      	movs	r1, #18
 800ec10:	f7ff ff78 	bl	800eb04 <std>
 800ec14:	2301      	movs	r3, #1
 800ec16:	61a3      	str	r3, [r4, #24]
 800ec18:	e7d2      	b.n	800ebc0 <__sinit+0xc>
 800ec1a:	bf00      	nop
 800ec1c:	0801033c 	.word	0x0801033c
 800ec20:	0800eb4d 	.word	0x0800eb4d

0800ec24 <__sfp>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	4607      	mov	r7, r0
 800ec28:	f7ff ffac 	bl	800eb84 <__sfp_lock_acquire>
 800ec2c:	4b1e      	ldr	r3, [pc, #120]	; (800eca8 <__sfp+0x84>)
 800ec2e:	681e      	ldr	r6, [r3, #0]
 800ec30:	69b3      	ldr	r3, [r6, #24]
 800ec32:	b913      	cbnz	r3, 800ec3a <__sfp+0x16>
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7ff ffbd 	bl	800ebb4 <__sinit>
 800ec3a:	3648      	adds	r6, #72	; 0x48
 800ec3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec40:	3b01      	subs	r3, #1
 800ec42:	d503      	bpl.n	800ec4c <__sfp+0x28>
 800ec44:	6833      	ldr	r3, [r6, #0]
 800ec46:	b30b      	cbz	r3, 800ec8c <__sfp+0x68>
 800ec48:	6836      	ldr	r6, [r6, #0]
 800ec4a:	e7f7      	b.n	800ec3c <__sfp+0x18>
 800ec4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec50:	b9d5      	cbnz	r5, 800ec88 <__sfp+0x64>
 800ec52:	4b16      	ldr	r3, [pc, #88]	; (800ecac <__sfp+0x88>)
 800ec54:	60e3      	str	r3, [r4, #12]
 800ec56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec5a:	6665      	str	r5, [r4, #100]	; 0x64
 800ec5c:	f000 f847 	bl	800ecee <__retarget_lock_init_recursive>
 800ec60:	f7ff ff96 	bl	800eb90 <__sfp_lock_release>
 800ec64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec6c:	6025      	str	r5, [r4, #0]
 800ec6e:	61a5      	str	r5, [r4, #24]
 800ec70:	2208      	movs	r2, #8
 800ec72:	4629      	mov	r1, r5
 800ec74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec78:	f7fd facc 	bl	800c214 <memset>
 800ec7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec84:	4620      	mov	r0, r4
 800ec86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec88:	3468      	adds	r4, #104	; 0x68
 800ec8a:	e7d9      	b.n	800ec40 <__sfp+0x1c>
 800ec8c:	2104      	movs	r1, #4
 800ec8e:	4638      	mov	r0, r7
 800ec90:	f7ff ff62 	bl	800eb58 <__sfmoreglue>
 800ec94:	4604      	mov	r4, r0
 800ec96:	6030      	str	r0, [r6, #0]
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d1d5      	bne.n	800ec48 <__sfp+0x24>
 800ec9c:	f7ff ff78 	bl	800eb90 <__sfp_lock_release>
 800eca0:	230c      	movs	r3, #12
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	e7ee      	b.n	800ec84 <__sfp+0x60>
 800eca6:	bf00      	nop
 800eca8:	0801033c 	.word	0x0801033c
 800ecac:	ffff0001 	.word	0xffff0001

0800ecb0 <_fwalk_reent>:
 800ecb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	4688      	mov	r8, r1
 800ecb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecbc:	2700      	movs	r7, #0
 800ecbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecc2:	f1b9 0901 	subs.w	r9, r9, #1
 800ecc6:	d505      	bpl.n	800ecd4 <_fwalk_reent+0x24>
 800ecc8:	6824      	ldr	r4, [r4, #0]
 800ecca:	2c00      	cmp	r4, #0
 800eccc:	d1f7      	bne.n	800ecbe <_fwalk_reent+0xe>
 800ecce:	4638      	mov	r0, r7
 800ecd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd4:	89ab      	ldrh	r3, [r5, #12]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d907      	bls.n	800ecea <_fwalk_reent+0x3a>
 800ecda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecde:	3301      	adds	r3, #1
 800ece0:	d003      	beq.n	800ecea <_fwalk_reent+0x3a>
 800ece2:	4629      	mov	r1, r5
 800ece4:	4630      	mov	r0, r6
 800ece6:	47c0      	blx	r8
 800ece8:	4307      	orrs	r7, r0
 800ecea:	3568      	adds	r5, #104	; 0x68
 800ecec:	e7e9      	b.n	800ecc2 <_fwalk_reent+0x12>

0800ecee <__retarget_lock_init_recursive>:
 800ecee:	4770      	bx	lr

0800ecf0 <__retarget_lock_acquire_recursive>:
 800ecf0:	4770      	bx	lr

0800ecf2 <__retarget_lock_release_recursive>:
 800ecf2:	4770      	bx	lr

0800ecf4 <__swhatbuf_r>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	460e      	mov	r6, r1
 800ecf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	b096      	sub	sp, #88	; 0x58
 800ed00:	4614      	mov	r4, r2
 800ed02:	461d      	mov	r5, r3
 800ed04:	da08      	bge.n	800ed18 <__swhatbuf_r+0x24>
 800ed06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	602a      	str	r2, [r5, #0]
 800ed0e:	061a      	lsls	r2, r3, #24
 800ed10:	d410      	bmi.n	800ed34 <__swhatbuf_r+0x40>
 800ed12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed16:	e00e      	b.n	800ed36 <__swhatbuf_r+0x42>
 800ed18:	466a      	mov	r2, sp
 800ed1a:	f000 f8fb 	bl	800ef14 <_fstat_r>
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	dbf1      	blt.n	800ed06 <__swhatbuf_r+0x12>
 800ed22:	9a01      	ldr	r2, [sp, #4]
 800ed24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed2c:	425a      	negs	r2, r3
 800ed2e:	415a      	adcs	r2, r3
 800ed30:	602a      	str	r2, [r5, #0]
 800ed32:	e7ee      	b.n	800ed12 <__swhatbuf_r+0x1e>
 800ed34:	2340      	movs	r3, #64	; 0x40
 800ed36:	2000      	movs	r0, #0
 800ed38:	6023      	str	r3, [r4, #0]
 800ed3a:	b016      	add	sp, #88	; 0x58
 800ed3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed40 <__smakebuf_r>:
 800ed40:	898b      	ldrh	r3, [r1, #12]
 800ed42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed44:	079d      	lsls	r5, r3, #30
 800ed46:	4606      	mov	r6, r0
 800ed48:	460c      	mov	r4, r1
 800ed4a:	d507      	bpl.n	800ed5c <__smakebuf_r+0x1c>
 800ed4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	6123      	str	r3, [r4, #16]
 800ed54:	2301      	movs	r3, #1
 800ed56:	6163      	str	r3, [r4, #20]
 800ed58:	b002      	add	sp, #8
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	ab01      	add	r3, sp, #4
 800ed5e:	466a      	mov	r2, sp
 800ed60:	f7ff ffc8 	bl	800ecf4 <__swhatbuf_r>
 800ed64:	9900      	ldr	r1, [sp, #0]
 800ed66:	4605      	mov	r5, r0
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7ff f913 	bl	800df94 <_malloc_r>
 800ed6e:	b948      	cbnz	r0, 800ed84 <__smakebuf_r+0x44>
 800ed70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed74:	059a      	lsls	r2, r3, #22
 800ed76:	d4ef      	bmi.n	800ed58 <__smakebuf_r+0x18>
 800ed78:	f023 0303 	bic.w	r3, r3, #3
 800ed7c:	f043 0302 	orr.w	r3, r3, #2
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	e7e3      	b.n	800ed4c <__smakebuf_r+0xc>
 800ed84:	4b0d      	ldr	r3, [pc, #52]	; (800edbc <__smakebuf_r+0x7c>)
 800ed86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed88:	89a3      	ldrh	r3, [r4, #12]
 800ed8a:	6020      	str	r0, [r4, #0]
 800ed8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed90:	81a3      	strh	r3, [r4, #12]
 800ed92:	9b00      	ldr	r3, [sp, #0]
 800ed94:	6163      	str	r3, [r4, #20]
 800ed96:	9b01      	ldr	r3, [sp, #4]
 800ed98:	6120      	str	r0, [r4, #16]
 800ed9a:	b15b      	cbz	r3, 800edb4 <__smakebuf_r+0x74>
 800ed9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eda0:	4630      	mov	r0, r6
 800eda2:	f000 f8c9 	bl	800ef38 <_isatty_r>
 800eda6:	b128      	cbz	r0, 800edb4 <__smakebuf_r+0x74>
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	f023 0303 	bic.w	r3, r3, #3
 800edae:	f043 0301 	orr.w	r3, r3, #1
 800edb2:	81a3      	strh	r3, [r4, #12]
 800edb4:	89a0      	ldrh	r0, [r4, #12]
 800edb6:	4305      	orrs	r5, r0
 800edb8:	81a5      	strh	r5, [r4, #12]
 800edba:	e7cd      	b.n	800ed58 <__smakebuf_r+0x18>
 800edbc:	0800eb4d 	.word	0x0800eb4d

0800edc0 <_raise_r>:
 800edc0:	291f      	cmp	r1, #31
 800edc2:	b538      	push	{r3, r4, r5, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	460d      	mov	r5, r1
 800edc8:	d904      	bls.n	800edd4 <_raise_r+0x14>
 800edca:	2316      	movs	r3, #22
 800edcc:	6003      	str	r3, [r0, #0]
 800edce:	f04f 30ff 	mov.w	r0, #4294967295
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edd6:	b112      	cbz	r2, 800edde <_raise_r+0x1e>
 800edd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eddc:	b94b      	cbnz	r3, 800edf2 <_raise_r+0x32>
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 f830 	bl	800ee44 <_getpid_r>
 800ede4:	462a      	mov	r2, r5
 800ede6:	4601      	mov	r1, r0
 800ede8:	4620      	mov	r0, r4
 800edea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edee:	f000 b817 	b.w	800ee20 <_kill_r>
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d00a      	beq.n	800ee0c <_raise_r+0x4c>
 800edf6:	1c59      	adds	r1, r3, #1
 800edf8:	d103      	bne.n	800ee02 <_raise_r+0x42>
 800edfa:	2316      	movs	r3, #22
 800edfc:	6003      	str	r3, [r0, #0]
 800edfe:	2001      	movs	r0, #1
 800ee00:	e7e7      	b.n	800edd2 <_raise_r+0x12>
 800ee02:	2400      	movs	r4, #0
 800ee04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee08:	4628      	mov	r0, r5
 800ee0a:	4798      	blx	r3
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	e7e0      	b.n	800edd2 <_raise_r+0x12>

0800ee10 <raise>:
 800ee10:	4b02      	ldr	r3, [pc, #8]	; (800ee1c <raise+0xc>)
 800ee12:	4601      	mov	r1, r0
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	f7ff bfd3 	b.w	800edc0 <_raise_r>
 800ee1a:	bf00      	nop
 800ee1c:	2000006c 	.word	0x2000006c

0800ee20 <_kill_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4d07      	ldr	r5, [pc, #28]	; (800ee40 <_kill_r+0x20>)
 800ee24:	2300      	movs	r3, #0
 800ee26:	4604      	mov	r4, r0
 800ee28:	4608      	mov	r0, r1
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	602b      	str	r3, [r5, #0]
 800ee2e:	f7f6 fe4b 	bl	8005ac8 <_kill>
 800ee32:	1c43      	adds	r3, r0, #1
 800ee34:	d102      	bne.n	800ee3c <_kill_r+0x1c>
 800ee36:	682b      	ldr	r3, [r5, #0]
 800ee38:	b103      	cbz	r3, 800ee3c <_kill_r+0x1c>
 800ee3a:	6023      	str	r3, [r4, #0]
 800ee3c:	bd38      	pop	{r3, r4, r5, pc}
 800ee3e:	bf00      	nop
 800ee40:	200008a4 	.word	0x200008a4

0800ee44 <_getpid_r>:
 800ee44:	f7f6 be38 	b.w	8005ab8 <_getpid>

0800ee48 <__sread>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee50:	f000 f894 	bl	800ef7c <_read_r>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	bfab      	itete	ge
 800ee58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee5c:	181b      	addge	r3, r3, r0
 800ee5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee62:	bfac      	ite	ge
 800ee64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee66:	81a3      	strhlt	r3, [r4, #12]
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <__swrite>:
 800ee6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6e:	461f      	mov	r7, r3
 800ee70:	898b      	ldrh	r3, [r1, #12]
 800ee72:	05db      	lsls	r3, r3, #23
 800ee74:	4605      	mov	r5, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	4616      	mov	r6, r2
 800ee7a:	d505      	bpl.n	800ee88 <__swrite+0x1e>
 800ee7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee80:	2302      	movs	r3, #2
 800ee82:	2200      	movs	r2, #0
 800ee84:	f000 f868 	bl	800ef58 <_lseek_r>
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	4632      	mov	r2, r6
 800ee96:	463b      	mov	r3, r7
 800ee98:	4628      	mov	r0, r5
 800ee9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9e:	f000 b817 	b.w	800eed0 <_write_r>

0800eea2 <__sseek>:
 800eea2:	b510      	push	{r4, lr}
 800eea4:	460c      	mov	r4, r1
 800eea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeaa:	f000 f855 	bl	800ef58 <_lseek_r>
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	bf15      	itete	ne
 800eeb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eebe:	81a3      	strheq	r3, [r4, #12]
 800eec0:	bf18      	it	ne
 800eec2:	81a3      	strhne	r3, [r4, #12]
 800eec4:	bd10      	pop	{r4, pc}

0800eec6 <__sclose>:
 800eec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeca:	f000 b813 	b.w	800eef4 <_close_r>
	...

0800eed0 <_write_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d07      	ldr	r5, [pc, #28]	; (800eef0 <_write_r+0x20>)
 800eed4:	4604      	mov	r4, r0
 800eed6:	4608      	mov	r0, r1
 800eed8:	4611      	mov	r1, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	602a      	str	r2, [r5, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	f7f6 fe29 	bl	8005b36 <_write>
 800eee4:	1c43      	adds	r3, r0, #1
 800eee6:	d102      	bne.n	800eeee <_write_r+0x1e>
 800eee8:	682b      	ldr	r3, [r5, #0]
 800eeea:	b103      	cbz	r3, 800eeee <_write_r+0x1e>
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	bd38      	pop	{r3, r4, r5, pc}
 800eef0:	200008a4 	.word	0x200008a4

0800eef4 <_close_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4d06      	ldr	r5, [pc, #24]	; (800ef10 <_close_r+0x1c>)
 800eef8:	2300      	movs	r3, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	4608      	mov	r0, r1
 800eefe:	602b      	str	r3, [r5, #0]
 800ef00:	f7f6 fe35 	bl	8005b6e <_close>
 800ef04:	1c43      	adds	r3, r0, #1
 800ef06:	d102      	bne.n	800ef0e <_close_r+0x1a>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	b103      	cbz	r3, 800ef0e <_close_r+0x1a>
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
 800ef10:	200008a4 	.word	0x200008a4

0800ef14 <_fstat_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d07      	ldr	r5, [pc, #28]	; (800ef34 <_fstat_r+0x20>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	602b      	str	r3, [r5, #0]
 800ef22:	f7f6 fe30 	bl	8005b86 <_fstat>
 800ef26:	1c43      	adds	r3, r0, #1
 800ef28:	d102      	bne.n	800ef30 <_fstat_r+0x1c>
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	b103      	cbz	r3, 800ef30 <_fstat_r+0x1c>
 800ef2e:	6023      	str	r3, [r4, #0]
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop
 800ef34:	200008a4 	.word	0x200008a4

0800ef38 <_isatty_r>:
 800ef38:	b538      	push	{r3, r4, r5, lr}
 800ef3a:	4d06      	ldr	r5, [pc, #24]	; (800ef54 <_isatty_r+0x1c>)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	4604      	mov	r4, r0
 800ef40:	4608      	mov	r0, r1
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	f7f6 fe2f 	bl	8005ba6 <_isatty>
 800ef48:	1c43      	adds	r3, r0, #1
 800ef4a:	d102      	bne.n	800ef52 <_isatty_r+0x1a>
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	b103      	cbz	r3, 800ef52 <_isatty_r+0x1a>
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	200008a4 	.word	0x200008a4

0800ef58 <_lseek_r>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4d07      	ldr	r5, [pc, #28]	; (800ef78 <_lseek_r+0x20>)
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	4608      	mov	r0, r1
 800ef60:	4611      	mov	r1, r2
 800ef62:	2200      	movs	r2, #0
 800ef64:	602a      	str	r2, [r5, #0]
 800ef66:	461a      	mov	r2, r3
 800ef68:	f7f6 fe28 	bl	8005bbc <_lseek>
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	d102      	bne.n	800ef76 <_lseek_r+0x1e>
 800ef70:	682b      	ldr	r3, [r5, #0]
 800ef72:	b103      	cbz	r3, 800ef76 <_lseek_r+0x1e>
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	bd38      	pop	{r3, r4, r5, pc}
 800ef78:	200008a4 	.word	0x200008a4

0800ef7c <_read_r>:
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	4d07      	ldr	r5, [pc, #28]	; (800ef9c <_read_r+0x20>)
 800ef80:	4604      	mov	r4, r0
 800ef82:	4608      	mov	r0, r1
 800ef84:	4611      	mov	r1, r2
 800ef86:	2200      	movs	r2, #0
 800ef88:	602a      	str	r2, [r5, #0]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	f7f6 fdb6 	bl	8005afc <_read>
 800ef90:	1c43      	adds	r3, r0, #1
 800ef92:	d102      	bne.n	800ef9a <_read_r+0x1e>
 800ef94:	682b      	ldr	r3, [r5, #0]
 800ef96:	b103      	cbz	r3, 800ef9a <_read_r+0x1e>
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	bd38      	pop	{r3, r4, r5, pc}
 800ef9c:	200008a4 	.word	0x200008a4

0800efa0 <asin>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	ed2d 8b02 	vpush	{d8}
 800efa6:	ec55 4b10 	vmov	r4, r5, d0
 800efaa:	f000 f8c9 	bl	800f140 <__ieee754_asin>
 800efae:	4622      	mov	r2, r4
 800efb0:	462b      	mov	r3, r5
 800efb2:	4620      	mov	r0, r4
 800efb4:	4629      	mov	r1, r5
 800efb6:	eeb0 8a40 	vmov.f32	s16, s0
 800efba:	eef0 8a60 	vmov.f32	s17, s1
 800efbe:	f7f1 fdbd 	bl	8000b3c <__aeabi_dcmpun>
 800efc2:	b9a8      	cbnz	r0, 800eff0 <asin+0x50>
 800efc4:	ec45 4b10 	vmov	d0, r4, r5
 800efc8:	f001 f8de 	bl	8010188 <fabs>
 800efcc:	4b0c      	ldr	r3, [pc, #48]	; (800f000 <asin+0x60>)
 800efce:	ec51 0b10 	vmov	r0, r1, d0
 800efd2:	2200      	movs	r2, #0
 800efd4:	f7f1 fda8 	bl	8000b28 <__aeabi_dcmpgt>
 800efd8:	b150      	cbz	r0, 800eff0 <asin+0x50>
 800efda:	f7fd f8f1 	bl	800c1c0 <__errno>
 800efde:	ecbd 8b02 	vpop	{d8}
 800efe2:	2321      	movs	r3, #33	; 0x21
 800efe4:	6003      	str	r3, [r0, #0]
 800efe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efea:	4806      	ldr	r0, [pc, #24]	; (800f004 <asin+0x64>)
 800efec:	f7ff b848 	b.w	800e080 <nan>
 800eff0:	eeb0 0a48 	vmov.f32	s0, s16
 800eff4:	eef0 0a68 	vmov.f32	s1, s17
 800eff8:	ecbd 8b02 	vpop	{d8}
 800effc:	bd38      	pop	{r3, r4, r5, pc}
 800effe:	bf00      	nop
 800f000:	3ff00000 	.word	0x3ff00000
 800f004:	080105d7 	.word	0x080105d7

0800f008 <pow>:
 800f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00a:	ed2d 8b02 	vpush	{d8}
 800f00e:	eeb0 8a40 	vmov.f32	s16, s0
 800f012:	eef0 8a60 	vmov.f32	s17, s1
 800f016:	ec55 4b11 	vmov	r4, r5, d1
 800f01a:	f000 faa5 	bl	800f568 <__ieee754_pow>
 800f01e:	4622      	mov	r2, r4
 800f020:	462b      	mov	r3, r5
 800f022:	4620      	mov	r0, r4
 800f024:	4629      	mov	r1, r5
 800f026:	ec57 6b10 	vmov	r6, r7, d0
 800f02a:	f7f1 fd87 	bl	8000b3c <__aeabi_dcmpun>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d13b      	bne.n	800f0aa <pow+0xa2>
 800f032:	ec51 0b18 	vmov	r0, r1, d8
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	f7f1 fd4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f03e:	b1b8      	cbz	r0, 800f070 <pow+0x68>
 800f040:	2200      	movs	r2, #0
 800f042:	2300      	movs	r3, #0
 800f044:	4620      	mov	r0, r4
 800f046:	4629      	mov	r1, r5
 800f048:	f7f1 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d146      	bne.n	800f0de <pow+0xd6>
 800f050:	ec45 4b10 	vmov	d0, r4, r5
 800f054:	f001 f8a1 	bl	801019a <finite>
 800f058:	b338      	cbz	r0, 800f0aa <pow+0xa2>
 800f05a:	2200      	movs	r2, #0
 800f05c:	2300      	movs	r3, #0
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 fd43 	bl	8000aec <__aeabi_dcmplt>
 800f066:	b300      	cbz	r0, 800f0aa <pow+0xa2>
 800f068:	f7fd f8aa 	bl	800c1c0 <__errno>
 800f06c:	2322      	movs	r3, #34	; 0x22
 800f06e:	e01b      	b.n	800f0a8 <pow+0xa0>
 800f070:	ec47 6b10 	vmov	d0, r6, r7
 800f074:	f001 f891 	bl	801019a <finite>
 800f078:	b9e0      	cbnz	r0, 800f0b4 <pow+0xac>
 800f07a:	eeb0 0a48 	vmov.f32	s0, s16
 800f07e:	eef0 0a68 	vmov.f32	s1, s17
 800f082:	f001 f88a 	bl	801019a <finite>
 800f086:	b1a8      	cbz	r0, 800f0b4 <pow+0xac>
 800f088:	ec45 4b10 	vmov	d0, r4, r5
 800f08c:	f001 f885 	bl	801019a <finite>
 800f090:	b180      	cbz	r0, 800f0b4 <pow+0xac>
 800f092:	4632      	mov	r2, r6
 800f094:	463b      	mov	r3, r7
 800f096:	4630      	mov	r0, r6
 800f098:	4639      	mov	r1, r7
 800f09a:	f7f1 fd4f 	bl	8000b3c <__aeabi_dcmpun>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d0e2      	beq.n	800f068 <pow+0x60>
 800f0a2:	f7fd f88d 	bl	800c1c0 <__errno>
 800f0a6:	2321      	movs	r3, #33	; 0x21
 800f0a8:	6003      	str	r3, [r0, #0]
 800f0aa:	ecbd 8b02 	vpop	{d8}
 800f0ae:	ec47 6b10 	vmov	d0, r6, r7
 800f0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	f7f1 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d0f2      	beq.n	800f0aa <pow+0xa2>
 800f0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f0c8:	eef0 0a68 	vmov.f32	s1, s17
 800f0cc:	f001 f865 	bl	801019a <finite>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d0ea      	beq.n	800f0aa <pow+0xa2>
 800f0d4:	ec45 4b10 	vmov	d0, r4, r5
 800f0d8:	f001 f85f 	bl	801019a <finite>
 800f0dc:	e7c3      	b.n	800f066 <pow+0x5e>
 800f0de:	4f01      	ldr	r7, [pc, #4]	; (800f0e4 <pow+0xdc>)
 800f0e0:	2600      	movs	r6, #0
 800f0e2:	e7e2      	b.n	800f0aa <pow+0xa2>
 800f0e4:	3ff00000 	.word	0x3ff00000

0800f0e8 <sqrt>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	ed2d 8b02 	vpush	{d8}
 800f0ee:	ec55 4b10 	vmov	r4, r5, d0
 800f0f2:	f000 ff67 	bl	800ffc4 <__ieee754_sqrt>
 800f0f6:	4622      	mov	r2, r4
 800f0f8:	462b      	mov	r3, r5
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	eeb0 8a40 	vmov.f32	s16, s0
 800f102:	eef0 8a60 	vmov.f32	s17, s1
 800f106:	f7f1 fd19 	bl	8000b3c <__aeabi_dcmpun>
 800f10a:	b990      	cbnz	r0, 800f132 <sqrt+0x4a>
 800f10c:	2200      	movs	r2, #0
 800f10e:	2300      	movs	r3, #0
 800f110:	4620      	mov	r0, r4
 800f112:	4629      	mov	r1, r5
 800f114:	f7f1 fcea 	bl	8000aec <__aeabi_dcmplt>
 800f118:	b158      	cbz	r0, 800f132 <sqrt+0x4a>
 800f11a:	f7fd f851 	bl	800c1c0 <__errno>
 800f11e:	2321      	movs	r3, #33	; 0x21
 800f120:	6003      	str	r3, [r0, #0]
 800f122:	2200      	movs	r2, #0
 800f124:	2300      	movs	r3, #0
 800f126:	4610      	mov	r0, r2
 800f128:	4619      	mov	r1, r3
 800f12a:	f7f1 fb97 	bl	800085c <__aeabi_ddiv>
 800f12e:	ec41 0b18 	vmov	d8, r0, r1
 800f132:	eeb0 0a48 	vmov.f32	s0, s16
 800f136:	eef0 0a68 	vmov.f32	s1, s17
 800f13a:	ecbd 8b02 	vpop	{d8}
 800f13e:	bd38      	pop	{r3, r4, r5, pc}

0800f140 <__ieee754_asin>:
 800f140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f144:	ed2d 8b04 	vpush	{d8-d9}
 800f148:	ec55 4b10 	vmov	r4, r5, d0
 800f14c:	4bcc      	ldr	r3, [pc, #816]	; (800f480 <__ieee754_asin+0x340>)
 800f14e:	b083      	sub	sp, #12
 800f150:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f154:	4598      	cmp	r8, r3
 800f156:	9501      	str	r5, [sp, #4]
 800f158:	dd35      	ble.n	800f1c6 <__ieee754_asin+0x86>
 800f15a:	ee10 3a10 	vmov	r3, s0
 800f15e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800f162:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800f166:	ea58 0303 	orrs.w	r3, r8, r3
 800f16a:	d117      	bne.n	800f19c <__ieee754_asin+0x5c>
 800f16c:	a3aa      	add	r3, pc, #680	; (adr r3, 800f418 <__ieee754_asin+0x2d8>)
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	ee10 0a10 	vmov	r0, s0
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 fa46 	bl	8000608 <__aeabi_dmul>
 800f17c:	a3a8      	add	r3, pc, #672	; (adr r3, 800f420 <__ieee754_asin+0x2e0>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	4606      	mov	r6, r0
 800f184:	460f      	mov	r7, r1
 800f186:	4620      	mov	r0, r4
 800f188:	4629      	mov	r1, r5
 800f18a:	f7f1 fa3d 	bl	8000608 <__aeabi_dmul>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	4630      	mov	r0, r6
 800f194:	4639      	mov	r1, r7
 800f196:	f7f1 f881 	bl	800029c <__adddf3>
 800f19a:	e00b      	b.n	800f1b4 <__ieee754_asin+0x74>
 800f19c:	ee10 2a10 	vmov	r2, s0
 800f1a0:	462b      	mov	r3, r5
 800f1a2:	ee10 0a10 	vmov	r0, s0
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7f1 f876 	bl	8000298 <__aeabi_dsub>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	f7f1 fb54 	bl	800085c <__aeabi_ddiv>
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	ec45 4b10 	vmov	d0, r4, r5
 800f1bc:	b003      	add	sp, #12
 800f1be:	ecbd 8b04 	vpop	{d8-d9}
 800f1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c6:	4baf      	ldr	r3, [pc, #700]	; (800f484 <__ieee754_asin+0x344>)
 800f1c8:	4598      	cmp	r8, r3
 800f1ca:	dc11      	bgt.n	800f1f0 <__ieee754_asin+0xb0>
 800f1cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f1d0:	f280 80ae 	bge.w	800f330 <__ieee754_asin+0x1f0>
 800f1d4:	a394      	add	r3, pc, #592	; (adr r3, 800f428 <__ieee754_asin+0x2e8>)
 800f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1da:	ee10 0a10 	vmov	r0, s0
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f1 f85c 	bl	800029c <__adddf3>
 800f1e4:	4ba8      	ldr	r3, [pc, #672]	; (800f488 <__ieee754_asin+0x348>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	f7f1 fc9e 	bl	8000b28 <__aeabi_dcmpgt>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d1e3      	bne.n	800f1b8 <__ieee754_asin+0x78>
 800f1f0:	ec45 4b10 	vmov	d0, r4, r5
 800f1f4:	f000 ffc8 	bl	8010188 <fabs>
 800f1f8:	49a3      	ldr	r1, [pc, #652]	; (800f488 <__ieee754_asin+0x348>)
 800f1fa:	ec53 2b10 	vmov	r2, r3, d0
 800f1fe:	2000      	movs	r0, #0
 800f200:	f7f1 f84a 	bl	8000298 <__aeabi_dsub>
 800f204:	4ba1      	ldr	r3, [pc, #644]	; (800f48c <__ieee754_asin+0x34c>)
 800f206:	2200      	movs	r2, #0
 800f208:	f7f1 f9fe 	bl	8000608 <__aeabi_dmul>
 800f20c:	a388      	add	r3, pc, #544	; (adr r3, 800f430 <__ieee754_asin+0x2f0>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	f7f1 f9f7 	bl	8000608 <__aeabi_dmul>
 800f21a:	a387      	add	r3, pc, #540	; (adr r3, 800f438 <__ieee754_asin+0x2f8>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	f7f1 f83c 	bl	800029c <__adddf3>
 800f224:	4622      	mov	r2, r4
 800f226:	462b      	mov	r3, r5
 800f228:	f7f1 f9ee 	bl	8000608 <__aeabi_dmul>
 800f22c:	a384      	add	r3, pc, #528	; (adr r3, 800f440 <__ieee754_asin+0x300>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	f7f1 f831 	bl	8000298 <__aeabi_dsub>
 800f236:	4622      	mov	r2, r4
 800f238:	462b      	mov	r3, r5
 800f23a:	f7f1 f9e5 	bl	8000608 <__aeabi_dmul>
 800f23e:	a382      	add	r3, pc, #520	; (adr r3, 800f448 <__ieee754_asin+0x308>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f1 f82a 	bl	800029c <__adddf3>
 800f248:	4622      	mov	r2, r4
 800f24a:	462b      	mov	r3, r5
 800f24c:	f7f1 f9dc 	bl	8000608 <__aeabi_dmul>
 800f250:	a37f      	add	r3, pc, #508	; (adr r3, 800f450 <__ieee754_asin+0x310>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f1 f81f 	bl	8000298 <__aeabi_dsub>
 800f25a:	4622      	mov	r2, r4
 800f25c:	462b      	mov	r3, r5
 800f25e:	f7f1 f9d3 	bl	8000608 <__aeabi_dmul>
 800f262:	a37d      	add	r3, pc, #500	; (adr r3, 800f458 <__ieee754_asin+0x318>)
 800f264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f268:	f7f1 f818 	bl	800029c <__adddf3>
 800f26c:	4622      	mov	r2, r4
 800f26e:	462b      	mov	r3, r5
 800f270:	f7f1 f9ca 	bl	8000608 <__aeabi_dmul>
 800f274:	a37a      	add	r3, pc, #488	; (adr r3, 800f460 <__ieee754_asin+0x320>)
 800f276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27a:	ec41 0b18 	vmov	d8, r0, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f1 f9c1 	bl	8000608 <__aeabi_dmul>
 800f286:	a378      	add	r3, pc, #480	; (adr r3, 800f468 <__ieee754_asin+0x328>)
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f7f1 f804 	bl	8000298 <__aeabi_dsub>
 800f290:	4622      	mov	r2, r4
 800f292:	462b      	mov	r3, r5
 800f294:	f7f1 f9b8 	bl	8000608 <__aeabi_dmul>
 800f298:	a375      	add	r3, pc, #468	; (adr r3, 800f470 <__ieee754_asin+0x330>)
 800f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29e:	f7f0 fffd 	bl	800029c <__adddf3>
 800f2a2:	4622      	mov	r2, r4
 800f2a4:	462b      	mov	r3, r5
 800f2a6:	f7f1 f9af 	bl	8000608 <__aeabi_dmul>
 800f2aa:	a373      	add	r3, pc, #460	; (adr r3, 800f478 <__ieee754_asin+0x338>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	f7f0 fff2 	bl	8000298 <__aeabi_dsub>
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	462b      	mov	r3, r5
 800f2b8:	f7f1 f9a6 	bl	8000608 <__aeabi_dmul>
 800f2bc:	4b72      	ldr	r3, [pc, #456]	; (800f488 <__ieee754_asin+0x348>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f7f0 ffec 	bl	800029c <__adddf3>
 800f2c4:	ec45 4b10 	vmov	d0, r4, r5
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	460f      	mov	r7, r1
 800f2cc:	f000 fe7a 	bl	800ffc4 <__ieee754_sqrt>
 800f2d0:	4b6f      	ldr	r3, [pc, #444]	; (800f490 <__ieee754_asin+0x350>)
 800f2d2:	4598      	cmp	r8, r3
 800f2d4:	ec5b ab10 	vmov	sl, fp, d0
 800f2d8:	f340 80dc 	ble.w	800f494 <__ieee754_asin+0x354>
 800f2dc:	4632      	mov	r2, r6
 800f2de:	463b      	mov	r3, r7
 800f2e0:	ec51 0b18 	vmov	r0, r1, d8
 800f2e4:	f7f1 faba 	bl	800085c <__aeabi_ddiv>
 800f2e8:	4652      	mov	r2, sl
 800f2ea:	465b      	mov	r3, fp
 800f2ec:	f7f1 f98c 	bl	8000608 <__aeabi_dmul>
 800f2f0:	4652      	mov	r2, sl
 800f2f2:	465b      	mov	r3, fp
 800f2f4:	f7f0 ffd2 	bl	800029c <__adddf3>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	f7f0 ffce 	bl	800029c <__adddf3>
 800f300:	a347      	add	r3, pc, #284	; (adr r3, 800f420 <__ieee754_asin+0x2e0>)
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f0 ffc7 	bl	8000298 <__aeabi_dsub>
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	a142      	add	r1, pc, #264	; (adr r1, 800f418 <__ieee754_asin+0x2d8>)
 800f310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f314:	f7f0 ffc0 	bl	8000298 <__aeabi_dsub>
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bfdc      	itt	le
 800f31e:	4602      	movle	r2, r0
 800f320:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800f324:	4604      	mov	r4, r0
 800f326:	460d      	mov	r5, r1
 800f328:	bfdc      	itt	le
 800f32a:	4614      	movle	r4, r2
 800f32c:	461d      	movle	r5, r3
 800f32e:	e743      	b.n	800f1b8 <__ieee754_asin+0x78>
 800f330:	ee10 2a10 	vmov	r2, s0
 800f334:	ee10 0a10 	vmov	r0, s0
 800f338:	462b      	mov	r3, r5
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f1 f964 	bl	8000608 <__aeabi_dmul>
 800f340:	a33b      	add	r3, pc, #236	; (adr r3, 800f430 <__ieee754_asin+0x2f0>)
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	4606      	mov	r6, r0
 800f348:	460f      	mov	r7, r1
 800f34a:	f7f1 f95d 	bl	8000608 <__aeabi_dmul>
 800f34e:	a33a      	add	r3, pc, #232	; (adr r3, 800f438 <__ieee754_asin+0x2f8>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	f7f0 ffa2 	bl	800029c <__adddf3>
 800f358:	4632      	mov	r2, r6
 800f35a:	463b      	mov	r3, r7
 800f35c:	f7f1 f954 	bl	8000608 <__aeabi_dmul>
 800f360:	a337      	add	r3, pc, #220	; (adr r3, 800f440 <__ieee754_asin+0x300>)
 800f362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f366:	f7f0 ff97 	bl	8000298 <__aeabi_dsub>
 800f36a:	4632      	mov	r2, r6
 800f36c:	463b      	mov	r3, r7
 800f36e:	f7f1 f94b 	bl	8000608 <__aeabi_dmul>
 800f372:	a335      	add	r3, pc, #212	; (adr r3, 800f448 <__ieee754_asin+0x308>)
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f7f0 ff90 	bl	800029c <__adddf3>
 800f37c:	4632      	mov	r2, r6
 800f37e:	463b      	mov	r3, r7
 800f380:	f7f1 f942 	bl	8000608 <__aeabi_dmul>
 800f384:	a332      	add	r3, pc, #200	; (adr r3, 800f450 <__ieee754_asin+0x310>)
 800f386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38a:	f7f0 ff85 	bl	8000298 <__aeabi_dsub>
 800f38e:	4632      	mov	r2, r6
 800f390:	463b      	mov	r3, r7
 800f392:	f7f1 f939 	bl	8000608 <__aeabi_dmul>
 800f396:	a330      	add	r3, pc, #192	; (adr r3, 800f458 <__ieee754_asin+0x318>)
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	f7f0 ff7e 	bl	800029c <__adddf3>
 800f3a0:	4632      	mov	r2, r6
 800f3a2:	463b      	mov	r3, r7
 800f3a4:	f7f1 f930 	bl	8000608 <__aeabi_dmul>
 800f3a8:	a32d      	add	r3, pc, #180	; (adr r3, 800f460 <__ieee754_asin+0x320>)
 800f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ae:	4680      	mov	r8, r0
 800f3b0:	4689      	mov	r9, r1
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	f7f1 f927 	bl	8000608 <__aeabi_dmul>
 800f3ba:	a32b      	add	r3, pc, #172	; (adr r3, 800f468 <__ieee754_asin+0x328>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	f7f0 ff6a 	bl	8000298 <__aeabi_dsub>
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	f7f1 f91e 	bl	8000608 <__aeabi_dmul>
 800f3cc:	a328      	add	r3, pc, #160	; (adr r3, 800f470 <__ieee754_asin+0x330>)
 800f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d2:	f7f0 ff63 	bl	800029c <__adddf3>
 800f3d6:	4632      	mov	r2, r6
 800f3d8:	463b      	mov	r3, r7
 800f3da:	f7f1 f915 	bl	8000608 <__aeabi_dmul>
 800f3de:	a326      	add	r3, pc, #152	; (adr r3, 800f478 <__ieee754_asin+0x338>)
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f7f0 ff58 	bl	8000298 <__aeabi_dsub>
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	f7f1 f90c 	bl	8000608 <__aeabi_dmul>
 800f3f0:	4b25      	ldr	r3, [pc, #148]	; (800f488 <__ieee754_asin+0x348>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f7f0 ff52 	bl	800029c <__adddf3>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f1 fa2c 	bl	800085c <__aeabi_ddiv>
 800f404:	4622      	mov	r2, r4
 800f406:	462b      	mov	r3, r5
 800f408:	f7f1 f8fe 	bl	8000608 <__aeabi_dmul>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	4620      	mov	r0, r4
 800f412:	4629      	mov	r1, r5
 800f414:	e6bf      	b.n	800f196 <__ieee754_asin+0x56>
 800f416:	bf00      	nop
 800f418:	54442d18 	.word	0x54442d18
 800f41c:	3ff921fb 	.word	0x3ff921fb
 800f420:	33145c07 	.word	0x33145c07
 800f424:	3c91a626 	.word	0x3c91a626
 800f428:	8800759c 	.word	0x8800759c
 800f42c:	7e37e43c 	.word	0x7e37e43c
 800f430:	0dfdf709 	.word	0x0dfdf709
 800f434:	3f023de1 	.word	0x3f023de1
 800f438:	7501b288 	.word	0x7501b288
 800f43c:	3f49efe0 	.word	0x3f49efe0
 800f440:	b5688f3b 	.word	0xb5688f3b
 800f444:	3fa48228 	.word	0x3fa48228
 800f448:	0e884455 	.word	0x0e884455
 800f44c:	3fc9c155 	.word	0x3fc9c155
 800f450:	03eb6f7d 	.word	0x03eb6f7d
 800f454:	3fd4d612 	.word	0x3fd4d612
 800f458:	55555555 	.word	0x55555555
 800f45c:	3fc55555 	.word	0x3fc55555
 800f460:	b12e9282 	.word	0xb12e9282
 800f464:	3fb3b8c5 	.word	0x3fb3b8c5
 800f468:	1b8d0159 	.word	0x1b8d0159
 800f46c:	3fe6066c 	.word	0x3fe6066c
 800f470:	9c598ac8 	.word	0x9c598ac8
 800f474:	40002ae5 	.word	0x40002ae5
 800f478:	1c8a2d4b 	.word	0x1c8a2d4b
 800f47c:	40033a27 	.word	0x40033a27
 800f480:	3fefffff 	.word	0x3fefffff
 800f484:	3fdfffff 	.word	0x3fdfffff
 800f488:	3ff00000 	.word	0x3ff00000
 800f48c:	3fe00000 	.word	0x3fe00000
 800f490:	3fef3332 	.word	0x3fef3332
 800f494:	ee10 2a10 	vmov	r2, s0
 800f498:	ee10 0a10 	vmov	r0, s0
 800f49c:	465b      	mov	r3, fp
 800f49e:	4659      	mov	r1, fp
 800f4a0:	f7f0 fefc 	bl	800029c <__adddf3>
 800f4a4:	4632      	mov	r2, r6
 800f4a6:	463b      	mov	r3, r7
 800f4a8:	ec41 0b19 	vmov	d9, r0, r1
 800f4ac:	ec51 0b18 	vmov	r0, r1, d8
 800f4b0:	f7f1 f9d4 	bl	800085c <__aeabi_ddiv>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	ec51 0b19 	vmov	r0, r1, d9
 800f4bc:	f7f1 f8a4 	bl	8000608 <__aeabi_dmul>
 800f4c0:	f04f 0800 	mov.w	r8, #0
 800f4c4:	4606      	mov	r6, r0
 800f4c6:	460f      	mov	r7, r1
 800f4c8:	4642      	mov	r2, r8
 800f4ca:	465b      	mov	r3, fp
 800f4cc:	4640      	mov	r0, r8
 800f4ce:	4659      	mov	r1, fp
 800f4d0:	f7f1 f89a 	bl	8000608 <__aeabi_dmul>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4620      	mov	r0, r4
 800f4da:	4629      	mov	r1, r5
 800f4dc:	f7f0 fedc 	bl	8000298 <__aeabi_dsub>
 800f4e0:	4642      	mov	r2, r8
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	460d      	mov	r5, r1
 800f4e6:	465b      	mov	r3, fp
 800f4e8:	4650      	mov	r0, sl
 800f4ea:	4659      	mov	r1, fp
 800f4ec:	f7f0 fed6 	bl	800029c <__adddf3>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	f7f1 f9b0 	bl	800085c <__aeabi_ddiv>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	460b      	mov	r3, r1
 800f500:	f7f0 fecc 	bl	800029c <__adddf3>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	a113      	add	r1, pc, #76	; (adr r1, 800f558 <__ieee754_asin+0x418>)
 800f50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50e:	f7f0 fec3 	bl	8000298 <__aeabi_dsub>
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	4630      	mov	r0, r6
 800f518:	4639      	mov	r1, r7
 800f51a:	f7f0 febd 	bl	8000298 <__aeabi_dsub>
 800f51e:	4642      	mov	r2, r8
 800f520:	4604      	mov	r4, r0
 800f522:	460d      	mov	r5, r1
 800f524:	465b      	mov	r3, fp
 800f526:	4640      	mov	r0, r8
 800f528:	4659      	mov	r1, fp
 800f52a:	f7f0 feb7 	bl	800029c <__adddf3>
 800f52e:	4602      	mov	r2, r0
 800f530:	460b      	mov	r3, r1
 800f532:	a10b      	add	r1, pc, #44	; (adr r1, 800f560 <__ieee754_asin+0x420>)
 800f534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f538:	f7f0 feae 	bl	8000298 <__aeabi_dsub>
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	4620      	mov	r0, r4
 800f542:	4629      	mov	r1, r5
 800f544:	f7f0 fea8 	bl	8000298 <__aeabi_dsub>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	a104      	add	r1, pc, #16	; (adr r1, 800f560 <__ieee754_asin+0x420>)
 800f54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f552:	e6df      	b.n	800f314 <__ieee754_asin+0x1d4>
 800f554:	f3af 8000 	nop.w
 800f558:	33145c07 	.word	0x33145c07
 800f55c:	3c91a626 	.word	0x3c91a626
 800f560:	54442d18 	.word	0x54442d18
 800f564:	3fe921fb 	.word	0x3fe921fb

0800f568 <__ieee754_pow>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	ed2d 8b06 	vpush	{d8-d10}
 800f570:	b089      	sub	sp, #36	; 0x24
 800f572:	ed8d 1b00 	vstr	d1, [sp]
 800f576:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f57a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f57e:	ea58 0102 	orrs.w	r1, r8, r2
 800f582:	ec57 6b10 	vmov	r6, r7, d0
 800f586:	d115      	bne.n	800f5b4 <__ieee754_pow+0x4c>
 800f588:	19b3      	adds	r3, r6, r6
 800f58a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f58e:	4152      	adcs	r2, r2
 800f590:	4299      	cmp	r1, r3
 800f592:	4b89      	ldr	r3, [pc, #548]	; (800f7b8 <__ieee754_pow+0x250>)
 800f594:	4193      	sbcs	r3, r2
 800f596:	f080 84d2 	bcs.w	800ff3e <__ieee754_pow+0x9d6>
 800f59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f59e:	4630      	mov	r0, r6
 800f5a0:	4639      	mov	r1, r7
 800f5a2:	f7f0 fe7b 	bl	800029c <__adddf3>
 800f5a6:	ec41 0b10 	vmov	d0, r0, r1
 800f5aa:	b009      	add	sp, #36	; 0x24
 800f5ac:	ecbd 8b06 	vpop	{d8-d10}
 800f5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b4:	4b81      	ldr	r3, [pc, #516]	; (800f7bc <__ieee754_pow+0x254>)
 800f5b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	ee10 aa10 	vmov	sl, s0
 800f5c0:	463d      	mov	r5, r7
 800f5c2:	dc06      	bgt.n	800f5d2 <__ieee754_pow+0x6a>
 800f5c4:	d101      	bne.n	800f5ca <__ieee754_pow+0x62>
 800f5c6:	2e00      	cmp	r6, #0
 800f5c8:	d1e7      	bne.n	800f59a <__ieee754_pow+0x32>
 800f5ca:	4598      	cmp	r8, r3
 800f5cc:	dc01      	bgt.n	800f5d2 <__ieee754_pow+0x6a>
 800f5ce:	d10f      	bne.n	800f5f0 <__ieee754_pow+0x88>
 800f5d0:	b172      	cbz	r2, 800f5f0 <__ieee754_pow+0x88>
 800f5d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f5d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f5da:	ea55 050a 	orrs.w	r5, r5, sl
 800f5de:	d1dc      	bne.n	800f59a <__ieee754_pow+0x32>
 800f5e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f5e4:	18db      	adds	r3, r3, r3
 800f5e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f5ea:	4152      	adcs	r2, r2
 800f5ec:	429d      	cmp	r5, r3
 800f5ee:	e7d0      	b.n	800f592 <__ieee754_pow+0x2a>
 800f5f0:	2d00      	cmp	r5, #0
 800f5f2:	da3b      	bge.n	800f66c <__ieee754_pow+0x104>
 800f5f4:	4b72      	ldr	r3, [pc, #456]	; (800f7c0 <__ieee754_pow+0x258>)
 800f5f6:	4598      	cmp	r8, r3
 800f5f8:	dc51      	bgt.n	800f69e <__ieee754_pow+0x136>
 800f5fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f5fe:	4598      	cmp	r8, r3
 800f600:	f340 84ac 	ble.w	800ff5c <__ieee754_pow+0x9f4>
 800f604:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f60c:	2b14      	cmp	r3, #20
 800f60e:	dd0f      	ble.n	800f630 <__ieee754_pow+0xc8>
 800f610:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f614:	fa22 f103 	lsr.w	r1, r2, r3
 800f618:	fa01 f303 	lsl.w	r3, r1, r3
 800f61c:	4293      	cmp	r3, r2
 800f61e:	f040 849d 	bne.w	800ff5c <__ieee754_pow+0x9f4>
 800f622:	f001 0101 	and.w	r1, r1, #1
 800f626:	f1c1 0302 	rsb	r3, r1, #2
 800f62a:	9304      	str	r3, [sp, #16]
 800f62c:	b182      	cbz	r2, 800f650 <__ieee754_pow+0xe8>
 800f62e:	e05f      	b.n	800f6f0 <__ieee754_pow+0x188>
 800f630:	2a00      	cmp	r2, #0
 800f632:	d15b      	bne.n	800f6ec <__ieee754_pow+0x184>
 800f634:	f1c3 0314 	rsb	r3, r3, #20
 800f638:	fa48 f103 	asr.w	r1, r8, r3
 800f63c:	fa01 f303 	lsl.w	r3, r1, r3
 800f640:	4543      	cmp	r3, r8
 800f642:	f040 8488 	bne.w	800ff56 <__ieee754_pow+0x9ee>
 800f646:	f001 0101 	and.w	r1, r1, #1
 800f64a:	f1c1 0302 	rsb	r3, r1, #2
 800f64e:	9304      	str	r3, [sp, #16]
 800f650:	4b5c      	ldr	r3, [pc, #368]	; (800f7c4 <__ieee754_pow+0x25c>)
 800f652:	4598      	cmp	r8, r3
 800f654:	d132      	bne.n	800f6bc <__ieee754_pow+0x154>
 800f656:	f1b9 0f00 	cmp.w	r9, #0
 800f65a:	f280 8478 	bge.w	800ff4e <__ieee754_pow+0x9e6>
 800f65e:	4959      	ldr	r1, [pc, #356]	; (800f7c4 <__ieee754_pow+0x25c>)
 800f660:	4632      	mov	r2, r6
 800f662:	463b      	mov	r3, r7
 800f664:	2000      	movs	r0, #0
 800f666:	f7f1 f8f9 	bl	800085c <__aeabi_ddiv>
 800f66a:	e79c      	b.n	800f5a6 <__ieee754_pow+0x3e>
 800f66c:	2300      	movs	r3, #0
 800f66e:	9304      	str	r3, [sp, #16]
 800f670:	2a00      	cmp	r2, #0
 800f672:	d13d      	bne.n	800f6f0 <__ieee754_pow+0x188>
 800f674:	4b51      	ldr	r3, [pc, #324]	; (800f7bc <__ieee754_pow+0x254>)
 800f676:	4598      	cmp	r8, r3
 800f678:	d1ea      	bne.n	800f650 <__ieee754_pow+0xe8>
 800f67a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f67e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f682:	ea53 030a 	orrs.w	r3, r3, sl
 800f686:	f000 845a 	beq.w	800ff3e <__ieee754_pow+0x9d6>
 800f68a:	4b4f      	ldr	r3, [pc, #316]	; (800f7c8 <__ieee754_pow+0x260>)
 800f68c:	429c      	cmp	r4, r3
 800f68e:	dd08      	ble.n	800f6a2 <__ieee754_pow+0x13a>
 800f690:	f1b9 0f00 	cmp.w	r9, #0
 800f694:	f2c0 8457 	blt.w	800ff46 <__ieee754_pow+0x9de>
 800f698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f69c:	e783      	b.n	800f5a6 <__ieee754_pow+0x3e>
 800f69e:	2302      	movs	r3, #2
 800f6a0:	e7e5      	b.n	800f66e <__ieee754_pow+0x106>
 800f6a2:	f1b9 0f00 	cmp.w	r9, #0
 800f6a6:	f04f 0000 	mov.w	r0, #0
 800f6aa:	f04f 0100 	mov.w	r1, #0
 800f6ae:	f6bf af7a 	bge.w	800f5a6 <__ieee754_pow+0x3e>
 800f6b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f6b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6ba:	e774      	b.n	800f5a6 <__ieee754_pow+0x3e>
 800f6bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f6c0:	d106      	bne.n	800f6d0 <__ieee754_pow+0x168>
 800f6c2:	4632      	mov	r2, r6
 800f6c4:	463b      	mov	r3, r7
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	f7f0 ff9d 	bl	8000608 <__aeabi_dmul>
 800f6ce:	e76a      	b.n	800f5a6 <__ieee754_pow+0x3e>
 800f6d0:	4b3e      	ldr	r3, [pc, #248]	; (800f7cc <__ieee754_pow+0x264>)
 800f6d2:	4599      	cmp	r9, r3
 800f6d4:	d10c      	bne.n	800f6f0 <__ieee754_pow+0x188>
 800f6d6:	2d00      	cmp	r5, #0
 800f6d8:	db0a      	blt.n	800f6f0 <__ieee754_pow+0x188>
 800f6da:	ec47 6b10 	vmov	d0, r6, r7
 800f6de:	b009      	add	sp, #36	; 0x24
 800f6e0:	ecbd 8b06 	vpop	{d8-d10}
 800f6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	f000 bc6c 	b.w	800ffc4 <__ieee754_sqrt>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	9304      	str	r3, [sp, #16]
 800f6f0:	ec47 6b10 	vmov	d0, r6, r7
 800f6f4:	f000 fd48 	bl	8010188 <fabs>
 800f6f8:	ec51 0b10 	vmov	r0, r1, d0
 800f6fc:	f1ba 0f00 	cmp.w	sl, #0
 800f700:	d129      	bne.n	800f756 <__ieee754_pow+0x1ee>
 800f702:	b124      	cbz	r4, 800f70e <__ieee754_pow+0x1a6>
 800f704:	4b2f      	ldr	r3, [pc, #188]	; (800f7c4 <__ieee754_pow+0x25c>)
 800f706:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d123      	bne.n	800f756 <__ieee754_pow+0x1ee>
 800f70e:	f1b9 0f00 	cmp.w	r9, #0
 800f712:	da05      	bge.n	800f720 <__ieee754_pow+0x1b8>
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
 800f718:	2000      	movs	r0, #0
 800f71a:	492a      	ldr	r1, [pc, #168]	; (800f7c4 <__ieee754_pow+0x25c>)
 800f71c:	f7f1 f89e 	bl	800085c <__aeabi_ddiv>
 800f720:	2d00      	cmp	r5, #0
 800f722:	f6bf af40 	bge.w	800f5a6 <__ieee754_pow+0x3e>
 800f726:	9b04      	ldr	r3, [sp, #16]
 800f728:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f72c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f730:	4323      	orrs	r3, r4
 800f732:	d108      	bne.n	800f746 <__ieee754_pow+0x1de>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4610      	mov	r0, r2
 800f73a:	4619      	mov	r1, r3
 800f73c:	f7f0 fdac 	bl	8000298 <__aeabi_dsub>
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	e78f      	b.n	800f666 <__ieee754_pow+0xfe>
 800f746:	9b04      	ldr	r3, [sp, #16]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	f47f af2c 	bne.w	800f5a6 <__ieee754_pow+0x3e>
 800f74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f752:	4619      	mov	r1, r3
 800f754:	e727      	b.n	800f5a6 <__ieee754_pow+0x3e>
 800f756:	0feb      	lsrs	r3, r5, #31
 800f758:	3b01      	subs	r3, #1
 800f75a:	9306      	str	r3, [sp, #24]
 800f75c:	9a06      	ldr	r2, [sp, #24]
 800f75e:	9b04      	ldr	r3, [sp, #16]
 800f760:	4313      	orrs	r3, r2
 800f762:	d102      	bne.n	800f76a <__ieee754_pow+0x202>
 800f764:	4632      	mov	r2, r6
 800f766:	463b      	mov	r3, r7
 800f768:	e7e6      	b.n	800f738 <__ieee754_pow+0x1d0>
 800f76a:	4b19      	ldr	r3, [pc, #100]	; (800f7d0 <__ieee754_pow+0x268>)
 800f76c:	4598      	cmp	r8, r3
 800f76e:	f340 80fb 	ble.w	800f968 <__ieee754_pow+0x400>
 800f772:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f776:	4598      	cmp	r8, r3
 800f778:	4b13      	ldr	r3, [pc, #76]	; (800f7c8 <__ieee754_pow+0x260>)
 800f77a:	dd0c      	ble.n	800f796 <__ieee754_pow+0x22e>
 800f77c:	429c      	cmp	r4, r3
 800f77e:	dc0f      	bgt.n	800f7a0 <__ieee754_pow+0x238>
 800f780:	f1b9 0f00 	cmp.w	r9, #0
 800f784:	da0f      	bge.n	800f7a6 <__ieee754_pow+0x23e>
 800f786:	2000      	movs	r0, #0
 800f788:	b009      	add	sp, #36	; 0x24
 800f78a:	ecbd 8b06 	vpop	{d8-d10}
 800f78e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f792:	f000 bcf0 	b.w	8010176 <__math_oflow>
 800f796:	429c      	cmp	r4, r3
 800f798:	dbf2      	blt.n	800f780 <__ieee754_pow+0x218>
 800f79a:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <__ieee754_pow+0x25c>)
 800f79c:	429c      	cmp	r4, r3
 800f79e:	dd19      	ble.n	800f7d4 <__ieee754_pow+0x26c>
 800f7a0:	f1b9 0f00 	cmp.w	r9, #0
 800f7a4:	dcef      	bgt.n	800f786 <__ieee754_pow+0x21e>
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	b009      	add	sp, #36	; 0x24
 800f7aa:	ecbd 8b06 	vpop	{d8-d10}
 800f7ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b2:	f000 bcd7 	b.w	8010164 <__math_uflow>
 800f7b6:	bf00      	nop
 800f7b8:	fff00000 	.word	0xfff00000
 800f7bc:	7ff00000 	.word	0x7ff00000
 800f7c0:	433fffff 	.word	0x433fffff
 800f7c4:	3ff00000 	.word	0x3ff00000
 800f7c8:	3fefffff 	.word	0x3fefffff
 800f7cc:	3fe00000 	.word	0x3fe00000
 800f7d0:	41e00000 	.word	0x41e00000
 800f7d4:	4b60      	ldr	r3, [pc, #384]	; (800f958 <__ieee754_pow+0x3f0>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f7f0 fd5e 	bl	8000298 <__aeabi_dsub>
 800f7dc:	a354      	add	r3, pc, #336	; (adr r3, 800f930 <__ieee754_pow+0x3c8>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	f7f0 ff0f 	bl	8000608 <__aeabi_dmul>
 800f7ea:	a353      	add	r3, pc, #332	; (adr r3, 800f938 <__ieee754_pow+0x3d0>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	460f      	mov	r7, r1
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	4629      	mov	r1, r5
 800f7f8:	f7f0 ff06 	bl	8000608 <__aeabi_dmul>
 800f7fc:	4b57      	ldr	r3, [pc, #348]	; (800f95c <__ieee754_pow+0x3f4>)
 800f7fe:	4682      	mov	sl, r0
 800f800:	468b      	mov	fp, r1
 800f802:	2200      	movs	r2, #0
 800f804:	4620      	mov	r0, r4
 800f806:	4629      	mov	r1, r5
 800f808:	f7f0 fefe 	bl	8000608 <__aeabi_dmul>
 800f80c:	4602      	mov	r2, r0
 800f80e:	460b      	mov	r3, r1
 800f810:	a14b      	add	r1, pc, #300	; (adr r1, 800f940 <__ieee754_pow+0x3d8>)
 800f812:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f816:	f7f0 fd3f 	bl	8000298 <__aeabi_dsub>
 800f81a:	4622      	mov	r2, r4
 800f81c:	462b      	mov	r3, r5
 800f81e:	f7f0 fef3 	bl	8000608 <__aeabi_dmul>
 800f822:	4602      	mov	r2, r0
 800f824:	460b      	mov	r3, r1
 800f826:	2000      	movs	r0, #0
 800f828:	494d      	ldr	r1, [pc, #308]	; (800f960 <__ieee754_pow+0x3f8>)
 800f82a:	f7f0 fd35 	bl	8000298 <__aeabi_dsub>
 800f82e:	4622      	mov	r2, r4
 800f830:	4680      	mov	r8, r0
 800f832:	4689      	mov	r9, r1
 800f834:	462b      	mov	r3, r5
 800f836:	4620      	mov	r0, r4
 800f838:	4629      	mov	r1, r5
 800f83a:	f7f0 fee5 	bl	8000608 <__aeabi_dmul>
 800f83e:	4602      	mov	r2, r0
 800f840:	460b      	mov	r3, r1
 800f842:	4640      	mov	r0, r8
 800f844:	4649      	mov	r1, r9
 800f846:	f7f0 fedf 	bl	8000608 <__aeabi_dmul>
 800f84a:	a33f      	add	r3, pc, #252	; (adr r3, 800f948 <__ieee754_pow+0x3e0>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 feda 	bl	8000608 <__aeabi_dmul>
 800f854:	4602      	mov	r2, r0
 800f856:	460b      	mov	r3, r1
 800f858:	4650      	mov	r0, sl
 800f85a:	4659      	mov	r1, fp
 800f85c:	f7f0 fd1c 	bl	8000298 <__aeabi_dsub>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4680      	mov	r8, r0
 800f866:	4689      	mov	r9, r1
 800f868:	4630      	mov	r0, r6
 800f86a:	4639      	mov	r1, r7
 800f86c:	f7f0 fd16 	bl	800029c <__adddf3>
 800f870:	2000      	movs	r0, #0
 800f872:	4632      	mov	r2, r6
 800f874:	463b      	mov	r3, r7
 800f876:	4604      	mov	r4, r0
 800f878:	460d      	mov	r5, r1
 800f87a:	f7f0 fd0d 	bl	8000298 <__aeabi_dsub>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	4640      	mov	r0, r8
 800f884:	4649      	mov	r1, r9
 800f886:	f7f0 fd07 	bl	8000298 <__aeabi_dsub>
 800f88a:	9b04      	ldr	r3, [sp, #16]
 800f88c:	9a06      	ldr	r2, [sp, #24]
 800f88e:	3b01      	subs	r3, #1
 800f890:	4313      	orrs	r3, r2
 800f892:	4682      	mov	sl, r0
 800f894:	468b      	mov	fp, r1
 800f896:	f040 81e7 	bne.w	800fc68 <__ieee754_pow+0x700>
 800f89a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f950 <__ieee754_pow+0x3e8>
 800f89e:	eeb0 8a47 	vmov.f32	s16, s14
 800f8a2:	eef0 8a67 	vmov.f32	s17, s15
 800f8a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	4632      	mov	r2, r6
 800f8ae:	463b      	mov	r3, r7
 800f8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8b4:	f7f0 fcf0 	bl	8000298 <__aeabi_dsub>
 800f8b8:	4622      	mov	r2, r4
 800f8ba:	462b      	mov	r3, r5
 800f8bc:	f7f0 fea4 	bl	8000608 <__aeabi_dmul>
 800f8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8c4:	4680      	mov	r8, r0
 800f8c6:	4689      	mov	r9, r1
 800f8c8:	4650      	mov	r0, sl
 800f8ca:	4659      	mov	r1, fp
 800f8cc:	f7f0 fe9c 	bl	8000608 <__aeabi_dmul>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	4640      	mov	r0, r8
 800f8d6:	4649      	mov	r1, r9
 800f8d8:	f7f0 fce0 	bl	800029c <__adddf3>
 800f8dc:	4632      	mov	r2, r6
 800f8de:	463b      	mov	r3, r7
 800f8e0:	4680      	mov	r8, r0
 800f8e2:	4689      	mov	r9, r1
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	f7f0 fe8e 	bl	8000608 <__aeabi_dmul>
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	4649      	mov	r1, r9
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	f7f0 fcd0 	bl	800029c <__adddf3>
 800f8fc:	4b19      	ldr	r3, [pc, #100]	; (800f964 <__ieee754_pow+0x3fc>)
 800f8fe:	4299      	cmp	r1, r3
 800f900:	ec45 4b19 	vmov	d9, r4, r5
 800f904:	4606      	mov	r6, r0
 800f906:	460f      	mov	r7, r1
 800f908:	468b      	mov	fp, r1
 800f90a:	f340 82f1 	ble.w	800fef0 <__ieee754_pow+0x988>
 800f90e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f916:	4303      	orrs	r3, r0
 800f918:	f000 81e4 	beq.w	800fce4 <__ieee754_pow+0x77c>
 800f91c:	ec51 0b18 	vmov	r0, r1, d8
 800f920:	2200      	movs	r2, #0
 800f922:	2300      	movs	r3, #0
 800f924:	f7f1 f8e2 	bl	8000aec <__aeabi_dcmplt>
 800f928:	3800      	subs	r0, #0
 800f92a:	bf18      	it	ne
 800f92c:	2001      	movne	r0, #1
 800f92e:	e72b      	b.n	800f788 <__ieee754_pow+0x220>
 800f930:	60000000 	.word	0x60000000
 800f934:	3ff71547 	.word	0x3ff71547
 800f938:	f85ddf44 	.word	0xf85ddf44
 800f93c:	3e54ae0b 	.word	0x3e54ae0b
 800f940:	55555555 	.word	0x55555555
 800f944:	3fd55555 	.word	0x3fd55555
 800f948:	652b82fe 	.word	0x652b82fe
 800f94c:	3ff71547 	.word	0x3ff71547
 800f950:	00000000 	.word	0x00000000
 800f954:	bff00000 	.word	0xbff00000
 800f958:	3ff00000 	.word	0x3ff00000
 800f95c:	3fd00000 	.word	0x3fd00000
 800f960:	3fe00000 	.word	0x3fe00000
 800f964:	408fffff 	.word	0x408fffff
 800f968:	4bd5      	ldr	r3, [pc, #852]	; (800fcc0 <__ieee754_pow+0x758>)
 800f96a:	402b      	ands	r3, r5
 800f96c:	2200      	movs	r2, #0
 800f96e:	b92b      	cbnz	r3, 800f97c <__ieee754_pow+0x414>
 800f970:	4bd4      	ldr	r3, [pc, #848]	; (800fcc4 <__ieee754_pow+0x75c>)
 800f972:	f7f0 fe49 	bl	8000608 <__aeabi_dmul>
 800f976:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f97a:	460c      	mov	r4, r1
 800f97c:	1523      	asrs	r3, r4, #20
 800f97e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f982:	4413      	add	r3, r2
 800f984:	9305      	str	r3, [sp, #20]
 800f986:	4bd0      	ldr	r3, [pc, #832]	; (800fcc8 <__ieee754_pow+0x760>)
 800f988:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f98c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f990:	429c      	cmp	r4, r3
 800f992:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f996:	dd08      	ble.n	800f9aa <__ieee754_pow+0x442>
 800f998:	4bcc      	ldr	r3, [pc, #816]	; (800fccc <__ieee754_pow+0x764>)
 800f99a:	429c      	cmp	r4, r3
 800f99c:	f340 8162 	ble.w	800fc64 <__ieee754_pow+0x6fc>
 800f9a0:	9b05      	ldr	r3, [sp, #20]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	9305      	str	r3, [sp, #20]
 800f9a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f9aa:	2400      	movs	r4, #0
 800f9ac:	00e3      	lsls	r3, r4, #3
 800f9ae:	9307      	str	r3, [sp, #28]
 800f9b0:	4bc7      	ldr	r3, [pc, #796]	; (800fcd0 <__ieee754_pow+0x768>)
 800f9b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9b6:	ed93 7b00 	vldr	d7, [r3]
 800f9ba:	4629      	mov	r1, r5
 800f9bc:	ec53 2b17 	vmov	r2, r3, d7
 800f9c0:	eeb0 9a47 	vmov.f32	s18, s14
 800f9c4:	eef0 9a67 	vmov.f32	s19, s15
 800f9c8:	4682      	mov	sl, r0
 800f9ca:	f7f0 fc65 	bl	8000298 <__aeabi_dsub>
 800f9ce:	4652      	mov	r2, sl
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460f      	mov	r7, r1
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	ec51 0b19 	vmov	r0, r1, d9
 800f9da:	f7f0 fc5f 	bl	800029c <__adddf3>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	49bb      	ldr	r1, [pc, #748]	; (800fcd4 <__ieee754_pow+0x76c>)
 800f9e6:	f7f0 ff39 	bl	800085c <__aeabi_ddiv>
 800f9ea:	ec41 0b1a 	vmov	d10, r0, r1
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	f7f0 fe07 	bl	8000608 <__aeabi_dmul>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa00:	9302      	str	r3, [sp, #8]
 800fa02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fa06:	46ab      	mov	fp, r5
 800fa08:	106d      	asrs	r5, r5, #1
 800fa0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fa0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fa12:	ec41 0b18 	vmov	d8, r0, r1
 800fa16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4640      	mov	r0, r8
 800fa1e:	4649      	mov	r1, r9
 800fa20:	4614      	mov	r4, r2
 800fa22:	461d      	mov	r5, r3
 800fa24:	f7f0 fdf0 	bl	8000608 <__aeabi_dmul>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	4639      	mov	r1, r7
 800fa30:	f7f0 fc32 	bl	8000298 <__aeabi_dsub>
 800fa34:	ec53 2b19 	vmov	r2, r3, d9
 800fa38:	4606      	mov	r6, r0
 800fa3a:	460f      	mov	r7, r1
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	4629      	mov	r1, r5
 800fa40:	f7f0 fc2a 	bl	8000298 <__aeabi_dsub>
 800fa44:	4602      	mov	r2, r0
 800fa46:	460b      	mov	r3, r1
 800fa48:	4650      	mov	r0, sl
 800fa4a:	4659      	mov	r1, fp
 800fa4c:	f7f0 fc24 	bl	8000298 <__aeabi_dsub>
 800fa50:	4642      	mov	r2, r8
 800fa52:	464b      	mov	r3, r9
 800fa54:	f7f0 fdd8 	bl	8000608 <__aeabi_dmul>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f7f0 fc1a 	bl	8000298 <__aeabi_dsub>
 800fa64:	ec53 2b1a 	vmov	r2, r3, d10
 800fa68:	f7f0 fdce 	bl	8000608 <__aeabi_dmul>
 800fa6c:	ec53 2b18 	vmov	r2, r3, d8
 800fa70:	ec41 0b19 	vmov	d9, r0, r1
 800fa74:	ec51 0b18 	vmov	r0, r1, d8
 800fa78:	f7f0 fdc6 	bl	8000608 <__aeabi_dmul>
 800fa7c:	a37c      	add	r3, pc, #496	; (adr r3, 800fc70 <__ieee754_pow+0x708>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	4604      	mov	r4, r0
 800fa84:	460d      	mov	r5, r1
 800fa86:	f7f0 fdbf 	bl	8000608 <__aeabi_dmul>
 800fa8a:	a37b      	add	r3, pc, #492	; (adr r3, 800fc78 <__ieee754_pow+0x710>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f7f0 fc04 	bl	800029c <__adddf3>
 800fa94:	4622      	mov	r2, r4
 800fa96:	462b      	mov	r3, r5
 800fa98:	f7f0 fdb6 	bl	8000608 <__aeabi_dmul>
 800fa9c:	a378      	add	r3, pc, #480	; (adr r3, 800fc80 <__ieee754_pow+0x718>)
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f7f0 fbfb 	bl	800029c <__adddf3>
 800faa6:	4622      	mov	r2, r4
 800faa8:	462b      	mov	r3, r5
 800faaa:	f7f0 fdad 	bl	8000608 <__aeabi_dmul>
 800faae:	a376      	add	r3, pc, #472	; (adr r3, 800fc88 <__ieee754_pow+0x720>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fbf2 	bl	800029c <__adddf3>
 800fab8:	4622      	mov	r2, r4
 800faba:	462b      	mov	r3, r5
 800fabc:	f7f0 fda4 	bl	8000608 <__aeabi_dmul>
 800fac0:	a373      	add	r3, pc, #460	; (adr r3, 800fc90 <__ieee754_pow+0x728>)
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	f7f0 fbe9 	bl	800029c <__adddf3>
 800faca:	4622      	mov	r2, r4
 800facc:	462b      	mov	r3, r5
 800face:	f7f0 fd9b 	bl	8000608 <__aeabi_dmul>
 800fad2:	a371      	add	r3, pc, #452	; (adr r3, 800fc98 <__ieee754_pow+0x730>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	f7f0 fbe0 	bl	800029c <__adddf3>
 800fadc:	4622      	mov	r2, r4
 800fade:	4606      	mov	r6, r0
 800fae0:	460f      	mov	r7, r1
 800fae2:	462b      	mov	r3, r5
 800fae4:	4620      	mov	r0, r4
 800fae6:	4629      	mov	r1, r5
 800fae8:	f7f0 fd8e 	bl	8000608 <__aeabi_dmul>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	4630      	mov	r0, r6
 800faf2:	4639      	mov	r1, r7
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	4642      	mov	r2, r8
 800fafa:	4604      	mov	r4, r0
 800fafc:	460d      	mov	r5, r1
 800fafe:	464b      	mov	r3, r9
 800fb00:	ec51 0b18 	vmov	r0, r1, d8
 800fb04:	f7f0 fbca 	bl	800029c <__adddf3>
 800fb08:	ec53 2b19 	vmov	r2, r3, d9
 800fb0c:	f7f0 fd7c 	bl	8000608 <__aeabi_dmul>
 800fb10:	4622      	mov	r2, r4
 800fb12:	462b      	mov	r3, r5
 800fb14:	f7f0 fbc2 	bl	800029c <__adddf3>
 800fb18:	4642      	mov	r2, r8
 800fb1a:	4682      	mov	sl, r0
 800fb1c:	468b      	mov	fp, r1
 800fb1e:	464b      	mov	r3, r9
 800fb20:	4640      	mov	r0, r8
 800fb22:	4649      	mov	r1, r9
 800fb24:	f7f0 fd70 	bl	8000608 <__aeabi_dmul>
 800fb28:	4b6b      	ldr	r3, [pc, #428]	; (800fcd8 <__ieee754_pow+0x770>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	460f      	mov	r7, r1
 800fb30:	f7f0 fbb4 	bl	800029c <__adddf3>
 800fb34:	4652      	mov	r2, sl
 800fb36:	465b      	mov	r3, fp
 800fb38:	f7f0 fbb0 	bl	800029c <__adddf3>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	4604      	mov	r4, r0
 800fb40:	460d      	mov	r5, r1
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4640      	mov	r0, r8
 800fb48:	4649      	mov	r1, r9
 800fb4a:	f7f0 fd5d 	bl	8000608 <__aeabi_dmul>
 800fb4e:	4b62      	ldr	r3, [pc, #392]	; (800fcd8 <__ieee754_pow+0x770>)
 800fb50:	4680      	mov	r8, r0
 800fb52:	4689      	mov	r9, r1
 800fb54:	2200      	movs	r2, #0
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 fb9d 	bl	8000298 <__aeabi_dsub>
 800fb5e:	4632      	mov	r2, r6
 800fb60:	463b      	mov	r3, r7
 800fb62:	f7f0 fb99 	bl	8000298 <__aeabi_dsub>
 800fb66:	4602      	mov	r2, r0
 800fb68:	460b      	mov	r3, r1
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	4659      	mov	r1, fp
 800fb6e:	f7f0 fb93 	bl	8000298 <__aeabi_dsub>
 800fb72:	ec53 2b18 	vmov	r2, r3, d8
 800fb76:	f7f0 fd47 	bl	8000608 <__aeabi_dmul>
 800fb7a:	4622      	mov	r2, r4
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	460f      	mov	r7, r1
 800fb80:	462b      	mov	r3, r5
 800fb82:	ec51 0b19 	vmov	r0, r1, d9
 800fb86:	f7f0 fd3f 	bl	8000608 <__aeabi_dmul>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4630      	mov	r0, r6
 800fb90:	4639      	mov	r1, r7
 800fb92:	f7f0 fb83 	bl	800029c <__adddf3>
 800fb96:	4606      	mov	r6, r0
 800fb98:	460f      	mov	r7, r1
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	4640      	mov	r0, r8
 800fba0:	4649      	mov	r1, r9
 800fba2:	f7f0 fb7b 	bl	800029c <__adddf3>
 800fba6:	a33e      	add	r3, pc, #248	; (adr r3, 800fca0 <__ieee754_pow+0x738>)
 800fba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbac:	2000      	movs	r0, #0
 800fbae:	4604      	mov	r4, r0
 800fbb0:	460d      	mov	r5, r1
 800fbb2:	f7f0 fd29 	bl	8000608 <__aeabi_dmul>
 800fbb6:	4642      	mov	r2, r8
 800fbb8:	ec41 0b18 	vmov	d8, r0, r1
 800fbbc:	464b      	mov	r3, r9
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	f7f0 fb69 	bl	8000298 <__aeabi_dsub>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	4630      	mov	r0, r6
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f7f0 fb63 	bl	8000298 <__aeabi_dsub>
 800fbd2:	a335      	add	r3, pc, #212	; (adr r3, 800fca8 <__ieee754_pow+0x740>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	f7f0 fd16 	bl	8000608 <__aeabi_dmul>
 800fbdc:	a334      	add	r3, pc, #208	; (adr r3, 800fcb0 <__ieee754_pow+0x748>)
 800fbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	460f      	mov	r7, r1
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	4629      	mov	r1, r5
 800fbea:	f7f0 fd0d 	bl	8000608 <__aeabi_dmul>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	4639      	mov	r1, r7
 800fbf6:	f7f0 fb51 	bl	800029c <__adddf3>
 800fbfa:	9a07      	ldr	r2, [sp, #28]
 800fbfc:	4b37      	ldr	r3, [pc, #220]	; (800fcdc <__ieee754_pow+0x774>)
 800fbfe:	4413      	add	r3, r2
 800fc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc04:	f7f0 fb4a 	bl	800029c <__adddf3>
 800fc08:	4682      	mov	sl, r0
 800fc0a:	9805      	ldr	r0, [sp, #20]
 800fc0c:	468b      	mov	fp, r1
 800fc0e:	f7f0 fc91 	bl	8000534 <__aeabi_i2d>
 800fc12:	9a07      	ldr	r2, [sp, #28]
 800fc14:	4b32      	ldr	r3, [pc, #200]	; (800fce0 <__ieee754_pow+0x778>)
 800fc16:	4413      	add	r3, r2
 800fc18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	460f      	mov	r7, r1
 800fc20:	4652      	mov	r2, sl
 800fc22:	465b      	mov	r3, fp
 800fc24:	ec51 0b18 	vmov	r0, r1, d8
 800fc28:	f7f0 fb38 	bl	800029c <__adddf3>
 800fc2c:	4642      	mov	r2, r8
 800fc2e:	464b      	mov	r3, r9
 800fc30:	f7f0 fb34 	bl	800029c <__adddf3>
 800fc34:	4632      	mov	r2, r6
 800fc36:	463b      	mov	r3, r7
 800fc38:	f7f0 fb30 	bl	800029c <__adddf3>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	4632      	mov	r2, r6
 800fc40:	463b      	mov	r3, r7
 800fc42:	4604      	mov	r4, r0
 800fc44:	460d      	mov	r5, r1
 800fc46:	f7f0 fb27 	bl	8000298 <__aeabi_dsub>
 800fc4a:	4642      	mov	r2, r8
 800fc4c:	464b      	mov	r3, r9
 800fc4e:	f7f0 fb23 	bl	8000298 <__aeabi_dsub>
 800fc52:	ec53 2b18 	vmov	r2, r3, d8
 800fc56:	f7f0 fb1f 	bl	8000298 <__aeabi_dsub>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	4650      	mov	r0, sl
 800fc60:	4659      	mov	r1, fp
 800fc62:	e610      	b.n	800f886 <__ieee754_pow+0x31e>
 800fc64:	2401      	movs	r4, #1
 800fc66:	e6a1      	b.n	800f9ac <__ieee754_pow+0x444>
 800fc68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fcb8 <__ieee754_pow+0x750>
 800fc6c:	e617      	b.n	800f89e <__ieee754_pow+0x336>
 800fc6e:	bf00      	nop
 800fc70:	4a454eef 	.word	0x4a454eef
 800fc74:	3fca7e28 	.word	0x3fca7e28
 800fc78:	93c9db65 	.word	0x93c9db65
 800fc7c:	3fcd864a 	.word	0x3fcd864a
 800fc80:	a91d4101 	.word	0xa91d4101
 800fc84:	3fd17460 	.word	0x3fd17460
 800fc88:	518f264d 	.word	0x518f264d
 800fc8c:	3fd55555 	.word	0x3fd55555
 800fc90:	db6fabff 	.word	0xdb6fabff
 800fc94:	3fdb6db6 	.word	0x3fdb6db6
 800fc98:	33333303 	.word	0x33333303
 800fc9c:	3fe33333 	.word	0x3fe33333
 800fca0:	e0000000 	.word	0xe0000000
 800fca4:	3feec709 	.word	0x3feec709
 800fca8:	dc3a03fd 	.word	0xdc3a03fd
 800fcac:	3feec709 	.word	0x3feec709
 800fcb0:	145b01f5 	.word	0x145b01f5
 800fcb4:	be3e2fe0 	.word	0xbe3e2fe0
 800fcb8:	00000000 	.word	0x00000000
 800fcbc:	3ff00000 	.word	0x3ff00000
 800fcc0:	7ff00000 	.word	0x7ff00000
 800fcc4:	43400000 	.word	0x43400000
 800fcc8:	0003988e 	.word	0x0003988e
 800fccc:	000bb679 	.word	0x000bb679
 800fcd0:	08010770 	.word	0x08010770
 800fcd4:	3ff00000 	.word	0x3ff00000
 800fcd8:	40080000 	.word	0x40080000
 800fcdc:	08010790 	.word	0x08010790
 800fce0:	08010780 	.word	0x08010780
 800fce4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ffbc <__ieee754_pow+0xa54>)
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	4640      	mov	r0, r8
 800fcec:	4649      	mov	r1, r9
 800fcee:	f7f0 fad5 	bl	800029c <__adddf3>
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	ec41 0b1a 	vmov	d10, r0, r1
 800fcf8:	462b      	mov	r3, r5
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	f7f0 facb 	bl	8000298 <__aeabi_dsub>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	ec51 0b1a 	vmov	r0, r1, d10
 800fd0a:	f7f0 ff0d 	bl	8000b28 <__aeabi_dcmpgt>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f47f ae04 	bne.w	800f91c <__ieee754_pow+0x3b4>
 800fd14:	4aa4      	ldr	r2, [pc, #656]	; (800ffa8 <__ieee754_pow+0xa40>)
 800fd16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	f340 8108 	ble.w	800ff30 <__ieee754_pow+0x9c8>
 800fd20:	151b      	asrs	r3, r3, #20
 800fd22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fd26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fd2a:	fa4a f303 	asr.w	r3, sl, r3
 800fd2e:	445b      	add	r3, fp
 800fd30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fd34:	4e9d      	ldr	r6, [pc, #628]	; (800ffac <__ieee754_pow+0xa44>)
 800fd36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fd3a:	4116      	asrs	r6, r2
 800fd3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fd40:	2000      	movs	r0, #0
 800fd42:	ea23 0106 	bic.w	r1, r3, r6
 800fd46:	f1c2 0214 	rsb	r2, r2, #20
 800fd4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fd4e:	fa4a fa02 	asr.w	sl, sl, r2
 800fd52:	f1bb 0f00 	cmp.w	fp, #0
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	bfb8      	it	lt
 800fd60:	f1ca 0a00 	rsblt	sl, sl, #0
 800fd64:	f7f0 fa98 	bl	8000298 <__aeabi_dsub>
 800fd68:	ec41 0b19 	vmov	d9, r0, r1
 800fd6c:	4642      	mov	r2, r8
 800fd6e:	464b      	mov	r3, r9
 800fd70:	ec51 0b19 	vmov	r0, r1, d9
 800fd74:	f7f0 fa92 	bl	800029c <__adddf3>
 800fd78:	a37b      	add	r3, pc, #492	; (adr r3, 800ff68 <__ieee754_pow+0xa00>)
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	2000      	movs	r0, #0
 800fd80:	4604      	mov	r4, r0
 800fd82:	460d      	mov	r5, r1
 800fd84:	f7f0 fc40 	bl	8000608 <__aeabi_dmul>
 800fd88:	ec53 2b19 	vmov	r2, r3, d9
 800fd8c:	4606      	mov	r6, r0
 800fd8e:	460f      	mov	r7, r1
 800fd90:	4620      	mov	r0, r4
 800fd92:	4629      	mov	r1, r5
 800fd94:	f7f0 fa80 	bl	8000298 <__aeabi_dsub>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	4649      	mov	r1, r9
 800fda0:	f7f0 fa7a 	bl	8000298 <__aeabi_dsub>
 800fda4:	a372      	add	r3, pc, #456	; (adr r3, 800ff70 <__ieee754_pow+0xa08>)
 800fda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdaa:	f7f0 fc2d 	bl	8000608 <__aeabi_dmul>
 800fdae:	a372      	add	r3, pc, #456	; (adr r3, 800ff78 <__ieee754_pow+0xa10>)
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	4680      	mov	r8, r0
 800fdb6:	4689      	mov	r9, r1
 800fdb8:	4620      	mov	r0, r4
 800fdba:	4629      	mov	r1, r5
 800fdbc:	f7f0 fc24 	bl	8000608 <__aeabi_dmul>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	f7f0 fa68 	bl	800029c <__adddf3>
 800fdcc:	4604      	mov	r4, r0
 800fdce:	460d      	mov	r5, r1
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	f7f0 fa60 	bl	800029c <__adddf3>
 800fddc:	4632      	mov	r2, r6
 800fdde:	463b      	mov	r3, r7
 800fde0:	4680      	mov	r8, r0
 800fde2:	4689      	mov	r9, r1
 800fde4:	f7f0 fa58 	bl	8000298 <__aeabi_dsub>
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	4620      	mov	r0, r4
 800fdee:	4629      	mov	r1, r5
 800fdf0:	f7f0 fa52 	bl	8000298 <__aeabi_dsub>
 800fdf4:	4642      	mov	r2, r8
 800fdf6:	4606      	mov	r6, r0
 800fdf8:	460f      	mov	r7, r1
 800fdfa:	464b      	mov	r3, r9
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	f7f0 fc02 	bl	8000608 <__aeabi_dmul>
 800fe04:	a35e      	add	r3, pc, #376	; (adr r3, 800ff80 <__ieee754_pow+0xa18>)
 800fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	460d      	mov	r5, r1
 800fe0e:	f7f0 fbfb 	bl	8000608 <__aeabi_dmul>
 800fe12:	a35d      	add	r3, pc, #372	; (adr r3, 800ff88 <__ieee754_pow+0xa20>)
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fa3e 	bl	8000298 <__aeabi_dsub>
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	462b      	mov	r3, r5
 800fe20:	f7f0 fbf2 	bl	8000608 <__aeabi_dmul>
 800fe24:	a35a      	add	r3, pc, #360	; (adr r3, 800ff90 <__ieee754_pow+0xa28>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fa37 	bl	800029c <__adddf3>
 800fe2e:	4622      	mov	r2, r4
 800fe30:	462b      	mov	r3, r5
 800fe32:	f7f0 fbe9 	bl	8000608 <__aeabi_dmul>
 800fe36:	a358      	add	r3, pc, #352	; (adr r3, 800ff98 <__ieee754_pow+0xa30>)
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	f7f0 fa2c 	bl	8000298 <__aeabi_dsub>
 800fe40:	4622      	mov	r2, r4
 800fe42:	462b      	mov	r3, r5
 800fe44:	f7f0 fbe0 	bl	8000608 <__aeabi_dmul>
 800fe48:	a355      	add	r3, pc, #340	; (adr r3, 800ffa0 <__ieee754_pow+0xa38>)
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	f7f0 fa25 	bl	800029c <__adddf3>
 800fe52:	4622      	mov	r2, r4
 800fe54:	462b      	mov	r3, r5
 800fe56:	f7f0 fbd7 	bl	8000608 <__aeabi_dmul>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	4640      	mov	r0, r8
 800fe60:	4649      	mov	r1, r9
 800fe62:	f7f0 fa19 	bl	8000298 <__aeabi_dsub>
 800fe66:	4604      	mov	r4, r0
 800fe68:	460d      	mov	r5, r1
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	4640      	mov	r0, r8
 800fe70:	4649      	mov	r1, r9
 800fe72:	f7f0 fbc9 	bl	8000608 <__aeabi_dmul>
 800fe76:	2200      	movs	r2, #0
 800fe78:	ec41 0b19 	vmov	d9, r0, r1
 800fe7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe80:	4620      	mov	r0, r4
 800fe82:	4629      	mov	r1, r5
 800fe84:	f7f0 fa08 	bl	8000298 <__aeabi_dsub>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	ec51 0b19 	vmov	r0, r1, d9
 800fe90:	f7f0 fce4 	bl	800085c <__aeabi_ddiv>
 800fe94:	4632      	mov	r2, r6
 800fe96:	4604      	mov	r4, r0
 800fe98:	460d      	mov	r5, r1
 800fe9a:	463b      	mov	r3, r7
 800fe9c:	4640      	mov	r0, r8
 800fe9e:	4649      	mov	r1, r9
 800fea0:	f7f0 fbb2 	bl	8000608 <__aeabi_dmul>
 800fea4:	4632      	mov	r2, r6
 800fea6:	463b      	mov	r3, r7
 800fea8:	f7f0 f9f8 	bl	800029c <__adddf3>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	f7f0 f9f0 	bl	8000298 <__aeabi_dsub>
 800feb8:	4642      	mov	r2, r8
 800feba:	464b      	mov	r3, r9
 800febc:	f7f0 f9ec 	bl	8000298 <__aeabi_dsub>
 800fec0:	460b      	mov	r3, r1
 800fec2:	4602      	mov	r2, r0
 800fec4:	493a      	ldr	r1, [pc, #232]	; (800ffb0 <__ieee754_pow+0xa48>)
 800fec6:	2000      	movs	r0, #0
 800fec8:	f7f0 f9e6 	bl	8000298 <__aeabi_dsub>
 800fecc:	ec41 0b10 	vmov	d0, r0, r1
 800fed0:	ee10 3a90 	vmov	r3, s1
 800fed4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fedc:	da2b      	bge.n	800ff36 <__ieee754_pow+0x9ce>
 800fede:	4650      	mov	r0, sl
 800fee0:	f000 f966 	bl	80101b0 <scalbn>
 800fee4:	ec51 0b10 	vmov	r0, r1, d0
 800fee8:	ec53 2b18 	vmov	r2, r3, d8
 800feec:	f7ff bbed 	b.w	800f6ca <__ieee754_pow+0x162>
 800fef0:	4b30      	ldr	r3, [pc, #192]	; (800ffb4 <__ieee754_pow+0xa4c>)
 800fef2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fef6:	429e      	cmp	r6, r3
 800fef8:	f77f af0c 	ble.w	800fd14 <__ieee754_pow+0x7ac>
 800fefc:	4b2e      	ldr	r3, [pc, #184]	; (800ffb8 <__ieee754_pow+0xa50>)
 800fefe:	440b      	add	r3, r1
 800ff00:	4303      	orrs	r3, r0
 800ff02:	d009      	beq.n	800ff18 <__ieee754_pow+0x9b0>
 800ff04:	ec51 0b18 	vmov	r0, r1, d8
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f7f0 fdee 	bl	8000aec <__aeabi_dcmplt>
 800ff10:	3800      	subs	r0, #0
 800ff12:	bf18      	it	ne
 800ff14:	2001      	movne	r0, #1
 800ff16:	e447      	b.n	800f7a8 <__ieee754_pow+0x240>
 800ff18:	4622      	mov	r2, r4
 800ff1a:	462b      	mov	r3, r5
 800ff1c:	f7f0 f9bc 	bl	8000298 <__aeabi_dsub>
 800ff20:	4642      	mov	r2, r8
 800ff22:	464b      	mov	r3, r9
 800ff24:	f7f0 fdf6 	bl	8000b14 <__aeabi_dcmpge>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	f43f aef3 	beq.w	800fd14 <__ieee754_pow+0x7ac>
 800ff2e:	e7e9      	b.n	800ff04 <__ieee754_pow+0x99c>
 800ff30:	f04f 0a00 	mov.w	sl, #0
 800ff34:	e71a      	b.n	800fd6c <__ieee754_pow+0x804>
 800ff36:	ec51 0b10 	vmov	r0, r1, d0
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	e7d4      	b.n	800fee8 <__ieee754_pow+0x980>
 800ff3e:	491c      	ldr	r1, [pc, #112]	; (800ffb0 <__ieee754_pow+0xa48>)
 800ff40:	2000      	movs	r0, #0
 800ff42:	f7ff bb30 	b.w	800f5a6 <__ieee754_pow+0x3e>
 800ff46:	2000      	movs	r0, #0
 800ff48:	2100      	movs	r1, #0
 800ff4a:	f7ff bb2c 	b.w	800f5a6 <__ieee754_pow+0x3e>
 800ff4e:	4630      	mov	r0, r6
 800ff50:	4639      	mov	r1, r7
 800ff52:	f7ff bb28 	b.w	800f5a6 <__ieee754_pow+0x3e>
 800ff56:	9204      	str	r2, [sp, #16]
 800ff58:	f7ff bb7a 	b.w	800f650 <__ieee754_pow+0xe8>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f7ff bb64 	b.w	800f62a <__ieee754_pow+0xc2>
 800ff62:	bf00      	nop
 800ff64:	f3af 8000 	nop.w
 800ff68:	00000000 	.word	0x00000000
 800ff6c:	3fe62e43 	.word	0x3fe62e43
 800ff70:	fefa39ef 	.word	0xfefa39ef
 800ff74:	3fe62e42 	.word	0x3fe62e42
 800ff78:	0ca86c39 	.word	0x0ca86c39
 800ff7c:	be205c61 	.word	0xbe205c61
 800ff80:	72bea4d0 	.word	0x72bea4d0
 800ff84:	3e663769 	.word	0x3e663769
 800ff88:	c5d26bf1 	.word	0xc5d26bf1
 800ff8c:	3ebbbd41 	.word	0x3ebbbd41
 800ff90:	af25de2c 	.word	0xaf25de2c
 800ff94:	3f11566a 	.word	0x3f11566a
 800ff98:	16bebd93 	.word	0x16bebd93
 800ff9c:	3f66c16c 	.word	0x3f66c16c
 800ffa0:	5555553e 	.word	0x5555553e
 800ffa4:	3fc55555 	.word	0x3fc55555
 800ffa8:	3fe00000 	.word	0x3fe00000
 800ffac:	000fffff 	.word	0x000fffff
 800ffb0:	3ff00000 	.word	0x3ff00000
 800ffb4:	4090cbff 	.word	0x4090cbff
 800ffb8:	3f6f3400 	.word	0x3f6f3400
 800ffbc:	652b82fe 	.word	0x652b82fe
 800ffc0:	3c971547 	.word	0x3c971547

0800ffc4 <__ieee754_sqrt>:
 800ffc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc8:	ec55 4b10 	vmov	r4, r5, d0
 800ffcc:	4e55      	ldr	r6, [pc, #340]	; (8010124 <__ieee754_sqrt+0x160>)
 800ffce:	43ae      	bics	r6, r5
 800ffd0:	ee10 0a10 	vmov	r0, s0
 800ffd4:	ee10 3a10 	vmov	r3, s0
 800ffd8:	462a      	mov	r2, r5
 800ffda:	4629      	mov	r1, r5
 800ffdc:	d110      	bne.n	8010000 <__ieee754_sqrt+0x3c>
 800ffde:	ee10 2a10 	vmov	r2, s0
 800ffe2:	462b      	mov	r3, r5
 800ffe4:	f7f0 fb10 	bl	8000608 <__aeabi_dmul>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	4620      	mov	r0, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	f7f0 f954 	bl	800029c <__adddf3>
 800fff4:	4604      	mov	r4, r0
 800fff6:	460d      	mov	r5, r1
 800fff8:	ec45 4b10 	vmov	d0, r4, r5
 800fffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010000:	2d00      	cmp	r5, #0
 8010002:	dc10      	bgt.n	8010026 <__ieee754_sqrt+0x62>
 8010004:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010008:	4330      	orrs	r0, r6
 801000a:	d0f5      	beq.n	800fff8 <__ieee754_sqrt+0x34>
 801000c:	b15d      	cbz	r5, 8010026 <__ieee754_sqrt+0x62>
 801000e:	ee10 2a10 	vmov	r2, s0
 8010012:	462b      	mov	r3, r5
 8010014:	ee10 0a10 	vmov	r0, s0
 8010018:	f7f0 f93e 	bl	8000298 <__aeabi_dsub>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	f7f0 fc1c 	bl	800085c <__aeabi_ddiv>
 8010024:	e7e6      	b.n	800fff4 <__ieee754_sqrt+0x30>
 8010026:	1512      	asrs	r2, r2, #20
 8010028:	d074      	beq.n	8010114 <__ieee754_sqrt+0x150>
 801002a:	07d4      	lsls	r4, r2, #31
 801002c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010030:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010038:	bf5e      	ittt	pl
 801003a:	0fda      	lsrpl	r2, r3, #31
 801003c:	005b      	lslpl	r3, r3, #1
 801003e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010042:	2400      	movs	r4, #0
 8010044:	0fda      	lsrs	r2, r3, #31
 8010046:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801004a:	107f      	asrs	r7, r7, #1
 801004c:	005b      	lsls	r3, r3, #1
 801004e:	2516      	movs	r5, #22
 8010050:	4620      	mov	r0, r4
 8010052:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010056:	1886      	adds	r6, r0, r2
 8010058:	428e      	cmp	r6, r1
 801005a:	bfde      	ittt	le
 801005c:	1b89      	suble	r1, r1, r6
 801005e:	18b0      	addle	r0, r6, r2
 8010060:	18a4      	addle	r4, r4, r2
 8010062:	0049      	lsls	r1, r1, #1
 8010064:	3d01      	subs	r5, #1
 8010066:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801006a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801006e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010072:	d1f0      	bne.n	8010056 <__ieee754_sqrt+0x92>
 8010074:	462a      	mov	r2, r5
 8010076:	f04f 0e20 	mov.w	lr, #32
 801007a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801007e:	4281      	cmp	r1, r0
 8010080:	eb06 0c05 	add.w	ip, r6, r5
 8010084:	dc02      	bgt.n	801008c <__ieee754_sqrt+0xc8>
 8010086:	d113      	bne.n	80100b0 <__ieee754_sqrt+0xec>
 8010088:	459c      	cmp	ip, r3
 801008a:	d811      	bhi.n	80100b0 <__ieee754_sqrt+0xec>
 801008c:	f1bc 0f00 	cmp.w	ip, #0
 8010090:	eb0c 0506 	add.w	r5, ip, r6
 8010094:	da43      	bge.n	801011e <__ieee754_sqrt+0x15a>
 8010096:	2d00      	cmp	r5, #0
 8010098:	db41      	blt.n	801011e <__ieee754_sqrt+0x15a>
 801009a:	f100 0801 	add.w	r8, r0, #1
 801009e:	1a09      	subs	r1, r1, r0
 80100a0:	459c      	cmp	ip, r3
 80100a2:	bf88      	it	hi
 80100a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80100a8:	eba3 030c 	sub.w	r3, r3, ip
 80100ac:	4432      	add	r2, r6
 80100ae:	4640      	mov	r0, r8
 80100b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80100b4:	f1be 0e01 	subs.w	lr, lr, #1
 80100b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80100bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80100c4:	d1db      	bne.n	801007e <__ieee754_sqrt+0xba>
 80100c6:	430b      	orrs	r3, r1
 80100c8:	d006      	beq.n	80100d8 <__ieee754_sqrt+0x114>
 80100ca:	1c50      	adds	r0, r2, #1
 80100cc:	bf13      	iteet	ne
 80100ce:	3201      	addne	r2, #1
 80100d0:	3401      	addeq	r4, #1
 80100d2:	4672      	moveq	r2, lr
 80100d4:	f022 0201 	bicne.w	r2, r2, #1
 80100d8:	1063      	asrs	r3, r4, #1
 80100da:	0852      	lsrs	r2, r2, #1
 80100dc:	07e1      	lsls	r1, r4, #31
 80100de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80100e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80100e6:	bf48      	it	mi
 80100e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80100ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80100f0:	4614      	mov	r4, r2
 80100f2:	e781      	b.n	800fff8 <__ieee754_sqrt+0x34>
 80100f4:	0ad9      	lsrs	r1, r3, #11
 80100f6:	3815      	subs	r0, #21
 80100f8:	055b      	lsls	r3, r3, #21
 80100fa:	2900      	cmp	r1, #0
 80100fc:	d0fa      	beq.n	80100f4 <__ieee754_sqrt+0x130>
 80100fe:	02cd      	lsls	r5, r1, #11
 8010100:	d50a      	bpl.n	8010118 <__ieee754_sqrt+0x154>
 8010102:	f1c2 0420 	rsb	r4, r2, #32
 8010106:	fa23 f404 	lsr.w	r4, r3, r4
 801010a:	1e55      	subs	r5, r2, #1
 801010c:	4093      	lsls	r3, r2
 801010e:	4321      	orrs	r1, r4
 8010110:	1b42      	subs	r2, r0, r5
 8010112:	e78a      	b.n	801002a <__ieee754_sqrt+0x66>
 8010114:	4610      	mov	r0, r2
 8010116:	e7f0      	b.n	80100fa <__ieee754_sqrt+0x136>
 8010118:	0049      	lsls	r1, r1, #1
 801011a:	3201      	adds	r2, #1
 801011c:	e7ef      	b.n	80100fe <__ieee754_sqrt+0x13a>
 801011e:	4680      	mov	r8, r0
 8010120:	e7bd      	b.n	801009e <__ieee754_sqrt+0xda>
 8010122:	bf00      	nop
 8010124:	7ff00000 	.word	0x7ff00000

08010128 <with_errno>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	4604      	mov	r4, r0
 801012c:	460d      	mov	r5, r1
 801012e:	4616      	mov	r6, r2
 8010130:	f7fc f846 	bl	800c1c0 <__errno>
 8010134:	4629      	mov	r1, r5
 8010136:	6006      	str	r6, [r0, #0]
 8010138:	4620      	mov	r0, r4
 801013a:	bd70      	pop	{r4, r5, r6, pc}

0801013c <xflow>:
 801013c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801013e:	4614      	mov	r4, r2
 8010140:	461d      	mov	r5, r3
 8010142:	b108      	cbz	r0, 8010148 <xflow+0xc>
 8010144:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010148:	e9cd 2300 	strd	r2, r3, [sp]
 801014c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010150:	4620      	mov	r0, r4
 8010152:	4629      	mov	r1, r5
 8010154:	f7f0 fa58 	bl	8000608 <__aeabi_dmul>
 8010158:	2222      	movs	r2, #34	; 0x22
 801015a:	b003      	add	sp, #12
 801015c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010160:	f7ff bfe2 	b.w	8010128 <with_errno>

08010164 <__math_uflow>:
 8010164:	b508      	push	{r3, lr}
 8010166:	2200      	movs	r2, #0
 8010168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801016c:	f7ff ffe6 	bl	801013c <xflow>
 8010170:	ec41 0b10 	vmov	d0, r0, r1
 8010174:	bd08      	pop	{r3, pc}

08010176 <__math_oflow>:
 8010176:	b508      	push	{r3, lr}
 8010178:	2200      	movs	r2, #0
 801017a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801017e:	f7ff ffdd 	bl	801013c <xflow>
 8010182:	ec41 0b10 	vmov	d0, r0, r1
 8010186:	bd08      	pop	{r3, pc}

08010188 <fabs>:
 8010188:	ec51 0b10 	vmov	r0, r1, d0
 801018c:	ee10 2a10 	vmov	r2, s0
 8010190:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010194:	ec43 2b10 	vmov	d0, r2, r3
 8010198:	4770      	bx	lr

0801019a <finite>:
 801019a:	b082      	sub	sp, #8
 801019c:	ed8d 0b00 	vstr	d0, [sp]
 80101a0:	9801      	ldr	r0, [sp, #4]
 80101a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80101a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80101aa:	0fc0      	lsrs	r0, r0, #31
 80101ac:	b002      	add	sp, #8
 80101ae:	4770      	bx	lr

080101b0 <scalbn>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	ec55 4b10 	vmov	r4, r5, d0
 80101b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80101ba:	4606      	mov	r6, r0
 80101bc:	462b      	mov	r3, r5
 80101be:	b99a      	cbnz	r2, 80101e8 <scalbn+0x38>
 80101c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101c4:	4323      	orrs	r3, r4
 80101c6:	d036      	beq.n	8010236 <scalbn+0x86>
 80101c8:	4b39      	ldr	r3, [pc, #228]	; (80102b0 <scalbn+0x100>)
 80101ca:	4629      	mov	r1, r5
 80101cc:	ee10 0a10 	vmov	r0, s0
 80101d0:	2200      	movs	r2, #0
 80101d2:	f7f0 fa19 	bl	8000608 <__aeabi_dmul>
 80101d6:	4b37      	ldr	r3, [pc, #220]	; (80102b4 <scalbn+0x104>)
 80101d8:	429e      	cmp	r6, r3
 80101da:	4604      	mov	r4, r0
 80101dc:	460d      	mov	r5, r1
 80101de:	da10      	bge.n	8010202 <scalbn+0x52>
 80101e0:	a32b      	add	r3, pc, #172	; (adr r3, 8010290 <scalbn+0xe0>)
 80101e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e6:	e03a      	b.n	801025e <scalbn+0xae>
 80101e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80101ec:	428a      	cmp	r2, r1
 80101ee:	d10c      	bne.n	801020a <scalbn+0x5a>
 80101f0:	ee10 2a10 	vmov	r2, s0
 80101f4:	4620      	mov	r0, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	f7f0 f850 	bl	800029c <__adddf3>
 80101fc:	4604      	mov	r4, r0
 80101fe:	460d      	mov	r5, r1
 8010200:	e019      	b.n	8010236 <scalbn+0x86>
 8010202:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010206:	460b      	mov	r3, r1
 8010208:	3a36      	subs	r2, #54	; 0x36
 801020a:	4432      	add	r2, r6
 801020c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010210:	428a      	cmp	r2, r1
 8010212:	dd08      	ble.n	8010226 <scalbn+0x76>
 8010214:	2d00      	cmp	r5, #0
 8010216:	a120      	add	r1, pc, #128	; (adr r1, 8010298 <scalbn+0xe8>)
 8010218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801021c:	da1c      	bge.n	8010258 <scalbn+0xa8>
 801021e:	a120      	add	r1, pc, #128	; (adr r1, 80102a0 <scalbn+0xf0>)
 8010220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010224:	e018      	b.n	8010258 <scalbn+0xa8>
 8010226:	2a00      	cmp	r2, #0
 8010228:	dd08      	ble.n	801023c <scalbn+0x8c>
 801022a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801022e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010232:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010236:	ec45 4b10 	vmov	d0, r4, r5
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010240:	da19      	bge.n	8010276 <scalbn+0xc6>
 8010242:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010246:	429e      	cmp	r6, r3
 8010248:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801024c:	dd0a      	ble.n	8010264 <scalbn+0xb4>
 801024e:	a112      	add	r1, pc, #72	; (adr r1, 8010298 <scalbn+0xe8>)
 8010250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1e2      	bne.n	801021e <scalbn+0x6e>
 8010258:	a30f      	add	r3, pc, #60	; (adr r3, 8010298 <scalbn+0xe8>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f9d3 	bl	8000608 <__aeabi_dmul>
 8010262:	e7cb      	b.n	80101fc <scalbn+0x4c>
 8010264:	a10a      	add	r1, pc, #40	; (adr r1, 8010290 <scalbn+0xe0>)
 8010266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0b8      	beq.n	80101e0 <scalbn+0x30>
 801026e:	a10e      	add	r1, pc, #56	; (adr r1, 80102a8 <scalbn+0xf8>)
 8010270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010274:	e7b4      	b.n	80101e0 <scalbn+0x30>
 8010276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801027a:	3236      	adds	r2, #54	; 0x36
 801027c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010280:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010284:	4620      	mov	r0, r4
 8010286:	4b0c      	ldr	r3, [pc, #48]	; (80102b8 <scalbn+0x108>)
 8010288:	2200      	movs	r2, #0
 801028a:	e7e8      	b.n	801025e <scalbn+0xae>
 801028c:	f3af 8000 	nop.w
 8010290:	c2f8f359 	.word	0xc2f8f359
 8010294:	01a56e1f 	.word	0x01a56e1f
 8010298:	8800759c 	.word	0x8800759c
 801029c:	7e37e43c 	.word	0x7e37e43c
 80102a0:	8800759c 	.word	0x8800759c
 80102a4:	fe37e43c 	.word	0xfe37e43c
 80102a8:	c2f8f359 	.word	0xc2f8f359
 80102ac:	81a56e1f 	.word	0x81a56e1f
 80102b0:	43500000 	.word	0x43500000
 80102b4:	ffff3cb0 	.word	0xffff3cb0
 80102b8:	3c900000 	.word	0x3c900000

080102bc <_init>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	bf00      	nop
 80102c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102c2:	bc08      	pop	{r3}
 80102c4:	469e      	mov	lr, r3
 80102c6:	4770      	bx	lr

080102c8 <_fini>:
 80102c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ca:	bf00      	nop
 80102cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ce:	bc08      	pop	{r3}
 80102d0:	469e      	mov	lr, r3
 80102d2:	4770      	bx	lr
